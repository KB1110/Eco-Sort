
STM32H747I_DISCO_PersonDetect_MobileNetv2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .isr_vector_m4 00000008  08100000  08100000  000c0000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata2      0000ce16  08100008  08100008  000c0008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text         00028968  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00074860  08028c20  08028c20  00038c20  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0809d480  0809d480  000ad480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  0809d488  0809d488  000ad488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0809d48c  0809d48c  000ad48c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000078f8  20000000  0809d490  000b0000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c1c  20007900  080a4d88  000b7900  2**5
                  ALLOC
 10 ._user_heap_stack 00001404  2000a51c  080a4d88  000ba51c  2**0
                  ALLOC
 11 .axiram_section 0005da00  24000000  24000000  000d0000  2**5
                  ALLOC
 12 .sram_section 00000320  30000000  30000000  000d0000  2**5
                  ALLOC
 13 .sdram_section 00d3bdc0  d0000000  d0000000  000d0000  2**5
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  000cce1e  2**0
                  CONTENTS, READONLY
 15 .comment      000000be  00000000  00000000  000cce4c  2**0
                  CONTENTS, READONLY
 16 .debug_line   00070587  00000000  00000000  000ccf0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line_str 0000012f  00000000  00000000  0013d491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_info   0006fc90  00000000  00000000  0013d5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 0000bf45  00000000  00000000  001ad250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00002970  00000000  00000000  001b9198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001da86c  00000000  00000000  001bbb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 000068b2  00000000  00000000  00396374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loclists 0003ce2f  00000000  00000000  0039cc26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  00052544  00000000  00000000  003d9a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame  0000a894  00000000  00000000  0042bf9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20007900 	.word	0x20007900
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08028bf0 	.word	0x08028bf0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20007904 	.word	0x20007904
 80002dc:	08028bf0 	.word	0x08028bf0

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b9a4 	b.w	8000710 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f83a 	bl	8000448 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__aeabi_f2lz>:
 80003e0:	ee07 0a90 	vmov	s15, r0
 80003e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80003e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003ec:	d401      	bmi.n	80003f2 <__aeabi_f2lz+0x12>
 80003ee:	f000 b80b 	b.w	8000408 <__aeabi_f2ulz>
 80003f2:	eef1 7a67 	vneg.f32	s15, s15
 80003f6:	b508      	push	{r3, lr}
 80003f8:	ee17 0a90 	vmov	r0, s15
 80003fc:	f000 f804 	bl	8000408 <__aeabi_f2ulz>
 8000400:	4240      	negs	r0, r0
 8000402:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000406:	bd08      	pop	{r3, pc}

08000408 <__aeabi_f2ulz>:
 8000408:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000438 <__aeabi_f2ulz+0x30>
 800040c:	ee07 0a90 	vmov	s15, r0
 8000410:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000440 <__aeabi_f2ulz+0x38>
 8000414:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000418:	ee27 6b06 	vmul.f64	d6, d7, d6
 800041c:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000420:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000424:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000428:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800042c:	ee16 1a10 	vmov	r1, s12
 8000430:	ee17 0a90 	vmov	r0, s15
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	00000000 	.word	0x00000000
 800043c:	3df00000 	.word	0x3df00000
 8000440:	00000000 	.word	0x00000000
 8000444:	41f00000 	.word	0x41f00000

08000448 <__udivmoddi4>:
 8000448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800044c:	9e08      	ldr	r6, [sp, #32]
 800044e:	460d      	mov	r5, r1
 8000450:	4604      	mov	r4, r0
 8000452:	460f      	mov	r7, r1
 8000454:	2b00      	cmp	r3, #0
 8000456:	d14a      	bne.n	80004ee <__udivmoddi4+0xa6>
 8000458:	428a      	cmp	r2, r1
 800045a:	4694      	mov	ip, r2
 800045c:	d965      	bls.n	800052a <__udivmoddi4+0xe2>
 800045e:	fab2 f382 	clz	r3, r2
 8000462:	b143      	cbz	r3, 8000476 <__udivmoddi4+0x2e>
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	f1c3 0220 	rsb	r2, r3, #32
 800046c:	409f      	lsls	r7, r3
 800046e:	fa20 f202 	lsr.w	r2, r0, r2
 8000472:	4317      	orrs	r7, r2
 8000474:	409c      	lsls	r4, r3
 8000476:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800047a:	fa1f f58c 	uxth.w	r5, ip
 800047e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000482:	0c22      	lsrs	r2, r4, #16
 8000484:	fb0e 7711 	mls	r7, lr, r1, r7
 8000488:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800048c:	fb01 f005 	mul.w	r0, r1, r5
 8000490:	4290      	cmp	r0, r2
 8000492:	d90a      	bls.n	80004aa <__udivmoddi4+0x62>
 8000494:	eb1c 0202 	adds.w	r2, ip, r2
 8000498:	f101 37ff 	add.w	r7, r1, #4294967295
 800049c:	f080 811c 	bcs.w	80006d8 <__udivmoddi4+0x290>
 80004a0:	4290      	cmp	r0, r2
 80004a2:	f240 8119 	bls.w	80006d8 <__udivmoddi4+0x290>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4462      	add	r2, ip
 80004aa:	1a12      	subs	r2, r2, r0
 80004ac:	b2a4      	uxth	r4, r4
 80004ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80004b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80004b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004ba:	fb00 f505 	mul.w	r5, r0, r5
 80004be:	42a5      	cmp	r5, r4
 80004c0:	d90a      	bls.n	80004d8 <__udivmoddi4+0x90>
 80004c2:	eb1c 0404 	adds.w	r4, ip, r4
 80004c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80004ca:	f080 8107 	bcs.w	80006dc <__udivmoddi4+0x294>
 80004ce:	42a5      	cmp	r5, r4
 80004d0:	f240 8104 	bls.w	80006dc <__udivmoddi4+0x294>
 80004d4:	4464      	add	r4, ip
 80004d6:	3802      	subs	r0, #2
 80004d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004dc:	1b64      	subs	r4, r4, r5
 80004de:	2100      	movs	r1, #0
 80004e0:	b11e      	cbz	r6, 80004ea <__udivmoddi4+0xa2>
 80004e2:	40dc      	lsrs	r4, r3
 80004e4:	2300      	movs	r3, #0
 80004e6:	e9c6 4300 	strd	r4, r3, [r6]
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0xbc>
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	f000 80ed 	beq.w	80006d2 <__udivmoddi4+0x28a>
 80004f8:	2100      	movs	r1, #0
 80004fa:	e9c6 0500 	strd	r0, r5, [r6]
 80004fe:	4608      	mov	r0, r1
 8000500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000504:	fab3 f183 	clz	r1, r3
 8000508:	2900      	cmp	r1, #0
 800050a:	d149      	bne.n	80005a0 <__udivmoddi4+0x158>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d302      	bcc.n	8000516 <__udivmoddi4+0xce>
 8000510:	4282      	cmp	r2, r0
 8000512:	f200 80f8 	bhi.w	8000706 <__udivmoddi4+0x2be>
 8000516:	1a84      	subs	r4, r0, r2
 8000518:	eb65 0203 	sbc.w	r2, r5, r3
 800051c:	2001      	movs	r0, #1
 800051e:	4617      	mov	r7, r2
 8000520:	2e00      	cmp	r6, #0
 8000522:	d0e2      	beq.n	80004ea <__udivmoddi4+0xa2>
 8000524:	e9c6 4700 	strd	r4, r7, [r6]
 8000528:	e7df      	b.n	80004ea <__udivmoddi4+0xa2>
 800052a:	b902      	cbnz	r2, 800052e <__udivmoddi4+0xe6>
 800052c:	deff      	udf	#255	; 0xff
 800052e:	fab2 f382 	clz	r3, r2
 8000532:	2b00      	cmp	r3, #0
 8000534:	f040 8090 	bne.w	8000658 <__udivmoddi4+0x210>
 8000538:	1a8a      	subs	r2, r1, r2
 800053a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800053e:	fa1f fe8c 	uxth.w	lr, ip
 8000542:	2101      	movs	r1, #1
 8000544:	fbb2 f5f7 	udiv	r5, r2, r7
 8000548:	fb07 2015 	mls	r0, r7, r5, r2
 800054c:	0c22      	lsrs	r2, r4, #16
 800054e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000552:	fb0e f005 	mul.w	r0, lr, r5
 8000556:	4290      	cmp	r0, r2
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x124>
 800055a:	eb1c 0202 	adds.w	r2, ip, r2
 800055e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000562:	d202      	bcs.n	800056a <__udivmoddi4+0x122>
 8000564:	4290      	cmp	r0, r2
 8000566:	f200 80cb 	bhi.w	8000700 <__udivmoddi4+0x2b8>
 800056a:	4645      	mov	r5, r8
 800056c:	1a12      	subs	r2, r2, r0
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb2 f0f7 	udiv	r0, r2, r7
 8000574:	fb07 2210 	mls	r2, r7, r0, r2
 8000578:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800057c:	fb0e fe00 	mul.w	lr, lr, r0
 8000580:	45a6      	cmp	lr, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x14e>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f100 32ff 	add.w	r2, r0, #4294967295
 800058c:	d202      	bcs.n	8000594 <__udivmoddi4+0x14c>
 800058e:	45a6      	cmp	lr, r4
 8000590:	f200 80bb 	bhi.w	800070a <__udivmoddi4+0x2c2>
 8000594:	4610      	mov	r0, r2
 8000596:	eba4 040e 	sub.w	r4, r4, lr
 800059a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800059e:	e79f      	b.n	80004e0 <__udivmoddi4+0x98>
 80005a0:	f1c1 0720 	rsb	r7, r1, #32
 80005a4:	408b      	lsls	r3, r1
 80005a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80005aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80005ae:	fa05 f401 	lsl.w	r4, r5, r1
 80005b2:	fa20 f307 	lsr.w	r3, r0, r7
 80005b6:	40fd      	lsrs	r5, r7
 80005b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005bc:	4323      	orrs	r3, r4
 80005be:	fbb5 f8f9 	udiv	r8, r5, r9
 80005c2:	fa1f fe8c 	uxth.w	lr, ip
 80005c6:	fb09 5518 	mls	r5, r9, r8, r5
 80005ca:	0c1c      	lsrs	r4, r3, #16
 80005cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80005d0:	fb08 f50e 	mul.w	r5, r8, lr
 80005d4:	42a5      	cmp	r5, r4
 80005d6:	fa02 f201 	lsl.w	r2, r2, r1
 80005da:	fa00 f001 	lsl.w	r0, r0, r1
 80005de:	d90b      	bls.n	80005f8 <__udivmoddi4+0x1b0>
 80005e0:	eb1c 0404 	adds.w	r4, ip, r4
 80005e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80005e8:	f080 8088 	bcs.w	80006fc <__udivmoddi4+0x2b4>
 80005ec:	42a5      	cmp	r5, r4
 80005ee:	f240 8085 	bls.w	80006fc <__udivmoddi4+0x2b4>
 80005f2:	f1a8 0802 	sub.w	r8, r8, #2
 80005f6:	4464      	add	r4, ip
 80005f8:	1b64      	subs	r4, r4, r5
 80005fa:	b29d      	uxth	r5, r3
 80005fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000600:	fb09 4413 	mls	r4, r9, r3, r4
 8000604:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000608:	fb03 fe0e 	mul.w	lr, r3, lr
 800060c:	45a6      	cmp	lr, r4
 800060e:	d908      	bls.n	8000622 <__udivmoddi4+0x1da>
 8000610:	eb1c 0404 	adds.w	r4, ip, r4
 8000614:	f103 35ff 	add.w	r5, r3, #4294967295
 8000618:	d26c      	bcs.n	80006f4 <__udivmoddi4+0x2ac>
 800061a:	45a6      	cmp	lr, r4
 800061c:	d96a      	bls.n	80006f4 <__udivmoddi4+0x2ac>
 800061e:	3b02      	subs	r3, #2
 8000620:	4464      	add	r4, ip
 8000622:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000626:	fba3 9502 	umull	r9, r5, r3, r2
 800062a:	eba4 040e 	sub.w	r4, r4, lr
 800062e:	42ac      	cmp	r4, r5
 8000630:	46c8      	mov	r8, r9
 8000632:	46ae      	mov	lr, r5
 8000634:	d356      	bcc.n	80006e4 <__udivmoddi4+0x29c>
 8000636:	d053      	beq.n	80006e0 <__udivmoddi4+0x298>
 8000638:	b156      	cbz	r6, 8000650 <__udivmoddi4+0x208>
 800063a:	ebb0 0208 	subs.w	r2, r0, r8
 800063e:	eb64 040e 	sbc.w	r4, r4, lr
 8000642:	fa04 f707 	lsl.w	r7, r4, r7
 8000646:	40ca      	lsrs	r2, r1
 8000648:	40cc      	lsrs	r4, r1
 800064a:	4317      	orrs	r7, r2
 800064c:	e9c6 7400 	strd	r7, r4, [r6]
 8000650:	4618      	mov	r0, r3
 8000652:	2100      	movs	r1, #0
 8000654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000658:	f1c3 0120 	rsb	r1, r3, #32
 800065c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000660:	fa20 f201 	lsr.w	r2, r0, r1
 8000664:	fa25 f101 	lsr.w	r1, r5, r1
 8000668:	409d      	lsls	r5, r3
 800066a:	432a      	orrs	r2, r5
 800066c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000670:	fa1f fe8c 	uxth.w	lr, ip
 8000674:	fbb1 f0f7 	udiv	r0, r1, r7
 8000678:	fb07 1510 	mls	r5, r7, r0, r1
 800067c:	0c11      	lsrs	r1, r2, #16
 800067e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000682:	fb00 f50e 	mul.w	r5, r0, lr
 8000686:	428d      	cmp	r5, r1
 8000688:	fa04 f403 	lsl.w	r4, r4, r3
 800068c:	d908      	bls.n	80006a0 <__udivmoddi4+0x258>
 800068e:	eb1c 0101 	adds.w	r1, ip, r1
 8000692:	f100 38ff 	add.w	r8, r0, #4294967295
 8000696:	d22f      	bcs.n	80006f8 <__udivmoddi4+0x2b0>
 8000698:	428d      	cmp	r5, r1
 800069a:	d92d      	bls.n	80006f8 <__udivmoddi4+0x2b0>
 800069c:	3802      	subs	r0, #2
 800069e:	4461      	add	r1, ip
 80006a0:	1b49      	subs	r1, r1, r5
 80006a2:	b292      	uxth	r2, r2
 80006a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80006a8:	fb07 1115 	mls	r1, r7, r5, r1
 80006ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80006b0:	fb05 f10e 	mul.w	r1, r5, lr
 80006b4:	4291      	cmp	r1, r2
 80006b6:	d908      	bls.n	80006ca <__udivmoddi4+0x282>
 80006b8:	eb1c 0202 	adds.w	r2, ip, r2
 80006bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80006c0:	d216      	bcs.n	80006f0 <__udivmoddi4+0x2a8>
 80006c2:	4291      	cmp	r1, r2
 80006c4:	d914      	bls.n	80006f0 <__udivmoddi4+0x2a8>
 80006c6:	3d02      	subs	r5, #2
 80006c8:	4462      	add	r2, ip
 80006ca:	1a52      	subs	r2, r2, r1
 80006cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80006d0:	e738      	b.n	8000544 <__udivmoddi4+0xfc>
 80006d2:	4631      	mov	r1, r6
 80006d4:	4630      	mov	r0, r6
 80006d6:	e708      	b.n	80004ea <__udivmoddi4+0xa2>
 80006d8:	4639      	mov	r1, r7
 80006da:	e6e6      	b.n	80004aa <__udivmoddi4+0x62>
 80006dc:	4610      	mov	r0, r2
 80006de:	e6fb      	b.n	80004d8 <__udivmoddi4+0x90>
 80006e0:	4548      	cmp	r0, r9
 80006e2:	d2a9      	bcs.n	8000638 <__udivmoddi4+0x1f0>
 80006e4:	ebb9 0802 	subs.w	r8, r9, r2
 80006e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80006ec:	3b01      	subs	r3, #1
 80006ee:	e7a3      	b.n	8000638 <__udivmoddi4+0x1f0>
 80006f0:	4645      	mov	r5, r8
 80006f2:	e7ea      	b.n	80006ca <__udivmoddi4+0x282>
 80006f4:	462b      	mov	r3, r5
 80006f6:	e794      	b.n	8000622 <__udivmoddi4+0x1da>
 80006f8:	4640      	mov	r0, r8
 80006fa:	e7d1      	b.n	80006a0 <__udivmoddi4+0x258>
 80006fc:	46d0      	mov	r8, sl
 80006fe:	e77b      	b.n	80005f8 <__udivmoddi4+0x1b0>
 8000700:	3d02      	subs	r5, #2
 8000702:	4462      	add	r2, ip
 8000704:	e732      	b.n	800056c <__udivmoddi4+0x124>
 8000706:	4608      	mov	r0, r1
 8000708:	e70a      	b.n	8000520 <__udivmoddi4+0xd8>
 800070a:	4464      	add	r4, ip
 800070c:	3802      	subs	r0, #2
 800070e:	e742      	b.n	8000596 <__udivmoddi4+0x14e>

08000710 <__aeabi_idiv0>:
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop

08000714 <Reset_Handler_m4>:
    .section  .text.Reset_Handler_m4
  .weak  Reset_Handler_m4
  .type  Reset_Handler_m4, %function
Reset_Handler_m4:
 Infinite_Loop:
  b  Infinite_Loop
 8000714:	e7fe      	b.n	8000714 <Reset_Handler_m4>
	...

08000718 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000718:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000750 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800071c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800071e:	e003      	b.n	8000728 <LoopCopyDataInit>

08000720 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000722:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000724:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000726:	3104      	adds	r1, #4

08000728 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800072c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800072e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000730:	d3f6      	bcc.n	8000720 <CopyDataInit>
  ldr  r2, =_sbss
 8000732:	4a0b      	ldr	r2, [pc, #44]	; (8000760 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000734:	e002      	b.n	800073c <LoopFillZerobss>

08000736 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000736:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000738:	f842 3b04 	str.w	r3, [r2], #4

0800073c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800073e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000740:	d3f9      	bcc.n	8000736 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000742:	f006 fc41 	bl	8006fc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000746:	f025 ff87 	bl	8026658 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800074a:	f004 fd21 	bl	8005190 <main>
  bx  lr    
 800074e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000750:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000754:	0809d490 	.word	0x0809d490
  ldr  r0, =_sdata
 8000758:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800075c:	200078f8 	.word	0x200078f8
  ldr  r2, =_sbss
 8000760:	20007900 	.word	0x20007900
  ldr  r3, = _ebss
 8000764:	2000a51c 	.word	0x2000a51c

08000768 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000768:	e7fe      	b.n	8000768 <ADC3_IRQHandler>
	...

0800076c <ai_get_input_format>:
 * @brief Returns the input format type
 * @retval ai_size Input format type: quantized (AI_BUFFER_FMT_TYPE_Q) or float (AI_BUFFER_FMT_TYPE_FLOAT)
 */
ai_size ai_get_input_format(void)
{
  ai_buffer_format fmt = AI_BUFFER_FORMAT(&ai_input[0]);
 800076c:	4b02      	ldr	r3, [pc, #8]	; (8000778 <ai_get_input_format+0xc>)
  return AI_BUFFER_FMT_GET_TYPE(fmt);
 800076e:	6818      	ldr	r0, [r3, #0]
}
 8000770:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	2000791c 	.word	0x2000791c

0800077c <ai_get_output_format>:
 * @brief Returns the output format type
 * @retval ai_size Output format type: quantized (AI_BUFFER_FMT_TYPE_Q) or float (AI_BUFFER_FMT_TYPE_FLOAT)
 */
ai_size ai_get_output_format(void)
{
  ai_buffer_format fmt = AI_BUFFER_FORMAT(&ai_output[0]);
 800077c:	4b02      	ldr	r3, [pc, #8]	; (8000788 <ai_get_output_format+0xc>)
  return AI_BUFFER_FMT_GET_TYPE(fmt);
 800077e:	6818      	ldr	r0, [r3, #0]
}
 8000780:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	20007938 	.word	0x20007938

0800078c <ai_get_input_quantized_format>:
 * @brief Returns value of the input quantized format
 * @retval ai_size Input quantized format
 */
ai_size ai_get_input_quantized_format(void)
{
  ai_buffer_format fmt = AI_BUFFER_FORMAT(&ai_input[0]);
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <ai_get_input_quantized_format+0x18>)
 800078e:	681b      	ldr	r3, [r3, #0]
  return (AI_BUFFER_FMT_GET_BITS(fmt) - AI_BUFFER_FMT_GET_SIGN(fmt) - AI_BUFFER_FMT_GET_FBITS(fmt));
 8000790:	f3c3 52c0 	ubfx	r2, r3, #23, #1
 8000794:	f3c3 10c6 	ubfx	r0, r3, #7, #7
 8000798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800079c:	1a80      	subs	r0, r0, r2
 800079e:	3b40      	subs	r3, #64	; 0x40
}
 80007a0:	1ac0      	subs	r0, r0, r3
 80007a2:	4770      	bx	lr
 80007a4:	2000791c 	.word	0x2000791c

080007a8 <ai_get_input_quantization_scheme>:
 * @brief Returns value of the scale for the input quantized format
 * @retval ai_size Scale for input quantized format
 */
ai_float ai_get_input_scale(void)
{
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_input[0].meta_info, 0);
 80007a8:	4a0d      	ldr	r2, [pc, #52]	; (80007e0 <ai_get_input_quantization_scheme+0x38>)
 80007aa:	6893      	ldr	r3, [r2, #8]
 80007ac:	b1b3      	cbz	r3, 80007dc <ai_get_input_quantization_scheme+0x34>
 80007ae:	6818      	ldr	r0, [r3, #0]
 80007b0:	f010 0001 	ands.w	r0, r0, #1
 80007b4:	d013      	beq.n	80007de <ai_get_input_quantization_scheme+0x36>
 80007b6:	6858      	ldr	r0, [r3, #4]
 80007b8:	b188      	cbz	r0, 80007de <ai_get_input_quantization_scheme+0x36>
 80007ba:	6843      	ldr	r3, [r0, #4]
 80007bc:	b173      	cbz	r3, 80007dc <ai_get_input_quantization_scheme+0x34>
 80007be:	8840      	ldrh	r0, [r0, #2]
 80007c0:	b168      	cbz	r0, 80007de <ai_get_input_quantization_scheme+0x36>
 80007c2:	681b      	ldr	r3, [r3, #0]
  ai_size sign = AI_BUFFER_FMT_GET_SIGN(fmt);  
 80007c4:	6810      	ldr	r0, [r2, #0]
  if(scale==0)
 80007c6:	edd3 7a00 	vldr	s15, [r3]
  ai_size sign = AI_BUFFER_FMT_GET_SIGN(fmt);  
 80007ca:	f3c0 50c0 	ubfx	r0, r0, #23, #1
  if(scale==0)
 80007ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80007d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007d6:	d001      	beq.n	80007dc <ai_get_input_quantization_scheme+0x34>
    if(sign==0)
 80007d8:	3001      	adds	r0, #1
 80007da:	4770      	bx	lr
    return AI_FXP_Q;
 80007dc:	2000      	movs	r0, #0
}
 80007de:	4770      	bx	lr
 80007e0:	2000791c 	.word	0x2000791c

080007e4 <ai_get_output_quantization_scheme>:
 * @brief Returns value of the scale for the output quantized format
 * @retval ai_size Scale for output quantized format
 */
ai_float ai_get_output_scale(void)
{
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_output[0].meta_info, 0);
 80007e4:	4a0d      	ldr	r2, [pc, #52]	; (800081c <ai_get_output_quantization_scheme+0x38>)
 80007e6:	6893      	ldr	r3, [r2, #8]
 80007e8:	b1b3      	cbz	r3, 8000818 <ai_get_output_quantization_scheme+0x34>
 80007ea:	6818      	ldr	r0, [r3, #0]
 80007ec:	f010 0001 	ands.w	r0, r0, #1
 80007f0:	d013      	beq.n	800081a <ai_get_output_quantization_scheme+0x36>
 80007f2:	6858      	ldr	r0, [r3, #4]
 80007f4:	b188      	cbz	r0, 800081a <ai_get_output_quantization_scheme+0x36>
 80007f6:	6843      	ldr	r3, [r0, #4]
 80007f8:	b173      	cbz	r3, 8000818 <ai_get_output_quantization_scheme+0x34>
 80007fa:	8840      	ldrh	r0, [r0, #2]
 80007fc:	b168      	cbz	r0, 800081a <ai_get_output_quantization_scheme+0x36>
 80007fe:	681b      	ldr	r3, [r3, #0]
  ai_size sign = AI_BUFFER_FMT_GET_SIGN(fmt);  
 8000800:	6810      	ldr	r0, [r2, #0]
  if(scale==0)
 8000802:	edd3 7a00 	vldr	s15, [r3]
  ai_size sign = AI_BUFFER_FMT_GET_SIGN(fmt);  
 8000806:	f3c0 50c0 	ubfx	r0, r0, #23, #1
  if(scale==0)
 800080a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800080e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000812:	d001      	beq.n	8000818 <ai_get_output_quantization_scheme+0x34>
    if(sign==0)
 8000814:	3001      	adds	r0, #1
 8000816:	4770      	bx	lr
    return AI_FXP_Q;
 8000818:	2000      	movs	r0, #0
}
 800081a:	4770      	bx	lr
 800081c:	20007938 	.word	0x20007938

08000820 <ai_get_output_fxp_scale>:
  fmt_1 = AI_BUFFER_FORMAT(&ai_output[0]);
 8000820:	4a07      	ldr	r2, [pc, #28]	; (8000840 <ai_get_output_fxp_scale+0x20>)
  scale = 1.0f / (0x1U << AI_BUFFER_FMT_GET_FBITS(fmt_1));
 8000822:	2301      	movs	r3, #1
 8000824:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000828:	6812      	ldr	r2, [r2, #0]
 800082a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800082e:	3a40      	subs	r2, #64	; 0x40
 8000830:	4093      	lsls	r3, r2
 8000832:	ee00 3a10 	vmov	s0, r3
 8000836:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 800083a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800083e:	4770      	bx	lr
 8000840:	20007938 	.word	0x20007938

08000844 <ai_get_input_scale>:
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_input[0].meta_info, 0);
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <ai_get_input_scale+0x28>)
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	b163      	cbz	r3, 8000864 <ai_get_input_scale+0x20>
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	07d2      	lsls	r2, r2, #31
 800084e:	d509      	bpl.n	8000864 <ai_get_input_scale+0x20>
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	b13b      	cbz	r3, 8000864 <ai_get_input_scale+0x20>
 8000854:	685a      	ldr	r2, [r3, #4]
 8000856:	b12a      	cbz	r2, 8000864 <ai_get_input_scale+0x20>
 8000858:	885b      	ldrh	r3, [r3, #2]
 800085a:	b11b      	cbz	r3, 8000864 <ai_get_input_scale+0x20>
 800085c:	6813      	ldr	r3, [r2, #0]
 800085e:	ed93 0a00 	vldr	s0, [r3]
 8000862:	4770      	bx	lr
 8000864:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8000870 <ai_get_input_scale+0x2c>
}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	2000791c 	.word	0x2000791c
 8000870:	00000000 	.word	0x00000000

08000874 <ai_get_input_zero_point>:
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_input[0].meta_info, 0);
 8000874:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <ai_get_input_zero_point+0x44>)
 8000876:	689a      	ldr	r2, [r3, #8]
 8000878:	b192      	cbz	r2, 80008a0 <ai_get_input_zero_point+0x2c>
 800087a:	6813      	ldr	r3, [r2, #0]
 800087c:	f013 0001 	ands.w	r0, r3, #1
 8000880:	d00d      	beq.n	800089e <ai_get_input_zero_point+0x2a>
 8000882:	6850      	ldr	r0, [r2, #4]
 8000884:	b158      	cbz	r0, 800089e <ai_get_input_zero_point+0x2a>
 8000886:	8803      	ldrh	r3, [r0, #0]
 8000888:	f013 0f02 	tst.w	r3, #2
 800088c:	6843      	ldr	r3, [r0, #4]
 800088e:	d009      	beq.n	80008a4 <ai_get_input_zero_point+0x30>
 8000890:	b123      	cbz	r3, 800089c <ai_get_input_zero_point+0x28>
 8000892:	8840      	ldrh	r0, [r0, #2]
 8000894:	b118      	cbz	r0, 800089e <ai_get_input_zero_point+0x2a>
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	7818      	ldrb	r0, [r3, #0]
 800089a:	4770      	bx	lr
 800089c:	4618      	mov	r0, r3
}
 800089e:	4770      	bx	lr
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_input[0].meta_info, 0);
 80008a0:	4610      	mov	r0, r2
 80008a2:	4770      	bx	lr
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d0f9      	beq.n	800089c <ai_get_input_zero_point+0x28>
 80008a8:	8840      	ldrh	r0, [r0, #2]
 80008aa:	2800      	cmp	r0, #0
 80008ac:	d0f7      	beq.n	800089e <ai_get_input_zero_point+0x2a>
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	f993 0000 	ldrsb.w	r0, [r3]
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	2000791c 	.word	0x2000791c

080008bc <ai_get_output_scale>:
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_output[0].meta_info, 0);
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <ai_get_output_scale+0x28>)
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	b163      	cbz	r3, 80008dc <ai_get_output_scale+0x20>
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	07d2      	lsls	r2, r2, #31
 80008c6:	d509      	bpl.n	80008dc <ai_get_output_scale+0x20>
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	b13b      	cbz	r3, 80008dc <ai_get_output_scale+0x20>
 80008cc:	685a      	ldr	r2, [r3, #4]
 80008ce:	b12a      	cbz	r2, 80008dc <ai_get_output_scale+0x20>
 80008d0:	885b      	ldrh	r3, [r3, #2]
 80008d2:	b11b      	cbz	r3, 80008dc <ai_get_output_scale+0x20>
 80008d4:	6813      	ldr	r3, [r2, #0]
 80008d6:	ed93 0a00 	vldr	s0, [r3]
 80008da:	4770      	bx	lr
 80008dc:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80008e8 <ai_get_output_scale+0x2c>
}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	20007938 	.word	0x20007938
 80008e8:	00000000 	.word	0x00000000

080008ec <ai_get_output_zero_point>:
 * @brief Returns value of the zero point for the output quantized format
 * @retval ai_size Zero point for output quantized format
 */
ai_i32 ai_get_output_zero_point(void)
{
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_output[0].meta_info, 0);
 80008ec:	4b10      	ldr	r3, [pc, #64]	; (8000930 <ai_get_output_zero_point+0x44>)
 80008ee:	689a      	ldr	r2, [r3, #8]
 80008f0:	b192      	cbz	r2, 8000918 <ai_get_output_zero_point+0x2c>
 80008f2:	6813      	ldr	r3, [r2, #0]
 80008f4:	f013 0001 	ands.w	r0, r3, #1
 80008f8:	d00d      	beq.n	8000916 <ai_get_output_zero_point+0x2a>
 80008fa:	6850      	ldr	r0, [r2, #4]
 80008fc:	b158      	cbz	r0, 8000916 <ai_get_output_zero_point+0x2a>
 80008fe:	8803      	ldrh	r3, [r0, #0]
 8000900:	f013 0f02 	tst.w	r3, #2
 8000904:	6843      	ldr	r3, [r0, #4]
 8000906:	d009      	beq.n	800091c <ai_get_output_zero_point+0x30>
 8000908:	b123      	cbz	r3, 8000914 <ai_get_output_zero_point+0x28>
 800090a:	8840      	ldrh	r0, [r0, #2]
 800090c:	b118      	cbz	r0, 8000916 <ai_get_output_zero_point+0x2a>
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	7818      	ldrb	r0, [r3, #0]
 8000912:	4770      	bx	lr
 8000914:	4618      	mov	r0, r3
}
 8000916:	4770      	bx	lr
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_output[0].meta_info, 0);
 8000918:	4610      	mov	r0, r2
 800091a:	4770      	bx	lr
 800091c:	2b00      	cmp	r3, #0
 800091e:	d0f9      	beq.n	8000914 <ai_get_output_zero_point+0x28>
 8000920:	8840      	ldrh	r0, [r0, #2]
 8000922:	2800      	cmp	r0, #0
 8000924:	d0f7      	beq.n	8000916 <ai_get_output_zero_point+0x2a>
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f993 0000 	ldrsb.w	r0, [r3]
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	20007938 	.word	0x20007938

08000934 <ai_init>:
 * @brief Initializes the generated C model for a neural network
 * @param  activation_buffer Pointer to the activation buffer (i.e. working buffer used during NN inference)
 * @retval ai_handle
 */
ai_handle ai_init(void* activation_buffer)
{
 8000934:	b5f0      	push	{r4, r5, r6, r7, lr}
  network_handle = AI_HANDLE_NULL;
 8000936:	4c18      	ldr	r4, [pc, #96]	; (8000998 <ai_init+0x64>)
{
 8000938:	b08f      	sub	sp, #60	; 0x3c
  network_handle = AI_HANDLE_NULL;
 800093a:	2100      	movs	r1, #0
{
 800093c:	4605      	mov	r5, r0

  /* Creating the network */
  ai_network_create(&network_handle, AI_NETWORK_DATA_CONFIG);
 800093e:	4620      	mov	r0, r4
  
  /*Retrieve network descriptor*/
  ai_network_get_info(network_handle, &desc_report);
  
  /*Copy descriptor info*/
  ai_input[0]= desc_report.inputs[0];
 8000940:	4e16      	ldr	r6, [pc, #88]	; (800099c <ai_init+0x68>)
  network_handle = AI_HANDLE_NULL;
 8000942:	6021      	str	r1, [r4, #0]
  ai_network_create(&network_handle, AI_NETWORK_DATA_CONFIG);
 8000944:	f006 f8ac 	bl	8006aa0 <ai_network_create>
  const ai_network_params params = AI_NETWORK_PARAMS_INIT(
 8000948:	f006 f904 	bl	8006b54 <ai_network_data_weights_get>
 800094c:	4601      	mov	r1, r0
 800094e:	4668      	mov	r0, sp
 8000950:	f006 f8e8 	bl	8006b24 <ai_network_data_weights_buffer_get>
 8000954:	4629      	mov	r1, r5
 8000956:	a807      	add	r0, sp, #28
  ai_network_get_info(network_handle, &desc_report);
 8000958:	4d11      	ldr	r5, [pc, #68]	; (80009a0 <ai_init+0x6c>)
  const ai_network_params params = AI_NETWORK_PARAMS_INIT(
 800095a:	f006 f8cb 	bl	8006af4 <ai_network_data_activations_buffer_get>
  ai_network_init(network_handle, &params);
 800095e:	4669      	mov	r1, sp
 8000960:	6820      	ldr	r0, [r4, #0]
 8000962:	f006 f8ad 	bl	8006ac0 <ai_network_init>
  ai_network_get_info(network_handle, &desc_report);
 8000966:	4629      	mov	r1, r5
 8000968:	6820      	ldr	r0, [r4, #0]
 800096a:	f006 f84b 	bl	8006a04 <ai_network_get_info>
  ai_input[0]= desc_report.inputs[0];
 800096e:	6b6f      	ldr	r7, [r5, #52]	; 0x34
  ai_output[0]= desc_report.outputs[0];
 8000970:	6bad      	ldr	r5, [r5, #56]	; 0x38
  ai_input[0]= desc_report.inputs[0];
 8000972:	46bc      	mov	ip, r7
  ai_output[0]= desc_report.outputs[0];
 8000974:	4c0b      	ldr	r4, [pc, #44]	; (80009a4 <ai_init+0x70>)
  ai_input[0]= desc_report.inputs[0];
 8000976:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800097a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800097c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8000980:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  ai_output[0]= desc_report.outputs[0];
 8000984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000988:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800098c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  
  return desc_report.inputs->data;
}
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	b00f      	add	sp, #60	; 0x3c
 8000994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000996:	bf00      	nop
 8000998:	200079d0 	.word	0x200079d0
 800099c:	2000791c 	.word	0x2000791c
 80009a0:	20007954 	.word	0x20007954
 80009a4:	20007938 	.word	0x20007938

080009a8 <ai_deinit>:

/**
 * @brief De-initializes the generated C model for a neural network
 */
void ai_deinit(void) { ai_network_destroy(network_handle); }
 80009a8:	4b01      	ldr	r3, [pc, #4]	; (80009b0 <ai_deinit+0x8>)
 80009aa:	6818      	ldr	r0, [r3, #0]
 80009ac:	f006 b886 	b.w	8006abc <ai_network_destroy>
 80009b0:	200079d0 	.word	0x200079d0

080009b4 <ai_run>:
 * @brief  Run an inference of the generated C model for a neural network
 * @param  input   Pointer to the buffer containing the inference input data
 * @param  output  Pointer to the buffer for the inference output data
 */
void ai_run(void* input, void* output)
{
 80009b4:	b570      	push	{r4, r5, r6, lr}
  ai_i32 nbatch;
  
  ai_input[0].data = AI_HANDLE_PTR(input);
 80009b6:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <ai_run+0x20>)
{
 80009b8:	4605      	mov	r5, r0
  ai_output[0].data = AI_HANDLE_PTR(output);
 80009ba:	4a07      	ldr	r2, [pc, #28]	; (80009d8 <ai_run+0x24>)
{
 80009bc:	460c      	mov	r4, r1
  
  nbatch = ai_network_run(network_handle, &ai_input[0], &ai_output[0]);
 80009be:	4e07      	ldr	r6, [pc, #28]	; (80009dc <ai_run+0x28>)
 80009c0:	4619      	mov	r1, r3
  ai_input[0].data = AI_HANDLE_PTR(input);
 80009c2:	605d      	str	r5, [r3, #4]
  nbatch = ai_network_run(network_handle, &ai_input[0], &ai_output[0]);
 80009c4:	6830      	ldr	r0, [r6, #0]
  ai_output[0].data = AI_HANDLE_PTR(output);
 80009c6:	6054      	str	r4, [r2, #4]
  nbatch = ai_network_run(network_handle, &ai_input[0], &ai_output[0]);
 80009c8:	f006 f892 	bl	8006af0 <ai_network_run>
  
  if (nbatch != 1) {
 80009cc:	2801      	cmp	r0, #1
 80009ce:	d000      	beq.n	80009d2 <ai_run+0x1e>
        while(1);
 80009d0:	e7fe      	b.n	80009d0 <ai_run+0x1c>
  }
}
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
 80009d4:	2000791c 	.word	0x2000791c
 80009d8:	20007938 	.word	0x20007938
 80009dc:	200079d0 	.word	0x200079d0

080009e0 <AI_Init>:
  * @brief  Initializes the generated C model for a neural network
  * @param  Ai_Context_Ptr Pointer to the AI NN context
  * @retval None
  */
void AI_Init(AiContext_TypeDef* Ai_Context_Ptr)
{
 80009e0:	b570      	push	{r4, r5, r6, lr}
 80009e2:	4606      	mov	r6, r0
#ifdef AI_NETWORK_INPUTS_IN_ACTIVATIONS
  void *input_data_ptr;
  
  input_data_ptr =ai_init((void*)(Ai_Context_Ptr->activation_buffer));
 80009e4:	6880      	ldr	r0, [r0, #8]
{
 80009e6:	ed2d 8b02 	vpush	{d8}
 80009ea:	b082      	sub	sp, #8
  input_data_ptr =ai_init((void*)(Ai_Context_Ptr->activation_buffer));
 80009ec:	f7ff ffa2 	bl	8000934 <ai_init>
  
  if(input_data_ptr!= NULL)
 80009f0:	b100      	cbz	r0, 80009f4 <AI_Init+0x14>
    Ai_Context_Ptr->nn_input_buffer=input_data_ptr;
 80009f2:	6070      	str	r0, [r6, #4]
 Ai_Context_Ptr->lut=pixel_conv_lut;
 80009f4:	4c57      	ldr	r4, [pc, #348]	; (8000b54 <AI_Init+0x174>)
  float prepro_scale = Ai_Context_Ptr->nn_input_norm_scale;
 80009f6:	ed96 8a04 	vldr	s16, [r6, #16]
 Ai_Context_Ptr->lut=pixel_conv_lut;
 80009fa:	60f4      	str	r4, [r6, #12]
  int32_t prepro_zp = Ai_Context_Ptr->nn_input_norm_zp;
 80009fc:	6975      	ldr	r5, [r6, #20]
  switch(ai_get_input_quantization_scheme())
 80009fe:	f7ff fed3 	bl	80007a8 <ai_get_input_quantization_scheme>
 8000a02:	2801      	cmp	r0, #1
 8000a04:	d007      	beq.n	8000a16 <AI_Init+0x36>
 8000a06:	2802      	cmp	r0, #2
 8000a08:	d05f      	beq.n	8000aca <AI_Init+0xea>
 8000a0a:	2800      	cmp	r0, #0
 8000a0c:	d047      	beq.n	8000a9e <AI_Init+0xbe>
  ai_init((void*)(Ai_Context_Ptr->activation_buffer));
#endif
  
  Ai_Context_Init(Ai_Context_Ptr);
  Compute_pix_conv_tab(Ai_Context_Ptr);
}
 8000a0e:	b002      	add	sp, #8
 8000a10:	ecbd 8b02 	vpop	{d8}
 8000a14:	bd70      	pop	{r4, r5, r6, pc}
    Precompute_8IntU(lut, ai_get_input_scale(), ai_get_input_zero_point(), prepro_scale, prepro_zp);
 8000a16:	f7ff ff15 	bl	8000844 <ai_get_input_scale>
 8000a1a:	eef0 8a40 	vmov.f32	s17, s0
 8000a1e:	f7ff ff29 	bl	8000874 <ai_get_input_zero_point>
 8000a22:	f1c4 0101 	rsb	r1, r4, #1
 8000a26:	1e62      	subs	r2, r4, #1
 8000a28:	f104 0cff 	add.w	ip, r4, #255	; 0xff
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t), 0, 255, uint8_t);
 8000a2c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    float tmp = (i - zp_prepro) * scale_prepro;
 8000a30:	1b49      	subs	r1, r1, r5
 8000a32:	ee68 6a28 	vmul.f32	s13, s16, s17
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t), 0, 255, uint8_t);
 8000a36:	b2c4      	uxtb	r4, r0
 8000a38:	e016      	b.n	8000a68 <AI_Init+0x88>
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	dd2d      	ble.n	8000a9a <AI_Init+0xba>
 8000a3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a46:	bf4c      	ite	mi
 8000a48:	ee77 7ac6 	vsubmi.f32	s15, s15, s12
 8000a4c:	ee77 7a86 	vaddpl.f32	s15, s15, s12
 8000a50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a54:	edcd 7a01 	vstr	s15, [sp, #4]
 8000a58:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000a5c:	4423      	add	r3, r4
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	f802 3f01 	strb.w	r3, [r2, #1]!
  for (int32_t i = 0 ; i < 256 ; i++)
 8000a64:	4562      	cmp	r2, ip
 8000a66:	d0d2      	beq.n	8000a0e <AI_Init+0x2e>
    float tmp = (i - zp_prepro) * scale_prepro;
 8000a68:	188b      	adds	r3, r1, r2
 8000a6a:	ee07 3a90 	vmov	s15, r3
 8000a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t), 0, 255, uint8_t);
 8000a72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000a76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a7e:	bf4c      	ite	mi
 8000a80:	ee37 7ac6 	vsubmi.f32	s14, s15, s12
 8000a84:	ee37 7a86 	vaddpl.f32	s14, s15, s12
 8000a88:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000a8c:	ee17 3a10 	vmov	r3, s14
 8000a90:	4403      	add	r3, r0
 8000a92:	2bfe      	cmp	r3, #254	; 0xfe
 8000a94:	ddd1      	ble.n	8000a3a <AI_Init+0x5a>
 8000a96:	23ff      	movs	r3, #255	; 0xff
 8000a98:	e7e2      	b.n	8000a60 <AI_Init+0x80>
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e7e0      	b.n	8000a60 <AI_Init+0x80>
    Precompute_8FXP(lut, ai_get_input_quantized_format());
 8000a9e:	f7ff fe75 	bl	800078c <ai_get_input_quantized_format>
   *(lut+index)=__USAT((index + (1 << q_input_shift)) >> (1 + q_input_shift), 8);
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	1e62      	subs	r2, r4, #1
 for(index=0;index<256;index++)
 8000aa6:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8000aaa:	1b19      	subs	r1, r3, r4
   *(lut+index)=__USAT((index + (1 << q_input_shift)) >> (1 + q_input_shift), 8);
 8000aac:	4083      	lsls	r3, r0
 8000aae:	3001      	adds	r0, #1
 8000ab0:	4419      	add	r1, r3
 8000ab2:	188b      	adds	r3, r1, r2
 8000ab4:	40c3      	lsrs	r3, r0
 8000ab6:	f383 0308 	usat	r3, #8, r3
 8000aba:	f802 3f01 	strb.w	r3, [r2, #1]!
 for(index=0;index<256;index++)
 8000abe:	4295      	cmp	r5, r2
 8000ac0:	d1f7      	bne.n	8000ab2 <AI_Init+0xd2>
}
 8000ac2:	b002      	add	sp, #8
 8000ac4:	ecbd 8b02 	vpop	{d8}
 8000ac8:	bd70      	pop	{r4, r5, r6, pc}
    Precompute_8IntS(lut, ai_get_input_scale(), ai_get_input_zero_point(), prepro_scale, prepro_zp);
 8000aca:	f7ff febb 	bl	8000844 <ai_get_input_scale>
 8000ace:	eef0 8a40 	vmov.f32	s17, s0
 8000ad2:	f7ff fecf 	bl	8000874 <ai_get_input_zero_point>
 8000ad6:	f1c4 0101 	rsb	r1, r4, #1
 8000ada:	1e62      	subs	r2, r4, #1
 8000adc:	f104 0cff 	add.w	ip, r4, #255	; 0xff
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t),  -128, 127, int8_t);
 8000ae0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    float tmp = (i - zp_prepro) * scale_prepro;
 8000ae4:	1b49      	subs	r1, r1, r5
 8000ae6:	ee68 6a28 	vmul.f32	s13, s16, s17
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t),  -128, 127, int8_t);
 8000aea:	b2c4      	uxtb	r4, r0
 8000aec:	e017      	b.n	8000b1e <AI_Init+0x13e>
 8000aee:	337f      	adds	r3, #127	; 0x7f
 8000af0:	db2e      	blt.n	8000b50 <AI_Init+0x170>
 8000af2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000afa:	bf4c      	ite	mi
 8000afc:	ee77 7ac6 	vsubmi.f32	s15, s15, s12
 8000b00:	ee77 7a86 	vaddpl.f32	s15, s15, s12
 8000b04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b08:	edcd 7a01 	vstr	s15, [sp, #4]
 8000b0c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000b10:	4423      	add	r3, r4
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	f802 3f01 	strb.w	r3, [r2, #1]!
  for (int32_t i = 0 ; i < 256 ; i++)
 8000b18:	4594      	cmp	ip, r2
 8000b1a:	f43f af78 	beq.w	8000a0e <AI_Init+0x2e>
    float tmp = (i - zp_prepro) * scale_prepro;
 8000b1e:	188b      	adds	r3, r1, r2
 8000b20:	ee07 3a90 	vmov	s15, r3
 8000b24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t),  -128, 127, int8_t);
 8000b28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000b2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b34:	bf4c      	ite	mi
 8000b36:	ee37 7ac6 	vsubmi.f32	s14, s15, s12
 8000b3a:	ee37 7a86 	vaddpl.f32	s14, s15, s12
 8000b3e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000b42:	ee17 3a10 	vmov	r3, s14
 8000b46:	4403      	add	r3, r0
 8000b48:	2b7e      	cmp	r3, #126	; 0x7e
 8000b4a:	ddd0      	ble.n	8000aee <AI_Init+0x10e>
 8000b4c:	237f      	movs	r3, #127	; 0x7f
 8000b4e:	e7e1      	b.n	8000b14 <AI_Init+0x134>
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	e7df      	b.n	8000b14 <AI_Init+0x134>
 8000b54:	200079f0 	.word	0x200079f0

08000b58 <AI_Run>:
* @param  Ai_Context_Ptr Pointer to the AI NN context
* @retval None
*/
void AI_Run(AiContext_TypeDef* Ai_Context_Ptr)
{
  ai_run((void*)Ai_Context_Ptr->nn_input_buffer, (void*)Ai_Context_Ptr->nn_output_buffer);
 8000b58:	e9d0 1000 	ldrd	r1, r0, [r0]
 8000b5c:	f7ff bf2a 	b.w	80009b4 <ai_run>

08000b60 <AI_PixelValueConversion>:
* @param  Ai_Context_Ptr Pointer to the AI NN context
* @param  pSrc           Pointer to source buffer
* @retval None
*/
void AI_PixelValueConversion(AiContext_TypeDef* Ai_Context_Ptr, void *pSrc)
{
 8000b60:	b538      	push	{r3, r4, r5, lr}
 8000b62:	4605      	mov	r5, r0
 8000b64:	460c      	mov	r4, r1
  /**Check format of the input so to call the right fucntion for pixel format conversion**/
  if(ai_get_input_format() == AI_BUFFER_FMT_TYPE_Q)
 8000b66:	f7ff fe01 	bl	800076c <ai_get_input_format>
 8000b6a:	2802      	cmp	r0, #2
 8000b6c:	d02a      	beq.n	8000bc4 <AI_PixelValueConversion+0x64>
  {
    AI_PixelValueConversion_QuantizedNN(Ai_Context_Ptr, (uint8_t *)pSrc);
  }
  else if(ai_get_input_format() == AI_BUFFER_FMT_TYPE_FLOAT)
 8000b6e:	f7ff fdfd 	bl	800076c <ai_get_input_format>
 8000b72:	2801      	cmp	r0, #1
 8000b74:	d000      	beq.n	8000b78 <AI_PixelValueConversion+0x18>
      while(1);
    }
  }
  else
  {
    while(1);
 8000b76:	e7fe      	b.n	8000b76 <AI_PixelValueConversion+0x16>
    if(Ai_Context_Ptr->nn_input_norm_scale == 255.0f)
 8000b78:	edd5 7a04 	vldr	s15, [r5, #16]
 8000b7c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000c24 <AI_PixelValueConversion+0xc4>
 8000b80:	eef4 7a47 	vcmp.f32	s15, s14
 8000b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b88:	d03a      	beq.n	8000c00 <AI_PixelValueConversion+0xa0>
    else if(Ai_Context_Ptr->nn_input_norm_scale == 127.0f)
 8000b8a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000c28 <AI_PixelValueConversion+0xc8>
 8000b8e:	eef4 7a47 	vcmp.f32	s15, s14
 8000b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b96:	d132      	bne.n	8000bfe <AI_PixelValueConversion+0x9e>
    while(1);
  }

  for (int32_t i = 0; i < nb_pixels; i++)
  {
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000b98:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
  float *pDst = (float *) Ai_Context_Ptr->nn_input_buffer;
 8000b9c:	686b      	ldr	r3, [r5, #4]
  for (int32_t i = 0; i < nb_pixels; i++)
 8000b9e:	f504 4240 	add.w	r2, r4, #49152	; 0xc000
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000ba2:	eddf 6a22 	vldr	s13, [pc, #136]	; 8000c2c <AI_PixelValueConversion+0xcc>
 8000ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000baa:	eeb0 7a46 	vmov.f32	s14, s12
 8000bae:	ee07 1a90 	vmov	s15, r1
  for (int32_t i = 0; i < nb_pixels; i++)
 8000bb2:	4294      	cmp	r4, r2
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bb8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8000bbc:	eca3 7a01 	vstmia	r3!, {s14}
  for (int32_t i = 0; i < nb_pixels; i++)
 8000bc0:	d1f1      	bne.n	8000ba6 <AI_PixelValueConversion+0x46>
}
 8000bc2:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t *pDst = (uint8_t *) Ai_Context_Ptr->nn_input_buffer;
 8000bc4:	686b      	ldr	r3, [r5, #4]
  const uint8_t *lut = Ai_Context_Ptr->lut;
 8000bc6:	68e9      	ldr	r1, [r5, #12]
  if (pDst > pSrc)
 8000bc8:	429c      	cmp	r4, r3
 8000bca:	d20b      	bcs.n	8000be4 <AI_PixelValueConversion+0x84>
 8000bcc:	f504 4240 	add.w	r2, r4, #49152	; 0xc000
 8000bd0:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
      pDst[i] = lut[pSrc[i]];
 8000bd4:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
 8000bd8:	5c08      	ldrb	r0, [r1, r0]
    for (int32_t i = nb_pixels - 1; i >= 0; i--)
 8000bda:	42a2      	cmp	r2, r4
      pDst[i] = lut[pSrc[i]];
 8000bdc:	f803 0d01 	strb.w	r0, [r3, #-1]!
    for (int32_t i = nb_pixels - 1; i >= 0; i--)
 8000be0:	d1f8      	bne.n	8000bd4 <AI_PixelValueConversion+0x74>
}
 8000be2:	bd38      	pop	{r3, r4, r5, pc}
 8000be4:	f64b 7cff 	movw	ip, #49151	; 0xbfff
 8000be8:	1e62      	subs	r2, r4, #1
 8000bea:	3b01      	subs	r3, #1
 8000bec:	44a4      	add	ip, r4
      pDst[i] = lut[pSrc[i]];
 8000bee:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8000bf2:	5c08      	ldrb	r0, [r1, r0]
    for (int32_t i = 0; i < nb_pixels; i++)
 8000bf4:	4594      	cmp	ip, r2
      pDst[i] = lut[pSrc[i]];
 8000bf6:	f803 0f01 	strb.w	r0, [r3, #1]!
    for (int32_t i = 0; i < nb_pixels; i++)
 8000bfa:	d1f8      	bne.n	8000bee <AI_PixelValueConversion+0x8e>
}
 8000bfc:	bd38      	pop	{r3, r4, r5, pc}
      while(1);
 8000bfe:	e7fe      	b.n	8000bfe <AI_PixelValueConversion+0x9e>
  float *pDst = (float *) Ai_Context_Ptr->nn_input_buffer;
 8000c00:	686b      	ldr	r3, [r5, #4]
  for (int32_t i = 0; i < nb_pixels; i++)
 8000c02:	f504 4240 	add.w	r2, r4, #49152	; 0xc000
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000c06:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000c30 <AI_PixelValueConversion+0xd0>
 8000c0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c0e:	ee07 1a90 	vmov	s15, r1
  for (int32_t i = 0; i < nb_pixels; i++)
 8000c12:	4294      	cmp	r4, r2
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c1c:	ece3 7a01 	vstmia	r3!, {s15}
  for (int32_t i = 0; i < nb_pixels; i++)
 8000c20:	d1f3      	bne.n	8000c0a <AI_PixelValueConversion+0xaa>
}
 8000c22:	bd38      	pop	{r3, r4, r5, pc}
 8000c24:	437f0000 	.word	0x437f0000
 8000c28:	42fe0000 	.word	0x42fe0000
 8000c2c:	3c008081 	.word	0x3c008081
 8000c30:	3b808081 	.word	0x3b808081

08000c34 <AI_Output_Dequantize>:
* @brief  Performs the dequantization of a quantized NN output
* @param  Ai_Context_Ptr Pointer to the AI NN context
* @retval None
*/
void AI_Output_Dequantize(AiContext_TypeDef* Ai_Context_Ptr)
{
 8000c34:	b510      	push	{r4, lr}
 8000c36:	ed2d 8b02 	vpush	{d8}
 8000c3a:	4604      	mov	r4, r0
  /**Check format of the output and convert to float if required**/
  if(ai_get_output_format() == AI_BUFFER_FMT_TYPE_Q)
 8000c3c:	f7ff fd9e 	bl	800077c <ai_get_output_format>
 8000c40:	2802      	cmp	r0, #2
 8000c42:	d002      	beq.n	8000c4a <AI_Output_Dequantize+0x16>
      
    default:
      break;
    }  
  }
}
 8000c44:	ecbd 8b02 	vpop	{d8}
 8000c48:	bd10      	pop	{r4, pc}
    switch(ai_get_output_quantization_scheme())
 8000c4a:	f7ff fdcb 	bl	80007e4 <ai_get_output_quantization_scheme>
 8000c4e:	2801      	cmp	r0, #1
 8000c50:	d07a      	beq.n	8000d48 <AI_Output_Dequantize+0x114>
 8000c52:	2802      	cmp	r0, #2
 8000c54:	d037      	beq.n	8000cc6 <AI_Output_Dequantize+0x92>
 8000c56:	2800      	cmp	r0, #0
 8000c58:	d1f4      	bne.n	8000c44 <AI_Output_Dequantize+0x10>
      scale=ai_get_output_fxp_scale();
 8000c5a:	f7ff fde1 	bl	8000820 <ai_get_output_fxp_scale>
      nn_output_i8 = (ai_i8 *) Ai_Context_Ptr->nn_output_buffer;
 8000c5e:	6823      	ldr	r3, [r4, #0]
        float q_value = (float) *(nn_output_i8 + i);
 8000c60:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8000c64:	ee05 2a90 	vmov	s11, r2
 8000c68:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8000c6c:	ee06 2a10 	vmov	s12, r2
 8000c70:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000c74:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8000c78:	ee06 2a90 	vmov	s13, r2
 8000c7c:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000c80:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8000c84:	ee07 2a10 	vmov	s14, r2
 8000c88:	f993 2000 	ldrsb.w	r2, [r3]
 8000c8c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000c90:	ee07 2a90 	vmov	s15, r2
 8000c94:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        *(nn_output_f32 + i) = scale * q_value;
 8000c98:	ee65 5a80 	vmul.f32	s11, s11, s0
        float q_value = (float) *(nn_output_i8 + i);
 8000c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        *(nn_output_f32 + i) = scale * q_value;
 8000ca0:	ee26 6a00 	vmul.f32	s12, s12, s0
 8000ca4:	ee66 6a80 	vmul.f32	s13, s13, s0
 8000ca8:	edc3 5a04 	vstr	s11, [r3, #16]
 8000cac:	ee27 7a00 	vmul.f32	s14, s14, s0
 8000cb0:	ee67 7a80 	vmul.f32	s15, s15, s0
 8000cb4:	ed83 6a03 	vstr	s12, [r3, #12]
 8000cb8:	edc3 6a02 	vstr	s13, [r3, #8]
 8000cbc:	ed83 7a01 	vstr	s14, [r3, #4]
 8000cc0:	edc3 7a00 	vstr	s15, [r3]
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 8000cc4:	e7be      	b.n	8000c44 <AI_Output_Dequantize+0x10>
      scale = ai_get_output_scale();
 8000cc6:	f7ff fdf9 	bl	80008bc <ai_get_output_scale>
 8000cca:	eeb0 8a40 	vmov.f32	s16, s0
      zero_point = ai_get_output_zero_point();
 8000cce:	f7ff fe0d 	bl	80008ec <ai_get_output_zero_point>
      nn_output_i8 = (ai_i8 *) Ai_Context_Ptr->nn_output_buffer;
 8000cd2:	6823      	ldr	r3, [r4, #0]
        int32_t q_value = (int32_t) *(nn_output_i8 + i);
 8000cd4:	f993 4004 	ldrsb.w	r4, [r3, #4]
 8000cd8:	f993 1003 	ldrsb.w	r1, [r3, #3]
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8000cdc:	1a24      	subs	r4, r4, r0
        int32_t q_value = (int32_t) *(nn_output_i8 + i);
 8000cde:	f993 2002 	ldrsb.w	r2, [r3, #2]
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8000ce2:	1a09      	subs	r1, r1, r0
 8000ce4:	ee05 4a90 	vmov	s11, r4
 8000ce8:	1a12      	subs	r2, r2, r0
 8000cea:	ee06 1a10 	vmov	s12, r1
        int32_t q_value = (int32_t) *(nn_output_i8 + i);
 8000cee:	f993 1001 	ldrsb.w	r1, [r3, #1]
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8000cf2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8000cf6:	ee06 2a90 	vmov	s13, r2
 8000cfa:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
        int32_t q_value = (int32_t) *(nn_output_i8 + i);
 8000cfe:	f993 2000 	ldrsb.w	r2, [r3]
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8000d02:	1a09      	subs	r1, r1, r0
 8000d04:	1a12      	subs	r2, r2, r0
 8000d06:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000d0a:	ee07 1a10 	vmov	s14, r1
 8000d0e:	ee07 2a90 	vmov	s15, r2
 8000d12:	ee65 5a88 	vmul.f32	s11, s11, s16
 8000d16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d1e:	ee26 6a08 	vmul.f32	s12, s12, s16
 8000d22:	edc3 5a04 	vstr	s11, [r3, #16]
 8000d26:	ee66 6a88 	vmul.f32	s13, s13, s16
 8000d2a:	ee27 7a08 	vmul.f32	s14, s14, s16
 8000d2e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8000d32:	ed83 6a03 	vstr	s12, [r3, #12]
 8000d36:	edc3 6a02 	vstr	s13, [r3, #8]
 8000d3a:	ed83 7a01 	vstr	s14, [r3, #4]
 8000d3e:	edc3 7a00 	vstr	s15, [r3]
}
 8000d42:	ecbd 8b02 	vpop	{d8}
 8000d46:	bd10      	pop	{r4, pc}
      scale = ai_get_output_scale();
 8000d48:	f7ff fdb8 	bl	80008bc <ai_get_output_scale>
 8000d4c:	eeb0 8a40 	vmov.f32	s16, s0
      zero_point = ai_get_output_zero_point();
 8000d50:	f7ff fdcc 	bl	80008ec <ai_get_output_zero_point>
      nn_output_u8 = (ai_u8 *) Ai_Context_Ptr->nn_output_buffer;
 8000d54:	6823      	ldr	r3, [r4, #0]
        int32_t q_value = (int32_t) *(nn_output_u8 + i);
 8000d56:	791c      	ldrb	r4, [r3, #4]
 8000d58:	78d9      	ldrb	r1, [r3, #3]
 8000d5a:	789a      	ldrb	r2, [r3, #2]
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8000d5c:	1a24      	subs	r4, r4, r0
 8000d5e:	1a09      	subs	r1, r1, r0
 8000d60:	1a12      	subs	r2, r2, r0
 8000d62:	ee05 4a90 	vmov	s11, r4
 8000d66:	ee06 1a10 	vmov	s12, r1
        int32_t q_value = (int32_t) *(nn_output_u8 + i);
 8000d6a:	7859      	ldrb	r1, [r3, #1]
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8000d6c:	ee06 2a90 	vmov	s13, r2
 8000d70:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8000d74:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
        int32_t q_value = (int32_t) *(nn_output_u8 + i);
 8000d78:	781a      	ldrb	r2, [r3, #0]
 8000d7a:	e7c2      	b.n	8000d02 <AI_Output_Dequantize+0xce>

08000d7c <AI_Deinit>:
/**
 * @brief De-initializes the generated C model for a neural network
 */
void AI_Deinit(void) 
{ 
  ai_deinit(); 
 8000d7c:	f7ff be14 	b.w	80009a8 <ai_deinit>

08000d80 <APP_Init>:
  App_Context_Ptr->Operating_Mode=NOMINAL;
  App_Context_Ptr->run_loop=1;
  
  /*Initializes app pointers to contextx*/
  App_Context_Ptr->Camera_ContextPtr=&CameraContext;
  App_Context_Ptr->Display_ContextPtr=&Display_Context;
 8000d80:	4926      	ldr	r1, [pc, #152]	; (8000e1c <APP_Init+0x9c>)
  App_Context_Ptr->Camera_ContextPtr=&CameraContext;
 8000d82:	4a27      	ldr	r2, [pc, #156]	; (8000e20 <APP_Init+0xa0>)
  App_Context_Ptr->Utils_ContextPtr=&UtilsContext;
  App_Context_Ptr->Test_ContextPtr=&TestContext;
 8000d84:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <APP_Init+0xa4>)
  
  /**AI**/
  App_Context_Ptr->Ai_ContextPtr->AppCtxPtr =App_Context_Ptr;
  App_Context_Ptr->Ai_ContextPtr->nn_output_buffer=nn_output_buff;
  /*{scale,zero-point} set to {127.5,127} since Person Detect NN model was trained using input data normalized in the range [-1, 1]*/
  App_Context_Ptr->Ai_ContextPtr->nn_input_norm_scale=127.5f;
 8000d86:	eddf 7a28 	vldr	s15, [pc, #160]	; 8000e28 <APP_Init+0xa8>
  strcpy(App_Context_Ptr->Test_ContextPtr->ValidationContext.class_path,"/onboard_valid_dataset_qvga_mobilenetv2");
 8000d8a:	f503 7c70 	add.w	ip, r3, #960	; 0x3c0
/**
 * @brief Initializes the application context structure
 * @param App_Context_Ptr pointer to application context
 */
void APP_Init(AppContext_TypeDef *App_Context_Ptr)
{  
 8000d8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  App_Context_Ptr->Display_ContextPtr=&Display_Context;
 8000d92:	6301      	str	r1, [r0, #48]	; 0x30
  App_Context_Ptr->Operating_Mode=NOMINAL;
 8000d94:	2701      	movs	r7, #1
  App_Context_Ptr->Ai_ContextPtr=&Ai_Context;
 8000d96:	4925      	ldr	r1, [pc, #148]	; (8000e2c <APP_Init+0xac>)
{  
 8000d98:	4604      	mov	r4, r0
  App_Context_Ptr->Operating_Mode=NOMINAL;
 8000d9a:	7007      	strb	r7, [r0, #0]
  App_Context_Ptr->Ai_ContextPtr->nn_input_norm_zp=127;
 8000d9c:	f04f 0a7f 	mov.w	sl, #127	; 0x7f
  App_Context_Ptr->run_loop=1;
 8000da0:	6047      	str	r7, [r0, #4]
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.w = AI_NETWORK_WIDTH;
 8000da2:	2680      	movs	r6, #128	; 0x80
  App_Context_Ptr->Camera_ContextPtr=&CameraContext;
 8000da4:	6282      	str	r2, [r0, #40]	; 0x28
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data = NULL; /* Set by Init_DataMemoryLayout */
 8000da6:	f04f 0e00 	mov.w	lr, #0
  App_Context_Ptr->Ai_ContextPtr=&Ai_Context;
 8000daa:	63c1      	str	r1, [r0, #60]	; 0x3c
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.bpp = IMAGE_BPP_RGB565;
 8000dac:	f04f 0902 	mov.w	r9, #2
  App_Context_Ptr->Preproc_ContextPtr=&Preproc_Context;
 8000db0:	491f      	ldr	r1, [pc, #124]	; (8000e30 <APP_Init+0xb0>)
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.bpp = IMAGE_BPP_RGB888;
 8000db2:	f04f 0804 	mov.w	r8, #4
  strcpy(App_Context_Ptr->Test_ContextPtr->ValidationContext.class_path,"/onboard_valid_dataset_qvga_mobilenetv2");
 8000db6:	4d1f      	ldr	r5, [pc, #124]	; (8000e34 <APP_Init+0xb4>)
  App_Context_Ptr->Test_ContextPtr=&TestContext;
 8000db8:	6383      	str	r3, [r0, #56]	; 0x38
  App_Context_Ptr->Preproc_ContextPtr=&Preproc_Context;
 8000dba:	62c1      	str	r1, [r0, #44]	; 0x2c
  App_Context_Ptr->Ai_ContextPtr->nn_output_buffer=nn_output_buff;
 8000dbc:	f8df b07c 	ldr.w	fp, [pc, #124]	; 8000e3c <APP_Init+0xbc>
  App_Context_Ptr->Camera_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000dc0:	e9c2 0706 	strd	r0, r7, [r2, #24]
  App_Context_Ptr->Utils_ContextPtr=&UtilsContext;
 8000dc4:	4a1c      	ldr	r2, [pc, #112]	; (8000e38 <APP_Init+0xb8>)
 8000dc6:	6342      	str	r2, [r0, #52]	; 0x34
  App_Context_Ptr->Utils_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000dc8:	6390      	str	r0, [r2, #56]	; 0x38
  App_Context_Ptr->Test_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000dca:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
  strcpy(App_Context_Ptr->Test_ContextPtr->ValidationContext.class_path,"/onboard_valid_dataset_qvga_mobilenetv2");
 8000dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000dd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000dda:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000dde:	e88c 0003 	stmia.w	ip, {r0, r1}
  App_Context_Ptr->Display_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000de2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  App_Context_Init(App_Context_Ptr);
  Init_DataMemoryLayout(App_Context_Ptr);
 8000de4:	4620      	mov	r0, r4
  App_Context_Ptr->Display_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000de6:	60dc      	str	r4, [r3, #12]
  App_Context_Ptr->Ai_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000de8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  App_Context_Ptr->Ai_ContextPtr->nn_output_buffer=nn_output_buff;
 8000dea:	f8c3 b000 	str.w	fp, [r3]
  App_Context_Ptr->Ai_ContextPtr->nn_input_norm_scale=127.5f;
 8000dee:	edc3 7a04 	vstr	s15, [r3, #16]
  App_Context_Ptr->Ai_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000df2:	e9c3 a405 	strd	sl, r4, [r3, #20]
  App_Context_Ptr->Preproc_ContextPtr->AppCtxPtr = App_Context_Ptr;
 8000df6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  App_Context_Ptr->Preproc_ContextPtr->red_blue_swap = 1; /* See UM2611 section 3.2.6 Pixel data order */
 8000df8:	609f      	str	r7, [r3, #8]
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.bpp = IMAGE_BPP_RGB565;
 8000dfa:	f8c3 9044 	str.w	r9, [r3, #68]	; 0x44
  App_Context_Ptr->Preproc_ContextPtr->AppCtxPtr = App_Context_Ptr;
 8000dfe:	64dc      	str	r4, [r3, #76]	; 0x4c
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data = NULL; /* Set by Init_DataMemoryLayout */
 8000e00:	f8c3 e048 	str.w	lr, [r3, #72]	; 0x48
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data = NULL; /* Set by Init_DataMemoryLayout */
 8000e04:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.bpp = IMAGE_BPP_RGB888;
 8000e08:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.h = AI_NETWORK_HEIGHT;
 8000e0c:	e9c3 660f 	strd	r6, r6, [r3, #60]	; 0x3c
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.h = AI_NETWORK_HEIGHT;
 8000e10:	e9c3 6607 	strd	r6, r6, [r3, #28]
}
 8000e14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Init_DataMemoryLayout(App_Context_Ptr);
 8000e18:	f018 ba4c 	b.w	80192b4 <Init_DataMemoryLayout>
 8000e1c:	20007bd4 	.word	0x20007bd4
 8000e20:	20007b48 	.word	0x20007b48
 8000e24:	200083b8 	.word	0x200083b8
 8000e28:	42ff0000 	.word	0x42ff0000
 8000e2c:	200079d4 	.word	0x200079d4
 8000e30:	20007be4 	.word	0x20007be4
 8000e34:	08028c70 	.word	0x08028c70
 8000e38:	20008f14 	.word	0x20008f14
 8000e3c:	20007b34 	.word	0x20007b34

08000e40 <APP_GetNextReadyFrame>:
 *        1. send it to LCD for display
 *        2. make it available for subsequent processing
 * @param App_Context_Ptr pointer to application context
 */
void APP_GetNextReadyFrame(AppContext_TypeDef *App_Context_Ptr)
{
 8000e40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint8_t* cam_capture_buff = App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer;
#if MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT
  uint8_t* cam_frame_buff = App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
#endif
  
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 8000e44:	7807      	ldrb	r7, [r0, #0]
{
 8000e46:	4606      	mov	r6, r0
  uint8_t* cam_capture_buff = App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer;
 8000e48:	6a82      	ldr	r2, [r0, #40]	; 0x28
{
 8000e4a:	b08d      	sub	sp, #52	; 0x34
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 8000e4c:	2f02      	cmp	r7, #2
  ValidationContext_TypeDef* Validation_Ctx_Ptr=&App_Context_Ptr->Test_ContextPtr->ValidationContext;
 8000e4e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  uint8_t* cam_frame_buff = App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
 8000e50:	e9d2 4500 	ldrd	r4, r5, [r2]
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 8000e54:	f000 808a 	beq.w	8000f6c <APP_GetNextReadyFrame+0x12c>
  {
    TEST_GetNextValidationInput(App_Context_Ptr->Test_ContextPtr, 
                                cam_capture_buff);    
  } 
  else if((App_Context_Ptr->Operating_Mode == DUMP) && 
 8000e58:	2f03      	cmp	r7, #3
          (App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource == SDCARD_FILE))
 8000e5a:	f890 9004 	ldrb.w	r9, [r0, #4]
  else if((App_Context_Ptr->Operating_Mode == DUMP) && 
 8000e5e:	d03c      	beq.n	8000eda <APP_GetNextReadyFrame+0x9a>
                          cam_capture_buff);
  }
  else
  {
    /* Wait for current camera acquisition to complete*/
    while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8000e60:	7d13      	ldrb	r3, [r2, #20]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d0fc      	beq.n	8000e60 <APP_GetNextReadyFrame+0x20>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8000e66:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000e6a:	46a0      	mov	r8, r4
 8000e6c:	f01a fc10 	bl	801b690 <UTIL_LCD_Clear>
  if (operating_mode == VALID || ((operating_mode == DUMP) && (frame_source == SDCARD_FILE)))
 8000e70:	2f02      	cmp	r7, #2
 8000e72:	d045      	beq.n	8000f00 <APP_GetNextReadyFrame+0xc0>
 8000e74:	2f03      	cmp	r7, #3
 8000e76:	d108      	bne.n	8000e8a <APP_GetNextReadyFrame+0x4a>
 8000e78:	f1b9 0f03 	cmp.w	r9, #3
 8000e7c:	d105      	bne.n	8000e8a <APP_GetNextReadyFrame+0x4a>
    UTILS_DCache_Coherency_Maintenance((void *)camera_capture_buffer, buffer_size, CLEAN);
 8000e7e:	2202      	movs	r2, #2
 8000e80:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8000e84:	4640      	mov	r0, r8
 8000e86:	f004 f901 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
    DISPLAY_Copy2LCDWriteBuffer(App_Context_Ptr->Display_ContextPtr,
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	22f0      	movs	r2, #240	; 0xf0
 8000e8e:	4641      	mov	r1, r8
 8000e90:	9303      	str	r3, [sp, #12]
 8000e92:	2302      	movs	r3, #2
 8000e94:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8000e98:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	2378      	movs	r3, #120	; 0x78
 8000ea0:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8000ea2:	f000 fd77 	bl	8001994 <DISPLAY_Copy2LCDWriteBuffer>
  
  /* DMA2D transfer from camera frame buffer to LCD write buffer */
  CameraCaptureBuff2LcdBuff_Copy(App_Context_Ptr);
  
#if MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT  
  if(App_Context_Ptr->Operating_Mode != VALID)
 8000ea6:	7833      	ldrb	r3, [r6, #0]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d005      	beq.n	8000eb8 <APP_GetNextReadyFrame+0x78>
  {
    /****Coherency purpose: invalidate the camera_capture_buffer area in L1 D-Cache before CPU reading****/
    UTILS_DCache_Coherency_Maintenance((void*)cam_capture_buff, 
 8000eac:	2201      	movs	r2, #1
 8000eae:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	f004 f8ea 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
 8000eb8:	1c63      	adds	r3, r4, #1
 8000eba:	1aeb      	subs	r3, r5, r3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d95f      	bls.n	8000f80 <APP_GetNextReadyFrame+0x140>
 8000ec0:	4623      	mov	r3, r4
 8000ec2:	462a      	mov	r2, r5
 8000ec4:	f504 3016 	add.w	r0, r4, #153600	; 0x25800
  }
  
  /****Copy the camera_capture_buff buffer content onto the camera_frame_buff buffer so to release the camera capture buffer before triggering the subsequent camera frame capture****/
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
  {
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 8000ec8:	f853 1b04 	ldr.w	r1, [r3], #4
 8000ecc:	4283      	cmp	r3, r0
 8000ece:	f842 1b04 	str.w	r1, [r2], #4
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8000ed2:	d1f9      	bne.n	8000ec8 <APP_GetNextReadyFrame+0x88>
  }
#endif
}
 8000ed4:	b00d      	add	sp, #52	; 0x34
 8000ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if((App_Context_Ptr->Operating_Mode == DUMP) && 
 8000eda:	f1b9 0f03 	cmp.w	r9, #3
 8000ede:	d1bf      	bne.n	8000e60 <APP_GetNextReadyFrame+0x20>
    TEST_GetNextDumpInput(App_Context_Ptr->Test_ContextPtr, 
 8000ee0:	4621      	mov	r1, r4
 8000ee2:	f002 fa95 	bl	8003410 <TEST_GetNextDumpInput>
  MemDumpFrameSource_TypeDef frame_source = App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource;
 8000ee6:	6bb2      	ldr	r2, [r6, #56]	; 0x38
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8000ee8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
  uint8_t *camera_capture_buffer = App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer;
 8000eec:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  AppOperatingMode_TypeDef operating_mode = App_Context_Ptr->Operating_Mode;
 8000eee:	7837      	ldrb	r7, [r6, #0]
  MemDumpFrameSource_TypeDef frame_source = App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource;
 8000ef0:	f892 9004 	ldrb.w	r9, [r2, #4]
  uint8_t *camera_capture_buffer = App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer;
 8000ef4:	f8d3 8000 	ldr.w	r8, [r3]
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8000ef8:	f01a fbca 	bl	801b690 <UTIL_LCD_Clear>
  if (operating_mode == VALID || ((operating_mode == DUMP) && (frame_source == SDCARD_FILE)))
 8000efc:	2f02      	cmp	r7, #2
 8000efe:	d1b9      	bne.n	8000e74 <APP_GetNextReadyFrame+0x34>
    UTILS_DCache_Coherency_Maintenance((void *)camera_capture_buffer, buffer_size, CLEAN);
 8000f00:	463a      	mov	r2, r7
 8000f02:	4640      	mov	r0, r8
 8000f04:	f44f 3116 	mov.w	r1, #153600	; 0x25800
    camera_out_img.w = CAM_RES_WIDTH;
 8000f08:	f04f 09f0 	mov.w	r9, #240	; 0xf0
    UTILS_DCache_Coherency_Maintenance((void *)camera_capture_buffer, buffer_size, CLEAN);
 8000f0c:	f004 f8be 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
    thumb_img.data = valid_image_buff;
 8000f10:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <APP_GetNextReadyFrame+0x164>)
    STM32Ipl_Downscale(&camera_out_img, &thumb_img, false);
 8000f12:	a908      	add	r1, sp, #32
 8000f14:	2200      	movs	r2, #0
 8000f16:	a804      	add	r0, sp, #16
    thumb_img.data = valid_image_buff;
 8000f18:	930b      	str	r3, [sp, #44]	; 0x2c
    thumb_img.bpp = IMAGE_BPP_RGB565;
 8000f1a:	970a      	str	r7, [sp, #40]	; 0x28
    camera_out_img.bpp = IMAGE_BPP_RGB565;
 8000f1c:	e9cd 7806 	strd	r7, r8, [sp, #24]
    camera_out_img.w = CAM_RES_WIDTH;
 8000f20:	f44f 78a0 	mov.w	r8, #320	; 0x140
 8000f24:	e9cd 8904 	strd	r8, r9, [sp, #16]
    thumb_img.w = 224;
 8000f28:	f04f 08e0 	mov.w	r8, #224	; 0xe0
 8000f2c:	f04f 09e0 	mov.w	r9, #224	; 0xe0
 8000f30:	e9cd 8908 	strd	r8, r9, [sp, #32]
    STM32Ipl_Downscale(&camera_out_img, &thumb_img, false);
 8000f34:	f01a f85e 	bl	801aff4 <STM32Ipl_Downscale>
    UTILS_DCache_Coherency_Maintenance((void *)thumb_img.data, STM32Ipl_ImageDataSize(&thumb_img), CLEAN);
 8000f38:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8000f3c:	a808      	add	r0, sp, #32
 8000f3e:	f018 faf5 	bl	801952c <STM32Ipl_ImageDataSize>
 8000f42:	463a      	mov	r2, r7
 8000f44:	4601      	mov	r1, r0
 8000f46:	4640      	mov	r0, r8
 8000f48:	f004 f8a0 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
    DISPLAY_Copy2LCDWriteBuffer(App_Context_Ptr->Display_ContextPtr,
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8000f52:	9203      	str	r2, [sp, #12]
 8000f54:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	2382      	movs	r3, #130	; 0x82
 8000f5c:	9200      	str	r2, [sp, #0]
 8000f5e:	2232      	movs	r2, #50	; 0x32
 8000f60:	9702      	str	r7, [sp, #8]
 8000f62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000f64:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8000f66:	f000 fd15 	bl	8001994 <DISPLAY_Copy2LCDWriteBuffer>
 8000f6a:	e79c      	b.n	8000ea6 <APP_GetNextReadyFrame+0x66>
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 8000f6c:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8000f70:	b19b      	cbz	r3, 8000f9a <APP_GetNextReadyFrame+0x15a>
    while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8000f72:	7d13      	ldrb	r3, [r2, #20]
          (App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource == SDCARD_FILE))
 8000f74:	f890 9004 	ldrb.w	r9, [r0, #4]
    while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	f43f af71 	beq.w	8000e60 <APP_GetNextReadyFrame+0x20>
 8000f7e:	e772      	b.n	8000e66 <APP_GetNextReadyFrame+0x26>
 8000f80:	4809      	ldr	r0, [pc, #36]	; (8000fa8 <APP_GetNextReadyFrame+0x168>)
 8000f82:	1e63      	subs	r3, r4, #1
 8000f84:	1e6a      	subs	r2, r5, #1
 8000f86:	4420      	add	r0, r4
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 8000f88:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8000f8c:	4283      	cmp	r3, r0
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 8000f8e:	f802 1f01 	strb.w	r1, [r2, #1]!
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8000f92:	d1f9      	bne.n	8000f88 <APP_GetNextReadyFrame+0x148>
}
 8000f94:	b00d      	add	sp, #52	; 0x34
 8000f96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    TEST_GetNextValidationInput(App_Context_Ptr->Test_ContextPtr, 
 8000f9a:	4621      	mov	r1, r4
 8000f9c:	f002 fa9c 	bl	80034d8 <TEST_GetNextValidationInput>
 8000fa0:	e7a1      	b.n	8000ee6 <APP_GetNextReadyFrame+0xa6>
 8000fa2:	bf00      	nop
 8000fa4:	d0100000 	.word	0xd0100000
 8000fa8:	000257ff 	.word	0x000257ff

08000fac <APP_StartNewFrameAcquisition>:
/**
 * @brief Start the camera acquisition of the subsequent frame
 * @param App_Context_Ptr pointer to application context
 */
void APP_StartNewFrameAcquisition(AppContext_TypeDef *App_Context_Ptr)
{
 8000fac:	b570      	push	{r4, r5, r6, lr}
  if(App_Context_Ptr->Operating_Mode == NOMINAL || 
 8000fae:	7803      	ldrb	r3, [r0, #0]
{
 8000fb0:	4604      	mov	r4, r0
  if(App_Context_Ptr->Operating_Mode == NOMINAL || 
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d008      	beq.n	8000fc8 <APP_StartNewFrameAcquisition+0x1c>
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	d006      	beq.n	8000fc8 <APP_StartNewFrameAcquisition+0x1c>
     App_Context_Ptr->Operating_Mode == CAPTURE || 
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	d000      	beq.n	8000fc0 <APP_StartNewFrameAcquisition+0x14>
    
    /***Resume the camera capture in NOMINAL mode****/
    BSP_CAMERA_Resume(0);
  //  __enable_irq();
  }
}
 8000fbe:	bd70      	pop	{r4, r5, r6, pc}
       ((App_Context_Ptr->Operating_Mode == DUMP)&& (App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource != SDCARD_FILE)))
 8000fc0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000fc2:	791b      	ldrb	r3, [r3, #4]
 8000fc4:	2b03      	cmp	r3, #3
 8000fc6:	d0fa      	beq.n	8000fbe <APP_StartNewFrameAcquisition+0x12>
    App_Context_Ptr->Camera_ContextPtr->vsync_it=0;
 8000fc8:	2500      	movs	r5, #0
 8000fca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8000fcc:	6b66      	ldr	r6, [r4, #52]	; 0x34
    App_Context_Ptr->Camera_ContextPtr->vsync_it=0;
 8000fce:	609d      	str	r5, [r3, #8]
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8000fd0:	f00a fc54 	bl	800b87c <HAL_GetTick>
    App_Context_Ptr->Camera_ContextPtr->new_frame_ready = 0;
 8000fd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8000fd6:	4602      	mov	r2, r0
    BSP_CAMERA_Resume(0);
 8000fd8:	4628      	mov	r0, r5
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8000fda:	61b2      	str	r2, [r6, #24]
    App_Context_Ptr->Camera_ContextPtr->new_frame_ready = 0;
 8000fdc:	751d      	strb	r5, [r3, #20]
}
 8000fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    BSP_CAMERA_Resume(0);
 8000fe2:	f009 bc53 	b.w	800a88c <BSP_CAMERA_Resume>
 8000fe6:	bf00      	nop

08000fe8 <APP_FramePreprocess>:
 * @param App_Context_Ptr pointer to application context
 */
void APP_FramePreprocess(AppContext_TypeDef *App_Context_Ptr)
{
  /*Call a fct in charge of executing the sequence of preprocessing steps*/
  Run_Preprocessing(App_Context_Ptr);
 8000fe8:	f018 b978 	b.w	80192dc <Run_Preprocessing>

08000fec <APP_NetworkInference>:
/**
 * @brief Run neural network inference on preprocessed captured frame
 * @param App_Context_Ptr pointer to application context
 */
void APP_NetworkInference(AppContext_TypeDef *App_Context_Ptr)
{
 8000fec:	b570      	push	{r4, r5, r6, lr}
 8000fee:	4604      	mov	r4, r0
  uint32_t tinf_stop;
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_input_buffer);
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[3];
  TestRunCtxt_Ptr->src_width_size=AI_NETWORK_WIDTH;
 8000ff0:	2180      	movs	r1, #128	; 0x80
  TestRunCtxt_Ptr->src_height_size=AI_NETWORK_HEIGHT;
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB888;
  TestRunCtxt_Ptr->src_size=AI_NET_INPUT_SIZE_BYTES;
  TestRunCtxt_Ptr->PerformCapture=1;
 8000ff2:	2201      	movs	r2, #1
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB888;
 8000ff4:	2504      	movs	r5, #4
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[3];
 8000ff6:	4e15      	ldr	r6, [pc, #84]	; (800104c <APP_NetworkInference+0x60>)
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
 8000ff8:	e9d0 300e 	ldrd	r3, r0, [r0, #56]	; 0x38
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_input_buffer);
 8000ffc:	6840      	ldr	r0, [r0, #4]
  TestRunCtxt_Ptr->src_width_size=AI_NETWORK_WIDTH;
 8000ffe:	f8c3 15d0 	str.w	r1, [r3, #1488]	; 0x5d0
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_input_buffer);
 8001002:	f8c3 05c8 	str.w	r0, [r3, #1480]	; 0x5c8
  TestRunCtxt_Ptr->src_size=AI_NET_INPUT_SIZE_BYTES;
 8001006:	f44f 4040 	mov.w	r0, #49152	; 0xc000
  TestRunCtxt_Ptr->src_height_size=AI_NETWORK_HEIGHT;
 800100a:	f8c3 15d4 	str.w	r1, [r3, #1492]	; 0x5d4
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_RAW;
 800100e:	2100      	movs	r1, #0
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB888;
 8001010:	f8c3 55d8 	str.w	r5, [r3, #1496]	; 0x5d8
  TestRunCtxt_Ptr->src_size=AI_NET_INPUT_SIZE_BYTES;
 8001014:	f8c3 05dc 	str.w	r0, [r3, #1500]	; 0x5dc
  TestRunCtxt_Ptr->rb_swap=1;
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8001018:	4618      	mov	r0, r3
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[3];
 800101a:	f8c3 65cc 	str.w	r6, [r3, #1484]	; 0x5cc
  TestRunCtxt_Ptr->PerformCapture=1;
 800101e:	f8c3 25e0 	str.w	r2, [r3, #1504]	; 0x5e0
  TestRunCtxt_Ptr->rb_swap=1;
 8001022:	f8c3 25e8 	str.w	r2, [r3, #1512]	; 0x5e8
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_RAW;
 8001026:	f883 15e4 	strb.w	r1, [r3, #1508]	; 0x5e4
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 800102a:	7821      	ldrb	r1, [r4, #0]
 800102c:	f002 ffa4 	bl	8003f78 <TEST_Run>
 
  tinf_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8001030:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001032:	f003 ff75 	bl	8004f20 <UTILS_GetTimeStamp>
 8001036:	4605      	mov	r5, r0
  
  /***********************************/
  /*********Run NN inference**********/
  /***********************************/
  AI_Run(App_Context_Ptr->Ai_ContextPtr);
 8001038:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800103a:	f7ff fd8d 	bl	8000b58 <AI_Run>
  
  tinf_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 800103e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001040:	f003 ff6e 	bl	8004f20 <UTILS_GetTimeStamp>

  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]=tinf_stop-tinf_start;
 8001044:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001046:	1b40      	subs	r0, r0, r5
 8001048:	6118      	str	r0, [r3, #16]
}
 800104a:	bd70      	pop	{r4, r5, r6, pc}
 800104c:	20000080 	.word	0x20000080

08001050 <APP_Postprocess>:
/**
 * @brief Run post-processing operation
 * @param App_Context_Ptr pointer to application context
 */
uint8_t APP_Postprocess(AppContext_TypeDef *App_Context_Ptr)
{
 8001050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;

  /*** At that point, it is recommended to wait until current camera acquisition is completed before proceeding  
  *** before proceeding in order to avoid bottleneck at FMC slave (btw LTDC/DMA2D and DMA).
  ***/
  while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8001054:	6a82      	ldr	r2, [r0, #40]	; 0x28
{
 8001056:	b094      	sub	sp, #80	; 0x50
 8001058:	4604      	mov	r4, r0
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
 800105a:	6b85      	ldr	r5, [r0, #56]	; 0x38
  while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 800105c:	7d13      	ldrb	r3, [r2, #20]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0fc      	beq.n	800105c <APP_Postprocess+0xc>
  
  UTILS_Compute_ExecutionTiming(App_Context_Ptr->Utils_ContextPtr);
 8001062:	6b60      	ldr	r0, [r4, #52]	; 0x34
  /**NN ouput dequantization if required**/
  AI_Output_Dequantize(App_Context_Ptr->Ai_ContextPtr);

  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer);
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[4];
  TestRunCtxt_Ptr->src_width_size=0;
 8001064:	2600      	movs	r6, #0
  UTILS_Compute_ExecutionTiming(App_Context_Ptr->Utils_ContextPtr);
 8001066:	f004 f86d 	bl	8005144 <UTILS_Compute_ExecutionTiming>
  AI_Output_Dequantize(App_Context_Ptr->Ai_ContextPtr);
 800106a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800106c:	f7ff fde2 	bl	8000c34 <AI_Output_Dequantize>
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer);
 8001070:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[4];
 8001072:	4ba3      	ldr	r3, [pc, #652]	; (8001300 <APP_Postprocess+0x2b0>)
  TestRunCtxt_Ptr->src_height_size=0;
  TestRunCtxt_Ptr->src_size=AI_NETWORK_OUT_1_SIZE * sizeof(float);
  TestRunCtxt_Ptr->PerformCapture=0;
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_TXT;
 8001074:	2702      	movs	r7, #2
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer);
 8001076:	6812      	ldr	r2, [r2, #0]
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[4];
 8001078:	f8c5 35cc 	str.w	r3, [r5, #1484]	; 0x5cc
  TestRunCtxt_Ptr->src_size=AI_NETWORK_OUT_1_SIZE * sizeof(float);
 800107c:	2314      	movs	r3, #20
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer);
 800107e:	f8c5 25c8 	str.w	r2, [r5, #1480]	; 0x5c8
  TestRunCtxt_Ptr->src_size=AI_NETWORK_OUT_1_SIZE * sizeof(float);
 8001082:	f8c5 35dc 	str.w	r3, [r5, #1500]	; 0x5dc
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_TXT;
 8001086:	f885 75e4 	strb.w	r7, [r5, #1508]	; 0x5e4
  TestRunCtxt_Ptr->src_width_size=0;
 800108a:	f8c5 65d0 	str.w	r6, [r5, #1488]	; 0x5d0
  TestRunCtxt_Ptr->src_height_size=0;
 800108e:	f8c5 65d4 	str.w	r6, [r5, #1492]	; 0x5d4
  TestRunCtxt_Ptr->PerformCapture=0;
 8001092:	f8c5 65e0 	str.w	r6, [r5, #1504]	; 0x5e0
  TestRunCtxt_Ptr->rb_swap=0;
 8001096:	f8c5 65e8 	str.w	r6, [r5, #1512]	; 0x5e8
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 800109a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800109c:	7821      	ldrb	r1, [r4, #0]
 800109e:	f002 ff6b 	bl	8003f78 <TEST_Run>
  for (int i = 0; i < NN_OUTPUT_CLASS_NUMBER; i++)
  {
    App_Context_Ptr->ranking[i] = i;
  }
  
  UTILS_Bubblesort((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer), App_Context_Ptr->ranking, NN_OUTPUT_CLASS_NUMBER);
 80010a2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    App_Context_Ptr->ranking[i] = i;
 80010a4:	2301      	movs	r3, #1
 80010a6:	2103      	movs	r1, #3
  UTILS_Bubblesort((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer), App_Context_Ptr->ranking, NN_OUTPUT_CLASS_NUMBER);
 80010a8:	6810      	ldr	r0, [r2, #0]
 80010aa:	2205      	movs	r2, #5
    App_Context_Ptr->ranking[i] = i;
 80010ac:	6166      	str	r6, [r4, #20]
  
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
 80010ae:	4d95      	ldr	r5, [pc, #596]	; (8001304 <APP_Postprocess+0x2b4>)
    App_Context_Ptr->ranking[i] = i;
 80010b0:	e9c4 3706 	strd	r3, r7, [r4, #24]
 80010b4:	2304      	movs	r3, #4
 80010b6:	e9c4 1308 	strd	r1, r3, [r4, #32]
  UTILS_Bubblesort((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer), App_Context_Ptr->ranking, NN_OUTPUT_CLASS_NUMBER);
 80010ba:	f104 0114 	add.w	r1, r4, #20
 80010be:	f004 f817 	bl	80050f0 <UTILS_Bubblesort>
  App_Context_Ptr->nn_top1_output_class_proba=*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0);
 80010c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
 80010c4:	6961      	ldr	r1, [r4, #20]
  App_Context_Ptr->nn_top1_output_class_proba=*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0);
 80010c6:	681a      	ldr	r2, [r3, #0]
  
  if(App_Context_Ptr->Operating_Mode == NOMINAL)
 80010c8:	7823      	ldrb	r3, [r4, #0]
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
 80010ca:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
  App_Context_Ptr->nn_top1_output_class_proba=*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0);
 80010ce:	6812      	ldr	r2, [r2, #0]
  if(App_Context_Ptr->Operating_Mode == NOMINAL)
 80010d0:	2b01      	cmp	r3, #1
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
 80010d2:	60e1      	str	r1, [r4, #12]
  App_Context_Ptr->nn_top1_output_class_proba=*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0);
 80010d4:	6122      	str	r2, [r4, #16]
  if(App_Context_Ptr->Operating_Mode == NOMINAL)
 80010d6:	d017      	beq.n	8001108 <APP_Postprocess+0xb8>
    
    BSP_LED_Toggle(LED_BLUE);
  }
  else 
  {
    TEST_PostProcess(App_Context_Ptr->Test_ContextPtr);
 80010d8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80010da:	f003 fa29 	bl	8004530 <TEST_PostProcess>
  }

//  const char* output_labels[AI_NET_OUTPUT_SIZE] = {"background", "e-waste", "metal", "paper", "plastic"};

  if (App_Context_Ptr->nn_top1_output_class_name == "e-waste") {
 80010de:	68e0      	ldr	r0, [r4, #12]
 80010e0:	4b89      	ldr	r3, [pc, #548]	; (8001308 <APP_Postprocess+0x2b8>)
 80010e2:	4298      	cmp	r0, r3
 80010e4:	d01c      	beq.n	8001120 <APP_Postprocess+0xd0>
	  return 1;
  }

  else if (App_Context_Ptr->nn_top1_output_class_name == "metal") {
 80010e6:	4b89      	ldr	r3, [pc, #548]	; (800130c <APP_Postprocess+0x2bc>)
 80010e8:	4298      	cmp	r0, r3
 80010ea:	f000 8090 	beq.w	800120e <APP_Postprocess+0x1be>
  	  return 2;
  }

  else if (App_Context_Ptr->nn_top1_output_class_name == "paper") {
 80010ee:	4b88      	ldr	r3, [pc, #544]	; (8001310 <APP_Postprocess+0x2c0>)
 80010f0:	4298      	cmp	r0, r3
 80010f2:	f000 808e 	beq.w	8001212 <APP_Postprocess+0x1c2>
  	  return 3;
  }

  else if (App_Context_Ptr->nn_top1_output_class_name == "plastic") {
 80010f6:	4b87      	ldr	r3, [pc, #540]	; (8001314 <APP_Postprocess+0x2c4>)
 80010f8:	1ac0      	subs	r0, r0, r3
 80010fa:	fab0 f080 	clz	r0, r0
 80010fe:	0940      	lsrs	r0, r0, #5
 8001100:	0080      	lsls	r0, r0, #2
  	  return 4;
  }

  return 0;
}
 8001102:	b014      	add	sp, #80	; 0x50
 8001104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  occurrence_number--;
 8001108:	4a83      	ldr	r2, [pc, #524]	; (8001318 <APP_Postprocess+0x2c8>)
 800110a:	6813      	ldr	r3, [r2, #0]
  if (occurrence_number == 0)
 800110c:	1e5e      	subs	r6, r3, #1
 800110e:	d00b      	beq.n	8001128 <APP_Postprocess+0xd8>
  occurrence_number--;
 8001110:	6016      	str	r6, [r2, #0]
    BSP_LED_Toggle(LED_BLUE);
 8001112:	2003      	movs	r0, #3
 8001114:	f008 fb10 	bl	8009738 <BSP_LED_Toggle>
  if (App_Context_Ptr->nn_top1_output_class_name == "e-waste") {
 8001118:	68e0      	ldr	r0, [r4, #12]
 800111a:	4b7b      	ldr	r3, [pc, #492]	; (8001308 <APP_Postprocess+0x2b8>)
 800111c:	4298      	cmp	r0, r3
 800111e:	d1e2      	bne.n	80010e6 <APP_Postprocess+0x96>
	  return 1;
 8001120:	2001      	movs	r0, #1
}
 8001122:	b014      	add	sp, #80	; 0x50
 8001124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 8001128:	4630      	mov	r0, r6
 800112a:	f008 fb65 	bl	80097f8 <BSP_PB_GetState>
 800112e:	2800      	cmp	r0, #0
 8001130:	d171      	bne.n	8001216 <APP_Postprocess+0x1c6>
 8001132:	af02      	add	r7, sp, #8
      sprintf(msg, "%s %.0f%%", NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[i]], *((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+i) * 100);
 8001134:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001136:	4638      	mov	r0, r7
 8001138:	eddf 7a78 	vldr	s15, [pc, #480]	; 800131c <APP_Postprocess+0x2cc>
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	6962      	ldr	r2, [r4, #20]
 8001140:	ed93 7a00 	vldr	s14, [r3]
 8001144:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8001148:	ee27 7a27 	vmul.f32	s14, s14, s15
 800114c:	4974      	ldr	r1, [pc, #464]	; (8001320 <APP_Postprocess+0x2d0>)
 800114e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001152:	ed8d 7b00 	vstr	d7, [sp]
 8001156:	f025 f997 	bl	8026488 <siprintf>
      UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_TOP_N_LAST_LINE - NN_TOP_N_DISPLAY + i), (uint8_t *)msg, CENTER_MODE);
 800115a:	f01a fa91 	bl	801b680 <UTIL_LCD_GetFont>
 800115e:	88c1      	ldrh	r1, [r0, #6]
 8001160:	2301      	movs	r3, #1
 8001162:	463a      	mov	r2, r7
 8001164:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001168:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800116c:	2000      	movs	r0, #0
 800116e:	f01a fb7f 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "Inference: %ldms", App_Context_Ptr->nn_inference_time);
 8001172:	68a2      	ldr	r2, [r4, #8]
 8001174:	496b      	ldr	r1, [pc, #428]	; (8001324 <APP_Postprocess+0x2d4>)
 8001176:	4638      	mov	r0, r7
 8001178:	f025 f986 	bl	8026488 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_INFER_TIME_LINE), (uint8_t *)msg, CENTER_MODE);
 800117c:	f01a fa80 	bl	801b680 <UTIL_LCD_GetFont>
 8001180:	88c1      	ldrh	r1, [r0, #6]
 8001182:	2301      	movs	r3, #1
 8001184:	463a      	mov	r2, r7
 8001186:	0109      	lsls	r1, r1, #4
 8001188:	2000      	movs	r0, #0
 800118a:	f01a fb71 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "Fps: %.1f", 1000.0F / (float)(App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.Tfps));
 800118e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001190:	eddf 6a65 	vldr	s13, [pc, #404]	; 8001328 <APP_Postprocess+0x2d8>
 8001194:	4638      	mov	r0, r7
 8001196:	edd3 7a05 	vldr	s15, [r3, #20]
 800119a:	4964      	ldr	r1, [pc, #400]	; (800132c <APP_Postprocess+0x2dc>)
 800119c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011a4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80011a8:	ec53 2b17 	vmov	r2, r3, d7
 80011ac:	f025 f96c 	bl	8026488 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_FPS_LINE), (uint8_t *)msg, CENTER_MODE);
 80011b0:	f01a fa66 	bl	801b680 <UTIL_LCD_GetFont>
 80011b4:	4601      	mov	r1, r0
 80011b6:	2301      	movs	r3, #1
 80011b8:	463a      	mov	r2, r7
 80011ba:	88c9      	ldrh	r1, [r1, #6]
 80011bc:	2000      	movs	r0, #0
 80011be:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80011c2:	4099      	lsls	r1, r3
 80011c4:	f01a fb54 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Context_Ptr->Display_ContextPtr);
 80011c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80011ca:	f000 fbc1 	bl	8001950 <DISPLAY_Refresh>
    BSP_LED_Off(LED_GREEN);
 80011ce:	2000      	movs	r0, #0
 80011d0:	f008 faa0 	bl	8009714 <BSP_LED_Off>
    BSP_LED_Off(LED_ORANGE);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f008 fa9d 	bl	8009714 <BSP_LED_Off>
    BSP_LED_Off(LED_RED);
 80011da:	2002      	movs	r0, #2
 80011dc:	f008 fa9a 	bl	8009714 <BSP_LED_Off>
    if ((*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0) * 100) < NN_BAD_RES)
 80011e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011e2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001330 <APP_Postprocess+0x2e0>
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	edd3 7a00 	vldr	s15, [r3]
 80011ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f4:	d47f      	bmi.n	80012f6 <APP_Postprocess+0x2a6>
    else if (((*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0) * 100) >= NN_BAD_RES) && ((*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0) * 100) < NN_GOOD_RES))
 80011f6:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001334 <APP_Postprocess+0x2e4>
 80011fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      BSP_LED_On(LED_ORANGE);
 8001202:	bf4c      	ite	mi
 8001204:	2001      	movmi	r0, #1
      BSP_LED_On(LED_GREEN);
 8001206:	2000      	movpl	r0, #0
 8001208:	f008 fa72 	bl	80096f0 <BSP_LED_On>
 800120c:	e781      	b.n	8001112 <APP_Postprocess+0xc2>
  	  return 2;
 800120e:	2002      	movs	r0, #2
 8001210:	e777      	b.n	8001102 <APP_Postprocess+0xb2>
  	  return 3;
 8001212:	2003      	movs	r0, #3
 8001214:	e775      	b.n	8001102 <APP_Postprocess+0xb2>
      display_mode  = (display_mode + 1) % 4;
 8001216:	4a48      	ldr	r2, [pc, #288]	; (8001338 <APP_Postprocess+0x2e8>)
        sprintf(msg, "Normal CAMERA mode");
 8001218:	af02      	add	r7, sp, #8
      display_mode  = (display_mode + 1) % 4;
 800121a:	6813      	ldr	r3, [r2, #0]
 800121c:	3301      	adds	r3, #1
 800121e:	f003 0803 	and.w	r8, r3, #3
      switch (display_mode)
 8001222:	f1b8 0f02 	cmp.w	r8, #2
      display_mode  = (display_mode + 1) % 4;
 8001226:	f8c2 8000 	str.w	r8, [r2]
      switch (display_mode)
 800122a:	d060      	beq.n	80012ee <APP_Postprocess+0x29e>
 800122c:	f1b8 0f03 	cmp.w	r8, #3
 8001230:	d048      	beq.n	80012c4 <APP_Postprocess+0x274>
 8001232:	f1b8 0f01 	cmp.w	r8, #1
 8001236:	d050      	beq.n	80012da <APP_Postprocess+0x28a>
        mirror_flip = CAMERA_MIRRORFLIP_NONE;
 8001238:	46b0      	mov	r8, r6
        sprintf(msg, "Normal CAMERA mode");
 800123a:	f8df c100 	ldr.w	ip, [pc, #256]	; 800133c <APP_Postprocess+0x2ec>
 800123e:	463e      	mov	r6, r7
 8001240:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001244:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001246:	f8dc 3000 	ldr.w	r3, [ip]
 800124a:	f826 3b02 	strh.w	r3, [r6], #2
 800124e:	0c1b      	lsrs	r3, r3, #16
 8001250:	7033      	strb	r3, [r6, #0]
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001252:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
      sprintf(msg, "Please release button");
 8001256:	463e      	mov	r6, r7
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001258:	f01a fa1a 	bl	801b690 <UTIL_LCD_Clear>
      UTIL_LCD_DisplayStringAt(0, LINE(9), (uint8_t*)msg, CENTER_MODE);
 800125c:	f01a fa10 	bl	801b680 <UTIL_LCD_GetFont>
 8001260:	88c1      	ldrh	r1, [r0, #6]
 8001262:	2301      	movs	r3, #1
 8001264:	463a      	mov	r2, r7
 8001266:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800126a:	2000      	movs	r0, #0
 800126c:	f01a fb00 	bl	801b870 <UTIL_LCD_DisplayStringAt>
      CAMERA_Set_MirrorFlip(App_Context_Ptr->Camera_ContextPtr, mirror_flip);
 8001270:	4641      	mov	r1, r8
 8001272:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001274:	f000 f998 	bl	80015a8 <CAMERA_Set_MirrorFlip>
      sprintf(msg, "Please release button");
 8001278:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 8001340 <APP_Postprocess+0x2f0>
 800127c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001280:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001282:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8001286:	f846 0b04 	str.w	r0, [r6], #4
 800128a:	8031      	strh	r1, [r6, #0]
      UTIL_LCD_DisplayStringAt(0, LINE(11), (uint8_t*)msg, CENTER_MODE);
 800128c:	f01a f9f8 	bl	801b680 <UTIL_LCD_GetFont>
 8001290:	88c3      	ldrh	r3, [r0, #6]
 8001292:	463a      	mov	r2, r7
 8001294:	2000      	movs	r0, #0
 8001296:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800129a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800129e:	2301      	movs	r3, #1
 80012a0:	f01a fae6 	bl	801b870 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Context_Ptr->Display_ContextPtr);
 80012a4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80012a6:	f000 fb53 	bl	8001950 <DISPLAY_Refresh>
      while (BSP_PB_GetState(BUTTON_WAKEUP) != RESET);
 80012aa:	2000      	movs	r0, #0
 80012ac:	f008 faa4 	bl	80097f8 <BSP_PB_GetState>
 80012b0:	2800      	cmp	r0, #0
 80012b2:	d1fa      	bne.n	80012aa <APP_Postprocess+0x25a>
      HAL_Delay(200);
 80012b4:	20c8      	movs	r0, #200	; 0xc8
 80012b6:	f00a fae7 	bl	800b888 <HAL_Delay>
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80012ba:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80012be:	f01a f9e7 	bl	801b690 <UTIL_LCD_Clear>
 80012c2:	e737      	b.n	8001134 <APP_Postprocess+0xe4>
        sprintf(msg, "Mirror and Flip CAMERA mode");
 80012c4:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8001344 <APP_Postprocess+0x2f4>
 80012c8:	463e      	mov	r6, r7
 80012ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80012ce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80012d0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80012d4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
        break;
 80012d8:	e7bb      	b.n	8001252 <APP_Postprocess+0x202>
        sprintf(msg, "Flip CAMERA mode");
 80012da:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8001348 <APP_Postprocess+0x2f8>
 80012de:	463e      	mov	r6, r7
 80012e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80012e4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80012e6:	f8dc 3000 	ldr.w	r3, [ip]
 80012ea:	7033      	strb	r3, [r6, #0]
        break;
 80012ec:	e7b1      	b.n	8001252 <APP_Postprocess+0x202>
        sprintf(msg, "Mirror CAMERA mode");
 80012ee:	463e      	mov	r6, r7
 80012f0:	f8df c058 	ldr.w	ip, [pc, #88]	; 800134c <APP_Postprocess+0x2fc>
 80012f4:	e7a4      	b.n	8001240 <APP_Postprocess+0x1f0>
      BSP_LED_On(LED_RED);
 80012f6:	2002      	movs	r0, #2
 80012f8:	f008 f9fa 	bl	80096f0 <BSP_LED_On>
 80012fc:	e709      	b.n	8001112 <APP_Postprocess+0xc2>
 80012fe:	bf00      	nop
 8001300:	200000a0 	.word	0x200000a0
 8001304:	20000004 	.word	0x20000004
 8001308:	08028d08 	.word	0x08028d08
 800130c:	08028d10 	.word	0x08028d10
 8001310:	08028d18 	.word	0x08028d18
 8001314:	08028d20 	.word	0x08028d20
 8001318:	20000000 	.word	0x20000000
 800131c:	42c80000 	.word	0x42c80000
 8001320:	08028d28 	.word	0x08028d28
 8001324:	08028d34 	.word	0x08028d34
 8001328:	447a0000 	.word	0x447a0000
 800132c:	08028d48 	.word	0x08028d48
 8001330:	3f0ccccd 	.word	0x3f0ccccd
 8001334:	3f333333 	.word	0x3f333333
 8001338:	20007b30 	.word	0x20007b30
 800133c:	08028cdc 	.word	0x08028cdc
 8001340:	08028cf0 	.word	0x08028cf0
 8001344:	08028cc0 	.word	0x08028cc0
 8001348:	08028c98 	.word	0x08028c98
 800134c:	08028cac 	.word	0x08028cac

08001350 <DCMI_MDMAError>:
  * @retval None
  */
static void DCMI_MDMAError(MDMA_HandleTypeDef *hmdma)
{
  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8001350:	6802      	ldr	r2, [r0, #0]
 8001352:	68d3      	ldr	r3, [r2, #12]
 8001354:	f023 0301 	bic.w	r3, r3, #1
 8001358:	60d3      	str	r3, [r2, #12]

  Error_Handler();
 800135a:	f003 bf07 	b.w	800516c <Error_Handler>
 800135e:	bf00      	nop

08001360 <DCMI_DMAError>:
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001360:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001362:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001364:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001366:	2a02      	cmp	r2, #2
 8001368:	d006      	beq.n	8001378 <DCMI_DMAError+0x18>
    hdcmi->State = HAL_DCMI_STATE_READY;
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001370:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001372:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001376:	64da      	str	r2, [r3, #76]	; 0x4c
  Error_Handler();
 8001378:	f003 bef8 	b.w	800516c <Error_Handler>

0800137c <DCMI_DMALineXferCplt>:
{
 800137c:	4603      	mov	r3, r0
  if (HAL_MDMA_Start_IT(&hmdma, (uint32_t) pCameraLineBuffer, (uint32_t) pDst, line_size, 1) != HAL_OK)
 800137e:	490b      	ldr	r1, [pc, #44]	; (80013ac <DCMI_DMALineXferCplt+0x30>)
 8001380:	480b      	ldr	r0, [pc, #44]	; (80013b0 <DCMI_DMALineXferCplt+0x34>)
{
 8001382:	b570      	push	{r4, r5, r6, lr}
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001384:	6b9c      	ldr	r4, [r3, #56]	; 0x38
{
 8001386:	b082      	sub	sp, #8
  if (HAL_MDMA_Start_IT(&hmdma, (uint32_t) pCameraLineBuffer, (uint32_t) pDst, line_size, 1) != HAL_OK)
 8001388:	2601      	movs	r6, #1
  uint32_t line_size =  hdcmi->XferSize * 4U;
 800138a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  uint8_t *pDst = (uint8_t *) hdcmi->pBuffPtr + line_size * hdcmi->XferCount;
 800138c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800138e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  uint32_t line_size =  hdcmi->XferSize * 4U;
 8001390:	009b      	lsls	r3, r3, #2
  if (HAL_MDMA_Start_IT(&hmdma, (uint32_t) pCameraLineBuffer, (uint32_t) pDst, line_size, 1) != HAL_OK)
 8001392:	9600      	str	r6, [sp, #0]
 8001394:	fb03 2205 	mla	r2, r3, r5, r2
 8001398:	f00d ffba 	bl	800f310 <HAL_MDMA_Start_IT>
 800139c:	b908      	cbnz	r0, 80013a2 <DCMI_DMALineXferCplt+0x26>
}
 800139e:	b002      	add	sp, #8
 80013a0:	bd70      	pop	{r4, r5, r6, pc}
 80013a2:	b002      	add	sp, #8
 80013a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Error_Handler();
 80013a8:	f003 bee0 	b.w	800516c <Error_Handler>
 80013ac:	30000000 	.word	0x30000000
 80013b0:	20007b68 	.word	0x20007b68

080013b4 <DCMI_MDMAFrameXferCplt>:
  __HAL_MDMA_DISABLE(hmdma);
 80013b4:	6801      	ldr	r1, [r0, #0]
  hdcmi->XferCount++;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <DCMI_MDMAFrameXferCplt+0x3c>)
  __HAL_MDMA_DISABLE(hmdma);
 80013b8:	68ca      	ldr	r2, [r1, #12]
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80013ba:	6c18      	ldr	r0, [r3, #64]	; 0x40
  __HAL_MDMA_DISABLE(hmdma);
 80013bc:	f022 0201 	bic.w	r2, r2, #1
 80013c0:	60ca      	str	r2, [r1, #12]
  hdcmi->XferCount++;
 80013c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013c4:	3201      	adds	r2, #1
 80013c6:	639a      	str	r2, [r3, #56]	; 0x38
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80013c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013ca:	4282      	cmp	r2, r0
 80013cc:	d000      	beq.n	80013d0 <DCMI_MDMAFrameXferCplt+0x1c>
}
 80013ce:	4770      	bx	lr
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	68d1      	ldr	r1, [r2, #12]
 80013d4:	f041 0101 	orr.w	r1, r1, #1
 80013d8:	60d1      	str	r1, [r2, #12]
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80013da:	6812      	ldr	r2, [r2, #0]
 80013dc:	f012 0202 	ands.w	r2, r2, #2
 80013e0:	d003      	beq.n	80013ea <DCMI_MDMAFrameXferCplt+0x36>
      hdcmi->State = HAL_DCMI_STATE_READY;
 80013e2:	2201      	movs	r2, #1
 80013e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80013e8:	4770      	bx	lr
      hdcmi->XferCount = 0;
 80013ea:	639a      	str	r2, [r3, #56]	; 0x38
}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20009f38 	.word	0x20009f38

080013f4 <CAMERA_Init>:
{
 80013f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Camera_Context_Ptr->new_frame_ready=0;
 80013f8:	2300      	movs	r3, #0
{
 80013fa:	4605      	mov	r5, r0
  __HAL_RCC_MDMA_CLK_ENABLE();
 80013fc:	4a5e      	ldr	r2, [pc, #376]	; (8001578 <CAMERA_Init+0x184>)
{
 80013fe:	b082      	sub	sp, #8
  Camera_Context_Ptr->vsync_it=0;
 8001400:	60ab      	str	r3, [r5, #8]
  Camera_Context_Ptr->new_frame_ready=0;
 8001402:	752b      	strb	r3, [r5, #20]
  hmdma.Instance = MDMA_Channel0;
 8001404:	4c5d      	ldr	r4, [pc, #372]	; (800157c <CAMERA_Init+0x188>)
 8001406:	485e      	ldr	r0, [pc, #376]	; (8001580 <CAMERA_Init+0x18c>)
  Camera_Context_Ptr->Tvsync_evt=0;
 8001408:	e9c5 3303 	strd	r3, r3, [r5, #12]
  __HAL_RCC_MDMA_CLK_ENABLE();
 800140c:	f8d2 10d4 	ldr.w	r1, [r2, #212]	; 0xd4
  hmdma.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001410:	6123      	str	r3, [r4, #16]
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001412:	f041 0101 	orr.w	r1, r1, #1
  hmdma.Init.SourceBurst              = MDMA_DEST_BURST_SINGLE;
 8001416:	62e3      	str	r3, [r4, #44]	; 0x2c
  hmdma.Init.DestBlockAddressOffset   = 0;
 8001418:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
  __HAL_RCC_MDMA_CLK_ENABLE();
 800141c:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
  hmdma.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8001420:	2380      	movs	r3, #128	; 0x80
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001422:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
  hmdma.Init.Request                  = MDMA_REQUEST_SW;
 8001426:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  hmdma.Init.Priority                 = MDMA_PRIORITY_HIGH;
 800142a:	60e3      	str	r3, [r4, #12]
  __HAL_RCC_MDMA_CLK_ENABLE();
 800142c:	f002 0201 	and.w	r2, r2, #1
  hmdma.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8001430:	6223      	str	r3, [r4, #32]
  hmdma.Init.BufferTransferLength     = 128;
 8001432:	62a3      	str	r3, [r4, #40]	; 0x28
  hmdma.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8001434:	2320      	movs	r3, #32
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001436:	9201      	str	r2, [sp, #4]
  hmdma.Init.SourceInc                = MDMA_SRC_INC_WORD;
 8001438:	f240 2202 	movw	r2, #514	; 0x202
  hmdma.Init.Request                  = MDMA_REQUEST_SW;
 800143c:	6061      	str	r1, [r4, #4]
  hmdma.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 800143e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  hmdma.Init.SourceInc                = MDMA_SRC_INC_WORD;
 8001442:	6162      	str	r2, [r4, #20]
  hmdma.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8001444:	f640 0208 	movw	r2, #2056	; 0x808
  hmdma.Instance = MDMA_Channel0;
 8001448:	6020      	str	r0, [r4, #0]
  __HAL_RCC_MDMA_CLK_ENABLE();
 800144a:	9801      	ldr	r0, [sp, #4]
  if (HAL_MDMA_Init(&hmdma) != HAL_OK)
 800144c:	4620      	mov	r0, r4
  hmdma.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 800144e:	60a1      	str	r1, [r4, #8]
  hmdma.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8001450:	e9c4 2306 	strd	r2, r3, [r4, #24]
  hmdma.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8001454:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  hmdma.Init.DestBurst                = MDMA_DEST_BURST_16BEATS;
 8001458:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  hmdma.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800145c:	6262      	str	r2, [r4, #36]	; 0x24
  hmdma.Init.DestBurst                = MDMA_DEST_BURST_16BEATS;
 800145e:	6323      	str	r3, [r4, #48]	; 0x30
  if (HAL_MDMA_Init(&hmdma) != HAL_OK)
 8001460:	f00d fedc 	bl	800f21c <HAL_MDMA_Init>
 8001464:	2800      	cmp	r0, #0
 8001466:	d17f      	bne.n	8001568 <CAMERA_Init+0x174>
  HAL_NVIC_SetPriority(MDMA_IRQn, 15U, 0);
 8001468:	2200      	movs	r2, #0
 800146a:	210f      	movs	r1, #15
 800146c:	207a      	movs	r0, #122	; 0x7a
 800146e:	f00a fa3d 	bl	800b8ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8001472:	207a      	movs	r0, #122	; 0x7a
 8001474:	f00a fa78 	bl	800b968 <HAL_NVIC_EnableIRQ>
  BSP_CAMERA_PwrDown(0);
 8001478:	2000      	movs	r0, #0
 800147a:	f009 fa85 	bl	800a988 <BSP_CAMERA_PwrDown>
  HAL_Delay(200);
 800147e:	20c8      	movs	r0, #200	; 0xc8
 8001480:	f00a fa02 	bl	800b888 <HAL_Delay>
  if (BSP_CAMERA_Init(0, CAMERA_RESOLUTION, CAMERA_PF_RGB565) != BSP_ERROR_NONE) 
 8001484:	2200      	movs	r2, #0
 8001486:	2101      	movs	r1, #1
 8001488:	4610      	mov	r0, r2
 800148a:	f008 ffc5 	bl	800a418 <BSP_CAMERA_Init>
 800148e:	2800      	cmp	r0, #0
 8001490:	d167      	bne.n	8001562 <CAMERA_Init+0x16e>
  MODIFY_REG(DMA2_Stream3->CR, DMA_SxCR_PL, DMA_PRIORITY_VERY_HIGH);
 8001492:	4a3c      	ldr	r2, [pc, #240]	; (8001584 <CAMERA_Init+0x190>)
  if (Camera_Ctx[0].CameraId == OV5640_ID)
 8001494:	f245 6140 	movw	r1, #22080	; 0x5640
 8001498:	483b      	ldr	r0, [pc, #236]	; (8001588 <CAMERA_Init+0x194>)
  MODIFY_REG(DMA2_Stream3->CR, DMA_SxCR_PL, DMA_PRIORITY_VERY_HIGH);
 800149a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800149c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80014a0:	6593      	str	r3, [r2, #88]	; 0x58
  MODIFY_REG(DMA2_Stream3->CR, DMA_SxCR_MBURST, DMA_MBURST_INC4);
 80014a2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80014a4:	f023 73c0 	bic.w	r3, r3, #25165824	; 0x1800000
 80014a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014ac:	6593      	str	r3, [r2, #88]	; 0x58
  if (Camera_Ctx[0].CameraId == OV5640_ID)
 80014ae:	6803      	ldr	r3, [r0, #0]
 80014b0:	428b      	cmp	r3, r1
 80014b2:	d046      	beq.n	8001542 <CAMERA_Init+0x14e>
  if (BSP_CAMERA_SetMirrorFlip(0, Camera_Context_Ptr->mirror_flip) != BSP_ERROR_NONE)
 80014b4:	69e9      	ldr	r1, [r5, #28]
 80014b6:	2000      	movs	r0, #0
 80014b8:	f009 fa40 	bl	800a93c <BSP_CAMERA_SetMirrorFlip>
 80014bc:	4607      	mov	r7, r0
 80014be:	2800      	cmp	r0, #0
 80014c0:	d13e      	bne.n	8001540 <CAMERA_Init+0x14c>
  __HAL_LOCK(hdcmi);
 80014c2:	4e32      	ldr	r6, [pc, #200]	; (800158c <CAMERA_Init+0x198>)
  HAL_Delay(100);
 80014c4:	2064      	movs	r0, #100	; 0x64
 80014c6:	f00a f9df 	bl	800b888 <HAL_Delay>
  __HAL_LOCK(hdcmi);
 80014ca:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d051      	beq.n	8001576 <CAMERA_Init+0x182>
  __HAL_DCMI_ENABLE(hdcmi);
 80014d2:	6831      	ldr	r1, [r6, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80014d4:	2302      	movs	r3, #2
  __HAL_LOCK(hdcmi);
 80014d6:	f04f 0801 	mov.w	r8, #1
  if (HAL_DCMIEx_Start_DMA_MDMA(&hcamera_dcmi, CAMERA_MODE_CONTINUOUS,
 80014da:	682a      	ldr	r2, [r5, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80014dc:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
  __HAL_LOCK(hdcmi);
 80014e0:	f886 8034 	strb.w	r8, [r6, #52]	; 0x34
  __HAL_DCMI_ENABLE(hdcmi);
 80014e4:	680b      	ldr	r3, [r1, #0]
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 80014e6:	6cb0      	ldr	r0, [r6, #72]	; 0x48
  __HAL_DCMI_ENABLE(hdcmi);
 80014e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ec:	600b      	str	r3, [r1, #0]
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80014ee:	680b      	ldr	r3, [r1, #0]
 80014f0:	f023 0302 	bic.w	r3, r3, #2
 80014f4:	600b      	str	r3, [r1, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80014f6:	680b      	ldr	r3, [r1, #0]
 80014f8:	f841 3b28 	str.w	r3, [r1], #40
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 80014fc:	4b24      	ldr	r3, [pc, #144]	; (8001590 <CAMERA_Init+0x19c>)
  hdcmi->XferCount = 0;
 80014fe:	63b7      	str	r7, [r6, #56]	; 0x38
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 8001500:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdcmi->XferSize = line_size / 4U;
 8001502:	23a0      	movs	r3, #160	; 0xa0
  hdcmi->pBuffPtr = (uint32_t) pData;
 8001504:	6472      	str	r2, [r6, #68]	; 0x44
  hmdma.XferCpltCallback = DCMI_MDMAFrameXferCplt;
 8001506:	4a23      	ldr	r2, [pc, #140]	; (8001594 <CAMERA_Init+0x1a0>)
  hdcmi->XferSize = line_size / 4U;
 8001508:	63f3      	str	r3, [r6, #60]	; 0x3c
  hmdma.XferCpltCallback = DCMI_MDMAFrameXferCplt;
 800150a:	6462      	str	r2, [r4, #68]	; 0x44
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 800150c:	4b22      	ldr	r3, [pc, #136]	; (8001598 <CAMERA_Init+0x1a4>)
  hmdma.XferErrorCallback = DCMI_MDMAError;
 800150e:	4a23      	ldr	r2, [pc, #140]	; (800159c <CAMERA_Init+0x1a8>)
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001510:	64c3      	str	r3, [r0, #76]	; 0x4c
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001512:	6507      	str	r7, [r0, #80]	; 0x50
  hmdma.XferErrorCallback = DCMI_MDMAError;
 8001514:	6562      	str	r2, [r4, #84]	; 0x54
  hdcmi->XferTransferNumber = num_lines;
 8001516:	22f0      	movs	r2, #240	; 0xf0
  if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, pLineData, hdcmi->XferSize) != HAL_OK)
 8001518:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
  hdcmi->XferTransferNumber = num_lines;
 800151a:	6432      	str	r2, [r6, #64]	; 0x40
  if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, pLineData, hdcmi->XferSize) != HAL_OK)
 800151c:	4a20      	ldr	r2, [pc, #128]	; (80015a0 <CAMERA_Init+0x1ac>)
 800151e:	f00b f8eb 	bl	800c6f8 <HAL_DMA_Start_IT>
 8001522:	4603      	mov	r3, r0
 8001524:	bb18      	cbnz	r0, 800156e <CAMERA_Init+0x17a>
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001526:	6831      	ldr	r1, [r6, #0]
  HAL_Delay(200);
 8001528:	20c8      	movs	r0, #200	; 0xc8
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800152a:	680a      	ldr	r2, [r1, #0]
 800152c:	f042 0201 	orr.w	r2, r2, #1
 8001530:	600a      	str	r2, [r1, #0]
  __HAL_UNLOCK(hdcmi);
 8001532:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
}
 8001536:	b002      	add	sp, #8
 8001538:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_Delay(200);
 800153c:	f00a b9a4 	b.w	800b888 <HAL_Delay>
    while(1);
 8001540:	e7fe      	b.n	8001540 <CAMERA_Init+0x14c>
    OV5640_Object_t *pObj = Camera_CompObj;
 8001542:	4918      	ldr	r1, [pc, #96]	; (80015a4 <CAMERA_Init+0x1b0>)
    uint8_t tmp = 0xC0; /* Bits[7:0]: PLL multiplier */
 8001544:	22c0      	movs	r2, #192	; 0xc0
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 8001546:	2301      	movs	r3, #1
    OV5640_Object_t *pObj = Camera_CompObj;
 8001548:	6808      	ldr	r0, [r1, #0]
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 800154a:	f243 0136 	movw	r1, #12342	; 0x3036
    uint8_t tmp = 0xC0; /* Bits[7:0]: PLL multiplier */
 800154e:	f88d 2003 	strb.w	r2, [sp, #3]
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 8001552:	f10d 0203 	add.w	r2, sp, #3
 8001556:	3018      	adds	r0, #24
 8001558:	f007 fc18 	bl	8008d8c <ov5640_write_reg>
 800155c:	2800      	cmp	r0, #0
 800155e:	d0a9      	beq.n	80014b4 <CAMERA_Init+0xc0>
      while(1);
 8001560:	e7fe      	b.n	8001560 <CAMERA_Init+0x16c>
    Error_Handler();
 8001562:	f003 fe03 	bl	800516c <Error_Handler>
 8001566:	e794      	b.n	8001492 <CAMERA_Init+0x9e>
    Error_Handler();
 8001568:	f003 fe00 	bl	800516c <Error_Handler>
 800156c:	e77c      	b.n	8001468 <CAMERA_Init+0x74>
    hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800156e:	2340      	movs	r3, #64	; 0x40
 8001570:	64f3      	str	r3, [r6, #76]	; 0x4c
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001572:	f886 8035 	strb.w	r8, [r6, #53]	; 0x35
    while(1);
 8001576:	e7fe      	b.n	8001576 <CAMERA_Init+0x182>
 8001578:	58024400 	.word	0x58024400
 800157c:	20007b68 	.word	0x20007b68
 8001580:	52000040 	.word	0x52000040
 8001584:	40020400 	.word	0x40020400
 8001588:	20009eac 	.word	0x20009eac
 800158c:	20009f38 	.word	0x20009f38
 8001590:	0800137d 	.word	0x0800137d
 8001594:	080013b5 	.word	0x080013b5
 8001598:	08001361 	.word	0x08001361
 800159c:	08001351 	.word	0x08001351
 80015a0:	30000000 	.word	0x30000000
 80015a4:	20009ea8 	.word	0x20009ea8

080015a8 <CAMERA_Set_MirrorFlip>:
{
 80015a8:	b508      	push	{r3, lr}
 80015aa:	4603      	mov	r3, r0
  if (BSP_CAMERA_SetMirrorFlip(0, Camera_Context_Ptr->mirror_flip) != BSP_ERROR_NONE)
 80015ac:	2000      	movs	r0, #0
  Camera_Context_Ptr->mirror_flip = MirrorFlip;
 80015ae:	61d9      	str	r1, [r3, #28]
  if (BSP_CAMERA_SetMirrorFlip(0, Camera_Context_Ptr->mirror_flip) != BSP_ERROR_NONE)
 80015b0:	f009 f9c4 	bl	800a93c <BSP_CAMERA_SetMirrorFlip>
 80015b4:	b900      	cbnz	r0, 80015b8 <CAMERA_Set_MirrorFlip+0x10>
}
 80015b6:	bd08      	pop	{r3, pc}
    while(1);
 80015b8:	e7fe      	b.n	80015b8 <CAMERA_Set_MirrorFlip+0x10>
 80015ba:	bf00      	nop

080015bc <CAMERA_Enable_TestBar_Mode>:
  uint32_t camera_id = Camera_Ctx[0].CameraId;
 80015bc:	4a16      	ldr	r2, [pc, #88]	; (8001618 <CAMERA_Enable_TestBar_Mode+0x5c>)
  if ((camera_id == OV9655_ID) || (camera_id == OV9655_ID_2))
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <CAMERA_Enable_TestBar_Mode+0x60>)
 80015c0:	6812      	ldr	r2, [r2, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	2b01      	cmp	r3, #1
{ 
 80015c6:	b510      	push	{r4, lr}
 80015c8:	b082      	sub	sp, #8
  if ((camera_id == OV9655_ID) || (camera_id == OV9655_ID_2))
 80015ca:	d906      	bls.n	80015da <CAMERA_Enable_TestBar_Mode+0x1e>
    OV5640_Object_t *pObj = Camera_CompObj;
 80015cc:	4b14      	ldr	r3, [pc, #80]	; (8001620 <CAMERA_Enable_TestBar_Mode+0x64>)
    if (OV5640_ColorbarModeConfig(pObj, COLORBAR_MODE_ENABLE) != OV5640_OK)
 80015ce:	2101      	movs	r1, #1
 80015d0:	6818      	ldr	r0, [r3, #0]
 80015d2:	f007 fb8f 	bl	8008cf4 <OV5640_ColorbarModeConfig>
 80015d6:	b1b8      	cbz	r0, 8001608 <CAMERA_Enable_TestBar_Mode+0x4c>
      while(1);
 80015d8:	e7fe      	b.n	80015d8 <CAMERA_Enable_TestBar_Mode+0x1c>
    OV9655_Object_t *pObj = Camera_CompObj;
 80015da:	4a11      	ldr	r2, [pc, #68]	; (8001620 <CAMERA_Enable_TestBar_Mode+0x64>)
    ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 80015dc:	2301      	movs	r3, #1
 80015de:	218d      	movs	r1, #141	; 0x8d
 80015e0:	6814      	ldr	r4, [r2, #0]
 80015e2:	f10d 0207 	add.w	r2, sp, #7
 80015e6:	3418      	adds	r4, #24
 80015e8:	4620      	mov	r0, r4
 80015ea:	f008 f843 	bl	8009674 <ov9655_read_reg>
    tmp |= 0x10; /* Set bit[4]: Color bar test mode */
 80015ee:	f89d c007 	ldrb.w	ip, [sp, #7]
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 80015f2:	2301      	movs	r3, #1
 80015f4:	f10d 0207 	add.w	r2, sp, #7
    tmp |= 0x10; /* Set bit[4]: Color bar test mode */
 80015f8:	f04c 0c10 	orr.w	ip, ip, #16
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 80015fc:	218d      	movs	r1, #141	; 0x8d
 80015fe:	4620      	mov	r0, r4
    tmp |= 0x10; /* Set bit[4]: Color bar test mode */
 8001600:	f88d c007 	strb.w	ip, [sp, #7]
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 8001604:	f008 f83e 	bl	8009684 <ov9655_write_reg>
  HAL_Delay(500);
 8001608:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 800160c:	b002      	add	sp, #8
 800160e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_Delay(500);
 8001612:	f00a b939 	b.w	800b888 <HAL_Delay>
 8001616:	bf00      	nop
 8001618:	20009eac 	.word	0x20009eac
 800161c:	ffff69aa 	.word	0xffff69aa
 8001620:	20009ea8 	.word	0x20009ea8

08001624 <CAMERA_Disable_TestBar_Mode>:
  uint32_t camera_id = Camera_Ctx[0].CameraId;
 8001624:	4a18      	ldr	r2, [pc, #96]	; (8001688 <CAMERA_Disable_TestBar_Mode+0x64>)
  if ((camera_id == OV9655_ID) || (camera_id == OV9655_ID_2))
 8001626:	4b19      	ldr	r3, [pc, #100]	; (800168c <CAMERA_Disable_TestBar_Mode+0x68>)
 8001628:	6812      	ldr	r2, [r2, #0]
 800162a:	4413      	add	r3, r2
 800162c:	2b01      	cmp	r3, #1
{ 
 800162e:	b510      	push	{r4, lr}
 8001630:	b082      	sub	sp, #8
  if ((camera_id == OV9655_ID) || (camera_id == OV9655_ID_2))
 8001632:	d906      	bls.n	8001642 <CAMERA_Disable_TestBar_Mode+0x1e>
    OV5640_Object_t *pObj = Camera_CompObj;
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <CAMERA_Disable_TestBar_Mode+0x6c>)
    if (OV5640_ColorbarModeConfig(pObj, COLORBAR_MODE_DISABLE) != OV5640_OK)
 8001636:	2100      	movs	r1, #0
 8001638:	6818      	ldr	r0, [r3, #0]
 800163a:	f007 fb5b 	bl	8008cf4 <OV5640_ColorbarModeConfig>
 800163e:	b1e0      	cbz	r0, 800167a <CAMERA_Disable_TestBar_Mode+0x56>
      while(1);
 8001640:	e7fe      	b.n	8001640 <CAMERA_Disable_TestBar_Mode+0x1c>
    OV9655_Object_t *pObj = Camera_CompObj;
 8001642:	4a13      	ldr	r2, [pc, #76]	; (8001690 <CAMERA_Disable_TestBar_Mode+0x6c>)
    tmp=0x00;
 8001644:	2100      	movs	r1, #0
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 8001646:	2301      	movs	r3, #1
    OV9655_Object_t *pObj = Camera_CompObj;
 8001648:	6814      	ldr	r4, [r2, #0]
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 800164a:	f10d 0207 	add.w	r2, sp, #7
    tmp=0x00;
 800164e:	f88d 1007 	strb.w	r1, [sp, #7]
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 8001652:	218d      	movs	r1, #141	; 0x8d
 8001654:	3418      	adds	r4, #24
 8001656:	4620      	mov	r0, r4
 8001658:	f008 f814 	bl	8009684 <ov9655_write_reg>
    HAL_Delay(300);
 800165c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001660:	f00a f912 	bl	800b888 <HAL_Delay>
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL3, &tmp, 1);
 8001664:	2301      	movs	r3, #1
 8001666:	f10d 0207 	add.w	r2, sp, #7
 800166a:	210c      	movs	r1, #12
 800166c:	4620      	mov	r0, r4
 800166e:	f008 f809 	bl	8009684 <ov9655_write_reg>
    HAL_Delay(300);
 8001672:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001676:	f00a f907 	bl	800b888 <HAL_Delay>
  HAL_Delay(500);
 800167a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 800167e:	b002      	add	sp, #8
 8001680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_Delay(500);
 8001684:	f00a b900 	b.w	800b888 <HAL_Delay>
 8001688:	20009eac 	.word	0x20009eac
 800168c:	ffff69aa 	.word	0xffff69aa
 8001690:	20009ea8 	.word	0x20009ea8

08001694 <BSP_CAMERA_FrameEventCallback>:
{
 8001694:	b570      	push	{r4, r5, r6, lr}
  AppContext_TypeDef *App_Cxt_Ptr=CameraContext.AppCtxPtr;
 8001696:	4c0c      	ldr	r4, [pc, #48]	; (80016c8 <BSP_CAMERA_FrameEventCallback+0x34>)
 8001698:	69a3      	ldr	r3, [r4, #24]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800169a:	b672      	cpsid	i
  CameraContext.new_frame_ready = 1;
 800169c:	2501      	movs	r5, #1
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestop = HAL_GetTick();
 800169e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  CameraContext.new_frame_ready = 1;
 80016a0:	7525      	strb	r5, [r4, #20]
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestop = HAL_GetTick();
 80016a2:	f00a f8eb 	bl	800b87c <HAL_GetTick>
 80016a6:	6270      	str	r0, [r6, #36]	; 0x24
  CameraContext.new_frame_ready = 1;
 80016a8:	7525      	strb	r5, [r4, #20]
  CameraContext.Tframe_evt=HAL_GetTick();
 80016aa:	f00a f8e7 	bl	800b87c <HAL_GetTick>
  if((CameraContext.Tframe_evt-CameraContext.Tvsync_evt)<3)
 80016ae:	6923      	ldr	r3, [r4, #16]
  CameraContext.Tframe_evt=HAL_GetTick();
 80016b0:	60e0      	str	r0, [r4, #12]
  if((CameraContext.Tframe_evt-CameraContext.Tvsync_evt)<3)
 80016b2:	1ac3      	subs	r3, r0, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d801      	bhi.n	80016bc <BSP_CAMERA_FrameEventCallback+0x28>
    CameraContext.vsync_it =2;
 80016b8:	2302      	movs	r3, #2
 80016ba:	60a3      	str	r3, [r4, #8]
  BSP_CAMERA_Suspend(0);
 80016bc:	2000      	movs	r0, #0
 80016be:	f009 f8d5 	bl	800a86c <BSP_CAMERA_Suspend>
  __ASM volatile ("cpsie i" : : : "memory");
 80016c2:	b662      	cpsie	i
}
 80016c4:	bd70      	pop	{r4, r5, r6, pc}
 80016c6:	bf00      	nop
 80016c8:	20007b48 	.word	0x20007b48

080016cc <BSP_CAMERA_VsyncEventCallback>:
{ 
 80016cc:	b570      	push	{r4, r5, r6, lr}
  AppContext_TypeDef *App_Cxt_Ptr=CameraContext.AppCtxPtr;
 80016ce:	4c19      	ldr	r4, [pc, #100]	; (8001734 <BSP_CAMERA_VsyncEventCallback+0x68>)
 80016d0:	69a5      	ldr	r5, [r4, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 80016d2:	b672      	cpsid	i
  CameraContext.Tvsync_evt=HAL_GetTick();
 80016d4:	f00a f8d2 	bl	800b87c <HAL_GetTick>
  if(CameraContext.vsync_it==0)
 80016d8:	68a3      	ldr	r3, [r4, #8]
  CameraContext.Tvsync_evt=HAL_GetTick();
 80016da:	6120      	str	r0, [r4, #16]
  if(CameraContext.vsync_it==0)
 80016dc:	b19b      	cbz	r3, 8001706 <BSP_CAMERA_VsyncEventCallback+0x3a>
  else if(CameraContext.vsync_it==1 && ((CameraContext.new_frame_ready == 0) || ((CameraContext.new_frame_ready == 1) && ((CameraContext.Tvsync_evt - CameraContext.Tframe_evt) < 3))))//3 ms: in reality the time diff is in the magnitude of a few hundreds of ns, but some margin is required because there could be other interrupts in between the vsync_evt IT and the frame_evt IT.
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d007      	beq.n	80016f2 <BSP_CAMERA_VsyncEventCallback+0x26>
 80016e2:	68e3      	ldr	r3, [r4, #12]
 80016e4:	1ac0      	subs	r0, r0, r3
  if(CameraContext.Tvsync_evt - CameraContext.Tframe_evt <3)
 80016e6:	2802      	cmp	r0, #2
 80016e8:	d801      	bhi.n	80016ee <BSP_CAMERA_VsyncEventCallback+0x22>
    CameraContext.vsync_it =2;
 80016ea:	2302      	movs	r3, #2
 80016ec:	60a3      	str	r3, [r4, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80016ee:	b662      	cpsie	i
}
 80016f0:	bd70      	pop	{r4, r5, r6, pc}
  else if(CameraContext.vsync_it==1 && ((CameraContext.new_frame_ready == 0) || ((CameraContext.new_frame_ready == 1) && ((CameraContext.Tvsync_evt - CameraContext.Tframe_evt) < 3))))//3 ms: in reality the time diff is in the magnitude of a few hundreds of ns, but some margin is required because there could be other interrupts in between the vsync_evt IT and the frame_evt IT.
 80016f2:	7d23      	ldrb	r3, [r4, #20]
 80016f4:	b9a3      	cbnz	r3, 8001720 <BSP_CAMERA_VsyncEventCallback+0x54>
 80016f6:	68e3      	ldr	r3, [r4, #12]
 80016f8:	1ac0      	subs	r0, r0, r3
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2;
 80016fa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    CameraContext.vsync_it ++;
 80016fc:	2102      	movs	r1, #2
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2;
 80016fe:	69da      	ldr	r2, [r3, #28]
    CameraContext.vsync_it ++;
 8001700:	60a1      	str	r1, [r4, #8]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2;
 8001702:	621a      	str	r2, [r3, #32]
    CameraContext.vsync_it ++;
 8001704:	e7ef      	b.n	80016e6 <BSP_CAMERA_VsyncEventCallback+0x1a>
    CameraContext.vsync_it ++;
 8001706:	2301      	movs	r3, #1
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2 = HAL_GetTick();
 8001708:	6b6e      	ldr	r6, [r5, #52]	; 0x34
    CameraContext.vsync_it ++;
 800170a:	60a3      	str	r3, [r4, #8]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2 = HAL_GetTick();
 800170c:	f00a f8b6 	bl	800b87c <HAL_GetTick>
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1;
 8001710:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  if(CameraContext.Tvsync_evt - CameraContext.Tframe_evt <3)
 8001712:	6923      	ldr	r3, [r4, #16]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1;
 8001714:	6991      	ldr	r1, [r2, #24]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2 = HAL_GetTick();
 8001716:	61f0      	str	r0, [r6, #28]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1;
 8001718:	6211      	str	r1, [r2, #32]
  if(CameraContext.Tvsync_evt - CameraContext.Tframe_evt <3)
 800171a:	68e2      	ldr	r2, [r4, #12]
 800171c:	1a98      	subs	r0, r3, r2
 800171e:	e7e2      	b.n	80016e6 <BSP_CAMERA_VsyncEventCallback+0x1a>
  else if(CameraContext.vsync_it==1 && ((CameraContext.new_frame_ready == 0) || ((CameraContext.new_frame_ready == 1) && ((CameraContext.Tvsync_evt - CameraContext.Tframe_evt) < 3))))//3 ms: in reality the time diff is in the magnitude of a few hundreds of ns, but some margin is required because there could be other interrupts in between the vsync_evt IT and the frame_evt IT.
 8001720:	7d23      	ldrb	r3, [r4, #20]
 8001722:	2b01      	cmp	r3, #1
 8001724:	68e3      	ldr	r3, [r4, #12]
 8001726:	eba0 0003 	sub.w	r0, r0, r3
 800172a:	d1dc      	bne.n	80016e6 <BSP_CAMERA_VsyncEventCallback+0x1a>
 800172c:	2802      	cmp	r0, #2
 800172e:	d8de      	bhi.n	80016ee <BSP_CAMERA_VsyncEventCallback+0x22>
 8001730:	e7e3      	b.n	80016fa <BSP_CAMERA_VsyncEventCallback+0x2e>
 8001732:	bf00      	nop
 8001734:	20007b48 	.word	0x20007b48

08001738 <BSP_CAMERA_ErrorCallback>:
  Error_Handler();
 8001738:	f003 bd18 	b.w	800516c <Error_Handler>

0800173c <DISPLAY_Init>:
 * @param Display_Context_Ptr pointer to display context
 * @retval None
 */
static void Display_Context_Init(DisplayContext_TypeDef* Display_Context_Ptr)
{
  Display_Context_Ptr->lcd_frame_read_buff=lcd_display_read_buffer;
 800173c:	4921      	ldr	r1, [pc, #132]	; (80017c4 <DISPLAY_Init+0x88>)
  Display_Context_Ptr->lcd_frame_write_buff=lcd_display_write_buffer;
 800173e:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <DISPLAY_Init+0x8c>)

  /*
   * Disable FMC Bank1 to prevent CPU speculative read accesses
   * AN4861: 4.6.1 Disable FMC bank1 if not used.
   */
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 8001740:	4a22      	ldr	r2, [pc, #136]	; (80017cc <DISPLAY_Init+0x90>)
  Display_Context_Ptr->lcd_frame_read_buff=lcd_display_read_buffer;
 8001742:	6809      	ldr	r1, [r1, #0]
  Display_Context_Ptr->lcd_frame_write_buff=lcd_display_write_buffer;
 8001744:	681b      	ldr	r3, [r3, #0]
{
 8001746:	b530      	push	{r4, r5, lr}
  Display_Context_Ptr->lcd_sync=0;
 8001748:	2500      	movs	r5, #0
{
 800174a:	b087      	sub	sp, #28
 800174c:	4604      	mov	r4, r0
  Display_Context_Ptr->lcd_sync=0;
 800174e:	6085      	str	r5, [r0, #8]
  Display_Context_Ptr->lcd_frame_write_buff=lcd_display_write_buffer;
 8001750:	e9c0 1300 	strd	r1, r3, [r0]
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 8001754:	6813      	ldr	r3, [r2, #0]

  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);/*by default, 0xD0000000 is used as start address for lcd frame buffer*/
 8001756:	2101      	movs	r1, #1
 8001758:	4628      	mov	r0, r5
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 800175a:	f023 0301 	bic.w	r3, r3, #1
 800175e:	6013      	str	r3, [r2, #0]
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);/*by default, 0xD0000000 is used as start address for lcd frame buffer*/
 8001760:	f009 fede 	bl	800b520 <BSP_LCD_Init>

  config.X0          = 0;
 8001764:	2000      	movs	r0, #0
 8001766:	f44f 7148 	mov.w	r1, #800	; 0x320
  config.X1          = LCD_DEFAULT_WIDTH;
  config.Y0          = 0;
  config.Y1          = LCD_DEFAULT_HEIGHT;
  config.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  config.Address     = (uint32_t)Display_Context_Ptr->lcd_frame_read_buff;/*lcd_frame_read_buff buffer used as lcd frame buffer*/
 800176a:	6823      	ldr	r3, [r4, #0]
  BSP_LCD_ConfigLayer(0, 0, &config);//overwrite config 
 800176c:	466a      	mov	r2, sp
  config.X0          = 0;
 800176e:	e9cd 0100 	strd	r0, r1, [sp]
 8001772:	2000      	movs	r0, #0
 8001774:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001778:	e9cd 0102 	strd	r0, r1, [sp, #8]
  BSP_LCD_ConfigLayer(0, 0, &config);//overwrite config 
 800177c:	4629      	mov	r1, r5
 800177e:	4628      	mov	r0, r5
  config.Address     = (uint32_t)Display_Context_Ptr->lcd_frame_read_buff;/*lcd_frame_read_buff buffer used as lcd frame buffer*/
 8001780:	e9cd 5304 	strd	r5, r3, [sp, #16]
  BSP_LCD_ConfigLayer(0, 0, &config);//overwrite config 
 8001784:	f009 fed8 	bl	800b538 <BSP_LCD_ConfigLayer>
  
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8001788:	4811      	ldr	r0, [pc, #68]	; (80017d0 <DISPLAY_Init+0x94>)
 800178a:	f019 ff21 	bl	801b5d0 <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetLayer(0);
 800178e:	4628      	mov	r0, r5
 8001790:	f019 ff4e 	bl	801b630 <UTIL_LCD_SetLayer>
  
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 8001794:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001798:	f019 ff62 	bl	801b660 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 800179c:	f04f 30ff 	mov.w	r0, #4294967295
 80017a0:	f019 ff56 	bl	801b650 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font24);
 80017a4:	480b      	ldr	r0, [pc, #44]	; (80017d4 <DISPLAY_Init+0x98>)
 80017a6:	f019 ff63 	bl	801b670 <UTIL_LCD_SetFont>
  
  /*Use lcd_frame_write_buff buffer for display composition*/
  hlcd_ltdc.LayerCfg[Lcd_Ctx[0].ActiveLayer].FBStartAdress=(uint32_t)Display_Context_Ptr->lcd_frame_write_buff;
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <DISPLAY_Init+0x9c>)
 80017ac:	480b      	ldr	r0, [pc, #44]	; (80017dc <DISPLAY_Init+0xa0>)
 80017ae:	2534      	movs	r5, #52	; 0x34
 80017b0:	689b      	ldr	r3, [r3, #8]
  
  /*LCD sync: set LTDCreload type to vertical blanking*/
  HAL_LTDC_Reload(&hlcd_ltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 80017b2:	2102      	movs	r1, #2
  hlcd_ltdc.LayerCfg[Lcd_Ctx[0].ActiveLayer].FBStartAdress=(uint32_t)Display_Context_Ptr->lcd_frame_write_buff;
 80017b4:	6862      	ldr	r2, [r4, #4]
 80017b6:	fb05 0303 	mla	r3, r5, r3, r0
 80017ba:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_LTDC_Reload(&hlcd_ltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 80017bc:	f00d fd12 	bl	800f1e4 <HAL_LTDC_Reload>
}
 80017c0:	b007      	add	sp, #28
 80017c2:	bd30      	pop	{r4, r5, pc}
 80017c4:	20000018 	.word	0x20000018
 80017c8:	2000001c 	.word	0x2000001c
 80017cc:	52004000 	.word	0x52004000
 80017d0:	080992dc 	.word	0x080992dc
 80017d4:	20007728 	.word	0x20007728
 80017d8:	2000a004 	.word	0x2000a004
 80017dc:	2000a0c8 	.word	0x2000a0c8

080017e0 <DISPLAY_WelcomeScreen>:
 *
 * @param Display_Context_Ptr pointer to display context
 * @return int boolean value, 1 if WakeUp button has been pressed, 0 otherwise
 */
int DISPLAY_WelcomeScreen(DisplayContext_TypeDef* Display_Context_Ptr)
{
 80017e0:	b530      	push	{r4, r5, lr}
 80017e2:	4604      	mov	r4, r0
 80017e4:	b089      	sub	sp, #36	; 0x24
  int magic_menu = 0;
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80017e6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80017ea:	f019 ff51 	bl	801b690 <UTIL_LCD_Clear>

  /* Draw logos.*/
  BSP_LCD_DrawBitmap(0, 50, 77, (uint8_t *)stlogo);
 80017ee:	4b4d      	ldr	r3, [pc, #308]	; (8001924 <DISPLAY_WelcomeScreen+0x144>)
 80017f0:	224d      	movs	r2, #77	; 0x4d
 80017f2:	2132      	movs	r1, #50	; 0x32
 80017f4:	2000      	movs	r0, #0
 80017f6:	f009 f9c7 	bl	800ab88 <BSP_LCD_DrawBitmap>
  BSP_LCD_DrawBitmap(0, 620, 85, (uint8_t *)stm32h7logo);
 80017fa:	4b4b      	ldr	r3, [pc, #300]	; (8001928 <DISPLAY_WelcomeScreen+0x148>)
 80017fc:	2255      	movs	r2, #85	; 0x55
 80017fe:	f44f 711b 	mov.w	r1, #620	; 0x26c
 8001802:	2000      	movs	r0, #0
 8001804:	f009 f9c0 	bl	800ab88 <BSP_LCD_DrawBitmap>

  /*Display welcome message*/
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"ECO-SORT", CENTER_MODE);
 8001808:	f019 ff3a 	bl	801b680 <UTIL_LCD_GetFont>
 800180c:	4601      	mov	r1, r0
 800180e:	2301      	movs	r3, #1
 8001810:	4a46      	ldr	r2, [pc, #280]	; (800192c <DISPLAY_WelcomeScreen+0x14c>)
 8001812:	88c9      	ldrh	r1, [r1, #6]
 8001814:	2000      	movs	r0, #0
 8001816:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800181a:	4099      	lsls	r1, r3
 800181c:	f01a f828 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(7), (uint8_t *)"The Waste Segregator", CENTER_MODE);
 8001820:	f019 ff2e 	bl	801b680 <UTIL_LCD_GetFont>
 8001824:	4601      	mov	r1, r0
 8001826:	2301      	movs	r3, #1
 8001828:	4a41      	ldr	r2, [pc, #260]	; (8001930 <DISPLAY_WelcomeScreen+0x150>)
 800182a:	88c9      	ldrh	r1, [r1, #6]
 800182c:	2000      	movs	r0, #0
 800182e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001832:	f01a f81d 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(10), (uint8_t *)WELCOME_MSG_0, CENTER_MODE);
 8001836:	f019 ff23 	bl	801b680 <UTIL_LCD_GetFont>
 800183a:	4601      	mov	r1, r0
 800183c:	2301      	movs	r3, #1
 800183e:	4a3d      	ldr	r2, [pc, #244]	; (8001934 <DISPLAY_WelcomeScreen+0x154>)
 8001840:	88c9      	ldrh	r1, [r1, #6]
 8001842:	2000      	movs	r0, #0
 8001844:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001848:	4099      	lsls	r1, r3
 800184a:	f01a f811 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(11), (uint8_t *)WELCOME_MSG_2, CENTER_MODE);
 800184e:	f019 ff17 	bl	801b680 <UTIL_LCD_GetFont>
 8001852:	88c1      	ldrh	r1, [r0, #6]
 8001854:	2301      	movs	r3, #1
 8001856:	4a38      	ldr	r2, [pc, #224]	; (8001938 <DISPLAY_WelcomeScreen+0x158>)
 8001858:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 800185c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8001860:	2000      	movs	r0, #0
 8001862:	f01a f805 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)WELCOME_MSG_1, CENTER_MODE);
 8001866:	f019 ff0b 	bl	801b680 <UTIL_LCD_GetFont>
 800186a:	4601      	mov	r1, r0
 800186c:	2301      	movs	r3, #1
 800186e:	4a33      	ldr	r2, [pc, #204]	; (800193c <DISPLAY_WelcomeScreen+0x15c>)
 8001870:	88c9      	ldrh	r1, [r1, #6]
 8001872:	2000      	movs	r0, #0
 8001874:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001878:	0089      	lsls	r1, r1, #2
 800187a:	f019 fff9 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(13), (uint8_t *)WELCOME_MSG_4, CENTER_MODE);
 800187e:	f019 feff 	bl	801b680 <UTIL_LCD_GetFont>
 8001882:	88c1      	ldrh	r1, [r0, #6]
 8001884:	2301      	movs	r3, #1
 8001886:	4a2e      	ldr	r2, [pc, #184]	; (8001940 <DISPLAY_WelcomeScreen+0x160>)
 8001888:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800188c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8001890:	2000      	movs	r0, #0
 8001892:	f019 ffed 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)WELCOME_MSG_5, CENTER_MODE);
 8001896:	f019 fef3 	bl	801b680 <UTIL_LCD_GetFont>
 800189a:	4601      	mov	r1, r0
 800189c:	2301      	movs	r3, #1
 800189e:	4a29      	ldr	r2, [pc, #164]	; (8001944 <DISPLAY_WelcomeScreen+0x164>)
 80018a0:	88c9      	ldrh	r1, [r1, #6]
 80018a2:	2000      	movs	r0, #0
 80018a4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80018a8:	4099      	lsls	r1, r3
 80018aa:	f019 ffe1 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *)WELCOME_MSG_3, CENTER_MODE);
 80018ae:	f019 fee7 	bl	801b680 <UTIL_LCD_GetFont>
 80018b2:	4601      	mov	r1, r0
 80018b4:	2301      	movs	r3, #1
 80018b6:	4a24      	ldr	r2, [pc, #144]	; (8001948 <DISPLAY_WelcomeScreen+0x168>)
 80018b8:	88c9      	ldrh	r1, [r1, #6]
 80018ba:	2000      	movs	r0, #0
 80018bc:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80018c0:	f019 ffd6 	bl	801b870 <UTIL_LCD_DisplayStringAt>
 */
void DISPLAY_Refresh(DisplayContext_TypeDef* Display_Context_Ptr)
{
  /*LCD sync: wait for next VSYNC event before refreshing, i.e. before updating the content of the buffer that will be read by the LTDC for display. 
  The refresh occurs during the blanking period => this sync mecanism should enable to avoid tearing effect*/
  Display_Context_Ptr->lcd_sync =0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60a3      	str	r3, [r4, #8]
  while(Display_Context_Ptr->lcd_sync==0);
 80018c8:	68a3      	ldr	r3, [r4, #8]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0fc      	beq.n	80018c8 <DISPLAY_WelcomeScreen+0xe8>
  
  /*Coherency purpose: clean the lcd_frame_write_buff area in L1 D-Cache before DMA2D reading*/
  UTILS_DCache_Coherency_Maintenance((void *)Display_Context_Ptr->lcd_frame_write_buff, LCD_FRAME_BUFFER_SIZE, CLEAN);
 80018ce:	6860      	ldr	r0, [r4, #4]
 80018d0:	2202      	movs	r2, #2
 80018d2:	491e      	ldr	r1, [pc, #120]	; (800194c <DISPLAY_WelcomeScreen+0x16c>)
 80018d4:	f003 fbda 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
  
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 80018d8:	2300      	movs	r3, #0
 80018da:	f44f 7248 	mov.w	r2, #800	; 0x320
 80018de:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
  int magic_menu = 0;
 80018e2:	461d      	mov	r5, r3
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 80018e4:	9200      	str	r2, [sp, #0]
 80018e6:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80018ea:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80018ee:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80018f2:	e9d4 1000 	ldrd	r1, r0, [r4]
 80018f6:	2405      	movs	r4, #5
 80018f8:	461a      	mov	r2, r3
 80018fa:	f003 fb13 	bl	8004f24 <UTILS_Dma2d_Memcpy>
    HAL_Delay(500);
 80018fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001902:	f009 ffc1 	bl	800b888 <HAL_Delay>
    if (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 8001906:	2000      	movs	r0, #0
 8001908:	f007 ff76 	bl	80097f8 <BSP_PB_GetState>
      magic_menu = 1;
 800190c:	2800      	cmp	r0, #0
 800190e:	bf18      	it	ne
 8001910:	2501      	movne	r5, #1
  for (int i = 0; i < 5; i++)
 8001912:	3c01      	subs	r4, #1
 8001914:	d1f3      	bne.n	80018fe <DISPLAY_WelcomeScreen+0x11e>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001916:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800191a:	f019 feb9 	bl	801b690 <UTIL_LCD_Clear>
}
 800191e:	4628      	mov	r0, r5
 8001920:	b009      	add	sp, #36	; 0x24
 8001922:	bd30      	pop	{r4, r5, pc}
 8001924:	081000a0 	.word	0x081000a0
 8001928:	081082e8 	.word	0x081082e8
 800192c:	08100008 	.word	0x08100008
 8001930:	08100014 	.word	0x08100014
 8001934:	0810002c 	.word	0x0810002c
 8001938:	08100034 	.word	0x08100034
 800193c:	08100044 	.word	0x08100044
 8001940:	08100054 	.word	0x08100054
 8001944:	08100068 	.word	0x08100068
 8001948:	0810007c 	.word	0x0810007c
 800194c:	00177000 	.word	0x00177000

08001950 <DISPLAY_Refresh>:
{
 8001950:	b510      	push	{r4, lr}
  Display_Context_Ptr->lcd_sync =0;
 8001952:	2300      	movs	r3, #0
{
 8001954:	b088      	sub	sp, #32
 8001956:	4604      	mov	r4, r0
  Display_Context_Ptr->lcd_sync =0;
 8001958:	6083      	str	r3, [r0, #8]
  while(Display_Context_Ptr->lcd_sync==0);
 800195a:	68a3      	ldr	r3, [r4, #8]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0fc      	beq.n	800195a <DISPLAY_Refresh+0xa>
  UTILS_DCache_Coherency_Maintenance((void *)Display_Context_Ptr->lcd_frame_write_buff, LCD_FRAME_BUFFER_SIZE, CLEAN);
 8001960:	6860      	ldr	r0, [r4, #4]
 8001962:	2202      	movs	r2, #2
 8001964:	490a      	ldr	r1, [pc, #40]	; (8001990 <DISPLAY_Refresh+0x40>)
 8001966:	f003 fb91 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 800196a:	2300      	movs	r3, #0
 800196c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001970:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001974:	461a      	mov	r2, r3
 8001976:	9100      	str	r1, [sp, #0]
 8001978:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800197c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001980:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001984:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001988:	f003 facc 	bl	8004f24 <UTILS_Dma2d_Memcpy>
                     LCD_RES_HEIGHT, LCD_RES_WIDTH, DMA2D_INPUT_ARGB8888, DMA2D_OUTPUT_ARGB8888, 0, 0);
}
 800198c:	b008      	add	sp, #32
 800198e:	bd10      	pop	{r4, pc}
 8001990:	00177000 	.word	0x00177000

08001994 <DISPLAY_Copy2LCDWriteBuffer>:
 * @param input_color_format input color format (e.g DMA2D_INPUT_RGB888)
 * @param red_blue_swap boolean flag for red-blue channel swap, 0 is no swap, 1 is swap
 */
void DISPLAY_Copy2LCDWriteBuffer(DisplayContext_TypeDef* Display_Context_Ptr, uint32_t *pSrc, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize,
                              uint32_t input_color_format, int red_blue_swap)
{
 8001994:	b510      	push	{r4, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	4684      	mov	ip, r0
 800199a:	4608      	mov	r0, r1
 800199c:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 80019a0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80019a4:	f04f 0c01 	mov.w	ip, #1
 80019a8:	9400      	str	r4, [sp, #0]
{
 80019aa:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 80019ae:	9401      	str	r4, [sp, #4]
{
 80019b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 80019b2:	9403      	str	r4, [sp, #12]
 80019b4:	f44f 7448 	mov.w	r4, #800	; 0x320
 80019b8:	9402      	str	r4, [sp, #8]
{
 80019ba:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 80019bc:	9406      	str	r4, [sp, #24]
 80019be:	2400      	movs	r4, #0
 80019c0:	e9cd 4c04 	strd	r4, ip, [sp, #16]
 80019c4:	f003 faae 	bl	8004f24 <UTILS_Dma2d_Memcpy>
                input_color_format, DMA2D_OUTPUT_ARGB8888, 1, red_blue_swap);
}
 80019c8:	b008      	add	sp, #32
 80019ca:	bd10      	pop	{r4, pc}

080019cc <HAL_LTDC_ReloadEventCallback>:

}

void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
  Display_Context.lcd_sync=1;
 80019cc:	4b02      	ldr	r3, [pc, #8]	; (80019d8 <HAL_LTDC_ReloadEventCallback+0xc>)
 80019ce:	2201      	movs	r2, #1
  
  /*Set LTDCreload type to vertical blanking*/
  HAL_LTDC_Reload(hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 80019d0:	2102      	movs	r1, #2
  Display_Context.lcd_sync=1;
 80019d2:	609a      	str	r2, [r3, #8]
  HAL_LTDC_Reload(hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 80019d4:	f00d bc06 	b.w	800f1e4 <HAL_LTDC_Reload>
 80019d8:	20007bd4 	.word	0x20007bd4

080019dc <PREPROC_ImageResize>:
/**
 * @brief Performs image (or selected Region Of Interest) resizing
 * @param Preproc_Context_Ptr Pointer to PREPROC context
 */
void PREPROC_ImageResize(PreprocContext_TypeDef* Preproc_Context_Ptr)
{
 80019dc:	b510      	push	{r4, lr}
  image_t *src_img = &Preproc_Context_Ptr->Resize_Src_Img;
 80019de:	f100 042c 	add.w	r4, r0, #44	; 0x2c
{
 80019e2:	b082      	sub	sp, #8
  image_t *dst_img = &Preproc_Context_Ptr->Resize_Dst_Img;
 80019e4:	f100 013c 	add.w	r1, r0, #60	; 0x3c
  bool reverse = Image_CheckResizeMemoryLayout(src_img, dst_img);
 80019e8:	4620      	mov	r0, r4
 80019ea:	9101      	str	r1, [sp, #4]
 80019ec:	f017 fd4e 	bl	801948c <Image_CheckResizeMemoryLayout>

  if (STM32Ipl_Downscale(src_img, dst_img, reverse) != stm32ipl_err_Ok)
 80019f0:	9901      	ldr	r1, [sp, #4]
  bool reverse = Image_CheckResizeMemoryLayout(src_img, dst_img);
 80019f2:	4602      	mov	r2, r0
  if (STM32Ipl_Downscale(src_img, dst_img, reverse) != stm32ipl_err_Ok)
 80019f4:	4620      	mov	r0, r4
 80019f6:	f019 fafd 	bl	801aff4 <STM32Ipl_Downscale>
 80019fa:	b908      	cbnz	r0, 8001a00 <PREPROC_ImageResize+0x24>
  {
    while (1);
  }
}
 80019fc:	b002      	add	sp, #8
 80019fe:	bd10      	pop	{r4, pc}
    while (1);
 8001a00:	e7fe      	b.n	8001a00 <PREPROC_ImageResize+0x24>
 8001a02:	bf00      	nop

08001a04 <PREPROC_PixelFormatConversion>:
  image_t *src_img = &Preproc_Context_Ptr->Pfc_Src_Img;
  image_t *dst_img = &Preproc_Context_Ptr->Pfc_Dst_Img;
  uint32_t rb_swap = Preproc_Context_Ptr->red_blue_swap;

#if PIXEL_FMT_CONV == HW_PFC
  if((src_img->bpp == IMAGE_BPP_RGB565) && (dst_img->bpp == IMAGE_BPP_RGB888))
 8001a04:	6943      	ldr	r3, [r0, #20]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d000      	beq.n	8001a0c <PREPROC_PixelFormatConversion+0x8>
                       1,
                       rb_swap);
  }
  else
  {
    while (1);
 8001a0a:	e7fe      	b.n	8001a0a <PREPROC_PixelFormatConversion+0x6>
  if((src_img->bpp == IMAGE_BPP_RGB565) && (dst_img->bpp == IMAGE_BPP_RGB888))
 8001a0c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001a0e:	2a04      	cmp	r2, #4
 8001a10:	d1fb      	bne.n	8001a0a <PREPROC_PixelFormatConversion+0x6>
    UTILS_Dma2d_Memcpy((uint32_t *)(src_img->data),
 8001a12:	6881      	ldr	r1, [r0, #8]
 8001a14:	2201      	movs	r2, #1
{
 8001a16:	b530      	push	{r4, r5, lr}
 8001a18:	b089      	sub	sp, #36	; 0x24
    UTILS_Dma2d_Memcpy((uint32_t *)(src_img->data),
 8001a1a:	69c5      	ldr	r5, [r0, #28]
 8001a1c:	9303      	str	r3, [sp, #12]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	9106      	str	r1, [sp, #24]
 8001a22:	8a04      	ldrh	r4, [r0, #16]
 8001a24:	8981      	ldrh	r1, [r0, #12]
 8001a26:	9502      	str	r5, [sp, #8]
 8001a28:	e9cd 2204 	strd	r2, r2, [sp, #16]
 8001a2c:	e9cd 1400 	strd	r1, r4, [sp]
 8001a30:	461a      	mov	r2, r3
 8001a32:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001a34:	6980      	ldr	r0, [r0, #24]
 8001a36:	f003 fa75 	bl	8004f24 <UTILS_Dma2d_Memcpy>
    while (1);
  }
#else
 #error PFC method not valid!
#endif
}
 8001a3a:	b009      	add	sp, #36	; 0x24
 8001a3c:	bd30      	pop	{r4, r5, pc}
 8001a3e:	bf00      	nop

08001a40 <PREPROC_Pixel_RB_Swap>:
  uint8_t tmp_r;
  
  struct rgb_Src *pivot = (struct rgb_Src *) pSrc;
  struct rgb_Dst *dest = (struct rgb_Dst *) pDst;
  
  for (int i = pixels-1; i >= 0; i--)
 8001a40:	1e53      	subs	r3, r2, #1
 8001a42:	d412      	bmi.n	8001a6a <PREPROC_Pixel_RB_Swap+0x2a>
 8001a44:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001a48:	4410      	add	r0, r2
 8001a4a:	4411      	add	r1, r2
  {
    tmp_r=pivot[i].r;
 8001a4c:	f810 2c03 	ldrb.w	r2, [r0, #-3]
  for (int i = pixels-1; i >= 0; i--)
 8001a50:	3803      	subs	r0, #3
    
    dest[i].r = pivot[i].b;
 8001a52:	f890 c002 	ldrb.w	ip, [r0, #2]
  for (int i = pixels-1; i >= 0; i--)
 8001a56:	3b01      	subs	r3, #1
    dest[i].b = tmp_r;
 8001a58:	f801 2c01 	strb.w	r2, [r1, #-1]
  for (int i = pixels-1; i >= 0; i--)
 8001a5c:	3903      	subs	r1, #3
    dest[i].r = pivot[i].b;
 8001a5e:	f881 c000 	strb.w	ip, [r1]
    dest[i].g = pivot[i].g;
 8001a62:	7842      	ldrb	r2, [r0, #1]
 8001a64:	704a      	strb	r2, [r1, #1]
  for (int i = pixels-1; i >= 0; i--)
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	d1f0      	bne.n	8001a4c <PREPROC_Pixel_RB_Swap+0xc>
  }
}
 8001a6a:	4770      	bx	lr

08001a6c <UartCmd_Run_Validation>:
  /***Resume the camera capture in NOMINAL mode****/
  BSP_CAMERA_Resume(0);
}

static void UartCmd_Run_Validation(TestContext_TypeDef *Test_Context_Ptr, uint8_t* data_buffer, uint16_t data_size)
{
 8001a6c:	b410      	push	{r4}
  ************************************************/

  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;

  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
  Test_Context_Ptr->UartContext.uart_host_requested_mode=VALID;
 8001a6e:	f04f 0c02 	mov.w	ip, #2
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001a72:	2401      	movs	r4, #1
  Test_Context_Ptr->ValidationContext.validation_write_bufferPtr=(uint8_t*)validation_output_buff;
 8001a74:	4906      	ldr	r1, [pc, #24]	; (8001a90 <UartCmd_Run_Validation+0x24>)

#ifdef OBJECTDETECT  
  Test_Context_Ptr->ValidationContext.acc_num_object_detected=0;
#endif
  
  App_Cxt_Ptr->run_loop = 0;
 8001a76:	2200      	movs	r2, #0
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001a78:	f8d0 3600 	ldr.w	r3, [r0, #1536]	; 0x600
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001a7c:	f8c0 4520 	str.w	r4, [r0, #1312]	; 0x520
  Test_Context_Ptr->UartContext.uart_host_requested_mode=VALID;
 8001a80:	f880 c524 	strb.w	ip, [r0, #1316]	; 0x524
  Test_Context_Ptr->ValidationContext.validation_write_bufferPtr=(uint8_t*)validation_output_buff;
 8001a84:	f8c0 151c 	str.w	r1, [r0, #1308]	; 0x51c
}
 8001a88:	f85d 4b04 	ldr.w	r4, [sp], #4
  App_Cxt_Ptr->run_loop = 0;
 8001a8c:	605a      	str	r2, [r3, #4]
}
 8001a8e:	4770      	bx	lr
 8001a90:	d0cb0920 	.word	0xd0cb0920

08001a94 <UartCmd_Launch_Dump>:
  *This command has two parameters:
  *Dump sub-mode (1 byte): CAMERA_LIVE= 0x01, CAMERA_COLORBAR= 0x02, SDCARD_FILE= 0x03
  *Dump memory location (1 byte): SDCARD (0x00) or SDRAM (0x01)
  ***********************************************************************************/

  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001a94:	f8d0 3600 	ldr.w	r3, [r0, #1536]	; 0x600
  
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 8001a98:	f04f 0c03 	mov.w	ip, #3
  App_Cxt_Ptr->run_loop = 0;
 8001a9c:	2200      	movs	r2, #0
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 8001a9e:	f880 c524 	strb.w	ip, [r0, #1316]	; 0x524
{
 8001aa2:	b410      	push	{r4}
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001aa4:	2401      	movs	r4, #1
 8001aa6:	f8c0 4520 	str.w	r4, [r0, #1312]	; 0x520
  App_Cxt_Ptr->run_loop = 0;
 8001aaa:	605a      	str	r2, [r3, #4]
  
  Test_Context_Ptr->UartContext.uart_host_requested_dump_submode=(MemDumpFrameSource_TypeDef)(*(uint8_t*)(data_buffer));
 8001aac:	780b      	ldrb	r3, [r1, #0]
 8001aae:	f880 3525 	strb.w	r3, [r0, #1317]	; 0x525
  Test_Context_Ptr->UartContext.uart_host_requested_dump_memory=(MemDumpMemoryLocation_TypeDef)(*(uint8_t*)(data_buffer+1));
 8001ab2:	784b      	ldrb	r3, [r1, #1]
  
  if(Test_Context_Ptr->UartContext.uart_host_requested_dump_memory == SDRAM)
 8001ab4:	42a3      	cmp	r3, r4
  Test_Context_Ptr->UartContext.uart_host_requested_dump_memory=(MemDumpMemoryLocation_TypeDef)(*(uint8_t*)(data_buffer+1));
 8001ab6:	f880 3526 	strb.w	r3, [r0, #1318]	; 0x526
  if(Test_Context_Ptr->UartContext.uart_host_requested_dump_memory == SDRAM)
 8001aba:	d101      	bne.n	8001ac0 <UartCmd_Launch_Dump+0x2c>
    Test_Context_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 8001abc:	4b02      	ldr	r3, [pc, #8]	; (8001ac8 <UartCmd_Launch_Dump+0x34>)
 8001abe:	6003      	str	r3, [r0, #0]
}
 8001ac0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	d0cb0bc0 	.word	0xd0cb0bc0

08001acc <UartCmd_Launch_Capture>:
    Uart_Rx(Test_Context_Ptr, aRxBuffer, RX_TRANSFER_SIZE);
  }
}

static void UartCmd_Launch_Capture(TestContext_TypeDef *Test_Context_Ptr, uint8_t* data_buffer, uint16_t data_size)
{
 8001acc:	b410      	push	{r4}

  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;

  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
  Test_Context_Ptr->UartContext.uart_host_requested_mode=CAPTURE;
  App_Cxt_Ptr->run_loop = 0;
 8001ace:	2200      	movs	r2, #0
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001ad0:	2401      	movs	r4, #1
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001ad2:	f8d0 3600 	ldr.w	r3, [r0, #1536]	; 0x600
  Test_Context_Ptr->UartContext.uart_host_requested_mode=CAPTURE;
 8001ad6:	f04f 0c04 	mov.w	ip, #4
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001ada:	f8c0 4520 	str.w	r4, [r0, #1312]	; 0x520
  Test_Context_Ptr->UartContext.uart_host_requested_mode=CAPTURE;
 8001ade:	f880 c524 	strb.w	ip, [r0, #1316]	; 0x524
  App_Cxt_Ptr->run_loop = 0;
 8001ae2:	605a      	str	r2, [r3, #4]

  Test_Context_Ptr->UartContext.uart_host_requested_capture_format=(DataFormat_TypeDef)(*(uint8_t*)(data_buffer));
 8001ae4:	780b      	ldrb	r3, [r1, #0]
  else
  {
    /*Automatic mode => Program TIM for periodic capture*/
    ;
  }
}
 8001ae6:	f85d 4b04 	ldr.w	r4, [sp], #4
  Test_Context_Ptr->UartContext.uart_host_requested_capture_format=(DataFormat_TypeDef)(*(uint8_t*)(data_buffer));
 8001aea:	f880 352c 	strb.w	r3, [r0, #1324]	; 0x52c
  Test_Context_Ptr->UartContext.uart_host_requested_capture_delay=*(uint16_t*)(data_buffer+1);
 8001aee:	f8b1 2001 	ldrh.w	r2, [r1, #1]
  Test_Context_Ptr->UartContext.uart_host_requested_capture_number=*(uint16_t*)(data_buffer+3);
 8001af2:	f8b1 3003 	ldrh.w	r3, [r1, #3]
  Test_Context_Ptr->UartContext.uart_host_requested_capture_delay=*(uint16_t*)(data_buffer+1);
 8001af6:	f8c0 2530 	str.w	r2, [r0, #1328]	; 0x530
  Test_Context_Ptr->UartContext.uart_host_requested_capture_number=*(uint16_t*)(data_buffer+3);
 8001afa:	f8c0 3534 	str.w	r3, [r0, #1332]	; 0x534
}
 8001afe:	4770      	bx	lr

08001b00 <UartCmd_Set_Camera_Mode>:
  /**Configure the UART in reception mode for receiving subsequent command from Host**/
  Uart_Rx(Test_Context_Ptr, aRxBuffer, RX_TRANSFER_SIZE);
}

static void UartCmd_Set_Camera_Mode(TestContext_TypeDef *Test_Context_Ptr, uint8_t* data_buffer, uint16_t data_size)
{
 8001b00:	b510      	push	{r4, lr}
  /******************************SET_CAMERA_MODE_CMD**********************
  *Configure the camera in test bar or normal mode.
  *This command has one parameter:
  *Camera mode: 0x00=Normal, 0x01= Test bar
  ***********************************************************************************/
  if(*(data_buffer) == 0x00)
 8001b02:	780b      	ldrb	r3, [r1, #0]
{
 8001b04:	4604      	mov	r4, r0
  if(*(data_buffer) == 0x00)
 8001b06:	b14b      	cbz	r3, 8001b1c <UartCmd_Set_Camera_Mode+0x1c>
  {
    CAMERA_Disable_TestBar_Mode(NULL);
  }
  else if(*(data_buffer) == 0x01)
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d00f      	beq.n	8001b2c <UartCmd_Set_Camera_Mode+0x2c>
 * @param RxDataSize Data size in bytes expected to RX
 */
static void Uart_Rx(TestContext_TypeDef *Test_Context_Ptr, uint8_t *RxDataBufPtr, uint32_t RxDataSize)
{
  /**Configure the UART in reception mode for receiving subsequent command from Host**/
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001b0c:	220a      	movs	r2, #10
 8001b0e:	4909      	ldr	r1, [pc, #36]	; (8001b34 <UartCmd_Set_Camera_Mode+0x34>)
 8001b10:	f204 503c 	addw	r0, r4, #1340	; 0x53c
 8001b14:	f011 fb88 	bl	8013228 <HAL_UART_Receive_DMA>
 8001b18:	b920      	cbnz	r0, 8001b24 <UartCmd_Set_Camera_Mode+0x24>
}
 8001b1a:	bd10      	pop	{r4, pc}
    CAMERA_Disable_TestBar_Mode(NULL);
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fd81 	bl	8001624 <CAMERA_Disable_TestBar_Mode>
 8001b22:	e7f3      	b.n	8001b0c <UartCmd_Set_Camera_Mode+0xc>
}
 8001b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  {
    /* Transfer error in reception process */
    Error_Handler();
 8001b28:	f003 bb20 	b.w	800516c <Error_Handler>
    CAMERA_Enable_TestBar_Mode(NULL);
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f7ff fd45 	bl	80015bc <CAMERA_Enable_TestBar_Mode>
 8001b32:	e7eb      	b.n	8001b0c <UartCmd_Set_Camera_Mode+0xc>
 8001b34:	30000300 	.word	0x30000300

08001b38 <UartCmd_Write_Camera_Register>:
  OV9655_Object_t *pObj=Camera_CompObj;
 8001b38:	4a10      	ldr	r2, [pc, #64]	; (8001b7c <UartCmd_Write_Camera_Register+0x44>)
  ov9655_write_reg(&pObj->Ctx, *(data_buffer), &tmp, 1);
 8001b3a:	2301      	movs	r3, #1
{
 8001b3c:	b530      	push	{r4, r5, lr}
  OV9655_Object_t *pObj=Camera_CompObj;
 8001b3e:	6815      	ldr	r5, [r2, #0]
{
 8001b40:	b083      	sub	sp, #12
 8001b42:	4604      	mov	r4, r0
  uint8_t tmp=*(data_buffer+1);
 8001b44:	7848      	ldrb	r0, [r1, #1]
  ov9655_write_reg(&pObj->Ctx, *(data_buffer), &tmp, 1);
 8001b46:	f10d 0207 	add.w	r2, sp, #7
 8001b4a:	7809      	ldrb	r1, [r1, #0]
  uint8_t tmp=*(data_buffer+1);
 8001b4c:	f88d 0007 	strb.w	r0, [sp, #7]
  ov9655_write_reg(&pObj->Ctx, *(data_buffer), &tmp, 1);
 8001b50:	f105 0018 	add.w	r0, r5, #24
 8001b54:	f007 fd96 	bl	8009684 <ov9655_write_reg>
  HAL_Delay(300);
 8001b58:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b5c:	f009 fe94 	bl	800b888 <HAL_Delay>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001b60:	220a      	movs	r2, #10
 8001b62:	4907      	ldr	r1, [pc, #28]	; (8001b80 <UartCmd_Write_Camera_Register+0x48>)
 8001b64:	f204 503c 	addw	r0, r4, #1340	; 0x53c
 8001b68:	f011 fb5e 	bl	8013228 <HAL_UART_Receive_DMA>
 8001b6c:	b908      	cbnz	r0, 8001b72 <UartCmd_Write_Camera_Register+0x3a>
}
 8001b6e:	b003      	add	sp, #12
 8001b70:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8001b72:	f003 fafb 	bl	800516c <Error_Handler>
}
 8001b76:	b003      	add	sp, #12
 8001b78:	bd30      	pop	{r4, r5, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20009ea8 	.word	0x20009ea8
 8001b80:	30000300 	.word	0x30000300

08001b84 <UartCmd_Run_NonRegression>:
{
 8001b84:	b570      	push	{r4, r5, r6, lr}
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001b86:	2401      	movs	r4, #1
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 8001b88:	f240 2503 	movw	r5, #515	; 0x203
{
 8001b8c:	4603      	mov	r3, r0
  Test_Context_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 8001b8e:	4a18      	ldr	r2, [pc, #96]	; (8001bf0 <UartCmd_Run_NonRegression+0x6c>)
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001b90:	f8c0 4520 	str.w	r4, [r0, #1312]	; 0x520
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 8001b94:	f8a0 5524 	strh.w	r5, [r0, #1316]	; 0x524
  Test_Context_Ptr->UartContext.uart_host_requested_dump_memory=SDRAM;
 8001b98:	f880 4526 	strb.w	r4, [r0, #1318]	; 0x526
  Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint32_t*)(data_buffer);
 8001b9c:	6808      	ldr	r0, [r1, #0]
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_COLORBAR;
 8001b9e:	2102      	movs	r1, #2
  Test_Context_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 8001ba0:	601a      	str	r2, [r3, #0]
  memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8001ba2:	2280      	movs	r2, #128	; 0x80
  Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint32_t*)(data_buffer);
 8001ba4:	f8c3 0528 	str.w	r0, [r3, #1320]	; 0x528
  Test_Context_Ptr->UartContext.uart_host_nonreg_run=1;
 8001ba8:	f8c3 4538 	str.w	r4, [r3, #1336]	; 0x538
  Test_Context_Ptr->NonReg_FirstRun=1;
 8001bac:	f8c3 4604 	str.w	r4, [r3, #1540]	; 0x604
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_COLORBAR;
 8001bb0:	7119      	strb	r1, [r3, #4]
  memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8001bb2:	2100      	movs	r1, #0
  Test_Context_Ptr->DumpContext.dump_state = 1;
 8001bb4:	f8c3 40b8 	str.w	r4, [r3, #184]	; 0xb8
  memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8001bb8:	480e      	ldr	r0, [pc, #56]	; (8001bf4 <UartCmd_Run_NonRegression+0x70>)
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001bba:	f8d3 4600 	ldr.w	r4, [r3, #1536]	; 0x600
  memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8001bbe:	f024 fce0 	bl	8026582 <memset>
  App_Cxt_Ptr->Operating_Mode=DUMP;
 8001bc2:	2303      	movs	r3, #3
  CAMERA_Enable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 8001bc4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  App_Cxt_Ptr->Operating_Mode=DUMP;
 8001bc6:	7023      	strb	r3, [r4, #0]
  CAMERA_Enable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 8001bc8:	f7ff fcf8 	bl	80015bc <CAMERA_Enable_TestBar_Mode>
  while(App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8001bcc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001bce:	7d13      	ldrb	r3, [r2, #20]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0fc      	beq.n	8001bce <UartCmd_Run_NonRegression+0x4a>
  App_Cxt_Ptr->Camera_ContextPtr->vsync_it=0;
 8001bd4:	2500      	movs	r5, #0
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8001bd6:	6b66      	ldr	r6, [r4, #52]	; 0x34
  App_Cxt_Ptr->Camera_ContextPtr->vsync_it=0;
 8001bd8:	6095      	str	r5, [r2, #8]
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8001bda:	f009 fe4f 	bl	800b87c <HAL_GetTick>
  App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0;
 8001bde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8001be0:	4602      	mov	r2, r0
  BSP_CAMERA_Resume(0);
 8001be2:	4628      	mov	r0, r5
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8001be4:	61b2      	str	r2, [r6, #24]
  App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0;
 8001be6:	751d      	strb	r5, [r3, #20]
}
 8001be8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_CAMERA_Resume(0);
 8001bec:	f008 be4e 	b.w	800a88c <BSP_CAMERA_Resume>
 8001bf0:	d0cb0bc0 	.word	0xd0cb0bc0
 8001bf4:	d0cb08a0 	.word	0xd0cb08a0

08001bf8 <count_dir>:
{
 8001bf8:	b570      	push	{r4, r5, r6, lr}
 8001bfa:	4604      	mov	r4, r0
 8001bfc:	b08e      	sub	sp, #56	; 0x38
 8001bfe:	460e      	mov	r6, r1
  res = f_opendir(&dir, path);
 8001c00:	a801      	add	r0, sp, #4
 8001c02:	4621      	mov	r1, r4
 8001c04:	f016 fd94 	bl	8018730 <f_opendir>
  if (res != FR_OK)
 8001c08:	b9c0      	cbnz	r0, 8001c3c <count_dir+0x44>
 8001c0a:	4605      	mov	r5, r0
 8001c0c:	4c1a      	ldr	r4, [pc, #104]	; (8001c78 <count_dir+0x80>)
    res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001c0e:	4621      	mov	r1, r4
 8001c10:	a801      	add	r0, sp, #4
 8001c12:	f016 fe23 	bl	801885c <f_readdir>
    if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8001c16:	b958      	cbnz	r0, 8001c30 <count_dir+0x38>
 8001c18:	7da3      	ldrb	r3, [r4, #22]
 8001c1a:	b14b      	cbz	r3, 8001c30 <count_dir+0x38>
    if (fno.fattrib & AM_DIR) nbr_dir++;           /* Directory found */
 8001c1c:	7a23      	ldrb	r3, [r4, #8]
 8001c1e:	06db      	lsls	r3, r3, #27
 8001c20:	d5f5      	bpl.n	8001c0e <count_dir+0x16>
    res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001c22:	4621      	mov	r1, r4
 8001c24:	a801      	add	r0, sp, #4
    if (fno.fattrib & AM_DIR) nbr_dir++;           /* Directory found */
 8001c26:	3501      	adds	r5, #1
    res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001c28:	f016 fe18 	bl	801885c <f_readdir>
    if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8001c2c:	2800      	cmp	r0, #0
 8001c2e:	d0f3      	beq.n	8001c18 <count_dir+0x20>
  f_closedir(&dir);
 8001c30:	a801      	add	r0, sp, #4
 8001c32:	f016 fddf 	bl	80187f4 <f_closedir>
}
 8001c36:	4628      	mov	r0, r5
 8001c38:	b00e      	add	sp, #56	; 0x38
 8001c3a:	bd70      	pop	{r4, r5, r6, pc}
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not open directory", CENTER_MODE);
 8001c3c:	f019 fd20 	bl	801b680 <UTIL_LCD_GetFont>
 8001c40:	88c1      	ldrh	r1, [r0, #6]
 8001c42:	2301      	movs	r3, #1
 8001c44:	4a0d      	ldr	r2, [pc, #52]	; (8001c7c <count_dir+0x84>)
 8001c46:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	4099      	lsls	r1, r3
 8001c4e:	f019 fe0f 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 8001c52:	f019 fd15 	bl	801b680 <UTIL_LCD_GetFont>
 8001c56:	4601      	mov	r1, r0
 8001c58:	2301      	movs	r3, #1
 8001c5a:	4622      	mov	r2, r4
 8001c5c:	88c9      	ldrh	r1, [r1, #6]
 8001c5e:	2000      	movs	r0, #0
 8001c60:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8001c64:	f019 fe04 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8001c68:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8001c6a:	f7ff fe71 	bl	8001950 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8001c6e:	2002      	movs	r0, #2
 8001c70:	f007 fd3e 	bl	80096f0 <BSP_LED_On>
    while (1);
 8001c74:	e7fe      	b.n	8001c74 <count_dir+0x7c>
 8001c76:	bf00      	nop
 8001c78:	200089cc 	.word	0x200089cc
 8001c7c:	08028d60 	.word	0x08028d60

08001c80 <write_txt>:
{
 8001c80:	b570      	push	{r4, r5, r6, lr}
 8001c82:	4604      	mov	r4, r0
 8001c84:	b082      	sub	sp, #8
 8001c86:	460d      	mov	r5, r1
  if (f_open(&File, path, flags) != FR_OK)
 8001c88:	4601      	mov	r1, r0
 8001c8a:	481c      	ldr	r0, [pc, #112]	; (8001cfc <write_txt+0x7c>)
{
 8001c8c:	461e      	mov	r6, r3
  if (f_open(&File, path, flags) != FR_OK)
 8001c8e:	f015 fea1 	bl	80179d4 <f_open>
 8001c92:	b1e0      	cbz	r0, 8001cce <write_txt+0x4e>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Unable to create file", CENTER_MODE);
 8001c94:	f019 fcf4 	bl	801b680 <UTIL_LCD_GetFont>
 8001c98:	88c1      	ldrh	r1, [r0, #6]
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	4a18      	ldr	r2, [pc, #96]	; (8001d00 <write_txt+0x80>)
 8001c9e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	4099      	lsls	r1, r3
 8001ca6:	f019 fde3 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 8001caa:	f019 fce9 	bl	801b680 <UTIL_LCD_GetFont>
 8001cae:	4601      	mov	r1, r0
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	4622      	mov	r2, r4
 8001cb4:	88c9      	ldrh	r1, [r1, #6]
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8001cbc:	f019 fdd8 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8001cc0:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8001cc2:	f7ff fe45 	bl	8001950 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	f007 fd12 	bl	80096f0 <BSP_LED_On>
    while (1);
 8001ccc:	e7fe      	b.n	8001ccc <write_txt+0x4c>
  res = f_write(&File, (uint8_t *)content, strlen(content), (void *)&byteswritten);
 8001cce:	4628      	mov	r0, r5
 8001cd0:	f7fe fb66 	bl	80003a0 <strlen>
 8001cd4:	ab01      	add	r3, sp, #4
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	4629      	mov	r1, r5
 8001cda:	4808      	ldr	r0, [pc, #32]	; (8001cfc <write_txt+0x7c>)
 8001cdc:	f016 f976 	bl	8017fcc <f_write>
  if (res != FR_OK)
 8001ce0:	b100      	cbz	r0, 8001ce4 <write_txt+0x64>
    while (1);
 8001ce2:	e7fe      	b.n	8001ce2 <write_txt+0x62>
  if (byteswritten != strlen(content))
 8001ce4:	4628      	mov	r0, r5
 8001ce6:	f7fe fb5b 	bl	80003a0 <strlen>
 8001cea:	9b01      	ldr	r3, [sp, #4]
 8001cec:	4298      	cmp	r0, r3
 8001cee:	d000      	beq.n	8001cf2 <write_txt+0x72>
    while (1);
 8001cf0:	e7fe      	b.n	8001cf0 <write_txt+0x70>
  f_close(&File);
 8001cf2:	4802      	ldr	r0, [pc, #8]	; (8001cfc <write_txt+0x7c>)
 8001cf4:	f016 fac2 	bl	801827c <f_close>
}
 8001cf8:	b002      	add	sp, #8
 8001cfa:	bd70      	pop	{r4, r5, r6, pc}
 8001cfc:	20007f50 	.word	0x20007f50
 8001d00:	08028d80 	.word	0x08028d80

08001d04 <write_raw>:
{
 8001d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d08:	4616      	mov	r6, r2
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	4604      	mov	r4, r0
 8001d0e:	460f      	mov	r7, r1
  res = f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 8001d10:	220a      	movs	r2, #10
 8001d12:	4601      	mov	r1, r0
 8001d14:	482a      	ldr	r0, [pc, #168]	; (8001dc0 <write_raw+0xbc>)
{
 8001d16:	4698      	mov	r8, r3
  res = f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 8001d18:	f015 fe5c 	bl	80179d4 <f_open>
  if (res != FR_OK)
 8001d1c:	b1f0      	cbz	r0, 8001d5c <write_raw+0x58>
    UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Cannot create file on uSD", CENTER_MODE);
 8001d1e:	f019 fcaf 	bl	801b680 <UTIL_LCD_GetFont>
 8001d22:	88c1      	ldrh	r1, [r0, #6]
 8001d24:	2301      	movs	r3, #1
 8001d26:	4a27      	ldr	r2, [pc, #156]	; (8001dc4 <write_raw+0xc0>)
 8001d28:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	0089      	lsls	r1, r1, #2
 8001d30:	f019 fd9e 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(13), (uint8_t *) path, CENTER_MODE);
 8001d34:	f019 fca4 	bl	801b680 <UTIL_LCD_GetFont>
 8001d38:	88c1      	ldrh	r1, [r0, #6]
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	4622      	mov	r2, r4
 8001d3e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8001d42:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8001d46:	2000      	movs	r0, #0
 8001d48:	f019 fd92 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8001d4c:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
 8001d50:	f7ff fdfe 	bl	8001950 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8001d54:	2002      	movs	r0, #2
 8001d56:	f007 fccb 	bl	80096f0 <BSP_LED_On>
    while (1);
 8001d5a:	e7fe      	b.n	8001d5a <write_raw+0x56>
  __ASM volatile ("cpsid i" : : : "memory");
 8001d5c:	4605      	mov	r5, r0
 8001d5e:	b672      	cpsid	i
  f_write(&File, buffer, length, (void *)&byteswritten);
 8001d60:	4817      	ldr	r0, [pc, #92]	; (8001dc0 <write_raw+0xbc>)
 8001d62:	4639      	mov	r1, r7
 8001d64:	ab01      	add	r3, sp, #4
 8001d66:	4632      	mov	r2, r6
 8001d68:	f016 f930 	bl	8017fcc <f_write>
  __ASM volatile ("cpsie i" : : : "memory");
 8001d6c:	b662      	cpsie	i
  f_close(&File);
 8001d6e:	4814      	ldr	r0, [pc, #80]	; (8001dc0 <write_raw+0xbc>)
 8001d70:	f016 fa84 	bl	801827c <f_close>
  if (byteswritten != length)
 8001d74:	9b01      	ldr	r3, [sp, #4]
 8001d76:	429e      	cmp	r6, r3
 8001d78:	d102      	bne.n	8001d80 <write_raw+0x7c>
}
 8001d7a:	b002      	add	sp, #8
 8001d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Cannot save to uSD", CENTER_MODE);
 8001d80:	f019 fc7e 	bl	801b680 <UTIL_LCD_GetFont>
 8001d84:	88c1      	ldrh	r1, [r0, #6]
 8001d86:	2301      	movs	r3, #1
 8001d88:	4a0f      	ldr	r2, [pc, #60]	; (8001dc8 <write_raw+0xc4>)
 8001d8a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001d8e:	4628      	mov	r0, r5
 8001d90:	0089      	lsls	r1, r1, #2
 8001d92:	f019 fd6d 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(13), (uint8_t *) path, CENTER_MODE);
 8001d96:	f019 fc73 	bl	801b680 <UTIL_LCD_GetFont>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4622      	mov	r2, r4
 8001d9e:	4628      	mov	r0, r5
 8001da0:	88db      	ldrh	r3, [r3, #6]
 8001da2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001da6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001daa:	2301      	movs	r3, #1
 8001dac:	f019 fd60 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8001db0:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
 8001db4:	f7ff fdcc 	bl	8001950 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8001db8:	2002      	movs	r0, #2
 8001dba:	f007 fc99 	bl	80096f0 <BSP_LED_On>
    while (1);
 8001dbe:	e7fe      	b.n	8001dbe <write_raw+0xba>
 8001dc0:	20007d20 	.word	0x20007d20
 8001dc4:	08028da0 	.word	0x08028da0
 8001dc8:	08028dbc 	.word	0x08028dbc

08001dcc <write_bmp>:
{
 8001dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dce:	460e      	mov	r6, r1
 8001dd0:	4604      	mov	r4, r0
 8001dd2:	4617      	mov	r7, r2
  if (strcmp(&path[strlen(path) - 4], ".bmp") != 0)
 8001dd4:	f7fe fae4 	bl	80003a0 <strlen>
 8001dd8:	3804      	subs	r0, #4
 8001dda:	4916      	ldr	r1, [pc, #88]	; (8001e34 <write_bmp+0x68>)
 8001ddc:	4420      	add	r0, r4
 8001dde:	f7fe fa7f 	bl	80002e0 <strcmp>
 8001de2:	b100      	cbz	r0, 8001de6 <write_bmp+0x1a>
    while (1); /* Format not supported */
 8001de4:	e7fe      	b.n	8001de4 <write_bmp+0x18>
  if (STM32Ipl_WriteImage(img, path) != stm32ipl_err_Ok)
 8001de6:	4605      	mov	r5, r0
 8001de8:	4621      	mov	r1, r4
 8001dea:	4630      	mov	r0, r6
 8001dec:	f019 f83c 	bl	801ae68 <STM32Ipl_WriteImage>
 8001df0:	b900      	cbnz	r0, 8001df4 <write_bmp+0x28>
}
 8001df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Cannot save to uSD", CENTER_MODE);
 8001df4:	f019 fc44 	bl	801b680 <UTIL_LCD_GetFont>
 8001df8:	88c1      	ldrh	r1, [r0, #6]
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	4a0e      	ldr	r2, [pc, #56]	; (8001e38 <write_bmp+0x6c>)
 8001dfe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001e02:	4628      	mov	r0, r5
 8001e04:	0089      	lsls	r1, r1, #2
 8001e06:	f019 fd33 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(13), (uint8_t *) path, CENTER_MODE);
 8001e0a:	f019 fc39 	bl	801b680 <UTIL_LCD_GetFont>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	4622      	mov	r2, r4
 8001e12:	4628      	mov	r0, r5
 8001e14:	88db      	ldrh	r3, [r3, #6]
 8001e16:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001e1a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001e1e:	2301      	movs	r3, #1
 8001e20:	f019 fd26 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8001e24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e26:	f7ff fd93 	bl	8001950 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8001e2a:	2002      	movs	r0, #2
 8001e2c:	f007 fc60 	bl	80096f0 <BSP_LED_On>
    while (1);
 8001e30:	e7fe      	b.n	8001e30 <write_bmp+0x64>
 8001e32:	bf00      	nop
 8001e34:	080293ac 	.word	0x080293ac
 8001e38:	08028dbc 	.word	0x08028dbc

08001e3c <UartCmd_Get_Validation_Final_Accuracy>:
{
 8001e3c:	b538      	push	{r3, r4, r5, lr}
 8001e3e:	4604      	mov	r4, r0
  *((float*)aTxBuffer) = Test_Context_Ptr->ValidationContext.final_accuracy;
 8001e40:	4d12      	ldr	r5, [pc, #72]	; (8001e8c <UartCmd_Get_Validation_Final_Accuracy+0x50>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001e42:	2202      	movs	r2, #2
 8001e44:	2180      	movs	r1, #128	; 0x80
  *((float*)aTxBuffer) = Test_Context_Ptr->ValidationContext.final_accuracy;
 8001e46:	f204 4344 	addw	r3, r4, #1092	; 0x444
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001e4a:	f204 543c 	addw	r4, r4, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001e4e:	4628      	mov	r0, r5
  *((float*)aTxBuffer) = Test_Context_Ptr->ValidationContext.final_accuracy;
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001e54:	f003 f91a 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001e58:	2204      	movs	r2, #4
 8001e5a:	4629      	mov	r1, r5
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	f011 f991 	bl	8013184 <HAL_UART_Transmit_DMA>
 8001e62:	b958      	cbnz	r0, 8001e7c <UartCmd_Get_Validation_Final_Accuracy+0x40>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001e64:	4620      	mov	r0, r4
 8001e66:	f011 fbbd 	bl	80135e4 <HAL_UART_GetState>
 8001e6a:	2820      	cmp	r0, #32
 8001e6c:	d1fa      	bne.n	8001e64 <UartCmd_Get_Validation_Final_Accuracy+0x28>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001e6e:	220a      	movs	r2, #10
 8001e70:	4907      	ldr	r1, [pc, #28]	; (8001e90 <UartCmd_Get_Validation_Final_Accuracy+0x54>)
 8001e72:	4620      	mov	r0, r4
 8001e74:	f011 f9d8 	bl	8013228 <HAL_UART_Receive_DMA>
 8001e78:	b918      	cbnz	r0, 8001e82 <UartCmd_Get_Validation_Final_Accuracy+0x46>
}
 8001e7a:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 8001e7c:	f003 f976 	bl	800516c <Error_Handler>
 8001e80:	e7f0      	b.n	8001e64 <UartCmd_Get_Validation_Final_Accuracy+0x28>
}
 8001e82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8001e86:	f003 b971 	b.w	800516c <Error_Handler>
 8001e8a:	bf00      	nop
 8001e8c:	30000280 	.word	0x30000280
 8001e90:	30000300 	.word	0x30000300

08001e94 <UartCmd_Upload_Timing_Report>:
{
 8001e94:	b510      	push	{r4, lr}
 8001e96:	4604      	mov	r4, r0
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001e98:	2202      	movs	r2, #2
 8001e9a:	2180      	movs	r1, #128	; 0x80
 8001e9c:	480e      	ldr	r0, [pc, #56]	; (8001ed8 <UartCmd_Upload_Timing_Report+0x44>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001e9e:	f204 543c 	addw	r4, r4, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001ea2:	f003 f8f3 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001ea6:	2214      	movs	r2, #20
 8001ea8:	490b      	ldr	r1, [pc, #44]	; (8001ed8 <UartCmd_Upload_Timing_Report+0x44>)
 8001eaa:	4620      	mov	r0, r4
 8001eac:	f011 f96a 	bl	8013184 <HAL_UART_Transmit_DMA>
 8001eb0:	b958      	cbnz	r0, 8001eca <UartCmd_Upload_Timing_Report+0x36>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	f011 fb96 	bl	80135e4 <HAL_UART_GetState>
 8001eb8:	2820      	cmp	r0, #32
 8001eba:	d1fa      	bne.n	8001eb2 <UartCmd_Upload_Timing_Report+0x1e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001ebc:	220a      	movs	r2, #10
 8001ebe:	4907      	ldr	r1, [pc, #28]	; (8001edc <UartCmd_Upload_Timing_Report+0x48>)
 8001ec0:	4620      	mov	r0, r4
 8001ec2:	f011 f9b1 	bl	8013228 <HAL_UART_Receive_DMA>
 8001ec6:	b918      	cbnz	r0, 8001ed0 <UartCmd_Upload_Timing_Report+0x3c>
}
 8001ec8:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001eca:	f003 f94f 	bl	800516c <Error_Handler>
 8001ece:	e7f0      	b.n	8001eb2 <UartCmd_Upload_Timing_Report+0x1e>
}
 8001ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001ed4:	f003 b94a 	b.w	800516c <Error_Handler>
 8001ed8:	d0d3bd40 	.word	0xd0d3bd40
 8001edc:	30000300 	.word	0x30000300

08001ee0 <UartCmd_Upload_NonRegression_Debug_Report>:
{
 8001ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ee2:	4d31      	ldr	r5, [pc, #196]	; (8001fa8 <UartCmd_Upload_NonRegression_Debug_Report+0xc8>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8001ee4:	f200 543c 	addw	r4, r0, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001ee8:	2202      	movs	r2, #2
 8001eea:	4930      	ldr	r1, [pc, #192]	; (8001fac <UartCmd_Upload_NonRegression_Debug_Report+0xcc>)
 8001eec:	4628      	mov	r0, r5
 8001eee:	4f30      	ldr	r7, [pc, #192]	; (8001fb0 <UartCmd_Upload_NonRegression_Debug_Report+0xd0>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8001ef0:	f64f 76ff 	movw	r6, #65535	; 0xffff
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001ef4:	f003 f8ca 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8001ef8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001efc:	4629      	mov	r1, r5
 8001efe:	4620      	mov	r0, r4
 8001f00:	f011 f940 	bl	8013184 <HAL_UART_Transmit_DMA>
 8001f04:	2800      	cmp	r0, #0
 8001f06:	d142      	bne.n	8001f8e <UartCmd_Upload_NonRegression_Debug_Report+0xae>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001f08:	4620      	mov	r0, r4
 8001f0a:	f011 fb6b 	bl	80135e4 <HAL_UART_GetState>
 8001f0e:	2820      	cmp	r0, #32
 8001f10:	d1fa      	bne.n	8001f08 <UartCmd_Upload_NonRegression_Debug_Report+0x28>
    for(i=0;i<dma_xfer_num;i++)
 8001f12:	4435      	add	r5, r6
 8001f14:	42af      	cmp	r7, r5
 8001f16:	d1ef      	bne.n	8001ef8 <UartCmd_Upload_NonRegression_Debug_Report+0x18>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8001f18:	f645 02b8 	movw	r2, #22712	; 0x58b8
 8001f1c:	4924      	ldr	r1, [pc, #144]	; (8001fb0 <UartCmd_Upload_NonRegression_Debug_Report+0xd0>)
 8001f1e:	4620      	mov	r0, r4
 8001f20:	f011 f930 	bl	8013184 <HAL_UART_Transmit_DMA>
 8001f24:	2800      	cmp	r0, #0
 8001f26:	d13c      	bne.n	8001fa2 <UartCmd_Upload_NonRegression_Debug_Report+0xc2>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001f28:	4620      	mov	r0, r4
 8001f2a:	f011 fb5b 	bl	80135e4 <HAL_UART_GetState>
 8001f2e:	2820      	cmp	r0, #32
 8001f30:	d1fa      	bne.n	8001f28 <UartCmd_Upload_NonRegression_Debug_Report+0x48>
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001f32:	4d20      	ldr	r5, [pc, #128]	; (8001fb4 <UartCmd_Upload_NonRegression_Debug_Report+0xd4>)
 8001f34:	2202      	movs	r2, #2
 8001f36:	491d      	ldr	r1, [pc, #116]	; (8001fac <UartCmd_Upload_NonRegression_Debug_Report+0xcc>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8001f38:	f64f 76ff 	movw	r6, #65535	; 0xffff
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001f3c:	4628      	mov	r0, r5
 8001f3e:	4f1e      	ldr	r7, [pc, #120]	; (8001fb8 <UartCmd_Upload_NonRegression_Debug_Report+0xd8>)
 8001f40:	f003 f8a4 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8001f44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f48:	4629      	mov	r1, r5
 8001f4a:	4620      	mov	r0, r4
 8001f4c:	f011 f91a 	bl	8013184 <HAL_UART_Transmit_DMA>
 8001f50:	b9d0      	cbnz	r0, 8001f88 <UartCmd_Upload_NonRegression_Debug_Report+0xa8>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001f52:	4620      	mov	r0, r4
 8001f54:	f011 fb46 	bl	80135e4 <HAL_UART_GetState>
 8001f58:	2820      	cmp	r0, #32
 8001f5a:	d1fa      	bne.n	8001f52 <UartCmd_Upload_NonRegression_Debug_Report+0x72>
    for(i=0;i<dma_xfer_num;i++)
 8001f5c:	4435      	add	r5, r6
 8001f5e:	42af      	cmp	r7, r5
 8001f60:	d1f0      	bne.n	8001f44 <UartCmd_Upload_NonRegression_Debug_Report+0x64>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8001f62:	f645 02b8 	movw	r2, #22712	; 0x58b8
 8001f66:	4914      	ldr	r1, [pc, #80]	; (8001fb8 <UartCmd_Upload_NonRegression_Debug_Report+0xd8>)
 8001f68:	4620      	mov	r0, r4
 8001f6a:	f011 f90b 	bl	8013184 <HAL_UART_Transmit_DMA>
 8001f6e:	b9a8      	cbnz	r0, 8001f9c <UartCmd_Upload_NonRegression_Debug_Report+0xbc>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001f70:	4620      	mov	r0, r4
 8001f72:	f011 fb37 	bl	80135e4 <HAL_UART_GetState>
 8001f76:	2820      	cmp	r0, #32
 8001f78:	d1fa      	bne.n	8001f70 <UartCmd_Upload_NonRegression_Debug_Report+0x90>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001f7a:	220a      	movs	r2, #10
 8001f7c:	490f      	ldr	r1, [pc, #60]	; (8001fbc <UartCmd_Upload_NonRegression_Debug_Report+0xdc>)
 8001f7e:	4620      	mov	r0, r4
 8001f80:	f011 f952 	bl	8013228 <HAL_UART_Receive_DMA>
 8001f84:	b930      	cbnz	r0, 8001f94 <UartCmd_Upload_NonRegression_Debug_Report+0xb4>
}
 8001f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        Error_Handler();
 8001f88:	f003 f8f0 	bl	800516c <Error_Handler>
 8001f8c:	e7e1      	b.n	8001f52 <UartCmd_Upload_NonRegression_Debug_Report+0x72>
 8001f8e:	f003 f8ed 	bl	800516c <Error_Handler>
 8001f92:	e7b9      	b.n	8001f08 <UartCmd_Upload_NonRegression_Debug_Report+0x28>
}
 8001f94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 8001f98:	f003 b8e8 	b.w	800516c <Error_Handler>
        Error_Handler();
 8001f9c:	f003 f8e6 	bl	800516c <Error_Handler>
 8001fa0:	e7e6      	b.n	8001f70 <UartCmd_Upload_NonRegression_Debug_Report+0x90>
 8001fa2:	f003 f8e3 	bl	800516c <Error_Handler>
 8001fa6:	e7bf      	b.n	8001f28 <UartCmd_Upload_NonRegression_Debug_Report+0x48>
 8001fa8:	d0cb0bc0 	.word	0xd0cb0bc0
 8001fac:	000458c0 	.word	0x000458c0
 8001fb0:	d0cf0bbc 	.word	0xd0cf0bbc
 8001fb4:	d0cf6480 	.word	0xd0cf6480
 8001fb8:	d0d3647c 	.word	0xd0d3647c
 8001fbc:	30000300 	.word	0x30000300

08001fc0 <UartCmd_Upload_NonRegression_Report>:
{
 8001fc0:	b510      	push	{r4, lr}
 8001fc2:	4604      	mov	r4, r0
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	2180      	movs	r1, #128	; 0x80
 8001fc8:	480e      	ldr	r0, [pc, #56]	; (8002004 <UartCmd_Upload_NonRegression_Report+0x44>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001fca:	f204 543c 	addw	r4, r4, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001fce:	f003 f85d 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001fd2:	2214      	movs	r2, #20
 8001fd4:	490b      	ldr	r1, [pc, #44]	; (8002004 <UartCmd_Upload_NonRegression_Report+0x44>)
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	f011 f8d4 	bl	8013184 <HAL_UART_Transmit_DMA>
 8001fdc:	b958      	cbnz	r0, 8001ff6 <UartCmd_Upload_NonRegression_Report+0x36>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001fde:	4620      	mov	r0, r4
 8001fe0:	f011 fb00 	bl	80135e4 <HAL_UART_GetState>
 8001fe4:	2820      	cmp	r0, #32
 8001fe6:	d1fa      	bne.n	8001fde <UartCmd_Upload_NonRegression_Report+0x1e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001fe8:	220a      	movs	r2, #10
 8001fea:	4907      	ldr	r1, [pc, #28]	; (8002008 <UartCmd_Upload_NonRegression_Report+0x48>)
 8001fec:	4620      	mov	r0, r4
 8001fee:	f011 f91b 	bl	8013228 <HAL_UART_Receive_DMA>
 8001ff2:	b918      	cbnz	r0, 8001ffc <UartCmd_Upload_NonRegression_Report+0x3c>
}
 8001ff4:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001ff6:	f003 f8b9 	bl	800516c <Error_Handler>
 8001ffa:	e7f0      	b.n	8001fde <UartCmd_Upload_NonRegression_Report+0x1e>
}
 8001ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002000:	f003 b8b4 	b.w	800516c <Error_Handler>
 8002004:	d0cb08a0 	.word	0xd0cb08a0
 8002008:	30000300 	.word	0x30000300

0800200c <UartCmd_Upload_Dump_Output_Data>:
 800200c:	b510      	push	{r4, lr}
 800200e:	4604      	mov	r4, r0
 8002010:	2202      	movs	r2, #2
 8002012:	2180      	movs	r1, #128	; 0x80
 8002014:	480e      	ldr	r0, [pc, #56]	; (8002050 <UartCmd_Upload_Dump_Output_Data+0x44>)
 8002016:	f204 543c 	addw	r4, r4, #1340	; 0x53c
 800201a:	f003 f837 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
 800201e:	2214      	movs	r2, #20
 8002020:	490b      	ldr	r1, [pc, #44]	; (8002050 <UartCmd_Upload_Dump_Output_Data+0x44>)
 8002022:	4620      	mov	r0, r4
 8002024:	f011 f8ae 	bl	8013184 <HAL_UART_Transmit_DMA>
 8002028:	b958      	cbnz	r0, 8002042 <UartCmd_Upload_Dump_Output_Data+0x36>
 800202a:	4620      	mov	r0, r4
 800202c:	f011 fada 	bl	80135e4 <HAL_UART_GetState>
 8002030:	2820      	cmp	r0, #32
 8002032:	d1fa      	bne.n	800202a <UartCmd_Upload_Dump_Output_Data+0x1e>
 8002034:	220a      	movs	r2, #10
 8002036:	4907      	ldr	r1, [pc, #28]	; (8002054 <UartCmd_Upload_Dump_Output_Data+0x48>)
 8002038:	4620      	mov	r0, r4
 800203a:	f011 f8f5 	bl	8013228 <HAL_UART_Receive_DMA>
 800203e:	b918      	cbnz	r0, 8002048 <UartCmd_Upload_Dump_Output_Data+0x3c>
 8002040:	bd10      	pop	{r4, pc}
 8002042:	f003 f893 	bl	800516c <Error_Handler>
 8002046:	e7f0      	b.n	800202a <UartCmd_Upload_Dump_Output_Data+0x1e>
 8002048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800204c:	f003 b88e 	b.w	800516c <Error_Handler>
 8002050:	d0cb08a0 	.word	0xd0cb08a0
 8002054:	30000300 	.word	0x30000300

08002058 <UartCmd_Get_Timing_Report_Size>:
 8002058:	b538      	push	{r3, r4, r5, lr}
 800205a:	4d11      	ldr	r5, [pc, #68]	; (80020a0 <UartCmd_Get_Timing_Report_Size+0x48>)
 800205c:	2314      	movs	r3, #20
 800205e:	f200 543c 	addw	r4, r0, #1340	; 0x53c
 8002062:	2202      	movs	r2, #2
 8002064:	2180      	movs	r1, #128	; 0x80
 8002066:	4628      	mov	r0, r5
 8002068:	602b      	str	r3, [r5, #0]
 800206a:	f003 f80f 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
 800206e:	2204      	movs	r2, #4
 8002070:	4629      	mov	r1, r5
 8002072:	4620      	mov	r0, r4
 8002074:	f011 f886 	bl	8013184 <HAL_UART_Transmit_DMA>
 8002078:	b958      	cbnz	r0, 8002092 <UartCmd_Get_Timing_Report_Size+0x3a>
 800207a:	4620      	mov	r0, r4
 800207c:	f011 fab2 	bl	80135e4 <HAL_UART_GetState>
 8002080:	2820      	cmp	r0, #32
 8002082:	d1fa      	bne.n	800207a <UartCmd_Get_Timing_Report_Size+0x22>
 8002084:	220a      	movs	r2, #10
 8002086:	4907      	ldr	r1, [pc, #28]	; (80020a4 <UartCmd_Get_Timing_Report_Size+0x4c>)
 8002088:	4620      	mov	r0, r4
 800208a:	f011 f8cd 	bl	8013228 <HAL_UART_Receive_DMA>
 800208e:	b918      	cbnz	r0, 8002098 <UartCmd_Get_Timing_Report_Size+0x40>
 8002090:	bd38      	pop	{r3, r4, r5, pc}
 8002092:	f003 f86b 	bl	800516c <Error_Handler>
 8002096:	e7f0      	b.n	800207a <UartCmd_Get_Timing_Report_Size+0x22>
 8002098:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800209c:	f003 b866 	b.w	800516c <Error_Handler>
 80020a0:	30000280 	.word	0x30000280
 80020a4:	30000300 	.word	0x30000300

080020a8 <UartCmd_Get_NonRegression_Report_Size>:
{
 80020a8:	b538      	push	{r3, r4, r5, lr}
  *((uint32_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*4;/* expression (AI_NET_OUTPUT_SIZE*4) should not be replaced by expression AI_NET_OUTPUT_SIZE_BYTES since NN output could be quantized (i.e. on 1 byte). However, dequantization operation (1 byte -> 4 bytes) always occurs before uploading the data to the host*/
 80020aa:	4d11      	ldr	r5, [pc, #68]	; (80020f0 <UartCmd_Get_NonRegression_Report_Size+0x48>)
 80020ac:	2314      	movs	r3, #20
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80020ae:	f200 543c 	addw	r4, r0, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80020b2:	2202      	movs	r2, #2
 80020b4:	2180      	movs	r1, #128	; 0x80
 80020b6:	4628      	mov	r0, r5
  *((uint32_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*4;/* expression (AI_NET_OUTPUT_SIZE*4) should not be replaced by expression AI_NET_OUTPUT_SIZE_BYTES since NN output could be quantized (i.e. on 1 byte). However, dequantization operation (1 byte -> 4 bytes) always occurs before uploading the data to the host*/
 80020b8:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80020ba:	f002 ffe7 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80020be:	2204      	movs	r2, #4
 80020c0:	4629      	mov	r1, r5
 80020c2:	4620      	mov	r0, r4
 80020c4:	f011 f85e 	bl	8013184 <HAL_UART_Transmit_DMA>
 80020c8:	b958      	cbnz	r0, 80020e2 <UartCmd_Get_NonRegression_Report_Size+0x3a>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80020ca:	4620      	mov	r0, r4
 80020cc:	f011 fa8a 	bl	80135e4 <HAL_UART_GetState>
 80020d0:	2820      	cmp	r0, #32
 80020d2:	d1fa      	bne.n	80020ca <UartCmd_Get_NonRegression_Report_Size+0x22>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80020d4:	220a      	movs	r2, #10
 80020d6:	4907      	ldr	r1, [pc, #28]	; (80020f4 <UartCmd_Get_NonRegression_Report_Size+0x4c>)
 80020d8:	4620      	mov	r0, r4
 80020da:	f011 f8a5 	bl	8013228 <HAL_UART_Receive_DMA>
 80020de:	b918      	cbnz	r0, 80020e8 <UartCmd_Get_NonRegression_Report_Size+0x40>
}
 80020e0:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 80020e2:	f003 f843 	bl	800516c <Error_Handler>
 80020e6:	e7f0      	b.n	80020ca <UartCmd_Get_NonRegression_Report_Size+0x22>
}
 80020e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80020ec:	f003 b83e 	b.w	800516c <Error_Handler>
 80020f0:	30000280 	.word	0x30000280
 80020f4:	30000300 	.word	0x30000300

080020f8 <UartCmd_Get_Validation_Report_Size>:
{
 80020f8:	b538      	push	{r3, r4, r5, lr}
  *((uint32_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*4*ONBOARD_VALID_NUM_FILE_PER_DIR;/* expression (AI_NET_OUTPUT_SIZE*4) should not be replaced by expression AI_NET_OUTPUT_SIZE_BYTES since NN output could be quantized (i.e. on 1 byte). However, dequantization operation (1 byte -> 4 bytes) always occurs before uploading the data to the host*/
 80020fa:	4d12      	ldr	r5, [pc, #72]	; (8002144 <UartCmd_Get_Validation_Report_Size+0x4c>)
 80020fc:	f44f 7320 	mov.w	r3, #640	; 0x280
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002100:	f200 543c 	addw	r4, r0, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002104:	2202      	movs	r2, #2
 8002106:	2180      	movs	r1, #128	; 0x80
 8002108:	4628      	mov	r0, r5
  *((uint32_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*4*ONBOARD_VALID_NUM_FILE_PER_DIR;/* expression (AI_NET_OUTPUT_SIZE*4) should not be replaced by expression AI_NET_OUTPUT_SIZE_BYTES since NN output could be quantized (i.e. on 1 byte). However, dequantization operation (1 byte -> 4 bytes) always occurs before uploading the data to the host*/
 800210a:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800210c:	f002 ffbe 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002110:	2204      	movs	r2, #4
 8002112:	4629      	mov	r1, r5
 8002114:	4620      	mov	r0, r4
 8002116:	f011 f835 	bl	8013184 <HAL_UART_Transmit_DMA>
 800211a:	b958      	cbnz	r0, 8002134 <UartCmd_Get_Validation_Report_Size+0x3c>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800211c:	4620      	mov	r0, r4
 800211e:	f011 fa61 	bl	80135e4 <HAL_UART_GetState>
 8002122:	2820      	cmp	r0, #32
 8002124:	d1fa      	bne.n	800211c <UartCmd_Get_Validation_Report_Size+0x24>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002126:	220a      	movs	r2, #10
 8002128:	4907      	ldr	r1, [pc, #28]	; (8002148 <UartCmd_Get_Validation_Report_Size+0x50>)
 800212a:	4620      	mov	r0, r4
 800212c:	f011 f87c 	bl	8013228 <HAL_UART_Receive_DMA>
 8002130:	b918      	cbnz	r0, 800213a <UartCmd_Get_Validation_Report_Size+0x42>
}
 8002132:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 8002134:	f003 f81a 	bl	800516c <Error_Handler>
 8002138:	e7f0      	b.n	800211c <UartCmd_Get_Validation_Report_Size+0x24>
}
 800213a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800213e:	f003 b815 	b.w	800516c <Error_Handler>
 8002142:	bf00      	nop
 8002144:	30000280 	.word	0x30000280
 8002148:	30000300 	.word	0x30000300

0800214c <UartCmd_Get_Dump_Whole_Data_Size>:
{
 800214c:	b538      	push	{r3, r4, r5, lr}
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE;
 800214e:	4d11      	ldr	r5, [pc, #68]	; (8002194 <UartCmd_Get_Dump_Whole_Data_Size+0x48>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002150:	f200 543c 	addw	r4, r0, #1340	; 0x53c
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE;
 8002154:	4b10      	ldr	r3, [pc, #64]	; (8002198 <UartCmd_Get_Dump_Whole_Data_Size+0x4c>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002156:	2202      	movs	r2, #2
 8002158:	2180      	movs	r1, #128	; 0x80
 800215a:	4628      	mov	r0, r5
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE;
 800215c:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800215e:	f002 ff95 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002162:	2204      	movs	r2, #4
 8002164:	4629      	mov	r1, r5
 8002166:	4620      	mov	r0, r4
 8002168:	f011 f80c 	bl	8013184 <HAL_UART_Transmit_DMA>
 800216c:	b958      	cbnz	r0, 8002186 <UartCmd_Get_Dump_Whole_Data_Size+0x3a>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800216e:	4620      	mov	r0, r4
 8002170:	f011 fa38 	bl	80135e4 <HAL_UART_GetState>
 8002174:	2820      	cmp	r0, #32
 8002176:	d1fa      	bne.n	800216e <UartCmd_Get_Dump_Whole_Data_Size+0x22>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002178:	220a      	movs	r2, #10
 800217a:	4908      	ldr	r1, [pc, #32]	; (800219c <UartCmd_Get_Dump_Whole_Data_Size+0x50>)
 800217c:	4620      	mov	r0, r4
 800217e:	f011 f853 	bl	8013228 <HAL_UART_Receive_DMA>
 8002182:	b918      	cbnz	r0, 800218c <UartCmd_Get_Dump_Whole_Data_Size+0x40>
}
 8002184:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 8002186:	f002 fff1 	bl	800516c <Error_Handler>
 800218a:	e7f0      	b.n	800216e <UartCmd_Get_Dump_Whole_Data_Size+0x22>
}
 800218c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002190:	f002 bfec 	b.w	800516c <Error_Handler>
 8002194:	30000280 	.word	0x30000280
 8002198:	000458b4 	.word	0x000458b4
 800219c:	30000300 	.word	0x30000300

080021a0 <UartCmd_Get_NonRegression_Debug_Report_Size>:
{
 80021a0:	b538      	push	{r3, r4, r5, lr}
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE*2;
 80021a2:	4d11      	ldr	r5, [pc, #68]	; (80021e8 <UartCmd_Get_NonRegression_Debug_Report_Size+0x48>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80021a4:	f200 543c 	addw	r4, r0, #1340	; 0x53c
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE*2;
 80021a8:	4b10      	ldr	r3, [pc, #64]	; (80021ec <UartCmd_Get_NonRegression_Debug_Report_Size+0x4c>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80021aa:	2202      	movs	r2, #2
 80021ac:	2180      	movs	r1, #128	; 0x80
 80021ae:	4628      	mov	r0, r5
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE*2;
 80021b0:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80021b2:	f002 ff6b 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80021b6:	2204      	movs	r2, #4
 80021b8:	4629      	mov	r1, r5
 80021ba:	4620      	mov	r0, r4
 80021bc:	f010 ffe2 	bl	8013184 <HAL_UART_Transmit_DMA>
 80021c0:	b958      	cbnz	r0, 80021da <UartCmd_Get_NonRegression_Debug_Report_Size+0x3a>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80021c2:	4620      	mov	r0, r4
 80021c4:	f011 fa0e 	bl	80135e4 <HAL_UART_GetState>
 80021c8:	2820      	cmp	r0, #32
 80021ca:	d1fa      	bne.n	80021c2 <UartCmd_Get_NonRegression_Debug_Report_Size+0x22>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80021cc:	220a      	movs	r2, #10
 80021ce:	4908      	ldr	r1, [pc, #32]	; (80021f0 <UartCmd_Get_NonRegression_Debug_Report_Size+0x50>)
 80021d0:	4620      	mov	r0, r4
 80021d2:	f011 f829 	bl	8013228 <HAL_UART_Receive_DMA>
 80021d6:	b918      	cbnz	r0, 80021e0 <UartCmd_Get_NonRegression_Debug_Report_Size+0x40>
}
 80021d8:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 80021da:	f002 ffc7 	bl	800516c <Error_Handler>
 80021de:	e7f0      	b.n	80021c2 <UartCmd_Get_NonRegression_Debug_Report_Size+0x22>
}
 80021e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80021e4:	f002 bfc2 	b.w	800516c <Error_Handler>
 80021e8:	30000280 	.word	0x30000280
 80021ec:	0008b168 	.word	0x0008b168
 80021f0:	30000300 	.word	0x30000300

080021f4 <UartCmd_Get_Valid_Output_Size>:
 80021f4:	b538      	push	{r3, r4, r5, lr}
 80021f6:	4d12      	ldr	r5, [pc, #72]	; (8002240 <UartCmd_Get_Valid_Output_Size+0x4c>)
 80021f8:	f44f 7320 	mov.w	r3, #640	; 0x280
 80021fc:	f200 543c 	addw	r4, r0, #1340	; 0x53c
 8002200:	2202      	movs	r2, #2
 8002202:	2180      	movs	r1, #128	; 0x80
 8002204:	4628      	mov	r0, r5
 8002206:	602b      	str	r3, [r5, #0]
 8002208:	f002 ff40 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
 800220c:	2204      	movs	r2, #4
 800220e:	4629      	mov	r1, r5
 8002210:	4620      	mov	r0, r4
 8002212:	f010 ffb7 	bl	8013184 <HAL_UART_Transmit_DMA>
 8002216:	b958      	cbnz	r0, 8002230 <UartCmd_Get_Valid_Output_Size+0x3c>
 8002218:	4620      	mov	r0, r4
 800221a:	f011 f9e3 	bl	80135e4 <HAL_UART_GetState>
 800221e:	2820      	cmp	r0, #32
 8002220:	d1fa      	bne.n	8002218 <UartCmd_Get_Valid_Output_Size+0x24>
 8002222:	220a      	movs	r2, #10
 8002224:	4907      	ldr	r1, [pc, #28]	; (8002244 <UartCmd_Get_Valid_Output_Size+0x50>)
 8002226:	4620      	mov	r0, r4
 8002228:	f010 fffe 	bl	8013228 <HAL_UART_Receive_DMA>
 800222c:	b918      	cbnz	r0, 8002236 <UartCmd_Get_Valid_Output_Size+0x42>
 800222e:	bd38      	pop	{r3, r4, r5, pc}
 8002230:	f002 ff9c 	bl	800516c <Error_Handler>
 8002234:	e7f0      	b.n	8002218 <UartCmd_Get_Valid_Output_Size+0x24>
 8002236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800223a:	f002 bf97 	b.w	800516c <Error_Handler>
 800223e:	bf00      	nop
 8002240:	30000280 	.word	0x30000280
 8002244:	30000300 	.word	0x30000300

08002248 <UartCmd_Upload_Validation_Report>:
{
 8002248:	b510      	push	{r4, lr}
 800224a:	4604      	mov	r4, r0
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800224c:	2202      	movs	r2, #2
 800224e:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 8002252:	480f      	ldr	r0, [pc, #60]	; (8002290 <UartCmd_Upload_Validation_Report+0x48>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002254:	f204 543c 	addw	r4, r4, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002258:	f002 ff18 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800225c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8002260:	490b      	ldr	r1, [pc, #44]	; (8002290 <UartCmd_Upload_Validation_Report+0x48>)
 8002262:	4620      	mov	r0, r4
 8002264:	f010 ff8e 	bl	8013184 <HAL_UART_Transmit_DMA>
 8002268:	b958      	cbnz	r0, 8002282 <UartCmd_Upload_Validation_Report+0x3a>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800226a:	4620      	mov	r0, r4
 800226c:	f011 f9ba 	bl	80135e4 <HAL_UART_GetState>
 8002270:	2820      	cmp	r0, #32
 8002272:	d1fa      	bne.n	800226a <UartCmd_Upload_Validation_Report+0x22>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002274:	220a      	movs	r2, #10
 8002276:	4907      	ldr	r1, [pc, #28]	; (8002294 <UartCmd_Upload_Validation_Report+0x4c>)
 8002278:	4620      	mov	r0, r4
 800227a:	f010 ffd5 	bl	8013228 <HAL_UART_Receive_DMA>
 800227e:	b918      	cbnz	r0, 8002288 <UartCmd_Upload_Validation_Report+0x40>
}
 8002280:	bd10      	pop	{r4, pc}
      Error_Handler();
 8002282:	f002 ff73 	bl	800516c <Error_Handler>
 8002286:	e7f0      	b.n	800226a <UartCmd_Upload_Validation_Report+0x22>
}
 8002288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800228c:	f002 bf6e 	b.w	800516c <Error_Handler>
 8002290:	d0cb0920 	.word	0xd0cb0920
 8002294:	30000300 	.word	0x30000300

08002298 <UartCmd_Upload_Valid_Output>:
 8002298:	b510      	push	{r4, lr}
 800229a:	4604      	mov	r4, r0
 800229c:	2202      	movs	r2, #2
 800229e:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 80022a2:	480f      	ldr	r0, [pc, #60]	; (80022e0 <UartCmd_Upload_Valid_Output+0x48>)
 80022a4:	f204 543c 	addw	r4, r4, #1340	; 0x53c
 80022a8:	f002 fef0 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
 80022ac:	f44f 7220 	mov.w	r2, #640	; 0x280
 80022b0:	490b      	ldr	r1, [pc, #44]	; (80022e0 <UartCmd_Upload_Valid_Output+0x48>)
 80022b2:	4620      	mov	r0, r4
 80022b4:	f010 ff66 	bl	8013184 <HAL_UART_Transmit_DMA>
 80022b8:	b958      	cbnz	r0, 80022d2 <UartCmd_Upload_Valid_Output+0x3a>
 80022ba:	4620      	mov	r0, r4
 80022bc:	f011 f992 	bl	80135e4 <HAL_UART_GetState>
 80022c0:	2820      	cmp	r0, #32
 80022c2:	d1fa      	bne.n	80022ba <UartCmd_Upload_Valid_Output+0x22>
 80022c4:	220a      	movs	r2, #10
 80022c6:	4907      	ldr	r1, [pc, #28]	; (80022e4 <UartCmd_Upload_Valid_Output+0x4c>)
 80022c8:	4620      	mov	r0, r4
 80022ca:	f010 ffad 	bl	8013228 <HAL_UART_Receive_DMA>
 80022ce:	b918      	cbnz	r0, 80022d8 <UartCmd_Upload_Valid_Output+0x40>
 80022d0:	bd10      	pop	{r4, pc}
 80022d2:	f002 ff4b 	bl	800516c <Error_Handler>
 80022d6:	e7f0      	b.n	80022ba <UartCmd_Upload_Valid_Output+0x22>
 80022d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022dc:	f002 bf46 	b.w	800516c <Error_Handler>
 80022e0:	d0cb0920 	.word	0xd0cb0920
 80022e4:	30000300 	.word	0x30000300

080022e8 <UartCmd_Get_Dump_Output_Data_Size>:
{
 80022e8:	b538      	push	{r3, r4, r5, lr}
  *((uint16_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*4;/* expression (AI_NET_OUTPUT_SIZE*4) should not be replaced by expression AI_NET_OUTPUT_SIZE_BYTES since NN output could be quantized (i.e. on 1 byte). However, dequantization operation (1 byte -> 4 bytes) always occurs before uploading the data to the host*/
 80022ea:	4d11      	ldr	r5, [pc, #68]	; (8002330 <UartCmd_Get_Dump_Output_Data_Size+0x48>)
 80022ec:	2314      	movs	r3, #20
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80022ee:	f200 543c 	addw	r4, r0, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80022f2:	2202      	movs	r2, #2
 80022f4:	2180      	movs	r1, #128	; 0x80
 80022f6:	4628      	mov	r0, r5
  *((uint16_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*4;/* expression (AI_NET_OUTPUT_SIZE*4) should not be replaced by expression AI_NET_OUTPUT_SIZE_BYTES since NN output could be quantized (i.e. on 1 byte). However, dequantization operation (1 byte -> 4 bytes) always occurs before uploading the data to the host*/
 80022f8:	802b      	strh	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80022fa:	f002 fec7 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80022fe:	2202      	movs	r2, #2
 8002300:	4629      	mov	r1, r5
 8002302:	4620      	mov	r0, r4
 8002304:	f010 ff3e 	bl	8013184 <HAL_UART_Transmit_DMA>
 8002308:	b958      	cbnz	r0, 8002322 <UartCmd_Get_Dump_Output_Data_Size+0x3a>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800230a:	4620      	mov	r0, r4
 800230c:	f011 f96a 	bl	80135e4 <HAL_UART_GetState>
 8002310:	2820      	cmp	r0, #32
 8002312:	d1fa      	bne.n	800230a <UartCmd_Get_Dump_Output_Data_Size+0x22>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002314:	220a      	movs	r2, #10
 8002316:	4907      	ldr	r1, [pc, #28]	; (8002334 <UartCmd_Get_Dump_Output_Data_Size+0x4c>)
 8002318:	4620      	mov	r0, r4
 800231a:	f010 ff85 	bl	8013228 <HAL_UART_Receive_DMA>
 800231e:	b918      	cbnz	r0, 8002328 <UartCmd_Get_Dump_Output_Data_Size+0x40>
}
 8002320:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 8002322:	f002 ff23 	bl	800516c <Error_Handler>
 8002326:	e7f0      	b.n	800230a <UartCmd_Get_Dump_Output_Data_Size+0x22>
}
 8002328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800232c:	f002 bf1e 	b.w	800516c <Error_Handler>
 8002330:	30000280 	.word	0x30000280
 8002334:	30000300 	.word	0x30000300

08002338 <UartCmd_Trigger_Capture>:
{
 8002338:	b538      	push	{r3, r4, r5, lr}
  if((Test_Context_Ptr->UartContext.uart_host_requested_mode==CAPTURE)&&(Test_Context_Ptr->UartContext.uart_host_requested_capture_delay==0))
 800233a:	f890 3524 	ldrb.w	r3, [r0, #1316]	; 0x524
{
 800233e:	4604      	mov	r4, r0
  if((Test_Context_Ptr->UartContext.uart_host_requested_mode==CAPTURE)&&(Test_Context_Ptr->UartContext.uart_host_requested_capture_delay==0))
 8002340:	2b04      	cmp	r3, #4
 8002342:	d108      	bne.n	8002356 <UartCmd_Trigger_Capture+0x1e>
 8002344:	f8d0 3530 	ldr.w	r3, [r0, #1328]	; 0x530
 8002348:	b92b      	cbnz	r3, 8002356 <UartCmd_Trigger_Capture+0x1e>
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 800234a:	2301      	movs	r3, #1
 800234c:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
    Test_Context_Ptr->CaptureContext.capture_state = 1;
 8002350:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
}
 8002354:	bd38      	pop	{r3, r4, r5, pc}
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002356:	4d14      	ldr	r5, [pc, #80]	; (80023a8 <UartCmd_Trigger_Capture+0x70>)
 8002358:	2304      	movs	r3, #4
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800235a:	f204 543c 	addw	r4, r4, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800235e:	2202      	movs	r2, #2
 8002360:	2180      	movs	r1, #128	; 0x80
 8002362:	4628      	mov	r0, r5
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002364:	702b      	strb	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002366:	f002 fe91 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800236a:	2201      	movs	r2, #1
 800236c:	4629      	mov	r1, r5
 800236e:	4620      	mov	r0, r4
 8002370:	f010 ff08 	bl	8013184 <HAL_UART_Transmit_DMA>
 8002374:	b978      	cbnz	r0, 8002396 <UartCmd_Trigger_Capture+0x5e>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002376:	4620      	mov	r0, r4
 8002378:	f011 f934 	bl	80135e4 <HAL_UART_GetState>
 800237c:	2820      	cmp	r0, #32
 800237e:	d1fa      	bne.n	8002376 <UartCmd_Trigger_Capture+0x3e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002380:	220a      	movs	r2, #10
 8002382:	490a      	ldr	r1, [pc, #40]	; (80023ac <UartCmd_Trigger_Capture+0x74>)
 8002384:	4620      	mov	r0, r4
 8002386:	f010 ff4f 	bl	8013228 <HAL_UART_Receive_DMA>
 800238a:	2800      	cmp	r0, #0
 800238c:	d0e2      	beq.n	8002354 <UartCmd_Trigger_Capture+0x1c>
}
 800238e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002392:	f002 beeb 	b.w	800516c <Error_Handler>
      Error_Handler();
 8002396:	f002 fee9 	bl	800516c <Error_Handler>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800239a:	4620      	mov	r0, r4
 800239c:	f011 f922 	bl	80135e4 <HAL_UART_GetState>
 80023a0:	2820      	cmp	r0, #32
 80023a2:	d1e8      	bne.n	8002376 <UartCmd_Trigger_Capture+0x3e>
 80023a4:	e7ec      	b.n	8002380 <UartCmd_Trigger_Capture+0x48>
 80023a6:	bf00      	nop
 80023a8:	30000280 	.word	0x30000280
 80023ac:	30000300 	.word	0x30000300

080023b0 <UartCmd_Trigger_Dump>:
{
 80023b0:	b538      	push	{r3, r4, r5, lr}
  if(Test_Context_Ptr->UartContext.uart_host_requested_mode==DUMP)
 80023b2:	f890 3524 	ldrb.w	r3, [r0, #1316]	; 0x524
{
 80023b6:	4604      	mov	r4, r0
  if(Test_Context_Ptr->UartContext.uart_host_requested_mode==DUMP)
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d027      	beq.n	800240c <UartCmd_Trigger_Dump+0x5c>
    *(aTxBuffer) = CMD_ERROR_EVT;
 80023bc:	4d1b      	ldr	r5, [pc, #108]	; (800242c <UartCmd_Trigger_Dump+0x7c>)
 80023be:	2304      	movs	r3, #4
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80023c0:	f200 543c 	addw	r4, r0, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80023c4:	2202      	movs	r2, #2
 80023c6:	2180      	movs	r1, #128	; 0x80
 80023c8:	4628      	mov	r0, r5
    *(aTxBuffer) = CMD_ERROR_EVT;
 80023ca:	702b      	strb	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80023cc:	f002 fe5e 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80023d0:	2201      	movs	r2, #1
 80023d2:	4629      	mov	r1, r5
 80023d4:	4620      	mov	r0, r4
 80023d6:	f010 fed5 	bl	8013184 <HAL_UART_Transmit_DMA>
 80023da:	b978      	cbnz	r0, 80023fc <UartCmd_Trigger_Dump+0x4c>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80023dc:	4620      	mov	r0, r4
 80023de:	f011 f901 	bl	80135e4 <HAL_UART_GetState>
 80023e2:	2820      	cmp	r0, #32
 80023e4:	d1fa      	bne.n	80023dc <UartCmd_Trigger_Dump+0x2c>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80023e6:	220a      	movs	r2, #10
 80023e8:	4911      	ldr	r1, [pc, #68]	; (8002430 <UartCmd_Trigger_Dump+0x80>)
 80023ea:	4620      	mov	r0, r4
 80023ec:	f010 ff1c 	bl	8013228 <HAL_UART_Receive_DMA>
 80023f0:	b900      	cbnz	r0, 80023f4 <UartCmd_Trigger_Dump+0x44>
}
 80023f2:	bd38      	pop	{r3, r4, r5, pc}
 80023f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80023f8:	f002 beb8 	b.w	800516c <Error_Handler>
      Error_Handler();
 80023fc:	f002 feb6 	bl	800516c <Error_Handler>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002400:	4620      	mov	r0, r4
 8002402:	f011 f8ef 	bl	80135e4 <HAL_UART_GetState>
 8002406:	2820      	cmp	r0, #32
 8002408:	d1e8      	bne.n	80023dc <UartCmd_Trigger_Dump+0x2c>
 800240a:	e7ec      	b.n	80023e6 <UartCmd_Trigger_Dump+0x36>
    Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint16_t*)(data_buffer);
 800240c:	8808      	ldrh	r0, [r1, #0]
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 800240e:	2301      	movs	r3, #1
    memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8002410:	2280      	movs	r2, #128	; 0x80
 8002412:	2100      	movs	r1, #0
    Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint16_t*)(data_buffer);
 8002414:	f8c4 0528 	str.w	r0, [r4, #1320]	; 0x528
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8002418:	f8c4 3520 	str.w	r3, [r4, #1312]	; 0x520
    Test_Context_Ptr->DumpContext.dump_state = 1;
 800241c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8002420:	4804      	ldr	r0, [pc, #16]	; (8002434 <UartCmd_Trigger_Dump+0x84>)
}
 8002422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8002426:	f024 b8ac 	b.w	8026582 <memset>
 800242a:	bf00      	nop
 800242c:	30000280 	.word	0x30000280
 8002430:	30000300 	.word	0x30000300
 8002434:	d0cb08a0 	.word	0xd0cb08a0

08002438 <MemoryDumpInit>:
{
 8002438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  char dump_dir_path[64]=  "/dump_src_image_qvga";
 800243c:	4dbe      	ldr	r5, [pc, #760]	; (8002738 <MemoryDumpInit+0x300>)
{
 800243e:	b094      	sub	sp, #80	; 0x50
 8002440:	4604      	mov	r4, r0
  char dump_dir_path[64]=  "/dump_src_image_qvga";
 8002442:	6869      	ldr	r1, [r5, #4]
 8002444:	f10d 0c10 	add.w	ip, sp, #16
 8002448:	6828      	ldr	r0, [r5, #0]
 800244a:	68eb      	ldr	r3, [r5, #12]
 800244c:	68aa      	ldr	r2, [r5, #8]
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 800244e:	f8d4 6600 	ldr.w	r6, [r4, #1536]	; 0x600
  char dump_dir_path[64]=  "/dump_src_image_qvga";
 8002452:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002456:	6928      	ldr	r0, [r5, #16]
 8002458:	222b      	movs	r2, #43	; 0x2b
 800245a:	7d2b      	ldrb	r3, [r5, #20]
 800245c:	2100      	movs	r1, #0
 800245e:	f8cc 0000 	str.w	r0, [ip]
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8002462:	f04f 35ff 	mov.w	r5, #4294967295
  char dump_dir_path[64]=  "/dump_src_image_qvga";
 8002466:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 800246a:	f88c 3004 	strb.w	r3, [ip, #4]
 800246e:	f024 f888 	bl	8026582 <memset>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002472:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002476:	f019 f90b 	bl	801b690 <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 800247a:	2332      	movs	r3, #50	; 0x32
 800247c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002480:	210a      	movs	r1, #10
 8002482:	20c8      	movs	r0, #200	; 0xc8
 8002484:	9500      	str	r5, [sp, #0]
 8002486:	f019 fad5 	bl	801ba34 <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Memory dump sub-mode", CENTER_MODE);
 800248a:	f019 f8f9 	bl	801b680 <UTIL_LCD_GetFont>
 800248e:	2301      	movs	r3, #1
 8002490:	88c1      	ldrh	r1, [r0, #6]
 8002492:	2000      	movs	r0, #0
 8002494:	4aa9      	ldr	r2, [pc, #676]	; (800273c <MemoryDumpInit+0x304>)
 8002496:	f019 f9eb 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Press one of the key of the joystick", CENTER_MODE);
 800249a:	f019 f8f1 	bl	801b680 <UTIL_LCD_GetFont>
 800249e:	88c1      	ldrh	r1, [r0, #6]
 80024a0:	2301      	movs	r3, #1
 80024a2:	4aa7      	ldr	r2, [pc, #668]	; (8002740 <MemoryDumpInit+0x308>)
 80024a4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80024a8:	2000      	movs	r0, #0
 80024aa:	f019 f9e1 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"to select the frame source", CENTER_MODE);
 80024ae:	f019 f8e7 	bl	801b680 <UTIL_LCD_GetFont>
 80024b2:	88c1      	ldrh	r1, [r0, #6]
 80024b4:	2301      	movs	r3, #1
 80024b6:	4aa3      	ldr	r2, [pc, #652]	; (8002744 <MemoryDumpInit+0x30c>)
 80024b8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80024bc:	2000      	movs	r0, #0
 80024be:	0049      	lsls	r1, r1, #1
 80024c0:	f019 f9d6 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DrawLine(pt_center.x - pt_offset, pt_center.y, pt_center.x, pt_center.y - pt_offset, UTIL_LCD_COLOR_WHITE);
 80024c4:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80024c8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80024cc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80024d0:	4608      	mov	r0, r1
 80024d2:	9500      	str	r5, [sp, #0]
 80024d4:	f019 fa20 	bl	801b918 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y - pt_offset, pt_center.x + pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 80024d8:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80024dc:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80024e0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80024e4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80024e8:	9500      	str	r5, [sp, #0]
 80024ea:	f019 fa15 	bl	801b918 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x + pt_offset, pt_center.y, pt_center.x, pt_center.y + pt_offset, UTIL_LCD_COLOR_WHITE);
 80024ee:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80024f2:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80024f6:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80024fa:	461a      	mov	r2, r3
 80024fc:	9500      	str	r5, [sp, #0]
 80024fe:	f019 fa0b 	bl	801b918 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y + pt_offset, pt_center.x - pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 8002502:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8002506:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800250a:	9500      	str	r5, [sp, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	4608      	mov	r0, r1
 8002510:	f019 fa02 	bl	801b918 <UTIL_LCD_DrawLine>
  UTIL_LCD_DisplayStringAt(0, pt_center.y - pt_offset - LINE(2), (uint8_t*)appli_names[0], CENTER_MODE);//UP
 8002514:	f019 f8b4 	bl	801b680 <UTIL_LCD_GetFont>
 8002518:	2301      	movs	r3, #1
 800251a:	88c1      	ldrh	r1, [r0, #6]
 800251c:	2000      	movs	r0, #0
 800251e:	4a8a      	ldr	r2, [pc, #552]	; (8002748 <MemoryDumpInit+0x310>)
 8002520:	4099      	lsls	r1, r3
 8002522:	f5c1 7196 	rsb	r1, r1, #300	; 0x12c
 8002526:	f019 f9a3 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(pt_center.x + pt_offset + 10, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[1], LEFT_MODE);//RIGHT
 800252a:	f019 f8a9 	bl	801b680 <UTIL_LCD_GetFont>
 800252e:	88c1      	ldrh	r1, [r0, #6]
 8002530:	2303      	movs	r3, #3
 8002532:	4a86      	ldr	r2, [pc, #536]	; (800274c <MemoryDumpInit+0x314>)
 8002534:	1049      	asrs	r1, r1, #1
 8002536:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 800253a:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 800253e:	f019 f997 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(200, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[2], LEFT_MODE);//LEFT
 8002542:	f019 f89d 	bl	801b680 <UTIL_LCD_GetFont>
 8002546:	88c1      	ldrh	r1, [r0, #6]
 8002548:	2303      	movs	r3, #3
 800254a:	4a81      	ldr	r2, [pc, #516]	; (8002750 <MemoryDumpInit+0x318>)
 800254c:	1049      	asrs	r1, r1, #1
 800254e:	20c8      	movs	r0, #200	; 0xc8
 8002550:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 8002554:	f019 f98c 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002558:	6b30      	ldr	r0, [r6, #48]	; 0x30
 800255a:	f7ff f9f9 	bl	8001950 <DISPLAY_Refresh>
  if(Test_Context_Ptr->UartContext.uart_cmd_ongoing)
 800255e:	f8d4 3520 	ldr.w	r3, [r4, #1312]	; 0x520
 8002562:	2b00      	cmp	r3, #0
 8002564:	d04c      	beq.n	8002600 <MemoryDumpInit+0x1c8>
    switch (Test_Context_Ptr->UartContext.uart_host_requested_dump_submode)
 8002566:	f894 3525 	ldrb.w	r3, [r4, #1317]	; 0x525
 800256a:	2b02      	cmp	r3, #2
 800256c:	f000 808c 	beq.w	8002688 <MemoryDumpInit+0x250>
 8002570:	2b03      	cmp	r3, #3
 8002572:	d03f      	beq.n	80025f4 <MemoryDumpInit+0x1bc>
 8002574:	2b01      	cmp	r3, #1
 8002576:	d03d      	beq.n	80025f4 <MemoryDumpInit+0x1bc>
    if(Test_Context_Ptr->UartContext.uart_host_nonreg_run==1)
 8002578:	f8d4 3538 	ldr.w	r3, [r4, #1336]	; 0x538
 800257c:	2b01      	cmp	r3, #1
 800257e:	d021      	beq.n	80025c4 <MemoryDumpInit+0x18c>
      Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 8002580:	2300      	movs	r3, #0
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002582:	220a      	movs	r2, #10
 8002584:	4973      	ldr	r1, [pc, #460]	; (8002754 <MemoryDumpInit+0x31c>)
 8002586:	f204 503c 	addw	r0, r4, #1340	; 0x53c
      Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 800258a:	f8c4 3520 	str.w	r3, [r4, #1312]	; 0x520
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 800258e:	f010 fe4b 	bl	8013228 <HAL_UART_Receive_DMA>
 8002592:	2800      	cmp	r0, #0
 8002594:	f040 8085 	bne.w	80026a2 <MemoryDumpInit+0x26a>
  if (BSP_SD_Init(0) != BSP_ERROR_NONE)
 8002598:	2000      	movs	r0, #0
 800259a:	f009 f82f 	bl	800b5fc <BSP_SD_Init>
 800259e:	b1f8      	cbz	r0, 80025e0 <MemoryDumpInit+0x1a8>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 80025a0:	f019 f86e 	bl	801b680 <UTIL_LCD_GetFont>
 80025a4:	88c1      	ldrh	r1, [r0, #6]
 80025a6:	2301      	movs	r3, #1
 80025a8:	4a6b      	ldr	r2, [pc, #428]	; (8002758 <MemoryDumpInit+0x320>)
 80025aa:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80025ae:	2000      	movs	r0, #0
 80025b0:	4099      	lsls	r1, r3
 80025b2:	f019 f95d 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80025b6:	6b30      	ldr	r0, [r6, #48]	; 0x30
 80025b8:	f7ff f9ca 	bl	8001950 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 80025bc:	2002      	movs	r0, #2
 80025be:	f007 f897 	bl	80096f0 <BSP_LED_On>
    while (1);
 80025c2:	e7fe      	b.n	80025c2 <MemoryDumpInit+0x18a>
      Test_Context_Ptr->UartContext.uart_host_nonreg_run=0;
 80025c4:	2100      	movs	r1, #0
      memset(dump_output_buff, 0, sizeof(dump_output_buff));
 80025c6:	2280      	movs	r2, #128	; 0x80
 80025c8:	4864      	ldr	r0, [pc, #400]	; (800275c <MemoryDumpInit+0x324>)
      Test_Context_Ptr->DumpContext.dump_state = 1;
 80025ca:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
      Test_Context_Ptr->UartContext.uart_host_nonreg_run=0;
 80025ce:	f8c4 1538 	str.w	r1, [r4, #1336]	; 0x538
      memset(dump_output_buff, 0, sizeof(dump_output_buff));
 80025d2:	f023 ffd6 	bl	8026582 <memset>
  if (BSP_SD_Init(0) != BSP_ERROR_NONE)
 80025d6:	2000      	movs	r0, #0
 80025d8:	f009 f810 	bl	800b5fc <BSP_SD_Init>
 80025dc:	2800      	cmp	r0, #0
 80025de:	d1df      	bne.n	80025a0 <MemoryDumpInit+0x168>
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 80025e0:	a903      	add	r1, sp, #12
 80025e2:	485f      	ldr	r0, [pc, #380]	; (8002760 <MemoryDumpInit+0x328>)
 80025e4:	f016 fe36 	bl	8019254 <FATFS_LinkDriver>
 80025e8:	4602      	mov	r2, r0
 80025ea:	b1e0      	cbz	r0, 8002626 <MemoryDumpInit+0x1ee>
    BSP_LED_On(LED_RED);
 80025ec:	2002      	movs	r0, #2
 80025ee:	f007 f87f 	bl	80096f0 <BSP_LED_On>
    while (1);
 80025f2:	e7fe      	b.n	80025f2 <MemoryDumpInit+0x1ba>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=SDCARD_FILE;
 80025f4:	7123      	strb	r3, [r4, #4]
    if(Test_Context_Ptr->UartContext.uart_host_nonreg_run==1)
 80025f6:	f8d4 3538 	ldr.w	r3, [r4, #1336]	; 0x538
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d1c0      	bne.n	8002580 <MemoryDumpInit+0x148>
 80025fe:	e7e1      	b.n	80025c4 <MemoryDumpInit+0x18c>
    HAL_Delay(200);
 8002600:	20c8      	movs	r0, #200	; 0xc8
 8002602:	f009 f941 	bl	800b888 <HAL_Delay>
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8002606:	2100      	movs	r1, #0
 8002608:	4608      	mov	r0, r1
 800260a:	f007 f9cd 	bl	80099a8 <BSP_JOY_GetState>
 800260e:	b2c3      	uxtb	r3, r0
    while (joy_state == JOY_NONE || joy_state == JOY_DOWN || joy_state == JOY_SEL)
 8002610:	2b02      	cmp	r3, #2
 8002612:	d9f8      	bls.n	8002606 <MemoryDumpInit+0x1ce>
    switch (joy_state)
 8002614:	2b08      	cmp	r3, #8
 8002616:	d04a      	beq.n	80026ae <MemoryDumpInit+0x276>
 8002618:	2b10      	cmp	r3, #16
 800261a:	d045      	beq.n	80026a8 <MemoryDumpInit+0x270>
 800261c:	2b04      	cmp	r3, #4
 800261e:	d1bb      	bne.n	8002598 <MemoryDumpInit+0x160>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=SDCARD_FILE;
 8002620:	2303      	movs	r3, #3
 8002622:	7123      	strb	r3, [r4, #4]
   break;
 8002624:	e7b8      	b.n	8002598 <MemoryDumpInit+0x160>
  if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 8002626:	a903      	add	r1, sp, #12
 8002628:	484e      	ldr	r0, [pc, #312]	; (8002764 <MemoryDumpInit+0x32c>)
 800262a:	f015 f96f 	bl	801790c <f_mount>
 800262e:	4605      	mov	r5, r0
 8002630:	bb30      	cbnz	r0, 8002680 <MemoryDumpInit+0x248>
  Test_Context_Ptr->RngHandle.Instance = RNG;
 8002632:	4b4d      	ldr	r3, [pc, #308]	; (8002768 <MemoryDumpInit+0x330>)
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 8002634:	f204 57ec 	addw	r7, r4, #1516	; 0x5ec
  sprintf(Test_Context_Ptr->DumpContext.dump_folder_name, "/Memory_Dump");
 8002638:	f104 0822 	add.w	r8, r4, #34	; 0x22
  Test_Context_Ptr->RngHandle.Instance = RNG;
 800263c:	f8c4 35ec 	str.w	r3, [r4, #1516]	; 0x5ec
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 8002640:	4638      	mov	r0, r7
 8002642:	f00e ffa7 	bl	8011594 <HAL_RNG_DeInit>
  HAL_RNG_Init(&Test_Context_Ptr->RngHandle);
 8002646:	4638      	mov	r0, r7
 8002648:	f00e ff68 	bl	801151c <HAL_RNG_Init>
  sprintf(Test_Context_Ptr->DumpContext.dump_folder_name, "/Memory_Dump");
 800264c:	4b47      	ldr	r3, [pc, #284]	; (800276c <MemoryDumpInit+0x334>)
 800264e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	f8c4 0022 	str.w	r0, [r4, #34]	; 0x22
  res = f_mkdir(path);
 8002656:	4640      	mov	r0, r8
  sprintf(Test_Context_Ptr->DumpContext.dump_folder_name, "/Memory_Dump");
 8002658:	f8c4 1026 	str.w	r1, [r4, #38]	; 0x26
 800265c:	f8c4 202a 	str.w	r2, [r4, #42]	; 0x2a
 8002660:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  res = f_mkdir(path);
 8002664:	f016 f96a 	bl	801893c <f_mkdir>
  if ((res != FR_OK) && (res != FR_EXIST))
 8002668:	f010 07f7 	ands.w	r7, r0, #247	; 0xf7
 800266c:	d128      	bne.n	80026c0 <MemoryDumpInit+0x288>
  if(Test_Context_Ptr->DumpContext.Dump_FrameSource==SDCARD_FILE)
 800266e:	7923      	ldrb	r3, [r4, #4]
 8002670:	2b03      	cmp	r3, #3
 8002672:	d042      	beq.n	80026fa <MemoryDumpInit+0x2c2>
    BSP_SD_DeInit(0);
 8002674:	4638      	mov	r0, r7
 8002676:	f008 ff83 	bl	800b580 <BSP_SD_DeInit>
}
 800267a:	b014      	add	sp, #80	; 0x50
 800267c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    BSP_LED_On(LED_RED);
 8002680:	2002      	movs	r0, #2
 8002682:	f007 f835 	bl	80096f0 <BSP_LED_On>
    while (1);
 8002686:	e7fe      	b.n	8002686 <MemoryDumpInit+0x24e>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_COLORBAR;
 8002688:	7123      	strb	r3, [r4, #4]
      CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 800268a:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 800268c:	f7fe feb2 	bl	80013f4 <CAMERA_Init>
      CAMERA_Enable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 8002690:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8002692:	f7fe ff93 	bl	80015bc <CAMERA_Enable_TestBar_Mode>
    if(Test_Context_Ptr->UartContext.uart_host_nonreg_run==1)
 8002696:	f8d4 3538 	ldr.w	r3, [r4, #1336]	; 0x538
 800269a:	2b01      	cmp	r3, #1
 800269c:	f47f af70 	bne.w	8002580 <MemoryDumpInit+0x148>
 80026a0:	e790      	b.n	80025c4 <MemoryDumpInit+0x18c>
    Error_Handler();
 80026a2:	f002 fd63 	bl	800516c <Error_Handler>
 80026a6:	e777      	b.n	8002598 <MemoryDumpInit+0x160>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_LIVE;
 80026a8:	2301      	movs	r3, #1
 80026aa:	7123      	strb	r3, [r4, #4]
      break;
 80026ac:	e774      	b.n	8002598 <MemoryDumpInit+0x160>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_COLORBAR;
 80026ae:	2302      	movs	r3, #2
 80026b0:	7123      	strb	r3, [r4, #4]
      CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 80026b2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 80026b4:	f7fe fe9e 	bl	80013f4 <CAMERA_Init>
      CAMERA_Enable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 80026b8:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 80026ba:	f7fe ff7f 	bl	80015bc <CAMERA_Enable_TestBar_Mode>
      break;
 80026be:	e76b      	b.n	8002598 <MemoryDumpInit+0x160>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not create directory", CENTER_MODE);
 80026c0:	f018 ffde 	bl	801b680 <UTIL_LCD_GetFont>
 80026c4:	88c1      	ldrh	r1, [r0, #6]
 80026c6:	2301      	movs	r3, #1
 80026c8:	4a29      	ldr	r2, [pc, #164]	; (8002770 <MemoryDumpInit+0x338>)
 80026ca:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80026ce:	4628      	mov	r0, r5
 80026d0:	4099      	lsls	r1, r3
 80026d2:	f019 f8cd 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 80026d6:	f018 ffd3 	bl	801b680 <UTIL_LCD_GetFont>
 80026da:	4601      	mov	r1, r0
 80026dc:	2301      	movs	r3, #1
 80026de:	4642      	mov	r2, r8
 80026e0:	88c9      	ldrh	r1, [r1, #6]
 80026e2:	4628      	mov	r0, r5
 80026e4:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80026e8:	f019 f8c2 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 80026ec:	6b30      	ldr	r0, [r6, #48]	; 0x30
 80026ee:	f7ff f92f 	bl	8001950 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 80026f2:	2002      	movs	r0, #2
 80026f4:	f006 fffc 	bl	80096f0 <BSP_LED_On>
    while (1);
 80026f8:	e7fe      	b.n	80026f8 <MemoryDumpInit+0x2c0>
  res = f_stat(path, &fno);
 80026fa:	491e      	ldr	r1, [pc, #120]	; (8002774 <MemoryDumpInit+0x33c>)
 80026fc:	a804      	add	r0, sp, #16
 80026fe:	f016 f8ed 	bl	80188dc <f_stat>
  if (res != FR_OK)
 8002702:	4604      	mov	r4, r0
 8002704:	2800      	cmp	r0, #0
 8002706:	d139      	bne.n	800277c <MemoryDumpInit+0x344>
    nbr_dir = count_dir(dump_dir_path, App_Cxt_Ptr);
 8002708:	4631      	mov	r1, r6
 800270a:	a804      	add	r0, sp, #16
 800270c:	f7ff fa74 	bl	8001bf8 <count_dir>
    if (nbr_dir != 0)
 8002710:	2800      	cmp	r0, #0
 8002712:	d0b2      	beq.n	800267a <MemoryDumpInit+0x242>
      UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Number of found directories incorrect", CENTER_MODE);
 8002714:	f018 ffb4 	bl	801b680 <UTIL_LCD_GetFont>
 8002718:	88c1      	ldrh	r1, [r0, #6]
 800271a:	2301      	movs	r3, #1
 800271c:	4a16      	ldr	r2, [pc, #88]	; (8002778 <MemoryDumpInit+0x340>)
 800271e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002722:	4620      	mov	r0, r4
 8002724:	4099      	lsls	r1, r3
 8002726:	f019 f8a3 	bl	801b870 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800272a:	6b30      	ldr	r0, [r6, #48]	; 0x30
 800272c:	f7ff f910 	bl	8001950 <DISPLAY_Refresh>
      BSP_LED_On(LED_RED);
 8002730:	2002      	movs	r0, #2
 8002732:	f006 ffdd 	bl	80096f0 <BSP_LED_On>
      while (1)
 8002736:	e7fe      	b.n	8002736 <MemoryDumpInit+0x2fe>
 8002738:	08028ef0 	.word	0x08028ef0
 800273c:	08028dd0 	.word	0x08028dd0
 8002740:	08028de8 	.word	0x08028de8
 8002744:	08028e10 	.word	0x08028e10
 8002748:	08028e2c 	.word	0x08028e2c
 800274c:	08028e38 	.word	0x08028e38
 8002750:	08028e48 	.word	0x08028e48
 8002754:	30000300 	.word	0x30000300
 8002758:	08028e50 	.word	0x08028e50
 800275c:	d0cb08a0 	.word	0xd0cb08a0
 8002760:	08098964 	.word	0x08098964
 8002764:	20008180 	.word	0x20008180
 8002768:	48021800 	.word	0x48021800
 800276c:	08028e6c 	.word	0x08028e6c
 8002770:	08028e7c 	.word	0x08028e7c
 8002774:	20008ae4 	.word	0x20008ae4
 8002778:	08028ec0 	.word	0x08028ec0
      UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not find directory", CENTER_MODE);
 800277c:	f018 ff80 	bl	801b680 <UTIL_LCD_GetFont>
 8002780:	88c1      	ldrh	r1, [r0, #6]
 8002782:	2301      	movs	r3, #1
 8002784:	4a0c      	ldr	r2, [pc, #48]	; (80027b8 <MemoryDumpInit+0x380>)
 8002786:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800278a:	4638      	mov	r0, r7
 800278c:	4099      	lsls	r1, r3
 800278e:	f019 f86f 	bl	801b870 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 8002792:	f018 ff75 	bl	801b680 <UTIL_LCD_GetFont>
 8002796:	4601      	mov	r1, r0
 8002798:	2301      	movs	r3, #1
 800279a:	aa04      	add	r2, sp, #16
 800279c:	88c9      	ldrh	r1, [r1, #6]
 800279e:	4638      	mov	r0, r7
 80027a0:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80027a4:	f019 f864 	bl	801b870 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(app->Display_ContextPtr);
 80027a8:	6b30      	ldr	r0, [r6, #48]	; 0x30
 80027aa:	f7ff f8d1 	bl	8001950 <DISPLAY_Refresh>
      BSP_LED_On(LED_RED);
 80027ae:	2002      	movs	r0, #2
 80027b0:	f006 ff9e 	bl	80096f0 <BSP_LED_On>
      while (1);
 80027b4:	e7fe      	b.n	80027b4 <MemoryDumpInit+0x37c>
 80027b6:	bf00      	nop
 80027b8:	08028ea0 	.word	0x08028ea0

080027bc <UartCmd_Read_Camera_Register>:
{
 80027bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027c0:	460e      	mov	r6, r1
  uint32_t Num_reg_to_read=(*(data_buffer+1) - *data_buffer)+1;
 80027c2:	7809      	ldrb	r1, [r1, #0]
{
 80027c4:	b083      	sub	sp, #12
 80027c6:	4681      	mov	r9, r0
  uint32_t Num_reg_to_read=(*(data_buffer+1) - *data_buffer)+1;
 80027c8:	7875      	ldrb	r5, [r6, #1]
 80027ca:	1a6d      	subs	r5, r5, r1
  for(uint8_t i=0; i<Num_reg_to_read;i++)
 80027cc:	3501      	adds	r5, #1
 80027ce:	d017      	beq.n	8002800 <UartCmd_Read_Camera_Register+0x44>
 80027d0:	2400      	movs	r4, #0
 80027d2:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8002850 <UartCmd_Read_Camera_Register+0x94>
 80027d6:	4f1c      	ldr	r7, [pc, #112]	; (8002848 <UartCmd_Read_Camera_Register+0x8c>)
 80027d8:	e000      	b.n	80027dc <UartCmd_Read_Camera_Register+0x20>
    ov9655_read_reg(&pObj->Ctx, *(data_buffer+i), &tmp, 1);
 80027da:	5d31      	ldrb	r1, [r6, r4]
 80027dc:	f8d8 0000 	ldr.w	r0, [r8]
 80027e0:	2301      	movs	r3, #1
 80027e2:	f10d 0207 	add.w	r2, sp, #7
 80027e6:	3018      	adds	r0, #24
 80027e8:	f006 ff44 	bl	8009674 <ov9655_read_reg>
    Cam_Reg_Table[i]=tmp;
 80027ec:	f89d 2007 	ldrb.w	r2, [sp, #7]
  for(uint8_t i=0; i<Num_reg_to_read;i++)
 80027f0:	1c63      	adds	r3, r4, #1
    Cam_Reg_Table[i]=tmp;
 80027f2:	553a      	strb	r2, [r7, r4]
  for(uint8_t i=0; i<Num_reg_to_read;i++)
 80027f4:	b2dc      	uxtb	r4, r3
 80027f6:	42ac      	cmp	r4, r5
 80027f8:	d3ef      	bcc.n	80027da <UartCmd_Read_Camera_Register+0x1e>
  if(TxDataTransferSize > TxDataBufSize)
 80027fa:	2de0      	cmp	r5, #224	; 0xe0
 80027fc:	d900      	bls.n	8002800 <UartCmd_Read_Camera_Register+0x44>
    while(1);
 80027fe:	e7fe      	b.n	80027fe <UartCmd_Read_Camera_Register+0x42>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002800:	f209 593c 	addw	r9, r9, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002804:	2202      	movs	r2, #2
 8002806:	21e0      	movs	r1, #224	; 0xe0
 8002808:	480f      	ldr	r0, [pc, #60]	; (8002848 <UartCmd_Read_Camera_Register+0x8c>)
 800280a:	f002 fc3f 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800280e:	490e      	ldr	r1, [pc, #56]	; (8002848 <UartCmd_Read_Camera_Register+0x8c>)
 8002810:	b2aa      	uxth	r2, r5
 8002812:	4648      	mov	r0, r9
 8002814:	f010 fcb6 	bl	8013184 <HAL_UART_Transmit_DMA>
 8002818:	b990      	cbnz	r0, 8002840 <UartCmd_Read_Camera_Register+0x84>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800281a:	4648      	mov	r0, r9
 800281c:	f010 fee2 	bl	80135e4 <HAL_UART_GetState>
 8002820:	2820      	cmp	r0, #32
 8002822:	d1fa      	bne.n	800281a <UartCmd_Read_Camera_Register+0x5e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002824:	220a      	movs	r2, #10
 8002826:	4909      	ldr	r1, [pc, #36]	; (800284c <UartCmd_Read_Camera_Register+0x90>)
 8002828:	4648      	mov	r0, r9
 800282a:	f010 fcfd 	bl	8013228 <HAL_UART_Receive_DMA>
 800282e:	b910      	cbnz	r0, 8002836 <UartCmd_Read_Camera_Register+0x7a>
}
 8002830:	b003      	add	sp, #12
 8002832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002836:	b003      	add	sp, #12
 8002838:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    Error_Handler();
 800283c:	f002 bc96 	b.w	800516c <Error_Handler>
      Error_Handler();
 8002840:	f002 fc94 	bl	800516c <Error_Handler>
 8002844:	e7e9      	b.n	800281a <UartCmd_Read_Camera_Register+0x5e>
 8002846:	bf00      	nop
 8002848:	20007c40 	.word	0x20007c40
 800284c:	30000300 	.word	0x30000300
 8002850:	20009ea8 	.word	0x20009ea8

08002854 <FrameCaptureInit>:
{
 8002854:	b5f0      	push	{r4, r5, r6, r7, lr}
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8002856:	f04f 35ff 	mov.w	r5, #4294967295
{
 800285a:	b085      	sub	sp, #20
 800285c:	4604      	mov	r4, r0
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 800285e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8002862:	f8d4 6600 	ldr.w	r6, [r4, #1536]	; 0x600
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002866:	f018 ff13 	bl	801b690 <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 800286a:	2332      	movs	r3, #50	; 0x32
 800286c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002870:	210a      	movs	r1, #10
 8002872:	20c8      	movs	r0, #200	; 0xc8
 8002874:	9500      	str	r5, [sp, #0]
 8002876:	f019 f8dd 	bl	801ba34 <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Capture file format", CENTER_MODE);
 800287a:	f018 ff01 	bl	801b680 <UTIL_LCD_GetFont>
 800287e:	2301      	movs	r3, #1
 8002880:	88c1      	ldrh	r1, [r0, #6]
 8002882:	2000      	movs	r0, #0
 8002884:	4a92      	ldr	r2, [pc, #584]	; (8002ad0 <FrameCaptureInit+0x27c>)
 8002886:	f018 fff3 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Press one of the key of the joystick", CENTER_MODE);
 800288a:	f018 fef9 	bl	801b680 <UTIL_LCD_GetFont>
 800288e:	88c1      	ldrh	r1, [r0, #6]
 8002890:	2301      	movs	r3, #1
 8002892:	4a90      	ldr	r2, [pc, #576]	; (8002ad4 <FrameCaptureInit+0x280>)
 8002894:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002898:	2000      	movs	r0, #0
 800289a:	f018 ffe9 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"to select the format of the captured files", CENTER_MODE);
 800289e:	f018 feef 	bl	801b680 <UTIL_LCD_GetFont>
 80028a2:	88c1      	ldrh	r1, [r0, #6]
 80028a4:	2301      	movs	r3, #1
 80028a6:	4a8c      	ldr	r2, [pc, #560]	; (8002ad8 <FrameCaptureInit+0x284>)
 80028a8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80028ac:	2000      	movs	r0, #0
 80028ae:	4099      	lsls	r1, r3
 80028b0:	f018 ffde 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DrawLine(pt_center.x - pt_offset, pt_center.y, pt_center.x, pt_center.y - pt_offset, UTIL_LCD_COLOR_WHITE);
 80028b4:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80028b8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80028bc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80028c0:	4608      	mov	r0, r1
 80028c2:	9500      	str	r5, [sp, #0]
 80028c4:	f019 f828 	bl	801b918 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y - pt_offset, pt_center.x + pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 80028c8:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80028cc:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80028d0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80028d4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80028d8:	9500      	str	r5, [sp, #0]
 80028da:	f019 f81d 	bl	801b918 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x + pt_offset, pt_center.y, pt_center.x, pt_center.y + pt_offset, UTIL_LCD_COLOR_WHITE);
 80028de:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80028e2:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80028e6:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80028ea:	461a      	mov	r2, r3
 80028ec:	9500      	str	r5, [sp, #0]
 80028ee:	f019 f813 	bl	801b918 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y + pt_offset, pt_center.x - pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 80028f2:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80028f6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80028fa:	9500      	str	r5, [sp, #0]
 80028fc:	461a      	mov	r2, r3
 80028fe:	4608      	mov	r0, r1
 8002900:	f019 f80a 	bl	801b918 <UTIL_LCD_DrawLine>
  UTIL_LCD_DisplayStringAt(0, pt_center.y - pt_offset - LINE(2), (uint8_t*)appli_names[0], CENTER_MODE);//UP
 8002904:	f018 febc 	bl	801b680 <UTIL_LCD_GetFont>
 8002908:	2301      	movs	r3, #1
 800290a:	88c1      	ldrh	r1, [r0, #6]
 800290c:	2000      	movs	r0, #0
 800290e:	4a73      	ldr	r2, [pc, #460]	; (8002adc <FrameCaptureInit+0x288>)
 8002910:	4099      	lsls	r1, r3
 8002912:	f5c1 7196 	rsb	r1, r1, #300	; 0x12c
 8002916:	f018 ffab 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, pt_center.y + pt_offset + LINE(1), (uint8_t*)appli_names[1], CENTER_MODE);//DOWN
 800291a:	f018 feb1 	bl	801b680 <UTIL_LCD_GetFont>
 800291e:	88c1      	ldrh	r1, [r0, #6]
 8002920:	2301      	movs	r3, #1
 8002922:	4a6f      	ldr	r2, [pc, #444]	; (8002ae0 <FrameCaptureInit+0x28c>)
 8002924:	f501 71c8 	add.w	r1, r1, #400	; 0x190
 8002928:	2000      	movs	r0, #0
 800292a:	f018 ffa1 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800292e:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8002930:	f7ff f80e 	bl	8001950 <DISPLAY_Refresh>
  if(Test_Context_Ptr->UartContext.uart_cmd_ongoing)
 8002934:	f8d4 3520 	ldr.w	r3, [r4, #1312]	; 0x520
 8002938:	2b00      	cmp	r3, #0
 800293a:	d06c      	beq.n	8002a16 <FrameCaptureInit+0x1c2>
    switch (Test_Context_Ptr->UartContext.uart_host_requested_capture_format)
 800293c:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
 8002940:	2b00      	cmp	r3, #0
 8002942:	d043      	beq.n	80029cc <FrameCaptureInit+0x178>
 8002944:	2b01      	cmp	r3, #1
 8002946:	d041      	beq.n	80029cc <FrameCaptureInit+0x178>
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 8002948:	2300      	movs	r3, #0
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 800294a:	220a      	movs	r2, #10
 800294c:	4965      	ldr	r1, [pc, #404]	; (8002ae4 <FrameCaptureInit+0x290>)
 800294e:	f204 503c 	addw	r0, r4, #1340	; 0x53c
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 8002952:	f8c4 3520 	str.w	r3, [r4, #1312]	; 0x520
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002956:	f010 fc67 	bl	8013228 <HAL_UART_Receive_DMA>
 800295a:	2800      	cmp	r0, #0
 800295c:	d158      	bne.n	8002a10 <FrameCaptureInit+0x1bc>
  Test_Context_Ptr->RngHandle.Instance = RNG;
 800295e:	4b62      	ldr	r3, [pc, #392]	; (8002ae8 <FrameCaptureInit+0x294>)
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 8002960:	f204 55ec 	addw	r5, r4, #1516	; 0x5ec
  Test_Context_Ptr->RngHandle.Instance = RNG;
 8002964:	f8c4 35ec 	str.w	r3, [r4, #1516]	; 0x5ec
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 8002968:	4628      	mov	r0, r5
 800296a:	f00e fe13 	bl	8011594 <HAL_RNG_DeInit>
  HAL_RNG_Init(&Test_Context_Ptr->RngHandle);
 800296e:	4628      	mov	r0, r5
 8002970:	f00e fdd4 	bl	801151c <HAL_RNG_Init>
  HAL_RNG_GenerateRandomNumber(&Test_Context_Ptr->RngHandle, &Test_Context_Ptr->CaptureContext.capture_session_id);
 8002974:	f104 01c4 	add.w	r1, r4, #196	; 0xc4
 8002978:	4628      	mov	r0, r5
 800297a:	f00e fe25 	bl	80115c8 <HAL_RNG_GenerateRandomNumber>
  sprintf(Test_Context_Ptr->CaptureContext.capture_session_name, "Session %X", (unsigned int)Test_Context_Ptr->CaptureContext.capture_session_id);
 800297e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8002982:	495a      	ldr	r1, [pc, #360]	; (8002aec <FrameCaptureInit+0x298>)
 8002984:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 8002988:	f023 fd7e 	bl	8026488 <siprintf>
  if (BSP_SD_Init(0) != BSP_ERROR_NONE)
 800298c:	2000      	movs	r0, #0
 800298e:	f008 fe35 	bl	800b5fc <BSP_SD_Init>
 8002992:	b188      	cbz	r0, 80029b8 <FrameCaptureInit+0x164>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 8002994:	f018 fe74 	bl	801b680 <UTIL_LCD_GetFont>
 8002998:	88c1      	ldrh	r1, [r0, #6]
 800299a:	2301      	movs	r3, #1
 800299c:	4a54      	ldr	r2, [pc, #336]	; (8002af0 <FrameCaptureInit+0x29c>)
 800299e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80029a2:	2000      	movs	r0, #0
 80029a4:	4099      	lsls	r1, r3
 80029a6:	f018 ff63 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80029aa:	6b30      	ldr	r0, [r6, #48]	; 0x30
 80029ac:	f7fe ffd0 	bl	8001950 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 80029b0:	2002      	movs	r0, #2
 80029b2:	f006 fe9d 	bl	80096f0 <BSP_LED_On>
    while (1);
 80029b6:	e7fe      	b.n	80029b6 <FrameCaptureInit+0x162>
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 80029b8:	484e      	ldr	r0, [pc, #312]	; (8002af4 <FrameCaptureInit+0x2a0>)
 80029ba:	a903      	add	r1, sp, #12
 80029bc:	f016 fc4a 	bl	8019254 <FATFS_LinkDriver>
 80029c0:	4602      	mov	r2, r0
 80029c2:	b130      	cbz	r0, 80029d2 <FrameCaptureInit+0x17e>
    BSP_LED_On(LED_RED);
 80029c4:	2002      	movs	r0, #2
 80029c6:	f006 fe93 	bl	80096f0 <BSP_LED_On>
    while (1);
 80029ca:	e7fe      	b.n	80029ca <FrameCaptureInit+0x176>
      Test_Context_Ptr->CaptureContext.capture_file_format = DATA_FORMAT_BMP;
 80029cc:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
 80029d0:	e7ba      	b.n	8002948 <FrameCaptureInit+0xf4>
  if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 80029d2:	a903      	add	r1, sp, #12
 80029d4:	4848      	ldr	r0, [pc, #288]	; (8002af8 <FrameCaptureInit+0x2a4>)
 80029d6:	f014 ff99 	bl	801790c <f_mount>
 80029da:	4605      	mov	r5, r0
 80029dc:	bbb0      	cbnz	r0, 8002a4c <FrameCaptureInit+0x1f8>
  char *capture_session_dir_path = Test_Context_Ptr->CaptureContext.capture_folder_name;
 80029de:	f104 07de 	add.w	r7, r4, #222	; 0xde
  sprintf(capture_session_dir_path, "/Camera_Capture/CAM_CAPTURE_SESS_%X", capture_session_id);
 80029e2:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80029e6:	4945      	ldr	r1, [pc, #276]	; (8002afc <FrameCaptureInit+0x2a8>)
 80029e8:	4638      	mov	r0, r7
 80029ea:	f023 fd4d 	bl	8026488 <siprintf>
  res = f_mkdir(path);
 80029ee:	4844      	ldr	r0, [pc, #272]	; (8002b00 <FrameCaptureInit+0x2ac>)
 80029f0:	f015 ffa4 	bl	801893c <f_mkdir>
  if ((res != FR_OK) && (res != FR_EXIST))
 80029f4:	f010 04f7 	ands.w	r4, r0, #247	; 0xf7
 80029f8:	d130      	bne.n	8002a5c <FrameCaptureInit+0x208>
  res = f_mkdir(path);
 80029fa:	4638      	mov	r0, r7
 80029fc:	f015 ff9e 	bl	801893c <f_mkdir>
  if ((res != FR_OK) && (res != FR_EXIST))
 8002a00:	f010 00f7 	ands.w	r0, r0, #247	; 0xf7
 8002a04:	d147      	bne.n	8002a96 <FrameCaptureInit+0x242>
}
 8002a06:	b005      	add	sp, #20
 8002a08:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  BSP_SD_DeInit(0);
 8002a0c:	f008 bdb8 	b.w	800b580 <BSP_SD_DeInit>
    Error_Handler();
 8002a10:	f002 fbac 	bl	800516c <Error_Handler>
 8002a14:	e7a3      	b.n	800295e <FrameCaptureInit+0x10a>
    HAL_Delay(200);
 8002a16:	20c8      	movs	r0, #200	; 0xc8
 8002a18:	f008 ff36 	bl	800b888 <HAL_Delay>
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4608      	mov	r0, r1
 8002a20:	f006 ffc2 	bl	80099a8 <BSP_JOY_GetState>
    while (joy_state == JOY_NONE || joy_state == JOY_RIGHT || joy_state == JOY_LEFT || joy_state == JOY_SEL)
 8002a24:	f010 0ff7 	tst.w	r0, #247	; 0xf7
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8002a28:	b2c3      	uxtb	r3, r0
    while (joy_state == JOY_NONE || joy_state == JOY_RIGHT || joy_state == JOY_LEFT || joy_state == JOY_SEL)
 8002a2a:	d0f7      	beq.n	8002a1c <FrameCaptureInit+0x1c8>
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d0f5      	beq.n	8002a1c <FrameCaptureInit+0x1c8>
 8002a30:	f1a3 0201 	sub.w	r2, r3, #1
 8002a34:	fab2 f282 	clz	r2, r2
 8002a38:	0952      	lsrs	r2, r2, #5
 8002a3a:	2a00      	cmp	r2, #0
 8002a3c:	d1ee      	bne.n	8002a1c <FrameCaptureInit+0x1c8>
    switch (joy_state)
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d008      	beq.n	8002a54 <FrameCaptureInit+0x200>
 8002a42:	2b10      	cmp	r3, #16
 8002a44:	d18b      	bne.n	800295e <FrameCaptureInit+0x10a>
      Test_Context_Ptr->CaptureContext.capture_file_format = DATA_FORMAT_RAW;
 8002a46:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
      break;
 8002a4a:	e788      	b.n	800295e <FrameCaptureInit+0x10a>
    BSP_LED_On(LED_RED);
 8002a4c:	2002      	movs	r0, #2
 8002a4e:	f006 fe4f 	bl	80096f0 <BSP_LED_On>
    while (1);
 8002a52:	e7fe      	b.n	8002a52 <FrameCaptureInit+0x1fe>
      Test_Context_Ptr->CaptureContext.capture_file_format = DATA_FORMAT_BMP;
 8002a54:	2301      	movs	r3, #1
 8002a56:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
 8002a5a:	e780      	b.n	800295e <FrameCaptureInit+0x10a>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not create directory", CENTER_MODE);
 8002a5c:	f018 fe10 	bl	801b680 <UTIL_LCD_GetFont>
 8002a60:	88c1      	ldrh	r1, [r0, #6]
 8002a62:	2301      	movs	r3, #1
 8002a64:	4a27      	ldr	r2, [pc, #156]	; (8002b04 <FrameCaptureInit+0x2b0>)
 8002a66:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002a6a:	4628      	mov	r0, r5
 8002a6c:	4099      	lsls	r1, r3
 8002a6e:	f018 feff 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 8002a72:	f018 fe05 	bl	801b680 <UTIL_LCD_GetFont>
 8002a76:	4601      	mov	r1, r0
 8002a78:	2301      	movs	r3, #1
 8002a7a:	4a21      	ldr	r2, [pc, #132]	; (8002b00 <FrameCaptureInit+0x2ac>)
 8002a7c:	88c9      	ldrh	r1, [r1, #6]
 8002a7e:	4628      	mov	r0, r5
 8002a80:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8002a84:	f018 fef4 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8002a88:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8002a8a:	f7fe ff61 	bl	8001950 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8002a8e:	2002      	movs	r0, #2
 8002a90:	f006 fe2e 	bl	80096f0 <BSP_LED_On>
    while (1);
 8002a94:	e7fe      	b.n	8002a94 <FrameCaptureInit+0x240>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not create directory", CENTER_MODE);
 8002a96:	f018 fdf3 	bl	801b680 <UTIL_LCD_GetFont>
 8002a9a:	88c1      	ldrh	r1, [r0, #6]
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	4a19      	ldr	r2, [pc, #100]	; (8002b04 <FrameCaptureInit+0x2b0>)
 8002aa0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	4099      	lsls	r1, r3
 8002aa8:	f018 fee2 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 8002aac:	f018 fde8 	bl	801b680 <UTIL_LCD_GetFont>
 8002ab0:	4601      	mov	r1, r0
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	463a      	mov	r2, r7
 8002ab6:	88c9      	ldrh	r1, [r1, #6]
 8002ab8:	4620      	mov	r0, r4
 8002aba:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8002abe:	f018 fed7 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8002ac2:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8002ac4:	f7fe ff44 	bl	8001950 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8002ac8:	2002      	movs	r0, #2
 8002aca:	f006 fe11 	bl	80096f0 <BSP_LED_On>
    while (1);
 8002ace:	e7fe      	b.n	8002ace <FrameCaptureInit+0x27a>
 8002ad0:	08028f08 	.word	0x08028f08
 8002ad4:	08028de8 	.word	0x08028de8
 8002ad8:	08028f1c 	.word	0x08028f1c
 8002adc:	08028f48 	.word	0x08028f48
 8002ae0:	08028f4c 	.word	0x08028f4c
 8002ae4:	30000300 	.word	0x30000300
 8002ae8:	48021800 	.word	0x48021800
 8002aec:	08028f50 	.word	0x08028f50
 8002af0:	08028e50 	.word	0x08028e50
 8002af4:	08098964 	.word	0x08098964
 8002af8:	20008180 	.word	0x20008180
 8002afc:	08028f5c 	.word	0x08028f5c
 8002b00:	08028f80 	.word	0x08028f80
 8002b04:	08028e7c 	.word	0x08028e7c

08002b08 <OnBoardValidInit>:
{
 8002b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b0c:	4604      	mov	r4, r0
 8002b0e:	b092      	sub	sp, #72	; 0x48
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8002b10:	f8d4 5600 	ldr.w	r5, [r4, #1536]	; 0x600
  char msg[64];
  
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
  static const uint16_t margin = 15; /* margin for text in pixels*/
  
  sprintf(msg, "%s", App_Cxt_Ptr->Test_ContextPtr->ValidationContext.class_path);
 8002b14:	a802      	add	r0, sp, #8
 8002b16:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8002b18:	f501 7170 	add.w	r1, r1, #960	; 0x3c0
 8002b1c:	f023 fdc3 	bl	80266a6 <strcpy>

  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002b20:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002b24:	f018 fdb4 	bl	801b690 <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8002b28:	f04f 32ff 	mov.w	r2, #4294967295
 8002b2c:	2332      	movs	r3, #50	; 0x32
 8002b2e:	210a      	movs	r1, #10
 8002b30:	9200      	str	r2, [sp, #0]
 8002b32:	20c8      	movs	r0, #200	; 0xc8
 8002b34:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002b38:	f018 ff7c 	bl	801ba34 <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Onboard Validation", CENTER_MODE);
 8002b3c:	f018 fda0 	bl	801b680 <UTIL_LCD_GetFont>
 8002b40:	2301      	movs	r3, #1
 8002b42:	88c1      	ldrh	r1, [r0, #6]
 8002b44:	2000      	movs	r0, #0
 8002b46:	4aa1      	ldr	r2, [pc, #644]	; (8002dcc <OnBoardValidInit+0x2c4>)
 8002b48:	f018 fe92 	bl	801b870 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_DisplayStringAt(margin, LINE(4), (uint8_t *)"Onboard validation will look for a directory", LEFT_MODE);
 8002b4c:	f018 fd98 	bl	801b680 <UTIL_LCD_GetFont>
 8002b50:	88c1      	ldrh	r1, [r0, #6]
 8002b52:	2303      	movs	r3, #3
 8002b54:	4a9e      	ldr	r2, [pc, #632]	; (8002dd0 <OnBoardValidInit+0x2c8>)
 8002b56:	0089      	lsls	r1, r1, #2
 8002b58:	200f      	movs	r0, #15
 8002b5a:	f018 fe89 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(5), (uint8_t *)msg, LEFT_MODE);
 8002b5e:	f018 fd8f 	bl	801b680 <UTIL_LCD_GetFont>
 8002b62:	88c1      	ldrh	r1, [r0, #6]
 8002b64:	aa02      	add	r2, sp, #8
 8002b66:	2303      	movs	r3, #3
 8002b68:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002b6c:	200f      	movs	r0, #15
 8002b6e:	f018 fe7f 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(6), (uint8_t *)"at the root of the SDCard.", LEFT_MODE);
 8002b72:	f018 fd85 	bl	801b680 <UTIL_LCD_GetFont>
 8002b76:	88c1      	ldrh	r1, [r0, #6]
 8002b78:	2303      	movs	r3, #3
 8002b7a:	4a96      	ldr	r2, [pc, #600]	; (8002dd4 <OnBoardValidInit+0x2cc>)
 8002b7c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002b80:	200f      	movs	r0, #15
 8002b82:	0049      	lsls	r1, r1, #1
 8002b84:	f018 fe74 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(7), (uint8_t *)"This directory should contain one directory", LEFT_MODE);
 8002b88:	f018 fd7a 	bl	801b680 <UTIL_LCD_GetFont>
 8002b8c:	88c1      	ldrh	r1, [r0, #6]
 8002b8e:	2303      	movs	r3, #3
 8002b90:	4a91      	ldr	r2, [pc, #580]	; (8002dd8 <OnBoardValidInit+0x2d0>)
 8002b92:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002b96:	200f      	movs	r0, #15
 8002b98:	f018 fe6a 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(8), (uint8_t *)"per class containing images in BPM 16 bpp", LEFT_MODE);
 8002b9c:	f018 fd70 	bl	801b680 <UTIL_LCD_GetFont>
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	88c1      	ldrh	r1, [r0, #6]
 8002ba4:	200f      	movs	r0, #15
 8002ba6:	4a8d      	ldr	r2, [pc, #564]	; (8002ddc <OnBoardValidInit+0x2d4>)
 8002ba8:	4099      	lsls	r1, r3
 8002baa:	f018 fe61 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(9), (uint8_t *)"format.", LEFT_MODE);
 8002bae:	f018 fd67 	bl	801b680 <UTIL_LCD_GetFont>
 8002bb2:	88c1      	ldrh	r1, [r0, #6]
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	4a8a      	ldr	r2, [pc, #552]	; (8002de0 <OnBoardValidInit+0x2d8>)
 8002bb8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8002bbc:	200f      	movs	r0, #15
 8002bbe:	f018 fe57 	bl	801b870 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_DisplayStringAt(margin, LINE(12), (uint8_t *)"Please insert the SDCard now,", LEFT_MODE);
 8002bc2:	f018 fd5d 	bl	801b680 <UTIL_LCD_GetFont>
 8002bc6:	88c1      	ldrh	r1, [r0, #6]
 8002bc8:	2303      	movs	r3, #3
 8002bca:	4a86      	ldr	r2, [pc, #536]	; (8002de4 <OnBoardValidInit+0x2dc>)
 8002bcc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002bd0:	200f      	movs	r0, #15
 8002bd2:	0089      	lsls	r1, r1, #2
 8002bd4:	f018 fe4c 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(13), (uint8_t *)"then press the WAKE-UP button to get started", LEFT_MODE);
 8002bd8:	f018 fd52 	bl	801b680 <UTIL_LCD_GetFont>
 8002bdc:	88c3      	ldrh	r3, [r0, #6]
 8002bde:	4a82      	ldr	r2, [pc, #520]	; (8002de8 <OnBoardValidInit+0x2e0>)
 8002be0:	200f      	movs	r0, #15
 8002be2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8002be6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8002bea:	2303      	movs	r3, #3
 8002bec:	f018 fe40 	bl	801b870 <UTIL_LCD_DisplayStringAt>

  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002bf0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002bf2:	f7fe fead 	bl	8001950 <DISPLAY_Refresh>

  /* Wait for button input */
  while ((Test_Context_Ptr->UartContext.uart_cmd_ongoing==0) && (BSP_PB_GetState(BUTTON_WAKEUP) == RESET))
 8002bf6:	e002      	b.n	8002bfe <OnBoardValidInit+0xf6>
 8002bf8:	f006 fdfe 	bl	80097f8 <BSP_PB_GetState>
 8002bfc:	b918      	cbnz	r0, 8002c06 <OnBoardValidInit+0xfe>
 8002bfe:	f8d4 0520 	ldr.w	r0, [r4, #1312]	; 0x520
 8002c02:	2800      	cmp	r0, #0
 8002c04:	d0f8      	beq.n	8002bf8 <OnBoardValidInit+0xf0>
  BSP_CAMERA_DeInit(0);
 8002c06:	2000      	movs	r0, #0
 8002c08:	f007 fb5e 	bl	800a2c8 <BSP_CAMERA_DeInit>
  sd_error = BSP_SD_Init(0);
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	f008 fcf5 	bl	800b5fc <BSP_SD_Init>
  if (sd_error != BSP_ERROR_NONE)
 8002c12:	b2c0      	uxtb	r0, r0
 8002c14:	b188      	cbz	r0, 8002c3a <OnBoardValidInit+0x132>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 8002c16:	f018 fd33 	bl	801b680 <UTIL_LCD_GetFont>
 8002c1a:	88c1      	ldrh	r1, [r0, #6]
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	4a73      	ldr	r2, [pc, #460]	; (8002dec <OnBoardValidInit+0x2e4>)
 8002c20:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002c24:	2000      	movs	r0, #0
 8002c26:	4099      	lsls	r1, r3
 8002c28:	f018 fe22 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002c2c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002c2e:	f7fe fe8f 	bl	8001950 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8002c32:	2002      	movs	r0, #2
 8002c34:	f006 fd5c 	bl	80096f0 <BSP_LED_On>
    while (1)
 8002c38:	e7fe      	b.n	8002c38 <OnBoardValidInit+0x130>
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 8002c3a:	a902      	add	r1, sp, #8
 8002c3c:	486c      	ldr	r0, [pc, #432]	; (8002df0 <OnBoardValidInit+0x2e8>)
 8002c3e:	f016 fb09 	bl	8019254 <FATFS_LinkDriver>
 8002c42:	4602      	mov	r2, r0
 8002c44:	b118      	cbz	r0, 8002c4e <OnBoardValidInit+0x146>
    BSP_LED_On(LED_RED);
 8002c46:	2002      	movs	r0, #2
 8002c48:	f006 fd52 	bl	80096f0 <BSP_LED_On>
    while (1);
 8002c4c:	e7fe      	b.n	8002c4c <OnBoardValidInit+0x144>
  if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 8002c4e:	a902      	add	r1, sp, #8
 8002c50:	4868      	ldr	r0, [pc, #416]	; (8002df4 <OnBoardValidInit+0x2ec>)
 8002c52:	f014 fe5b 	bl	801790c <f_mount>
 8002c56:	4606      	mov	r6, r0
 8002c58:	b9f0      	cbnz	r0, 8002c98 <OnBoardValidInit+0x190>
  strcpy(valid_dir_path, Test_Context_Ptr->ValidationContext.class_path);
 8002c5a:	f504 7970 	add.w	r9, r4, #960	; 0x3c0
 8002c5e:	a802      	add	r0, sp, #8
 8002c60:	4649      	mov	r1, r9
 8002c62:	f023 fd20 	bl	80266a6 <strcpy>
  nbr_dir = count_dir(valid_dir_path, App_Cxt_Ptr);
 8002c66:	4629      	mov	r1, r5
 8002c68:	a802      	add	r0, sp, #8
 8002c6a:	f7fe ffc5 	bl	8001bf8 <count_dir>
  if (nbr_dir != AI_NETWORK_OUT_1_SIZE)
 8002c6e:	2805      	cmp	r0, #5
  nbr_dir = count_dir(valid_dir_path, App_Cxt_Ptr);
 8002c70:	4680      	mov	r8, r0
  if (nbr_dir != AI_NETWORK_OUT_1_SIZE)
 8002c72:	d015      	beq.n	8002ca0 <OnBoardValidInit+0x198>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Number of found directories incorrect", CENTER_MODE);
 8002c74:	f018 fd04 	bl	801b680 <UTIL_LCD_GetFont>
 8002c78:	88c1      	ldrh	r1, [r0, #6]
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	4a5e      	ldr	r2, [pc, #376]	; (8002df8 <OnBoardValidInit+0x2f0>)
 8002c7e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002c82:	4630      	mov	r0, r6
 8002c84:	4099      	lsls	r1, r3
 8002c86:	f018 fdf3 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002c8a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002c8c:	f7fe fe60 	bl	8001950 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8002c90:	2002      	movs	r0, #2
 8002c92:	f006 fd2d 	bl	80096f0 <BSP_LED_On>
    while (1)
 8002c96:	e7fe      	b.n	8002c96 <OnBoardValidInit+0x18e>
    BSP_LED_On(LED_RED);
 8002c98:	2002      	movs	r0, #2
 8002c9a:	f006 fd29 	bl	80096f0 <BSP_LED_On>
    while (1);
 8002c9e:	e7fe      	b.n	8002c9e <OnBoardValidInit+0x196>
  BSP_LED_On(LED_GREEN);
 8002ca0:	4630      	mov	r0, r6
  sprintf(tmp_msg, "List of missclassified files:\n");
 8002ca2:	4f56      	ldr	r7, [pc, #344]	; (8002dfc <OnBoardValidInit+0x2f4>)
  BSP_LED_On(LED_GREEN);
 8002ca4:	f006 fd24 	bl	80096f0 <BSP_LED_On>
  sprintf(tmp_msg, "List of missclassified files:\n");
 8002ca8:	f8df c168 	ldr.w	ip, [pc, #360]	; 8002e14 <OnBoardValidInit+0x30c>
  DIR *dir = &Test_Context_Ptr->ValidationContext.dataset_dir;
 8002cac:	f504 7a92 	add.w	sl, r4, #292	; 0x124
  sprintf(tmp_msg, "List of missclassified files:\n");
 8002cb0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002cb4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002cb6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8002cba:	c707      	stmia	r7!, {r0, r1, r2}
 8002cbc:	f827 3b02 	strh.w	r3, [r7], #2
 8002cc0:	0c1b      	lsrs	r3, r3, #16
 8002cc2:	4639      	mov	r1, r7
  write_txt("missclassified.txt", tmp_msg, FA_WRITE | FA_CREATE_ALWAYS, App_Cxt_Ptr);
 8002cc4:	220a      	movs	r2, #10
 8002cc6:	484e      	ldr	r0, [pc, #312]	; (8002e00 <OnBoardValidInit+0x2f8>)
  sprintf(tmp_msg, "List of missclassified files:\n");
 8002cc8:	f801 391e 	strb.w	r3, [r1], #-30
  write_txt("missclassified.txt", tmp_msg, FA_WRITE | FA_CREATE_ALWAYS, App_Cxt_Ptr);
 8002ccc:	462b      	mov	r3, r5
 8002cce:	f7fe ffd7 	bl	8001c80 <write_txt>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002cd2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002cd6:	f018 fcdb 	bl	801b690 <UTIL_LCD_Clear>
  UTIL_LCD_SetFont(&Font20);
 8002cda:	484a      	ldr	r0, [pc, #296]	; (8002e04 <OnBoardValidInit+0x2fc>)
 8002cdc:	f018 fcc8 	bl	801b670 <UTIL_LCD_SetFont>
  sprintf(tmp_msg, "Found %d classes", (unsigned int)nbr_dir);
 8002ce0:	4642      	mov	r2, r8
 8002ce2:	4949      	ldr	r1, [pc, #292]	; (8002e08 <OnBoardValidInit+0x300>)
 8002ce4:	f1a7 001e 	sub.w	r0, r7, #30
 8002ce8:	f023 fbce 	bl	8026488 <siprintf>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)tmp_msg, CENTER_MODE);
 8002cec:	f018 fcc8 	bl	801b680 <UTIL_LCD_GetFont>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f1a7 021e 	sub.w	r2, r7, #30
 8002cf6:	4630      	mov	r0, r6
 8002cf8:	88d9      	ldrh	r1, [r3, #6]
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f018 fdb8 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  f_opendir(dir, valid_dir_path);
 8002d00:	a902      	add	r1, sp, #8
 8002d02:	4650      	mov	r0, sl
 8002d04:	f015 fd14 	bl	8018730 <f_opendir>
  res = f_readdir(dir, &Test_Context_Ptr->ValidationContext.fno);
 8002d08:	f504 71ac 	add.w	r1, r4, #344	; 0x158
 8002d0c:	4650      	mov	r0, sl
 8002d0e:	f015 fda5 	bl	801885c <f_readdir>
  if (res != FR_OK)
 8002d12:	2800      	cmp	r0, #0
 8002d14:	d138      	bne.n	8002d88 <OnBoardValidInit+0x280>
  Test_Context_Ptr->ValidationContext.class_index = FindClassIndexFromString(Test_Context_Ptr->ValidationContext.fno.fname);
 8002d16:	f504 76b7 	add.w	r6, r4, #366	; 0x16e
    if (strcmp(className, NN_OUTPUT_CLASS_LIST[j]) == 0)
 8002d1a:	4f3c      	ldr	r7, [pc, #240]	; (8002e0c <OnBoardValidInit+0x304>)
 8002d1c:	4630      	mov	r0, r6
 8002d1e:	6839      	ldr	r1, [r7, #0]
 8002d20:	f7fd fade 	bl	80002e0 <strcmp>
 8002d24:	b390      	cbz	r0, 8002d8c <OnBoardValidInit+0x284>
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4630      	mov	r0, r6
 8002d2a:	f7fd fad9 	bl	80002e0 <strcmp>
 8002d2e:	b360      	cbz	r0, 8002d8a <OnBoardValidInit+0x282>
 8002d30:	68b9      	ldr	r1, [r7, #8]
 8002d32:	4630      	mov	r0, r6
 8002d34:	f7fd fad4 	bl	80002e0 <strcmp>
 8002d38:	2800      	cmp	r0, #0
 8002d3a:	d045      	beq.n	8002dc8 <OnBoardValidInit+0x2c0>
 8002d3c:	68f9      	ldr	r1, [r7, #12]
 8002d3e:	4630      	mov	r0, r6
 8002d40:	f7fd face 	bl	80002e0 <strcmp>
 8002d44:	2800      	cmp	r0, #0
 8002d46:	d03d      	beq.n	8002dc4 <OnBoardValidInit+0x2bc>
 8002d48:	6939      	ldr	r1, [r7, #16]
 8002d4a:	4630      	mov	r0, r6
 8002d4c:	f7fd fac8 	bl	80002e0 <strcmp>
 8002d50:	b3b0      	cbz	r0, 8002dc0 <OnBoardValidInit+0x2b8>
  Test_Context_Ptr->ValidationContext.class_index = FindClassIndexFromString(Test_Context_Ptr->ValidationContext.fno.fname);
 8002d52:	f04f 33ff 	mov.w	r3, #4294967295
    sprintf(tmp_msg, "Error, class %s doesn't exists", Test_Context_Ptr->ValidationContext.fno.fname);
 8002d56:	4632      	mov	r2, r6
 8002d58:	492d      	ldr	r1, [pc, #180]	; (8002e10 <OnBoardValidInit+0x308>)
  Test_Context_Ptr->ValidationContext.class_index = FindClassIndexFromString(Test_Context_Ptr->ValidationContext.fno.fname);
 8002d5a:	f8c4 33bc 	str.w	r3, [r4, #956]	; 0x3bc
    sprintf(tmp_msg, "Error, class %s doesn't exists", Test_Context_Ptr->ValidationContext.fno.fname);
 8002d5e:	4827      	ldr	r0, [pc, #156]	; (8002dfc <OnBoardValidInit+0x2f4>)
 8002d60:	f023 fb92 	bl	8026488 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(3), (uint8_t *)tmp_msg, CENTER_MODE);
 8002d64:	f018 fc8c 	bl	801b680 <UTIL_LCD_GetFont>
 8002d68:	4601      	mov	r1, r0
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	4a23      	ldr	r2, [pc, #140]	; (8002dfc <OnBoardValidInit+0x2f4>)
 8002d6e:	88c9      	ldrh	r1, [r1, #6]
 8002d70:	2000      	movs	r0, #0
 8002d72:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002d76:	f018 fd7b 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002d7a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002d7c:	f7fe fde8 	bl	8001950 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8002d80:	2002      	movs	r0, #2
 8002d82:	f006 fcb5 	bl	80096f0 <BSP_LED_On>
    while (1)
 8002d86:	e7fe      	b.n	8002d86 <OnBoardValidInit+0x27e>
    while (1);
 8002d88:	e7fe      	b.n	8002d88 <OnBoardValidInit+0x280>
  for (size_t j = 0; j < AI_NET_OUTPUT_SIZE; j++)
 8002d8a:	2001      	movs	r0, #1
  strcpy(Test_Context_Ptr->ValidationContext.tmp_class_path, ""); //string "null"
 8002d8c:	f504 6580 	add.w	r5, r4, #1024	; 0x400
  strcpy(Test_Context_Ptr->ValidationContext.tmp_class_path, Test_Context_Ptr->ValidationContext.class_path );
 8002d90:	4649      	mov	r1, r9
  Test_Context_Ptr->ValidationContext.class_index = FindClassIndexFromString(Test_Context_Ptr->ValidationContext.fno.fname);
 8002d92:	f8c4 03bc 	str.w	r0, [r4, #956]	; 0x3bc
  strcpy(Test_Context_Ptr->ValidationContext.tmp_class_path, Test_Context_Ptr->ValidationContext.class_path );
 8002d96:	4628      	mov	r0, r5
 8002d98:	f023 fbfb 	bl	8026592 <stpcpy>
  strcat(Test_Context_Ptr->ValidationContext.tmp_class_path, "/");
 8002d9c:	232f      	movs	r3, #47	; 0x2f
  strcat(Test_Context_Ptr->ValidationContext.tmp_class_path, Test_Context_Ptr->ValidationContext.fno.fname);
 8002d9e:	4631      	mov	r1, r6
 8002da0:	3001      	adds	r0, #1
  strcat(Test_Context_Ptr->ValidationContext.tmp_class_path, "/");
 8002da2:	f800 3c01 	strb.w	r3, [r0, #-1]
  strcat(Test_Context_Ptr->ValidationContext.tmp_class_path, Test_Context_Ptr->ValidationContext.fno.fname);
 8002da6:	f023 fc7e 	bl	80266a6 <strcpy>
  res = f_opendir(&Test_Context_Ptr->ValidationContext.class_dir, Test_Context_Ptr->ValidationContext.tmp_class_path);
 8002daa:	4629      	mov	r1, r5
 8002dac:	f504 701c 	add.w	r0, r4, #624	; 0x270
 8002db0:	f015 fcbe 	bl	8018730 <f_opendir>
  Test_Context_Ptr->ValidationContext.validation_completed = 0;
 8002db4:	2300      	movs	r3, #0
 8002db6:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
}
 8002dba:	b012      	add	sp, #72	; 0x48
 8002dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (size_t j = 0; j < AI_NET_OUTPUT_SIZE; j++)
 8002dc0:	2004      	movs	r0, #4
 8002dc2:	e7e3      	b.n	8002d8c <OnBoardValidInit+0x284>
 8002dc4:	2003      	movs	r0, #3
 8002dc6:	e7e1      	b.n	8002d8c <OnBoardValidInit+0x284>
 8002dc8:	2002      	movs	r0, #2
 8002dca:	e7df      	b.n	8002d8c <OnBoardValidInit+0x284>
 8002dcc:	08028f90 	.word	0x08028f90
 8002dd0:	08028fa4 	.word	0x08028fa4
 8002dd4:	08028fd4 	.word	0x08028fd4
 8002dd8:	08028ff0 	.word	0x08028ff0
 8002ddc:	0802901c 	.word	0x0802901c
 8002de0:	08029048 	.word	0x08029048
 8002de4:	08029050 	.word	0x08029050
 8002de8:	08029070 	.word	0x08029070
 8002dec:	08028e50 	.word	0x08028e50
 8002df0:	08098964 	.word	0x08098964
 8002df4:	20008180 	.word	0x20008180
 8002df8:	08028ec0 	.word	0x08028ec0
 8002dfc:	20008d14 	.word	0x20008d14
 8002e00:	080290c0 	.word	0x080290c0
 8002e04:	20007720 	.word	0x20007720
 8002e08:	080290d4 	.word	0x080290d4
 8002e0c:	20000004 	.word	0x20000004
 8002e10:	080290e8 	.word	0x080290e8
 8002e14:	080290a0 	.word	0x080290a0

08002e18 <UartCmd_Upload_Dump_Whole_Data>:
{
 8002e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((*(uint8_t*)(data_buffer))== 0x00)
 8002e1a:	780b      	ldrb	r3, [r1, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d04f      	beq.n	8002ec0 <UartCmd_Upload_Dump_Whole_Data+0xa8>
  else if((*(uint8_t*)(data_buffer))== 0x01)
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d01d      	beq.n	8002e60 <UartCmd_Upload_Dump_Whole_Data+0x48>
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002e24:	4d45      	ldr	r5, [pc, #276]	; (8002f3c <UartCmd_Upload_Dump_Whole_Data+0x124>)
 8002e26:	2304      	movs	r3, #4
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002e28:	f200 543c 	addw	r4, r0, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	2180      	movs	r1, #128	; 0x80
 8002e30:	4628      	mov	r0, r5
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002e32:	702b      	strb	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002e34:	f002 f92a 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	4629      	mov	r1, r5
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	f010 f9a1 	bl	8013184 <HAL_UART_Transmit_DMA>
 8002e42:	2800      	cmp	r0, #0
 8002e44:	d170      	bne.n	8002f28 <UartCmd_Upload_Dump_Whole_Data+0x110>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002e46:	4620      	mov	r0, r4
 8002e48:	f010 fbcc 	bl	80135e4 <HAL_UART_GetState>
 8002e4c:	2820      	cmp	r0, #32
 8002e4e:	d1fa      	bne.n	8002e46 <UartCmd_Upload_Dump_Whole_Data+0x2e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002e50:	220a      	movs	r2, #10
 8002e52:	493b      	ldr	r1, [pc, #236]	; (8002f40 <UartCmd_Upload_Dump_Whole_Data+0x128>)
 8002e54:	4620      	mov	r0, r4
 8002e56:	f010 f9e7 	bl	8013228 <HAL_UART_Receive_DMA>
 8002e5a:	2800      	cmp	r0, #0
 8002e5c:	d15d      	bne.n	8002f1a <UartCmd_Upload_Dump_Whole_Data+0x102>
}
 8002e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002e60:	4d38      	ldr	r5, [pc, #224]	; (8002f44 <UartCmd_Upload_Dump_Whole_Data+0x12c>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002e62:	f200 543c 	addw	r4, r0, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002e66:	2202      	movs	r2, #2
 8002e68:	4937      	ldr	r1, [pc, #220]	; (8002f48 <UartCmd_Upload_Dump_Whole_Data+0x130>)
 8002e6a:	4628      	mov	r0, r5
 8002e6c:	4f37      	ldr	r7, [pc, #220]	; (8002f4c <UartCmd_Upload_Dump_Whole_Data+0x134>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002e6e:	f64f 76ff 	movw	r6, #65535	; 0xffff
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002e72:	f002 f90b 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002e76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e7a:	4629      	mov	r1, r5
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	f010 f981 	bl	8013184 <HAL_UART_Transmit_DMA>
 8002e82:	b9d0      	cbnz	r0, 8002eba <UartCmd_Upload_Dump_Whole_Data+0xa2>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002e84:	4620      	mov	r0, r4
 8002e86:	f010 fbad 	bl	80135e4 <HAL_UART_GetState>
 8002e8a:	2820      	cmp	r0, #32
 8002e8c:	d1fa      	bne.n	8002e84 <UartCmd_Upload_Dump_Whole_Data+0x6c>
    for(i=0;i<dma_xfer_num;i++)
 8002e8e:	4435      	add	r5, r6
 8002e90:	42bd      	cmp	r5, r7
 8002e92:	d1f0      	bne.n	8002e76 <UartCmd_Upload_Dump_Whole_Data+0x5e>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8002e94:	f645 02b8 	movw	r2, #22712	; 0x58b8
 8002e98:	492c      	ldr	r1, [pc, #176]	; (8002f4c <UartCmd_Upload_Dump_Whole_Data+0x134>)
 8002e9a:	4620      	mov	r0, r4
 8002e9c:	f010 f972 	bl	8013184 <HAL_UART_Transmit_DMA>
 8002ea0:	2800      	cmp	r0, #0
 8002ea2:	d144      	bne.n	8002f2e <UartCmd_Upload_Dump_Whole_Data+0x116>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	f010 fb9d 	bl	80135e4 <HAL_UART_GetState>
 8002eaa:	2820      	cmp	r0, #32
 8002eac:	d0d0      	beq.n	8002e50 <UartCmd_Upload_Dump_Whole_Data+0x38>
 8002eae:	4620      	mov	r0, r4
 8002eb0:	f010 fb98 	bl	80135e4 <HAL_UART_GetState>
 8002eb4:	2820      	cmp	r0, #32
 8002eb6:	d1f5      	bne.n	8002ea4 <UartCmd_Upload_Dump_Whole_Data+0x8c>
 8002eb8:	e7ca      	b.n	8002e50 <UartCmd_Upload_Dump_Whole_Data+0x38>
        Error_Handler();
 8002eba:	f002 f957 	bl	800516c <Error_Handler>
 8002ebe:	e7e1      	b.n	8002e84 <UartCmd_Upload_Dump_Whole_Data+0x6c>
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002ec0:	4d23      	ldr	r5, [pc, #140]	; (8002f50 <UartCmd_Upload_Dump_Whole_Data+0x138>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002ec2:	f200 543c 	addw	r4, r0, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	491f      	ldr	r1, [pc, #124]	; (8002f48 <UartCmd_Upload_Dump_Whole_Data+0x130>)
 8002eca:	4628      	mov	r0, r5
 8002ecc:	4f21      	ldr	r7, [pc, #132]	; (8002f54 <UartCmd_Upload_Dump_Whole_Data+0x13c>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002ece:	f64f 76ff 	movw	r6, #65535	; 0xffff
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002ed2:	f002 f8db 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002ed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002eda:	4629      	mov	r1, r5
 8002edc:	4620      	mov	r0, r4
 8002ede:	f010 f951 	bl	8013184 <HAL_UART_Transmit_DMA>
 8002ee2:	b9f0      	cbnz	r0, 8002f22 <UartCmd_Upload_Dump_Whole_Data+0x10a>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	f010 fb7d 	bl	80135e4 <HAL_UART_GetState>
 8002eea:	2820      	cmp	r0, #32
 8002eec:	d1fa      	bne.n	8002ee4 <UartCmd_Upload_Dump_Whole_Data+0xcc>
    for(i=0;i<dma_xfer_num;i++)
 8002eee:	4435      	add	r5, r6
 8002ef0:	42bd      	cmp	r5, r7
 8002ef2:	d1f0      	bne.n	8002ed6 <UartCmd_Upload_Dump_Whole_Data+0xbe>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8002ef4:	f645 02b8 	movw	r2, #22712	; 0x58b8
 8002ef8:	4916      	ldr	r1, [pc, #88]	; (8002f54 <UartCmd_Upload_Dump_Whole_Data+0x13c>)
 8002efa:	4620      	mov	r0, r4
 8002efc:	f010 f942 	bl	8013184 <HAL_UART_Transmit_DMA>
 8002f00:	b9c0      	cbnz	r0, 8002f34 <UartCmd_Upload_Dump_Whole_Data+0x11c>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002f02:	4620      	mov	r0, r4
 8002f04:	f010 fb6e 	bl	80135e4 <HAL_UART_GetState>
 8002f08:	2820      	cmp	r0, #32
 8002f0a:	d1fa      	bne.n	8002f02 <UartCmd_Upload_Dump_Whole_Data+0xea>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002f0c:	220a      	movs	r2, #10
 8002f0e:	490c      	ldr	r1, [pc, #48]	; (8002f40 <UartCmd_Upload_Dump_Whole_Data+0x128>)
 8002f10:	4620      	mov	r0, r4
 8002f12:	f010 f989 	bl	8013228 <HAL_UART_Receive_DMA>
 8002f16:	2800      	cmp	r0, #0
 8002f18:	d0a1      	beq.n	8002e5e <UartCmd_Upload_Dump_Whole_Data+0x46>
}
 8002f1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 8002f1e:	f002 b925 	b.w	800516c <Error_Handler>
        Error_Handler();
 8002f22:	f002 f923 	bl	800516c <Error_Handler>
 8002f26:	e7dd      	b.n	8002ee4 <UartCmd_Upload_Dump_Whole_Data+0xcc>
      Error_Handler();
 8002f28:	f002 f920 	bl	800516c <Error_Handler>
 8002f2c:	e78b      	b.n	8002e46 <UartCmd_Upload_Dump_Whole_Data+0x2e>
        Error_Handler();
 8002f2e:	f002 f91d 	bl	800516c <Error_Handler>
 8002f32:	e7b7      	b.n	8002ea4 <UartCmd_Upload_Dump_Whole_Data+0x8c>
 8002f34:	f002 f91a 	bl	800516c <Error_Handler>
 8002f38:	e7e3      	b.n	8002f02 <UartCmd_Upload_Dump_Whole_Data+0xea>
 8002f3a:	bf00      	nop
 8002f3c:	30000280 	.word	0x30000280
 8002f40:	30000300 	.word	0x30000300
 8002f44:	d0cf6480 	.word	0xd0cf6480
 8002f48:	000458c0 	.word	0x000458c0
 8002f4c:	d0d3647c 	.word	0xd0d3647c
 8002f50:	d0cb0bc0 	.word	0xd0cb0bc0
 8002f54:	d0cf0bbc 	.word	0xd0cf0bbc

08002f58 <TEST_Init>:
 * @param TestContext_Ptr pointer to test context
 */
static void Test_Context_Init(TestContext_TypeDef *Test_Context_Ptr)
{
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_LIVE;
  Test_Context_Ptr->DumpContext.dump_session_id = 0;
 8002f58:	ed9f 7b6b 	vldr	d7, [pc, #428]	; 8003108 <TEST_Init+0x1b0>
 * @brief Test Init
 *
 * @param Test_Context_Ptr pointer to test context
 */
void TEST_Init(TestContext_TypeDef *Test_Context_Ptr)
{
 8002f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  Test_Context_Ptr->DumpContext.dump_state = 0;
 8002f5e:	2300      	movs	r3, #0
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_LIVE;
 8002f60:	2201      	movs	r2, #1
      Test_Context_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 8002f62:	f500 618a 	add.w	r1, r0, #1104	; 0x450
  Test_Context_Ptr->ValidationContext.overall_loss = 0.0;
 8002f66:	2700      	movs	r7, #0
 8002f68:	2600      	movs	r6, #0
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_LIVE;
 8002f6a:	7102      	strb	r2, [r0, #4]
  Test_Context_Ptr->ValidationContext.nbr_tested = 1;
 8002f6c:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
{
 8002f70:	4604      	mov	r4, r0
  Test_Context_Ptr->DumpContext.dump_state = 0;
 8002f72:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
{
 8002f76:	b091      	sub	sp, #68	; 0x44
  Test_Context_Ptr->CaptureContext.capture_file_format=DATA_FORMAT_RAW;
 8002f78:	f880 30bc 	strb.w	r3, [r0, #188]	; 0xbc
  Test_Context_Ptr->CaptureContext.capture_frame_count=0;
 8002f7c:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
  Test_Context_Ptr->ValidationContext.validation_completed=0;
 8002f80:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  Test_Context_Ptr->ValidationContext.overall_loss = 0.0;
 8002f84:	e9c0 6744 	strd	r6, r7, [r0, #272]	; 0x110
  Test_Context_Ptr->ValidationContext.avg_loss = 0.0;
 8002f88:	e9c0 6746 	strd	r6, r7, [r0, #280]	; 0x118
  Test_Context_Ptr->DumpContext.dump_session_id = 0;
 8002f8c:	ed80 7b02 	vstr	d7, [r0, #8]
  Test_Context_Ptr->CaptureContext.capture_state=0;
 8002f90:	ed80 7b30 	vstr	d7, [r0, #192]	; 0xc0
      Test_Context_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 8002f94:	ed01 7b02 	vstr	d7, [r1, #-8]
 8002f98:	ed81 7b00 	vstr	d7, [r1]
 8002f9c:	f500 618c 	add.w	r1, r0, #1120	; 0x460
  if(HAL_UART_Init(&Test_Context_Ptr->UartContext.UartHandle) != HAL_OK)
 8002fa0:	f204 573c 	addw	r7, r4, #1340	; 0x53c
      Test_Context_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 8002fa4:	ed01 7b02 	vstr	d7, [r1, #-8]
 8002fa8:	ed81 7b00 	vstr	d7, [r1]
 8002fac:	f500 618e 	add.w	r1, r0, #1136	; 0x470
 8002fb0:	ed01 7b02 	vstr	d7, [r1, #-8]
 8002fb4:	ed81 7b00 	vstr	d7, [r1]
 8002fb8:	f500 6190 	add.w	r1, r0, #1152	; 0x480
 8002fbc:	ed01 7b02 	vstr	d7, [r1, #-8]
 8002fc0:	ed81 7b00 	vstr	d7, [r1]
 8002fc4:	f500 6192 	add.w	r1, r0, #1168	; 0x490
  Test_Context_Ptr->UartContext.UartHandle.Instance        = USARTx;
 8002fc8:	4851      	ldr	r0, [pc, #324]	; (8003110 <TEST_Init+0x1b8>)
      Test_Context_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 8002fca:	ed01 7b02 	vstr	d7, [r1, #-8]
 8002fce:	ed81 7b00 	vstr	d7, [r1]
  Test_Context_Ptr->UartContext.uart_host_requested_mode = NOMINAL;
 8002fd2:	f884 2524 	strb.w	r2, [r4, #1316]	; 0x524
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8002fd6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  Test_Context_Ptr->UartContext.UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8002fda:	220c      	movs	r2, #12
  Test_Context_Ptr->UartContext.UartHandle.Instance        = USARTx;
 8002fdc:	f8c4 053c 	str.w	r0, [r4, #1340]	; 0x53c
      Test_Context_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 8002fe0:	f8c4 3498 	str.w	r3, [r4, #1176]	; 0x498
  if(HAL_UART_Init(&Test_Context_Ptr->UartContext.UartHandle) != HAL_OK)
 8002fe4:	4638      	mov	r0, r7
      Test_Context_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 8002fe6:	f8c4 349c 	str.w	r3, [r4, #1180]	; 0x49c
 8002fea:	f8c4 34a0 	str.w	r3, [r4, #1184]	; 0x4a0
 8002fee:	f8c4 34a4 	str.w	r3, [r4, #1188]	; 0x4a4
 8002ff2:	f8c4 34a8 	str.w	r3, [r4, #1192]	; 0x4a8
  Test_Context_Ptr->UartContext.uart_cmd_ongoing=0;
 8002ff6:	f8c4 3520 	str.w	r3, [r4, #1312]	; 0x520
  Test_Context_Ptr->UartContext.uart_host_nonreg_run=0;
 8002ffa:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
  Test_Context_Ptr->NonReg_FirstRun=0;
 8002ffe:	f8c4 3604 	str.w	r3, [r4, #1540]	; 0x604
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8003002:	f8c4 1540 	str.w	r1, [r4, #1344]	; 0x540
  Test_Context_Ptr->UartContext.UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8003006:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
  Test_Context_Ptr->UartContext.UartHandle.Init.StopBits   = UART_STOPBITS_1;
 800300a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
  Test_Context_Ptr->UartContext.UartHandle.Init.Parity     = UART_PARITY_NONE;
 800300e:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
  Test_Context_Ptr->UartContext.UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8003012:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
  Test_Context_Ptr->UartContext.UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8003016:	f8c4 2550 	str.w	r2, [r4, #1360]	; 0x550
  Test_Context_Ptr->UartContext.UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 800301a:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
  Test_Context_Ptr->UartContext.UartHandle.Init.ClockPrescaler  = UART_PRESCALER_DIV1;
 800301e:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
  Test_Context_Ptr->UartContext.UartHandle.Init.OneBitSampling  = UART_ONE_BIT_SAMPLE_DISABLE;
 8003022:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
  if(HAL_UART_Init(&Test_Context_Ptr->UartContext.UartHandle) != HAL_OK)
 8003026:	f010 fe39 	bl	8013c9c <HAL_UART_Init>
 800302a:	2800      	cmp	r0, #0
 800302c:	d160      	bne.n	80030f0 <TEST_Init+0x198>
  char alive_msg[64]="Board ON & UART link OK \n";
 800302e:	4e39      	ldr	r6, [pc, #228]	; (8003114 <TEST_Init+0x1bc>)
 8003030:	466d      	mov	r5, sp
 8003032:	6830      	ldr	r0, [r6, #0]
 8003034:	6871      	ldr	r1, [r6, #4]
 8003036:	68b2      	ldr	r2, [r6, #8]
 8003038:	68f3      	ldr	r3, [r6, #12]
 800303a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800303c:	6930      	ldr	r0, [r6, #16]
 800303e:	2226      	movs	r2, #38	; 0x26
 8003040:	6971      	ldr	r1, [r6, #20]
 8003042:	8b33      	ldrh	r3, [r6, #24]
 8003044:	c503      	stmia	r5!, {r0, r1}
 8003046:	2100      	movs	r1, #0
 8003048:	f10d 001a 	add.w	r0, sp, #26
 800304c:	802b      	strh	r3, [r5, #0]
 800304e:	f023 fa98 	bl	8026582 <memset>
  strcpy((char*)aTxBuffer, alive_msg);
 8003052:	46ec      	mov	ip, sp
 8003054:	4d30      	ldr	r5, [pc, #192]	; (8003118 <TEST_Init+0x1c0>)
 8003056:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800305a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800305c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003060:	c503      	stmia	r5!, {r0, r1}
 8003062:	4628      	mov	r0, r5
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8003064:	2180      	movs	r1, #128	; 0x80
  strcpy((char*)aTxBuffer, alive_msg);
 8003066:	f820 2918 	strh.w	r2, [r0], #-24
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800306a:	2202      	movs	r2, #2
 800306c:	f002 f80e 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8003070:	2219      	movs	r2, #25
 8003072:	f1a5 0118 	sub.w	r1, r5, #24
 8003076:	4638      	mov	r0, r7
 8003078:	f010 f884 	bl	8013184 <HAL_UART_Transmit_DMA>
 800307c:	2800      	cmp	r0, #0
 800307e:	d13d      	bne.n	80030fc <TEST_Init+0x1a4>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8003080:	4638      	mov	r0, r7
 8003082:	f010 faaf 	bl	80135e4 <HAL_UART_GetState>
 8003086:	2820      	cmp	r0, #32
 8003088:	d1fa      	bne.n	8003080 <TEST_Init+0x128>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 800308a:	220a      	movs	r2, #10
 800308c:	4923      	ldr	r1, [pc, #140]	; (800311c <TEST_Init+0x1c4>)
 800308e:	4638      	mov	r0, r7
 8003090:	f010 f8ca 	bl	8013228 <HAL_UART_Receive_DMA>
 8003094:	bb78      	cbnz	r0, 80030f6 <TEST_Init+0x19e>
  Test_ComIf_Init(Test_Context_Ptr);
  
  /*Compute the total char size for the array Test_buffer_names[]*/
  for (int i=0; i<APP_BUFF_NUM; i++)
  {
    Test_Context_Ptr->Total_Char_Name_Size+=strlen(Test_buffer_names[i]);
 8003096:	4822      	ldr	r0, [pc, #136]	; (8003120 <TEST_Init+0x1c8>)
 8003098:	f7fd f982 	bl	80003a0 <strlen>
 800309c:	f8d4 3608 	ldr.w	r3, [r4, #1544]	; 0x608
 80030a0:	4605      	mov	r5, r0
 80030a2:	4820      	ldr	r0, [pc, #128]	; (8003124 <TEST_Init+0x1cc>)
 80030a4:	441d      	add	r5, r3
 80030a6:	f8c4 5608 	str.w	r5, [r4, #1544]	; 0x608
 80030aa:	f7fd f979 	bl	80003a0 <strlen>
 80030ae:	4603      	mov	r3, r0
 80030b0:	481d      	ldr	r0, [pc, #116]	; (8003128 <TEST_Init+0x1d0>)
 80030b2:	441d      	add	r5, r3
 80030b4:	f8c4 5608 	str.w	r5, [r4, #1544]	; 0x608
 80030b8:	f7fd f972 	bl	80003a0 <strlen>
 80030bc:	4603      	mov	r3, r0
 80030be:	481b      	ldr	r0, [pc, #108]	; (800312c <TEST_Init+0x1d4>)
 80030c0:	441d      	add	r5, r3
 80030c2:	f8c4 5608 	str.w	r5, [r4, #1544]	; 0x608
 80030c6:	f7fd f96b 	bl	80003a0 <strlen>
 80030ca:	4603      	mov	r3, r0
 80030cc:	4818      	ldr	r0, [pc, #96]	; (8003130 <TEST_Init+0x1d8>)
 80030ce:	441d      	add	r5, r3
 80030d0:	f8c4 5608 	str.w	r5, [r4, #1544]	; 0x608
 80030d4:	f7fd f964 	bl	80003a0 <strlen>
 80030d8:	4603      	mov	r3, r0
  }

  /* Init IPL heap memory for image read/write operations */
  STM32Ipl_InitLib((void *) &ipl_heap, IPL_MEMORY_SIZE);
 80030da:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80030de:	4815      	ldr	r0, [pc, #84]	; (8003134 <TEST_Init+0x1dc>)
    Test_Context_Ptr->Total_Char_Name_Size+=strlen(Test_buffer_names[i]);
 80030e0:	442b      	add	r3, r5
 80030e2:	f8c4 3608 	str.w	r3, [r4, #1544]	; 0x608
}
 80030e6:	b011      	add	sp, #68	; 0x44
 80030e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  STM32Ipl_InitLib((void *) &ipl_heap, IPL_MEMORY_SIZE);
 80030ec:	f016 b9e4 	b.w	80194b8 <STM32Ipl_InitLib>
    Error_Handler();
 80030f0:	f002 f83c 	bl	800516c <Error_Handler>
 80030f4:	e79b      	b.n	800302e <TEST_Init+0xd6>
    Error_Handler();
 80030f6:	f002 f839 	bl	800516c <Error_Handler>
 80030fa:	e7cc      	b.n	8003096 <TEST_Init+0x13e>
      Error_Handler();
 80030fc:	f002 f836 	bl	800516c <Error_Handler>
 8003100:	e7be      	b.n	8003080 <TEST_Init+0x128>
 8003102:	bf00      	nop
 8003104:	f3af 8000 	nop.w
	...
 8003110:	40011000 	.word	0x40011000
 8003114:	08029108 	.word	0x08029108
 8003118:	30000280 	.word	0x30000280
 800311c:	30000300 	.word	0x30000300
 8003120:	20000020 	.word	0x20000020
 8003124:	20000040 	.word	0x20000040
 8003128:	20000060 	.word	0x20000060
 800312c:	20000080 	.word	0x20000080
 8003130:	200000a0 	.word	0x200000a0
 8003134:	d0000000 	.word	0xd0000000

08003138 <TEST_CmdIf_Check>:
 * @brief Check UART status for any received frame
 *
 * @param Test_Context_Ptr pointer to test context
 */
void TEST_CmdIf_Check(TestContext_TypeDef *Test_Context_Ptr)
{
 8003138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if((HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) == HAL_UART_STATE_READY) && (Test_Context_Ptr->UartContext.uart_cmd_ongoing ==0))
 800313c:	f200 553c 	addw	r5, r0, #1340	; 0x53c
{
 8003140:	4604      	mov	r4, r0
  if((HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) == HAL_UART_STATE_READY) && (Test_Context_Ptr->UartContext.uart_cmd_ongoing ==0))
 8003142:	4628      	mov	r0, r5
 8003144:	f010 fa4e 	bl	80135e4 <HAL_UART_GetState>
 8003148:	2820      	cmp	r0, #32
 800314a:	d001      	beq.n	8003150 <TEST_CmdIf_Check+0x18>

      /**Configure the UART in reception mode for receiving subsequent command from Host**/
      Uart_Rx(Test_Context_Ptr, aRxBuffer, RX_TRANSFER_SIZE);
    }
  }
}
 800314c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if((HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) == HAL_UART_STATE_READY) && (Test_Context_Ptr->UartContext.uart_cmd_ongoing ==0))
 8003150:	f8d4 6520 	ldr.w	r6, [r4, #1312]	; 0x520
 8003154:	2e00      	cmp	r6, #0
 8003156:	d1f9      	bne.n	800314c <TEST_CmdIf_Check+0x14>
    UTILS_DCache_Coherency_Maintenance((void *)aRxBuffer, RX_BUFFER_SIZE, INVALIDATE);
 8003158:	4f26      	ldr	r7, [pc, #152]	; (80031f4 <TEST_CmdIf_Check+0xbc>)
 800315a:	4601      	mov	r1, r0
 800315c:	2201      	movs	r2, #1
 800315e:	4638      	mov	r0, r7
 8003160:	f001 ff94 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
    if(aRxBuffer[0]< UART_CMD_NUMBER)
 8003164:	783b      	ldrb	r3, [r7, #0]
 8003166:	2b18      	cmp	r3, #24
 8003168:	d81f      	bhi.n	80031aa <TEST_CmdIf_Check+0x72>
      *(aTxBuffer) = CMD_ACK_EVT;
 800316a:	4823      	ldr	r0, [pc, #140]	; (80031f8 <TEST_CmdIf_Check+0xc0>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800316c:	2202      	movs	r2, #2
 800316e:	2180      	movs	r1, #128	; 0x80
      *(aTxBuffer) = CMD_ACK_EVT;
 8003170:	7006      	strb	r6, [r0, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8003172:	f001 ff8b 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8003176:	4820      	ldr	r0, [pc, #128]	; (80031f8 <TEST_CmdIf_Check+0xc0>)
 8003178:	2201      	movs	r2, #1
 800317a:	4601      	mov	r1, r0
 800317c:	4628      	mov	r0, r5
 800317e:	f010 f801 	bl	8013184 <HAL_UART_Transmit_DMA>
 8003182:	bb98      	cbnz	r0, 80031ec <TEST_CmdIf_Check+0xb4>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8003184:	4628      	mov	r0, r5
 8003186:	f010 fa2d 	bl	80135e4 <HAL_UART_GetState>
 800318a:	2820      	cmp	r0, #32
 800318c:	d1fa      	bne.n	8003184 <TEST_CmdIf_Check+0x4c>
      HAL_Delay(500);
 800318e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003192:	f008 fb79 	bl	800b888 <HAL_Delay>
      (*UartCmdFct_Table[*(uint8_t*)aRxBuffer])(Test_Context_Ptr, (uint8_t *)(aRxBuffer+1), 0/*not used for now*/);
 8003196:	783d      	ldrb	r5, [r7, #0]
 8003198:	4b18      	ldr	r3, [pc, #96]	; (80031fc <TEST_CmdIf_Check+0xc4>)
 800319a:	4620      	mov	r0, r4
 800319c:	2200      	movs	r2, #0
 800319e:	4918      	ldr	r1, [pc, #96]	; (8003200 <TEST_CmdIf_Check+0xc8>)
 80031a0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
}
 80031a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      (*UartCmdFct_Table[*(uint8_t*)aRxBuffer])(Test_Context_Ptr, (uint8_t *)(aRxBuffer+1), 0/*not used for now*/);
 80031a8:	4718      	bx	r3
      *(aTxBuffer) = CMD_NACK_EVT;
 80031aa:	4c13      	ldr	r4, [pc, #76]	; (80031f8 <TEST_CmdIf_Check+0xc0>)
 80031ac:	2601      	movs	r6, #1
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80031ae:	2202      	movs	r2, #2
 80031b0:	2180      	movs	r1, #128	; 0x80
 80031b2:	4620      	mov	r0, r4
      *(aTxBuffer) = CMD_NACK_EVT;
 80031b4:	7026      	strb	r6, [r4, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80031b6:	f001 ff69 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80031ba:	4632      	mov	r2, r6
 80031bc:	4621      	mov	r1, r4
 80031be:	4628      	mov	r0, r5
 80031c0:	f00f ffe0 	bl	8013184 <HAL_UART_Transmit_DMA>
 80031c4:	b978      	cbnz	r0, 80031e6 <TEST_CmdIf_Check+0xae>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80031c6:	4628      	mov	r0, r5
 80031c8:	f010 fa0c 	bl	80135e4 <HAL_UART_GetState>
 80031cc:	2820      	cmp	r0, #32
 80031ce:	d1fa      	bne.n	80031c6 <TEST_CmdIf_Check+0x8e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80031d0:	220a      	movs	r2, #10
 80031d2:	4908      	ldr	r1, [pc, #32]	; (80031f4 <TEST_CmdIf_Check+0xbc>)
 80031d4:	4628      	mov	r0, r5
 80031d6:	f010 f827 	bl	8013228 <HAL_UART_Receive_DMA>
 80031da:	2800      	cmp	r0, #0
 80031dc:	d0b6      	beq.n	800314c <TEST_CmdIf_Check+0x14>
}
 80031de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Error_Handler();
 80031e2:	f001 bfc3 	b.w	800516c <Error_Handler>
      Error_Handler();
 80031e6:	f001 ffc1 	bl	800516c <Error_Handler>
 80031ea:	e7ec      	b.n	80031c6 <TEST_CmdIf_Check+0x8e>
 80031ec:	f001 ffbe 	bl	800516c <Error_Handler>
 80031f0:	e7c8      	b.n	8003184 <TEST_CmdIf_Check+0x4c>
 80031f2:	bf00      	nop
 80031f4:	30000300 	.word	0x30000300
 80031f8:	30000280 	.word	0x30000280
 80031fc:	08029448 	.word	0x08029448
 8003200:	30000301 	.word	0x30000301

08003204 <TEST_MainMenu>:
 *        - Camera Capture
 *
 * @param Test_Context_Ptr pointer to test context
 */
void TEST_MainMenu(TestContext_TypeDef *Test_Context_Ptr)
{
 8003204:	b570      	push	{r4, r5, r6, lr}
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;

  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);

  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8003206:	f04f 35ff 	mov.w	r5, #4294967295
{
 800320a:	b082      	sub	sp, #8
 800320c:	4604      	mov	r4, r0
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 800320e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8003212:	f8d4 6600 	ldr.w	r6, [r4, #1536]	; 0x600
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8003216:	f018 fa3b 	bl	801b690 <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 800321a:	2332      	movs	r3, #50	; 0x32
 800321c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003220:	210a      	movs	r1, #10
 8003222:	20c8      	movs	r0, #200	; 0xc8
 8003224:	9500      	str	r5, [sp, #0]
 8003226:	f018 fc05 	bl	801ba34 <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Operating mode", CENTER_MODE);
 800322a:	f018 fa29 	bl	801b680 <UTIL_LCD_GetFont>
 800322e:	2301      	movs	r3, #1
 8003230:	88c1      	ldrh	r1, [r0, #6]
 8003232:	2000      	movs	r0, #0
 8003234:	4a6f      	ldr	r2, [pc, #444]	; (80033f4 <TEST_MainMenu+0x1f0>)
 8003236:	f018 fb1b 	bl	801b870 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Press one of the key of the joystick", CENTER_MODE);
 800323a:	f018 fa21 	bl	801b680 <UTIL_LCD_GetFont>
 800323e:	88c1      	ldrh	r1, [r0, #6]
 8003240:	2301      	movs	r3, #1
 8003242:	4a6d      	ldr	r2, [pc, #436]	; (80033f8 <TEST_MainMenu+0x1f4>)
 8003244:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003248:	2000      	movs	r0, #0
 800324a:	f018 fb11 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"to select an operating mode", CENTER_MODE);
 800324e:	f018 fa17 	bl	801b680 <UTIL_LCD_GetFont>
 8003252:	88c1      	ldrh	r1, [r0, #6]
 8003254:	2301      	movs	r3, #1
 8003256:	4a69      	ldr	r2, [pc, #420]	; (80033fc <TEST_MainMenu+0x1f8>)
 8003258:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800325c:	2000      	movs	r0, #0
 800325e:	4099      	lsls	r1, r3
 8003260:	f018 fb06 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    uint16_t y;
  };
  const struct point_t pt_center = {.x = 400, .y = 350}; /* x,y coordinates */
  const uint16_t pt_offset = 50;                         /* pixels offset from the center (wideness of the square) */

  UTIL_LCD_DrawLine(pt_center.x - pt_offset, pt_center.y, pt_center.x, pt_center.y - pt_offset, UTIL_LCD_COLOR_WHITE);
 8003264:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003268:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800326c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003270:	4608      	mov	r0, r1
 8003272:	9500      	str	r5, [sp, #0]
 8003274:	f018 fb50 	bl	801b918 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y - pt_offset, pt_center.x + pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 8003278:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800327c:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8003280:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003284:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003288:	9500      	str	r5, [sp, #0]
 800328a:	f018 fb45 	bl	801b918 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x + pt_offset, pt_center.y, pt_center.x, pt_center.y + pt_offset, UTIL_LCD_COLOR_WHITE);
 800328e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003292:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003296:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 800329a:	461a      	mov	r2, r3
 800329c:	9500      	str	r5, [sp, #0]
 800329e:	f018 fb3b 	bl	801b918 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y + pt_offset, pt_center.x - pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 80032a2:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80032a6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80032aa:	9500      	str	r5, [sp, #0]
 80032ac:	461a      	mov	r2, r3
 80032ae:	4608      	mov	r0, r1
 80032b0:	f018 fb32 	bl	801b918 <UTIL_LCD_DrawLine>

  const char *appli_names[] = {"Nominal Run", "Frame Capture", "OnBoard Validation",
                                   "Memory Dump"};

  UTIL_LCD_DisplayStringAt(0, pt_center.y - pt_offset - LINE(2), (uint8_t*)appli_names[0], CENTER_MODE);//UP
 80032b4:	f018 f9e4 	bl	801b680 <UTIL_LCD_GetFont>
 80032b8:	2301      	movs	r3, #1
 80032ba:	88c1      	ldrh	r1, [r0, #6]
 80032bc:	2000      	movs	r0, #0
 80032be:	4a50      	ldr	r2, [pc, #320]	; (8003400 <TEST_MainMenu+0x1fc>)
 80032c0:	4099      	lsls	r1, r3
 80032c2:	f5c1 7196 	rsb	r1, r1, #300	; 0x12c
 80032c6:	f018 fad3 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(pt_center.x + pt_offset + 10, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[1], LEFT_MODE);//RIGHT
 80032ca:	f018 f9d9 	bl	801b680 <UTIL_LCD_GetFont>
 80032ce:	88c1      	ldrh	r1, [r0, #6]
 80032d0:	2303      	movs	r3, #3
 80032d2:	4a4c      	ldr	r2, [pc, #304]	; (8003404 <TEST_MainMenu+0x200>)
 80032d4:	1049      	asrs	r1, r1, #1
 80032d6:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 80032da:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 80032de:	f018 fac7 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, pt_center.y + pt_offset + LINE(1), (uint8_t*)appli_names[2], CENTER_MODE);//DOWN
 80032e2:	f018 f9cd 	bl	801b680 <UTIL_LCD_GetFont>
 80032e6:	88c1      	ldrh	r1, [r0, #6]
 80032e8:	2301      	movs	r3, #1
 80032ea:	4a47      	ldr	r2, [pc, #284]	; (8003408 <TEST_MainMenu+0x204>)
 80032ec:	f501 71c8 	add.w	r1, r1, #400	; 0x190
 80032f0:	2000      	movs	r0, #0
 80032f2:	f018 fabd 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(150, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[3], LEFT_MODE);//LEFT
 80032f6:	f018 f9c3 	bl	801b680 <UTIL_LCD_GetFont>
 80032fa:	88c1      	ldrh	r1, [r0, #6]
 80032fc:	2303      	movs	r3, #3
 80032fe:	4a43      	ldr	r2, [pc, #268]	; (800340c <TEST_MainMenu+0x208>)
 8003300:	1049      	asrs	r1, r1, #1
 8003302:	2096      	movs	r0, #150	; 0x96
 8003304:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 8003308:	f018 fab2 	bl	801b870 <UTIL_LCD_DisplayStringAt>

  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800330c:	6b30      	ldr	r0, [r6, #48]	; 0x30
 800330e:	f7fe fb1f 	bl	8001950 <DISPLAY_Refresh>

  if(Test_Context_Ptr->UartContext.uart_cmd_ongoing)
 8003312:	f8d4 3520 	ldr.w	r3, [r4, #1312]	; 0x520
 8003316:	b143      	cbz	r3, 800332a <TEST_MainMenu+0x126>
  {
    switch (Test_Context_Ptr->UartContext.uart_host_requested_mode)
 8003318:	f894 3524 	ldrb.w	r3, [r4, #1316]	; 0x524
 800331c:	442b      	add	r3, r5
 800331e:	2b03      	cmp	r3, #3
 8003320:	d827      	bhi.n	8003372 <TEST_MainMenu+0x16e>
 8003322:	e8df f003 	tbb	[pc, r3]
 8003326:	2f21      	.short	0x2f21
 8003328:	2839      	.short	0x2839
  else
  {
    JOYPin_TypeDef joy_state = JOY_NONE;
    while (joy_state == JOY_NONE)
    {
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 800332a:	2100      	movs	r1, #0
 800332c:	4608      	mov	r0, r1
 800332e:	f006 fb3b 	bl	80099a8 <BSP_JOY_GetState>
    while (joy_state == JOY_NONE)
 8003332:	f010 03ff 	ands.w	r3, r0, #255	; 0xff
 8003336:	d0f8      	beq.n	800332a <TEST_MainMenu+0x126>
    }

    switch (joy_state)
 8003338:	3b02      	subs	r3, #2
 800333a:	2b0e      	cmp	r3, #14
 800333c:	d80e      	bhi.n	800335c <TEST_MainMenu+0x158>
 800333e:	e8df f003 	tbb	[pc, r3]
 8003342:	0d43      	.short	0x0d43
 8003344:	0d0d0d37 	.word	0x0d0d0d37
 8003348:	0d0d0d08 	.word	0x0d0d0d08
 800334c:	0d0d0d0d 	.word	0x0d0d0d0d
 8003350:	51          	.byte	0x51
 8003351:	00          	.byte	0x00
    {
    case JOY_RIGHT:
      FrameCaptureInit(Test_Context_Ptr);
 8003352:	4620      	mov	r0, r4
 8003354:	f7ff fa7e 	bl	8002854 <FrameCaptureInit>
      App_Cxt_Ptr->Operating_Mode=CAPTURE;
 8003358:	2304      	movs	r3, #4
 800335a:	7033      	strb	r3, [r6, #0]
    default:
      break;
    };

    //Tempo joystick
    HAL_Delay(200);
 800335c:	20c8      	movs	r0, #200	; 0xc8
  }
}
 800335e:	b002      	add	sp, #8
 8003360:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_Delay(200);
 8003364:	f008 ba90 	b.w	800b888 <HAL_Delay>
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 8003368:	2201      	movs	r2, #1
      Test_Context_Ptr->UartContext.uart_cmd_ongoing=0;//returning to NOMINAL mode terminates the UART command processing
 800336a:	2300      	movs	r3, #0
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 800336c:	7032      	strb	r2, [r6, #0]
      Test_Context_Ptr->UartContext.uart_cmd_ongoing=0;//returning to NOMINAL mode terminates the UART command processing
 800336e:	f8c4 3520 	str.w	r3, [r4, #1312]	; 0x520
}
 8003372:	b002      	add	sp, #8
 8003374:	bd70      	pop	{r4, r5, r6, pc}
      FrameCaptureInit(Test_Context_Ptr);
 8003376:	4620      	mov	r0, r4
 8003378:	f7ff fa6c 	bl	8002854 <FrameCaptureInit>
      App_Cxt_Ptr->Operating_Mode=CAPTURE;
 800337c:	2304      	movs	r3, #4
 800337e:	7033      	strb	r3, [r6, #0]
}
 8003380:	b002      	add	sp, #8
 8003382:	bd70      	pop	{r4, r5, r6, pc}
      OnBoardValidInit(Test_Context_Ptr);
 8003384:	4620      	mov	r0, r4
 8003386:	f7ff fbbf 	bl	8002b08 <OnBoardValidInit>
      App_Cxt_Ptr->Operating_Mode=VALID;
 800338a:	2102      	movs	r1, #2
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 800338c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800338e:	2201      	movs	r2, #1
      App_Cxt_Ptr->Operating_Mode=VALID;
 8003390:	7031      	strb	r1, [r6, #0]
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 8003392:	751a      	strb	r2, [r3, #20]
}
 8003394:	b002      	add	sp, #8
 8003396:	bd70      	pop	{r4, r5, r6, pc}
      MemoryDumpInit(Test_Context_Ptr);
 8003398:	4620      	mov	r0, r4
 800339a:	f7ff f84d 	bl	8002438 <MemoryDumpInit>
      App_Cxt_Ptr->Operating_Mode=DUMP;
 800339e:	2303      	movs	r3, #3
 80033a0:	7033      	strb	r3, [r6, #0]
      if(Test_Context_Ptr->DumpContext.Dump_FrameSource == SDCARD_FILE)
 80033a2:	7923      	ldrb	r3, [r4, #4]
 80033a4:	2b03      	cmp	r3, #3
 80033a6:	d1e4      	bne.n	8003372 <TEST_MainMenu+0x16e>
        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 80033a8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80033aa:	2201      	movs	r2, #1
 80033ac:	751a      	strb	r2, [r3, #20]
 80033ae:	e7e0      	b.n	8003372 <TEST_MainMenu+0x16e>
      MemoryDumpInit(Test_Context_Ptr);
 80033b0:	4620      	mov	r0, r4
 80033b2:	f7ff f841 	bl	8002438 <MemoryDumpInit>
      App_Cxt_Ptr->Operating_Mode=DUMP;
 80033b6:	2303      	movs	r3, #3
 80033b8:	7033      	strb	r3, [r6, #0]
      if(Test_Context_Ptr->DumpContext.Dump_FrameSource == SDCARD_FILE)
 80033ba:	7923      	ldrb	r3, [r4, #4]
 80033bc:	2b03      	cmp	r3, #3
 80033be:	d1cd      	bne.n	800335c <TEST_MainMenu+0x158>
        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 80033c0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80033c2:	2201      	movs	r2, #1
 80033c4:	751a      	strb	r2, [r3, #20]
 80033c6:	e7c9      	b.n	800335c <TEST_MainMenu+0x158>
      OnBoardValidInit(Test_Context_Ptr);
 80033c8:	4620      	mov	r0, r4
 80033ca:	f7ff fb9d 	bl	8002b08 <OnBoardValidInit>
      App_Cxt_Ptr->Operating_Mode=VALID;
 80033ce:	2102      	movs	r1, #2
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 80033d0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80033d2:	2201      	movs	r2, #1
    HAL_Delay(200);
 80033d4:	20c8      	movs	r0, #200	; 0xc8
      App_Cxt_Ptr->Operating_Mode=VALID;
 80033d6:	7031      	strb	r1, [r6, #0]
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 80033d8:	751a      	strb	r2, [r3, #20]
}
 80033da:	b002      	add	sp, #8
 80033dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_Delay(200);
 80033e0:	f008 ba52 	b.w	800b888 <HAL_Delay>
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 80033e4:	2301      	movs	r3, #1
    HAL_Delay(200);
 80033e6:	20c8      	movs	r0, #200	; 0xc8
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 80033e8:	7033      	strb	r3, [r6, #0]
}
 80033ea:	b002      	add	sp, #8
 80033ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_Delay(200);
 80033f0:	f008 ba4a 	b.w	800b888 <HAL_Delay>
 80033f4:	08029124 	.word	0x08029124
 80033f8:	08028de8 	.word	0x08028de8
 80033fc:	08029134 	.word	0x08029134
 8003400:	08029150 	.word	0x08029150
 8003404:	0802915c 	.word	0x0802915c
 8003408:	0802916c 	.word	0x0802916c
 800340c:	08029180 	.word	0x08029180

08003410 <TEST_GetNextDumpInput>:
 *
 * @param TestContext_Ptr pointer to test context
 * @param DestBuffPtr pointer to the destination buffer where the input file data content is copied to
 */
void TEST_GetNextDumpInput(TestContext_TypeDef *TestContext_Ptr, uint8_t * DestBuffPtr)
{
 8003410:	b5f0      	push	{r4, r5, r6, r7, lr}
  image_t tmp_img;
  image_t dum_img;
#if CAMERA_CAPTURE_RES == VGA_640_480_RES
  char  class_path[64]=  "/dump_src_image_vga";
#elif CAMERA_CAPTURE_RES == QVGA_320_240_RES
  char class_path[64]=  "/dump_src_image_qvga";
 8003412:	4c2d      	ldr	r4, [pc, #180]	; (80034c8 <TEST_GetNextDumpInput+0xb8>)
{
 8003414:	b0a7      	sub	sp, #156	; 0x9c
 8003416:	4605      	mov	r5, r0
 8003418:	460e      	mov	r6, r1
  char class_path[64]=  "/dump_src_image_qvga";
 800341a:	6820      	ldr	r0, [r4, #0]
 800341c:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 8003420:	6861      	ldr	r1, [r4, #4]
 8003422:	68a2      	ldr	r2, [r4, #8]
 8003424:	68e3      	ldr	r3, [r4, #12]
 8003426:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800342a:	6920      	ldr	r0, [r4, #16]
 800342c:	2100      	movs	r1, #0
 800342e:	7d23      	ldrb	r3, [r4, #20]
 8003430:	222b      	movs	r2, #43	; 0x2b
 8003432:	f8cc 0000 	str.w	r0, [ip]
 8003436:	f10d 006d 	add.w	r0, sp, #109	; 0x6d
 800343a:	f88c 3004 	strb.w	r3, [ip, #4]
 800343e:	f023 f8a0 	bl	8026582 <memset>
#endif
  FRESULT res;
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;

  res = f_opendir(&class_dir, class_path);
 8003442:	a916      	add	r1, sp, #88	; 0x58
 8003444:	a809      	add	r0, sp, #36	; 0x24
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8003446:	f8d5 4600 	ldr.w	r4, [r5, #1536]	; 0x600
  res = f_opendir(&class_dir, class_path);
 800344a:	f015 f971 	bl	8018730 <f_opendir>
  if (res != FR_OK)
 800344e:	b100      	cbz	r0, 8003452 <TEST_GetNextDumpInput+0x42>
  {
    while (1);
 8003450:	e7fe      	b.n	8003450 <TEST_GetNextDumpInput+0x40>
  }

  /* Find next image file in current class directory */
  res = f_readdir(&class_dir, &img_fno);
 8003452:	4d1e      	ldr	r5, [pc, #120]	; (80034cc <TEST_GetNextDumpInput+0xbc>)
 8003454:	a809      	add	r0, sp, #36	; 0x24
 8003456:	4629      	mov	r1, r5
 8003458:	f015 fa00 	bl	801885c <f_readdir>
  if ((res != FR_OK) || (img_fno.fname[0] == 0) || (img_fno.fattrib & AM_DIR))
 800345c:	7dab      	ldrb	r3, [r5, #22]
 800345e:	b903      	cbnz	r3, 8003462 <TEST_GetNextDumpInput+0x52>
  {
    while (1); /* error: end of dir or not a file */
 8003460:	e7fe      	b.n	8003460 <TEST_GetNextDumpInput+0x50>
  if ((res != FR_OK) || (img_fno.fname[0] == 0) || (img_fno.fattrib & AM_DIR))
 8003462:	7a2b      	ldrb	r3, [r5, #8]
 8003464:	f003 0310 	and.w	r3, r3, #16
 8003468:	4318      	orrs	r0, r3
 800346a:	b2c0      	uxtb	r0, r0
 800346c:	2800      	cmp	r0, #0
 800346e:	d1f7      	bne.n	8003460 <TEST_GetNextDumpInput+0x50>
  }

  strcpy(tmp_msg, class_path);
 8003470:	4f17      	ldr	r7, [pc, #92]	; (80034d0 <TEST_GetNextDumpInput+0xc0>)
 8003472:	a916      	add	r1, sp, #88	; 0x58
 8003474:	4638      	mov	r0, r7
 8003476:	f023 f88c 	bl	8026592 <stpcpy>
  strcat(tmp_msg, "/");
 800347a:	232f      	movs	r3, #47	; 0x2f
  strcat(tmp_msg, img_fno.fname);
 800347c:	f105 0116 	add.w	r1, r5, #22
 8003480:	3001      	adds	r0, #1
  strcat(tmp_msg, "/");
 8003482:	f800 3c01 	strb.w	r3, [r0, #-1]
  strcat(tmp_msg, img_fno.fname);
 8003486:	f023 f90e 	bl	80266a6 <strcpy>

  /* Read the image to DestBuffPtr */
  if (STM32Ipl_ReadImage(&tmp_img, tmp_msg) != stm32ipl_err_Ok)
 800348a:	4639      	mov	r1, r7
 800348c:	a801      	add	r0, sp, #4
 800348e:	f016 fb75 	bl	8019b7c <STM32Ipl_ReadImage>
 8003492:	b100      	cbz	r0, 8003496 <TEST_GetNextDumpInput+0x86>
  {
    while(1);
 8003494:	e7fe      	b.n	8003494 <TEST_GetNextDumpInput+0x84>
  }
  dum_img.data = DestBuffPtr;
  dum_img.w = tmp_img.w;
 8003496:	9b02      	ldr	r3, [sp, #8]
  dum_img.h = tmp_img.h;
  dum_img.bpp = tmp_img.bpp;
  if (STM32Ipl_CopyData(&tmp_img, &dum_img) != stm32ipl_err_Ok)
 8003498:	a905      	add	r1, sp, #20
 800349a:	a801      	add	r0, sp, #4
  dum_img.data = DestBuffPtr;
 800349c:	9608      	str	r6, [sp, #32]
  dum_img.w = tmp_img.w;
 800349e:	9306      	str	r3, [sp, #24]
 80034a0:	9b03      	ldr	r3, [sp, #12]
 80034a2:	9307      	str	r3, [sp, #28]
 80034a4:	9b01      	ldr	r3, [sp, #4]
 80034a6:	9305      	str	r3, [sp, #20]
  if (STM32Ipl_CopyData(&tmp_img, &dum_img) != stm32ipl_err_Ok)
 80034a8:	f016 f876 	bl	8019598 <STM32Ipl_CopyData>
 80034ac:	b100      	cbz	r0, 80034b0 <TEST_GetNextDumpInput+0xa0>
  {
    while (1); // Invalid dim or format
 80034ae:	e7fe      	b.n	80034ae <TEST_GetNextDumpInput+0x9e>
  }
  STM32Ipl_ReleaseData(&tmp_img);
 80034b0:	a801      	add	r0, sp, #4
 80034b2:	f016 f811 	bl	80194d8 <STM32Ipl_ReleaseData>

  f_closedir(&class_dir);
 80034b6:	a809      	add	r0, sp, #36	; 0x24
 80034b8:	f015 f99c 	bl	80187f4 <f_closedir>

  App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 1;
 80034bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80034be:	2201      	movs	r2, #1
 80034c0:	751a      	strb	r2, [r3, #20]
}
 80034c2:	b027      	add	sp, #156	; 0x9c
 80034c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034c6:	bf00      	nop
 80034c8:	08028ef0 	.word	0x08028ef0
 80034cc:	20008bfc 	.word	0x20008bfc
 80034d0:	20008d14 	.word	0x20008d14
 80034d4:	00000000 	.word	0x00000000

080034d8 <TEST_GetNextValidationInput>:
 *
 * @param TestContext_Ptr pointer to test context
 * @param DestBuffPtr pointer to the destination buffer where the input file data content is copied to
 */
void TEST_GetNextValidationInput(TestContext_TypeDef *TestContext_Ptr, uint8_t * DestBuffPtr)
{
 80034d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif
#endif /* OBJECTDETECT */

  /* Get next image in this directory (i.e class) */
  dir = &TestContext_Ptr->ValidationContext.class_dir;
  fno = &TestContext_Ptr->ValidationContext.img_fno;
 80034dc:	f500 7929 	add.w	r9, r0, #676	; 0x2a4
  dir = &TestContext_Ptr->ValidationContext.class_dir;
 80034e0:	f500 781c 	add.w	r8, r0, #624	; 0x270
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 80034e4:	f8d0 3600 	ldr.w	r3, [r0, #1536]	; 0x600
{
 80034e8:	4683      	mov	fp, r0
  fno = &TestContext_Ptr->ValidationContext.img_fno;
 80034ea:	4e78      	ldr	r6, [pc, #480]	; (80036cc <TEST_GetNextValidationInput+0x1f4>)
  res = f_readdir(dir, fno); /* Read a directory item */
 80034ec:	4640      	mov	r0, r8
{
 80034ee:	ed2d 8b10 	vpush	{d8-d15}
 80034f2:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
  fno = &TestContext_Ptr->ValidationContext.img_fno;
 80034f6:	f8c6 9000 	str.w	r9, [r6]
{
 80034fa:	9109      	str	r1, [sp, #36]	; 0x24
  res = f_readdir(dir, fno); /* Read a directory item */
 80034fc:	4649      	mov	r1, r9
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 80034fe:	9308      	str	r3, [sp, #32]
  res = f_readdir(dir, fno); /* Read a directory item */
 8003500:	f015 f9ac 	bl	801885c <f_readdir>
  if ((res == FR_OK) && (fno->fname[0] != 0) && !(fno->fattrib & AM_DIR)) /* If file */
 8003504:	b920      	cbnz	r0, 8003510 <TEST_GetNextValidationInput+0x38>
 8003506:	6833      	ldr	r3, [r6, #0]
 8003508:	7d9a      	ldrb	r2, [r3, #22]
 800350a:	2a00      	cmp	r2, #0
 800350c:	f040 8238 	bne.w	8003980 <TEST_GetNextValidationInput+0x4a8>

      TestContext_Ptr->ValidationContext.validation_completed =1;
#else   
  FIND_NEXT_DIR:
    /* Get into next directory in "/onboard_valid_dataset" directory */
    dir = &TestContext_Ptr->ValidationContext.dataset_dir;
 8003510:	f50b 7392 	add.w	r3, fp, #292	; 0x124
    f_closedir(&TestContext_Ptr->ValidationContext.class_dir);
 8003514:	4640      	mov	r0, r8
    fno = &TestContext_Ptr->ValidationContext.fno;
 8003516:	f50b 7aac 	add.w	sl, fp, #344	; 0x158
 800351a:	4d6d      	ldr	r5, [pc, #436]	; (80036d0 <TEST_GetNextValidationInput+0x1f8>)
    dir = &TestContext_Ptr->ValidationContext.dataset_dir;
 800351c:	ee08 3a10 	vmov	s16, r3
    res = f_readdir(dir, fno);
    if ((res == FR_OK) && (fno->fname[0] != 0) && (fno->fattrib & AM_DIR)) /* If directory */
    {
      /* Find corresponding class index */
      TestContext_Ptr->ValidationContext.class_index = FindClassIndexFromString(TestContext_Ptr->ValidationContext.fno.fname);
 8003520:	f50b 74b7 	add.w	r4, fp, #366	; 0x16e
    f_closedir(&TestContext_Ptr->ValidationContext.class_dir);
 8003524:	f015 f966 	bl	80187f4 <f_closedir>
    res = f_readdir(dir, fno);
 8003528:	4651      	mov	r1, sl
 800352a:	ee18 0a10 	vmov	r0, s16
    fno = &TestContext_Ptr->ValidationContext.fno;
 800352e:	f8c6 a000 	str.w	sl, [r6]
    res = f_readdir(dir, fno);
 8003532:	f015 f993 	bl	801885c <f_readdir>
    if ((res == FR_OK) && (fno->fname[0] != 0) && (fno->fattrib & AM_DIR)) /* If directory */
 8003536:	4607      	mov	r7, r0
 8003538:	2800      	cmp	r0, #0
 800353a:	f040 808a 	bne.w	8003652 <TEST_GetNextValidationInput+0x17a>
 800353e:	6833      	ldr	r3, [r6, #0]
 8003540:	7d9a      	ldrb	r2, [r3, #22]
 8003542:	2a00      	cmp	r2, #0
 8003544:	f000 8085 	beq.w	8003652 <TEST_GetNextValidationInput+0x17a>
 8003548:	7a1b      	ldrb	r3, [r3, #8]
 800354a:	06da      	lsls	r2, r3, #27
 800354c:	f140 8081 	bpl.w	8003652 <TEST_GetNextValidationInput+0x17a>
    if (strcmp(className, NN_OUTPUT_CLASS_LIST[j]) == 0)
 8003550:	6829      	ldr	r1, [r5, #0]
 8003552:	4620      	mov	r0, r4
 8003554:	f7fc fec4 	bl	80002e0 <strcmp>
 8003558:	2800      	cmp	r0, #0
 800355a:	d036      	beq.n	80035ca <TEST_GetNextValidationInput+0xf2>
 800355c:	6869      	ldr	r1, [r5, #4]
 800355e:	4620      	mov	r0, r4
 8003560:	f7fc febe 	bl	80002e0 <strcmp>
 8003564:	b380      	cbz	r0, 80035c8 <TEST_GetNextValidationInput+0xf0>
 8003566:	68a9      	ldr	r1, [r5, #8]
 8003568:	4620      	mov	r0, r4
 800356a:	f7fc feb9 	bl	80002e0 <strcmp>
 800356e:	2800      	cmp	r0, #0
 8003570:	f000 8227 	beq.w	80039c2 <TEST_GetNextValidationInput+0x4ea>
 8003574:	68e9      	ldr	r1, [r5, #12]
 8003576:	4620      	mov	r0, r4
 8003578:	f7fc feb2 	bl	80002e0 <strcmp>
 800357c:	2800      	cmp	r0, #0
 800357e:	f000 8222 	beq.w	80039c6 <TEST_GetNextValidationInput+0x4ee>
 8003582:	6929      	ldr	r1, [r5, #16]
 8003584:	4620      	mov	r0, r4
 8003586:	f7fc feab 	bl	80002e0 <strcmp>
 800358a:	2800      	cmp	r0, #0
 800358c:	f000 821d 	beq.w	80039ca <TEST_GetNextValidationInput+0x4f2>
      TestContext_Ptr->ValidationContext.class_index = FindClassIndexFromString(TestContext_Ptr->ValidationContext.fno.fname);
 8003590:	f04f 33ff 	mov.w	r3, #4294967295

      if(TestContext_Ptr->ValidationContext.class_index == -1)
      { /* Class index was not found */
        sprintf(tmp_msg, "Error, class %s doesn't exists", TestContext_Ptr->ValidationContext.fno.fname);
 8003594:	4622      	mov	r2, r4
 8003596:	494f      	ldr	r1, [pc, #316]	; (80036d4 <TEST_GetNextValidationInput+0x1fc>)
      TestContext_Ptr->ValidationContext.class_index = FindClassIndexFromString(TestContext_Ptr->ValidationContext.fno.fname);
 8003598:	f8cb 33bc 	str.w	r3, [fp, #956]	; 0x3bc
        sprintf(tmp_msg, "Error, class %s doesn't exists", TestContext_Ptr->ValidationContext.fno.fname);
 800359c:	484e      	ldr	r0, [pc, #312]	; (80036d8 <TEST_GetNextValidationInput+0x200>)
 800359e:	f022 ff73 	bl	8026488 <siprintf>
        UTIL_LCD_DisplayStringAt(0, LINE(3), (uint8_t *)tmp_msg, CENTER_MODE);
 80035a2:	f018 f86d 	bl	801b680 <UTIL_LCD_GetFont>
 80035a6:	4601      	mov	r1, r0
 80035a8:	2301      	movs	r3, #1
 80035aa:	4a4b      	ldr	r2, [pc, #300]	; (80036d8 <TEST_GetNextValidationInput+0x200>)
 80035ac:	88c9      	ldrh	r1, [r1, #6]
 80035ae:	4638      	mov	r0, r7
 80035b0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80035b4:	f018 f95c 	bl	801b870 <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80035b8:	9b08      	ldr	r3, [sp, #32]
 80035ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80035bc:	f7fe f9c8 	bl	8001950 <DISPLAY_Refresh>
        BSP_LED_On(LED_RED);
 80035c0:	2002      	movs	r0, #2
 80035c2:	f006 f895 	bl	80096f0 <BSP_LED_On>
        while (1)
 80035c6:	e7fe      	b.n	80035c6 <TEST_GetNextValidationInput+0xee>
  for (size_t j = 0; j < AI_NET_OUTPUT_SIZE; j++)
 80035c8:	2001      	movs	r0, #1
          ;
      }

      strcpy(TestContext_Ptr->ValidationContext.tmp_class_path, ""); //chaine "nulle"
 80035ca:	f50b 6780 	add.w	r7, fp, #1024	; 0x400
      strcpy(TestContext_Ptr->ValidationContext.tmp_class_path, TestContext_Ptr->ValidationContext.class_path );
 80035ce:	f50b 7170 	add.w	r1, fp, #960	; 0x3c0
      TestContext_Ptr->ValidationContext.class_index = FindClassIndexFromString(TestContext_Ptr->ValidationContext.fno.fname);
 80035d2:	f8cb 03bc 	str.w	r0, [fp, #956]	; 0x3bc
      strcpy(TestContext_Ptr->ValidationContext.tmp_class_path, TestContext_Ptr->ValidationContext.class_path );
 80035d6:	4638      	mov	r0, r7
 80035d8:	f022 ffdb 	bl	8026592 <stpcpy>
      strcat(TestContext_Ptr->ValidationContext.tmp_class_path, "/");
 80035dc:	f04f 032f 	mov.w	r3, #47	; 0x2f
      strcat(TestContext_Ptr->ValidationContext.tmp_class_path, TestContext_Ptr->ValidationContext.fno.fname);
 80035e0:	4621      	mov	r1, r4
 80035e2:	3001      	adds	r0, #1
      strcat(TestContext_Ptr->ValidationContext.tmp_class_path, "/");
 80035e4:	f800 3c01 	strb.w	r3, [r0, #-1]
      strcat(TestContext_Ptr->ValidationContext.tmp_class_path, TestContext_Ptr->ValidationContext.fno.fname);
 80035e8:	f023 f85d 	bl	80266a6 <strcpy>

      dir = &TestContext_Ptr->ValidationContext.class_dir;
      path = TestContext_Ptr->ValidationContext.tmp_class_path;
      res = f_opendir(dir, path);
 80035ec:	4639      	mov	r1, r7
 80035ee:	4640      	mov	r0, r8
 80035f0:	f015 f89e 	bl	8018730 <f_opendir>
      if (res != FR_OK)
 80035f4:	2800      	cmp	r0, #0
 80035f6:	f040 849a 	bne.w	8003f2e <TEST_GetNextValidationInput+0xa56>
      }

      /*Get first file immediately*/
      dir = &TestContext_Ptr->ValidationContext.class_dir;
      fno = &TestContext_Ptr->ValidationContext.img_fno;
      res = f_readdir(dir, fno);
 80035fa:	4649      	mov	r1, r9
 80035fc:	4640      	mov	r0, r8
      fno = &TestContext_Ptr->ValidationContext.img_fno;
 80035fe:	f8c6 9000 	str.w	r9, [r6]
      res = f_readdir(dir, fno);
 8003602:	f015 f92b 	bl	801885c <f_readdir>
      if ((res == FR_OK) && (fno->fname[0] != 0) && !(fno->fattrib & AM_DIR)) /* If file */
 8003606:	2800      	cmp	r0, #0
 8003608:	d18e      	bne.n	8003528 <TEST_GetNextValidationInput+0x50>
 800360a:	6833      	ldr	r3, [r6, #0]
 800360c:	7d9a      	ldrb	r2, [r3, #22]
 800360e:	2a00      	cmp	r2, #0
 8003610:	d08a      	beq.n	8003528 <TEST_GetNextValidationInput+0x50>
 8003612:	7a1b      	ldrb	r3, [r3, #8]
 8003614:	06db      	lsls	r3, r3, #27
 8003616:	d487      	bmi.n	8003528 <TEST_GetNextValidationInput+0x50>
      {
        BSP_LED_Toggle(LED_BLUE);
        UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);

        strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 8003618:	4c2f      	ldr	r4, [pc, #188]	; (80036d8 <TEST_GetNextValidationInput+0x200>)
        BSP_LED_Toggle(LED_BLUE);
 800361a:	2003      	movs	r0, #3
 800361c:	f006 f88c 	bl	8009738 <BSP_LED_Toggle>
        UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8003620:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003624:	f018 f834 	bl	801b690 <UTIL_LCD_Clear>
        strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 8003628:	4639      	mov	r1, r7
 800362a:	4620      	mov	r0, r4
 800362c:	f022 ffb1 	bl	8026592 <stpcpy>
        strcat(tmp_msg, "/");
 8003630:	f04f 032f 	mov.w	r3, #47	; 0x2f
        strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 8003634:	f20b 21ba 	addw	r1, fp, #698	; 0x2ba
 8003638:	3001      	adds	r0, #1
        strcat(tmp_msg, "/");
 800363a:	f800 3c01 	strb.w	r3, [r0, #-1]
        strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 800363e:	f023 f832 	bl	80266a6 <strcpy>

        /* Read the image to DestBuffPtr */
        if (STM32Ipl_ReadImage(&tmp_img, tmp_msg) != stm32ipl_err_Ok)
 8003642:	4621      	mov	r1, r4
 8003644:	a822      	add	r0, sp, #136	; 0x88
 8003646:	f016 fa99 	bl	8019b7c <STM32Ipl_ReadImage>
 800364a:	2800      	cmp	r0, #0
 800364c:	f000 847e 	beq.w	8003f4c <TEST_GetNextValidationInput+0xa74>
        {
          while(1);
 8003650:	e7fe      	b.n	8003650 <TEST_GetNextValidationInput+0x178>
    }
    else
    {
      /* Program has Looped through all class dirs*/
      /*=>Close the onboard_valid_dataset directory*/
      f_closedir(&TestContext_Ptr->ValidationContext.dataset_dir);
 8003652:	ee18 0a10 	vmov	r0, s16

      /******Moved here from the postprocess() to avoid going thru the main appli while(1) loop again after the validation is completed******/
      /* End of validation */

      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
      BSP_LCD_FillRect(0, 50, 130, 224, 224, UTIL_LCD_COLOR_WHITE);
 8003656:	f04f 34ff 	mov.w	r4, #4294967295
      f_closedir(&TestContext_Ptr->ValidationContext.dataset_dir);
 800365a:	f015 f8cb 	bl	80187f4 <f_closedir>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 800365e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003662:	f017 fff5 	bl	801b650 <UTIL_LCD_SetTextColor>
      BSP_LCD_FillRect(0, 50, 130, 224, 224, UTIL_LCD_COLOR_WHITE);
 8003666:	23e0      	movs	r3, #224	; 0xe0
 8003668:	2282      	movs	r2, #130	; 0x82
 800366a:	2132      	movs	r1, #50	; 0x32
 800366c:	2000      	movs	r0, #0
 800366e:	e9cd 3400 	strd	r3, r4, [sp]
 8003672:	f007 fc31 	bl	800aed8 <BSP_LCD_FillRect>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8003676:	4620      	mov	r0, r4
 8003678:	f017 ffea 	bl	801b650 <UTIL_LCD_SetTextColor>
      UTIL_LCD_DisplayStringAt(40, LINE(10), (uint8_t*)"End of validation.", LEFT_MODE);
 800367c:	f018 f800 	bl	801b680 <UTIL_LCD_GetFont>
 8003680:	88c1      	ldrh	r1, [r0, #6]
 8003682:	2303      	movs	r3, #3
 8003684:	4a15      	ldr	r2, [pc, #84]	; (80036dc <TEST_GetNextValidationInput+0x204>)
 8003686:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800368a:	2028      	movs	r0, #40	; 0x28
 800368c:	0049      	lsls	r1, r1, #1
 800368e:	f018 f8ef 	bl	801b870 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(40, LINE(11), (uint8_t*)"Press wake-up", LEFT_MODE);
 8003692:	f017 fff5 	bl	801b680 <UTIL_LCD_GetFont>
 8003696:	88c1      	ldrh	r1, [r0, #6]
 8003698:	2303      	movs	r3, #3
 800369a:	4a11      	ldr	r2, [pc, #68]	; (80036e0 <TEST_GetNextValidationInput+0x208>)
 800369c:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 80036a0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80036a4:	2028      	movs	r0, #40	; 0x28
 80036a6:	f018 f8e3 	bl	801b870 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(40, LINE(12), (uint8_t*)"button to see report", LEFT_MODE);
 80036aa:	f017 ffe9 	bl	801b680 <UTIL_LCD_GetFont>
 80036ae:	88c1      	ldrh	r1, [r0, #6]
 80036b0:	2303      	movs	r3, #3
 80036b2:	4a0c      	ldr	r2, [pc, #48]	; (80036e4 <TEST_GetNextValidationInput+0x20c>)
 80036b4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80036b8:	2028      	movs	r0, #40	; 0x28
 80036ba:	0089      	lsls	r1, r1, #2
 80036bc:	f018 f8d8 	bl	801b870 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80036c0:	9b08      	ldr	r3, [sp, #32]
 80036c2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80036c4:	f7fe f944 	bl	8001950 <DISPLAY_Refresh>

      /* Wait for button input */
      while((TestContext_Ptr->UartContext.uart_cmd_ongoing==0) && (BSP_PB_GetState(BUTTON_WAKEUP) == RESET))
 80036c8:	e015      	b.n	80036f6 <TEST_GetNextValidationInput+0x21e>
 80036ca:	bf00      	nop
 80036cc:	200089c8 	.word	0x200089c8
 80036d0:	20000004 	.word	0x20000004
 80036d4:	080290e8 	.word	0x080290e8
 80036d8:	20008d14 	.word	0x20008d14
 80036dc:	0802918c 	.word	0x0802918c
 80036e0:	080291a0 	.word	0x080291a0
 80036e4:	080291b0 	.word	0x080291b0
 80036e8:	00000000 	.word	0x00000000
 80036ec:	f006 f884 	bl	80097f8 <BSP_PB_GetState>
 80036f0:	2800      	cmp	r0, #0
 80036f2:	f040 816c 	bne.w	80039ce <TEST_GetNextValidationInput+0x4f6>
 80036f6:	f8db 0520 	ldr.w	r0, [fp, #1312]	; 0x520
 80036fa:	2800      	cmp	r0, #0
 80036fc:	d0f6      	beq.n	80036ec <TEST_GetNextValidationInput+0x214>
        ;

      if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
        HAL_Delay(1000);
 80036fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003702:	f008 f8c1 	bl	800b888 <HAL_Delay>

      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8003706:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800370a:	f017 ffc1 	bl	801b690 <UTIL_LCD_Clear>
      support += conf_matrix[target][pred];
 800370e:	f8db 244c 	ldr.w	r2, [fp, #1100]	; 0x44c
 8003712:	f8db 4448 	ldr.w	r4, [fp, #1096]	; 0x448
        false_positives += conf_matrix[gtruth][target];
 8003716:	f8db c45c 	ldr.w	ip, [fp, #1116]	; 0x45c
 800371a:	f8db 9470 	ldr.w	r9, [fp, #1136]	; 0x470
      support += conf_matrix[target][pred];
 800371e:	18a0      	adds	r0, r4, r2
        false_positives += conf_matrix[gtruth][target];
 8003720:	f8db 3484 	ldr.w	r3, [fp, #1156]	; 0x484
      support += conf_matrix[target][pred];
 8003724:	f8db 6450 	ldr.w	r6, [fp, #1104]	; 0x450
        false_positives += conf_matrix[gtruth][target];
 8003728:	eb09 010c 	add.w	r1, r9, ip
      support += conf_matrix[target][pred];
 800372c:	f8db e454 	ldr.w	lr, [fp, #1108]	; 0x454
        false_positives += conf_matrix[gtruth][target];
 8003730:	4419      	add	r1, r3
 8003732:	f8db 5498 	ldr.w	r5, [fp, #1176]	; 0x498
      support += conf_matrix[target][pred];
 8003736:	4430      	add	r0, r6
 8003738:	f8db a458 	ldr.w	sl, [fp, #1112]	; 0x458
        false_positives += conf_matrix[gtruth][target];
 800373c:	4429      	add	r1, r5
 800373e:	930c      	str	r3, [sp, #48]	; 0x30
      support += conf_matrix[target][pred];
 8003740:	4470      	add	r0, lr
        false_negatives += conf_matrix[target][pred];
 8003742:	1993      	adds	r3, r2, r6
    if ((true_positives + false_positives) != 0)
 8003744:	1909      	adds	r1, r1, r4
        false_positives += conf_matrix[gtruth][target];
 8003746:	950b      	str	r5, [sp, #44]	; 0x2c
        false_negatives += conf_matrix[target][pred];
 8003748:	4473      	add	r3, lr
      support += conf_matrix[target][pred];
 800374a:	4450      	add	r0, sl
        false_negatives += conf_matrix[target][pred];
 800374c:	4453      	add	r3, sl
      support += conf_matrix[target][pred];
 800374e:	9008      	str	r0, [sp, #32]
    if ((true_positives + false_positives) != 0)
 8003750:	f040 8143 	bne.w	80039da <TEST_GetNextValidationInput+0x502>
    if ((true_positives + false_negatives) != 0)
 8003754:	18e3      	adds	r3, r4, r3
 8003756:	f000 83de 	beq.w	8003f16 <TEST_GetNextValidationInput+0xa3e>
      precision = true_positives / (float)(true_positives + false_positives);
 800375a:	ee07 4a90 	vmov	s15, r4
    float precision = 0.0f;
 800375e:	ed5f 1a1e 	vldr	s3, [pc, #-120]	; 80036e8 <TEST_GetNextValidationInput+0x210>
      precision = true_positives / (float)(true_positives + false_positives);
 8003762:	eeb8 7a67 	vcvt.f32.u32	s14, s15
      recall = true_positives / (float)(true_positives + false_negatives);
 8003766:	ee07 3a90 	vmov	s15, r3
    if ((recall + precision) != 0.0f)
 800376a:	eef0 8a61 	vmov.f32	s17, s3
      recall = true_positives / (float)(true_positives + false_negatives);
 800376e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003772:	ee87 8a27 	vdiv.f32	s16, s14, s15
    if ((recall + precision) != 0.0f)
 8003776:	ee71 1a88 	vadd.f32	s3, s3, s16
 800377a:	eef5 1a40 	vcmp.f32	s3, #0.0
 800377e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003782:	d005      	beq.n	8003790 <TEST_GetNextValidationInput+0x2b8>
      f1_score = 2 * (recall * precision) / (recall + precision);
 8003784:	ee68 7a28 	vmul.f32	s15, s16, s17
 8003788:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800378c:	eec7 1aa1 	vdiv.f32	s3, s15, s3
      support += conf_matrix[target][pred];
 8003790:	f8db 5464 	ldr.w	r5, [fp, #1124]	; 0x464
 8003794:	f8db 0460 	ldr.w	r0, [fp, #1120]	; 0x460
 8003798:	f8db 8468 	ldr.w	r8, [fp, #1128]	; 0x468
 800379c:	1941      	adds	r1, r0, r5
        false_positives += conf_matrix[gtruth][target];
 800379e:	f8db 3488 	ldr.w	r3, [fp, #1160]	; 0x488
 80037a2:	f8db 7474 	ldr.w	r7, [fp, #1140]	; 0x474
      support += conf_matrix[target][pred];
 80037a6:	4461      	add	r1, ip
        false_positives += conf_matrix[gtruth][target];
 80037a8:	930e      	str	r3, [sp, #56]	; 0x38
 80037aa:	443b      	add	r3, r7
    report.precisions[target] = precision;
 80037ac:	edcd 8a3e 	vstr	s17, [sp, #248]	; 0xf8
      support += conf_matrix[target][pred];
 80037b0:	4441      	add	r1, r8
    report.recalls[target] = recall;
 80037b2:	ed8d 8a43 	vstr	s16, [sp, #268]	; 0x10c
    report.f1_scores[target] = f1_score;
 80037b6:	edcd 1a48 	vstr	s3, [sp, #288]	; 0x120
      support += conf_matrix[target][pred];
 80037ba:	9109      	str	r1, [sp, #36]	; 0x24
        false_positives += conf_matrix[gtruth][target];
 80037bc:	f8db 149c 	ldr.w	r1, [fp, #1180]	; 0x49c
 80037c0:	440b      	add	r3, r1
 80037c2:	910d      	str	r1, [sp, #52]	; 0x34
    report.supports[target] = support;
 80037c4:	9908      	ldr	r1, [sp, #32]
        false_positives += conf_matrix[gtruth][target];
 80037c6:	4413      	add	r3, r2
        false_negatives += conf_matrix[target][pred];
 80037c8:	eb08 0205 	add.w	r2, r8, r5
    report.supports[target] = support;
 80037cc:	914d      	str	r1, [sp, #308]	; 0x134
        false_negatives += conf_matrix[target][pred];
 80037ce:	4462      	add	r2, ip
      support += conf_matrix[target][pred];
 80037d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80037d2:	f8db c46c 	ldr.w	ip, [fp, #1132]	; 0x46c
    if ((true_positives + false_positives) != 0)
 80037d6:	181b      	adds	r3, r3, r0
      support += conf_matrix[target][pred];
 80037d8:	4461      	add	r1, ip
        false_negatives += conf_matrix[target][pred];
 80037da:	4462      	add	r2, ip
      support += conf_matrix[target][pred];
 80037dc:	9109      	str	r1, [sp, #36]	; 0x24
    if ((true_positives + false_positives) != 0)
 80037de:	f040 810e 	bne.w	80039fe <TEST_GetNextValidationInput+0x526>
    if ((true_positives + false_negatives) != 0)
 80037e2:	1812      	adds	r2, r2, r0
 80037e4:	f000 8390 	beq.w	8003f08 <TEST_GetNextValidationInput+0xa30>
      precision = true_positives / (float)(true_positives + false_positives);
 80037e8:	ee07 0a90 	vmov	s15, r0
 80037ec:	eef8 5a67 	vcvt.f32.u32	s11, s15
    float precision = 0.0f;
 80037f0:	ed5f 7a43 	vldr	s15, [pc, #-268]	; 80036e8 <TEST_GetNextValidationInput+0x210>
      recall = true_positives / (float)(true_positives + false_negatives);
 80037f4:	ee07 2a10 	vmov	s14, r2
    if ((recall + precision) != 0.0f)
 80037f8:	eeb0 6a67 	vmov.f32	s12, s15
      recall = true_positives / (float)(true_positives + false_negatives);
 80037fc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003800:	eec5 6a87 	vdiv.f32	s13, s11, s14
    if ((recall + precision) != 0.0f)
 8003804:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003808:	eef5 7a40 	vcmp.f32	s15, #0.0
 800380c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003810:	d005      	beq.n	800381e <TEST_GetNextValidationInput+0x346>
      f1_score = 2 * (recall * precision) / (recall + precision);
 8003812:	ee26 7a86 	vmul.f32	s14, s13, s12
 8003816:	ee37 7a07 	vadd.f32	s14, s14, s14
 800381a:	eec7 7a27 	vdiv.f32	s15, s14, s15
    report.supports[target] = support;
 800381e:	9b09      	ldr	r3, [sp, #36]	; 0x24
      support += conf_matrix[target][pred];
 8003820:	444f      	add	r7, r9
        false_positives += conf_matrix[gtruth][target];
 8003822:	f8db 148c 	ldr.w	r1, [fp, #1164]	; 0x48c
 8003826:	f8db 94a0 	ldr.w	r9, [fp, #1184]	; 0x4a0
    report.supports[target] = support;
 800382a:	934e      	str	r3, [sp, #312]	; 0x138
        false_positives += conf_matrix[gtruth][target];
 800382c:	186b      	adds	r3, r5, r1
      support += conf_matrix[target][pred];
 800382e:	f8db 247c 	ldr.w	r2, [fp, #1148]	; 0x47c
        false_positives += conf_matrix[gtruth][target];
 8003832:	444b      	add	r3, r9
      support += conf_matrix[target][pred];
 8003834:	f8db 5478 	ldr.w	r5, [fp, #1144]	; 0x478
    report.precisions[target] = precision;
 8003838:	ed8d 6a3f 	vstr	s12, [sp, #252]	; 0xfc
        false_positives += conf_matrix[gtruth][target];
 800383c:	4433      	add	r3, r6
      support += conf_matrix[target][pred];
 800383e:	18ae      	adds	r6, r5, r2
 8003840:	4428      	add	r0, r5
    report.recalls[target] = recall;
 8003842:	edcd 6a44 	vstr	s13, [sp, #272]	; 0x110
        false_positives += conf_matrix[gtruth][target];
 8003846:	930f      	str	r3, [sp, #60]	; 0x3c
      support += conf_matrix[target][pred];
 8003848:	f8db 3480 	ldr.w	r3, [fp, #1152]	; 0x480
    report.f1_scores[target] = f1_score;
 800384c:	edcd 7a49 	vstr	s15, [sp, #292]	; 0x124
      support += conf_matrix[target][pred];
 8003850:	441e      	add	r6, r3
 8003852:	443e      	add	r6, r7
 8003854:	960a      	str	r6, [sp, #40]	; 0x28
        false_negatives += conf_matrix[target][pred];
 8003856:	189e      	adds	r6, r3, r2
 8003858:	443e      	add	r6, r7
    if ((true_positives + false_positives) != 0)
 800385a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800385c:	197f      	adds	r7, r7, r5
 800385e:	f040 80e0 	bne.w	8003a22 <TEST_GetNextValidationInput+0x54a>
    if ((true_positives + false_negatives) != 0)
 8003862:	1976      	adds	r6, r6, r5
 8003864:	f000 8349 	beq.w	8003efa <TEST_GetNextValidationInput+0xa22>
      precision = true_positives / (float)(true_positives + false_positives);
 8003868:	ee07 5a10 	vmov	s14, r5
    float precision = 0.0f;
 800386c:	ed1f 1a62 	vldr	s2, [pc, #-392]	; 80036e8 <TEST_GetNextValidationInput+0x210>
      precision = true_positives / (float)(true_positives + false_positives);
 8003870:	eef8 5a47 	vcvt.f32.u32	s11, s14
      recall = true_positives / (float)(true_positives + false_negatives);
 8003874:	ee07 6a10 	vmov	s14, r6
    if ((recall + precision) != 0.0f)
 8003878:	eeb0 9a41 	vmov.f32	s18, s2
      recall = true_positives / (float)(true_positives + false_negatives);
 800387c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003880:	eec5 0a87 	vdiv.f32	s1, s11, s14
    if ((recall + precision) != 0.0f)
 8003884:	ee31 1a20 	vadd.f32	s2, s2, s1
 8003888:	eeb5 1a40 	vcmp.f32	s2, #0.0
 800388c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003890:	d005      	beq.n	800389e <TEST_GetNextValidationInput+0x3c6>
      f1_score = 2 * (recall * precision) / (recall + precision);
 8003892:	ee20 7a89 	vmul.f32	s14, s1, s18
 8003896:	ee37 7a07 	vadd.f32	s14, s14, s14
 800389a:	ee87 1a01 	vdiv.f32	s2, s14, s2
      support += conf_matrix[target][pred];
 800389e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
        false_positives += conf_matrix[gtruth][target];
 80038a0:	4442      	add	r2, r8
 80038a2:	f8db 64a4 	ldr.w	r6, [fp, #1188]	; 0x4a4
    diagonal_sum += true_positives;
 80038a6:	4420      	add	r0, r4
      support += conf_matrix[target][pred];
 80038a8:	440d      	add	r5, r1
 80038aa:	990c      	ldr	r1, [sp, #48]	; 0x30
        false_positives += conf_matrix[gtruth][target];
 80038ac:	4432      	add	r2, r6
    report.precisions[target] = precision;
 80038ae:	ed8d 9a40 	vstr	s18, [sp, #256]	; 0x100
      support += conf_matrix[target][pred];
 80038b2:	440d      	add	r5, r1
    report.supports[target] = support;
 80038b4:	990a      	ldr	r1, [sp, #40]	; 0x28
        false_positives += conf_matrix[gtruth][target];
 80038b6:	eb02 040e 	add.w	r4, r2, lr
      support += conf_matrix[target][pred];
 80038ba:	f8db e494 	ldr.w	lr, [fp, #1172]	; 0x494
    report.supports[target] = support;
 80038be:	914f      	str	r1, [sp, #316]	; 0x13c
      support += conf_matrix[target][pred];
 80038c0:	f8db 1490 	ldr.w	r1, [fp, #1168]	; 0x490
        false_negatives += conf_matrix[target][pred];
 80038c4:	eb0e 0705 	add.w	r7, lr, r5
    report.recalls[target] = recall;
 80038c8:	edcd 0a45 	vstr	s1, [sp, #276]	; 0x114
      support += conf_matrix[target][pred];
 80038cc:	eb01 020e 	add.w	r2, r1, lr
    if ((true_positives + false_positives) != 0)
 80038d0:	1864      	adds	r4, r4, r1
    report.f1_scores[target] = f1_score;
 80038d2:	ed8d 1a4a 	vstr	s2, [sp, #296]	; 0x128
      support += conf_matrix[target][pred];
 80038d6:	442a      	add	r2, r5
    if ((true_positives + false_positives) != 0)
 80038d8:	f040 80b5 	bne.w	8003a46 <TEST_GetNextValidationInput+0x56e>
    if ((true_positives + false_negatives) != 0)
 80038dc:	187f      	adds	r7, r7, r1
 80038de:	f000 8305 	beq.w	8003eec <TEST_GetNextValidationInput+0xa14>
      precision = true_positives / (float)(true_positives + false_positives);
 80038e2:	ee07 1a10 	vmov	s14, r1
    float precision = 0.0f;
 80038e6:	ed5f 3a80 	vldr	s7, [pc, #-512]	; 80036e8 <TEST_GetNextValidationInput+0x210>
      precision = true_positives / (float)(true_positives + false_positives);
 80038ea:	eef8 5a47 	vcvt.f32.u32	s11, s14
      recall = true_positives / (float)(true_positives + false_negatives);
 80038ee:	ee07 7a10 	vmov	s14, r7
    if ((recall + precision) != 0.0f)
 80038f2:	eef0 2a63 	vmov.f32	s5, s7
      recall = true_positives / (float)(true_positives + false_negatives);
 80038f6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80038fa:	ee85 3a87 	vdiv.f32	s6, s11, s14
    if ((recall + precision) != 0.0f)
 80038fe:	ee73 3a83 	vadd.f32	s7, s7, s6
 8003902:	eef5 3a40 	vcmp.f32	s7, #0.0
 8003906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800390a:	d005      	beq.n	8003918 <TEST_GetNextValidationInput+0x440>
      f1_score = 2 * (recall * precision) / (recall + precision);
 800390c:	ee23 7a22 	vmul.f32	s14, s6, s5
 8003910:	ee37 7a07 	vadd.f32	s14, s14, s14
 8003914:	eec7 3a23 	vdiv.f32	s7, s14, s7
      support += conf_matrix[target][pred];
 8003918:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    diagonal_sum += true_positives;
 800391a:	4401      	add	r1, r0
      support += conf_matrix[target][pred];
 800391c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    report.precisions[target] = precision;
 800391e:	edcd 2a41 	vstr	s5, [sp, #260]	; 0x104
      support += conf_matrix[target][pred];
 8003922:	442c      	add	r4, r5
        false_positives += conf_matrix[gtruth][target];
 8003924:	eb0c 0503 	add.w	r5, ip, r3
    report.recalls[target] = recall;
 8003928:	ed8d 3a46 	vstr	s6, [sp, #280]	; 0x118
      support += conf_matrix[target][pred];
 800392c:	eb04 0309 	add.w	r3, r4, r9
 8003930:	f8db 44a8 	ldr.w	r4, [fp, #1192]	; 0x4a8
        false_positives += conf_matrix[gtruth][target];
 8003934:	eb05 000e 	add.w	r0, r5, lr
 8003938:	9d08      	ldr	r5, [sp, #32]
      support += conf_matrix[target][pred];
 800393a:	4433      	add	r3, r6
    report.f1_scores[target] = f1_score;
 800393c:	edcd 3a4b 	vstr	s7, [sp, #300]	; 0x12c
        false_positives += conf_matrix[gtruth][target];
 8003940:	4450      	add	r0, sl
    report.supports[target] = support;
 8003942:	9250      	str	r2, [sp, #320]	; 0x140
      support += conf_matrix[target][pred];
 8003944:	4423      	add	r3, r4
    if ((true_positives + false_positives) != 0)
 8003946:	1900      	adds	r0, r0, r4
 8003948:	eb03 0705 	add.w	r7, r3, r5
 800394c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800394e:	442f      	add	r7, r5
 8003950:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003952:	442f      	add	r7, r5
 8003954:	f000 808e 	beq.w	8003a74 <TEST_GetNextValidationInput+0x59c>
      precision = true_positives / (float)(true_positives + false_positives);
 8003958:	ee05 4a90 	vmov	s11, r4
 800395c:	ee07 0a10 	vmov	s14, r0
 8003960:	eeb8 2a65 	vcvt.f32.u32	s4, s11
 8003964:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003968:	eec2 5a07 	vdiv.f32	s11, s4, s14
    if ((true_positives + false_negatives) != 0)
 800396c:	2b00      	cmp	r3, #0
 800396e:	f040 808a 	bne.w	8003a86 <TEST_GetNextValidationInput+0x5ae>
    float recall = 0.0f;
 8003972:	ed5f 4aa3 	vldr	s9, [pc, #-652]	; 80036e8 <TEST_GetNextValidationInput+0x210>
      precision = true_positives / (float)(true_positives + false_positives);
 8003976:	eeb0 4a65 	vmov.f32	s8, s11
 800397a:	eeb0 5a64 	vmov.f32	s10, s9
 800397e:	e08c      	b.n	8003a9a <TEST_GetNextValidationInput+0x5c2>
  if ((res == FR_OK) && (fno->fname[0] != 0) && !(fno->fattrib & AM_DIR)) /* If file */
 8003980:	7a1b      	ldrb	r3, [r3, #8]
 8003982:	06d9      	lsls	r1, r3, #27
 8003984:	f53f adc4 	bmi.w	8003510 <TEST_GetNextValidationInput+0x38>
    strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 8003988:	4c38      	ldr	r4, [pc, #224]	; (8003a6c <TEST_GetNextValidationInput+0x594>)
    BSP_LED_Toggle(LED_BLUE);
 800398a:	2003      	movs	r0, #3
 800398c:	f005 fed4 	bl	8009738 <BSP_LED_Toggle>
    UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8003990:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003994:	f017 fe7c 	bl	801b690 <UTIL_LCD_Clear>
    strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 8003998:	f50b 6180 	add.w	r1, fp, #1024	; 0x400
 800399c:	4620      	mov	r0, r4
 800399e:	f022 fdf8 	bl	8026592 <stpcpy>
    strcat(tmp_msg, "/");
 80039a2:	232f      	movs	r3, #47	; 0x2f
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 80039a4:	f20b 21ba 	addw	r1, fp, #698	; 0x2ba
 80039a8:	3001      	adds	r0, #1
    strcat(tmp_msg, "/");
 80039aa:	f800 3c01 	strb.w	r3, [r0, #-1]
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 80039ae:	f022 fe7a 	bl	80266a6 <strcpy>
    if (STM32Ipl_ReadImage(&tmp_img, tmp_msg) != stm32ipl_err_Ok)
 80039b2:	4621      	mov	r1, r4
 80039b4:	a822      	add	r0, sp, #136	; 0x88
 80039b6:	f016 f8e1 	bl	8019b7c <STM32Ipl_ReadImage>
 80039ba:	2800      	cmp	r0, #0
 80039bc:	f000 82b8 	beq.w	8003f30 <TEST_GetNextValidationInput+0xa58>
      while(1);
 80039c0:	e7fe      	b.n	80039c0 <TEST_GetNextValidationInput+0x4e8>
  for (size_t j = 0; j < AI_NET_OUTPUT_SIZE; j++)
 80039c2:	2002      	movs	r0, #2
 80039c4:	e601      	b.n	80035ca <TEST_GetNextValidationInput+0xf2>
 80039c6:	2003      	movs	r0, #3
 80039c8:	e5ff      	b.n	80035ca <TEST_GetNextValidationInput+0xf2>
 80039ca:	2004      	movs	r0, #4
 80039cc:	e5fd      	b.n	80035ca <TEST_GetNextValidationInput+0xf2>
      if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 80039ce:	f8db 3520 	ldr.w	r3, [fp, #1312]	; 0x520
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f43f ae97 	beq.w	8003706 <TEST_GetNextValidationInput+0x22e>
 80039d8:	e691      	b.n	80036fe <TEST_GetNextValidationInput+0x226>
      precision = true_positives / (float)(true_positives + false_positives);
 80039da:	ee07 1a90 	vmov	s15, r1
 80039de:	ee07 4a10 	vmov	s14, r4
    if ((true_positives + false_negatives) != 0)
 80039e2:	18e3      	adds	r3, r4, r3
      precision = true_positives / (float)(true_positives + false_positives);
 80039e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80039ec:	eec7 1a27 	vdiv.f32	s3, s14, s15
    if ((true_positives + false_negatives) != 0)
 80039f0:	f47f aeb9 	bne.w	8003766 <TEST_GetNextValidationInput+0x28e>
    float recall = 0.0f;
 80039f4:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 8003a70 <TEST_GetNextValidationInput+0x598>
      precision = true_positives / (float)(true_positives + false_positives);
 80039f8:	eef0 8a61 	vmov.f32	s17, s3
 80039fc:	e6bd      	b.n	800377a <TEST_GetNextValidationInput+0x2a2>
 80039fe:	ee07 3a90 	vmov	s15, r3
    if ((true_positives + false_negatives) != 0)
 8003a02:	1812      	adds	r2, r2, r0
      precision = true_positives / (float)(true_positives + false_positives);
 8003a04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a08:	ee07 0a90 	vmov	s15, r0
 8003a0c:	eef8 5a67 	vcvt.f32.u32	s11, s15
 8003a10:	eec5 7a87 	vdiv.f32	s15, s11, s14
    if ((true_positives + false_negatives) != 0)
 8003a14:	f47f aeee 	bne.w	80037f4 <TEST_GetNextValidationInput+0x31c>
    float recall = 0.0f;
 8003a18:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003a70 <TEST_GetNextValidationInput+0x598>
      precision = true_positives / (float)(true_positives + false_positives);
 8003a1c:	eeb0 6a67 	vmov.f32	s12, s15
 8003a20:	e6f2      	b.n	8003808 <TEST_GetNextValidationInput+0x330>
 8003a22:	ee07 7a10 	vmov	s14, r7
 8003a26:	ee05 5a90 	vmov	s11, r5
    if ((true_positives + false_negatives) != 0)
 8003a2a:	1976      	adds	r6, r6, r5
      precision = true_positives / (float)(true_positives + false_positives);
 8003a2c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003a30:	eef8 5a65 	vcvt.f32.u32	s11, s11
 8003a34:	ee85 1a87 	vdiv.f32	s2, s11, s14
    if ((true_positives + false_negatives) != 0)
 8003a38:	f47f af1c 	bne.w	8003874 <TEST_GetNextValidationInput+0x39c>
    float recall = 0.0f;
 8003a3c:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8003a70 <TEST_GetNextValidationInput+0x598>
      precision = true_positives / (float)(true_positives + false_positives);
 8003a40:	eeb0 9a41 	vmov.f32	s18, s2
 8003a44:	e720      	b.n	8003888 <TEST_GetNextValidationInput+0x3b0>
 8003a46:	ee07 4a10 	vmov	s14, r4
 8003a4a:	ee05 1a90 	vmov	s11, r1
    if ((true_positives + false_negatives) != 0)
 8003a4e:	187f      	adds	r7, r7, r1
      precision = true_positives / (float)(true_positives + false_positives);
 8003a50:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003a54:	eef8 5a65 	vcvt.f32.u32	s11, s11
 8003a58:	eec5 3a87 	vdiv.f32	s7, s11, s14
    if ((true_positives + false_negatives) != 0)
 8003a5c:	f47f af47 	bne.w	80038ee <TEST_GetNextValidationInput+0x416>
    float recall = 0.0f;
 8003a60:	ed9f 3a03 	vldr	s6, [pc, #12]	; 8003a70 <TEST_GetNextValidationInput+0x598>
      precision = true_positives / (float)(true_positives + false_positives);
 8003a64:	eef0 2a63 	vmov.f32	s5, s7
 8003a68:	e74b      	b.n	8003902 <TEST_GetNextValidationInput+0x42a>
 8003a6a:	bf00      	nop
 8003a6c:	20008d14 	.word	0x20008d14
 8003a70:	00000000 	.word	0x00000000
    if ((true_positives + false_negatives) != 0)
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 8200 	beq.w	8003e7a <TEST_GetNextValidationInput+0x9a2>
      precision = true_positives / (float)(true_positives + false_positives);
 8003a7a:	ee07 4a10 	vmov	s14, r4
    float precision = 0.0f;
 8003a7e:	ed5f 5a04 	vldr	s11, [pc, #-16]	; 8003a70 <TEST_GetNextValidationInput+0x598>
      precision = true_positives / (float)(true_positives + false_positives);
 8003a82:	eeb8 2a47 	vcvt.f32.u32	s4, s14
      recall = true_positives / (float)(true_positives + false_negatives);
 8003a86:	ee07 3a10 	vmov	s14, r3
    if ((recall + precision) != 0.0f)
 8003a8a:	eeb0 4a65 	vmov.f32	s8, s11
      recall = true_positives / (float)(true_positives + false_negatives);
 8003a8e:	eeb8 5a47 	vcvt.f32.u32	s10, s14
 8003a92:	eec2 4a05 	vdiv.f32	s9, s4, s10
    if ((recall + precision) != 0.0f)
 8003a96:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8003a9a:	eef5 5a40 	vcmp.f32	s11, #0.0
 8003a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa2:	d005      	beq.n	8003ab0 <TEST_GetNextValidationInput+0x5d8>
      f1_score = 2 * (recall * precision) / (recall + precision);
 8003aa4:	ee24 7a24 	vmul.f32	s14, s8, s9
 8003aa8:	ee37 7a07 	vadd.f32	s14, s14, s14
 8003aac:	eec7 5a25 	vdiv.f32	s11, s14, s11
  if (total_support != 0)
 8003ab0:	18bf      	adds	r7, r7, r2
    diagonal_sum += true_positives;
 8003ab2:	440c      	add	r4, r1
    report.supports[target] = support;
 8003ab4:	9351      	str	r3, [sp, #324]	; 0x144
    report.precisions[target] = precision;
 8003ab6:	ed8d 4a42 	vstr	s8, [sp, #264]	; 0x108
    report.recalls[target] = recall;
 8003aba:	edcd 4a47 	vstr	s9, [sp, #284]	; 0x11c
    report.f1_scores[target] = f1_score;
 8003abe:	edcd 5a4c 	vstr	s11, [sp, #304]	; 0x130
  if (total_support != 0)
 8003ac2:	f000 81d3 	beq.w	8003e6c <TEST_GetNextValidationInput+0x994>
    report.accuracy = diagonal_sum / (float)total_support;
 8003ac6:	ee07 4a10 	vmov	s14, r4
 8003aca:	ee02 7a10 	vmov	s4, r7
 8003ace:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003ad2:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 8003ad6:	ee87 fa02 	vdiv.f32	s30, s14, s4
  sprintf(line, "%20s %26.3f %4d", "accuracy", report->accuracy, (unsigned int)report->total_support);
 8003ada:	eeb7 eacf 	vcvt.f64.f32	d14, s30
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003ade:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
    report.macro_avg_precision += (float)report.precisions[target];
 8003ae2:	ee38 ba86 	vadd.f32	s22, s17, s12
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003ae6:	ed9d 0a08 	vldr	s0, [sp, #32]
    report.macro_avg_recall += (float)report.recalls[target];
 8003aea:	ee38 aa26 	vadd.f32	s20, s16, s13
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003aee:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003af2:	ac22      	add	r4, sp, #136	; 0x88
 8003af4:	eef8 aa40 	vcvt.f32.u32	s21, s0
 8003af8:	ed9d 0a0a 	vldr	s0, [sp, #40]	; 0x28
    report.macro_avg_precision += (float)report.precisions[target];
 8003afc:	ee3b ba09 	vadd.f32	s22, s22, s18
  return report;
 8003b00:	a93e      	add	r1, sp, #248	; 0xf8
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003b02:	ee67 9a06 	vmul.f32	s19, s14, s12
  return report;
 8003b06:	4620      	mov	r0, r4
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003b08:	eeb8 0a40 	vcvt.f32.u32	s0, s0
  return report;
 8003b0c:	ed8d fa52 	vstr	s30, [sp, #328]	; 0x148
    report.weighted_avg_recall += (float)report.recalls[target] * report.supports[target];
 8003b10:	ee27 ca26 	vmul.f32	s24, s14, s13
  return report;
 8003b14:	9753      	str	r7, [sp, #332]	; 0x14c
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003b16:	eeea 9aa8 	vfma.f32	s19, s21, s17
 8003b1a:	f8df 83c4 	ldr.w	r8, [pc, #964]	; 8003ee0 <TEST_GetNextValidationInput+0xa08>
    report.macro_avg_recall += (float)report.recalls[target];
 8003b1e:	ee3a aa20 	vadd.f32	s20, s20, s1
  UTIL_LCD_DisplayStringAt(320, LINE(0), (uint8_t *)"precision recall f1-score support", LEFT_MODE);
 8003b22:	4625      	mov	r5, r4
    report.weighted_avg_recall += (float)report.recalls[target] * report.supports[target];
 8003b24:	eeaa ca88 	vfma.f32	s24, s21, s16
  UTIL_LCD_DisplayStringAt(320, LINE(0), (uint8_t *)"precision recall f1-score support", LEFT_MODE);
 8003b28:	46c1      	mov	r9, r8
    report.macro_avg_f1_score += (float)report.f1_scores[target];
 8003b2a:	ee31 8aa7 	vadd.f32	s16, s3, s15
  UTIL_LCD_DisplayStringAt(320, LINE(0), (uint8_t *)"precision recall f1-score support", LEFT_MODE);
 8003b2e:	2602      	movs	r6, #2
    report.macro_avg_precision += (float)report.precisions[target];
 8003b30:	ee3b ba22 	vadd.f32	s22, s22, s5
    sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", NN_OUTPUT_CLASS_LIST[target], report->precisions[target],
 8003b34:	f8df a378 	ldr.w	sl, [pc, #888]	; 8003eb0 <TEST_GetNextValidationInput+0x9d8>
    report.macro_avg_recall += (float)report.recalls[target];
 8003b38:	ee3a aa03 	vadd.f32	s20, s20, s6
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003b3c:	eee0 9a09 	vfma.f32	s19, s0, s18
    report.weighted_avg_f1_score += (float)report.f1_scores[target] * report.supports[target];
 8003b40:	ee27 9a27 	vmul.f32	s18, s14, s15
 8003b44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    report.weighted_avg_recall += (float)report.recalls[target] * report.supports[target];
 8003b48:	eea0 ca20 	vfma.f32	s24, s0, s1
    report.weighted_avg_f1_score += (float)report.f1_scores[target] * report.supports[target];
 8003b4c:	eeaa 9aa1 	vfma.f32	s18, s21, s3
    report.macro_avg_f1_score += (float)report.f1_scores[target];
 8003b50:	eec7 7a02 	vdiv.f32	s15, s14, s4
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003b54:	ee07 2a10 	vmov	s14, r2
  return report;
 8003b58:	2270      	movs	r2, #112	; 0x70
    report.weighted_avg_f1_score += (float)report.f1_scores[target] * report.supports[target];
 8003b5a:	eea0 9a01 	vfma.f32	s18, s0, s2
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003b5e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    report.macro_avg_f1_score += (float)report.f1_scores[target];
 8003b62:	ee38 8a01 	vadd.f32	s16, s16, s2
    report.macro_avg_precision += (float)report.precisions[target];
 8003b66:	ee34 ba0b 	vadd.f32	s22, s8, s22
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003b6a:	eee7 9a22 	vfma.f32	s19, s14, s5
    report.weighted_avg_recall += (float)report.recalls[target] * report.supports[target];
 8003b6e:	eea7 ca03 	vfma.f32	s24, s14, s6
    report.weighted_avg_f1_score += (float)report.f1_scores[target] * report.supports[target];
 8003b72:	eea7 9a23 	vfma.f32	s18, s14, s7
  report.macro_avg_precision /= (float)AI_NET_OUTPUT_SIZE;
 8003b76:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 8003e98 <TEST_GetNextValidationInput+0x9c0>
    report.macro_avg_f1_score += (float)report.f1_scores[target];
 8003b7a:	ee38 8a23 	vadd.f32	s16, s16, s7
    report.macro_avg_recall += (float)report.recalls[target];
 8003b7e:	ee34 aa8a 	vadd.f32	s20, s9, s20
  report.macro_avg_precision /= (float)AI_NET_OUTPUT_SIZE;
 8003b82:	ee2b ba07 	vmul.f32	s22, s22, s14
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003b86:	eee5 9a04 	vfma.f32	s19, s10, s8
    report.weighted_avg_recall += (float)report.recalls[target] * report.supports[target];
 8003b8a:	eea5 ca24 	vfma.f32	s24, s10, s9
    report.weighted_avg_f1_score += (float)report.f1_scores[target] * report.supports[target];
 8003b8e:	eea5 9a85 	vfma.f32	s18, s11, s10
  return report;
 8003b92:	ed8d ba54 	vstr	s22, [sp, #336]	; 0x150
    report.macro_avg_f1_score += (float)report.f1_scores[target];
 8003b96:	ee35 8a88 	vadd.f32	s16, s11, s16
  report.macro_avg_recall /= (float)AI_NET_OUTPUT_SIZE;
 8003b9a:	ee2a aa07 	vmul.f32	s20, s20, s14
  report.macro_avg_f1_score /= (float)AI_NET_OUTPUT_SIZE;
 8003b9e:	ee28 8a07 	vmul.f32	s16, s16, s14
  report.weighted_avg_precision /= (float)report.total_support;
 8003ba2:	ee69 9aa7 	vmul.f32	s19, s19, s15
  return report;
 8003ba6:	ed8d aa55 	vstr	s20, [sp, #340]	; 0x154
  report.weighted_avg_recall /= (float)report.total_support;
 8003baa:	ee2c ca27 	vmul.f32	s24, s24, s15
  report.weighted_avg_f1_score /= (float)report.total_support;
 8003bae:	ee29 9a27 	vmul.f32	s18, s18, s15
  return report;
 8003bb2:	ed8d 8a56 	vstr	s16, [sp, #344]	; 0x158
 8003bb6:	edcd 9a57 	vstr	s19, [sp, #348]	; 0x15c
 8003bba:	ed8d ca58 	vstr	s24, [sp, #352]	; 0x160
 8003bbe:	ed8d 9a59 	vstr	s18, [sp, #356]	; 0x164
 8003bc2:	f022 fd78 	bl	80266b6 <memcpy>
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8003bc6:	f8db 3600 	ldr.w	r3, [fp, #1536]	; 0x600
 8003bca:	9308      	str	r3, [sp, #32]
  UTIL_LCD_DisplayStringAt(320, LINE(0), (uint8_t *)"precision recall f1-score support", LEFT_MODE);
 8003bcc:	f017 fd58 	bl	801b680 <UTIL_LCD_GetFont>
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	4ab2      	ldr	r2, [pc, #712]	; (8003e9c <TEST_GetNextValidationInput+0x9c4>)
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8003bda:	f017 fe49 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", NN_OUTPUT_CLASS_LIST[target], report->precisions[target],
 8003bde:	ecb5 5a01 	vldmia	r5!, {s10}
 8003be2:	4651      	mov	r1, sl
 8003be4:	a83e      	add	r0, sp, #248	; 0xf8
 8003be6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8003bea:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8003bee:	ed95 7a04 	vldr	s14, [r5, #16]
 8003bf2:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8003bf6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003bfa:	ed8d 5b00 	vstr	d5, [sp]
 8003bfe:	ed8d 6b04 	vstr	d6, [sp, #16]
 8003c02:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003c06:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003c08:	9306      	str	r3, [sp, #24]
 8003c0a:	f859 2b04 	ldr.w	r2, [r9], #4
 8003c0e:	f022 fc3b 	bl	8026488 <siprintf>
    UTIL_LCD_DisplayStringAt(40, LINE(2 + target), (uint8_t *)line, LEFT_MODE);
 8003c12:	f017 fd35 	bl	801b680 <UTIL_LCD_GetFont>
 8003c16:	88c1      	ldrh	r1, [r0, #6]
 8003c18:	2303      	movs	r3, #3
 8003c1a:	aa3e      	add	r2, sp, #248	; 0xf8
 8003c1c:	fb06 f101 	mul.w	r1, r6, r1
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 8003c20:	3601      	adds	r6, #1
    UTIL_LCD_DisplayStringAt(40, LINE(2 + target), (uint8_t *)line, LEFT_MODE);
 8003c22:	2028      	movs	r0, #40	; 0x28
 8003c24:	f017 fe24 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 8003c28:	2e07      	cmp	r6, #7
 8003c2a:	d1d8      	bne.n	8003bde <TEST_GetNextValidationInput+0x706>
  sprintf(line, "%20s %26.3f %4d", "accuracy", report->accuracy, (unsigned int)report->total_support);
 8003c2c:	4a9c      	ldr	r2, [pc, #624]	; (8003ea0 <TEST_GetNextValidationInput+0x9c8>)
 8003c2e:	a83e      	add	r0, sp, #248	; 0xf8
 8003c30:	499c      	ldr	r1, [pc, #624]	; (8003ea4 <TEST_GetNextValidationInput+0x9cc>)
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "macro avg", report->macro_avg_precision, report->macro_avg_recall,
 8003c32:	eeb7 bacb 	vcvt.f64.f32	d11, s22
  sprintf(line, "%20s %26.3f %4d", "accuracy", report->accuracy, (unsigned int)report->total_support);
 8003c36:	9702      	str	r7, [sp, #8]
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "macro avg", report->macro_avg_precision, report->macro_avg_recall,
 8003c38:	eeb7 aaca 	vcvt.f64.f32	d10, s20
 8003c3c:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8003c40:	4e99      	ldr	r6, [pc, #612]	; (8003ea8 <TEST_GetNextValidationInput+0x9d0>)
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "weighted avg", report->weighted_avg_precision,
 8003c42:	eeb7 dae9 	vcvt.f64.f32	d13, s19
    sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", NN_OUTPUT_CLASS_LIST[target], report->precisions[target],
 8003c46:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8003ecc <TEST_GetNextValidationInput+0x9f4>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "weighted avg", report->weighted_avg_precision,
 8003c4a:	eeb7 cacc 	vcvt.f64.f32	d12, s24
  f_printf(&File, "                       precision recall f1-score support\n");
 8003c4e:	f1a6 0514 	sub.w	r5, r6, #20
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "weighted avg", report->weighted_avg_precision,
 8003c52:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
  sprintf(line, "%20s %26.3f %4d", "accuracy", report->accuracy, (unsigned int)report->total_support);
 8003c56:	ed8d eb00 	vstr	d14, [sp]
 8003c5a:	f022 fc15 	bl	8026488 <siprintf>
  UTIL_LCD_DisplayStringAt(40, LINE(3 + AI_NET_OUTPUT_SIZE), (uint8_t *)line, LEFT_MODE);
 8003c5e:	f017 fd0f 	bl	801b680 <UTIL_LCD_GetFont>
 8003c62:	88c1      	ldrh	r1, [r0, #6]
 8003c64:	2303      	movs	r3, #3
 8003c66:	aa3e      	add	r2, sp, #248	; 0xf8
 8003c68:	00c9      	lsls	r1, r1, #3
 8003c6a:	2028      	movs	r0, #40	; 0x28
 8003c6c:	f017 fe00 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "macro avg", report->macro_avg_precision, report->macro_avg_recall,
 8003c70:	4a8e      	ldr	r2, [pc, #568]	; (8003eac <TEST_GetNextValidationInput+0x9d4>)
 8003c72:	498f      	ldr	r1, [pc, #572]	; (8003eb0 <TEST_GetNextValidationInput+0x9d8>)
 8003c74:	a83e      	add	r0, sp, #248	; 0xf8
 8003c76:	9706      	str	r7, [sp, #24]
 8003c78:	ed8d 8b04 	vstr	d8, [sp, #16]
 8003c7c:	ed8d ab02 	vstr	d10, [sp, #8]
 8003c80:	ed8d bb00 	vstr	d11, [sp]
 8003c84:	f022 fc00 	bl	8026488 <siprintf>
  UTIL_LCD_DisplayStringAt(40, LINE(4 + AI_NET_OUTPUT_SIZE), (uint8_t *)line, LEFT_MODE);
 8003c88:	f017 fcfa 	bl	801b680 <UTIL_LCD_GetFont>
 8003c8c:	88c1      	ldrh	r1, [r0, #6]
 8003c8e:	2303      	movs	r3, #3
 8003c90:	aa3e      	add	r2, sp, #248	; 0xf8
 8003c92:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8003c96:	2028      	movs	r0, #40	; 0x28
 8003c98:	f017 fdea 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "weighted avg", report->weighted_avg_precision,
 8003c9c:	4a85      	ldr	r2, [pc, #532]	; (8003eb4 <TEST_GetNextValidationInput+0x9dc>)
 8003c9e:	4984      	ldr	r1, [pc, #528]	; (8003eb0 <TEST_GetNextValidationInput+0x9d8>)
 8003ca0:	a83e      	add	r0, sp, #248	; 0xf8
 8003ca2:	9706      	str	r7, [sp, #24]
 8003ca4:	ed8d 9b04 	vstr	d9, [sp, #16]
 8003ca8:	ed8d cb02 	vstr	d12, [sp, #8]
 8003cac:	ed8d db00 	vstr	d13, [sp]
 8003cb0:	f022 fbea 	bl	8026488 <siprintf>
  UTIL_LCD_DisplayStringAt(40, LINE(5 + AI_NET_OUTPUT_SIZE), (uint8_t *)line, LEFT_MODE);
 8003cb4:	f017 fce4 	bl	801b680 <UTIL_LCD_GetFont>
 8003cb8:	88c1      	ldrh	r1, [r0, #6]
 8003cba:	aa3e      	add	r2, sp, #248	; 0xf8
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003cc2:	2028      	movs	r0, #40	; 0x28
 8003cc4:	0049      	lsls	r1, r1, #1
 8003cc6:	f017 fdd3 	bl	801b870 <UTIL_LCD_DisplayStringAt>
  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003cca:	9b08      	ldr	r3, [sp, #32]
 8003ccc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003cce:	f7fd fe3f 	bl	8001950 <DISPLAY_Refresh>
  f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 8003cd2:	220a      	movs	r2, #10
 8003cd4:	4978      	ldr	r1, [pc, #480]	; (8003eb8 <TEST_GetNextValidationInput+0x9e0>)
 8003cd6:	a83e      	add	r0, sp, #248	; 0xf8
 8003cd8:	f013 fe7c 	bl	80179d4 <f_open>
  f_close(&File);
 8003cdc:	a83e      	add	r0, sp, #248	; 0xf8
 8003cde:	f014 facd 	bl	801827c <f_close>
  f_open(&File, path, FA_OPEN_APPEND | FA_WRITE);
 8003ce2:	4975      	ldr	r1, [pc, #468]	; (8003eb8 <TEST_GetNextValidationInput+0x9e0>)
 8003ce4:	2232      	movs	r2, #50	; 0x32
 8003ce6:	a83e      	add	r0, sp, #248	; 0xf8
 8003ce8:	f013 fe74 	bl	80179d4 <f_open>
  f_printf(&File, "                       precision recall f1-score support\n");
 8003cec:	4973      	ldr	r1, [pc, #460]	; (8003ebc <TEST_GetNextValidationInput+0x9e4>)
 8003cee:	a83e      	add	r0, sp, #248	; 0xf8
 8003cf0:	f015 f828 	bl	8018d44 <f_printf>
    sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", NN_OUTPUT_CLASS_LIST[target], report->precisions[target],
 8003cf4:	ecb4 5a01 	vldmia	r4!, {s10}
 8003cf8:	4649      	mov	r1, r9
 8003cfa:	a812      	add	r0, sp, #72	; 0x48
 8003cfc:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8003d00:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8003d04:	ed94 7a04 	vldr	s14, [r4, #16]
 8003d08:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8003d0c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003d10:	ed8d 5b00 	vstr	d5, [sp]
 8003d14:	ed8d 6b04 	vstr	d6, [sp, #16]
 8003d18:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003d1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d1e:	9306      	str	r3, [sp, #24]
 8003d20:	f855 2b04 	ldr.w	r2, [r5], #4
 8003d24:	f022 fbb0 	bl	8026488 <siprintf>
    f_write(&File, line, strlen(line), (void *)&byteswritten);
 8003d28:	a812      	add	r0, sp, #72	; 0x48
 8003d2a:	f7fc fb39 	bl	80003a0 <strlen>
 8003d2e:	ab11      	add	r3, sp, #68	; 0x44
 8003d30:	4602      	mov	r2, r0
 8003d32:	a912      	add	r1, sp, #72	; 0x48
 8003d34:	a83e      	add	r0, sp, #248	; 0xf8
 8003d36:	f014 f949 	bl	8017fcc <f_write>
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 8003d3a:	42ae      	cmp	r6, r5
 8003d3c:	d1da      	bne.n	8003cf4 <TEST_GetNextValidationInput+0x81c>
  f_printf(&File, "\n");
 8003d3e:	4960      	ldr	r1, [pc, #384]	; (8003ec0 <TEST_GetNextValidationInput+0x9e8>)
 8003d40:	a83e      	add	r0, sp, #248	; 0xf8
 8003d42:	f014 ffff 	bl	8018d44 <f_printf>
  sprintf(line, "%20s %26.3f %4d\n", "accuracy", report->accuracy, (unsigned int)report->total_support);
 8003d46:	4a56      	ldr	r2, [pc, #344]	; (8003ea0 <TEST_GetNextValidationInput+0x9c8>)
 8003d48:	495e      	ldr	r1, [pc, #376]	; (8003ec4 <TEST_GetNextValidationInput+0x9ec>)
 8003d4a:	a812      	add	r0, sp, #72	; 0x48
 8003d4c:	9702      	str	r7, [sp, #8]
 8003d4e:	f50b 658b 	add.w	r5, fp, #1112	; 0x458
    f_printf(&File, "%s,", NN_OUTPUT_CLASS_LIST[row]);
 8003d52:	f8df a190 	ldr.w	sl, [pc, #400]	; 8003ee4 <TEST_GetNextValidationInput+0xa0c>
      f_printf(&File, "%d,", value);
 8003d56:	4e5c      	ldr	r6, [pc, #368]	; (8003ec8 <TEST_GetNextValidationInput+0x9f0>)
    f_printf(&File, "\n");
 8003d58:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8003ec0 <TEST_GetNextValidationInput+0x9e8>
  sprintf(line, "%20s %26.3f %4d\n", "accuracy", report->accuracy, (unsigned int)report->total_support);
 8003d5c:	ed8d eb00 	vstr	d14, [sp]
 8003d60:	f022 fb92 	bl	8026488 <siprintf>
  f_write(&File, line, strlen(line), (void *)&byteswritten);
 8003d64:	a812      	add	r0, sp, #72	; 0x48
 8003d66:	f7fc fb1b 	bl	80003a0 <strlen>
 8003d6a:	ab11      	add	r3, sp, #68	; 0x44
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	a912      	add	r1, sp, #72	; 0x48
 8003d70:	a83e      	add	r0, sp, #248	; 0xf8
 8003d72:	f014 f92b 	bl	8017fcc <f_write>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", "macro avg", report->macro_avg_precision, report->macro_avg_recall,
 8003d76:	4a4d      	ldr	r2, [pc, #308]	; (8003eac <TEST_GetNextValidationInput+0x9d4>)
 8003d78:	4954      	ldr	r1, [pc, #336]	; (8003ecc <TEST_GetNextValidationInput+0x9f4>)
 8003d7a:	a812      	add	r0, sp, #72	; 0x48
 8003d7c:	9706      	str	r7, [sp, #24]
 8003d7e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8003d82:	ed8d ab02 	vstr	d10, [sp, #8]
 8003d86:	ed8d bb00 	vstr	d11, [sp]
 8003d8a:	f022 fb7d 	bl	8026488 <siprintf>
  f_write(&File, line, strlen(line), (void *)&byteswritten);
 8003d8e:	a812      	add	r0, sp, #72	; 0x48
 8003d90:	f7fc fb06 	bl	80003a0 <strlen>
 8003d94:	ab11      	add	r3, sp, #68	; 0x44
 8003d96:	4602      	mov	r2, r0
 8003d98:	a912      	add	r1, sp, #72	; 0x48
 8003d9a:	a83e      	add	r0, sp, #248	; 0xf8
 8003d9c:	f014 f916 	bl	8017fcc <f_write>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", "weighted avg", report->weighted_avg_precision,
 8003da0:	4a44      	ldr	r2, [pc, #272]	; (8003eb4 <TEST_GetNextValidationInput+0x9dc>)
 8003da2:	494a      	ldr	r1, [pc, #296]	; (8003ecc <TEST_GetNextValidationInput+0x9f4>)
 8003da4:	a812      	add	r0, sp, #72	; 0x48
 8003da6:	9706      	str	r7, [sp, #24]
  f_printf(&File, ",Predicted\n");
 8003da8:	2701      	movs	r7, #1
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", "weighted avg", report->weighted_avg_precision,
 8003daa:	ed8d 9b04 	vstr	d9, [sp, #16]
 8003dae:	ed8d cb02 	vstr	d12, [sp, #8]
 8003db2:	ed8d db00 	vstr	d13, [sp]
 8003db6:	f022 fb67 	bl	8026488 <siprintf>
  f_write(&File, line, strlen(line), (void *)&byteswritten);
 8003dba:	a812      	add	r0, sp, #72	; 0x48
 8003dbc:	f7fc faf0 	bl	80003a0 <strlen>
 8003dc0:	ab11      	add	r3, sp, #68	; 0x44
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	a912      	add	r1, sp, #72	; 0x48
 8003dc6:	a83e      	add	r0, sp, #248	; 0xf8
 8003dc8:	f014 f900 	bl	8017fcc <f_write>
  f_close(&File);
 8003dcc:	a83e      	add	r0, sp, #248	; 0xf8
 8003dce:	f014 fa55 	bl	801827c <f_close>

      DisplayClassificationReport(TestContext_Ptr, &report);

      WriteClassificationReport(&report, "classification_report.txt");

      TestContext_Ptr->ValidationContext.final_accuracy=report.accuracy;
 8003dd2:	f20b 4344 	addw	r3, fp, #1092	; 0x444
  f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 8003dd6:	220a      	movs	r2, #10
 8003dd8:	493d      	ldr	r1, [pc, #244]	; (8003ed0 <TEST_GetNextValidationInput+0x9f8>)
      TestContext_Ptr->ValidationContext.final_accuracy=report.accuracy;
 8003dda:	ed83 fa00 	vstr	s30, [r3]
  f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 8003dde:	a83e      	add	r0, sp, #248	; 0xf8
 8003de0:	f013 fdf8 	bl	80179d4 <f_open>
  f_close(&File);
 8003de4:	a83e      	add	r0, sp, #248	; 0xf8
 8003de6:	f014 fa49 	bl	801827c <f_close>
  f_open(&File, path, FA_OPEN_APPEND | FA_WRITE);
 8003dea:	2232      	movs	r2, #50	; 0x32
 8003dec:	4938      	ldr	r1, [pc, #224]	; (8003ed0 <TEST_GetNextValidationInput+0x9f8>)
 8003dee:	a83e      	add	r0, sp, #248	; 0xf8
 8003df0:	f013 fdf0 	bl	80179d4 <f_open>
  f_printf(&File, ",Confusion Matrix\n\n");
 8003df4:	4937      	ldr	r1, [pc, #220]	; (8003ed4 <TEST_GetNextValidationInput+0x9fc>)
 8003df6:	a83e      	add	r0, sp, #248	; 0xf8
 8003df8:	f014 ffa4 	bl	8018d44 <f_printf>
  f_printf(&File, ",Predicted\n");
 8003dfc:	4936      	ldr	r1, [pc, #216]	; (8003ed8 <TEST_GetNextValidationInput+0xa00>)
 8003dfe:	a83e      	add	r0, sp, #248	; 0xf8
 8003e00:	f014 ffa0 	bl	8018d44 <f_printf>
    f_printf(&File, "%s,", NN_OUTPUT_CLASS_LIST[row]);
 8003e04:	f858 2b04 	ldr.w	r2, [r8], #4
 8003e08:	4651      	mov	r1, sl
 8003e0a:	a83e      	add	r0, sp, #248	; 0xf8
 8003e0c:	f1a5 0414 	sub.w	r4, r5, #20
 8003e10:	f014 ff98 	bl	8018d44 <f_printf>
      f_printf(&File, "%d,", value);
 8003e14:	f854 2f04 	ldr.w	r2, [r4, #4]!
 8003e18:	4631      	mov	r1, r6
 8003e1a:	a83e      	add	r0, sp, #248	; 0xf8
 8003e1c:	f014 ff92 	bl	8018d44 <f_printf>
    for (int col = 0; col < NN_OUTPUT_CLASS_NUMBER; col++)
 8003e20:	42ac      	cmp	r4, r5
 8003e22:	d1f7      	bne.n	8003e14 <TEST_GetNextValidationInput+0x93c>
    if (row == NN_OUTPUT_CLASS_NUMBER / 2)
 8003e24:	2f03      	cmp	r7, #3
 8003e26:	d018      	beq.n	8003e5a <TEST_GetNextValidationInput+0x982>
    f_printf(&File, "\n");
 8003e28:	4649      	mov	r1, r9
 8003e2a:	a83e      	add	r0, sp, #248	; 0xf8
 8003e2c:	f014 ff8a 	bl	8018d44 <f_printf>
  for (int row = 0; row < NN_OUTPUT_CLASS_NUMBER; row++)
 8003e30:	2f05      	cmp	r7, #5
 8003e32:	d002      	beq.n	8003e3a <TEST_GetNextValidationInput+0x962>
 8003e34:	3701      	adds	r7, #1
 8003e36:	3514      	adds	r5, #20
 8003e38:	e7e4      	b.n	8003e04 <TEST_GetNextValidationInput+0x92c>
  f_close(&File);
 8003e3a:	a83e      	add	r0, sp, #248	; 0xf8
 8003e3c:	f014 fa1e 	bl	801827c <f_close>

      WriteConfusionMatrix(TestContext_Ptr->ValidationContext.valid_conf_matrix, "confusion_matrix.csv");

      if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8003e40:	f8db 3520 	ldr.w	r3, [fp, #1312]	; 0x520
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d16d      	bne.n	8003f24 <TEST_GetNextValidationInput+0xa4c>
        HAL_Delay(1000);

      TestContext_Ptr->ValidationContext.validation_completed =1;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	f8cb 3440 	str.w	r3, [fp, #1088]	; 0x440
    }
#endif /* OBJECTDETECT */

  }
}
 8003e4e:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
 8003e52:	ecbd 8b10 	vpop	{d8-d15}
 8003e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      f_printf(&File, " Ground truth");
 8003e5a:	a83e      	add	r0, sp, #248	; 0xf8
 8003e5c:	491f      	ldr	r1, [pc, #124]	; (8003edc <TEST_GetNextValidationInput+0xa04>)
 8003e5e:	f014 ff71 	bl	8018d44 <f_printf>
    f_printf(&File, "\n");
 8003e62:	4649      	mov	r1, r9
 8003e64:	a83e      	add	r0, sp, #248	; 0xf8
 8003e66:	f014 ff6d 	bl	8018d44 <f_printf>
  for (int row = 0; row < NN_OUTPUT_CLASS_NUMBER; row++)
 8003e6a:	e7e3      	b.n	8003e34 <TEST_GetNextValidationInput+0x95c>
 8003e6c:	ed9f 2a1e 	vldr	s4, [pc, #120]	; 8003ee8 <TEST_GetNextValidationInput+0xa10>
 8003e70:	ed9f eb07 	vldr	d14, [pc, #28]	; 8003e90 <TEST_GetNextValidationInput+0x9b8>
  report.accuracy = 0.0f;
 8003e74:	eeb0 fa42 	vmov.f32	s30, s4
 8003e78:	e631      	b.n	8003ade <TEST_GetNextValidationInput+0x606>
    float recall = 0.0f;
 8003e7a:	eddf 4a1b 	vldr	s9, [pc, #108]	; 8003ee8 <TEST_GetNextValidationInput+0xa10>
    float precision = 0.0f;
 8003e7e:	eeb0 4a64 	vmov.f32	s8, s9
    float f1_score = 0.0f;
 8003e82:	eef0 5a64 	vmov.f32	s11, s9
 8003e86:	eeb0 5a64 	vmov.f32	s10, s9
 8003e8a:	e611      	b.n	8003ab0 <TEST_GetNextValidationInput+0x5d8>
 8003e8c:	f3af 8000 	nop.w
	...
 8003e98:	3e4ccccd 	.word	0x3e4ccccd
 8003e9c:	080291c8 	.word	0x080291c8
 8003ea0:	08029208 	.word	0x08029208
 8003ea4:	08029214 	.word	0x08029214
 8003ea8:	20000018 	.word	0x20000018
 8003eac:	08029224 	.word	0x08029224
 8003eb0:	080291ec 	.word	0x080291ec
 8003eb4:	08029230 	.word	0x08029230
 8003eb8:	08029240 	.word	0x08029240
 8003ebc:	0802925c 	.word	0x0802925c
 8003ec0:	08029378 	.word	0x08029378
 8003ec4:	080292b4 	.word	0x080292b4
 8003ec8:	08029304 	.word	0x08029304
 8003ecc:	08029298 	.word	0x08029298
 8003ed0:	080292c8 	.word	0x080292c8
 8003ed4:	080292e0 	.word	0x080292e0
 8003ed8:	080292f4 	.word	0x080292f4
 8003edc:	08029308 	.word	0x08029308
 8003ee0:	20000004 	.word	0x20000004
 8003ee4:	08029300 	.word	0x08029300
 8003ee8:	00000000 	.word	0x00000000
    float recall = 0.0f;
 8003eec:	ed1f 3a02 	vldr	s6, [pc, #-8]	; 8003ee8 <TEST_GetNextValidationInput+0xa10>
    float precision = 0.0f;
 8003ef0:	eef0 2a43 	vmov.f32	s5, s6
    float f1_score = 0.0f;
 8003ef4:	eef0 3a43 	vmov.f32	s7, s6
 8003ef8:	e50e      	b.n	8003918 <TEST_GetNextValidationInput+0x440>
    float recall = 0.0f;
 8003efa:	ed5f 0a05 	vldr	s1, [pc, #-20]	; 8003ee8 <TEST_GetNextValidationInput+0xa10>
    float precision = 0.0f;
 8003efe:	eeb0 9a60 	vmov.f32	s18, s1
    float f1_score = 0.0f;
 8003f02:	eeb0 1a60 	vmov.f32	s2, s1
 8003f06:	e4ca      	b.n	800389e <TEST_GetNextValidationInput+0x3c6>
    float recall = 0.0f;
 8003f08:	ed5f 6a09 	vldr	s13, [pc, #-36]	; 8003ee8 <TEST_GetNextValidationInput+0xa10>
    float precision = 0.0f;
 8003f0c:	eeb0 6a66 	vmov.f32	s12, s13
    float f1_score = 0.0f;
 8003f10:	eef0 7a66 	vmov.f32	s15, s13
 8003f14:	e483      	b.n	800381e <TEST_GetNextValidationInput+0x346>
    float recall = 0.0f;
 8003f16:	ed1f 8a0c 	vldr	s16, [pc, #-48]	; 8003ee8 <TEST_GetNextValidationInput+0xa10>
    float precision = 0.0f;
 8003f1a:	eef0 8a48 	vmov.f32	s17, s16
    float f1_score = 0.0f;
 8003f1e:	eef0 1a48 	vmov.f32	s3, s16
 8003f22:	e435      	b.n	8003790 <TEST_GetNextValidationInput+0x2b8>
        HAL_Delay(1000);
 8003f24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f28:	f007 fcae 	bl	800b888 <HAL_Delay>
 8003f2c:	e78c      	b.n	8003e48 <TEST_GetNextValidationInput+0x970>
        while (1);
 8003f2e:	e7fe      	b.n	8003f2e <TEST_GetNextValidationInput+0xa56>
    val_img.w = tmp_img.w;
 8003f30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    if (STM32Ipl_CopyData(&tmp_img, &val_img) != stm32ipl_err_Ok)
 8003f32:	a93e      	add	r1, sp, #248	; 0xf8
 8003f34:	a822      	add	r0, sp, #136	; 0x88
    val_img.w = tmp_img.w;
 8003f36:	933f      	str	r3, [sp, #252]	; 0xfc
    val_img.data = DestBuffPtr;
 8003f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f3a:	9341      	str	r3, [sp, #260]	; 0x104
    val_img.w = tmp_img.w;
 8003f3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003f3e:	9340      	str	r3, [sp, #256]	; 0x100
 8003f40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f42:	933e      	str	r3, [sp, #248]	; 0xf8
    if (STM32Ipl_CopyData(&tmp_img, &val_img) != stm32ipl_err_Ok)
 8003f44:	f015 fb28 	bl	8019598 <STM32Ipl_CopyData>
 8003f48:	b170      	cbz	r0, 8003f68 <TEST_GetNextValidationInput+0xa90>
      while (1); /* Invalid dimensions or format */
 8003f4a:	e7fe      	b.n	8003f4a <TEST_GetNextValidationInput+0xa72>
        val_img.w = tmp_img.w;
 8003f4c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
        if (STM32Ipl_CopyData(&tmp_img, &val_img) != stm32ipl_err_Ok)
 8003f4e:	a93e      	add	r1, sp, #248	; 0xf8
 8003f50:	a822      	add	r0, sp, #136	; 0x88
        val_img.w = tmp_img.w;
 8003f52:	933f      	str	r3, [sp, #252]	; 0xfc
        val_img.data = DestBuffPtr;
 8003f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f56:	9341      	str	r3, [sp, #260]	; 0x104
        val_img.w = tmp_img.w;
 8003f58:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003f5a:	9340      	str	r3, [sp, #256]	; 0x100
 8003f5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f5e:	933e      	str	r3, [sp, #248]	; 0xf8
        if (STM32Ipl_CopyData(&tmp_img, &val_img) != stm32ipl_err_Ok)
 8003f60:	f015 fb1a 	bl	8019598 <STM32Ipl_CopyData>
 8003f64:	b100      	cbz	r0, 8003f68 <TEST_GetNextValidationInput+0xa90>
          while (1); // Invalid dim or format
 8003f66:	e7fe      	b.n	8003f66 <TEST_GetNextValidationInput+0xa8e>
        STM32Ipl_ReleaseData(&tmp_img);
 8003f68:	a822      	add	r0, sp, #136	; 0x88
 8003f6a:	f015 fab5 	bl	80194d8 <STM32Ipl_ReleaseData>
        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 1;
 8003f6e:	9b08      	ldr	r3, [sp, #32]
 8003f70:	2201      	movs	r2, #1
 8003f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f74:	751a      	strb	r2, [r3, #20]
      if ((res == FR_OK) && (fno->fname[0] != 0) && !(fno->fattrib & AM_DIR)) /* If file */
 8003f76:	e76a      	b.n	8003e4e <TEST_GetNextValidationInput+0x976>

08003f78 <TEST_Run>:
  char msg[70];
  uint8_t sd_error;
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;


  if((Operating_Mode == DUMP) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003f78:	2903      	cmp	r1, #3
{
 8003f7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f7e:	4604      	mov	r4, r0
 8003f80:	b0da      	sub	sp, #360	; 0x168
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8003f82:	f8d0 5600 	ldr.w	r5, [r0, #1536]	; 0x600
  if((Operating_Mode == DUMP) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003f86:	d038      	beq.n	8003ffa <TEST_Run+0x82>
        }
      }
      break;
    }
  }
  else if((Operating_Mode == CAPTURE) && (TestContext_Ptr->TestRunContext.PerformCapture == 1) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003f88:	2904      	cmp	r1, #4
 8003f8a:	d002      	beq.n	8003f92 <TEST_Run+0x1a>

    default:
      break;
    }
  }
}
 8003f8c:	b05a      	add	sp, #360	; 0x168
 8003f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if((Operating_Mode == CAPTURE) && (TestContext_Ptr->TestRunContext.PerformCapture == 1) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003f92:	f8d0 35e0 	ldr.w	r3, [r0, #1504]	; 0x5e0
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d1f8      	bne.n	8003f8c <TEST_Run+0x14>
 8003f9a:	f8d0 15c8 	ldr.w	r1, [r0, #1480]	; 0x5c8
 8003f9e:	2900      	cmp	r1, #0
 8003fa0:	d0f4      	beq.n	8003f8c <TEST_Run+0x14>
    switch(TestContext_Ptr->CaptureContext.capture_state)
 8003fa2:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	f000 8141 	beq.w	800422e <TEST_Run+0x2b6>
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d1ed      	bne.n	8003f8c <TEST_Run+0x14>
      while(App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8003fb0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8003fb2:	7d13      	ldrb	r3, [r2, #20]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0fc      	beq.n	8003fb2 <TEST_Run+0x3a>
      if(TestContext_Ptr->TestRunContext.rb_swap == 1)
 8003fb8:	f8d4 35e8 	ldr.w	r3, [r4, #1512]	; 0x5e8
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	f000 829b 	beq.w	80044f8 <TEST_Run+0x580>
      if (TestContext_Ptr->CaptureContext.capture_file_format == DATA_FORMAT_BMP)
 8003fc2:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	f000 828a 	beq.w	80044e0 <TEST_Run+0x568>
      else if (TestContext_Ptr->CaptureContext.capture_file_format == DATA_FORMAT_RAW)
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f040 80c4 	bne.w	800415a <TEST_Run+0x1e2>
        sprintf(file_name, "%s/%s_%d.raw", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 8003fd2:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 8003fd6:	f104 02de 	add.w	r2, r4, #222	; 0xde
 8003fda:	f8d4 35cc 	ldr.w	r3, [r4, #1484]	; 0x5cc
 8003fde:	a834      	add	r0, sp, #208	; 0xd0
 8003fe0:	9100      	str	r1, [sp, #0]
 8003fe2:	49bd      	ldr	r1, [pc, #756]	; (80042d8 <TEST_Run+0x360>)
 8003fe4:	f022 fa50 	bl	8026488 <siprintf>
        write_raw(file_name, dst, size, App_Cxt_Ptr);
 8003fe8:	462b      	mov	r3, r5
 8003fea:	f8d4 25dc 	ldr.w	r2, [r4, #1500]	; 0x5dc
 8003fee:	f8d4 15c8 	ldr.w	r1, [r4, #1480]	; 0x5c8
 8003ff2:	a834      	add	r0, sp, #208	; 0xd0
 8003ff4:	f7fd fe86 	bl	8001d04 <write_raw>
}
 8003ff8:	e7c8      	b.n	8003f8c <TEST_Run+0x14>
  if((Operating_Mode == DUMP) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003ffa:	f8d0 35c8 	ldr.w	r3, [r0, #1480]	; 0x5c8
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0c4      	beq.n	8003f8c <TEST_Run+0x14>
    switch(TestContext_Ptr->DumpContext.dump_state)
 8004002:	f8d0 60b8 	ldr.w	r6, [r0, #184]	; 0xb8
 8004006:	2e01      	cmp	r6, #1
 8004008:	d02f      	beq.n	800406a <TEST_Run+0xf2>
 800400a:	2e02      	cmp	r6, #2
 800400c:	d1be      	bne.n	8003f8c <TEST_Run+0x14>
      if((App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_cmd_ongoing) && (App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_host_requested_dump_memory == SDRAM))
 800400e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004010:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
 8004014:	2a00      	cmp	r2, #0
 8004016:	f000 8095 	beq.w	8004144 <TEST_Run+0x1cc>
 800401a:	f893 3526 	ldrb.w	r3, [r3, #1318]	; 0x526
 800401e:	2b01      	cmp	r3, #1
 8004020:	f040 8090 	bne.w	8004144 <TEST_Run+0x1cc>
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8004024:	2600      	movs	r6, #0
 8004026:	e006      	b.n	8004036 <TEST_Run+0xbe>
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 8004028:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800402a:	6813      	ldr	r3, [r2, #0]
 800402c:	1c59      	adds	r1, r3, #1
 800402e:	6011      	str	r1, [r2, #0]
 8004030:	5dba      	ldrb	r2, [r7, r6]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8004032:	3601      	adds	r6, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 8004034:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8004036:	f8d4 75cc 	ldr.w	r7, [r4, #1484]	; 0x5cc
 800403a:	4638      	mov	r0, r7
 800403c:	f7fc f9b0 	bl	80003a0 <strlen>
 8004040:	42b0      	cmp	r0, r6
 8004042:	d8f1      	bhi.n	8004028 <TEST_Run+0xb0>
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8004044:	f8d4 35dc 	ldr.w	r3, [r4, #1500]	; 0x5dc
 8004048:	2b00      	cmp	r3, #0
 800404a:	d09f      	beq.n	8003f8c <TEST_Run+0x14>
 800404c:	2300      	movs	r3, #0
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 800404e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8004050:	f8d4 05c8 	ldr.w	r0, [r4, #1480]	; 0x5c8
 8004054:	680a      	ldr	r2, [r1, #0]
 8004056:	1c56      	adds	r6, r2, #1
 8004058:	600e      	str	r6, [r1, #0]
 800405a:	5cc1      	ldrb	r1, [r0, r3]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 800405c:	3301      	adds	r3, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 800405e:	7011      	strb	r1, [r2, #0]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8004060:	f8d4 25dc 	ldr.w	r2, [r4, #1500]	; 0x5dc
 8004064:	429a      	cmp	r2, r3
 8004066:	d8f2      	bhi.n	800404e <TEST_Run+0xd6>
 8004068:	e790      	b.n	8003f8c <TEST_Run+0x14>
      BSP_LED_Off(LED_GREEN);
 800406a:	2000      	movs	r0, #0
 800406c:	f005 fb52 	bl	8009714 <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 8004070:	2002      	movs	r0, #2
 8004072:	f005 fb3d 	bl	80096f0 <BSP_LED_On>
      UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"DUMP BUSY ", RIGHT_MODE);
 8004076:	f017 fb03 	bl	801b680 <UTIL_LCD_GetFont>
 800407a:	2302      	movs	r3, #2
 800407c:	88c1      	ldrh	r1, [r0, #6]
 800407e:	2000      	movs	r0, #0
 8004080:	4a96      	ldr	r2, [pc, #600]	; (80042dc <TEST_Run+0x364>)
 8004082:	f017 fbf5 	bl	801b870 <UTIL_LCD_DisplayStringAt>
      sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8004086:	ed95 7a04 	vldr	s14, [r5, #16]
 800408a:	eddf 7a95 	vldr	s15, [pc, #596]	; 80042e0 <TEST_Run+0x368>
 800408e:	a802      	add	r0, sp, #8
 8004090:	68ea      	ldr	r2, [r5, #12]
 8004092:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004096:	4993      	ldr	r1, [pc, #588]	; (80042e4 <TEST_Run+0x36c>)
 8004098:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800409c:	ed8d 7b00 	vstr	d7, [sp]
 80040a0:	f022 f9f2 	bl	8026488 <siprintf>
      UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_TOP_N_LAST_LINE - NN_TOP_N_DISPLAY + 0), (uint8_t *)msg, CENTER_MODE);
 80040a4:	f017 faec 	bl	801b680 <UTIL_LCD_GetFont>
 80040a8:	88c1      	ldrh	r1, [r0, #6]
 80040aa:	4633      	mov	r3, r6
 80040ac:	aa02      	add	r2, sp, #8
 80040ae:	eb01 0781 	add.w	r7, r1, r1, lsl #2
 80040b2:	2000      	movs	r0, #0
 80040b4:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 80040b8:	f017 fbda 	bl	801b870 <UTIL_LCD_DisplayStringAt>
      sprintf(msg, "Inference: %ldms", App_Cxt_Ptr->nn_inference_time);
 80040bc:	68aa      	ldr	r2, [r5, #8]
 80040be:	498a      	ldr	r1, [pc, #552]	; (80042e8 <TEST_Run+0x370>)
 80040c0:	a802      	add	r0, sp, #8
 80040c2:	f022 f9e1 	bl	8026488 <siprintf>
      UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_INFER_TIME_LINE), (uint8_t *)msg, CENTER_MODE);
 80040c6:	f017 fadb 	bl	801b680 <UTIL_LCD_GetFont>
 80040ca:	88c1      	ldrh	r1, [r0, #6]
 80040cc:	aa02      	add	r2, sp, #8
 80040ce:	4633      	mov	r3, r6
 80040d0:	0109      	lsls	r1, r1, #4
 80040d2:	2000      	movs	r0, #0
 80040d4:	f017 fbcc 	bl	801b870 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80040d8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80040da:	f7fd fc39 	bl	8001950 <DISPLAY_Refresh>
      HAL_Delay(200);
 80040de:	20c8      	movs	r0, #200	; 0xc8
 80040e0:	f007 fbd2 	bl	800b888 <HAL_Delay>
      while(App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 80040e4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80040e6:	7d13      	ldrb	r3, [r2, #20]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0fc      	beq.n	80040e6 <TEST_Run+0x16e>
      if((App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_cmd_ongoing) && (App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_host_requested_dump_memory == SDRAM))
 80040ec:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80040ee:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
 80040f2:	2a00      	cmp	r2, #0
 80040f4:	d036      	beq.n	8004164 <TEST_Run+0x1ec>
 80040f6:	f893 2526 	ldrb.w	r2, [r3, #1318]	; 0x526
 80040fa:	2a01      	cmp	r2, #1
 80040fc:	d132      	bne.n	8004164 <TEST_Run+0x1ec>
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 80040fe:	2600      	movs	r6, #0
 8004100:	e006      	b.n	8004110 <TEST_Run+0x198>
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 8004102:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8004104:	6813      	ldr	r3, [r2, #0]
 8004106:	1c59      	adds	r1, r3, #1
 8004108:	6011      	str	r1, [r2, #0]
 800410a:	5dba      	ldrb	r2, [r7, r6]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 800410c:	3601      	adds	r6, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 800410e:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8004110:	f8d4 75cc 	ldr.w	r7, [r4, #1484]	; 0x5cc
 8004114:	4638      	mov	r0, r7
 8004116:	f7fc f943 	bl	80003a0 <strlen>
 800411a:	42b0      	cmp	r0, r6
 800411c:	d8f1      	bhi.n	8004102 <TEST_Run+0x18a>
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 800411e:	f8d4 35dc 	ldr.w	r3, [r4, #1500]	; 0x5dc
 8004122:	2b00      	cmp	r3, #0
 8004124:	d049      	beq.n	80041ba <TEST_Run+0x242>
 8004126:	2300      	movs	r3, #0
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 8004128:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800412a:	f8d4 05c8 	ldr.w	r0, [r4, #1480]	; 0x5c8
 800412e:	680a      	ldr	r2, [r1, #0]
 8004130:	1c56      	adds	r6, r2, #1
 8004132:	600e      	str	r6, [r1, #0]
 8004134:	5cc1      	ldrb	r1, [r0, r3]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8004136:	3301      	adds	r3, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 8004138:	7011      	strb	r1, [r2, #0]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 800413a:	f8d4 25dc 	ldr.w	r2, [r4, #1500]	; 0x5dc
 800413e:	429a      	cmp	r2, r3
 8004140:	d8f2      	bhi.n	8004128 <TEST_Run+0x1b0>
 8004142:	e03a      	b.n	80041ba <TEST_Run+0x242>
        if (TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_BMP)
 8004144:	f894 35e4 	ldrb.w	r3, [r4, #1508]	; 0x5e4
 8004148:	2b01      	cmp	r3, #1
 800414a:	f000 80db 	beq.w	8004304 <TEST_Run+0x38c>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_RAW)
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 80b8 	beq.w	80042c4 <TEST_Run+0x34c>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_TXT)
 8004154:	2b02      	cmp	r3, #2
 8004156:	f000 80ef 	beq.w	8004338 <TEST_Run+0x3c0>
}
 800415a:	b05a      	add	sp, #360	; 0x168
 800415c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
          Error_Handler(); /* DumpFormat no supported */
 8004160:	f001 b804 	b.w	800516c <Error_Handler>
        if(App_Cxt_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource != SDCARD_FILE)
 8004164:	791b      	ldrb	r3, [r3, #4]
 8004166:	2b03      	cmp	r3, #3
 8004168:	d12b      	bne.n	80041c2 <TEST_Run+0x24a>
        HAL_RNG_GenerateRandomNumber(&TestContext_Ptr->RngHandle, &TestContext_Ptr->DumpContext.dump_session_id);
 800416a:	f104 0108 	add.w	r1, r4, #8
        sprintf(TestContext_Ptr->DumpContext.dump_session_folder_name,"%s/DUMP_SESS_%X", TestContext_Ptr->DumpContext.dump_folder_name, (unsigned int)TestContext_Ptr->DumpContext.dump_session_id);
 800416e:	f104 0754 	add.w	r7, r4, #84	; 0x54
        HAL_RNG_GenerateRandomNumber(&TestContext_Ptr->RngHandle, &TestContext_Ptr->DumpContext.dump_session_id);
 8004172:	f204 50ec 	addw	r0, r4, #1516	; 0x5ec
 8004176:	f00d fa27 	bl	80115c8 <HAL_RNG_GenerateRandomNumber>
        sprintf(TestContext_Ptr->DumpContext.dump_session_name, "Session %X", (unsigned int)TestContext_Ptr->DumpContext.dump_session_id);
 800417a:	68a2      	ldr	r2, [r4, #8]
 800417c:	495b      	ldr	r1, [pc, #364]	; (80042ec <TEST_Run+0x374>)
 800417e:	f104 0010 	add.w	r0, r4, #16
 8004182:	f022 f981 	bl	8026488 <siprintf>
        sprintf(TestContext_Ptr->DumpContext.dump_session_folder_name,"%s/DUMP_SESS_%X", TestContext_Ptr->DumpContext.dump_folder_name, (unsigned int)TestContext_Ptr->DumpContext.dump_session_id);
 8004186:	68a3      	ldr	r3, [r4, #8]
 8004188:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800418c:	4958      	ldr	r1, [pc, #352]	; (80042f0 <TEST_Run+0x378>)
 800418e:	4638      	mov	r0, r7
 8004190:	f022 f97a 	bl	8026488 <siprintf>
  res = f_mkdir(path);
 8004194:	4638      	mov	r0, r7
 8004196:	f014 fbd1 	bl	801893c <f_mkdir>
  if ((res != FR_OK) && (res != FR_EXIST))
 800419a:	f010 06f7 	ands.w	r6, r0, #247	; 0xf7
 800419e:	d129      	bne.n	80041f4 <TEST_Run+0x27c>
        if (TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_BMP)
 80041a0:	f894 35e4 	ldrb.w	r3, [r4, #1508]	; 0x5e4
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	f000 810f 	beq.w	80043c8 <TEST_Run+0x450>
        else if (TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_RAW)
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 80fc 	beq.w	80043a8 <TEST_Run+0x430>
        else if (TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_TXT)
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	f000 8122 	beq.w	80043fa <TEST_Run+0x482>
          Error_Handler(); /* DumpFormat no supported */
 80041b6:	f000 ffd9 	bl	800516c <Error_Handler>
      TestContext_Ptr->DumpContext.dump_state = 2;
 80041ba:	2302      	movs	r3, #2
 80041bc:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
      break;
 80041c0:	e6e4      	b.n	8003f8c <TEST_Run+0x14>
          BSP_CAMERA_DeInit(0);
 80041c2:	2000      	movs	r0, #0
 80041c4:	f006 f880 	bl	800a2c8 <BSP_CAMERA_DeInit>
          if (BSP_SD_Init(0) != BSP_ERROR_NONE)
 80041c8:	2000      	movs	r0, #0
 80041ca:	f007 fa17 	bl	800b5fc <BSP_SD_Init>
 80041ce:	2800      	cmp	r0, #0
 80041d0:	d0cb      	beq.n	800416a <TEST_Run+0x1f2>
            UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 80041d2:	f017 fa55 	bl	801b680 <UTIL_LCD_GetFont>
 80041d6:	88c1      	ldrh	r1, [r0, #6]
 80041d8:	2301      	movs	r3, #1
 80041da:	4a46      	ldr	r2, [pc, #280]	; (80042f4 <TEST_Run+0x37c>)
 80041dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80041e0:	2000      	movs	r0, #0
 80041e2:	0089      	lsls	r1, r1, #2
 80041e4:	f017 fb44 	bl	801b870 <UTIL_LCD_DisplayStringAt>
            DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80041e8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80041ea:	f7fd fbb1 	bl	8001950 <DISPLAY_Refresh>
            Error_Handler();
 80041ee:	f000 ffbd 	bl	800516c <Error_Handler>
 80041f2:	e7ba      	b.n	800416a <TEST_Run+0x1f2>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not create directory", CENTER_MODE);
 80041f4:	f017 fa44 	bl	801b680 <UTIL_LCD_GetFont>
 80041f8:	88c1      	ldrh	r1, [r0, #6]
 80041fa:	2301      	movs	r3, #1
 80041fc:	4a3e      	ldr	r2, [pc, #248]	; (80042f8 <TEST_Run+0x380>)
 80041fe:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004202:	2000      	movs	r0, #0
 8004204:	4099      	lsls	r1, r3
 8004206:	f017 fb33 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 800420a:	f017 fa39 	bl	801b680 <UTIL_LCD_GetFont>
 800420e:	4601      	mov	r1, r0
 8004210:	2301      	movs	r3, #1
 8004212:	463a      	mov	r2, r7
 8004214:	88c9      	ldrh	r1, [r1, #6]
 8004216:	2000      	movs	r0, #0
 8004218:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800421c:	f017 fb28 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8004220:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004222:	f7fd fb95 	bl	8001950 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8004226:	2002      	movs	r0, #2
 8004228:	f005 fa62 	bl	80096f0 <BSP_LED_On>
    while (1);
 800422c:	e7fe      	b.n	800422c <TEST_Run+0x2b4>
      BSP_LED_Off(LED_GREEN);
 800422e:	2000      	movs	r0, #0
 8004230:	f005 fa70 	bl	8009714 <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 8004234:	2002      	movs	r0, #2
 8004236:	f005 fa5b 	bl	80096f0 <BSP_LED_On>
      UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"CAPTURE BUSY ", RIGHT_MODE);
 800423a:	f017 fa21 	bl	801b680 <UTIL_LCD_GetFont>
 800423e:	4a2f      	ldr	r2, [pc, #188]	; (80042fc <TEST_Run+0x384>)
 8004240:	88c1      	ldrh	r1, [r0, #6]
 8004242:	2302      	movs	r3, #2
 8004244:	2000      	movs	r0, #0
 8004246:	f017 fb13 	bl	801b870 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800424a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800424c:	f7fd fb80 	bl	8001950 <DISPLAY_Refresh>
      HAL_Delay(200);
 8004250:	20c8      	movs	r0, #200	; 0xc8
 8004252:	f007 fb19 	bl	800b888 <HAL_Delay>
      while(App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8004256:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8004258:	7d13      	ldrb	r3, [r2, #20]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0fc      	beq.n	8004258 <TEST_Run+0x2e0>
      BSP_CAMERA_DeInit(0);
 800425e:	2000      	movs	r0, #0
 8004260:	f006 f832 	bl	800a2c8 <BSP_CAMERA_DeInit>
      TestContext_Ptr->CaptureContext.capture_frame_count ++;
 8004264:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
      sd_error = BSP_SD_Init(0);
 8004268:	2000      	movs	r0, #0
      TestContext_Ptr->CaptureContext.capture_frame_count ++;
 800426a:	3301      	adds	r3, #1
 800426c:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
      sd_error = BSP_SD_Init(0);
 8004270:	f007 f9c4 	bl	800b5fc <BSP_SD_Init>
      if (sd_error != BSP_ERROR_NONE)
 8004274:	b2c0      	uxtb	r0, r0
 8004276:	2800      	cmp	r0, #0
 8004278:	f040 80f8 	bne.w	800446c <TEST_Run+0x4f4>
      if(TestContext_Ptr->TestRunContext.rb_swap == 1)
 800427c:	f8d4 35e8 	ldr.w	r3, [r4, #1512]	; 0x5e8
 8004280:	2b01      	cmp	r3, #1
 8004282:	f000 8121 	beq.w	80044c8 <TEST_Run+0x550>
      if (TestContext_Ptr->CaptureContext.capture_file_format == DATA_FORMAT_BMP)
 8004286:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 800428a:	2b01      	cmp	r3, #1
 800428c:	f000 80ff 	beq.w	800448e <TEST_Run+0x516>
      else if (TestContext_Ptr->CaptureContext.capture_file_format == DATA_FORMAT_RAW)
 8004290:	2b00      	cmp	r3, #0
 8004292:	f040 80e8 	bne.w	8004466 <TEST_Run+0x4ee>
        sprintf(file_name, "%s/%s_%d.raw", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 8004296:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 800429a:	f104 02de 	add.w	r2, r4, #222	; 0xde
 800429e:	f8d4 35cc 	ldr.w	r3, [r4, #1484]	; 0x5cc
 80042a2:	a834      	add	r0, sp, #208	; 0xd0
 80042a4:	9100      	str	r1, [sp, #0]
 80042a6:	490c      	ldr	r1, [pc, #48]	; (80042d8 <TEST_Run+0x360>)
 80042a8:	f022 f8ee 	bl	8026488 <siprintf>
        write_raw(file_name, dst, size, App_Cxt_Ptr);
 80042ac:	462b      	mov	r3, r5
 80042ae:	f8d4 25dc 	ldr.w	r2, [r4, #1500]	; 0x5dc
 80042b2:	a834      	add	r0, sp, #208	; 0xd0
 80042b4:	f8d4 15c8 	ldr.w	r1, [r4, #1480]	; 0x5c8
 80042b8:	f7fd fd24 	bl	8001d04 <write_raw>
      TestContext_Ptr->CaptureContext.capture_state = 2;
 80042bc:	2302      	movs	r3, #2
 80042be:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
      break;
 80042c2:	e663      	b.n	8003f8c <TEST_Run+0x14>
          sprintf(file_name, "%s/%s.raw", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 80042c4:	f104 0254 	add.w	r2, r4, #84	; 0x54
 80042c8:	f8d4 35cc 	ldr.w	r3, [r4, #1484]	; 0x5cc
 80042cc:	490c      	ldr	r1, [pc, #48]	; (8004300 <TEST_Run+0x388>)
 80042ce:	a834      	add	r0, sp, #208	; 0xd0
 80042d0:	f022 f8da 	bl	8026488 <siprintf>
          write_raw(file_name, dst, size, App_Cxt_Ptr);
 80042d4:	e688      	b.n	8003fe8 <TEST_Run+0x70>
 80042d6:	bf00      	nop
 80042d8:	080293b4 	.word	0x080293b4
 80042dc:	08029318 	.word	0x08029318
 80042e0:	42c80000 	.word	0x42c80000
 80042e4:	08028d28 	.word	0x08028d28
 80042e8:	08028d34 	.word	0x08028d34
 80042ec:	08028f50 	.word	0x08028f50
 80042f0:	08029324 	.word	0x08029324
 80042f4:	08028e50 	.word	0x08028e50
 80042f8:	08028e7c 	.word	0x08028e7c
 80042fc:	08029394 	.word	0x08029394
 8004300:	08029340 	.word	0x08029340
          sprintf(file_name, "%s/%s.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8004304:	f104 0254 	add.w	r2, r4, #84	; 0x54
 8004308:	f8d4 35cc 	ldr.w	r3, [r4, #1484]	; 0x5cc
 800430c:	497f      	ldr	r1, [pc, #508]	; (800450c <TEST_Run+0x594>)
 800430e:	a834      	add	r0, sp, #208	; 0xd0
 8004310:	f022 f8ba 	bl	8026488 <siprintf>
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8004314:	f8d4 15d4 	ldr.w	r1, [r4, #1492]	; 0x5d4
        write_bmp(file_name, &img, App_Cxt_Ptr);
 8004318:	462a      	mov	r2, r5
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 800431a:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
        write_bmp(file_name, &img, App_Cxt_Ptr);
 800431e:	a834      	add	r0, sp, #208	; 0xd0
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8004320:	e9cd 1315 	strd	r1, r3, [sp, #84]	; 0x54
 8004324:	f8d4 15d0 	ldr.w	r1, [r4, #1488]	; 0x5d0
        img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 8004328:	f8d4 35c8 	ldr.w	r3, [r4, #1480]	; 0x5c8
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 800432c:	9114      	str	r1, [sp, #80]	; 0x50
        write_bmp(file_name, &img, App_Cxt_Ptr);
 800432e:	a914      	add	r1, sp, #80	; 0x50
        img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 8004330:	9317      	str	r3, [sp, #92]	; 0x5c
        write_bmp(file_name, &img, App_Cxt_Ptr);
 8004332:	f7fd fd4b 	bl	8001dcc <write_bmp>
 8004336:	e629      	b.n	8003f8c <TEST_Run+0x14>
          sprintf(file_name, "%s/%s.txt", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8004338:	f10d 08d0 	add.w	r8, sp, #208	; 0xd0
 800433c:	f104 0254 	add.w	r2, r4, #84	; 0x54
 8004340:	4973      	ldr	r1, [pc, #460]	; (8004510 <TEST_Run+0x598>)
 8004342:	f8d4 35cc 	ldr.w	r3, [r4, #1484]	; 0x5cc
 8004346:	4640      	mov	r0, r8
 8004348:	f022 f89e 	bl	8026488 <siprintf>
          write_txt(file_name, "          Neural Network Output\n\n", FA_WRITE | FA_CREATE_ALWAYS, App_Cxt_Ptr);
 800434c:	462b      	mov	r3, r5
 800434e:	220a      	movs	r2, #10
 8004350:	4970      	ldr	r1, [pc, #448]	; (8004514 <TEST_Run+0x59c>)
 8004352:	4640      	mov	r0, r8
 8004354:	f7fd fc94 	bl	8001c80 <write_txt>
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size)/4; i++)
 8004358:	f8d4 35dc 	ldr.w	r3, [r4, #1500]	; 0x5dc
 800435c:	089b      	lsrs	r3, r3, #2
 800435e:	f43f ae15 	beq.w	8003f8c <TEST_Run+0x14>
 8004362:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8004528 <TEST_Run+0x5b0>
 8004366:	2600      	movs	r6, #0
 8004368:	af14      	add	r7, sp, #80	; 0x50
            sprintf(str, "%20s:%8.3f\n", NN_OUTPUT_CLASS_LIST[i], *((float*)TestContext_Ptr->TestRunContext.src_buff_addr + i));
 800436a:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 800452c <TEST_Run+0x5b4>
 800436e:	f8d4 35c8 	ldr.w	r3, [r4, #1480]	; 0x5c8
 8004372:	4651      	mov	r1, sl
 8004374:	f859 2b04 	ldr.w	r2, [r9], #4
 8004378:	4638      	mov	r0, r7
 800437a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size)/4; i++)
 800437e:	3601      	adds	r6, #1
            sprintf(str, "%20s:%8.3f\n", NN_OUTPUT_CLASS_LIST[i], *((float*)TestContext_Ptr->TestRunContext.src_buff_addr + i));
 8004380:	ed93 7a00 	vldr	s14, [r3]
 8004384:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004388:	ed8d 7b00 	vstr	d7, [sp]
 800438c:	f022 f87c 	bl	8026488 <siprintf>
            write_txt(file_name, str, FA_WRITE | FA_OPEN_APPEND, App_Cxt_Ptr);
 8004390:	462b      	mov	r3, r5
 8004392:	2232      	movs	r2, #50	; 0x32
 8004394:	4639      	mov	r1, r7
 8004396:	4640      	mov	r0, r8
 8004398:	f7fd fc72 	bl	8001c80 <write_txt>
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size)/4; i++)
 800439c:	f8d4 35dc 	ldr.w	r3, [r4, #1500]	; 0x5dc
 80043a0:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
 80043a4:	d3e3      	bcc.n	800436e <TEST_Run+0x3f6>
 80043a6:	e5f1      	b.n	8003f8c <TEST_Run+0x14>
          sprintf(file_name, "%s/%s.raw", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 80043a8:	463a      	mov	r2, r7
 80043aa:	f8d4 35cc 	ldr.w	r3, [r4, #1484]	; 0x5cc
 80043ae:	495a      	ldr	r1, [pc, #360]	; (8004518 <TEST_Run+0x5a0>)
 80043b0:	a834      	add	r0, sp, #208	; 0xd0
 80043b2:	f022 f869 	bl	8026488 <siprintf>
          write_raw(file_name, dst, size, App_Cxt_Ptr);
 80043b6:	462b      	mov	r3, r5
 80043b8:	f8d4 25dc 	ldr.w	r2, [r4, #1500]	; 0x5dc
 80043bc:	a834      	add	r0, sp, #208	; 0xd0
 80043be:	f8d4 15c8 	ldr.w	r1, [r4, #1480]	; 0x5c8
 80043c2:	f7fd fc9f 	bl	8001d04 <write_raw>
 80043c6:	e6f8      	b.n	80041ba <TEST_Run+0x242>
          sprintf(file_name, "%s/%s_.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 80043c8:	463a      	mov	r2, r7
 80043ca:	f8d4 35cc 	ldr.w	r3, [r4, #1484]	; 0x5cc
 80043ce:	4953      	ldr	r1, [pc, #332]	; (800451c <TEST_Run+0x5a4>)
 80043d0:	a834      	add	r0, sp, #208	; 0xd0
 80043d2:	f022 f859 	bl	8026488 <siprintf>
          img.w = TestContext_Ptr->TestRunContext.src_width_size;
 80043d6:	f8d4 15d4 	ldr.w	r1, [r4, #1492]	; 0x5d4
 80043da:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
          write_bmp(file_name, &img, App_Cxt_Ptr);
 80043de:	462a      	mov	r2, r5
 80043e0:	a834      	add	r0, sp, #208	; 0xd0
          img.w = TestContext_Ptr->TestRunContext.src_width_size;
 80043e2:	e9cd 1315 	strd	r1, r3, [sp, #84]	; 0x54
          img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 80043e6:	f8d4 35c8 	ldr.w	r3, [r4, #1480]	; 0x5c8
          write_bmp(file_name, &img, App_Cxt_Ptr);
 80043ea:	a914      	add	r1, sp, #80	; 0x50
          img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 80043ec:	9317      	str	r3, [sp, #92]	; 0x5c
          img.w = TestContext_Ptr->TestRunContext.src_width_size;
 80043ee:	f8d4 35d0 	ldr.w	r3, [r4, #1488]	; 0x5d0
 80043f2:	9314      	str	r3, [sp, #80]	; 0x50
          write_bmp(file_name, &img, App_Cxt_Ptr);
 80043f4:	f7fd fcea 	bl	8001dcc <write_bmp>
 80043f8:	e6df      	b.n	80041ba <TEST_Run+0x242>
          sprintf(file_name, "%s/%s.txt", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 80043fa:	f10d 08d0 	add.w	r8, sp, #208	; 0xd0
 80043fe:	463a      	mov	r2, r7
 8004400:	4943      	ldr	r1, [pc, #268]	; (8004510 <TEST_Run+0x598>)
 8004402:	f8d4 35cc 	ldr.w	r3, [r4, #1484]	; 0x5cc
 8004406:	4640      	mov	r0, r8
 8004408:	f022 f83e 	bl	8026488 <siprintf>
          write_txt(file_name, "          Neural Network Output\n\n", FA_WRITE | FA_CREATE_ALWAYS, App_Cxt_Ptr);
 800440c:	462b      	mov	r3, r5
 800440e:	220a      	movs	r2, #10
 8004410:	4940      	ldr	r1, [pc, #256]	; (8004514 <TEST_Run+0x59c>)
 8004412:	4640      	mov	r0, r8
 8004414:	f7fd fc34 	bl	8001c80 <write_txt>
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size/4); i++)
 8004418:	f8d4 35dc 	ldr.w	r3, [r4, #1500]	; 0x5dc
 800441c:	089b      	lsrs	r3, r3, #2
 800441e:	f43f aecc 	beq.w	80041ba <TEST_Run+0x242>
 8004422:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8004528 <TEST_Run+0x5b0>
 8004426:	af14      	add	r7, sp, #80	; 0x50
            sprintf(str, "%20s:%8.3f\n", NN_OUTPUT_CLASS_LIST[i], *((float*)TestContext_Ptr->TestRunContext.src_buff_addr + i));
 8004428:	f8df a100 	ldr.w	sl, [pc, #256]	; 800452c <TEST_Run+0x5b4>
 800442c:	f8d4 35c8 	ldr.w	r3, [r4, #1480]	; 0x5c8
 8004430:	4651      	mov	r1, sl
 8004432:	f859 2b04 	ldr.w	r2, [r9], #4
 8004436:	4638      	mov	r0, r7
 8004438:	eb03 0386 	add.w	r3, r3, r6, lsl #2
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size/4); i++)
 800443c:	3601      	adds	r6, #1
            sprintf(str, "%20s:%8.3f\n", NN_OUTPUT_CLASS_LIST[i], *((float*)TestContext_Ptr->TestRunContext.src_buff_addr + i));
 800443e:	ed93 7a00 	vldr	s14, [r3]
 8004442:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004446:	ed8d 7b00 	vstr	d7, [sp]
 800444a:	f022 f81d 	bl	8026488 <siprintf>
            write_txt(file_name, str, FA_WRITE | FA_OPEN_APPEND, App_Cxt_Ptr);
 800444e:	462b      	mov	r3, r5
 8004450:	2232      	movs	r2, #50	; 0x32
 8004452:	4639      	mov	r1, r7
 8004454:	4640      	mov	r0, r8
 8004456:	f7fd fc13 	bl	8001c80 <write_txt>
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size/4); i++)
 800445a:	f8d4 35dc 	ldr.w	r3, [r4, #1500]	; 0x5dc
 800445e:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
 8004462:	d3e3      	bcc.n	800442c <TEST_Run+0x4b4>
 8004464:	e6a9      	b.n	80041ba <TEST_Run+0x242>
        Error_Handler(); /* Capture Format no supported */
 8004466:	f000 fe81 	bl	800516c <Error_Handler>
 800446a:	e727      	b.n	80042bc <TEST_Run+0x344>
        UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 800446c:	f017 f908 	bl	801b680 <UTIL_LCD_GetFont>
 8004470:	88c1      	ldrh	r1, [r0, #6]
 8004472:	2301      	movs	r3, #1
 8004474:	4a2a      	ldr	r2, [pc, #168]	; (8004520 <TEST_Run+0x5a8>)
 8004476:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800447a:	2000      	movs	r0, #0
 800447c:	0089      	lsls	r1, r1, #2
 800447e:	f017 f9f7 	bl	801b870 <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8004482:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004484:	f7fd fa64 	bl	8001950 <DISPLAY_Refresh>
        Error_Handler();
 8004488:	f000 fe70 	bl	800516c <Error_Handler>
 800448c:	e6f6      	b.n	800427c <TEST_Run+0x304>
        sprintf(file_name, "%s/%s_%d.bmp", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 800448e:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 8004492:	f104 02de 	add.w	r2, r4, #222	; 0xde
 8004496:	f8d4 35cc 	ldr.w	r3, [r4, #1484]	; 0x5cc
 800449a:	a834      	add	r0, sp, #208	; 0xd0
 800449c:	9100      	str	r1, [sp, #0]
 800449e:	4921      	ldr	r1, [pc, #132]	; (8004524 <TEST_Run+0x5ac>)
 80044a0:	f021 fff2 	bl	8026488 <siprintf>
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 80044a4:	f8d4 15d4 	ldr.w	r1, [r4, #1492]	; 0x5d4
 80044a8:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
        write_bmp(file_name, &img, App_Cxt_Ptr);
 80044ac:	462a      	mov	r2, r5
 80044ae:	a834      	add	r0, sp, #208	; 0xd0
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 80044b0:	e9cd 1315 	strd	r1, r3, [sp, #84]	; 0x54
        img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 80044b4:	f8d4 35c8 	ldr.w	r3, [r4, #1480]	; 0x5c8
        write_bmp(file_name, &img, App_Cxt_Ptr);
 80044b8:	a914      	add	r1, sp, #80	; 0x50
        img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 80044ba:	9317      	str	r3, [sp, #92]	; 0x5c
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 80044bc:	f8d4 35d0 	ldr.w	r3, [r4, #1488]	; 0x5d0
 80044c0:	9314      	str	r3, [sp, #80]	; 0x50
        write_bmp(file_name, &img, App_Cxt_Ptr);
 80044c2:	f7fd fc83 	bl	8001dcc <write_bmp>
 80044c6:	e6f9      	b.n	80042bc <TEST_Run+0x344>
        PREPROC_Pixel_RB_Swap((void*)TestContext_Ptr->TestRunContext.src_buff_addr, (void*)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size*TestContext_Ptr->TestRunContext.src_height_size);//caution: this is modifying the content of the data contained at src_buff_addr! To do: implement this on the fly when writing onto the SD card!!
 80044c8:	f8d4 15c8 	ldr.w	r1, [r4, #1480]	; 0x5c8
 80044cc:	f8d4 35d0 	ldr.w	r3, [r4, #1488]	; 0x5d0
 80044d0:	f8d4 25d4 	ldr.w	r2, [r4, #1492]	; 0x5d4
 80044d4:	4608      	mov	r0, r1
 80044d6:	fb03 f202 	mul.w	r2, r3, r2
 80044da:	f7fd fab1 	bl	8001a40 <PREPROC_Pixel_RB_Swap>
 80044de:	e6d2      	b.n	8004286 <TEST_Run+0x30e>
        sprintf(file_name, "%s/%s_%d.bmp", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 80044e0:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 80044e4:	f104 02de 	add.w	r2, r4, #222	; 0xde
 80044e8:	f8d4 35cc 	ldr.w	r3, [r4, #1484]	; 0x5cc
 80044ec:	a834      	add	r0, sp, #208	; 0xd0
 80044ee:	9100      	str	r1, [sp, #0]
 80044f0:	490c      	ldr	r1, [pc, #48]	; (8004524 <TEST_Run+0x5ac>)
 80044f2:	f021 ffc9 	bl	8026488 <siprintf>
 80044f6:	e70d      	b.n	8004314 <TEST_Run+0x39c>
        PREPROC_Pixel_RB_Swap((void*)TestContext_Ptr->TestRunContext.src_buff_addr, (void*)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size*TestContext_Ptr->TestRunContext.src_height_size);//caution: this is modifying the content of the data contained at src_buff_addr! To do: implement this on the fly when writing onto the SD card!!
 80044f8:	f8d4 35d0 	ldr.w	r3, [r4, #1488]	; 0x5d0
 80044fc:	4608      	mov	r0, r1
 80044fe:	f8d4 25d4 	ldr.w	r2, [r4, #1492]	; 0x5d4
 8004502:	fb03 f202 	mul.w	r2, r3, r2
 8004506:	f7fd fa9b 	bl	8001a40 <PREPROC_Pixel_RB_Swap>
 800450a:	e55a      	b.n	8003fc2 <TEST_Run+0x4a>
 800450c:	08029388 	.word	0x08029388
 8004510:	0802934c 	.word	0x0802934c
 8004514:	08029358 	.word	0x08029358
 8004518:	08029340 	.word	0x08029340
 800451c:	08029334 	.word	0x08029334
 8004520:	08028e50 	.word	0x08028e50
 8004524:	080293a4 	.word	0x080293a4
 8004528:	20000004 	.word	0x20000004
 800452c:	0802937c 	.word	0x0802937c

08004530 <TEST_PostProcess>:
 *
 * @param TestContext_Ptr pointer to test context
 */
void TEST_PostProcess(TestContext_TypeDef *TestContext_Ptr)
{
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8004530:	f8d0 3600 	ldr.w	r3, [r0, #1536]	; 0x600
{
 8004534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004538:	ed2d 8b02 	vpush	{d8}

  if(App_Cxt_Ptr->Operating_Mode == CAPTURE)
 800453c:	781f      	ldrb	r7, [r3, #0]
{
 800453e:	b099      	sub	sp, #100	; 0x64
  if(App_Cxt_Ptr->Operating_Mode == CAPTURE)
 8004540:	2f04      	cmp	r7, #4
 8004542:	d009      	beq.n	8004558 <TEST_PostProcess+0x28>
  {
    Capture_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
  }
  else if(App_Cxt_Ptr->Operating_Mode == DUMP)
 8004544:	2f03      	cmp	r7, #3
 8004546:	d04d      	beq.n	80045e4 <TEST_PostProcess+0xb4>
  {
    Dump_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
  }
  else if(App_Cxt_Ptr->Operating_Mode == VALID)
 8004548:	2f02      	cmp	r7, #2
 800454a:	f000 80ae 	beq.w	80046aa <TEST_PostProcess+0x17a>
  {
    Validation_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
  }
}
 800454e:	b019      	add	sp, #100	; 0x64
 8004550:	ecbd 8b02 	vpop	{d8}
 8004554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Capture_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
 8004558:	6b9c      	ldr	r4, [r3, #56]	; 0x38
  if ((TestContext_Ptr->CaptureContext.capture_state==0) /*&& (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)*/)
 800455a:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 800455e:	f8d4 6600 	ldr.w	r6, [r4, #1536]	; 0x600
  if ((TestContext_Ptr->CaptureContext.capture_state==0) /*&& (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)*/)
 8004562:	b315      	cbz	r5, 80045aa <TEST_PostProcess+0x7a>
  else if(TestContext_Ptr->CaptureContext.capture_state==2)
 8004564:	2d02      	cmp	r5, #2
 8004566:	d1f2      	bne.n	800454e <TEST_PostProcess+0x1e>
    TestContext_Ptr->CaptureContext.capture_state = 0;
 8004568:	2000      	movs	r0, #0
 800456a:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
    BSP_SD_DeInit(0);
 800456e:	f007 f807 	bl	800b580 <BSP_SD_DeInit>
    CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 8004572:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8004574:	f7fc ff3e 	bl	80013f4 <CAMERA_Init>
    while (!App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready);
 8004578:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800457a:	7d13      	ldrb	r3, [r2, #20]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0fc      	beq.n	800457a <TEST_PostProcess+0x4a>
    App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0; /* Reset flag */
 8004580:	2500      	movs	r5, #0
    BSP_CAMERA_Resume(0);
 8004582:	4628      	mov	r0, r5
    App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0; /* Reset flag */
 8004584:	7515      	strb	r5, [r2, #20]
    BSP_CAMERA_Resume(0);
 8004586:	f006 f981 	bl	800a88c <BSP_CAMERA_Resume>
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 800458a:	f8d4 3520 	ldr.w	r3, [r4, #1312]	; 0x520
 800458e:	2b00      	cmp	r3, #0
 8004590:	f040 8347 	bne.w	8004c22 <TEST_PostProcess+0x6f2>
    BSP_LED_On(LED_GREEN);
 8004594:	2000      	movs	r0, #0
 8004596:	f005 f8ab 	bl	80096f0 <BSP_LED_On>
    BSP_LED_Off(LED_RED);
 800459a:	2002      	movs	r0, #2
}
 800459c:	b019      	add	sp, #100	; 0x64
 800459e:	ecbd 8b02 	vpop	{d8}
 80045a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    BSP_LED_Off(LED_RED);
 80045a6:	f005 b8b5 	b.w	8009714 <BSP_LED_Off>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)TestContext_Ptr->CaptureContext.capture_session_name, LEFT_MODE);
 80045aa:	f017 f869 	bl	801b680 <UTIL_LCD_GetFont>
 80045ae:	2303      	movs	r3, #3
 80045b0:	88c1      	ldrh	r1, [r0, #6]
 80045b2:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
 80045b6:	4628      	mov	r0, r5
 80045b8:	f017 f95a 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"CAPTURE READY", RIGHT_MODE);
 80045bc:	f017 f860 	bl	801b680 <UTIL_LCD_GetFont>
 80045c0:	2302      	movs	r3, #2
 80045c2:	88c1      	ldrh	r1, [r0, #6]
 80045c4:	4628      	mov	r0, r5
 80045c6:	4a9d      	ldr	r2, [pc, #628]	; (800483c <TEST_PostProcess+0x30c>)
 80045c8:	f017 f952 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80045cc:	6b30      	ldr	r0, [r6, #48]	; 0x30
 80045ce:	f7fd f9bf 	bl	8001950 <DISPLAY_Refresh>
    if(BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 80045d2:	4628      	mov	r0, r5
 80045d4:	f005 f910 	bl	80097f8 <BSP_PB_GetState>
 80045d8:	2800      	cmp	r0, #0
 80045da:	d0b8      	beq.n	800454e <TEST_PostProcess+0x1e>
      TestContext_Ptr->CaptureContext.capture_state = 1;
 80045dc:	2301      	movs	r3, #1
 80045de:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 80045e2:	e7b4      	b.n	800454e <TEST_PostProcess+0x1e>
    Dump_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
 80045e4:	6b9c      	ldr	r4, [r3, #56]	; 0x38
  if(TestContext_Ptr->DumpContext.dump_state==0)
 80045e6:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 80045ea:	f8d4 5600 	ldr.w	r5, [r4, #1536]	; 0x600
  if(TestContext_Ptr->DumpContext.dump_state==0)
 80045ee:	2e00      	cmp	r6, #0
 80045f0:	f000 80dd 	beq.w	80047ae <TEST_PostProcess+0x27e>
  else if(TestContext_Ptr->DumpContext.dump_state == 2)
 80045f4:	2e02      	cmp	r6, #2
 80045f6:	d1aa      	bne.n	800454e <TEST_PostProcess+0x1e>
    if(TestContext_Ptr->DumpContext.Dump_FrameSource != SDCARD_FILE)
 80045f8:	7923      	ldrb	r3, [r4, #4]
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	f000 82e7 	beq.w	8004bce <TEST_PostProcess+0x69e>
      if((TestContext_Ptr->UartContext.uart_cmd_ongoing==0)|| (TestContext_Ptr->UartContext.uart_cmd_ongoing==1 && TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDCARD))
 8004600:	f8d4 3520 	ldr.w	r3, [r4, #1312]	; 0x520
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 82d0 	beq.w	8004baa <TEST_PostProcess+0x67a>
 800460a:	2b01      	cmp	r3, #1
 800460c:	f894 3526 	ldrb.w	r3, [r4, #1318]	; 0x526
 8004610:	f000 82c8 	beq.w	8004ba4 <TEST_PostProcess+0x674>
    TestContext_Ptr->DumpContext.dump_state = 0;
 8004614:	2200      	movs	r2, #0
 8004616:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
      if(TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDRAM)
 800461a:	2b01      	cmp	r3, #1
 800461c:	f000 8324 	beq.w	8004c68 <TEST_PostProcess+0x738>
  uint8_t cmd_status=CMD_COMPLETE_SUCCESS_EVT;
 8004620:	2702      	movs	r7, #2
 8004622:	4e87      	ldr	r6, [pc, #540]	; (8004840 <TEST_PostProcess+0x310>)
      if(TestContext_Ptr->UartContext.uart_host_requested_dump_number == 0)
 8004624:	f8d4 3528 	ldr.w	r3, [r4, #1320]	; 0x528
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 8361 	beq.w	8004cf0 <TEST_PostProcess+0x7c0>
        if(TestContext_Ptr->UartContext.uart_host_requested_dump_number == 0xFFFF)
 800462e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004632:	4293      	cmp	r3, r2
 8004634:	f000 83a2 	beq.w	8004d7c <TEST_PostProcess+0x84c>
          TestContext_Ptr->UartContext.uart_host_requested_dump_number --;
 8004638:	3b01      	subs	r3, #1
 800463a:	f8c4 3528 	str.w	r3, [r4, #1320]	; 0x528
        UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)TestContext_Ptr->DumpContext.dump_session_name, LEFT_MODE);
 800463e:	f017 f81f 	bl	801b680 <UTIL_LCD_GetFont>
 8004642:	2303      	movs	r3, #3
 8004644:	88c1      	ldrh	r1, [r0, #6]
 8004646:	f104 0210 	add.w	r2, r4, #16
 800464a:	2000      	movs	r0, #0
 800464c:	f017 f910 	bl	801b870 <UTIL_LCD_DisplayStringAt>
        UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"DUMP READY", RIGHT_MODE);
 8004650:	f017 f816 	bl	801b680 <UTIL_LCD_GetFont>
 8004654:	2302      	movs	r3, #2
 8004656:	88c1      	ldrh	r1, [r0, #6]
 8004658:	2000      	movs	r0, #0
 800465a:	4a7a      	ldr	r2, [pc, #488]	; (8004844 <TEST_PostProcess+0x314>)
 800465c:	f017 f908 	bl	801b870 <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8004660:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004662:	f7fd f975 	bl	8001950 <DISPLAY_Refresh>
        TestContext_Ptr->DumpContext.dump_state = 1;
 8004666:	2301      	movs	r3, #1
 8004668:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 800466c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 800466e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 8004670:	6819      	ldr	r1, [r3, #0]
 8004672:	680b      	ldr	r3, [r1, #0]
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 8004674:	e9d2 4000 	ldrd	r4, r0, [r2]
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 8004678:	6033      	str	r3, [r6, #0]
 800467a:	684b      	ldr	r3, [r1, #4]
 800467c:	6073      	str	r3, [r6, #4]
 800467e:	688b      	ldr	r3, [r1, #8]
 8004680:	60b3      	str	r3, [r6, #8]
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 8004682:	4b71      	ldr	r3, [pc, #452]	; (8004848 <TEST_PostProcess+0x318>)
 8004684:	e9c3 4000 	strd	r4, r0, [r3]
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 8004688:	68c8      	ldr	r0, [r1, #12]
 800468a:	6909      	ldr	r1, [r1, #16]
 800468c:	60f0      	str	r0, [r6, #12]
 800468e:	6131      	str	r1, [r6, #16]
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 8004690:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
 8004694:	6912      	ldr	r2, [r2, #16]
 8004696:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800469a:	611a      	str	r2, [r3, #16]
    BSP_LED_On(LED_GREEN);
 800469c:	2000      	movs	r0, #0
 800469e:	f005 f827 	bl	80096f0 <BSP_LED_On>
    BSP_LED_Off(LED_RED);
 80046a2:	2002      	movs	r0, #2
 80046a4:	f005 f836 	bl	8009714 <BSP_LED_Off>
 80046a8:	e751      	b.n	800454e <TEST_PostProcess+0x1e>
    Validation_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
 80046aa:	6b9c      	ldr	r4, [r3, #56]	; 0x38
  if(TestContext_Ptr->ValidationContext.validation_completed == 0)
 80046ac:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 80046b0:	f8d4 9600 	ldr.w	r9, [r4, #1536]	; 0x600
  if(TestContext_Ptr->ValidationContext.validation_completed == 0)
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 80d3 	beq.w	8004860 <TEST_PostProcess+0x330>
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 80046ba:	f8d4 3520 	ldr.w	r3, [r4, #1312]	; 0x520
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d068      	beq.n	8004794 <TEST_PostProcess+0x264>
      TestContext_Ptr->ValidationContext.overall_loss = 0.0;
 80046c2:	2200      	movs	r2, #0
 80046c4:	2300      	movs	r3, #0
      TestContext_Ptr->ValidationContext.validation_completed=0;
 80046c6:	2000      	movs	r0, #0
          TestContext_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 80046c8:	f504 6e8e 	add.w	lr, r4, #1136	; 0x470
 80046cc:	f504 6c90 	add.w	ip, r4, #1152	; 0x480
 80046d0:	f504 6192 	add.w	r1, r4, #1168	; 0x490
      TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 80046d4:	f04f 0801 	mov.w	r8, #1
          TestContext_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 80046d8:	f504 6b8a 	add.w	fp, r4, #1104	; 0x450
 80046dc:	f504 6a8c 	add.w	sl, r4, #1120	; 0x460
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 80046e0:	4e5a      	ldr	r6, [pc, #360]	; (800484c <TEST_PostProcess+0x31c>)
      TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 80046e2:	f884 8524 	strb.w	r8, [r4, #1316]	; 0x524
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80046e6:	f204 553c 	addw	r5, r4, #1340	; 0x53c
      TestContext_Ptr->ValidationContext.nbr_tested = 1;
 80046ea:	f8c4 8120 	str.w	r8, [r4, #288]	; 0x120
      TestContext_Ptr->ValidationContext.validation_completed=0;
 80046ee:	f8c4 0440 	str.w	r0, [r4, #1088]	; 0x440
      TestContext_Ptr->ValidationContext.overall_loss = 0.0;
 80046f2:	e9c4 2344 	strd	r2, r3, [r4, #272]	; 0x110
      TestContext_Ptr->ValidationContext.avg_loss = 0.0;
 80046f6:	e9c4 2346 	strd	r2, r3, [r4, #280]	; 0x118
          TestContext_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 80046fa:	2200      	movs	r2, #0
 80046fc:	2300      	movs	r3, #0
 80046fe:	e94b 2302 	strd	r2, r3, [fp, #-8]
 8004702:	e9cb 2300 	strd	r2, r3, [fp]
 8004706:	e94a 2302 	strd	r2, r3, [sl, #-8]
 800470a:	e9ca 2300 	strd	r2, r3, [sl]
 800470e:	e94e 2302 	strd	r2, r3, [lr, #-8]
 8004712:	e9ce 2300 	strd	r2, r3, [lr]
 8004716:	e94c 2302 	strd	r2, r3, [ip, #-8]
 800471a:	e9cc 2300 	strd	r2, r3, [ip]
 800471e:	e941 2302 	strd	r2, r3, [r1, #-8]
 8004722:	e9c1 2300 	strd	r2, r3, [r1]
 8004726:	f8c4 0498 	str.w	r0, [r4, #1176]	; 0x498
 800472a:	f8c4 049c 	str.w	r0, [r4, #1180]	; 0x49c
 800472e:	f8c4 04a0 	str.w	r0, [r4, #1184]	; 0x4a0
 8004732:	f8c4 04a4 	str.w	r0, [r4, #1188]	; 0x4a4
 8004736:	f8c4 04a8 	str.w	r0, [r4, #1192]	; 0x4a8
      App_Cxt_Ptr->run_loop = 0;
 800473a:	f8c9 0004 	str.w	r0, [r9, #4]
      BSP_SD_DeInit(0);
 800473e:	f006 ff1f 	bl	800b580 <BSP_SD_DeInit>
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004742:	463a      	mov	r2, r7
 8004744:	2180      	movs	r1, #128	; 0x80
 8004746:	4630      	mov	r0, r6
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 8004748:	7037      	strb	r7, [r6, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800474a:	f000 fc9f 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800474e:	4642      	mov	r2, r8
 8004750:	4631      	mov	r1, r6
 8004752:	4628      	mov	r0, r5
 8004754:	f00e fd16 	bl	8013184 <HAL_UART_Transmit_DMA>
 8004758:	2800      	cmp	r0, #0
 800475a:	f040 825f 	bne.w	8004c1c <TEST_PostProcess+0x6ec>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800475e:	4628      	mov	r0, r5
 8004760:	f00e ff40 	bl	80135e4 <HAL_UART_GetState>
 8004764:	2820      	cmp	r0, #32
 8004766:	d1fa      	bne.n	800475e <TEST_PostProcess+0x22e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8004768:	220a      	movs	r2, #10
 800476a:	4939      	ldr	r1, [pc, #228]	; (8004850 <TEST_PostProcess+0x320>)
 800476c:	4628      	mov	r0, r5
 800476e:	f00e fd5b 	bl	8013228 <HAL_UART_Receive_DMA>
 8004772:	2800      	cmp	r0, #0
 8004774:	f040 824f 	bne.w	8004c16 <TEST_PostProcess+0x6e6>
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 8004778:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
 800477c:	e9d3 5400 	ldrd	r5, r4, [r3]
 8004780:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004784:	691a      	ldr	r2, [r3, #16]
 8004786:	4b30      	ldr	r3, [pc, #192]	; (8004848 <TEST_PostProcess+0x318>)
 8004788:	e9c3 5400 	strd	r5, r4, [r3]
 800478c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004790:	611a      	str	r2, [r3, #16]
      for(uint32_t i=0; i<APP_FRAMEOPERATION_NUM;i++)
 8004792:	e6dc      	b.n	800454e <TEST_PostProcess+0x1e>
        HAL_Delay(100);
 8004794:	2064      	movs	r0, #100	; 0x64
 8004796:	f007 f877 	bl	800b888 <HAL_Delay>
        BSP_LED_Toggle(LED_GREEN);
 800479a:	2000      	movs	r0, #0
 800479c:	f004 ffcc 	bl	8009738 <BSP_LED_Toggle>
        HAL_Delay(100);
 80047a0:	2064      	movs	r0, #100	; 0x64
 80047a2:	f007 f871 	bl	800b888 <HAL_Delay>
        BSP_LED_Toggle(LED_GREEN);
 80047a6:	2000      	movs	r0, #0
 80047a8:	f004 ffc6 	bl	8009738 <BSP_LED_Toggle>
      while (1)
 80047ac:	e7f2      	b.n	8004794 <TEST_PostProcess+0x264>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)TestContext_Ptr->DumpContext.dump_session_name, LEFT_MODE);
 80047ae:	f016 ff67 	bl	801b680 <UTIL_LCD_GetFont>
 80047b2:	463b      	mov	r3, r7
 80047b4:	88c1      	ldrh	r1, [r0, #6]
 80047b6:	f104 0210 	add.w	r2, r4, #16
 80047ba:	4630      	mov	r0, r6
 80047bc:	f017 f858 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"DUMP READY", RIGHT_MODE);
 80047c0:	f016 ff5e 	bl	801b680 <UTIL_LCD_GetFont>
 80047c4:	2302      	movs	r3, #2
 80047c6:	88c1      	ldrh	r1, [r0, #6]
 80047c8:	4630      	mov	r0, r6
 80047ca:	4a1e      	ldr	r2, [pc, #120]	; (8004844 <TEST_PostProcess+0x314>)
 80047cc:	f017 f850 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 80047d0:	ed95 7a04 	vldr	s14, [r5, #16]
 80047d4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004854 <TEST_PostProcess+0x324>
 80047d8:	a806      	add	r0, sp, #24
 80047da:	68ea      	ldr	r2, [r5, #12]
 80047dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80047e0:	491d      	ldr	r1, [pc, #116]	; (8004858 <TEST_PostProcess+0x328>)
 80047e2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80047e6:	ed8d 7b00 	vstr	d7, [sp]
 80047ea:	f021 fe4d 	bl	8026488 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_TOP_N_LAST_LINE - NN_TOP_N_DISPLAY + 0), (uint8_t *)msg, CENTER_MODE);
 80047ee:	f016 ff47 	bl	801b680 <UTIL_LCD_GetFont>
 80047f2:	88c1      	ldrh	r1, [r0, #6]
 80047f4:	2301      	movs	r3, #1
 80047f6:	aa06      	add	r2, sp, #24
 80047f8:	eb01 0781 	add.w	r7, r1, r1, lsl #2
 80047fc:	4630      	mov	r0, r6
 80047fe:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8004802:	f017 f835 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "Inference: %ldms", App_Cxt_Ptr->nn_inference_time);
 8004806:	68aa      	ldr	r2, [r5, #8]
 8004808:	4914      	ldr	r1, [pc, #80]	; (800485c <TEST_PostProcess+0x32c>)
 800480a:	a806      	add	r0, sp, #24
 800480c:	f021 fe3c 	bl	8026488 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_INFER_TIME_LINE), (uint8_t *)msg, CENTER_MODE);
 8004810:	f016 ff36 	bl	801b680 <UTIL_LCD_GetFont>
 8004814:	88c1      	ldrh	r1, [r0, #6]
 8004816:	aa06      	add	r2, sp, #24
 8004818:	2301      	movs	r3, #1
 800481a:	0109      	lsls	r1, r1, #4
 800481c:	4630      	mov	r0, r6
 800481e:	f017 f827 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8004822:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004824:	f7fd f894 	bl	8001950 <DISPLAY_Refresh>
    if(BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 8004828:	4630      	mov	r0, r6
 800482a:	f004 ffe5 	bl	80097f8 <BSP_PB_GetState>
 800482e:	2800      	cmp	r0, #0
 8004830:	f43f ae8d 	beq.w	800454e <TEST_PostProcess+0x1e>
      TestContext_Ptr->DumpContext.dump_state = 1;
 8004834:	2301      	movs	r3, #1
 8004836:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 800483a:	e688      	b.n	800454e <TEST_PostProcess+0x1e>
 800483c:	080293c4 	.word	0x080293c4
 8004840:	d0cb08a0 	.word	0xd0cb08a0
 8004844:	080293d4 	.word	0x080293d4
 8004848:	d0d3bd40 	.word	0xd0d3bd40
 800484c:	30000280 	.word	0x30000280
 8004850:	30000300 	.word	0x30000300
 8004854:	42c80000 	.word	0x42c80000
 8004858:	08028d28 	.word	0x08028d28
 800485c:	08028d34 	.word	0x08028d34
    strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 8004860:	f504 6880 	add.w	r8, r4, #1024	; 0x400
 8004864:	4ec5      	ldr	r6, [pc, #788]	; (8004b7c <TEST_PostProcess+0x64c>)
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 8004866:	f204 27ba 	addw	r7, r4, #698	; 0x2ba
    strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 800486a:	4641      	mov	r1, r8
 800486c:	4630      	mov	r0, r6
 800486e:	f021 fe90 	bl	8026592 <stpcpy>
    strcat(tmp_msg, "/");
 8004872:	232f      	movs	r3, #47	; 0x2f
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 8004874:	3001      	adds	r0, #1
 8004876:	4639      	mov	r1, r7
    strcat(tmp_msg, "/");
 8004878:	f800 3c01 	strb.w	r3, [r0, #-1]
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 800487c:	f021 ff13 	bl	80266a6 <strcpy>
    size_t predicted_class = App_Cxt_Ptr->ranking[0];
 8004880:	f8d9 3014 	ldr.w	r3, [r9, #20]
    if (predicted_class != TestContext_Ptr->ValidationContext.class_index)
 8004884:	f8d4 53bc 	ldr.w	r5, [r4, #956]	; 0x3bc
    size_t predicted_class = App_Cxt_Ptr->ranking[0];
 8004888:	9302      	str	r3, [sp, #8]
    if (predicted_class != TestContext_Ptr->ValidationContext.class_index)
 800488a:	42ab      	cmp	r3, r5
 800488c:	f040 81aa 	bne.w	8004be4 <TEST_PostProcess+0x6b4>
 8004890:	4bbb      	ldr	r3, [pc, #748]	; (8004b80 <TEST_PostProcess+0x650>)
 8004892:	9303      	str	r3, [sp, #12]
    float confidence = App_Cxt_Ptr->nn_top1_output_class_proba;
 8004894:	edd9 8a04 	vldr	s17, [r9, #16]
    TestContext_Ptr->ValidationContext.nbr_tested++;
 8004898:	f8d4 6120 	ldr.w	r6, [r4, #288]	; 0x120
    if (confidence > 0)
 800489c:	eef5 8ac0 	vcmpe.f32	s17, #0.0
    TestContext_Ptr->ValidationContext.nbr_tested++;
 80048a0:	3601      	adds	r6, #1
    if (confidence > 0)
 80048a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    TestContext_Ptr->ValidationContext.nbr_tested++;
 80048a6:	f8c4 6120 	str.w	r6, [r4, #288]	; 0x120
    if (confidence > 0)
 80048aa:	f340 81b1 	ble.w	8004c10 <TEST_PostProcess+0x6e0>
      categorical_crossentropy = -log((double)confidence);
 80048ae:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 80048b2:	f023 fe1d 	bl	80284f0 <log>
 80048b6:	eeb1 0b40 	vneg.f64	d0, d0
    TestContext_Ptr->ValidationContext.overall_loss += categorical_crossentropy;
 80048ba:	ed94 7b44 	vldr	d7, [r4, #272]	; 0x110
 80048be:	ee30 0b07 	vadd.f64	d0, d0, d7
 80048c2:	ed84 0b44 	vstr	d0, [r4, #272]	; 0x110
    if (TestContext_Ptr->ValidationContext.nbr_tested > 0)
 80048c6:	b13e      	cbz	r6, 80048d8 <TEST_PostProcess+0x3a8>
      TestContext_Ptr->ValidationContext.avg_loss = TestContext_Ptr->ValidationContext.overall_loss / (double)TestContext_Ptr->ValidationContext.nbr_tested;
 80048c8:	ee07 6a90 	vmov	s15, r6
 80048cc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80048d0:	ee80 5b07 	vdiv.f64	d5, d0, d7
 80048d4:	ed84 5b46 	vstr	d5, [r4, #280]	; 0x118
    TestContext_Ptr->ValidationContext.valid_conf_matrix[TestContext_Ptr->ValidationContext.class_index][predicted_class]++;
 80048d8:	9a02      	ldr	r2, [sp, #8]
 80048da:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80048de:	4413      	add	r3, r2
 80048e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80048e4:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 80048e8:	3201      	adds	r2, #1
 80048ea:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
      if (conf_matrix[row][col] > conf_max)
 80048ee:	f8d4 2448 	ldr.w	r2, [r4, #1096]	; 0x448
 80048f2:	f8d4 144c 	ldr.w	r1, [r4, #1100]	; 0x44c
 80048f6:	4613      	mov	r3, r2
 80048f8:	428a      	cmp	r2, r1
 80048fa:	d201      	bcs.n	8004900 <TEST_PostProcess+0x3d0>
        conf_max = conf_matrix[row][col];
 80048fc:	460b      	mov	r3, r1
 80048fe:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 8004900:	f8d4 1450 	ldr.w	r1, [r4, #1104]	; 0x450
 8004904:	428a      	cmp	r2, r1
 8004906:	d201      	bcs.n	800490c <TEST_PostProcess+0x3dc>
        conf_max = conf_matrix[row][col];
 8004908:	460b      	mov	r3, r1
 800490a:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 800490c:	f8d4 1454 	ldr.w	r1, [r4, #1108]	; 0x454
 8004910:	428a      	cmp	r2, r1
 8004912:	d201      	bcs.n	8004918 <TEST_PostProcess+0x3e8>
        conf_max = conf_matrix[row][col];
 8004914:	460b      	mov	r3, r1
 8004916:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 8004918:	f8d4 1458 	ldr.w	r1, [r4, #1112]	; 0x458
        conf_max = conf_matrix[row][col];
 800491c:	428a      	cmp	r2, r1
 800491e:	bf38      	it	cc
 8004920:	460b      	movcc	r3, r1
      if (conf_matrix[row][col] > conf_max)
 8004922:	f8d4 145c 	ldr.w	r1, [r4, #1116]	; 0x45c
 8004926:	4299      	cmp	r1, r3
 8004928:	461a      	mov	r2, r3
 800492a:	d901      	bls.n	8004930 <TEST_PostProcess+0x400>
        conf_max = conf_matrix[row][col];
 800492c:	460b      	mov	r3, r1
 800492e:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 8004930:	f8d4 1460 	ldr.w	r1, [r4, #1120]	; 0x460
 8004934:	428a      	cmp	r2, r1
 8004936:	d201      	bcs.n	800493c <TEST_PostProcess+0x40c>
        conf_max = conf_matrix[row][col];
 8004938:	460b      	mov	r3, r1
 800493a:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 800493c:	f8d4 1464 	ldr.w	r1, [r4, #1124]	; 0x464
 8004940:	428a      	cmp	r2, r1
 8004942:	d201      	bcs.n	8004948 <TEST_PostProcess+0x418>
        conf_max = conf_matrix[row][col];
 8004944:	460b      	mov	r3, r1
 8004946:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 8004948:	f8d4 1468 	ldr.w	r1, [r4, #1128]	; 0x468
 800494c:	428a      	cmp	r2, r1
 800494e:	d201      	bcs.n	8004954 <TEST_PostProcess+0x424>
        conf_max = conf_matrix[row][col];
 8004950:	460b      	mov	r3, r1
 8004952:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 8004954:	f8d4 146c 	ldr.w	r1, [r4, #1132]	; 0x46c
        conf_max = conf_matrix[row][col];
 8004958:	428a      	cmp	r2, r1
 800495a:	bf38      	it	cc
 800495c:	460b      	movcc	r3, r1
      if (conf_matrix[row][col] > conf_max)
 800495e:	f8d4 1470 	ldr.w	r1, [r4, #1136]	; 0x470
 8004962:	4299      	cmp	r1, r3
 8004964:	461a      	mov	r2, r3
 8004966:	d901      	bls.n	800496c <TEST_PostProcess+0x43c>
        conf_max = conf_matrix[row][col];
 8004968:	460b      	mov	r3, r1
 800496a:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 800496c:	f8d4 1474 	ldr.w	r1, [r4, #1140]	; 0x474
 8004970:	428a      	cmp	r2, r1
 8004972:	d201      	bcs.n	8004978 <TEST_PostProcess+0x448>
        conf_max = conf_matrix[row][col];
 8004974:	460b      	mov	r3, r1
 8004976:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 8004978:	f8d4 1478 	ldr.w	r1, [r4, #1144]	; 0x478
 800497c:	428a      	cmp	r2, r1
 800497e:	d201      	bcs.n	8004984 <TEST_PostProcess+0x454>
        conf_max = conf_matrix[row][col];
 8004980:	460b      	mov	r3, r1
 8004982:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 8004984:	f8d4 147c 	ldr.w	r1, [r4, #1148]	; 0x47c
 8004988:	428a      	cmp	r2, r1
 800498a:	d201      	bcs.n	8004990 <TEST_PostProcess+0x460>
        conf_max = conf_matrix[row][col];
 800498c:	460b      	mov	r3, r1
 800498e:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 8004990:	f8d4 1480 	ldr.w	r1, [r4, #1152]	; 0x480
        conf_max = conf_matrix[row][col];
 8004994:	428a      	cmp	r2, r1
 8004996:	bf38      	it	cc
 8004998:	460b      	movcc	r3, r1
      if (conf_matrix[row][col] > conf_max)
 800499a:	f8d4 1484 	ldr.w	r1, [r4, #1156]	; 0x484
 800499e:	4299      	cmp	r1, r3
 80049a0:	461a      	mov	r2, r3
 80049a2:	d901      	bls.n	80049a8 <TEST_PostProcess+0x478>
        conf_max = conf_matrix[row][col];
 80049a4:	460b      	mov	r3, r1
 80049a6:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 80049a8:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
 80049ac:	428a      	cmp	r2, r1
 80049ae:	d201      	bcs.n	80049b4 <TEST_PostProcess+0x484>
        conf_max = conf_matrix[row][col];
 80049b0:	460b      	mov	r3, r1
 80049b2:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 80049b4:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
 80049b8:	428a      	cmp	r2, r1
 80049ba:	d201      	bcs.n	80049c0 <TEST_PostProcess+0x490>
        conf_max = conf_matrix[row][col];
 80049bc:	460b      	mov	r3, r1
 80049be:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 80049c0:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
 80049c4:	428a      	cmp	r2, r1
 80049c6:	d201      	bcs.n	80049cc <TEST_PostProcess+0x49c>
        conf_max = conf_matrix[row][col];
 80049c8:	460b      	mov	r3, r1
 80049ca:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 80049cc:	f8d4 1494 	ldr.w	r1, [r4, #1172]	; 0x494
        float value_norm = value / (float)(conf_max + 1);
 80049d0:	f04f 083c 	mov.w	r8, #60	; 0x3c
  UTIL_LCD_SetFont(&Font12);
 80049d4:	486b      	ldr	r0, [pc, #428]	; (8004b84 <TEST_PostProcess+0x654>)
 80049d6:	af06      	add	r7, sp, #24
        conf_max = conf_matrix[row][col];
 80049d8:	428a      	cmp	r2, r1
 80049da:	bf38      	it	cc
 80049dc:	460b      	movcc	r3, r1
      if (conf_matrix[row][col] > conf_max)
 80049de:	f8d4 2498 	ldr.w	r2, [r4, #1176]	; 0x498
        sprintf(conf_value, "%d", (unsigned int)conf_matrix[row][col]);
 80049e2:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 8004ba0 <TEST_PostProcess+0x670>
 80049e6:	4293      	cmp	r3, r2
 80049e8:	bf38      	it	cc
 80049ea:	4613      	movcc	r3, r2
 80049ec:	461d      	mov	r5, r3
 80049ee:	f8d4 349c 	ldr.w	r3, [r4, #1180]	; 0x49c
 80049f2:	429d      	cmp	r5, r3
 80049f4:	bf38      	it	cc
 80049f6:	461d      	movcc	r5, r3
 80049f8:	f8d4 34a0 	ldr.w	r3, [r4, #1184]	; 0x4a0
 80049fc:	429d      	cmp	r5, r3
 80049fe:	bf38      	it	cc
 8004a00:	461d      	movcc	r5, r3
 8004a02:	f8d4 34a4 	ldr.w	r3, [r4, #1188]	; 0x4a4
 8004a06:	429d      	cmp	r5, r3
 8004a08:	bf38      	it	cc
 8004a0a:	461d      	movcc	r5, r3
 8004a0c:	f8d4 34a8 	ldr.w	r3, [r4, #1192]	; 0x4a8
 8004a10:	429d      	cmp	r5, r3
 8004a12:	bf38      	it	cc
 8004a14:	461d      	movcc	r5, r3
  UTIL_LCD_SetFont(&Font12);
 8004a16:	f016 fe2b 	bl	801b670 <UTIL_LCD_SetFont>
  for (int row = 0; row < NN_OUTPUT_CLASS_NUMBER; row++)
 8004a1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a1e:	f504 6381 	add.w	r3, r4, #1032	; 0x408
        float value_norm = value / (float)(conf_max + 1);
 8004a22:	3501      	adds	r5, #1
 8004a24:	ee07 5a90 	vmov	s15, r5
 8004a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a2c:	e9cd 4904 	strd	r4, r9, [sp, #16]
 8004a30:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8004a34:	461c      	mov	r4, r3
    for (int col = 0; col < NN_OUTPUT_CLASS_NUMBER; col++)
 8004a36:	eb04 0608 	add.w	r6, r4, r8
        conf_max = conf_matrix[row][col];
 8004a3a:	f240 1581 	movw	r5, #385	; 0x181
        sprintf(conf_value, ".");
 8004a3e:	f04f 0a2e 	mov.w	sl, #46	; 0x2e
      uint32_t value = conf_matrix[row][col];
 8004a42:	f856 3f04 	ldr.w	r3, [r6, #4]!
        float value_norm = value / (float)(conf_max + 1);
 8004a46:	ee07 3a90 	vmov	s15, r3
        int heat_map_idx = (int)floorf(value_norm * 9.0f);
 8004a4a:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
        float value_norm = value / (float)(conf_max + 1);
 8004a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
      if (value > 0)
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 808f 	beq.w	8004b76 <TEST_PostProcess+0x646>
        int heat_map_idx = (int)floorf(value_norm * 9.0f);
 8004a58:	ee67 7a87 	vmul.f32	s15, s15, s14
        UTIL_LCD_SetBackColor(heat_map[heat_map_idx]);
 8004a5c:	4b4a      	ldr	r3, [pc, #296]	; (8004b88 <TEST_PostProcess+0x658>)
        int heat_map_idx = (int)floorf(value_norm * 9.0f);
 8004a5e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8004a62:	fefb 7a67 	vrintm.f32	s15, s15
 8004a66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a6a:	ee17 9a90 	vmov	r9, s15
        UTIL_LCD_SetBackColor(heat_map[heat_map_idx]);
 8004a6e:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 8004a72:	f016 fdf5 	bl	801b660 <UTIL_LCD_SetBackColor>
        uint32_t text_color = heat_map_idx > 5 ? UTIL_LCD_COLOR_BLACK : UTIL_LCD_COLOR_WHITE;
 8004a76:	f1b9 0f05 	cmp.w	r9, #5
        UTIL_LCD_SetTextColor(text_color);
 8004a7a:	bfcc      	ite	gt
 8004a7c:	f04f 407f 	movgt.w	r0, #4278190080	; 0xff000000
 8004a80:	f04f 30ff 	movle.w	r0, #4294967295
 8004a84:	f016 fde4 	bl	801b650 <UTIL_LCD_SetTextColor>
        sprintf(conf_value, "%d", (unsigned int)conf_matrix[row][col]);
 8004a88:	6832      	ldr	r2, [r6, #0]
 8004a8a:	4659      	mov	r1, fp
 8004a8c:	4638      	mov	r0, r7
 8004a8e:	f021 fcfb 	bl	8026488 <siprintf>
      UTIL_LCD_DisplayStringAt(x_off + col * 20, y_off + row * 20, (uint8_t *)conf_value, LEFT_MODE);
 8004a92:	2303      	movs	r3, #3
 8004a94:	463a      	mov	r2, r7
 8004a96:	4641      	mov	r1, r8
 8004a98:	4628      	mov	r0, r5
 8004a9a:	f016 fee9 	bl	801b870 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 8004a9e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8004aa2:	f016 fddd 	bl	801b660 <UTIL_LCD_SetBackColor>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8004aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8004aaa:	f016 fdd1 	bl	801b650 <UTIL_LCD_SetTextColor>
    for (int col = 0; col < NN_OUTPUT_CLASS_NUMBER; col++)
 8004aae:	3514      	adds	r5, #20
 8004ab0:	f240 13e5 	movw	r3, #485	; 0x1e5
 8004ab4:	429d      	cmp	r5, r3
 8004ab6:	d1c4      	bne.n	8004a42 <TEST_PostProcess+0x512>
  for (int row = 0; row < NN_OUTPUT_CLASS_NUMBER; row++)
 8004ab8:	f108 0814 	add.w	r8, r8, #20
 8004abc:	f1b8 0fa0 	cmp.w	r8, #160	; 0xa0
 8004ac0:	d1b9      	bne.n	8004a36 <TEST_PostProcess+0x506>
  UTIL_LCD_SetFont(&Font20);
 8004ac2:	4832      	ldr	r0, [pc, #200]	; (8004b8c <TEST_PostProcess+0x65c>)
 8004ac4:	e9dd 4904 	ldrd	r4, r9, [sp, #16]
 8004ac8:	f016 fdd2 	bl	801b670 <UTIL_LCD_SetFont>
    sprintf(tmp_msg, "%s %.0f%%", NN_OUTPUT_CLASS_LIST[predicted_class], confidence * 100);
 8004acc:	eddf 7a30 	vldr	s15, [pc, #192]	; 8004b90 <TEST_PostProcess+0x660>
 8004ad0:	4930      	ldr	r1, [pc, #192]	; (8004b94 <TEST_PostProcess+0x664>)
 8004ad2:	ee28 7aa7 	vmul.f32	s14, s17, s15
 8004ad6:	4829      	ldr	r0, [pc, #164]	; (8004b7c <TEST_PostProcess+0x64c>)
 8004ad8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004adc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004ae0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004ae4:	ed8d 7b00 	vstr	d7, [sp]
 8004ae8:	f021 fcce 	bl	8026488 <siprintf>
    UTIL_LCD_DisplayStringAt(40, LINE(21), (uint8_t *)tmp_msg, LEFT_MODE);
 8004aec:	f016 fdc8 	bl	801b680 <UTIL_LCD_GetFont>
 8004af0:	88c1      	ldrh	r1, [r0, #6]
 8004af2:	2303      	movs	r3, #3
 8004af4:	4a21      	ldr	r2, [pc, #132]	; (8004b7c <TEST_PostProcess+0x64c>)
 8004af6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004afa:	2028      	movs	r0, #40	; 0x28
 8004afc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004b00:	f016 feb6 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    sprintf(tmp_msg, "Average loss (categorical cross-entropy) %.4f ", TestContext_Ptr->ValidationContext.avg_loss);
 8004b04:	4924      	ldr	r1, [pc, #144]	; (8004b98 <TEST_PostProcess+0x668>)
 8004b06:	481d      	ldr	r0, [pc, #116]	; (8004b7c <TEST_PostProcess+0x64c>)
 8004b08:	e9d4 2346 	ldrd	r2, r3, [r4, #280]	; 0x118
 8004b0c:	f021 fcbc 	bl	8026488 <siprintf>
    UTIL_LCD_DisplayStringAt(40, LINE(22), (uint8_t *)tmp_msg, LEFT_MODE);
 8004b10:	f016 fdb6 	bl	801b680 <UTIL_LCD_GetFont>
 8004b14:	2116      	movs	r1, #22
 8004b16:	88c2      	ldrh	r2, [r0, #6]
 8004b18:	2303      	movs	r3, #3
 8004b1a:	2028      	movs	r0, #40	; 0x28
 8004b1c:	fb02 f101 	mul.w	r1, r2, r1
 8004b20:	4a16      	ldr	r2, [pc, #88]	; (8004b7c <TEST_PostProcess+0x64c>)
 8004b22:	f016 fea5 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    sprintf(tmp_msg, "Class: %s, id %d", TestContext_Ptr->ValidationContext.fno.fname, TestContext_Ptr->ValidationContext.class_index);
 8004b26:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8004b2a:	f504 72b7 	add.w	r2, r4, #366	; 0x16e
 8004b2e:	491b      	ldr	r1, [pc, #108]	; (8004b9c <TEST_PostProcess+0x66c>)
 8004b30:	4812      	ldr	r0, [pc, #72]	; (8004b7c <TEST_PostProcess+0x64c>)
 8004b32:	f021 fca9 	bl	8026488 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)tmp_msg, CENTER_MODE);
 8004b36:	f016 fda3 	bl	801b680 <UTIL_LCD_GetFont>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	88c1      	ldrh	r1, [r0, #6]
 8004b3e:	2000      	movs	r0, #0
 8004b40:	4a0e      	ldr	r2, [pc, #56]	; (8004b7c <TEST_PostProcess+0x64c>)
 8004b42:	f016 fe95 	bl	801b870 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8004b46:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
 8004b4a:	f7fc ff01 	bl	8001950 <DISPLAY_Refresh>
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8004b4e:	f8d4 3520 	ldr.w	r3, [r4, #1312]	; 0x520
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f43f acfb 	beq.w	800454e <TEST_PostProcess+0x1e>
      for (int i=0; i<AI_NET_OUTPUT_SIZE*4; i++)
 8004b58:	2300      	movs	r3, #0
        *(TestContext_Ptr->ValidationContext.validation_write_bufferPtr)++=*((uint8_t *)(App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer) + i);
 8004b5a:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
 8004b5e:	f8d4 251c 	ldr.w	r2, [r4, #1308]	; 0x51c
 8004b62:	6809      	ldr	r1, [r1, #0]
 8004b64:	1c50      	adds	r0, r2, #1
 8004b66:	f8c4 051c 	str.w	r0, [r4, #1308]	; 0x51c
 8004b6a:	5cc9      	ldrb	r1, [r1, r3]
      for (int i=0; i<AI_NET_OUTPUT_SIZE*4; i++)
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	2b14      	cmp	r3, #20
        *(TestContext_Ptr->ValidationContext.validation_write_bufferPtr)++=*((uint8_t *)(App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer) + i);
 8004b70:	7011      	strb	r1, [r2, #0]
      for (int i=0; i<AI_NET_OUTPUT_SIZE*4; i++)
 8004b72:	d1f2      	bne.n	8004b5a <TEST_PostProcess+0x62a>
 8004b74:	e4eb      	b.n	800454e <TEST_PostProcess+0x1e>
        sprintf(conf_value, ".");
 8004b76:	f8a7 a000 	strh.w	sl, [r7]
 8004b7a:	e78a      	b.n	8004a92 <TEST_PostProcess+0x562>
 8004b7c:	20008d14 	.word	0x20008d14
 8004b80:	20000004 	.word	0x20000004
 8004b84:	20007718 	.word	0x20007718
 8004b88:	080294ac 	.word	0x080294ac
 8004b8c:	20007720 	.word	0x20007720
 8004b90:	42c80000 	.word	0x42c80000
 8004b94:	08028d28 	.word	0x08028d28
 8004b98:	08029404 	.word	0x08029404
 8004b9c:	08029434 	.word	0x08029434
 8004ba0:	08029400 	.word	0x08029400
      if((TestContext_Ptr->UartContext.uart_cmd_ongoing==0)|| (TestContext_Ptr->UartContext.uart_cmd_ongoing==1 && TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDCARD))
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f47f ad35 	bne.w	8004614 <TEST_PostProcess+0xe4>
        BSP_SD_DeInit(0);
 8004baa:	2000      	movs	r0, #0
 8004bac:	f006 fce8 	bl	800b580 <BSP_SD_DeInit>
        CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 8004bb0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8004bb2:	f7fc fc1f 	bl	80013f4 <CAMERA_Init>
        if(TestContext_Ptr->DumpContext.Dump_FrameSource == CAMERA_COLORBAR)
 8004bb6:	7923      	ldrb	r3, [r4, #4]
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	f000 8150 	beq.w	8004e5e <TEST_PostProcess+0x92e>
        while (!App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready);
 8004bbe:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8004bc0:	7d13      	ldrb	r3, [r2, #20]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0fc      	beq.n	8004bc0 <TEST_PostProcess+0x690>
        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0; /* Reset flag */
 8004bc6:	2000      	movs	r0, #0
 8004bc8:	7510      	strb	r0, [r2, #20]
        BSP_CAMERA_Resume(0);
 8004bca:	f005 fe5f 	bl	800a88c <BSP_CAMERA_Resume>
    TestContext_Ptr->DumpContext.dump_state = 0;
 8004bce:	2300      	movs	r3, #0
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8004bd0:	f8d4 2520 	ldr.w	r2, [r4, #1312]	; 0x520
    TestContext_Ptr->DumpContext.dump_state = 0;
 8004bd4:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8004bd8:	2a00      	cmp	r2, #0
 8004bda:	f43f ad5f 	beq.w	800469c <TEST_PostProcess+0x16c>
 8004bde:	f894 3526 	ldrb.w	r3, [r4, #1318]	; 0x526
 8004be2:	e51a      	b.n	800461a <TEST_PostProcess+0xea>
      const char *predicted_class_name = NN_OUTPUT_CLASS_LIST[predicted_class];
 8004be4:	49af      	ldr	r1, [pc, #700]	; (8004ea4 <TEST_PostProcess+0x974>)
      sprintf(tmp_msg, "%s/%s was missclassified as %s\n", class_path, image_name, predicted_class_name);
 8004be6:	463b      	mov	r3, r7
 8004be8:	9f02      	ldr	r7, [sp, #8]
 8004bea:	4642      	mov	r2, r8
      const char *predicted_class_name = NN_OUTPUT_CLASS_LIST[predicted_class];
 8004bec:	460d      	mov	r5, r1
 8004bee:	9103      	str	r1, [sp, #12]
      sprintf(tmp_msg, "%s/%s was missclassified as %s\n", class_path, image_name, predicted_class_name);
 8004bf0:	4630      	mov	r0, r6
 8004bf2:	49ad      	ldr	r1, [pc, #692]	; (8004ea8 <TEST_PostProcess+0x978>)
 8004bf4:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 8004bf8:	9500      	str	r5, [sp, #0]
 8004bfa:	f021 fc45 	bl	8026488 <siprintf>
      write_txt("missclassified.txt", tmp_msg, FA_WRITE | FA_OPEN_APPEND, App_Cxt_Ptr);
 8004bfe:	464b      	mov	r3, r9
 8004c00:	4631      	mov	r1, r6
 8004c02:	2232      	movs	r2, #50	; 0x32
 8004c04:	48a9      	ldr	r0, [pc, #676]	; (8004eac <TEST_PostProcess+0x97c>)
 8004c06:	f7fd f83b 	bl	8001c80 <write_txt>
    TestContext_Ptr->ValidationContext.valid_conf_matrix[TestContext_Ptr->ValidationContext.class_index][predicted_class]++;
 8004c0a:	f8d4 53bc 	ldr.w	r5, [r4, #956]	; 0x3bc
 8004c0e:	e641      	b.n	8004894 <TEST_PostProcess+0x364>
    double categorical_crossentropy = 10.0;
 8004c10:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8004c14:	e651      	b.n	80048ba <TEST_PostProcess+0x38a>
    Error_Handler();
 8004c16:	f000 faa9 	bl	800516c <Error_Handler>
 8004c1a:	e5ad      	b.n	8004778 <TEST_PostProcess+0x248>
      Error_Handler();
 8004c1c:	f000 faa6 	bl	800516c <Error_Handler>
 8004c20:	e59d      	b.n	800475e <TEST_PostProcess+0x22e>
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 8004c22:	4ea3      	ldr	r6, [pc, #652]	; (8004eb0 <TEST_PostProcess+0x980>)
 8004c24:	2202      	movs	r2, #2
      TestContext_Ptr->UartContext.uart_cmd_ongoing=0;//terminates the UART command processing
 8004c26:	f8c4 5520 	str.w	r5, [r4, #1312]	; 0x520
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004c2a:	f204 543c 	addw	r4, r4, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004c2e:	2180      	movs	r1, #128	; 0x80
 8004c30:	4630      	mov	r0, r6
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 8004c32:	7032      	strb	r2, [r6, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004c34:	f000 fa2a 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004c38:	2201      	movs	r2, #1
 8004c3a:	4631      	mov	r1, r6
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	f00e faa1 	bl	8013184 <HAL_UART_Transmit_DMA>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	f040 8097 	bne.w	8004d76 <TEST_PostProcess+0x846>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8004c48:	4620      	mov	r0, r4
 8004c4a:	f00e fccb 	bl	80135e4 <HAL_UART_GetState>
 8004c4e:	2820      	cmp	r0, #32
 8004c50:	d1fa      	bne.n	8004c48 <TEST_PostProcess+0x718>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8004c52:	220a      	movs	r2, #10
 8004c54:	4997      	ldr	r1, [pc, #604]	; (8004eb4 <TEST_PostProcess+0x984>)
 8004c56:	4620      	mov	r0, r4
 8004c58:	f00e fae6 	bl	8013228 <HAL_UART_Receive_DMA>
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	f43f ac99 	beq.w	8004594 <TEST_PostProcess+0x64>
    Error_Handler();
 8004c62:	f000 fa83 	bl	800516c <Error_Handler>
 8004c66:	e495      	b.n	8004594 <TEST_PostProcess+0x64>
        if(TestContext_Ptr->NonReg_FirstRun == 0)
 8004c68:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d179      	bne.n	8004d64 <TEST_PostProcess+0x834>
            if(dump_output_buff[i] != *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i))   
 8004c70:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004c72:	4e91      	ldr	r6, [pc, #580]	; (8004eb8 <TEST_PostProcess+0x988>)
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	edd6 4a00 	vldr	s9, [r6]
 8004c7a:	edd2 7a00 	vldr	s15, [r2]
 8004c7e:	ed96 5a01 	vldr	s10, [r6, #4]
 8004c82:	eef4 4a67 	vcmp.f32	s9, s15
 8004c86:	edd2 5a01 	vldr	s11, [r2, #4]
 8004c8a:	ed96 6a02 	vldr	s12, [r6, #8]
 8004c8e:	edd2 6a02 	vldr	s13, [r2, #8]
 8004c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c96:	ed96 7a03 	vldr	s14, [r6, #12]
              issue_ocurence =1;
 8004c9a:	eeb4 5a65 	vcmp.f32	s10, s11
            if(dump_output_buff[i] != *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i))   
 8004c9e:	edd2 7a03 	vldr	s15, [r2, #12]
 8004ca2:	bf14      	ite	ne
 8004ca4:	2301      	movne	r3, #1
 8004ca6:	2300      	moveq	r3, #0
              issue_ocurence =1;
 8004ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cac:	eeb4 6a66 	vcmp.f32	s12, s13
 8004cb0:	bf18      	it	ne
 8004cb2:	2301      	movne	r3, #1
 8004cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            if(dump_output_buff[i] != *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i))   
 8004cb8:	eeb4 7a67 	vcmp.f32	s14, s15
              issue_ocurence =1;
 8004cbc:	bf18      	it	ne
 8004cbe:	2301      	movne	r3, #1
            if(dump_output_buff[i] != *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i))   
 8004cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc4:	f000 80d2 	beq.w	8004e6c <TEST_PostProcess+0x93c>
            TestContext_Ptr->UartContext.uart_host_requested_dump_number = 0;//so to subsequently terminates the UART command processing
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f8c4 3528 	str.w	r3, [r4, #1320]	; 0x528
        if(TestContext_Ptr->DumpContext.dump_write_bufferPtr == (dump_intermediate_data_ping_buff + DUMP_INTERMEDIATE_DATA_BUFFER_SIZE - (BUFF_NAME_STRING_TOTAL_SIZE-TestContext_Ptr->Total_Char_Name_Size)))
 8004cce:	f8d4 2608 	ldr.w	r2, [r4, #1544]	; 0x608
 8004cd2:	4b7a      	ldr	r3, [pc, #488]	; (8004ebc <TEST_PostProcess+0x98c>)
 8004cd4:	6821      	ldr	r1, [r4, #0]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	4a79      	ldr	r2, [pc, #484]	; (8004ec0 <TEST_PostProcess+0x990>)
 8004cda:	1898      	adds	r0, r3, r2
 8004cdc:	4281      	cmp	r1, r0
 8004cde:	f000 80d4 	beq.w	8004e8a <TEST_PostProcess+0x95a>
        else if(TestContext_Ptr->DumpContext.dump_write_bufferPtr == (dump_intermediate_data_pong_buff + DUMP_INTERMEDIATE_DATA_BUFFER_SIZE - (BUFF_NAME_STRING_TOTAL_SIZE-TestContext_Ptr->Total_Char_Name_Size)))
 8004ce2:	4878      	ldr	r0, [pc, #480]	; (8004ec4 <TEST_PostProcess+0x994>)
 8004ce4:	4403      	add	r3, r0
 8004ce6:	4299      	cmp	r1, r3
 8004ce8:	f47f ac9c 	bne.w	8004624 <TEST_PostProcess+0xf4>
          TestContext_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 8004cec:	6022      	str	r2, [r4, #0]
 8004cee:	e499      	b.n	8004624 <TEST_PostProcess+0xf4>
        *(aTxBuffer) = cmd_status;
 8004cf0:	486f      	ldr	r0, [pc, #444]	; (8004eb0 <TEST_PostProcess+0x980>)
        TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 8004cf2:	f04f 0801 	mov.w	r8, #1
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	2180      	movs	r1, #128	; 0x80
        *(aTxBuffer) = cmd_status;
 8004cfa:	7007      	strb	r7, [r0, #0]
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004cfc:	f204 573c 	addw	r7, r4, #1340	; 0x53c
        TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 8004d00:	f884 8524 	strb.w	r8, [r4, #1316]	; 0x524
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004d04:	f000 f9c2 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004d08:	4869      	ldr	r0, [pc, #420]	; (8004eb0 <TEST_PostProcess+0x980>)
 8004d0a:	4642      	mov	r2, r8
 8004d0c:	4601      	mov	r1, r0
 8004d0e:	4638      	mov	r0, r7
 8004d10:	f00e fa38 	bl	8013184 <HAL_UART_Transmit_DMA>
 8004d14:	2800      	cmp	r0, #0
 8004d16:	f040 809f 	bne.w	8004e58 <TEST_PostProcess+0x928>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8004d1a:	4638      	mov	r0, r7
 8004d1c:	f00e fc62 	bl	80135e4 <HAL_UART_GetState>
 8004d20:	2820      	cmp	r0, #32
 8004d22:	d1fa      	bne.n	8004d1a <TEST_PostProcess+0x7ea>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8004d24:	220a      	movs	r2, #10
 8004d26:	4638      	mov	r0, r7
 8004d28:	4962      	ldr	r1, [pc, #392]	; (8004eb4 <TEST_PostProcess+0x984>)
 8004d2a:	f00e fa7d 	bl	8013228 <HAL_UART_Receive_DMA>
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	f040 8099 	bne.w	8004e66 <TEST_PostProcess+0x936>
        CAMERA_Disable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 8004d34:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8004d36:	f7fc fc75 	bl	8001624 <CAMERA_Disable_TestBar_Mode>
        App_Cxt_Ptr->Operating_Mode=NOMINAL;
 8004d3a:	2201      	movs	r2, #1
        TestContext_Ptr->UartContext.uart_cmd_ongoing=0;//returning to NOMINAL mode terminates the UART command processing  
 8004d3c:	2300      	movs	r3, #0
        App_Cxt_Ptr->Operating_Mode=NOMINAL;
 8004d3e:	702a      	strb	r2, [r5, #0]
        if(TestContext_Ptr->UartContext.uart_host_nonreg_run==1)
 8004d40:	f8d4 2538 	ldr.w	r2, [r4, #1336]	; 0x538
        TestContext_Ptr->UartContext.uart_cmd_ongoing=0;//returning to NOMINAL mode terminates the UART command processing  
 8004d44:	f8c4 3520 	str.w	r3, [r4, #1312]	; 0x520
        if(TestContext_Ptr->UartContext.uart_host_nonreg_run==1)
 8004d48:	2a01      	cmp	r2, #1
          App_Cxt_Ptr->run_loop = 0;
 8004d4a:	bf18      	it	ne
 8004d4c:	606b      	strne	r3, [r5, #4]
        if(TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDCARD)
 8004d4e:	f894 0526 	ldrb.w	r0, [r4, #1318]	; 0x526
          TestContext_Ptr->UartContext.uart_host_nonreg_run=0;
 8004d52:	bf08      	it	eq
 8004d54:	f8c4 3538 	streq.w	r3, [r4, #1336]	; 0x538
        if(TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDCARD)
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	f47f ac87 	bne.w	800466c <TEST_PostProcess+0x13c>
          BSP_SD_DeInit(0);/*Required in order to avoid subsequent call to Camera_Init() fct to fail*/
 8004d5e:	f006 fc0f 	bl	800b580 <BSP_SD_DeInit>
 8004d62:	e483      	b.n	800466c <TEST_PostProcess+0x13c>
        if(TestContext_Ptr->NonReg_FirstRun==1)
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	f040 8094 	bne.w	8004e92 <TEST_PostProcess+0x962>
          TestContext_Ptr->NonReg_FirstRun=0;
 8004d6a:	2300      	movs	r3, #0
  uint8_t cmd_status=CMD_COMPLETE_SUCCESS_EVT;
 8004d6c:	2702      	movs	r7, #2
 8004d6e:	4e52      	ldr	r6, [pc, #328]	; (8004eb8 <TEST_PostProcess+0x988>)
          TestContext_Ptr->NonReg_FirstRun=0;
 8004d70:	f8c4 3604 	str.w	r3, [r4, #1540]	; 0x604
 8004d74:	e7ab      	b.n	8004cce <TEST_PostProcess+0x79e>
      Error_Handler();
 8004d76:	f000 f9f9 	bl	800516c <Error_Handler>
 8004d7a:	e765      	b.n	8004c48 <TEST_PostProcess+0x718>
          sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8004d7c:	ed95 7a04 	vldr	s14, [r5, #16]
 8004d80:	af06      	add	r7, sp, #24
 8004d82:	eddf 7a51 	vldr	s15, [pc, #324]	; 8004ec8 <TEST_PostProcess+0x998>
          for(int i=0;i<strlen(msg);i++)
 8004d86:	f04f 0a00 	mov.w	sl, #0
 8004d8a:	f8df b124 	ldr.w	fp, [pc, #292]	; 8004eb0 <TEST_PostProcess+0x980>
          sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8004d8e:	4638      	mov	r0, r7
 8004d90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d94:	68ea      	ldr	r2, [r5, #12]
 8004d96:	494d      	ldr	r1, [pc, #308]	; (8004ecc <TEST_PostProcess+0x99c>)
          for(int i=0;i<strlen(msg);i++)
 8004d98:	46d9      	mov	r9, fp
 8004d9a:	46b8      	mov	r8, r7
          sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8004d9c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004da0:	ed8d 7b00 	vstr	d7, [sp]
 8004da4:	f021 fb70 	bl	8026488 <siprintf>
          for(int i=0;i<strlen(msg);i++)
 8004da8:	9702      	str	r7, [sp, #8]
 8004daa:	e003      	b.n	8004db4 <TEST_PostProcess+0x884>
            *(aTxBuffer + i) = msg[i];
 8004dac:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004db0:	f809 3b01 	strb.w	r3, [r9], #1
          for(int i=0;i<strlen(msg);i++)
 8004db4:	4638      	mov	r0, r7
 8004db6:	f7fb faf3 	bl	80003a0 <strlen>
 8004dba:	4550      	cmp	r0, sl
 8004dbc:	f10a 0a01 	add.w	sl, sl, #1
 8004dc0:	d8f4      	bhi.n	8004dac <TEST_PostProcess+0x87c>
          *(aTxBuffer + strlen(msg)) = 32;//Space
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	493a      	ldr	r1, [pc, #232]	; (8004eb0 <TEST_PostProcess+0x980>)
 8004dc6:	9003      	str	r0, [sp, #12]
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004dc8:	f204 583c 	addw	r8, r4, #1340	; 0x53c
          *(aTxBuffer + strlen(msg)) = 32;//Space
 8004dcc:	540a      	strb	r2, [r1, r0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004dce:	2202      	movs	r2, #2
 8004dd0:	2180      	movs	r1, #128	; 0x80
 8004dd2:	4837      	ldr	r0, [pc, #220]	; (8004eb0 <TEST_PostProcess+0x980>)
 8004dd4:	f000 f95a 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
          Uart_Tx(TestContext_Ptr, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), strlen(msg)+1);
 8004dd8:	9b03      	ldr	r3, [sp, #12]
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004dda:	4935      	ldr	r1, [pc, #212]	; (8004eb0 <TEST_PostProcess+0x980>)
 8004ddc:	4640      	mov	r0, r8
          Uart_Tx(TestContext_Ptr, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), strlen(msg)+1);
 8004dde:	3301      	adds	r3, #1
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	f00e f9cf 	bl	8013184 <HAL_UART_Transmit_DMA>
 8004de6:	2800      	cmp	r0, #0
 8004de8:	d159      	bne.n	8004e9e <TEST_PostProcess+0x96e>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8004dea:	4640      	mov	r0, r8
 8004dec:	f00e fbfa 	bl	80135e4 <HAL_UART_GetState>
 8004df0:	2820      	cmp	r0, #32
 8004df2:	d1fa      	bne.n	8004dea <TEST_PostProcess+0x8ba>
          sprintf(msg, "Inference: %ldms", App_Cxt_Ptr->nn_inference_time);
 8004df4:	68aa      	ldr	r2, [r5, #8]
 8004df6:	4638      	mov	r0, r7
 8004df8:	4935      	ldr	r1, [pc, #212]	; (8004ed0 <TEST_PostProcess+0x9a0>)
 8004dfa:	f021 fb45 	bl	8026488 <siprintf>
          for(int i=0;i<strlen(msg);i++)
 8004dfe:	2300      	movs	r3, #0
 8004e00:	469a      	mov	sl, r3
 8004e02:	e005      	b.n	8004e10 <TEST_PostProcess+0x8e0>
            *(aTxBuffer + i) = msg[i];
 8004e04:	9a02      	ldr	r2, [sp, #8]
 8004e06:	f812 3b01 	ldrb.w	r3, [r2], #1
 8004e0a:	9202      	str	r2, [sp, #8]
 8004e0c:	f80b 3b01 	strb.w	r3, [fp], #1
          for(int i=0;i<strlen(msg);i++)
 8004e10:	4638      	mov	r0, r7
 8004e12:	f7fb fac5 	bl	80003a0 <strlen>
 8004e16:	4550      	cmp	r0, sl
 8004e18:	4681      	mov	r9, r0
 8004e1a:	f10a 0a01 	add.w	sl, sl, #1
 8004e1e:	d8f1      	bhi.n	8004e04 <TEST_PostProcess+0x8d4>
          *(aTxBuffer + strlen(msg)) = 13;//CR
 8004e20:	4a23      	ldr	r2, [pc, #140]	; (8004eb0 <TEST_PostProcess+0x980>)
 8004e22:	230d      	movs	r3, #13
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004e24:	2180      	movs	r1, #128	; 0x80
          *(aTxBuffer + strlen(msg)) = 13;//CR
 8004e26:	5413      	strb	r3, [r2, r0]
          *(aTxBuffer + strlen(msg)+1) = 10;//LF
 8004e28:	eb02 0a00 	add.w	sl, r2, r0
 8004e2c:	230a      	movs	r3, #10
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004e2e:	2202      	movs	r2, #2
 8004e30:	481f      	ldr	r0, [pc, #124]	; (8004eb0 <TEST_PostProcess+0x980>)
          *(aTxBuffer + strlen(msg)+1) = 10;//LF
 8004e32:	f88a 3001 	strb.w	r3, [sl, #1]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004e36:	f000 f929 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
          Uart_Tx(TestContext_Ptr, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), strlen(msg)+2);
 8004e3a:	f109 0202 	add.w	r2, r9, #2
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004e3e:	491c      	ldr	r1, [pc, #112]	; (8004eb0 <TEST_PostProcess+0x980>)
 8004e40:	4640      	mov	r0, r8
 8004e42:	b292      	uxth	r2, r2
 8004e44:	f00e f99e 	bl	8013184 <HAL_UART_Transmit_DMA>
 8004e48:	bb30      	cbnz	r0, 8004e98 <TEST_PostProcess+0x968>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8004e4a:	4640      	mov	r0, r8
 8004e4c:	f00e fbca 	bl	80135e4 <HAL_UART_GetState>
 8004e50:	2820      	cmp	r0, #32
 8004e52:	d1fa      	bne.n	8004e4a <TEST_PostProcess+0x91a>
 8004e54:	f7ff bbf3 	b.w	800463e <TEST_PostProcess+0x10e>
      Error_Handler();
 8004e58:	f000 f988 	bl	800516c <Error_Handler>
 8004e5c:	e75d      	b.n	8004d1a <TEST_PostProcess+0x7ea>
          CAMERA_Enable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 8004e5e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8004e60:	f7fc fbac 	bl	80015bc <CAMERA_Enable_TestBar_Mode>
 8004e64:	e6ab      	b.n	8004bbe <TEST_PostProcess+0x68e>
    Error_Handler();
 8004e66:	f000 f981 	bl	800516c <Error_Handler>
 8004e6a:	e763      	b.n	8004d34 <TEST_PostProcess+0x804>
            if(dump_output_buff[i] != *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i))   
 8004e6c:	ed92 7a04 	vldr	s14, [r2, #16]
 8004e70:	edd6 7a04 	vldr	s15, [r6, #16]
 8004e74:	eeb4 7a67 	vcmp.f32	s14, s15
 8004e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e7c:	f47f af24 	bne.w	8004cc8 <TEST_PostProcess+0x798>
          if(issue_ocurence == 1)
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f47f af21 	bne.w	8004cc8 <TEST_PostProcess+0x798>
  uint8_t cmd_status=CMD_COMPLETE_SUCCESS_EVT;
 8004e86:	2702      	movs	r7, #2
 8004e88:	e721      	b.n	8004cce <TEST_PostProcess+0x79e>
          TestContext_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_pong_buff;
 8004e8a:	4b0e      	ldr	r3, [pc, #56]	; (8004ec4 <TEST_PostProcess+0x994>)
 8004e8c:	6023      	str	r3, [r4, #0]
 8004e8e:	f7ff bbc9 	b.w	8004624 <TEST_PostProcess+0xf4>
  uint8_t cmd_status=CMD_COMPLETE_SUCCESS_EVT;
 8004e92:	2702      	movs	r7, #2
 8004e94:	4e08      	ldr	r6, [pc, #32]	; (8004eb8 <TEST_PostProcess+0x988>)
 8004e96:	e71a      	b.n	8004cce <TEST_PostProcess+0x79e>
      Error_Handler();
 8004e98:	f000 f968 	bl	800516c <Error_Handler>
 8004e9c:	e7d5      	b.n	8004e4a <TEST_PostProcess+0x91a>
 8004e9e:	f000 f965 	bl	800516c <Error_Handler>
 8004ea2:	e7a2      	b.n	8004dea <TEST_PostProcess+0x8ba>
 8004ea4:	20000004 	.word	0x20000004
 8004ea8:	080293e0 	.word	0x080293e0
 8004eac:	080290c0 	.word	0x080290c0
 8004eb0:	30000280 	.word	0x30000280
 8004eb4:	30000300 	.word	0x30000300
 8004eb8:	d0cb08a0 	.word	0xd0cb08a0
 8004ebc:	00045814 	.word	0x00045814
 8004ec0:	d0cb0bc0 	.word	0xd0cb0bc0
 8004ec4:	d0cf6480 	.word	0xd0cf6480
 8004ec8:	42c80000 	.word	0x42c80000
 8004ecc:	08028d28 	.word	0x08028d28
 8004ed0:	08028d34 	.word	0x08028d34

08004ed4 <HAL_UART_ErrorCallback>:
 *
 * @param huart pointer to UART handle
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
  while(1);
 8004ed4:	e7fe      	b.n	8004ed4 <HAL_UART_ErrorCallback>
 8004ed6:	bf00      	nop

08004ed8 <UTILS_Init>:
* @brief  UTILS Initialization
* @param  Utils_Context_Ptr  Pointer to Utilities context
* @retval None
*/
void UTILS_Init(UtilsContext_TypeDef *Utils_Context_Ptr)
{
 8004ed8:	b510      	push	{r4, lr}
 8004eda:	4603      	mov	r3, r0
  Utils_Context_Ptr->JoystickContext.joyState=JOY_NONE;
 8004edc:	2400      	movs	r4, #0
  Utils_Context_Ptr->JoystickContext.lcdBrightness=LCD_BRIGHTNESS_MID;
 8004ede:	2232      	movs	r2, #50	; 0x32
  Utils_Context_Ptr->JoystickContext.joyState=JOY_NONE;
 8004ee0:	f883 4028 	strb.w	r4, [r3, #40]	; 0x28
  Utils_Context_Init(Utils_Context_Ptr);
  
  /*LEDs Init*/
  BSP_LED_Init(LED_GREEN);
 8004ee4:	4620      	mov	r0, r4
  Utils_Context_Ptr->JoystickContext.lcdBrightness=LCD_BRIGHTNESS_MID;
 8004ee6:	635a      	str	r2, [r3, #52]	; 0x34
  Utils_Context_Ptr->JoystickContext.camBrightness=0;/* Mid-level camera brightness. */
 8004ee8:	e9c3 440b 	strd	r4, r4, [r3, #44]	; 0x2c
  Utils_Context_Ptr->ExecTimingContext.tcapturestart2= 0;
 8004eec:	e9c3 4406 	strd	r4, r4, [r3, #24]
  Utils_Context_Ptr->ExecTimingContext.tcapturestop=0; 
 8004ef0:	e9c3 4408 	strd	r4, r4, [r3, #32]
  BSP_LED_Init(LED_GREEN);
 8004ef4:	f004 fbce 	bl	8009694 <BSP_LED_Init>
  BSP_LED_Init(LED_ORANGE);
 8004ef8:	2001      	movs	r0, #1
 8004efa:	f004 fbcb 	bl	8009694 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8004efe:	2002      	movs	r0, #2
 8004f00:	f004 fbc8 	bl	8009694 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8004f04:	2003      	movs	r0, #3
 8004f06:	f004 fbc5 	bl	8009694 <BSP_LED_Init>
  
  /* Activate joystick. */
  BSP_JOY_Init(JOY1, JOY_MODE_GPIO,JOY_ALL);
 8004f0a:	4621      	mov	r1, r4
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	221f      	movs	r2, #31
 8004f10:	f004 fc86 	bl	8009820 <BSP_JOY_Init>
  
  /* Configure the Wakeup push-button in GPIO Mode */
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8004f14:	4621      	mov	r1, r4
 8004f16:	4620      	mov	r0, r4
}
 8004f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8004f1c:	f004 bc1c 	b.w	8009758 <BSP_PB_Init>

08004f20 <UTILS_GetTimeStamp>:
* @param  Utils_Context_Ptr  Pointer to Utilities context
* @retval Time stamp
*/
uint32_t UTILS_GetTimeStamp(UtilsContext_TypeDef *Utils_Context_Ptr)
{
  return HAL_GetTick();
 8004f20:	f006 bcac 	b.w	800b87c <HAL_GetTick>

08004f24 <UTILS_Dma2d_Memcpy>:
 * @param red_blue_swap boolean flag for red-blue channel swap, 0 if no swap, else 1
*/
void UTILS_Dma2d_Memcpy(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize,
                        uint32_t rowStride, uint32_t input_color_format, uint32_t output_color_format, int pfc,
                        int red_blue_swap)
{
 8004f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f28:	b087      	sub	sp, #28
 8004f2a:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8004f2e:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 8004f32:	f1b8 0f04 	cmp.w	r8, #4
 8004f36:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8004f40:	e9dd 7912 	ldrd	r7, r9, [sp, #72]	; 0x48
 8004f44:	e9dd 5615 	ldrd	r5, r6, [sp, #84]	; 0x54
 8004f48:	9305      	str	r3, [sp, #20]
 8004f4a:	d82c      	bhi.n	8004fa6 <UTILS_Dma2d_Memcpy+0x82>
  uint32_t bytepp = GetBytesPerPixel(output_color_format);

  uint32_t destination = (uint32_t)pDst + (y * rowStride + x) * bytepp;
 8004f4c:	fb07 2200 	mla	r2, r7, r0, r2
 8004f50:	4823      	ldr	r0, [pc, #140]	; (8004fe0 <UTILS_Dma2d_Memcpy+0xbc>)
 8004f52:	f850 0028 	ldr.w	r0, [r0, r8, lsl #2]
 8004f56:	fb00 f302 	mul.w	r3, r0, r2
 8004f5a:	9302      	str	r3, [sp, #8]
  uint32_t source = (uint32_t)pSrc;

  HAL_DMA2D_DeInit(&hlcd_dma2d);
 8004f5c:	4c21      	ldr	r4, [pc, #132]	; (8004fe4 <UTILS_Dma2d_Memcpy+0xc0>)

  /*##-2- DMA2D Callbacks Configuration ######################################*/
  hlcd_dma2d.XferCpltCallback = NULL;

  /*##-3- Foreground Configuration ###########################################*/
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8004f5e:	f04f 0a01 	mov.w	sl, #1
  hlcd_dma2d.Init.OutputOffset = rowStride - xsize;
 8004f62:	eba7 070b 	sub.w	r7, r7, fp
  HAL_DMA2D_DeInit(&hlcd_dma2d);
 8004f66:	4620      	mov	r0, r4
 8004f68:	f008 fb32 	bl	800d5d0 <HAL_DMA2D_DeInit>
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 8004f6c:	3d00      	subs	r5, #0
  hlcd_dma2d.XferCpltCallback = NULL;
 8004f6e:	f04f 0300 	mov.w	r3, #0
  hlcd_dma2d.LayerCfg[1].InputColorMode = input_color_format;
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004f72:	4620      	mov	r0, r4
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 8004f74:	bf18      	it	ne
 8004f76:	2501      	movne	r5, #1
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;
 8004f78:	1e31      	subs	r1, r6, #0
  hlcd_dma2d.XferCpltCallback = NULL;
 8004f7a:	6223      	str	r3, [r4, #32]
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;
 8004f7c:	bf18      	it	ne
 8004f7e:	2101      	movne	r1, #1
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 8004f80:	042d      	lsls	r5, r5, #16
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8004f82:	6463      	str	r3, [r4, #68]	; 0x44
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8004f84:	23ff      	movs	r3, #255	; 0xff
  hlcd_dma2d.Init.ColorMode = output_color_format;
 8004f86:	f8c4 8008 	str.w	r8, [r4, #8]
  hlcd_dma2d.LayerCfg[1].InputColorMode = input_color_format;
 8004f8a:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
  hlcd_dma2d.Init.OutputOffset = rowStride - xsize;
 8004f8e:	60e7      	str	r7, [r4, #12]
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 8004f90:	6065      	str	r5, [r4, #4]
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;
 8004f92:	65a1      	str	r1, [r4, #88]	; 0x58
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8004f94:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8004f98:	6523      	str	r3, [r4, #80]	; 0x50
  if (HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004f9a:	f008 fad7 	bl	800d54c <HAL_DMA2D_Init>
 8004f9e:	b128      	cbz	r0, 8004fac <UTILS_Dma2d_Memcpy+0x88>
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
      }
    }
  }
}
 8004fa0:	b007      	add	sp, #28
 8004fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	9302      	str	r3, [sp, #8]
 8004faa:	e7d7      	b.n	8004f5c <UTILS_Dma2d_Memcpy+0x38>
    if (HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8004fac:	4651      	mov	r1, sl
 8004fae:	4620      	mov	r0, r4
 8004fb0:	f008 fd24 	bl	800d9fc <HAL_DMA2D_ConfigLayer>
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	d1f3      	bne.n	8004fa0 <UTILS_Dma2d_Memcpy+0x7c>
      if (HAL_DMA2D_Start(&hlcd_dma2d, source, destination, xsize, ysize) == HAL_OK)
 8004fb8:	9b02      	ldr	r3, [sp, #8]
 8004fba:	4620      	mov	r0, r4
 8004fbc:	9a04      	ldr	r2, [sp, #16]
 8004fbe:	9903      	ldr	r1, [sp, #12]
 8004fc0:	441a      	add	r2, r3
 8004fc2:	9b05      	ldr	r3, [sp, #20]
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	465b      	mov	r3, fp
 8004fc8:	f008 fb88 	bl	800d6dc <HAL_DMA2D_Start>
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	d1e7      	bne.n	8004fa0 <UTILS_Dma2d_Memcpy+0x7c>
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
 8004fd0:	211e      	movs	r1, #30
 8004fd2:	4620      	mov	r0, r4
}
 8004fd4:	b007      	add	sp, #28
 8004fd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
 8004fda:	f008 bbdb 	b.w	800d794 <HAL_DMA2D_PollForTransfer>
 8004fde:	bf00      	nop
 8004fe0:	080294d4 	.word	0x080294d4
 8004fe4:	2000a044 	.word	0x2000a044

08004fe8 <UTILS_Joystick_Check>:
void UTILS_Joystick_Check(UtilsContext_TypeDef *Utils_Context_Ptr)
{
  JoystickContext_TypeDef* Joystick_Ctx_Ptr=&Utils_Context_Ptr->JoystickContext;
  
  /* Get the joystick state. */
  Joystick_Ctx_Ptr->joyState = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8004fe8:	2100      	movs	r1, #0
{
 8004fea:	b538      	push	{r3, r4, r5, lr}
 8004fec:	4604      	mov	r4, r0
  Joystick_Ctx_Ptr->joyState = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8004fee:	4608      	mov	r0, r1
 8004ff0:	f004 fcda 	bl	80099a8 <BSP_JOY_GetState>
 8004ff4:	b2c0      	uxtb	r0, r0

  switch (Joystick_Ctx_Ptr->joyState)
 8004ff6:	1e83      	subs	r3, r0, #2
  Joystick_Ctx_Ptr->joyState = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8004ff8:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  switch (Joystick_Ctx_Ptr->joyState)
 8004ffc:	2b0e      	cmp	r3, #14
 8004ffe:	d809      	bhi.n	8005014 <UTILS_Joystick_Check+0x2c>
 8005000:	e8df f003 	tbb	[pc, r3]
 8005004:	0829082f 	.word	0x0829082f
 8005008:	08230808 	.word	0x08230808
 800500c:	08080808 	.word	0x08080808
 8005010:	0808      	.short	0x0808
 8005012:	1c          	.byte	0x1c
 8005013:	00          	.byte	0x00

    default:
      break;
  }

  if ((Joystick_Ctx_Ptr->joyState == JOY_UP) || (Joystick_Ctx_Ptr->joyState == JOY_DOWN) || (Joystick_Ctx_Ptr->joyState == JOY_LEFT) || (Joystick_Ctx_Ptr->joyState == JOY_RIGHT))
 8005014:	2810      	cmp	r0, #16
 8005016:	d817      	bhi.n	8005048 <UTILS_Joystick_Check+0x60>
 8005018:	4b1b      	ldr	r3, [pc, #108]	; (8005088 <UTILS_Joystick_Check+0xa0>)
 800501a:	4103      	asrs	r3, r0
 800501c:	07db      	lsls	r3, r3, #31
 800501e:	d429      	bmi.n	8005074 <UTILS_Joystick_Check+0x8c>
  {
    /* Execute the change. */
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
 8005020:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005022:	2000      	movs	r0, #0
 8005024:	f005 fc42 	bl	800a8ac <BSP_CAMERA_SetBrightness>
    BSP_CAMERA_SetContrast(0, Joystick_Ctx_Ptr->camContrast);
 8005028:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800502a:	2000      	movs	r0, #0
 800502c:	f005 fc62 	bl	800a8f4 <BSP_CAMERA_SetContrast>
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
 8005030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005032:	2000      	movs	r0, #0
    /* Restore the default values. */
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
    BSP_CAMERA_SetContrast(0, Joystick_Ctx_Ptr->camContrast);
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
  }
}
 8005034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
 8005038:	f006 ba8e 	b.w	800b558 <BSP_LCD_SetBrightness>
      if (Joystick_Ctx_Ptr->lcdBrightness < LCD_BRIGHTNESS_MAX)
 800503c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800503e:	2b63      	cmp	r3, #99	; 0x63
 8005040:	dd15      	ble.n	800506e <UTILS_Joystick_Check+0x86>
        Joystick_Ctx_Ptr->joyState = JOY_NONE; /* Cancel LCD brightness change. */
 8005042:	2300      	movs	r3, #0
 8005044:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 8005048:	bd38      	pop	{r3, r4, r5, pc}
      if (Joystick_Ctx_Ptr->camContrast < CAMERA_CONTRAST_MAX)
 800504a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800504c:	2b03      	cmp	r3, #3
 800504e:	dcf8      	bgt.n	8005042 <UTILS_Joystick_Check+0x5a>
        Joystick_Ctx_Ptr->camContrast++;
 8005050:	3301      	adds	r3, #1
 8005052:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005054:	e7e4      	b.n	8005020 <UTILS_Joystick_Check+0x38>
      if (Joystick_Ctx_Ptr->camContrast > CAMERA_CONTRAST_MIN)
 8005056:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005058:	1cda      	adds	r2, r3, #3
 800505a:	dbf2      	blt.n	8005042 <UTILS_Joystick_Check+0x5a>
        Joystick_Ctx_Ptr->camContrast--;
 800505c:	3b01      	subs	r3, #1
 800505e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005060:	e7de      	b.n	8005020 <UTILS_Joystick_Check+0x38>
      if (Joystick_Ctx_Ptr->lcdBrightness > LCD_BRIGHTNESS_MIN)
 8005062:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005064:	2b00      	cmp	r3, #0
 8005066:	ddec      	ble.n	8005042 <UTILS_Joystick_Check+0x5a>
        Joystick_Ctx_Ptr->lcdBrightness -= LCD_BRIGHTNESS_STEP;
 8005068:	3b0a      	subs	r3, #10
 800506a:	6363      	str	r3, [r4, #52]	; 0x34
 800506c:	e7d8      	b.n	8005020 <UTILS_Joystick_Check+0x38>
        Joystick_Ctx_Ptr->lcdBrightness += LCD_BRIGHTNESS_STEP;
 800506e:	330a      	adds	r3, #10
 8005070:	6363      	str	r3, [r4, #52]	; 0x34
 8005072:	e7d5      	b.n	8005020 <UTILS_Joystick_Check+0x38>
  else if (Joystick_Ctx_Ptr->joyState == JOY_SEL)
 8005074:	2801      	cmp	r0, #1
 8005076:	d1e7      	bne.n	8005048 <UTILS_Joystick_Check+0x60>
    Joystick_Ctx_Ptr->camContrast = 0;     /* Mid-level camera contrast. */
 8005078:	2500      	movs	r5, #0
    Joystick_Ctx_Ptr->lcdBrightness = LCD_BRIGHTNESS_MID;       /* Mid-level LCD brightness. */
 800507a:	2332      	movs	r3, #50	; 0x32
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
 800507c:	4629      	mov	r1, r5
 800507e:	4628      	mov	r0, r5
    Joystick_Ctx_Ptr->lcdBrightness = LCD_BRIGHTNESS_MID;       /* Mid-level LCD brightness. */
 8005080:	6363      	str	r3, [r4, #52]	; 0x34
    Joystick_Ctx_Ptr->camBrightness = 0; /* Mid-level camera brightness. */
 8005082:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
 8005086:	e7cd      	b.n	8005024 <UTILS_Joystick_Check+0x3c>
 8005088:	fffefeeb 	.word	0xfffefeeb

0800508c <UTILS_DCache_Coherency_Maintenance>:
 * @retval None
 */
void UTILS_DCache_Coherency_Maintenance(uint32_t *mem_addr, int32_t mem_size, DCache_Coherency_TypeDef Maintenance_operation)
{
  /*Check alignement on 32-bytes for the memory adress and check that the memory size is multiple of 32-bytes*/
  if(((uint32_t)mem_addr%32 != 0) || (mem_size%32 != 0))
 800508c:	ea40 0c01 	orr.w	ip, r0, r1
 8005090:	4603      	mov	r3, r0
 8005092:	f01c 0f1f 	tst.w	ip, #31
 8005096:	d104      	bne.n	80050a2 <UTILS_DCache_Coherency_Maintenance+0x16>
    while(1);
  
  if(Maintenance_operation == INVALIDATE)
 8005098:	2a01      	cmp	r2, #1
 800509a:	d003      	beq.n	80050a4 <UTILS_DCache_Coherency_Maintenance+0x18>
  {
    SCB_InvalidateDCache_by_Addr((void*)mem_addr, mem_size);
  }
  else if(Maintenance_operation == CLEAN)
 800509c:	2a02      	cmp	r2, #2
 800509e:	d015      	beq.n	80050cc <UTILS_DCache_Coherency_Maintenance+0x40>
  {
    SCB_CleanDCache_by_Addr((void *)mem_addr, mem_size);
  }
}
 80050a0:	4770      	bx	lr
    while(1);
 80050a2:	e7fe      	b.n	80050a2 <UTILS_DCache_Coherency_Maintenance+0x16>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80050a4:	f3bf 8f4f 	dsb	sy
    uint32_t op_addr = (uint32_t)addr;
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
 80050a8:	2900      	cmp	r1, #0
 80050aa:	dd0a      	ble.n	80050c2 <UTILS_DCache_Coherency_Maintenance+0x36>
 80050ac:	1e4a      	subs	r2, r1, #1
 80050ae:	3020      	adds	r0, #32
      SCB->DCIMVAC = op_addr;
 80050b0:	490e      	ldr	r1, [pc, #56]	; (80050ec <UTILS_DCache_Coherency_Maintenance+0x60>)
 80050b2:	f022 021f 	bic.w	r2, r2, #31
 80050b6:	4402      	add	r2, r0
 80050b8:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80050bc:	3320      	adds	r3, #32
    while (op_size > 0) {
 80050be:	4293      	cmp	r3, r2
 80050c0:	d1fa      	bne.n	80050b8 <UTILS_DCache_Coherency_Maintenance+0x2c>
 80050c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80050c6:	f3bf 8f6f 	isb	sy
}
 80050ca:	4770      	bx	lr
  __ASM volatile ("dsb 0xF":::"memory");
 80050cc:	f3bf 8f4f 	dsb	sy
    uint32_t op_addr = (uint32_t) addr;
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
 80050d0:	2900      	cmp	r1, #0
 80050d2:	ddf6      	ble.n	80050c2 <UTILS_DCache_Coherency_Maintenance+0x36>
 80050d4:	1e4a      	subs	r2, r1, #1
 80050d6:	3020      	adds	r0, #32
      SCB->DCCMVAC = op_addr;
 80050d8:	4904      	ldr	r1, [pc, #16]	; (80050ec <UTILS_DCache_Coherency_Maintenance+0x60>)
 80050da:	f022 021f 	bic.w	r2, r2, #31
 80050de:	4402      	add	r2, r0
 80050e0:	f8c1 3268 	str.w	r3, [r1, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 80050e4:	3320      	adds	r3, #32
    while (op_size > 0) {
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d1fa      	bne.n	80050e0 <UTILS_DCache_Coherency_Maintenance+0x54>
 80050ea:	e7ea      	b.n	80050c2 <UTILS_DCache_Coherency_Maintenance+0x36>
 80050ec:	e000ed00 	.word	0xe000ed00

080050f0 <UTILS_Bubblesort>:
void UTILS_Bubblesort(float *prob, int *classes, int size)
{
  float p;
  int c;

  for (int i = 0; i < size; i++)
 80050f0:	2a00      	cmp	r2, #0
 80050f2:	dd25      	ble.n	8005140 <UTILS_Bubblesort+0x50>
{
 80050f4:	b570      	push	{r4, r5, r6, lr}
 80050f6:	f1a0 0e04 	sub.w	lr, r0, #4
 80050fa:	1e56      	subs	r6, r2, #1
  {
    for (int ii = 0; ii < size - i - 1; ii++)
 80050fc:	eb0e 0e82 	add.w	lr, lr, r2, lsl #2
 8005100:	b1ee      	cbz	r6, 800513e <UTILS_Bubblesort+0x4e>
 8005102:	460b      	mov	r3, r1
 8005104:	f100 0c04 	add.w	ip, r0, #4
 8005108:	4602      	mov	r2, r0
    {
      if (prob[ii] < prob[ii + 1])
 800510a:	ecf2 7a01 	vldmia	r2!, {s15}
 800510e:	ecbc 7a01 	vldmia	ip!, {s14}
 8005112:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800511a:	d507      	bpl.n	800512c <UTILS_Bubblesort+0x3c>
      {
        p = prob[ii];
        prob[ii] = prob[ii + 1];
        prob[ii + 1] = p;
        c = classes[ii];
        classes[ii] = classes[ii + 1];
 800511c:	e9d3 4500 	ldrd	r4, r5, [r3]
        prob[ii] = prob[ii + 1];
 8005120:	ed02 7a01 	vstr	s14, [r2, #-4]
        prob[ii + 1] = p;
 8005124:	ed4c 7a01 	vstr	s15, [ip, #-4]
        classes[ii] = classes[ii + 1];
 8005128:	e9c3 5400 	strd	r5, r4, [r3]
    for (int ii = 0; ii < size - i - 1; ii++)
 800512c:	4572      	cmp	r2, lr
 800512e:	f103 0304 	add.w	r3, r3, #4
 8005132:	d1ea      	bne.n	800510a <UTILS_Bubblesort+0x1a>
  for (int i = 0; i < size; i++)
 8005134:	3e01      	subs	r6, #1
 8005136:	f1ae 0e04 	sub.w	lr, lr, #4
    for (int ii = 0; ii < size - i - 1; ii++)
 800513a:	2e00      	cmp	r6, #0
 800513c:	d1e1      	bne.n	8005102 <UTILS_Bubblesort+0x12>
        classes[ii + 1] = c;
      }
    }
  }
}
 800513e:	bd70      	pop	{r4, r5, r6, pc}
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop

08005144 <UTILS_Compute_ExecutionTiming>:
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
  
#if MEMORY_SCHEME == FULL_INTERNAL_MEM_OPT  
  UtilsContext_Ptr->ExecTimingContext.Tfps =UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PVC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_RESIZE] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE];
#elif MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT 
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 8005144:	6901      	ldr	r1, [r0, #16]
 8005146:	6882      	ldr	r2, [r0, #8]
{
 8005148:	b430      	push	{r4, r5}
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
 800514a:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 800514e:	440a      	add	r2, r1
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
 8005150:	1b1b      	subs	r3, r3, r4
  AppContext_TypeDef *App_Cxt_Ptr=UtilsContext_Ptr->AppCtxPtr;
 8005152:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 8005154:	4293      	cmp	r3, r2
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
 8005156:	6003      	str	r3, [r0, #0]
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 8005158:	d203      	bcs.n	8005162 <UTILS_Compute_ExecutionTiming+0x1e>
    UtilsContext_Ptr->ExecTimingContext.Tfps = UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PVC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_RESIZE] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE];
 800515a:	68c3      	ldr	r3, [r0, #12]
 800515c:	6845      	ldr	r5, [r0, #4]
 800515e:	442b      	add	r3, r5
 8005160:	4413      	add	r3, r2
 8005162:	6143      	str	r3, [r0, #20]
  else
    UtilsContext_Ptr->ExecTimingContext.Tfps =  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE];
#endif
  
  App_Cxt_Ptr->nn_inference_time=UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE];
 8005164:	60a1      	str	r1, [r4, #8]
}
 8005166:	bc30      	pop	{r4, r5}
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop

0800516c <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void Error_Handler(void)
{
 800516c:	b508      	push	{r3, lr}
  BSP_LED_Off(LED_GREEN);
 800516e:	2000      	movs	r0, #0
 8005170:	f004 fad0 	bl	8009714 <BSP_LED_Off>
  BSP_LED_Off(LED_ORANGE);
 8005174:	2001      	movs	r0, #1
 8005176:	f004 facd 	bl	8009714 <BSP_LED_Off>
  BSP_LED_Off(LED_RED);
 800517a:	2002      	movs	r0, #2
 800517c:	f004 faca 	bl	8009714 <BSP_LED_Off>
  BSP_LED_Off(LED_BLUE);
 8005180:	2003      	movs	r0, #3
 8005182:	f004 fac7 	bl	8009714 <BSP_LED_Off>

  /* Turn LED RED on */
  BSP_LED_On(LED_RED);
 8005186:	2002      	movs	r0, #2
 8005188:	f004 fab2 	bl	80096f0 <BSP_LED_On>
  while (1)
 800518c:	e7fe      	b.n	800518c <Error_Handler+0x20>
 800518e:	bf00      	nop

08005190 <main>:
{
 8005190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005194:	b0c0      	sub	sp, #256	; 0x100
  HAL_MPU_Disable();
 8005196:	f006 fc1d 	bl	800b9d4 <HAL_MPU_Disable>
  MPU_InitStruct.BaseAddress = 0xD0000000;
 800519a:	f04f 4050 	mov.w	r0, #3489660928	; 0xd0000000
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800519e:	2101      	movs	r1, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80051a0:	4ac0      	ldr	r2, [pc, #768]	; (80054a4 <main+0x314>)
 80051a2:	4bc1      	ldr	r3, [pc, #772]	; (80054a8 <main+0x318>)
  MPU_InitStruct.BaseAddress = 0xD0000000;
 80051a4:	902e      	str	r0, [sp, #184]	; 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80051a6:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80051a8:	f8ad 10b4 	strh.w	r1, [sp, #180]	; 0xb4
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80051ac:	e9cd 232f 	strd	r2, r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80051b0:	f006 fc2e 	bl	800ba10 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80051b4:	2004      	movs	r0, #4
 80051b6:	f006 fc1b 	bl	800b9f0 <HAL_MPU_Enable>
 80051ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80051be:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80051c2:	48ba      	ldr	r0, [pc, #744]	; (80054ac <main+0x31c>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	f8c0 2250 	str.w	r2, [r0, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80051ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80051ce:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80051d2:	6943      	ldr	r3, [r0, #20]
 80051d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051d8:	6143      	str	r3, [r0, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80051da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80051de:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80051e2:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80051e6:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80051ea:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80051ee:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80051f2:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80051f6:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 80051fa:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80051fc:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005200:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005202:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
 8005206:	3b01      	subs	r3, #1
 8005208:	1c5f      	adds	r7, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800520a:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 800520e:	d1f8      	bne.n	8005202 <main+0x72>
    } while(sets-- != 0U);
 8005210:	3c20      	subs	r4, #32
 8005212:	f114 0f20 	cmn.w	r4, #32
 8005216:	d1f1      	bne.n	80051fc <main+0x6c>
 8005218:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800521c:	6943      	ldr	r3, [r0, #20]
 800521e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005222:	6143      	str	r3, [r0, #20]
 8005224:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005228:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800522c:	f006 faea 	bl	800b804 <HAL_Init>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8005230:	2004      	movs	r0, #4
 8005232:	f00a f9a7 	bl	800f584 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005236:	4b9e      	ldr	r3, [pc, #632]	; (80054b0 <main+0x320>)
 8005238:	2100      	movs	r1, #0
 800523a:	4a9e      	ldr	r2, [pc, #632]	; (80054b4 <main+0x324>)
 800523c:	9107      	str	r1, [sp, #28]
 800523e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005240:	f021 0101 	bic.w	r1, r1, #1
 8005244:	62d9      	str	r1, [r3, #44]	; 0x2c
 8005246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	9307      	str	r3, [sp, #28]
 800524e:	6993      	ldr	r3, [r2, #24]
 8005250:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005254:	6193      	str	r3, [r2, #24]
 8005256:	6993      	ldr	r3, [r2, #24]
 8005258:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800525c:	9307      	str	r3, [sp, #28]
 800525e:	9b07      	ldr	r3, [sp, #28]
  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8005260:	6993      	ldr	r3, [r2, #24]
 8005262:	0498      	lsls	r0, r3, #18
 8005264:	d5fc      	bpl.n	8005260 <main+0xd0>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005266:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800526a:	f04f 0801 	mov.w	r8, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800526e:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005270:	2702      	movs	r7, #2
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005272:	2604      	movs	r6, #4
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8005274:	f04f 0908 	mov.w	r9, #8
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8005278:	a82d      	add	r0, sp, #180	; 0xb4
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800527a:	9330      	str	r3, [sp, #192]	; 0xc0
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800527c:	9334      	str	r3, [sp, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800527e:	933f      	str	r3, [sp, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLP = 2;
 8005280:	973a      	str	r7, [sp, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005282:	973c      	str	r7, [sp, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005284:	933e      	str	r3, [sp, #248]	; 0xf8
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005286:	963b      	str	r6, [sp, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8005288:	f8cd 90f4 	str.w	r9, [sp, #244]	; 0xf4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800528c:	e9cd 822d 	strd	r8, r2, [sp, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLM = 5;
 8005290:	2205      	movs	r2, #5
 8005292:	9238      	str	r2, [sp, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLN = 160;
 8005294:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005296:	e9cd 7736 	strd	r7, r7, [sp, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLN = 160;
 800529a:	9239      	str	r2, [sp, #228]	; 0xe4
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800529c:	f00a fa34 	bl	800f708 <HAL_RCC_OscConfig>
  if (ret != HAL_OK)
 80052a0:	2800      	cmp	r0, #0
 80052a2:	f040 81b9 	bne.w	8005618 <main+0x488>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80052a6:	213f      	movs	r1, #63	; 0x3f
 80052a8:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80052aa:	f04f 0a40 	mov.w	sl, #64	; 0x40
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80052ae:	e9cd 131a 	strd	r1, r3, [sp, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80052b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80052b6:	4639      	mov	r1, r7
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80052b8:	f8cd a084 	str.w	sl, [sp, #132]	; 0x84
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80052bc:	9320      	str	r3, [sp, #128]	; 0x80
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80052be:	e9cd 091c 	strd	r0, r9, [sp, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80052c2:	a81a      	add	r0, sp, #104	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80052c4:	e9cd aa1e 	strd	sl, sl, [sp, #120]	; 0x78
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80052c8:	f00a fdaa 	bl	800fe20 <HAL_RCC_ClockConfig>
  if (ret != HAL_OK)
 80052cc:	4604      	mov	r4, r0
 80052ce:	2800      	cmp	r0, #0
 80052d0:	f040 81a2 	bne.w	8005618 <main+0x488>
  __HAL_RCC_CSI_ENABLE();
 80052d4:	4d78      	ldr	r5, [pc, #480]	; (80054b8 <main+0x328>)
 80052d6:	682b      	ldr	r3, [r5, #0]
 80052d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052dc:	602b      	str	r3, [r5, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052de:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 80052e2:	f043 0302 	orr.w	r3, r3, #2
 80052e6:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 80052ea:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	9308      	str	r3, [sp, #32]
 80052f4:	9b08      	ldr	r3, [sp, #32]
  HAL_EnableCompensationCell();
 80052f6:	f006 fadf 	bl	800b8b8 <HAL_EnableCompensationCell>
  __HAL_RCC_CRC_CLK_ENABLE();
 80052fa:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80052fe:	4622      	mov	r2, r4
 8005300:	486e      	ldr	r0, [pc, #440]	; (80054bc <main+0x32c>)
 8005302:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_CRC_CLK_ENABLE();
 8005306:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800530a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800530e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005312:	9431      	str	r4, [sp, #196]	; 0xc4
  __HAL_RCC_CRC_CLK_ENABLE();
 8005314:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800531c:	e9cd 442d 	strd	r4, r4, [sp, #180]	; 0xb4
 8005320:	e9cd 442f 	strd	r4, r4, [sp, #188]	; 0xbc
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005324:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005328:	f043 0304 	orr.w	r3, r3, #4
 800532c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8005330:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	9301      	str	r3, [sp, #4]
 800533a:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800533c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005340:	f043 0301 	orr.w	r3, r3, #1
 8005344:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8005348:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	9302      	str	r3, [sp, #8]
 8005352:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005354:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800535c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8005360:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005368:	9303      	str	r3, [sp, #12]
 800536a:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800536c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005374:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8005378:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800537c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005380:	9304      	str	r3, [sp, #16]
 8005382:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005384:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005388:	f043 0320 	orr.w	r3, r3, #32
 800538c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8005390:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005394:	f003 0320 	and.w	r3, r3, #32
 8005398:	9305      	str	r3, [sp, #20]
 800539a:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800539c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80053a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053a4:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80053a8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  htim8.Instance = TIM8;
 80053ac:	4d44      	ldr	r5, [pc, #272]	; (80054c0 <main+0x330>)
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80053ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053b2:	9306      	str	r3, [sp, #24]
 80053b4:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80053b6:	f009 f963 	bl	800e680 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RELAY_ARD_D2_GPIO_Port, RELAY_ARD_D2_Pin, GPIO_PIN_RESET);
 80053ba:	4622      	mov	r2, r4
 80053bc:	4649      	mov	r1, r9
 80053be:	4841      	ldr	r0, [pc, #260]	; (80054c4 <main+0x334>)
 80053c0:	f009 f95e 	bl	800e680 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 80053c4:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 80053c8:	a92d      	add	r1, sp, #180	; 0xb4
 80053ca:	483f      	ldr	r0, [pc, #252]	; (80054c8 <main+0x338>)
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 80053cc:	932d      	str	r3, [sp, #180]	; 0xb4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ce:	e9cd 742e 	strd	r7, r4, [sp, #184]	; 0xb8
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80053d2:	e9cd 4430 	strd	r4, r4, [sp, #192]	; 0xc0
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 80053d6:	f008 ff43 	bl	800e260 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED1_Pin;
 80053da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80053de:	a92d      	add	r1, sp, #180	; 0xb4
 80053e0:	4836      	ldr	r0, [pc, #216]	; (80054bc <main+0x32c>)
  GPIO_InitStruct.Pin = LED1_Pin;
 80053e2:	932d      	str	r3, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053e4:	9430      	str	r4, [sp, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053e6:	e9cd 842e 	strd	r8, r4, [sp, #184]	; 0xb8
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80053ea:	f008 ff39 	bl	800e260 <HAL_GPIO_Init>
  HAL_GPIO_Init(IR1_ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80053ee:	a92d      	add	r1, sp, #180	; 0xb4
 80053f0:	4834      	ldr	r0, [pc, #208]	; (80054c4 <main+0x334>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80053f2:	972f      	str	r7, [sp, #188]	; 0xbc
  htim8.Init.Period = 4000 - 1;
 80053f4:	f640 779f 	movw	r7, #3999	; 0xf9f
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80053f8:	e9cd 842d 	strd	r8, r4, [sp, #180]	; 0xb4
  HAL_GPIO_Init(IR1_ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80053fc:	f008 ff30 	bl	800e260 <HAL_GPIO_Init>
  HAL_GPIO_Init(IR4_ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8005400:	a92d      	add	r1, sp, #180	; 0xb4
 8005402:	4831      	ldr	r0, [pc, #196]	; (80054c8 <main+0x338>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005404:	942f      	str	r4, [sp, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005406:	e9cd a42d 	strd	sl, r4, [sp, #180]	; 0xb4
  HAL_GPIO_Init(IR4_ARD_D5_GPIO_Port, &GPIO_InitStruct);
 800540a:	f008 ff29 	bl	800e260 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = IR2_ARD_D8_Pin|IR3_ARD_D4_Pin;
 800540e:	2330      	movs	r3, #48	; 0x30
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8005410:	a92d      	add	r1, sp, #180	; 0xb4
 8005412:	482c      	ldr	r0, [pc, #176]	; (80054c4 <main+0x334>)
  GPIO_InitStruct.Pin = IR2_ARD_D8_Pin|IR3_ARD_D4_Pin;
 8005414:	932d      	str	r3, [sp, #180]	; 0xb4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005416:	e9cd 442e 	strd	r4, r4, [sp, #184]	; 0xb8
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800541a:	f008 ff21 	bl	800e260 <HAL_GPIO_Init>
  HAL_GPIO_Init(RELAY_ARD_D2_GPIO_Port, &GPIO_InitStruct);
 800541e:	a92d      	add	r1, sp, #180	; 0xb4
 8005420:	4828      	ldr	r0, [pc, #160]	; (80054c4 <main+0x334>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005422:	e9cd 982d 	strd	r9, r8, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005426:	e9cd 442f 	strd	r4, r4, [sp, #188]	; 0xbc
  HAL_GPIO_Init(RELAY_ARD_D2_GPIO_Port, &GPIO_InitStruct);
 800542a:	f008 ff19 	bl	800e260 <HAL_GPIO_Init>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800542e:	222c      	movs	r2, #44	; 0x2c
 8005430:	4621      	mov	r1, r4
 8005432:	a822      	add	r0, sp, #136	; 0x88
  htim8.Init.Prescaler = 200 - 1;
 8005434:	f04f 08c7 	mov.w	r8, #199	; 0xc7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005438:	940b      	str	r4, [sp, #44]	; 0x2c
  TIM_OC_InitTypeDef sConfigOC = {0};
 800543a:	9419      	str	r4, [sp, #100]	; 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800543c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005440:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
 8005444:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
 8005448:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800544c:	f021 f899 	bl	8026582 <memset>
  htim8.Init.Prescaler = 200 - 1;
 8005450:	4b1e      	ldr	r3, [pc, #120]	; (80054cc <main+0x33c>)
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8005452:	4628      	mov	r0, r5
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005454:	60ac      	str	r4, [r5, #8]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005456:	61ac      	str	r4, [r5, #24]
  htim8.Init.Period = 4000 - 1;
 8005458:	60ef      	str	r7, [r5, #12]
  htim8.Init.RepetitionCounter = 0;
 800545a:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim8.Init.Prescaler = 200 - 1;
 800545e:	e9c5 3800 	strd	r3, r8, [r5]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8005462:	f00d fb45 	bl	8012af0 <HAL_TIM_PWM_Init>
 8005466:	2800      	cmp	r0, #0
 8005468:	f040 80d6 	bne.w	8005618 <main+0x488>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800546c:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800546e:	a909      	add	r1, sp, #36	; 0x24
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005470:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005474:	4628      	mov	r0, r5
 8005476:	f00d fdeb 	bl	8013050 <HAL_TIMEx_MasterConfigSynchronization>
 800547a:	2800      	cmp	r0, #0
 800547c:	f040 80cc 	bne.w	8005618 <main+0x488>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005480:	4632      	mov	r2, r6
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005482:	2660      	movs	r6, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005484:	a913      	add	r1, sp, #76	; 0x4c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005486:	9613      	str	r6, [sp, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005488:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800548c:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005490:	e9cd 0018 	strd	r0, r0, [sp, #96]	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005494:	4628      	mov	r0, r5
 8005496:	f00d fcb5 	bl	8012e04 <HAL_TIM_PWM_ConfigChannel>
 800549a:	2800      	cmp	r0, #0
 800549c:	f040 80bc 	bne.w	8005618 <main+0x488>
 80054a0:	e016      	b.n	80054d0 <main+0x340>
 80054a2:	bf00      	nop
 80054a4:	03010018 	.word	0x03010018
 80054a8:	01010000 	.word	0x01010000
 80054ac:	e000ed00 	.word	0xe000ed00
 80054b0:	58000400 	.word	0x58000400
 80054b4:	58024800 	.word	0x58024800
 80054b8:	58024400 	.word	0x58024400
 80054bc:	58022000 	.word	0x58022000
 80054c0:	20008f9c 	.word	0x20008f9c
 80054c4:	58022400 	.word	0x58022400
 80054c8:	58020000 	.word	0x58020000
 80054cc:	40010400 	.word	0x40010400
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80054d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80054d4:	9026      	str	r0, [sp, #152]	; 0x98
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80054d6:	a922      	add	r1, sp, #136	; 0x88
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80054d8:	9327      	str	r3, [sp, #156]	; 0x9c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80054da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80054de:	e9cd 0022 	strd	r0, r0, [sp, #136]	; 0x88
  sBreakDeadTimeConfig.DeadTime = 0;
 80054e2:	e9cd 0024 	strd	r0, r0, [sp, #144]	; 0x90
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80054e6:	e9cd 0028 	strd	r0, r0, [sp, #160]	; 0xa0
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80054ea:	e9cd 002b 	strd	r0, r0, [sp, #172]	; 0xac
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80054ee:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80054f0:	932a      	str	r3, [sp, #168]	; 0xa8
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80054f2:	f00d fe01 	bl	80130f8 <HAL_TIMEx_ConfigBreakDeadTime>
 80054f6:	4604      	mov	r4, r0
 80054f8:	2800      	cmp	r0, #0
 80054fa:	f040 808d 	bne.w	8005618 <main+0x488>
  HAL_TIM_MspPostInit(&htim8);
 80054fe:	4628      	mov	r0, r5
  htim13.Instance = TIM13;
 8005500:	4d46      	ldr	r5, [pc, #280]	; (800561c <main+0x48c>)
  HAL_TIM_MspPostInit(&htim8);
 8005502:	f001 fcc1 	bl	8006e88 <HAL_TIM_MspPostInit>
  htim13.Instance = TIM13;
 8005506:	4b46      	ldr	r3, [pc, #280]	; (8005620 <main+0x490>)
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8005508:	4628      	mov	r0, r5
  TIM_OC_InitTypeDef sConfigOC = {0};
 800550a:	9412      	str	r4, [sp, #72]	; 0x48
  htim13.Init.Period = 4000 - 1;
 800550c:	60ef      	str	r7, [r5, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800550e:	612c      	str	r4, [r5, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005510:	61ac      	str	r4, [r5, #24]
  htim13.Instance = TIM13;
 8005512:	602b      	str	r3, [r5, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005514:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8005518:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 800551c:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005520:	e9c5 8401 	strd	r8, r4, [r5, #4]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8005524:	f00d fa2e 	bl	8012984 <HAL_TIM_Base_Init>
 8005528:	2800      	cmp	r0, #0
 800552a:	d175      	bne.n	8005618 <main+0x488>
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800552c:	4628      	mov	r0, r5
 800552e:	f00d fadf 	bl	8012af0 <HAL_TIM_PWM_Init>
 8005532:	4602      	mov	r2, r0
 8005534:	2800      	cmp	r0, #0
 8005536:	d16f      	bne.n	8005618 <main+0x488>
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005538:	a90c      	add	r1, sp, #48	; 0x30
 800553a:	4628      	mov	r0, r5
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800553c:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800553e:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.Pulse = 0;
 8005540:	e9cd 620c 	strd	r6, r2, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005544:	f00d fc5e 	bl	8012e04 <HAL_TIM_PWM_ConfigChannel>
 8005548:	2800      	cmp	r0, #0
 800554a:	d165      	bne.n	8005618 <main+0x488>
  HAL_TIM_MspPostInit(&htim13);
 800554c:	4628      	mov	r0, r5
  APP_Init(&App_Context);
 800554e:	4c35      	ldr	r4, [pc, #212]	; (8005624 <main+0x494>)
  HAL_TIM_MspPostInit(&htim13);
 8005550:	f001 fc9a 	bl	8006e88 <HAL_TIM_MspPostInit>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8005554:	2104      	movs	r1, #4
 8005556:	4834      	ldr	r0, [pc, #208]	; (8005628 <main+0x498>)
		App_Context.run_loop = 1;
 8005558:	f04f 0801 	mov.w	r8, #1
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800555c:	f00d fb7e 	bl	8012c5c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8005560:	2100      	movs	r1, #0
 8005562:	482e      	ldr	r0, [pc, #184]	; (800561c <main+0x48c>)
 8005564:	f00d fb7a 	bl	8012c5c <HAL_TIM_PWM_Start>
  APP_Init(&App_Context);
 8005568:	4620      	mov	r0, r4
 800556a:	f7fb fc09 	bl	8000d80 <APP_Init>
  TEST_Init(App_Context.Test_ContextPtr);
 800556e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005570:	f7fd fcf2 	bl	8002f58 <TEST_Init>
  UTILS_Init(App_Context.Utils_ContextPtr);
 8005574:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005576:	f7ff fcaf 	bl	8004ed8 <UTILS_Init>
  DISPLAY_Init(App_Context.Display_ContextPtr);
 800557a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800557c:	f7fc f8de 	bl	800173c <DISPLAY_Init>
  AI_Init(App_Context.Ai_ContextPtr);
 8005580:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005582:	f7fb fa2d 	bl	80009e0 <AI_Init>
  int is_menu = DISPLAY_WelcomeScreen(App_Context.Display_ContextPtr);
 8005586:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005588:	f7fc f92a 	bl	80017e0 <DISPLAY_WelcomeScreen>
 800558c:	4606      	mov	r6, r0
	  if ((is_menu != 0) || (App_Context.Test_ContextPtr->UartContext.uart_cmd_ongoing == 1))
 800558e:	4d27      	ldr	r5, [pc, #156]	; (800562c <main+0x49c>)
		UTIL_LCD_SetFont(&Font24);
 8005590:	4f27      	ldr	r7, [pc, #156]	; (8005630 <main+0x4a0>)
	  if ((is_menu != 0) || (App_Context.Test_ContextPtr->UartContext.uart_cmd_ongoing == 1))
 8005592:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005594:	bb7e      	cbnz	r6, 80055f6 <main+0x466>
 8005596:	f8d0 3520 	ldr.w	r3, [r0, #1312]	; 0x520
 800559a:	2b01      	cmp	r3, #1
 800559c:	d02b      	beq.n	80055f6 <main+0x466>
	  if(App_Context.Operating_Mode == NOMINAL || App_Context.Operating_Mode == CAPTURE || (App_Context.Operating_Mode == DUMP && App_Context.Test_ContextPtr->DumpContext.Dump_FrameSource == CAMERA_LIVE))
 800559e:	7823      	ldrb	r3, [r4, #0]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d02d      	beq.n	8005600 <main+0x470>
 80055a4:	2b04      	cmp	r3, #4
 80055a6:	d02b      	beq.n	8005600 <main+0x470>
 80055a8:	2b03      	cmp	r3, #3
 80055aa:	d02d      	beq.n	8005608 <main+0x478>
	  while(App_Context.run_loop)
 80055ac:	6863      	ldr	r3, [r4, #4]
 80055ae:	b1c3      	cbz	r3, 80055e2 <main+0x452>
		UTILS_Joystick_Check(App_Context.Utils_ContextPtr);
 80055b0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80055b2:	f7ff fd19 	bl	8004fe8 <UTILS_Joystick_Check>
		TEST_CmdIf_Check(App_Context.Test_ContextPtr);
 80055b6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80055b8:	f7fd fdbe 	bl	8003138 <TEST_CmdIf_Check>
		APP_GetNextReadyFrame(&App_Context);
 80055bc:	4620      	mov	r0, r4
 80055be:	f7fb fc3f 	bl	8000e40 <APP_GetNextReadyFrame>
		APP_StartNewFrameAcquisition(&App_Context);
 80055c2:	4620      	mov	r0, r4
 80055c4:	f7fb fcf2 	bl	8000fac <APP_StartNewFrameAcquisition>
		APP_FramePreprocess(&App_Context);
 80055c8:	4620      	mov	r0, r4
 80055ca:	f7fb fd0d 	bl	8000fe8 <APP_FramePreprocess>
		APP_NetworkInference(&App_Context);
 80055ce:	4620      	mov	r0, r4
 80055d0:	f7fb fd0c 	bl	8000fec <APP_NetworkInference>
		waste = APP_Postprocess(&App_Context);
 80055d4:	4620      	mov	r0, r4
 80055d6:	f7fb fd3b 	bl	8001050 <APP_Postprocess>
	  while(App_Context.run_loop)
 80055da:	6863      	ldr	r3, [r4, #4]
		waste = APP_Postprocess(&App_Context);
 80055dc:	7028      	strb	r0, [r5, #0]
	  while(App_Context.run_loop)
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1e6      	bne.n	80055b0 <main+0x420>
		AI_Deinit();
 80055e2:	f7fb fbcb 	bl	8000d7c <AI_Deinit>
		UTIL_LCD_SetFont(&Font24);
 80055e6:	4638      	mov	r0, r7
		App_Context.run_loop = 1;
 80055e8:	f8c4 8004 	str.w	r8, [r4, #4]
		UTIL_LCD_SetFont(&Font24);
 80055ec:	f016 f840 	bl	801b670 <UTIL_LCD_SetFont>
	  if ((is_menu != 0) || (App_Context.Test_ContextPtr->UartContext.uart_cmd_ongoing == 1))
 80055f0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80055f2:	2e00      	cmp	r6, #0
 80055f4:	d0cf      	beq.n	8005596 <main+0x406>
		TEST_MainMenu(App_Context.Test_ContextPtr);
 80055f6:	f7fd fe05 	bl	8003204 <TEST_MainMenu>
	  if(App_Context.Operating_Mode == NOMINAL || App_Context.Operating_Mode == CAPTURE || (App_Context.Operating_Mode == DUMP && App_Context.Test_ContextPtr->DumpContext.Dump_FrameSource == CAMERA_LIVE))
 80055fa:	7823      	ldrb	r3, [r4, #0]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d1d1      	bne.n	80055a4 <main+0x414>
		CAMERA_Init(App_Context.Camera_ContextPtr);
 8005600:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005602:	f7fb fef7 	bl	80013f4 <CAMERA_Init>
 8005606:	e7d1      	b.n	80055ac <main+0x41c>
	  if(App_Context.Operating_Mode == NOMINAL || App_Context.Operating_Mode == CAPTURE || (App_Context.Operating_Mode == DUMP && App_Context.Test_ContextPtr->DumpContext.Dump_FrameSource == CAMERA_LIVE))
 8005608:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800560a:	791b      	ldrb	r3, [r3, #4]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d1cd      	bne.n	80055ac <main+0x41c>
		CAMERA_Init(App_Context.Camera_ContextPtr);
 8005610:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005612:	f7fb feef 	bl	80013f4 <CAMERA_Init>
 8005616:	e7c9      	b.n	80055ac <main+0x41c>
    Error_Handler();
 8005618:	f7ff fda8 	bl	800516c <Error_Handler>
 800561c:	20008f50 	.word	0x20008f50
 8005620:	40001c00 	.word	0x40001c00
 8005624:	20007af0 	.word	0x20007af0
 8005628:	20008f9c 	.word	0x20008f9c
 800562c:	20008fe8 	.word	0x20008fe8
 8005630:	20007728 	.word	0x20007728

08005634 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8005634:	b530      	push	{r4, r5, lr}
 8005636:	b083      	sub	sp, #12
  AI_ASSERT(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8005638:	2400      	movs	r4, #0
{
 800563a:	460a      	mov	r2, r1
 800563c:	4605      	mov	r5, r0

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 800563e:	2101      	movs	r1, #1
 8005640:	a801      	add	r0, sp, #4
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8005642:	9401      	str	r4, [sp, #4]
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8005644:	f016 fab8 	bl	801bbb8 <ai_platform_get_weights_map>
 8005648:	4604      	mov	r4, r0
 800564a:	2800      	cmp	r0, #0
 800564c:	f000 84a5 	beq.w	8005f9a <network_configure_weights+0x966>
    /* Updating weights (byte) offsets */
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005650:	48bf      	ldr	r0, [pc, #764]	; (8005950 <network_configure_weights+0x31c>)
    conv2d_1_weights_array.data = AI_PTR(weights_map[0] + 0);
 8005652:	9b01      	ldr	r3, [sp, #4]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005654:	6805      	ldr	r5, [r0, #0]
    conv2d_1_weights_array.data_start = AI_PTR(weights_map[0] + 0);
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005656:	4abf      	ldr	r2, [pc, #764]	; (8005954 <network_configure_weights+0x320>)
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005658:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_1_bias_array.data = AI_PTR(weights_map[0] + 432);
    conv2d_1_bias_array.data_start = AI_PTR(weights_map[0] + 432);
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800565c:	49be      	ldr	r1, [pc, #760]	; (8005958 <network_configure_weights+0x324>)
    conv2d_1_weights_array.data = AI_PTR(weights_map[0] + 0);
 800565e:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005662:	6005      	str	r5, [r0, #0]
    conv2d_3_bias_array.data_start = AI_PTR(weights_map[0] + 832);
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_4_weights_array.data = AI_PTR(weights_map[0] + 864);
    conv2d_4_weights_array.data_start = AI_PTR(weights_map[0] + 864);
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_4_bias_array.data = AI_PTR(weights_map[0] + 1248);
 8005664:	f503 659c 	add.w	r5, r3, #1248	; 0x4e0
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005668:	6810      	ldr	r0, [r2, #0]
 800566a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800566e:	6010      	str	r0, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(weights_map[0] + 432);
 8005670:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 8005674:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8005678:	6808      	ldr	r0, [r1, #0]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800567a:	4ab8      	ldr	r2, [pc, #736]	; (800595c <network_configure_weights+0x328>)
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800567c:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005680:	6008      	str	r0, [r1, #0]
    conv2d_2_weights_array.data = AI_PTR(weights_map[0] + 496);
 8005682:	f503 70f8 	add.w	r0, r3, #496	; 0x1f0
 8005686:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800568a:	6810      	ldr	r0, [r2, #0]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 800568c:	49b4      	ldr	r1, [pc, #720]	; (8005960 <network_configure_weights+0x32c>)
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800568e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005692:	6010      	str	r0, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(weights_map[0] + 640);
 8005694:	f503 7020 	add.w	r0, r3, #640	; 0x280
 8005698:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 800569c:	6808      	ldr	r0, [r1, #0]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800569e:	4ab1      	ldr	r2, [pc, #708]	; (8005964 <network_configure_weights+0x330>)
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 80056a0:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80056a4:	6008      	str	r0, [r1, #0]
    conv2d_3_weights_array.data = AI_PTR(weights_map[0] + 704);
 80056a6:	f503 7030 	add.w	r0, r3, #704	; 0x2c0
 80056aa:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 80056ae:	6810      	ldr	r0, [r2, #0]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 80056b0:	49ad      	ldr	r1, [pc, #692]	; (8005968 <network_configure_weights+0x334>)
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 80056b2:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80056b6:	6010      	str	r0, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(weights_map[0] + 832);
 80056b8:	f503 7050 	add.w	r0, r3, #832	; 0x340
 80056bc:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 80056c0:	6808      	ldr	r0, [r1, #0]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 80056c2:	4aaa      	ldr	r2, [pc, #680]	; (800596c <network_configure_weights+0x338>)
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 80056c4:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_4_bias_array.data = AI_PTR(weights_map[0] + 1248);
 80056c8:	6095      	str	r5, [r2, #8]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 80056ca:	6008      	str	r0, [r1, #0]
    conv2d_4_weights_array.data = AI_PTR(weights_map[0] + 864);
 80056cc:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80056d0:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 80056d4:	6810      	ldr	r0, [r2, #0]
    conv2d_4_bias_array.data_start = AI_PTR(weights_map[0] + 1248);
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 80056d6:	49a6      	ldr	r1, [pc, #664]	; (8005970 <network_configure_weights+0x33c>)
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 80056d8:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80056dc:	6010      	str	r0, [r2, #0]
    conv2d_4_bias_array.data = AI_PTR(weights_map[0] + 1248);
 80056de:	60d5      	str	r5, [r2, #12]
    conv2d_8_bias_array.data_start = AI_PTR(weights_map[0] + 2864);
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_9_weights_array.data = AI_PTR(weights_map[0] + 3056);
    conv2d_9_weights_array.data_start = AI_PTR(weights_map[0] + 3056);
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_9_bias_array.data = AI_PTR(weights_map[0] + 3488);
 80056e0:	f503 655a 	add.w	r5, r3, #3488	; 0xda0
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 80056e4:	6808      	ldr	r0, [r1, #0]
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 80056e6:	4aa3      	ldr	r2, [pc, #652]	; (8005974 <network_configure_weights+0x340>)
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 80056e8:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80056ec:	6008      	str	r0, [r1, #0]
    conv2d_6_weights_array.data = AI_PTR(weights_map[0] + 1440);
 80056ee:	f503 60b4 	add.w	r0, r3, #1440	; 0x5a0
 80056f2:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 80056f6:	6810      	ldr	r0, [r2, #0]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 80056f8:	499f      	ldr	r1, [pc, #636]	; (8005978 <network_configure_weights+0x344>)
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 80056fa:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80056fe:	6010      	str	r0, [r2, #0]
    conv2d_6_bias_array.data = AI_PTR(weights_map[0] + 1872);
 8005700:	f503 60ea 	add.w	r0, r3, #1872	; 0x750
 8005704:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8005708:	6808      	ldr	r0, [r1, #0]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 800570a:	4a9c      	ldr	r2, [pc, #624]	; (800597c <network_configure_weights+0x348>)
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 800570c:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005710:	6008      	str	r0, [r1, #0]
    conv2d_7_weights_array.data = AI_PTR(weights_map[0] + 2064);
 8005712:	f503 6001 	add.w	r0, r3, #2064	; 0x810
 8005716:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 800571a:	6810      	ldr	r0, [r2, #0]
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 800571c:	4998      	ldr	r1, [pc, #608]	; (8005980 <network_configure_weights+0x34c>)
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 800571e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005722:	6010      	str	r0, [r2, #0]
    conv2d_7_bias_array.data = AI_PTR(weights_map[0] + 2448);
 8005724:	f503 6019 	add.w	r0, r3, #2448	; 0x990
 8005728:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 800572c:	6808      	ldr	r0, [r1, #0]
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 800572e:	4a95      	ldr	r2, [pc, #596]	; (8005984 <network_configure_weights+0x350>)
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8005730:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005734:	6008      	str	r0, [r1, #0]
    conv2d_8_weights_array.data = AI_PTR(weights_map[0] + 2480);
 8005736:	f503 601b 	add.w	r0, r3, #2480	; 0x9b0
 800573a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 800573e:	6810      	ldr	r0, [r2, #0]
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8005740:	4991      	ldr	r1, [pc, #580]	; (8005988 <network_configure_weights+0x354>)
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8005742:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005746:	6010      	str	r0, [r2, #0]
    conv2d_8_bias_array.data = AI_PTR(weights_map[0] + 2864);
 8005748:	f503 6033 	add.w	r0, r3, #2864	; 0xb30
 800574c:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8005750:	6808      	ldr	r0, [r1, #0]
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8005752:	4a8e      	ldr	r2, [pc, #568]	; (800598c <network_configure_weights+0x358>)
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8005754:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005758:	6008      	str	r0, [r1, #0]
    conv2d_9_weights_array.data = AI_PTR(weights_map[0] + 3056);
 800575a:	f503 603f 	add.w	r0, r3, #3056	; 0xbf0
 800575e:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8005762:	6810      	ldr	r0, [r2, #0]
    conv2d_9_bias_array.data_start = AI_PTR(weights_map[0] + 3488);
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8005764:	498a      	ldr	r1, [pc, #552]	; (8005990 <network_configure_weights+0x35c>)
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8005766:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_9_bias_array.data = AI_PTR(weights_map[0] + 3488);
 800576a:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 800576e:	6010      	str	r0, [r2, #0]
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8005770:	6808      	ldr	r0, [r1, #0]
    conv2d_10_weights_array.data = AI_PTR(weights_map[0] + 3680);
    conv2d_10_weights_array.data_start = AI_PTR(weights_map[0] + 3680);
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8005772:	4a88      	ldr	r2, [pc, #544]	; (8005994 <network_configure_weights+0x360>)
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8005774:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005778:	6008      	str	r0, [r1, #0]
    conv2d_10_weights_array.data = AI_PTR(weights_map[0] + 3680);
 800577a:	f503 6066 	add.w	r0, r3, #3680	; 0xe60
 800577e:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8005782:	6810      	ldr	r0, [r2, #0]
    conv2d_10_bias_array.data = AI_PTR(weights_map[0] + 4064);
    conv2d_10_bias_array.data_start = AI_PTR(weights_map[0] + 4064);
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 8005784:	4984      	ldr	r1, [pc, #528]	; (8005998 <network_configure_weights+0x364>)
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8005786:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800578a:	6010      	str	r0, [r2, #0]
    conv2d_10_bias_array.data = AI_PTR(weights_map[0] + 4064);
 800578c:	f503 607e 	add.w	r0, r3, #4064	; 0xfe0
 8005790:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 8005794:	6808      	ldr	r0, [r1, #0]
    conv2d_12_weights_array.data = AI_PTR(weights_map[0] + 4096);
    conv2d_12_weights_array.data_start = AI_PTR(weights_map[0] + 4096);
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 8005796:	4a81      	ldr	r2, [pc, #516]	; (800599c <network_configure_weights+0x368>)
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 8005798:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800579c:	6008      	str	r0, [r1, #0]
    conv2d_12_weights_array.data = AI_PTR(weights_map[0] + 4096);
 800579e:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
 80057a2:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 80057a6:	6810      	ldr	r0, [r2, #0]
    conv2d_12_bias_array.data = AI_PTR(weights_map[0] + 4480);
    conv2d_12_bias_array.data_start = AI_PTR(weights_map[0] + 4480);
    conv2d_14_weights_array.format |= AI_FMT_FLAG_CONST;
 80057a8:	497d      	ldr	r1, [pc, #500]	; (80059a0 <network_configure_weights+0x36c>)
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 80057aa:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80057ae:	6010      	str	r0, [r2, #0]
    conv2d_12_bias_array.data = AI_PTR(weights_map[0] + 4480);
 80057b0:	f503 508c 	add.w	r0, r3, #4480	; 0x1180
 80057b4:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_14_weights_array.format |= AI_FMT_FLAG_CONST;
 80057b8:	6808      	ldr	r0, [r1, #0]
    conv2d_14_weights_array.data = AI_PTR(weights_map[0] + 4672);
    conv2d_14_weights_array.data_start = AI_PTR(weights_map[0] + 4672);
    conv2d_14_bias_array.format |= AI_FMT_FLAG_CONST;
 80057ba:	4a7a      	ldr	r2, [pc, #488]	; (80059a4 <network_configure_weights+0x370>)
    conv2d_14_weights_array.format |= AI_FMT_FLAG_CONST;
 80057bc:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80057c0:	6008      	str	r0, [r1, #0]
    conv2d_14_weights_array.data = AI_PTR(weights_map[0] + 4672);
 80057c2:	f503 5092 	add.w	r0, r3, #4672	; 0x1240
 80057c6:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_14_bias_array.format |= AI_FMT_FLAG_CONST;
 80057ca:	6810      	ldr	r0, [r2, #0]
    conv2d_14_bias_array.data = AI_PTR(weights_map[0] + 5104);
    conv2d_14_bias_array.data_start = AI_PTR(weights_map[0] + 5104);
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 80057cc:	4976      	ldr	r1, [pc, #472]	; (80059a8 <network_configure_weights+0x374>)
    conv2d_14_bias_array.format |= AI_FMT_FLAG_CONST;
 80057ce:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80057d2:	6010      	str	r0, [r2, #0]
    conv2d_14_bias_array.data = AI_PTR(weights_map[0] + 5104);
 80057d4:	f241 30f0 	movw	r0, #5104	; 0x13f0
 80057d8:	4418      	add	r0, r3
 80057da:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 80057de:	6808      	ldr	r0, [r1, #0]
    conv2d_15_weights_array.data = AI_PTR(weights_map[0] + 5296);
    conv2d_15_weights_array.data_start = AI_PTR(weights_map[0] + 5296);
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 80057e0:	4a72      	ldr	r2, [pc, #456]	; (80059ac <network_configure_weights+0x378>)
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 80057e2:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80057e6:	6008      	str	r0, [r1, #0]
    conv2d_15_weights_array.data = AI_PTR(weights_map[0] + 5296);
 80057e8:	f241 40b0 	movw	r0, #5296	; 0x14b0
 80057ec:	4418      	add	r0, r3
 80057ee:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 80057f2:	6810      	ldr	r0, [r2, #0]
    conv2d_15_bias_array.data = AI_PTR(weights_map[0] + 6064);
 80057f4:	f241 71b0 	movw	r1, #6064	; 0x17b0
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 80057f8:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_15_bias_array.data = AI_PTR(weights_map[0] + 6064);
 80057fc:	4419      	add	r1, r3
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 80057fe:	6010      	str	r0, [r2, #0]
    conv2d_15_bias_array.data_start = AI_PTR(weights_map[0] + 6064);
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_16_weights_array.data = AI_PTR(weights_map[0] + 6128);
 8005800:	f241 70f0 	movw	r0, #6128	; 0x17f0
    conv2d_15_bias_array.data = AI_PTR(weights_map[0] + 6064);
 8005804:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_16_weights_array.data = AI_PTR(weights_map[0] + 6128);
 8005808:	4418      	add	r0, r3
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 800580a:	4969      	ldr	r1, [pc, #420]	; (80059b0 <network_configure_weights+0x37c>)
    conv2d_16_weights_array.data_start = AI_PTR(weights_map[0] + 6128);
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 800580c:	4a69      	ldr	r2, [pc, #420]	; (80059b4 <network_configure_weights+0x380>)
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 800580e:	680d      	ldr	r5, [r1, #0]
    conv2d_16_weights_array.data = AI_PTR(weights_map[0] + 6128);
 8005810:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 8005814:	6810      	ldr	r0, [r2, #0]
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 8005816:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 800581a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 800581e:	600d      	str	r5, [r1, #0]
    conv2d_16_bias_array.data = AI_PTR(weights_map[0] + 7664);
    conv2d_16_bias_array.data_start = AI_PTR(weights_map[0] + 7664);
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 8005820:	4965      	ldr	r1, [pc, #404]	; (80059b8 <network_configure_weights+0x384>)
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 8005822:	6010      	str	r0, [r2, #0]
    conv2d_16_bias_array.data = AI_PTR(weights_map[0] + 7664);
 8005824:	f641 50f0 	movw	r0, #7664	; 0x1df0
 8005828:	4418      	add	r0, r3
 800582a:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 800582e:	6808      	ldr	r0, [r1, #0]
    conv2d_17_weights_array.data = AI_PTR(weights_map[0] + 8048);
    conv2d_17_weights_array.data_start = AI_PTR(weights_map[0] + 8048);
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 8005830:	4a62      	ldr	r2, [pc, #392]	; (80059bc <network_configure_weights+0x388>)
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 8005832:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005836:	6008      	str	r0, [r1, #0]
    conv2d_17_weights_array.data = AI_PTR(weights_map[0] + 8048);
 8005838:	f641 7070 	movw	r0, #8048	; 0x1f70
 800583c:	4418      	add	r0, r3
 800583e:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 8005842:	6810      	ldr	r0, [r2, #0]
    conv2d_17_bias_array.data = AI_PTR(weights_map[0] + 8912);
    conv2d_17_bias_array.data_start = AI_PTR(weights_map[0] + 8912);
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 8005844:	495e      	ldr	r1, [pc, #376]	; (80059c0 <network_configure_weights+0x38c>)
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 8005846:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800584a:	6010      	str	r0, [r2, #0]
    conv2d_17_bias_array.data = AI_PTR(weights_map[0] + 8912);
 800584c:	f242 20d0 	movw	r0, #8912	; 0x22d0
 8005850:	4418      	add	r0, r3
 8005852:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 8005856:	6808      	ldr	r0, [r1, #0]
    conv2d_18_weights_array.data = AI_PTR(weights_map[0] + 9296);
    conv2d_18_weights_array.data_start = AI_PTR(weights_map[0] + 9296);
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 8005858:	4a5a      	ldr	r2, [pc, #360]	; (80059c4 <network_configure_weights+0x390>)
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 800585a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800585e:	6008      	str	r0, [r1, #0]
    conv2d_18_weights_array.data = AI_PTR(weights_map[0] + 9296);
 8005860:	f242 4050 	movw	r0, #9296	; 0x2450
 8005864:	4418      	add	r0, r3
 8005866:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 800586a:	6810      	ldr	r0, [r2, #0]
    conv2d_18_bias_array.data = AI_PTR(weights_map[0] + 10832);
    conv2d_18_bias_array.data_start = AI_PTR(weights_map[0] + 10832);
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
 800586c:	4956      	ldr	r1, [pc, #344]	; (80059c8 <network_configure_weights+0x394>)
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 800586e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005872:	6010      	str	r0, [r2, #0]
    conv2d_18_bias_array.data = AI_PTR(weights_map[0] + 10832);
 8005874:	f642 2050 	movw	r0, #10832	; 0x2a50
 8005878:	4418      	add	r0, r3
 800587a:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
 800587e:	6808      	ldr	r0, [r1, #0]
    conv2d_20_weights_array.data = AI_PTR(weights_map[0] + 10896);
    conv2d_20_weights_array.data_start = AI_PTR(weights_map[0] + 10896);
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
 8005880:	4a52      	ldr	r2, [pc, #328]	; (80059cc <network_configure_weights+0x398>)
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
 8005882:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005886:	6008      	str	r0, [r1, #0]
    conv2d_20_weights_array.data = AI_PTR(weights_map[0] + 10896);
 8005888:	f642 2090 	movw	r0, #10896	; 0x2a90
 800588c:	4418      	add	r0, r3
 800588e:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
 8005892:	6810      	ldr	r0, [r2, #0]
    conv2d_20_bias_array.data = AI_PTR(weights_map[0] + 12432);
 8005894:	f243 0190 	movw	r1, #12432	; 0x3090
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
 8005898:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_20_bias_array.data = AI_PTR(weights_map[0] + 12432);
 800589c:	4419      	add	r1, r3
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
 800589e:	6010      	str	r0, [r2, #0]
    conv2d_20_bias_array.data_start = AI_PTR(weights_map[0] + 12432);
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_21_weights_array.data = AI_PTR(weights_map[0] + 12816);
 80058a0:	f243 2010 	movw	r0, #12816	; 0x3210
    conv2d_20_bias_array.data = AI_PTR(weights_map[0] + 12432);
 80058a4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_21_weights_array.data = AI_PTR(weights_map[0] + 12816);
 80058a8:	4418      	add	r0, r3
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 80058aa:	4949      	ldr	r1, [pc, #292]	; (80059d0 <network_configure_weights+0x39c>)
    conv2d_21_weights_array.data_start = AI_PTR(weights_map[0] + 12816);
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 80058ac:	4a49      	ldr	r2, [pc, #292]	; (80059d4 <network_configure_weights+0x3a0>)
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 80058ae:	680d      	ldr	r5, [r1, #0]
    conv2d_21_weights_array.data = AI_PTR(weights_map[0] + 12816);
 80058b0:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 80058b4:	6810      	ldr	r0, [r2, #0]
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 80058b6:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 80058ba:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 80058be:	600d      	str	r5, [r1, #0]
    conv2d_21_bias_array.data = AI_PTR(weights_map[0] + 13680);
    conv2d_21_bias_array.data_start = AI_PTR(weights_map[0] + 13680);
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 80058c0:	4945      	ldr	r1, [pc, #276]	; (80059d8 <network_configure_weights+0x3a4>)
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 80058c2:	6010      	str	r0, [r2, #0]
    conv2d_21_bias_array.data = AI_PTR(weights_map[0] + 13680);
 80058c4:	f243 5070 	movw	r0, #13680	; 0x3570
 80058c8:	4418      	add	r0, r3
 80058ca:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 80058ce:	6808      	ldr	r0, [r1, #0]
    conv2d_22_weights_array.data = AI_PTR(weights_map[0] + 14064);
    conv2d_22_weights_array.data_start = AI_PTR(weights_map[0] + 14064);
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 80058d0:	4a42      	ldr	r2, [pc, #264]	; (80059dc <network_configure_weights+0x3a8>)
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 80058d2:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80058d6:	6008      	str	r0, [r1, #0]
    conv2d_22_weights_array.data = AI_PTR(weights_map[0] + 14064);
 80058d8:	f243 60f0 	movw	r0, #14064	; 0x36f0
 80058dc:	4418      	add	r0, r3
 80058de:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 80058e2:	6810      	ldr	r0, [r2, #0]
    conv2d_22_bias_array.data = AI_PTR(weights_map[0] + 15600);
    conv2d_22_bias_array.data_start = AI_PTR(weights_map[0] + 15600);
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
 80058e4:	493e      	ldr	r1, [pc, #248]	; (80059e0 <network_configure_weights+0x3ac>)
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 80058e6:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80058ea:	6010      	str	r0, [r2, #0]
    conv2d_22_bias_array.data = AI_PTR(weights_map[0] + 15600);
 80058ec:	f643 40f0 	movw	r0, #15600	; 0x3cf0
 80058f0:	4418      	add	r0, r3
 80058f2:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
 80058f6:	6808      	ldr	r0, [r1, #0]
    conv2d_24_weights_array.data = AI_PTR(weights_map[0] + 15664);
    conv2d_24_weights_array.data_start = AI_PTR(weights_map[0] + 15664);
    conv2d_24_bias_array.format |= AI_FMT_FLAG_CONST;
 80058f8:	4a3a      	ldr	r2, [pc, #232]	; (80059e4 <network_configure_weights+0x3b0>)
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
 80058fa:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80058fe:	6008      	str	r0, [r1, #0]
    conv2d_24_weights_array.data = AI_PTR(weights_map[0] + 15664);
 8005900:	f643 5030 	movw	r0, #15664	; 0x3d30
 8005904:	4418      	add	r0, r3
 8005906:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_24_bias_array.format |= AI_FMT_FLAG_CONST;
 800590a:	6810      	ldr	r0, [r2, #0]
    conv2d_24_bias_array.data = AI_PTR(weights_map[0] + 17200);
    conv2d_24_bias_array.data_start = AI_PTR(weights_map[0] + 17200);
    conv2d_26_weights_array.format |= AI_FMT_FLAG_CONST;
 800590c:	4936      	ldr	r1, [pc, #216]	; (80059e8 <network_configure_weights+0x3b4>)
    conv2d_24_bias_array.format |= AI_FMT_FLAG_CONST;
 800590e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005912:	6010      	str	r0, [r2, #0]
    conv2d_24_bias_array.data = AI_PTR(weights_map[0] + 17200);
 8005914:	f244 3030 	movw	r0, #17200	; 0x4330
 8005918:	4418      	add	r0, r3
 800591a:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_26_weights_array.format |= AI_FMT_FLAG_CONST;
 800591e:	6808      	ldr	r0, [r1, #0]
    conv2d_26_weights_array.data = AI_PTR(weights_map[0] + 17584);
    conv2d_26_weights_array.data_start = AI_PTR(weights_map[0] + 17584);
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 8005920:	4a32      	ldr	r2, [pc, #200]	; (80059ec <network_configure_weights+0x3b8>)
    conv2d_26_weights_array.format |= AI_FMT_FLAG_CONST;
 8005922:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005926:	6008      	str	r0, [r1, #0]
    conv2d_26_weights_array.data = AI_PTR(weights_map[0] + 17584);
 8005928:	f244 40b0 	movw	r0, #17584	; 0x44b0
 800592c:	4418      	add	r0, r3
 800592e:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 8005932:	6810      	ldr	r0, [r2, #0]
    conv2d_26_bias_array.data = AI_PTR(weights_map[0] + 18448);
 8005934:	f644 0110 	movw	r1, #18448	; 0x4810
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 8005938:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_26_bias_array.data = AI_PTR(weights_map[0] + 18448);
 800593c:	4419      	add	r1, r3
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 800593e:	6010      	str	r0, [r2, #0]
    conv2d_26_bias_array.data_start = AI_PTR(weights_map[0] + 18448);
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_27_weights_array.data = AI_PTR(weights_map[0] + 18832);
 8005940:	f644 1090 	movw	r0, #18832	; 0x4990
    conv2d_26_bias_array.data = AI_PTR(weights_map[0] + 18448);
 8005944:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_27_weights_array.data = AI_PTR(weights_map[0] + 18832);
 8005948:	4418      	add	r0, r3
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
 800594a:	4929      	ldr	r1, [pc, #164]	; (80059f0 <network_configure_weights+0x3bc>)
 800594c:	e052      	b.n	80059f4 <network_configure_weights+0x3c0>
 800594e:	bf00      	nop
 8005950:	20003eb8 	.word	0x20003eb8
 8005954:	20003db8 	.word	0x20003db8
 8005958:	20004908 	.word	0x20004908
 800595c:	20004808 	.word	0x20004808
 8005960:	200051c8 	.word	0x200051c8
 8005964:	200050f8 	.word	0x200050f8
 8005968:	20005d18 	.word	0x20005d18
 800596c:	20005c18 	.word	0x20005c18
 8005970:	20006d40 	.word	0x20006d40
 8005974:	20006c40 	.word	0x20006c40
 8005978:	20006e40 	.word	0x20006e40
 800597c:	20006d70 	.word	0x20006d70
 8005980:	20006f70 	.word	0x20006f70
 8005984:	20006e70 	.word	0x20006e70
 8005988:	200070a0 	.word	0x200070a0
 800598c:	20006fa0 	.word	0x20006fa0
 8005990:	200036c8 	.word	0x200036c8
 8005994:	200035f8 	.word	0x200035f8
 8005998:	200037f8 	.word	0x200037f8
 800599c:	200036f8 	.word	0x200036f8
 80059a0:	20003928 	.word	0x20003928
 80059a4:	20003828 	.word	0x20003828
 80059a8:	20003a28 	.word	0x20003a28
 80059ac:	20003958 	.word	0x20003958
 80059b0:	20003b58 	.word	0x20003b58
 80059b4:	20003a58 	.word	0x20003a58
 80059b8:	20003c88 	.word	0x20003c88
 80059bc:	20003b88 	.word	0x20003b88
 80059c0:	20003d88 	.word	0x20003d88
 80059c4:	20003cb8 	.word	0x20003cb8
 80059c8:	20003fe8 	.word	0x20003fe8
 80059cc:	20003ee8 	.word	0x20003ee8
 80059d0:	20004118 	.word	0x20004118
 80059d4:	20004018 	.word	0x20004018
 80059d8:	20004218 	.word	0x20004218
 80059dc:	20004148 	.word	0x20004148
 80059e0:	20004348 	.word	0x20004348
 80059e4:	20004248 	.word	0x20004248
 80059e8:	20004478 	.word	0x20004478
 80059ec:	20004378 	.word	0x20004378
 80059f0:	20004578 	.word	0x20004578
    conv2d_27_weights_array.data_start = AI_PTR(weights_map[0] + 18832);
    conv2d_27_bias_array.format |= AI_FMT_FLAG_CONST;
 80059f4:	4abc      	ldr	r2, [pc, #752]	; (8005ce8 <network_configure_weights+0x6b4>)
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
 80059f6:	680d      	ldr	r5, [r1, #0]
    conv2d_27_weights_array.data = AI_PTR(weights_map[0] + 18832);
 80059f8:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_27_bias_array.format |= AI_FMT_FLAG_CONST;
 80059fc:	6810      	ldr	r0, [r2, #0]
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
 80059fe:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_27_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a02:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a06:	600d      	str	r5, [r1, #0]
    conv2d_27_bias_array.data = AI_PTR(weights_map[0] + 21136);
    conv2d_27_bias_array.data_start = AI_PTR(weights_map[0] + 21136);
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a08:	49b8      	ldr	r1, [pc, #736]	; (8005cec <network_configure_weights+0x6b8>)
    conv2d_29_bias_array.data_start = AI_PTR(weights_map[0] + 26560);
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_30_weights_array.data = AI_PTR(weights_map[0] + 27136);
    conv2d_30_weights_array.data_start = AI_PTR(weights_map[0] + 27136);
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_30_bias_array.data = AI_PTR(weights_map[0] + 30592);
 8005a0a:	f503 45ef 	add.w	r5, r3, #30592	; 0x7780
    conv2d_27_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a0e:	6010      	str	r0, [r2, #0]
    conv2d_27_bias_array.data = AI_PTR(weights_map[0] + 21136);
 8005a10:	f245 2090 	movw	r0, #21136	; 0x5290
 8005a14:	4418      	add	r0, r3
 8005a16:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a1a:	6808      	ldr	r0, [r1, #0]
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a1c:	4ab4      	ldr	r2, [pc, #720]	; (8005cf0 <network_configure_weights+0x6bc>)
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a1e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005a22:	6008      	str	r0, [r1, #0]
    conv2d_28_weights_array.data = AI_PTR(weights_map[0] + 21232);
 8005a24:	f245 20f0 	movw	r0, #21232	; 0x52f0
 8005a28:	4418      	add	r0, r3
 8005a2a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a2e:	6810      	ldr	r0, [r2, #0]
    conv2d_29_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a30:	49b0      	ldr	r1, [pc, #704]	; (8005cf4 <network_configure_weights+0x6c0>)
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a32:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005a36:	6010      	str	r0, [r2, #0]
    conv2d_28_bias_array.data = AI_PTR(weights_map[0] + 24688);
 8005a38:	f246 0070 	movw	r0, #24688	; 0x6070
 8005a3c:	4418      	add	r0, r3
 8005a3e:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_29_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a42:	6808      	ldr	r0, [r1, #0]
    conv2d_29_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a44:	4aac      	ldr	r2, [pc, #688]	; (8005cf8 <network_configure_weights+0x6c4>)
    conv2d_29_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a46:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005a4a:	6008      	str	r0, [r1, #0]
    conv2d_29_weights_array.data = AI_PTR(weights_map[0] + 25264);
 8005a4c:	f246 20b0 	movw	r0, #25264	; 0x62b0
 8005a50:	4418      	add	r0, r3
 8005a52:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_29_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a56:	6810      	ldr	r0, [r2, #0]
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a58:	49a8      	ldr	r1, [pc, #672]	; (8005cfc <network_configure_weights+0x6c8>)
    conv2d_29_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a5a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005a5e:	6010      	str	r0, [r2, #0]
    conv2d_29_bias_array.data = AI_PTR(weights_map[0] + 26560);
 8005a60:	f246 70c0 	movw	r0, #26560	; 0x67c0
 8005a64:	4418      	add	r0, r3
 8005a66:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a6a:	6808      	ldr	r0, [r1, #0]
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a6c:	4aa4      	ldr	r2, [pc, #656]	; (8005d00 <network_configure_weights+0x6cc>)
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a6e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005a72:	6008      	str	r0, [r1, #0]
    conv2d_30_weights_array.data = AI_PTR(weights_map[0] + 27136);
 8005a74:	f503 40d4 	add.w	r0, r3, #27136	; 0x6a00
 8005a78:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a7c:	6810      	ldr	r0, [r2, #0]
    conv2d_30_bias_array.data_start = AI_PTR(weights_map[0] + 30592);
    conv2d_32_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a7e:	49a1      	ldr	r1, [pc, #644]	; (8005d04 <network_configure_weights+0x6d0>)
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a80:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_30_bias_array.data = AI_PTR(weights_map[0] + 30592);
 8005a84:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a88:	6010      	str	r0, [r2, #0]
    conv2d_32_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a8a:	6808      	ldr	r0, [r1, #0]
    conv2d_32_weights_array.data = AI_PTR(weights_map[0] + 30688);
    conv2d_32_weights_array.data_start = AI_PTR(weights_map[0] + 30688);
    conv2d_32_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a8c:	4a9e      	ldr	r2, [pc, #632]	; (8005d08 <network_configure_weights+0x6d4>)
    conv2d_32_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a8e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005a92:	6008      	str	r0, [r1, #0]
    conv2d_32_weights_array.data = AI_PTR(weights_map[0] + 30688);
 8005a94:	f247 70e0 	movw	r0, #30688	; 0x77e0
 8005a98:	4418      	add	r0, r3
 8005a9a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_32_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a9e:	6810      	ldr	r0, [r2, #0]
    conv2d_32_bias_array.data = AI_PTR(weights_map[0] + 34144);
    conv2d_32_bias_array.data_start = AI_PTR(weights_map[0] + 34144);
    conv2d_33_weights_array.format |= AI_FMT_FLAG_CONST;
 8005aa0:	499a      	ldr	r1, [pc, #616]	; (8005d0c <network_configure_weights+0x6d8>)
    conv2d_32_bias_array.format |= AI_FMT_FLAG_CONST;
 8005aa2:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005aa6:	6010      	str	r0, [r2, #0]
    conv2d_32_bias_array.data = AI_PTR(weights_map[0] + 34144);
 8005aa8:	f248 5060 	movw	r0, #34144	; 0x8560
 8005aac:	4418      	add	r0, r3
 8005aae:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_33_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ab2:	6808      	ldr	r0, [r1, #0]
    conv2d_33_weights_array.data = AI_PTR(weights_map[0] + 34720);
    conv2d_33_weights_array.data_start = AI_PTR(weights_map[0] + 34720);
    conv2d_33_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ab4:	4a96      	ldr	r2, [pc, #600]	; (8005d10 <network_configure_weights+0x6dc>)
    conv2d_33_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ab6:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005aba:	6008      	str	r0, [r1, #0]
    conv2d_33_weights_array.data = AI_PTR(weights_map[0] + 34720);
 8005abc:	f248 70a0 	movw	r0, #34720	; 0x87a0
 8005ac0:	4418      	add	r0, r3
 8005ac2:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_33_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ac6:	6810      	ldr	r0, [r2, #0]
    conv2d_33_bias_array.data = AI_PTR(weights_map[0] + 36016);
    conv2d_33_bias_array.data_start = AI_PTR(weights_map[0] + 36016);
    conv2d_34_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ac8:	4992      	ldr	r1, [pc, #584]	; (8005d14 <network_configure_weights+0x6e0>)
    conv2d_33_bias_array.format |= AI_FMT_FLAG_CONST;
 8005aca:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005ace:	6010      	str	r0, [r2, #0]
    conv2d_33_bias_array.data = AI_PTR(weights_map[0] + 36016);
 8005ad0:	f648 40b0 	movw	r0, #36016	; 0x8cb0
 8005ad4:	4418      	add	r0, r3
 8005ad6:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_34_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ada:	6808      	ldr	r0, [r1, #0]
    conv2d_34_weights_array.data = AI_PTR(weights_map[0] + 36592);
    conv2d_34_weights_array.data_start = AI_PTR(weights_map[0] + 36592);
    conv2d_34_bias_array.format |= AI_FMT_FLAG_CONST;
 8005adc:	4a8e      	ldr	r2, [pc, #568]	; (8005d18 <network_configure_weights+0x6e4>)
    conv2d_34_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ade:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005ae2:	6008      	str	r0, [r1, #0]
    conv2d_34_weights_array.data = AI_PTR(weights_map[0] + 36592);
 8005ae4:	f648 60f0 	movw	r0, #36592	; 0x8ef0
 8005ae8:	4418      	add	r0, r3
 8005aea:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_34_bias_array.format |= AI_FMT_FLAG_CONST;
 8005aee:	6810      	ldr	r0, [r2, #0]
    conv2d_34_bias_array.data = AI_PTR(weights_map[0] + 40048);
    conv2d_34_bias_array.data_start = AI_PTR(weights_map[0] + 40048);
    conv2d_36_weights_array.format |= AI_FMT_FLAG_CONST;
 8005af0:	498a      	ldr	r1, [pc, #552]	; (8005d1c <network_configure_weights+0x6e8>)
    conv2d_34_bias_array.format |= AI_FMT_FLAG_CONST;
 8005af2:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005af6:	6010      	str	r0, [r2, #0]
    conv2d_34_bias_array.data = AI_PTR(weights_map[0] + 40048);
 8005af8:	f649 4070 	movw	r0, #40048	; 0x9c70
 8005afc:	4418      	add	r0, r3
 8005afe:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_36_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b02:	6808      	ldr	r0, [r1, #0]
    conv2d_36_weights_array.data = AI_PTR(weights_map[0] + 40144);
    conv2d_36_weights_array.data_start = AI_PTR(weights_map[0] + 40144);
    conv2d_36_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b04:	4a86      	ldr	r2, [pc, #536]	; (8005d20 <network_configure_weights+0x6ec>)
    conv2d_36_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b06:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005b0a:	6008      	str	r0, [r1, #0]
    conv2d_36_weights_array.data = AI_PTR(weights_map[0] + 40144);
 8005b0c:	f649 40d0 	movw	r0, #40144	; 0x9cd0
 8005b10:	4418      	add	r0, r3
 8005b12:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_36_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b16:	6810      	ldr	r0, [r2, #0]
    conv2d_36_bias_array.data = AI_PTR(weights_map[0] + 43600);
 8005b18:	f64a 2150 	movw	r1, #43600	; 0xaa50
    conv2d_36_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b1c:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_36_bias_array.data = AI_PTR(weights_map[0] + 43600);
 8005b20:	4419      	add	r1, r3
    conv2d_36_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b22:	6010      	str	r0, [r2, #0]
    conv2d_36_bias_array.data_start = AI_PTR(weights_map[0] + 43600);
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_37_weights_array.data = AI_PTR(weights_map[0] + 44176);
 8005b24:	f64a 4090 	movw	r0, #44176	; 0xac90
    conv2d_36_bias_array.data = AI_PTR(weights_map[0] + 43600);
 8005b28:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_37_weights_array.data = AI_PTR(weights_map[0] + 44176);
 8005b2c:	4418      	add	r0, r3
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b2e:	497d      	ldr	r1, [pc, #500]	; (8005d24 <network_configure_weights+0x6f0>)
    conv2d_37_weights_array.data_start = AI_PTR(weights_map[0] + 44176);
    conv2d_37_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b30:	4a7d      	ldr	r2, [pc, #500]	; (8005d28 <network_configure_weights+0x6f4>)
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b32:	680d      	ldr	r5, [r1, #0]
    conv2d_37_weights_array.data = AI_PTR(weights_map[0] + 44176);
 8005b34:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_37_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b38:	6810      	ldr	r0, [r2, #0]
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b3a:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_37_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b3e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b42:	600d      	str	r5, [r1, #0]
    conv2d_37_bias_array.data = AI_PTR(weights_map[0] + 45472);
    conv2d_37_bias_array.data_start = AI_PTR(weights_map[0] + 45472);
    conv2d_38_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b44:	4979      	ldr	r1, [pc, #484]	; (8005d2c <network_configure_weights+0x6f8>)
    conv2d_37_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b46:	6010      	str	r0, [r2, #0]
    conv2d_37_bias_array.data = AI_PTR(weights_map[0] + 45472);
 8005b48:	f24b 10a0 	movw	r0, #45472	; 0xb1a0
 8005b4c:	4418      	add	r0, r3
 8005b4e:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_38_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b52:	6808      	ldr	r0, [r1, #0]
    conv2d_38_weights_array.data = AI_PTR(weights_map[0] + 46048);
    conv2d_38_weights_array.data_start = AI_PTR(weights_map[0] + 46048);
    conv2d_38_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b54:	4a76      	ldr	r2, [pc, #472]	; (8005d30 <network_configure_weights+0x6fc>)
    conv2d_38_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b56:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005b5a:	6008      	str	r0, [r1, #0]
    conv2d_38_weights_array.data = AI_PTR(weights_map[0] + 46048);
 8005b5c:	f24b 30e0 	movw	r0, #46048	; 0xb3e0
 8005b60:	4418      	add	r0, r3
 8005b62:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_38_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b66:	6810      	ldr	r0, [r2, #0]
    conv2d_38_bias_array.data = AI_PTR(weights_map[0] + 49504);
    conv2d_38_bias_array.data_start = AI_PTR(weights_map[0] + 49504);
    conv2d_40_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b68:	4972      	ldr	r1, [pc, #456]	; (8005d34 <network_configure_weights+0x700>)
    conv2d_38_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b6a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005b6e:	6010      	str	r0, [r2, #0]
    conv2d_38_bias_array.data = AI_PTR(weights_map[0] + 49504);
 8005b70:	f24c 1060 	movw	r0, #49504	; 0xc160
 8005b74:	4418      	add	r0, r3
 8005b76:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_40_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b7a:	6808      	ldr	r0, [r1, #0]
    conv2d_40_weights_array.data = AI_PTR(weights_map[0] + 49600);
    conv2d_40_weights_array.data_start = AI_PTR(weights_map[0] + 49600);
    conv2d_40_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b7c:	4a6e      	ldr	r2, [pc, #440]	; (8005d38 <network_configure_weights+0x704>)
    conv2d_40_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b7e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005b82:	6008      	str	r0, [r1, #0]
    conv2d_40_weights_array.data = AI_PTR(weights_map[0] + 49600);
 8005b84:	f24c 10c0 	movw	r0, #49600	; 0xc1c0
 8005b88:	4418      	add	r0, r3
 8005b8a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_40_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b8e:	6810      	ldr	r0, [r2, #0]
    conv2d_40_bias_array.data = AI_PTR(weights_map[0] + 53056);
    conv2d_40_bias_array.data_start = AI_PTR(weights_map[0] + 53056);
    conv2d_41_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b90:	496a      	ldr	r1, [pc, #424]	; (8005d3c <network_configure_weights+0x708>)
    conv2d_40_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b92:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005b96:	6010      	str	r0, [r2, #0]
    conv2d_40_bias_array.data = AI_PTR(weights_map[0] + 53056);
 8005b98:	f64c 7040 	movw	r0, #53056	; 0xcf40
 8005b9c:	4418      	add	r0, r3
 8005b9e:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_41_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ba2:	6808      	ldr	r0, [r1, #0]
    conv2d_41_weights_array.data = AI_PTR(weights_map[0] + 53632);
    conv2d_41_weights_array.data_start = AI_PTR(weights_map[0] + 53632);
    conv2d_41_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ba4:	4a66      	ldr	r2, [pc, #408]	; (8005d40 <network_configure_weights+0x70c>)
    conv2d_41_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ba6:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005baa:	6008      	str	r0, [r1, #0]
    conv2d_41_weights_array.data = AI_PTR(weights_map[0] + 53632);
 8005bac:	f24d 1080 	movw	r0, #53632	; 0xd180
 8005bb0:	4418      	add	r0, r3
 8005bb2:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_41_bias_array.format |= AI_FMT_FLAG_CONST;
 8005bb6:	6810      	ldr	r0, [r2, #0]
    conv2d_41_bias_array.data = AI_PTR(weights_map[0] + 54928);
 8005bb8:	f24d 6190 	movw	r1, #54928	; 0xd690
    conv2d_41_bias_array.format |= AI_FMT_FLAG_CONST;
 8005bbc:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_41_bias_array.data = AI_PTR(weights_map[0] + 54928);
 8005bc0:	4419      	add	r1, r3
    conv2d_41_bias_array.format |= AI_FMT_FLAG_CONST;
 8005bc2:	6010      	str	r0, [r2, #0]
    conv2d_41_bias_array.data_start = AI_PTR(weights_map[0] + 54928);
    conv2d_42_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_42_weights_array.data = AI_PTR(weights_map[0] + 55504);
 8005bc4:	f64d 00d0 	movw	r0, #55504	; 0xd8d0
    conv2d_41_bias_array.data = AI_PTR(weights_map[0] + 54928);
 8005bc8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_42_weights_array.data = AI_PTR(weights_map[0] + 55504);
 8005bcc:	4418      	add	r0, r3
    conv2d_42_weights_array.format |= AI_FMT_FLAG_CONST;
 8005bce:	495d      	ldr	r1, [pc, #372]	; (8005d44 <network_configure_weights+0x710>)
    conv2d_42_weights_array.data_start = AI_PTR(weights_map[0] + 55504);
    conv2d_42_bias_array.format |= AI_FMT_FLAG_CONST;
 8005bd0:	4a5d      	ldr	r2, [pc, #372]	; (8005d48 <network_configure_weights+0x714>)
    conv2d_42_weights_array.format |= AI_FMT_FLAG_CONST;
 8005bd2:	680d      	ldr	r5, [r1, #0]
    conv2d_42_weights_array.data = AI_PTR(weights_map[0] + 55504);
 8005bd4:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_42_bias_array.format |= AI_FMT_FLAG_CONST;
 8005bd8:	6810      	ldr	r0, [r2, #0]
    conv2d_42_weights_array.format |= AI_FMT_FLAG_CONST;
 8005bda:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_42_bias_array.format |= AI_FMT_FLAG_CONST;
 8005bde:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_42_weights_array.format |= AI_FMT_FLAG_CONST;
 8005be2:	600d      	str	r5, [r1, #0]
    conv2d_42_bias_array.data = AI_PTR(weights_map[0] + 60112);
    conv2d_42_bias_array.data_start = AI_PTR(weights_map[0] + 60112);
    conv2d_43_weights_array.format |= AI_FMT_FLAG_CONST;
 8005be4:	4959      	ldr	r1, [pc, #356]	; (8005d4c <network_configure_weights+0x718>)
    conv2d_42_bias_array.format |= AI_FMT_FLAG_CONST;
 8005be6:	6010      	str	r0, [r2, #0]
    conv2d_42_bias_array.data = AI_PTR(weights_map[0] + 60112);
 8005be8:	f64e 20d0 	movw	r0, #60112	; 0xead0
 8005bec:	4418      	add	r0, r3
 8005bee:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_43_weights_array.format |= AI_FMT_FLAG_CONST;
 8005bf2:	6808      	ldr	r0, [r1, #0]
    conv2d_43_weights_array.data = AI_PTR(weights_map[0] + 60240);
    conv2d_43_weights_array.data_start = AI_PTR(weights_map[0] + 60240);
    conv2d_43_bias_array.format |= AI_FMT_FLAG_CONST;
 8005bf4:	4a56      	ldr	r2, [pc, #344]	; (8005d50 <network_configure_weights+0x71c>)
    conv2d_43_weights_array.format |= AI_FMT_FLAG_CONST;
 8005bf6:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005bfa:	6008      	str	r0, [r1, #0]
    conv2d_43_weights_array.data = AI_PTR(weights_map[0] + 60240);
 8005bfc:	f64e 3050 	movw	r0, #60240	; 0xeb50
 8005c00:	4418      	add	r0, r3
 8005c02:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_43_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c06:	6810      	ldr	r0, [r2, #0]
    conv2d_43_bias_array.data = AI_PTR(weights_map[0] + 66384);
    conv2d_43_bias_array.data_start = AI_PTR(weights_map[0] + 66384);
    conv2d_44_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c08:	4952      	ldr	r1, [pc, #328]	; (8005d54 <network_configure_weights+0x720>)
    conv2d_43_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c0a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005c0e:	6010      	str	r0, [r2, #0]
    conv2d_43_bias_array.data = AI_PTR(weights_map[0] + 66384);
 8005c10:	4851      	ldr	r0, [pc, #324]	; (8005d58 <network_configure_weights+0x724>)
 8005c12:	4418      	add	r0, r3
 8005c14:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_44_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c18:	6808      	ldr	r0, [r1, #0]
    conv2d_44_weights_array.data = AI_PTR(weights_map[0] + 67152);
    conv2d_44_weights_array.data_start = AI_PTR(weights_map[0] + 67152);
    conv2d_44_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c1a:	4a50      	ldr	r2, [pc, #320]	; (8005d5c <network_configure_weights+0x728>)
    conv2d_44_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c1c:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005c20:	6008      	str	r0, [r1, #0]
    conv2d_44_weights_array.data = AI_PTR(weights_map[0] + 67152);
 8005c22:	484f      	ldr	r0, [pc, #316]	; (8005d60 <network_configure_weights+0x72c>)
 8005c24:	4418      	add	r0, r3
 8005c26:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_44_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c2a:	6810      	ldr	r0, [r2, #0]
    conv2d_44_bias_array.data = AI_PTR(weights_map[0] + 68880);
    conv2d_44_bias_array.data_start = AI_PTR(weights_map[0] + 68880);
    conv2d_45_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c2c:	494d      	ldr	r1, [pc, #308]	; (8005d64 <network_configure_weights+0x730>)
    conv2d_44_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c2e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005c32:	6010      	str	r0, [r2, #0]
    conv2d_44_bias_array.data = AI_PTR(weights_map[0] + 68880);
 8005c34:	484c      	ldr	r0, [pc, #304]	; (8005d68 <network_configure_weights+0x734>)
 8005c36:	4418      	add	r0, r3
 8005c38:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_45_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c3c:	6808      	ldr	r0, [r1, #0]
    conv2d_45_weights_array.data = AI_PTR(weights_map[0] + 69648);
    conv2d_45_weights_array.data_start = AI_PTR(weights_map[0] + 69648);
    conv2d_45_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c3e:	4a4b      	ldr	r2, [pc, #300]	; (8005d6c <network_configure_weights+0x738>)
    conv2d_45_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c40:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005c44:	6008      	str	r0, [r1, #0]
    conv2d_45_weights_array.data = AI_PTR(weights_map[0] + 69648);
 8005c46:	484a      	ldr	r0, [pc, #296]	; (8005d70 <network_configure_weights+0x73c>)
 8005c48:	4418      	add	r0, r3
 8005c4a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_45_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c4e:	6810      	ldr	r0, [r2, #0]
    conv2d_45_bias_array.data = AI_PTR(weights_map[0] + 75792);
 8005c50:	4948      	ldr	r1, [pc, #288]	; (8005d74 <network_configure_weights+0x740>)
    conv2d_45_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c52:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_45_bias_array.data = AI_PTR(weights_map[0] + 75792);
 8005c56:	4419      	add	r1, r3
    conv2d_45_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c58:	6010      	str	r0, [r2, #0]
    conv2d_45_bias_array.data_start = AI_PTR(weights_map[0] + 75792);
    conv2d_47_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_47_weights_array.data = AI_PTR(weights_map[0] + 75920);
 8005c5a:	4847      	ldr	r0, [pc, #284]	; (8005d78 <network_configure_weights+0x744>)
    conv2d_45_bias_array.data = AI_PTR(weights_map[0] + 75792);
 8005c5c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_47_weights_array.data = AI_PTR(weights_map[0] + 75920);
 8005c60:	4418      	add	r0, r3
    conv2d_47_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c62:	4946      	ldr	r1, [pc, #280]	; (8005d7c <network_configure_weights+0x748>)
    conv2d_47_weights_array.data_start = AI_PTR(weights_map[0] + 75920);
    conv2d_47_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c64:	4a46      	ldr	r2, [pc, #280]	; (8005d80 <network_configure_weights+0x74c>)
    conv2d_47_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c66:	680d      	ldr	r5, [r1, #0]
    conv2d_47_weights_array.data = AI_PTR(weights_map[0] + 75920);
 8005c68:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_47_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c6c:	6810      	ldr	r0, [r2, #0]
    conv2d_47_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c6e:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_47_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c72:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_47_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c76:	600d      	str	r5, [r1, #0]
    conv2d_47_bias_array.data = AI_PTR(weights_map[0] + 82064);
    conv2d_47_bias_array.data_start = AI_PTR(weights_map[0] + 82064);
    conv2d_48_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c78:	4942      	ldr	r1, [pc, #264]	; (8005d84 <network_configure_weights+0x750>)
    conv2d_47_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c7a:	6010      	str	r0, [r2, #0]
    conv2d_47_bias_array.data = AI_PTR(weights_map[0] + 82064);
 8005c7c:	4842      	ldr	r0, [pc, #264]	; (8005d88 <network_configure_weights+0x754>)
 8005c7e:	4418      	add	r0, r3
 8005c80:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_48_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c84:	6808      	ldr	r0, [r1, #0]
    conv2d_48_weights_array.data = AI_PTR(weights_map[0] + 82832);
    conv2d_48_weights_array.data_start = AI_PTR(weights_map[0] + 82832);
    conv2d_48_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c86:	4a41      	ldr	r2, [pc, #260]	; (8005d8c <network_configure_weights+0x758>)
    conv2d_48_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c88:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005c8c:	6008      	str	r0, [r1, #0]
    conv2d_48_weights_array.data = AI_PTR(weights_map[0] + 82832);
 8005c8e:	4840      	ldr	r0, [pc, #256]	; (8005d90 <network_configure_weights+0x75c>)
 8005c90:	4418      	add	r0, r3
 8005c92:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_48_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c96:	6810      	ldr	r0, [r2, #0]
    conv2d_48_bias_array.data = AI_PTR(weights_map[0] + 84560);
    conv2d_48_bias_array.data_start = AI_PTR(weights_map[0] + 84560);
    conv2d_49_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c98:	493e      	ldr	r1, [pc, #248]	; (8005d94 <network_configure_weights+0x760>)
    conv2d_48_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c9a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005c9e:	6010      	str	r0, [r2, #0]
    conv2d_48_bias_array.data = AI_PTR(weights_map[0] + 84560);
 8005ca0:	483d      	ldr	r0, [pc, #244]	; (8005d98 <network_configure_weights+0x764>)
 8005ca2:	4418      	add	r0, r3
 8005ca4:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_49_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ca8:	6808      	ldr	r0, [r1, #0]
    conv2d_49_weights_array.data = AI_PTR(weights_map[0] + 85328);
    conv2d_49_weights_array.data_start = AI_PTR(weights_map[0] + 85328);
    conv2d_49_bias_array.format |= AI_FMT_FLAG_CONST;
 8005caa:	4a3c      	ldr	r2, [pc, #240]	; (8005d9c <network_configure_weights+0x768>)
    conv2d_49_weights_array.format |= AI_FMT_FLAG_CONST;
 8005cac:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005cb0:	6008      	str	r0, [r1, #0]
    conv2d_49_weights_array.data = AI_PTR(weights_map[0] + 85328);
 8005cb2:	483b      	ldr	r0, [pc, #236]	; (8005da0 <network_configure_weights+0x76c>)
 8005cb4:	4418      	add	r0, r3
 8005cb6:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_49_bias_array.format |= AI_FMT_FLAG_CONST;
 8005cba:	6810      	ldr	r0, [r2, #0]
    conv2d_49_bias_array.data = AI_PTR(weights_map[0] + 91472);
    conv2d_49_bias_array.data_start = AI_PTR(weights_map[0] + 91472);
    conv2d_51_weights_array.format |= AI_FMT_FLAG_CONST;
 8005cbc:	4939      	ldr	r1, [pc, #228]	; (8005da4 <network_configure_weights+0x770>)
    conv2d_49_bias_array.format |= AI_FMT_FLAG_CONST;
 8005cbe:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005cc2:	6010      	str	r0, [r2, #0]
    conv2d_49_bias_array.data = AI_PTR(weights_map[0] + 91472);
 8005cc4:	4838      	ldr	r0, [pc, #224]	; (8005da8 <network_configure_weights+0x774>)
 8005cc6:	4418      	add	r0, r3
 8005cc8:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_51_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ccc:	6808      	ldr	r0, [r1, #0]
    conv2d_51_weights_array.data = AI_PTR(weights_map[0] + 91600);
    conv2d_51_weights_array.data_start = AI_PTR(weights_map[0] + 91600);
    conv2d_51_bias_array.format |= AI_FMT_FLAG_CONST;
 8005cce:	4a37      	ldr	r2, [pc, #220]	; (8005dac <network_configure_weights+0x778>)
    conv2d_51_weights_array.format |= AI_FMT_FLAG_CONST;
 8005cd0:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005cd4:	6008      	str	r0, [r1, #0]
    conv2d_51_weights_array.data = AI_PTR(weights_map[0] + 91600);
 8005cd6:	4836      	ldr	r0, [pc, #216]	; (8005db0 <network_configure_weights+0x77c>)
 8005cd8:	4418      	add	r0, r3
 8005cda:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_51_bias_array.format |= AI_FMT_FLAG_CONST;
 8005cde:	6810      	ldr	r0, [r2, #0]
    conv2d_51_bias_array.data = AI_PTR(weights_map[0] + 97744);
 8005ce0:	4934      	ldr	r1, [pc, #208]	; (8005db4 <network_configure_weights+0x780>)
    conv2d_51_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ce2:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005ce6:	e067      	b.n	8005db8 <network_configure_weights+0x784>
 8005ce8:	200044a8 	.word	0x200044a8
 8005cec:	200046a8 	.word	0x200046a8
 8005cf0:	200045a8 	.word	0x200045a8
 8005cf4:	200047d8 	.word	0x200047d8
 8005cf8:	200046d8 	.word	0x200046d8
 8005cfc:	20004a08 	.word	0x20004a08
 8005d00:	20004938 	.word	0x20004938
 8005d04:	20004b38 	.word	0x20004b38
 8005d08:	20004a38 	.word	0x20004a38
 8005d0c:	20004c68 	.word	0x20004c68
 8005d10:	20004b68 	.word	0x20004b68
 8005d14:	20004d68 	.word	0x20004d68
 8005d18:	20004c98 	.word	0x20004c98
 8005d1c:	20004e98 	.word	0x20004e98
 8005d20:	20004d98 	.word	0x20004d98
 8005d24:	20004fc8 	.word	0x20004fc8
 8005d28:	20004ec8 	.word	0x20004ec8
 8005d2c:	200050c8 	.word	0x200050c8
 8005d30:	20004ff8 	.word	0x20004ff8
 8005d34:	200052f8 	.word	0x200052f8
 8005d38:	200051f8 	.word	0x200051f8
 8005d3c:	20005428 	.word	0x20005428
 8005d40:	20005328 	.word	0x20005328
 8005d44:	20005528 	.word	0x20005528
 8005d48:	20005458 	.word	0x20005458
 8005d4c:	20005658 	.word	0x20005658
 8005d50:	20005558 	.word	0x20005558
 8005d54:	20005788 	.word	0x20005788
 8005d58:	00010350 	.word	0x00010350
 8005d5c:	20005688 	.word	0x20005688
 8005d60:	00010650 	.word	0x00010650
 8005d64:	20005888 	.word	0x20005888
 8005d68:	00010d10 	.word	0x00010d10
 8005d6c:	200057b8 	.word	0x200057b8
 8005d70:	00011010 	.word	0x00011010
 8005d74:	00012810 	.word	0x00012810
 8005d78:	00012890 	.word	0x00012890
 8005d7c:	200059b8 	.word	0x200059b8
 8005d80:	200058b8 	.word	0x200058b8
 8005d84:	20005ae8 	.word	0x20005ae8
 8005d88:	00014090 	.word	0x00014090
 8005d8c:	200059e8 	.word	0x200059e8
 8005d90:	00014390 	.word	0x00014390
 8005d94:	20005be8 	.word	0x20005be8
 8005d98:	00014a50 	.word	0x00014a50
 8005d9c:	20005b18 	.word	0x20005b18
 8005da0:	00014d50 	.word	0x00014d50
 8005da4:	20005e48 	.word	0x20005e48
 8005da8:	00016550 	.word	0x00016550
 8005dac:	20005d48 	.word	0x20005d48
 8005db0:	000165d0 	.word	0x000165d0
 8005db4:	00017dd0 	.word	0x00017dd0
    conv2d_51_bias_array.data = AI_PTR(weights_map[0] + 97744);
 8005db8:	4419      	add	r1, r3
    conv2d_51_bias_array.format |= AI_FMT_FLAG_CONST;
 8005dba:	6010      	str	r0, [r2, #0]
    conv2d_51_bias_array.data_start = AI_PTR(weights_map[0] + 97744);
    conv2d_53_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_53_weights_array.data = AI_PTR(weights_map[0] + 98512);
 8005dbc:	487b      	ldr	r0, [pc, #492]	; (8005fac <network_configure_weights+0x978>)
    conv2d_51_bias_array.data = AI_PTR(weights_map[0] + 97744);
 8005dbe:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_53_weights_array.data = AI_PTR(weights_map[0] + 98512);
 8005dc2:	4418      	add	r0, r3
    conv2d_53_weights_array.format |= AI_FMT_FLAG_CONST;
 8005dc4:	497a      	ldr	r1, [pc, #488]	; (8005fb0 <network_configure_weights+0x97c>)
    conv2d_53_weights_array.data_start = AI_PTR(weights_map[0] + 98512);
    conv2d_53_bias_array.format |= AI_FMT_FLAG_CONST;
 8005dc6:	4a7b      	ldr	r2, [pc, #492]	; (8005fb4 <network_configure_weights+0x980>)
    conv2d_53_weights_array.format |= AI_FMT_FLAG_CONST;
 8005dc8:	680d      	ldr	r5, [r1, #0]
    conv2d_53_weights_array.data = AI_PTR(weights_map[0] + 98512);
 8005dca:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_53_bias_array.format |= AI_FMT_FLAG_CONST;
 8005dce:	6810      	ldr	r0, [r2, #0]
    conv2d_53_weights_array.format |= AI_FMT_FLAG_CONST;
 8005dd0:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_53_bias_array.format |= AI_FMT_FLAG_CONST;
 8005dd4:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_53_weights_array.format |= AI_FMT_FLAG_CONST;
 8005dd8:	600d      	str	r5, [r1, #0]
    conv2d_53_bias_array.data = AI_PTR(weights_map[0] + 100240);
    conv2d_53_bias_array.data_start = AI_PTR(weights_map[0] + 100240);
    conv2d_54_weights_array.format |= AI_FMT_FLAG_CONST;
 8005dda:	4977      	ldr	r1, [pc, #476]	; (8005fb8 <network_configure_weights+0x984>)
    conv2d_55_bias_array.data_start = AI_PTR(weights_map[0] + 130800);
    conv2d_56_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_56_weights_array.data = AI_PTR(weights_map[0] + 132144);
    conv2d_56_weights_array.data_start = AI_PTR(weights_map[0] + 132144);
    conv2d_56_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_56_bias_array.data = AI_PTR(weights_map[0] + 135168);
 8005ddc:	f503 3504 	add.w	r5, r3, #135168	; 0x21000
    conv2d_53_bias_array.format |= AI_FMT_FLAG_CONST;
 8005de0:	6010      	str	r0, [r2, #0]
    conv2d_53_bias_array.data = AI_PTR(weights_map[0] + 100240);
 8005de2:	4876      	ldr	r0, [pc, #472]	; (8005fbc <network_configure_weights+0x988>)
 8005de4:	4418      	add	r0, r3
 8005de6:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_54_weights_array.format |= AI_FMT_FLAG_CONST;
 8005dea:	6808      	ldr	r0, [r1, #0]
    conv2d_54_bias_array.format |= AI_FMT_FLAG_CONST;
 8005dec:	4a74      	ldr	r2, [pc, #464]	; (8005fc0 <network_configure_weights+0x98c>)
    conv2d_54_weights_array.format |= AI_FMT_FLAG_CONST;
 8005dee:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005df2:	6008      	str	r0, [r1, #0]
    conv2d_54_weights_array.data = AI_PTR(weights_map[0] + 101008);
 8005df4:	4873      	ldr	r0, [pc, #460]	; (8005fc4 <network_configure_weights+0x990>)
 8005df6:	4418      	add	r0, r3
 8005df8:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_54_bias_array.format |= AI_FMT_FLAG_CONST;
 8005dfc:	6810      	ldr	r0, [r2, #0]
    conv2d_55_weights_array.format |= AI_FMT_FLAG_CONST;
 8005dfe:	4972      	ldr	r1, [pc, #456]	; (8005fc8 <network_configure_weights+0x994>)
    conv2d_54_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e00:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005e04:	6010      	str	r0, [r2, #0]
    conv2d_54_bias_array.data = AI_PTR(weights_map[0] + 111760);
 8005e06:	4871      	ldr	r0, [pc, #452]	; (8005fcc <network_configure_weights+0x998>)
 8005e08:	4418      	add	r0, r3
 8005e0a:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_55_weights_array.format |= AI_FMT_FLAG_CONST;
 8005e0e:	6808      	ldr	r0, [r1, #0]
    conv2d_55_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e10:	4a6f      	ldr	r2, [pc, #444]	; (8005fd0 <network_configure_weights+0x99c>)
    conv2d_55_weights_array.format |= AI_FMT_FLAG_CONST;
 8005e12:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005e16:	6008      	str	r0, [r1, #0]
    conv2d_55_weights_array.data = AI_PTR(weights_map[0] + 111984);
 8005e18:	486e      	ldr	r0, [pc, #440]	; (8005fd4 <network_configure_weights+0x9a0>)
 8005e1a:	4418      	add	r0, r3
 8005e1c:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_55_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e20:	6810      	ldr	r0, [r2, #0]
    conv2d_56_weights_array.format |= AI_FMT_FLAG_CONST;
 8005e22:	496d      	ldr	r1, [pc, #436]	; (8005fd8 <network_configure_weights+0x9a4>)
    conv2d_55_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e24:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005e28:	6010      	str	r0, [r2, #0]
    conv2d_55_bias_array.data = AI_PTR(weights_map[0] + 130800);
 8005e2a:	486c      	ldr	r0, [pc, #432]	; (8005fdc <network_configure_weights+0x9a8>)
 8005e2c:	4418      	add	r0, r3
 8005e2e:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_56_weights_array.format |= AI_FMT_FLAG_CONST;
 8005e32:	6808      	ldr	r0, [r1, #0]
    conv2d_56_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e34:	4a6a      	ldr	r2, [pc, #424]	; (8005fe0 <network_configure_weights+0x9ac>)
    conv2d_56_weights_array.format |= AI_FMT_FLAG_CONST;
 8005e36:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005e3a:	6008      	str	r0, [r1, #0]
    conv2d_56_weights_array.data = AI_PTR(weights_map[0] + 132144);
 8005e3c:	4869      	ldr	r0, [pc, #420]	; (8005fe4 <network_configure_weights+0x9b0>)
 8005e3e:	4418      	add	r0, r3
 8005e40:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_56_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e44:	6810      	ldr	r0, [r2, #0]
    conv2d_56_bias_array.data_start = AI_PTR(weights_map[0] + 135168);
    conv2d_57_weights_array.format |= AI_FMT_FLAG_CONST;
 8005e46:	4968      	ldr	r1, [pc, #416]	; (8005fe8 <network_configure_weights+0x9b4>)
    conv2d_56_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e48:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_56_bias_array.data = AI_PTR(weights_map[0] + 135168);
 8005e4c:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_56_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e50:	6010      	str	r0, [r2, #0]
    conv2d_57_weights_array.format |= AI_FMT_FLAG_CONST;
 8005e52:	6808      	ldr	r0, [r1, #0]
    conv2d_57_weights_array.data = AI_PTR(weights_map[0] + 136512);
    conv2d_57_weights_array.data_start = AI_PTR(weights_map[0] + 136512);
    conv2d_57_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e54:	4a65      	ldr	r2, [pc, #404]	; (8005fec <network_configure_weights+0x9b8>)
    conv2d_57_weights_array.format |= AI_FMT_FLAG_CONST;
 8005e56:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005e5a:	6008      	str	r0, [r1, #0]
    conv2d_57_weights_array.data = AI_PTR(weights_map[0] + 136512);
 8005e5c:	4864      	ldr	r0, [pc, #400]	; (8005ff0 <network_configure_weights+0x9bc>)
 8005e5e:	4418      	add	r0, r3
 8005e60:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_57_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e64:	6810      	ldr	r0, [r2, #0]
    conv2d_57_bias_array.data = AI_PTR(weights_map[0] + 155328);
    conv2d_57_bias_array.data_start = AI_PTR(weights_map[0] + 155328);
    conv2d_59_weights_array.format |= AI_FMT_FLAG_CONST;
 8005e66:	4963      	ldr	r1, [pc, #396]	; (8005ff4 <network_configure_weights+0x9c0>)
    conv2d_57_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e68:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005e6c:	6010      	str	r0, [r2, #0]
    conv2d_57_bias_array.data = AI_PTR(weights_map[0] + 155328);
 8005e6e:	4862      	ldr	r0, [pc, #392]	; (8005ff8 <network_configure_weights+0x9c4>)
 8005e70:	4418      	add	r0, r3
 8005e72:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_59_weights_array.format |= AI_FMT_FLAG_CONST;
 8005e76:	6808      	ldr	r0, [r1, #0]
    conv2d_59_weights_array.data = AI_PTR(weights_map[0] + 155552);
    conv2d_59_weights_array.data_start = AI_PTR(weights_map[0] + 155552);
    conv2d_59_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e78:	4a60      	ldr	r2, [pc, #384]	; (8005ffc <network_configure_weights+0x9c8>)
    conv2d_59_weights_array.format |= AI_FMT_FLAG_CONST;
 8005e7a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005e7e:	6008      	str	r0, [r1, #0]
    conv2d_59_weights_array.data = AI_PTR(weights_map[0] + 155552);
 8005e80:	485f      	ldr	r0, [pc, #380]	; (8006000 <network_configure_weights+0x9cc>)
 8005e82:	4418      	add	r0, r3
 8005e84:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_59_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e88:	6810      	ldr	r0, [r2, #0]
    conv2d_59_bias_array.data = AI_PTR(weights_map[0] + 174368);
    conv2d_59_bias_array.data_start = AI_PTR(weights_map[0] + 174368);
    conv2d_60_weights_array.format |= AI_FMT_FLAG_CONST;
 8005e8a:	495e      	ldr	r1, [pc, #376]	; (8006004 <network_configure_weights+0x9d0>)
    conv2d_59_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e8c:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005e90:	6010      	str	r0, [r2, #0]
    conv2d_59_bias_array.data = AI_PTR(weights_map[0] + 174368);
 8005e92:	485d      	ldr	r0, [pc, #372]	; (8006008 <network_configure_weights+0x9d4>)
 8005e94:	4418      	add	r0, r3
 8005e96:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_60_weights_array.format |= AI_FMT_FLAG_CONST;
 8005e9a:	6808      	ldr	r0, [r1, #0]
    conv2d_60_weights_array.data = AI_PTR(weights_map[0] + 175712);
    conv2d_60_weights_array.data_start = AI_PTR(weights_map[0] + 175712);
    conv2d_60_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e9c:	4a5b      	ldr	r2, [pc, #364]	; (800600c <network_configure_weights+0x9d8>)
    conv2d_60_weights_array.format |= AI_FMT_FLAG_CONST;
 8005e9e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005ea2:	6008      	str	r0, [r1, #0]
    conv2d_60_weights_array.data = AI_PTR(weights_map[0] + 175712);
 8005ea4:	485a      	ldr	r0, [pc, #360]	; (8006010 <network_configure_weights+0x9dc>)
 8005ea6:	4418      	add	r0, r3
 8005ea8:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_60_bias_array.format |= AI_FMT_FLAG_CONST;
 8005eac:	6810      	ldr	r0, [r2, #0]
    conv2d_60_bias_array.data = AI_PTR(weights_map[0] + 178736);
    conv2d_60_bias_array.data_start = AI_PTR(weights_map[0] + 178736);
    conv2d_61_weights_array.format |= AI_FMT_FLAG_CONST;
 8005eae:	4959      	ldr	r1, [pc, #356]	; (8006014 <network_configure_weights+0x9e0>)
    conv2d_60_bias_array.format |= AI_FMT_FLAG_CONST;
 8005eb0:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005eb4:	6010      	str	r0, [r2, #0]
    conv2d_60_bias_array.data = AI_PTR(weights_map[0] + 178736);
 8005eb6:	4858      	ldr	r0, [pc, #352]	; (8006018 <network_configure_weights+0x9e4>)
 8005eb8:	4418      	add	r0, r3
 8005eba:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_61_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ebe:	6808      	ldr	r0, [r1, #0]
    conv2d_61_weights_array.data = AI_PTR(weights_map[0] + 180080);
    conv2d_61_weights_array.data_start = AI_PTR(weights_map[0] + 180080);
    conv2d_61_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ec0:	4a56      	ldr	r2, [pc, #344]	; (800601c <network_configure_weights+0x9e8>)
    conv2d_61_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ec2:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005ec6:	6008      	str	r0, [r1, #0]
    conv2d_61_weights_array.data = AI_PTR(weights_map[0] + 180080);
 8005ec8:	4855      	ldr	r0, [pc, #340]	; (8006020 <network_configure_weights+0x9ec>)
 8005eca:	4418      	add	r0, r3
 8005ecc:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_61_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ed0:	6810      	ldr	r0, [r2, #0]
    conv2d_61_bias_array.data = AI_PTR(weights_map[0] + 198896);
 8005ed2:	4954      	ldr	r1, [pc, #336]	; (8006024 <network_configure_weights+0x9f0>)
    conv2d_61_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ed4:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_61_bias_array.data = AI_PTR(weights_map[0] + 198896);
 8005ed8:	4419      	add	r1, r3
    conv2d_61_bias_array.format |= AI_FMT_FLAG_CONST;
 8005eda:	6010      	str	r0, [r2, #0]
    conv2d_61_bias_array.data_start = AI_PTR(weights_map[0] + 198896);
    conv2d_63_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_63_weights_array.data = AI_PTR(weights_map[0] + 199120);
 8005edc:	4852      	ldr	r0, [pc, #328]	; (8006028 <network_configure_weights+0x9f4>)
    conv2d_61_bias_array.data = AI_PTR(weights_map[0] + 198896);
 8005ede:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_63_weights_array.data = AI_PTR(weights_map[0] + 199120);
 8005ee2:	4418      	add	r0, r3
    conv2d_63_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ee4:	4951      	ldr	r1, [pc, #324]	; (800602c <network_configure_weights+0x9f8>)
    conv2d_63_weights_array.data_start = AI_PTR(weights_map[0] + 199120);
    conv2d_63_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ee6:	4a52      	ldr	r2, [pc, #328]	; (8006030 <network_configure_weights+0x9fc>)
    conv2d_63_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ee8:	680d      	ldr	r5, [r1, #0]
    conv2d_63_weights_array.data = AI_PTR(weights_map[0] + 199120);
 8005eea:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_63_bias_array.format |= AI_FMT_FLAG_CONST;
 8005eee:	6810      	ldr	r0, [r2, #0]
    conv2d_63_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ef0:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_63_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ef4:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_63_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ef8:	600d      	str	r5, [r1, #0]
    conv2d_63_bias_array.data = AI_PTR(weights_map[0] + 217936);
    conv2d_63_bias_array.data_start = AI_PTR(weights_map[0] + 217936);
    conv2d_64_weights_array.format |= AI_FMT_FLAG_CONST;
 8005efa:	494e      	ldr	r1, [pc, #312]	; (8006034 <network_configure_weights+0xa00>)
    conv2d_63_bias_array.format |= AI_FMT_FLAG_CONST;
 8005efc:	6010      	str	r0, [r2, #0]
    conv2d_63_bias_array.data = AI_PTR(weights_map[0] + 217936);
 8005efe:	484e      	ldr	r0, [pc, #312]	; (8006038 <network_configure_weights+0xa04>)
 8005f00:	4418      	add	r0, r3
 8005f02:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_64_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f06:	6808      	ldr	r0, [r1, #0]
    conv2d_64_weights_array.data = AI_PTR(weights_map[0] + 219280);
    conv2d_64_weights_array.data_start = AI_PTR(weights_map[0] + 219280);
    conv2d_64_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f08:	4a4c      	ldr	r2, [pc, #304]	; (800603c <network_configure_weights+0xa08>)
    conv2d_64_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f0a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005f0e:	6008      	str	r0, [r1, #0]
    conv2d_64_weights_array.data = AI_PTR(weights_map[0] + 219280);
 8005f10:	484b      	ldr	r0, [pc, #300]	; (8006040 <network_configure_weights+0xa0c>)
 8005f12:	4418      	add	r0, r3
 8005f14:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_64_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f18:	6810      	ldr	r0, [r2, #0]
    conv2d_64_bias_array.data = AI_PTR(weights_map[0] + 222304);
    conv2d_64_bias_array.data_start = AI_PTR(weights_map[0] + 222304);
    conv2d_65_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f1a:	494a      	ldr	r1, [pc, #296]	; (8006044 <network_configure_weights+0xa10>)
    conv2d_64_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f1c:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005f20:	6010      	str	r0, [r2, #0]
    conv2d_64_bias_array.data = AI_PTR(weights_map[0] + 222304);
 8005f22:	4849      	ldr	r0, [pc, #292]	; (8006048 <network_configure_weights+0xa14>)
 8005f24:	4418      	add	r0, r3
 8005f26:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_65_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f2a:	6808      	ldr	r0, [r1, #0]
    conv2d_65_weights_array.data = AI_PTR(weights_map[0] + 223648);
    conv2d_65_weights_array.data_start = AI_PTR(weights_map[0] + 223648);
    conv2d_65_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f2c:	4a47      	ldr	r2, [pc, #284]	; (800604c <network_configure_weights+0xa18>)
    conv2d_65_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f2e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005f32:	6008      	str	r0, [r1, #0]
    conv2d_65_weights_array.data = AI_PTR(weights_map[0] + 223648);
 8005f34:	4846      	ldr	r0, [pc, #280]	; (8006050 <network_configure_weights+0xa1c>)
 8005f36:	4418      	add	r0, r3
 8005f38:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_65_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f3c:	6810      	ldr	r0, [r2, #0]
    conv2d_65_bias_array.data = AI_PTR(weights_map[0] + 261280);
    conv2d_65_bias_array.data_start = AI_PTR(weights_map[0] + 261280);
    conv2d_66_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f3e:	4945      	ldr	r1, [pc, #276]	; (8006054 <network_configure_weights+0xa20>)
    conv2d_65_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f40:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005f44:	6010      	str	r0, [r2, #0]
    conv2d_65_bias_array.data = AI_PTR(weights_map[0] + 261280);
 8005f46:	4844      	ldr	r0, [pc, #272]	; (8006058 <network_configure_weights+0xa24>)
 8005f48:	4418      	add	r0, r3
 8005f4a:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_66_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f4e:	6808      	ldr	r0, [r1, #0]
    conv2d_66_weights_array.data = AI_PTR(weights_map[0] + 261728);
    conv2d_66_weights_array.data_start = AI_PTR(weights_map[0] + 261728);
    conv2d_66_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f50:	4a42      	ldr	r2, [pc, #264]	; (800605c <network_configure_weights+0xa28>)
    conv2d_66_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f52:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005f56:	6008      	str	r0, [r1, #0]
    conv2d_66_weights_array.data = AI_PTR(weights_map[0] + 261728);
 8005f58:	4841      	ldr	r0, [pc, #260]	; (8006060 <network_configure_weights+0xa2c>)
 8005f5a:	4418      	add	r0, r3
 8005f5c:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_66_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f60:	6810      	ldr	r0, [r2, #0]
    conv2d_66_bias_array.data = AI_PTR(weights_map[0] + 405088);
 8005f62:	4940      	ldr	r1, [pc, #256]	; (8006064 <network_configure_weights+0xa30>)
    conv2d_66_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f64:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_66_bias_array.data = AI_PTR(weights_map[0] + 405088);
 8005f68:	4419      	add	r1, r3
    conv2d_66_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f6a:	6010      	str	r0, [r2, #0]
    conv2d_66_bias_array.data_start = AI_PTR(weights_map[0] + 405088);
    dense_68_weights_array.format |= AI_FMT_FLAG_CONST;
    dense_68_weights_array.data = AI_PTR(weights_map[0] + 410208);
 8005f6c:	483e      	ldr	r0, [pc, #248]	; (8006068 <network_configure_weights+0xa34>)
    conv2d_66_bias_array.data = AI_PTR(weights_map[0] + 405088);
 8005f6e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_68_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f72:	493e      	ldr	r1, [pc, #248]	; (800606c <network_configure_weights+0xa38>)
    dense_68_weights_array.data = AI_PTR(weights_map[0] + 410208);
 8005f74:	4418      	add	r0, r3
    dense_68_weights_array.data_start = AI_PTR(weights_map[0] + 410208);
    dense_68_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f76:	4a3e      	ldr	r2, [pc, #248]	; (8006070 <network_configure_weights+0xa3c>)
    dense_68_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f78:	680d      	ldr	r5, [r1, #0]
    dense_68_weights_array.data = AI_PTR(weights_map[0] + 410208);
 8005f7a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_68_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f7e:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    dense_68_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f82:	6810      	ldr	r0, [r2, #0]
    dense_68_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f84:	600d      	str	r5, [r1, #0]
    dense_68_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f86:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    dense_68_bias_array.data = AI_PTR(weights_map[0] + 416608);
 8005f8a:	493a      	ldr	r1, [pc, #232]	; (8006074 <network_configure_weights+0xa40>)
    dense_68_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f8c:	6010      	str	r0, [r2, #0]
    dense_68_bias_array.data_start = AI_PTR(weights_map[0] + 416608);
    return true;
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
  return false;
}
 8005f8e:	4620      	mov	r0, r4
    dense_68_bias_array.data = AI_PTR(weights_map[0] + 416608);
 8005f90:	4419      	add	r1, r3
 8005f92:	e9c2 1102 	strd	r1, r1, [r2, #8]
}
 8005f96:	b003      	add	sp, #12
 8005f98:	bd30      	pop	{r4, r5, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8005f9a:	2212      	movs	r2, #18
 8005f9c:	2130      	movs	r1, #48	; 0x30
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	f016 f96a 	bl	801c278 <ai_platform_network_set_error>
}
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	b003      	add	sp, #12
 8005fa8:	bd30      	pop	{r4, r5, pc}
 8005faa:	bf00      	nop
 8005fac:	000180d0 	.word	0x000180d0
 8005fb0:	20005f78 	.word	0x20005f78
 8005fb4:	20005e78 	.word	0x20005e78
 8005fb8:	20006078 	.word	0x20006078
 8005fbc:	00018790 	.word	0x00018790
 8005fc0:	20005fa8 	.word	0x20005fa8
 8005fc4:	00018a90 	.word	0x00018a90
 8005fc8:	200061a8 	.word	0x200061a8
 8005fcc:	0001b490 	.word	0x0001b490
 8005fd0:	200060a8 	.word	0x200060a8
 8005fd4:	0001b570 	.word	0x0001b570
 8005fd8:	200062d8 	.word	0x200062d8
 8005fdc:	0001fef0 	.word	0x0001fef0
 8005fe0:	200061d8 	.word	0x200061d8
 8005fe4:	00020430 	.word	0x00020430
 8005fe8:	200063d8 	.word	0x200063d8
 8005fec:	20006308 	.word	0x20006308
 8005ff0:	00021540 	.word	0x00021540
 8005ff4:	20006508 	.word	0x20006508
 8005ff8:	00025ec0 	.word	0x00025ec0
 8005ffc:	20006408 	.word	0x20006408
 8006000:	00025fa0 	.word	0x00025fa0
 8006004:	20006638 	.word	0x20006638
 8006008:	0002a920 	.word	0x0002a920
 800600c:	20006538 	.word	0x20006538
 8006010:	0002ae60 	.word	0x0002ae60
 8006014:	20006738 	.word	0x20006738
 8006018:	0002ba30 	.word	0x0002ba30
 800601c:	20006668 	.word	0x20006668
 8006020:	0002bf70 	.word	0x0002bf70
 8006024:	000308f0 	.word	0x000308f0
 8006028:	000309d0 	.word	0x000309d0
 800602c:	20006868 	.word	0x20006868
 8006030:	20006768 	.word	0x20006768
 8006034:	20006998 	.word	0x20006998
 8006038:	00035350 	.word	0x00035350
 800603c:	20006898 	.word	0x20006898
 8006040:	00035890 	.word	0x00035890
 8006044:	20006a98 	.word	0x20006a98
 8006048:	00036460 	.word	0x00036460
 800604c:	200069c8 	.word	0x200069c8
 8006050:	000369a0 	.word	0x000369a0
 8006054:	20006c10 	.word	0x20006c10
 8006058:	0003fca0 	.word	0x0003fca0
 800605c:	20006ac8 	.word	0x20006ac8
 8006060:	0003fe60 	.word	0x0003fe60
 8006064:	00062e60 	.word	0x00062e60
 8006068:	00064260 	.word	0x00064260
 800606c:	200071e8 	.word	0x200071e8
 8006070:	20007170 	.word	0x20007170
 8006074:	00065b60 	.word	0x00065b60

08006078 <network_configure_activations>:
{
 8006078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800607c:	b0b9      	sub	sp, #228	; 0xe4
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 800607e:	2500      	movs	r5, #0
{
 8006080:	460a      	mov	r2, r1
 8006082:	4604      	mov	r4, r0
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8006084:	2101      	movs	r1, #1
 8006086:	a837      	add	r0, sp, #220	; 0xdc
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8006088:	9537      	str	r5, [sp, #220]	; 0xdc
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 800608a:	f015 fdeb 	bl	801bc64 <ai_platform_get_activations_map>
 800608e:	4680      	mov	r8, r0
 8006090:	2800      	cmp	r0, #0
 8006092:	f000 8481 	beq.w	8006998 <network_configure_activations+0x920>
    serving_default_input_20_output_array.data = AI_PTR(activations_map[0] + 3772);
 8006096:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    conversion_0_output_array.data = AI_PTR(activations_map[0] + 52924);
 8006098:	f64c 62bc 	movw	r2, #52924	; 0xcebc
    serving_default_input_20_output_array.data = AI_PTR(activations_map[0] + 3772);
 800609c:	48cd      	ldr	r0, [pc, #820]	; (80063d4 <network_configure_activations+0x35c>)
    conv2d_14_output_array.data = AI_PTR(activations_map[0] + 14068);
 800609e:	f243 6cf4 	movw	ip, #14068	; 0x36f4
    serving_default_input_20_output_array.data = AI_PTR(activations_map[0] + 3772);
 80060a2:	f603 64bc 	addw	r4, r3, #3772	; 0xebc
    conversion_0_output_array.data = AI_PTR(activations_map[0] + 52924);
 80060a6:	441a      	add	r2, r3
    conv2d_1_scratch0_array.data = AI_PTR(activations_map[0] + 102080);
 80060a8:	49cb      	ldr	r1, [pc, #812]	; (80063d8 <network_configure_activations+0x360>)
    conv2d_3_scratch0_array.data = AI_PTR(activations_map[0] + 33280);
 80060aa:	f503 4502 	add.w	r5, r3, #33280	; 0x8200
    conv2d_9_scratch1_array.data = AI_PTR(activations_map[0] + 107280);
 80060ae:	4ecb      	ldr	r6, [pc, #812]	; (80063dc <network_configure_activations+0x364>)
    conv2d_18_output_array.data = AI_PTR(activations_map[0] + 4992);
 80060b0:	f503 5b9c 	add.w	fp, r3, #4992	; 0x1380
    conv2d_1_scratch0_array.data = AI_PTR(activations_map[0] + 102080);
 80060b4:	4419      	add	r1, r3
    conv2d_9_output_array.data = AI_PTR(activations_map[0] + 156432);
 80060b6:	4fca      	ldr	r7, [pc, #808]	; (80063e0 <network_configure_activations+0x368>)
    conv2d_9_scratch1_array.data = AI_PTR(activations_map[0] + 107280);
 80060b8:	199e      	adds	r6, r3, r6
    conv2d_8_scratch1_array.data = AI_PTR(activations_map[0] + 8976);
 80060ba:	f242 3a10 	movw	sl, #8976	; 0x2310
    conv2d_9_output_array.data = AI_PTR(activations_map[0] + 156432);
 80060be:	19df      	adds	r7, r3, r7
    conv2d_8_output_array.data = AI_PTR(activations_map[0] + 58128);
 80060c0:	f24e 3910 	movw	r9, #58128	; 0xe310
    conv2d_9_scratch1_array.data = AI_PTR(activations_map[0] + 107280);
 80060c4:	961f      	str	r6, [sp, #124]	; 0x7c
    conv2d_12_scratch1_array.data = AI_PTR(activations_map[0] + 24848);
 80060c6:	f246 1610 	movw	r6, #24848	; 0x6110
    conv2d_9_output_array.data = AI_PTR(activations_map[0] + 156432);
 80060ca:	9702      	str	r7, [sp, #8]
    conv2d_8_scratch1_array.data = AI_PTR(activations_map[0] + 8976);
 80060cc:	449a      	add	sl, r3
    conv2d_12_scratch1_array.data = AI_PTR(activations_map[0] + 24848);
 80060ce:	199e      	adds	r6, r3, r6
    conv2d_12_output_array.data = AI_PTR(activations_map[0] + 74000);
 80060d0:	4fc4      	ldr	r7, [pc, #784]	; (80063e4 <network_configure_activations+0x36c>)
    conv2d_8_output_array.data = AI_PTR(activations_map[0] + 58128);
 80060d2:	4499      	add	r9, r3
    conv2d_36_scratch1_array.data = AI_PTR(activations_map[0] + 3888);
 80060d4:	f503 6e73 	add.w	lr, r3, #3888	; 0xf30
    conv2d_12_scratch1_array.data = AI_PTR(activations_map[0] + 24848);
 80060d8:	9620      	str	r6, [sp, #128]	; 0x80
    conv2d_12_output_array.data = AI_PTR(activations_map[0] + 74000);
 80060da:	19df      	adds	r7, r3, r7
    serving_default_input_20_output_array.data = AI_PTR(activations_map[0] + 3772);
 80060dc:	e9c0 4402 	strd	r4, r4, [r0, #8]
    conversion_0_output_array.data = AI_PTR(activations_map[0] + 52924);
 80060e0:	48c1      	ldr	r0, [pc, #772]	; (80063e8 <network_configure_activations+0x370>)
    conv2d_6_scratch1_array.data = AI_PTR(activations_map[0] + 31696);
 80060e2:	f647 34d0 	movw	r4, #31696	; 0x7bd0
    conv2d_12_output_array.data = AI_PTR(activations_map[0] + 74000);
 80060e6:	9704      	str	r7, [sp, #16]
    conv2d_17_output_array.data = AI_PTR(activations_map[0] + 79200);
 80060e8:	4fc0      	ldr	r7, [pc, #768]	; (80063ec <network_configure_activations+0x374>)
    conv2d_6_scratch1_array.data = AI_PTR(activations_map[0] + 31696);
 80060ea:	441c      	add	r4, r3
    conversion_0_output_array.data = AI_PTR(activations_map[0] + 52924);
 80060ec:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_1_scratch0_array.data = AI_PTR(activations_map[0] + 102080);
 80060f0:	48bf      	ldr	r0, [pc, #764]	; (80063f0 <network_configure_activations+0x378>)
    conv2d_1_scratch1_array.data = AI_PTR(activations_map[0] + 35504);
 80060f2:	f648 22b0 	movw	r2, #35504	; 0x8ab0
    conv2d_17_output_array.data = AI_PTR(activations_map[0] + 79200);
 80060f6:	19df      	adds	r7, r3, r7
    conv2d_1_scratch1_array.data = AI_PTR(activations_map[0] + 35504);
 80060f8:	441a      	add	r2, r3
    conv2d_17_output_array.data = AI_PTR(activations_map[0] + 79200);
 80060fa:	9707      	str	r7, [sp, #28]
    conv2d_1_scratch0_array.data = AI_PTR(activations_map[0] + 102080);
 80060fc:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_1_output_array.data = AI_PTR(activations_map[0] + 35504);
 8006100:	49bc      	ldr	r1, [pc, #752]	; (80063f4 <network_configure_activations+0x37c>)
    conv2d_1_scratch1_array.data = AI_PTR(activations_map[0] + 35504);
 8006102:	48bd      	ldr	r0, [pc, #756]	; (80063f8 <network_configure_activations+0x380>)
    conv2d_1_output_array.data = AI_PTR(activations_map[0] + 35504);
 8006104:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_2_scratch0_array.data = AI_PTR(activations_map[0] + 102680);
 8006108:	49bc      	ldr	r1, [pc, #752]	; (80063fc <network_configure_activations+0x384>)
    conv2d_1_scratch1_array.data = AI_PTR(activations_map[0] + 35504);
 800610a:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_2_scratch0_array.data = AI_PTR(activations_map[0] + 102680);
 800610e:	4419      	add	r1, r3
 8006110:	48bb      	ldr	r0, [pc, #748]	; (8006400 <network_configure_activations+0x388>)
    conv2d_2_scratch1_array.data = AI_PTR(activations_map[0] + 33424);
 8006112:	f248 2290 	movw	r2, #33424	; 0x8290
    conv2d_2_scratch0_array.data = AI_PTR(activations_map[0] + 102680);
 8006116:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_2_scratch1_array.data = AI_PTR(activations_map[0] + 33424);
 800611a:	441a      	add	r2, r3
    conv2d_2_output_array.data = AI_PTR(activations_map[0] + 33424);
 800611c:	49b9      	ldr	r1, [pc, #740]	; (8006404 <network_configure_activations+0x38c>)
    conv2d_2_scratch1_array.data = AI_PTR(activations_map[0] + 33424);
 800611e:	48ba      	ldr	r0, [pc, #744]	; (8006408 <network_configure_activations+0x390>)
    conv2d_2_output_array.data = AI_PTR(activations_map[0] + 33424);
 8006120:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_3_output_array.data = AI_PTR(activations_map[0] + 512);
 8006124:	f503 7100 	add.w	r1, r3, #512	; 0x200
 8006128:	9101      	str	r1, [sp, #4]
    eltwise_11_output_array.data = AI_PTR(activations_map[0] + 16656);
 800612a:	f244 1110 	movw	r1, #16656	; 0x4110
    conv2d_2_scratch1_array.data = AI_PTR(activations_map[0] + 33424);
 800612e:	e9c0 2202 	strd	r2, r2, [r0, #8]
    eltwise_11_output_array.data = AI_PTR(activations_map[0] + 16656);
 8006132:	1859      	adds	r1, r3, r1
    conv2d_14_output_array.data = AI_PTR(activations_map[0] + 14068);
 8006134:	4660      	mov	r0, ip
    conv2d_16_output_array.data = AI_PTR(activations_map[0] + 30048);
 8006136:	f247 5c60 	movw	ip, #30048	; 0x7560
    conv2d_3_scratch0_array.data = AI_PTR(activations_map[0] + 33280);
 800613a:	4ab4      	ldr	r2, [pc, #720]	; (800640c <network_configure_activations+0x394>)
    eltwise_11_output_array.data = AI_PTR(activations_map[0] + 16656);
 800613c:	9103      	str	r1, [sp, #12]
    conv2d_14_output_array.data = AI_PTR(activations_map[0] + 14068);
 800613e:	1818      	adds	r0, r3, r0
    conv2d_16_output_array.data = AI_PTR(activations_map[0] + 30048);
 8006140:	4661      	mov	r1, ip
    conv2d_17_scratch1_array.data = AI_PTR(activations_map[0] + 54624);
 8006142:	f24d 5c60 	movw	ip, #54624	; 0xd560
    conv2d_14_output_array.data = AI_PTR(activations_map[0] + 14068);
 8006146:	9005      	str	r0, [sp, #20]
    conv2d_17_scratch1_array.data = AI_PTR(activations_map[0] + 54624);
 8006148:	4666      	mov	r6, ip
    conv2d_20_output_array.data = AI_PTR(activations_map[0] + 37760);
 800614a:	f249 3c80 	movw	ip, #37760	; 0x9380
    conv2d_16_output_array.data = AI_PTR(activations_map[0] + 30048);
 800614e:	1859      	adds	r1, r3, r1
    conv2d_20_output_array.data = AI_PTR(activations_map[0] + 37760);
 8006150:	4660      	mov	r0, ip
    conv2d_21_output_array.data = AI_PTR(activations_map[0] + 62336);
 8006152:	f24f 3c80 	movw	ip, #62336	; 0xf380
    conv2d_17_scratch1_array.data = AI_PTR(activations_map[0] + 54624);
 8006156:	199e      	adds	r6, r3, r6
    conv2d_16_output_array.data = AI_PTR(activations_map[0] + 30048);
 8006158:	9106      	str	r1, [sp, #24]
    conv2d_21_output_array.data = AI_PTR(activations_map[0] + 62336);
 800615a:	4661      	mov	r1, ip
    conv2d_24_scratch1_array.data = AI_PTR(activations_map[0] + 8736);
 800615c:	f242 2c20 	movw	ip, #8736	; 0x2220
    conv2d_17_scratch1_array.data = AI_PTR(activations_map[0] + 54624);
 8006160:	9621      	str	r6, [sp, #132]	; 0x84
    conv2d_20_output_array.data = AI_PTR(activations_map[0] + 37760);
 8006162:	1818      	adds	r0, r3, r0
    conv2d_24_scratch1_array.data = AI_PTR(activations_map[0] + 8736);
 8006164:	4666      	mov	r6, ip
    conv2d_24_output_array.data = AI_PTR(activations_map[0] + 33312);
 8006166:	f248 2c20 	movw	ip, #33312	; 0x8220
    conv2d_21_output_array.data = AI_PTR(activations_map[0] + 62336);
 800616a:	1859      	adds	r1, r3, r1
    conv2d_20_output_array.data = AI_PTR(activations_map[0] + 37760);
 800616c:	9008      	str	r0, [sp, #32]
    conv2d_24_output_array.data = AI_PTR(activations_map[0] + 33312);
 800616e:	4667      	mov	r7, ip
    conv2d_26_output_array.data = AI_PTR(activations_map[0] + 9700);
 8006170:	f242 5ce4 	movw	ip, #9700	; 0x25e4
    conv2d_24_scratch1_array.data = AI_PTR(activations_map[0] + 8736);
 8006174:	199e      	adds	r6, r3, r6
    conv2d_21_output_array.data = AI_PTR(activations_map[0] + 62336);
 8006176:	9109      	str	r1, [sp, #36]	; 0x24
    conv2d_26_output_array.data = AI_PTR(activations_map[0] + 9700);
 8006178:	4660      	mov	r0, ip
    conv2d_28_output_array.data = AI_PTR(activations_map[0] + 12912);
 800617a:	f243 2c70 	movw	ip, #12912	; 0x3270
    conv2d_24_output_array.data = AI_PTR(activations_map[0] + 33312);
 800617e:	19df      	adds	r7, r3, r7
    conv2d_24_scratch1_array.data = AI_PTR(activations_map[0] + 8736);
 8006180:	9624      	str	r6, [sp, #144]	; 0x90
    conv2d_28_output_array.data = AI_PTR(activations_map[0] + 12912);
 8006182:	4661      	mov	r1, ip
    conv2d_29_scratch1_array.data = AI_PTR(activations_map[0] + 22128);
 8006184:	f245 6c70 	movw	ip, #22128	; 0x5670
    conv2d_26_output_array.data = AI_PTR(activations_map[0] + 9700);
 8006188:	1818      	adds	r0, r3, r0
    conv2d_29_scratch1_array.data = AI_PTR(activations_map[0] + 22128);
 800618a:	4666      	mov	r6, ip
    conv2d_29_output_array.data = AI_PTR(activations_map[0] + 31344);
 800618c:	f647 2c70 	movw	ip, #31344	; 0x7a70
    conv2d_28_output_array.data = AI_PTR(activations_map[0] + 12912);
 8006190:	1859      	adds	r1, r3, r1
    conv2d_29_scratch1_array.data = AI_PTR(activations_map[0] + 22128);
 8006192:	199e      	adds	r6, r3, r6
    conv2d_3_scratch0_array.data = AI_PTR(activations_map[0] + 33280);
 8006194:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_24_output_array.data = AI_PTR(activations_map[0] + 33312);
 8006198:	970a      	str	r7, [sp, #40]	; 0x28
    conv2d_29_output_array.data = AI_PTR(activations_map[0] + 31344);
 800619a:	4667      	mov	r7, ip
    conv2d_32_output_array.data = AI_PTR(activations_map[0] + 15264);
 800619c:	f643 3ca0 	movw	ip, #15264	; 0x3ba0
    conv2d_26_output_array.data = AI_PTR(activations_map[0] + 9700);
 80061a0:	900b      	str	r0, [sp, #44]	; 0x2c
    conv2d_28_output_array.data = AI_PTR(activations_map[0] + 12912);
 80061a2:	910c      	str	r1, [sp, #48]	; 0x30
    conv2d_29_output_array.data = AI_PTR(activations_map[0] + 31344);
 80061a4:	19df      	adds	r7, r3, r7
    conv2d_32_output_array.data = AI_PTR(activations_map[0] + 15264);
 80061a6:	4660      	mov	r0, ip
    conv2d_33_scratch1_array.data = AI_PTR(activations_map[0] + 24480);
 80061a8:	f645 7ca0 	movw	ip, #24480	; 0x5fa0
    conv2d_29_scratch1_array.data = AI_PTR(activations_map[0] + 22128);
 80061ac:	9625      	str	r6, [sp, #148]	; 0x94
    conv2d_8_scratch0_array.data = AI_PTR(activations_map[0] + 8464);
 80061ae:	f242 1210 	movw	r2, #8464	; 0x2110
    conv2d_33_scratch1_array.data = AI_PTR(activations_map[0] + 24480);
 80061b2:	4661      	mov	r1, ip
    conv2d_33_output_array.data = AI_PTR(activations_map[0] + 33696);
 80061b4:	f248 3ca0 	movw	ip, #33696	; 0x83a0
    conv2d_32_output_array.data = AI_PTR(activations_map[0] + 15264);
 80061b8:	1818      	adds	r0, r3, r0
    conv2d_29_output_array.data = AI_PTR(activations_map[0] + 31344);
 80061ba:	970d      	str	r7, [sp, #52]	; 0x34
    conv2d_33_output_array.data = AI_PTR(activations_map[0] + 33696);
 80061bc:	4666      	mov	r6, ip
    conv2d_36_output_array.data = AI_PTR(activations_map[0] + 13104);
 80061be:	f243 3c30 	movw	ip, #13104	; 0x3330
    conv2d_33_scratch1_array.data = AI_PTR(activations_map[0] + 24480);
 80061c2:	1859      	adds	r1, r3, r1
    conv2d_32_output_array.data = AI_PTR(activations_map[0] + 15264);
 80061c4:	900e      	str	r0, [sp, #56]	; 0x38
    conv2d_36_output_array.data = AI_PTR(activations_map[0] + 13104);
 80061c6:	4667      	mov	r7, ip
    conv2d_37_scratch1_array.data = AI_PTR(activations_map[0] + 22320);
 80061c8:	f245 7c30 	movw	ip, #22320	; 0x5730
    conv2d_33_output_array.data = AI_PTR(activations_map[0] + 33696);
 80061cc:	199e      	adds	r6, r3, r6
    conv2d_33_scratch1_array.data = AI_PTR(activations_map[0] + 24480);
 80061ce:	9127      	str	r1, [sp, #156]	; 0x9c
    conv2d_37_scratch1_array.data = AI_PTR(activations_map[0] + 22320);
 80061d0:	4660      	mov	r0, ip
    conv2d_37_output_array.data = AI_PTR(activations_map[0] + 31536);
 80061d2:	f647 3c30 	movw	ip, #31536	; 0x7b30
    conv2d_36_output_array.data = AI_PTR(activations_map[0] + 13104);
 80061d6:	19df      	adds	r7, r3, r7
    conv2d_33_output_array.data = AI_PTR(activations_map[0] + 33696);
 80061d8:	960f      	str	r6, [sp, #60]	; 0x3c
    conv2d_37_output_array.data = AI_PTR(activations_map[0] + 31536);
 80061da:	4661      	mov	r1, ip
    conv2d_40_scratch1_array.data = AI_PTR(activations_map[0] + 5424);
 80061dc:	f241 5c30 	movw	ip, #5424	; 0x1530
    conv2d_37_scratch1_array.data = AI_PTR(activations_map[0] + 22320);
 80061e0:	1818      	adds	r0, r3, r0
    conv2d_36_output_array.data = AI_PTR(activations_map[0] + 13104);
 80061e2:	9710      	str	r7, [sp, #64]	; 0x40
    conv2d_40_scratch1_array.data = AI_PTR(activations_map[0] + 5424);
 80061e4:	4666      	mov	r6, ip
    conv2d_40_output_array.data = AI_PTR(activations_map[0] + 14640);
 80061e6:	f643 1c30 	movw	ip, #14640	; 0x3930
    conv2d_37_output_array.data = AI_PTR(activations_map[0] + 31536);
 80061ea:	1859      	adds	r1, r3, r1
    conv2d_37_scratch1_array.data = AI_PTR(activations_map[0] + 22320);
 80061ec:	9028      	str	r0, [sp, #160]	; 0xa0
    conv2d_40_output_array.data = AI_PTR(activations_map[0] + 14640);
 80061ee:	4667      	mov	r7, ip
    conv2d_41_scratch1_array.data = AI_PTR(activations_map[0] + 5332);
 80061f0:	f241 4cd4 	movw	ip, #5332	; 0x14d4
    conv2d_40_scratch1_array.data = AI_PTR(activations_map[0] + 5424);
 80061f4:	199e      	adds	r6, r3, r6
    conv2d_37_output_array.data = AI_PTR(activations_map[0] + 31536);
 80061f6:	9111      	str	r1, [sp, #68]	; 0x44
    conv2d_41_scratch1_array.data = AI_PTR(activations_map[0] + 5332);
 80061f8:	4660      	mov	r0, ip
    conv2d_41_output_array.data = AI_PTR(activations_map[0] + 23856);
 80061fa:	f645 5c30 	movw	ip, #23856	; 0x5d30
    conv2d_40_output_array.data = AI_PTR(activations_map[0] + 14640);
 80061fe:	19df      	adds	r7, r3, r7
    conv2d_40_scratch1_array.data = AI_PTR(activations_map[0] + 5424);
 8006200:	9629      	str	r6, [sp, #164]	; 0xa4
    conv2d_41_output_array.data = AI_PTR(activations_map[0] + 23856);
 8006202:	4661      	mov	r1, ip
    conv2d_44_output_array.data = AI_PTR(activations_map[0] + 41856);
 8006204:	f24a 3c80 	movw	ip, #41856	; 0xa380
    conv2d_41_scratch1_array.data = AI_PTR(activations_map[0] + 5332);
 8006208:	1818      	adds	r0, r3, r0
    conv2d_40_output_array.data = AI_PTR(activations_map[0] + 14640);
 800620a:	9713      	str	r7, [sp, #76]	; 0x4c
    conv2d_44_output_array.data = AI_PTR(activations_map[0] + 41856);
 800620c:	4666      	mov	r6, ip
    conv2d_47_output_array.data = AI_PTR(activations_map[0] + 20416);
 800620e:	f644 7cc0 	movw	ip, #20416	; 0x4fc0
    conv2d_41_scratch1_array.data = AI_PTR(activations_map[0] + 5332);
 8006212:	902a      	str	r0, [sp, #168]	; 0xa8
    conv2d_41_output_array.data = AI_PTR(activations_map[0] + 23856);
 8006214:	1859      	adds	r1, r3, r1
    conv2d_47_output_array.data = AI_PTR(activations_map[0] + 20416);
 8006216:	4667      	mov	r7, ip
    conv2d_48_scratch1_array.data = AI_PTR(activations_map[0] + 32704);
 8006218:	f647 7cc0 	movw	ip, #32704	; 0x7fc0
    conv2d_44_output_array.data = AI_PTR(activations_map[0] + 41856);
 800621c:	199e      	adds	r6, r3, r6
    conv2d_41_output_array.data = AI_PTR(activations_map[0] + 23856);
 800621e:	9114      	str	r1, [sp, #80]	; 0x50
    conv2d_48_scratch1_array.data = AI_PTR(activations_map[0] + 32704);
 8006220:	4660      	mov	r0, ip
    conv2d_48_output_array.data = AI_PTR(activations_map[0] + 44992);
 8006222:	f64a 7cc0 	movw	ip, #44992	; 0xafc0
    conv2d_47_output_array.data = AI_PTR(activations_map[0] + 20416);
 8006226:	19df      	adds	r7, r3, r7
    conv2d_44_output_array.data = AI_PTR(activations_map[0] + 41856);
 8006228:	9615      	str	r6, [sp, #84]	; 0x54
    conv2d_48_output_array.data = AI_PTR(activations_map[0] + 44992);
 800622a:	4666      	mov	r6, ip
    conv2d_51_output_array.data = AI_PTR(activations_map[0] + 17472);
 800622c:	f244 4c40 	movw	ip, #17472	; 0x4440
    conv2d_48_scratch1_array.data = AI_PTR(activations_map[0] + 32704);
 8006230:	1818      	adds	r0, r3, r0
    conv2d_47_output_array.data = AI_PTR(activations_map[0] + 20416);
 8006232:	9716      	str	r7, [sp, #88]	; 0x58
    conv2d_51_output_array.data = AI_PTR(activations_map[0] + 17472);
 8006234:	4667      	mov	r7, ip
    conv2d_53_scratch1_array.data = AI_PTR(activations_map[0] + 7108);
 8006236:	f641 3cc4 	movw	ip, #7108	; 0x1bc4
    conv2d_48_output_array.data = AI_PTR(activations_map[0] + 44992);
 800623a:	199e      	adds	r6, r3, r6
    conv2d_48_scratch1_array.data = AI_PTR(activations_map[0] + 32704);
 800623c:	902d      	str	r0, [sp, #180]	; 0xb4
    conv2d_53_scratch1_array.data = AI_PTR(activations_map[0] + 7108);
 800623e:	4660      	mov	r0, ip
    conv2d_53_output_array.data = AI_PTR(activations_map[0] + 10180);
 8006240:	f242 7cc4 	movw	ip, #10180	; 0x27c4
    conv2d_51_output_array.data = AI_PTR(activations_map[0] + 17472);
 8006244:	19df      	adds	r7, r3, r7
    conv2d_48_output_array.data = AI_PTR(activations_map[0] + 44992);
 8006246:	9617      	str	r6, [sp, #92]	; 0x5c
    conv2d_53_output_array.data = AI_PTR(activations_map[0] + 10180);
 8006248:	4666      	mov	r6, ip
    conv2d_55_scratch1_array.data = AI_PTR(activations_map[0] + 5808);
 800624a:	f241 6cb0 	movw	ip, #5808	; 0x16b0
    conv2d_53_scratch1_array.data = AI_PTR(activations_map[0] + 7108);
 800624e:	1818      	adds	r0, r3, r0
    conv2d_51_output_array.data = AI_PTR(activations_map[0] + 17472);
 8006250:	9718      	str	r7, [sp, #96]	; 0x60
    conv2d_55_scratch1_array.data = AI_PTR(activations_map[0] + 5808);
 8006252:	4667      	mov	r7, ip
    conv2d_55_output_array.data = AI_PTR(activations_map[0] + 11184);
 8006254:	f642 3cb0 	movw	ip, #11184	; 0x2bb0
    conv2d_53_output_array.data = AI_PTR(activations_map[0] + 10180);
 8006258:	199e      	adds	r6, r3, r6
    conv2d_53_scratch1_array.data = AI_PTR(activations_map[0] + 7108);
 800625a:	902e      	str	r0, [sp, #184]	; 0xb8
    conv2d_55_output_array.data = AI_PTR(activations_map[0] + 11184);
 800625c:	4660      	mov	r0, ip
    conv2d_56_scratch0_array.data = AI_PTR(activations_map[0] + 16560);
 800625e:	f244 0cb0 	movw	ip, #16560	; 0x40b0
    conv2d_55_scratch1_array.data = AI_PTR(activations_map[0] + 5808);
 8006262:	19df      	adds	r7, r3, r7
    conv2d_53_output_array.data = AI_PTR(activations_map[0] + 10180);
 8006264:	9619      	str	r6, [sp, #100]	; 0x64
    conv2d_56_scratch0_array.data = AI_PTR(activations_map[0] + 16560);
 8006266:	4666      	mov	r6, ip
    conv2d_56_output_array.data = AI_PTR(activations_map[0] + 28996);
 8006268:	f247 1c44 	movw	ip, #28996	; 0x7144
    conv2d_55_output_array.data = AI_PTR(activations_map[0] + 11184);
 800626c:	1818      	adds	r0, r3, r0
    conv2d_55_scratch1_array.data = AI_PTR(activations_map[0] + 5808);
 800626e:	972f      	str	r7, [sp, #188]	; 0xbc
    conv2d_56_output_array.data = AI_PTR(activations_map[0] + 28996);
 8006270:	4667      	mov	r7, ip
    conv2d_59_scratch1_array.data = AI_PTR(activations_map[0] + 6704);
 8006272:	f641 2c30 	movw	ip, #6704	; 0x1a30
    conv2d_56_scratch0_array.data = AI_PTR(activations_map[0] + 16560);
 8006276:	199e      	adds	r6, r3, r6
    conv2d_55_output_array.data = AI_PTR(activations_map[0] + 11184);
 8006278:	901a      	str	r0, [sp, #104]	; 0x68
    conv2d_59_scratch1_array.data = AI_PTR(activations_map[0] + 6704);
 800627a:	4660      	mov	r0, ip
    conv2d_59_output_array.data = AI_PTR(activations_map[0] + 12080);
 800627c:	f642 7c30 	movw	ip, #12080	; 0x2f30
    conv2d_56_output_array.data = AI_PTR(activations_map[0] + 28996);
 8006280:	19df      	adds	r7, r3, r7
    conv2d_56_scratch0_array.data = AI_PTR(activations_map[0] + 16560);
 8006282:	9630      	str	r6, [sp, #192]	; 0xc0
    conv2d_59_output_array.data = AI_PTR(activations_map[0] + 12080);
 8006284:	4666      	mov	r6, ip
    conv2d_60_scratch0_array.data = AI_PTR(activations_map[0] + 17456);
 8006286:	f244 4c30 	movw	ip, #17456	; 0x4430
    conv2d_59_scratch1_array.data = AI_PTR(activations_map[0] + 6704);
 800628a:	1818      	adds	r0, r3, r0
    conv2d_56_output_array.data = AI_PTR(activations_map[0] + 28996);
 800628c:	971b      	str	r7, [sp, #108]	; 0x6c
    conv2d_60_scratch0_array.data = AI_PTR(activations_map[0] + 17456);
 800628e:	4667      	mov	r7, ip
    conv2d_60_output_array.data = AI_PTR(activations_map[0] + 29892);
 8006290:	f247 4cc4 	movw	ip, #29892	; 0x74c4
    conv2d_59_output_array.data = AI_PTR(activations_map[0] + 12080);
 8006294:	199e      	adds	r6, r3, r6
    conv2d_59_scratch1_array.data = AI_PTR(activations_map[0] + 6704);
 8006296:	9031      	str	r0, [sp, #196]	; 0xc4
    conv2d_60_output_array.data = AI_PTR(activations_map[0] + 29892);
 8006298:	4660      	mov	r0, ip
    conv2d_64_output_array.data = AI_PTR(activations_map[0] + 27668);
 800629a:	f646 4c14 	movw	ip, #27668	; 0x6c14
    conv2d_59_output_array.data = AI_PTR(activations_map[0] + 12080);
 800629e:	961c      	str	r6, [sp, #112]	; 0x70
    conv2d_60_scratch0_array.data = AI_PTR(activations_map[0] + 17456);
 80062a0:	19df      	adds	r7, r3, r7
    conv2d_60_output_array.data = AI_PTR(activations_map[0] + 29892);
 80062a2:	1818      	adds	r0, r3, r0
    conv2d_64_output_array.data = AI_PTR(activations_map[0] + 27668);
 80062a4:	4666      	mov	r6, ip
    conv2d_66_scratch1_array.data = AI_PTR(activations_map[0] + 17504);
 80062a6:	f244 4c60 	movw	ip, #17504	; 0x4460
    conv2d_60_scratch0_array.data = AI_PTR(activations_map[0] + 17456);
 80062aa:	9732      	str	r7, [sp, #200]	; 0xc8
    conv2d_60_output_array.data = AI_PTR(activations_map[0] + 29892);
 80062ac:	901d      	str	r0, [sp, #116]	; 0x74
    conv2d_64_output_array.data = AI_PTR(activations_map[0] + 27668);
 80062ae:	199e      	adds	r6, r3, r6
    conv2d_66_scratch1_array.data = AI_PTR(activations_map[0] + 17504);
 80062b0:	4660      	mov	r0, ip
    conv2d_66_scratch2_array.data = AI_PTR(activations_map[0] + 37984);
 80062b2:	f249 4c60 	movw	ip, #37984	; 0x9460
    conv2d_64_output_array.data = AI_PTR(activations_map[0] + 27668);
 80062b6:	961e      	str	r6, [sp, #120]	; 0x78
    conv2d_8_scratch0_array.data = AI_PTR(activations_map[0] + 8464);
 80062b8:	441a      	add	r2, r3
    conv2d_66_scratch1_array.data = AI_PTR(activations_map[0] + 17504);
 80062ba:	1818      	adds	r0, r3, r0
    conv2d_66_scratch2_array.data = AI_PTR(activations_map[0] + 37984);
 80062bc:	4667      	mov	r7, ip
    conv2d_28_scratch0_array.data = AI_PTR(activations_map[0] + 2160);
 80062be:	f503 6107 	add.w	r1, r3, #2160	; 0x870
    conv2d_43_scratch0_array.data = AI_PTR(activations_map[0] + 2944);
 80062c2:	f503 6c38 	add.w	ip, r3, #2944	; 0xb80
    conv2d_66_scratch2_array.data = AI_PTR(activations_map[0] + 37984);
 80062c6:	19df      	adds	r7, r3, r7
    conv2d_66_scratch1_array.data = AI_PTR(activations_map[0] + 17504);
 80062c8:	9034      	str	r0, [sp, #208]	; 0xd0
    conv2d_16_scratch0_array.data = AI_PTR(activations_map[0] + 4448);
 80062ca:	f503 508b 	add.w	r0, r3, #4448	; 0x1160
    conv2d_59_scratch0_array.data = AI_PTR(activations_map[0] + 3120);
 80062ce:	f503 6643 	add.w	r6, r3, #3120	; 0xc30
    conv2d_66_scratch2_array.data = AI_PTR(activations_map[0] + 37984);
 80062d2:	9735      	str	r7, [sp, #212]	; 0xd4
    conv2d_55_scratch0_array.data = AI_PTR(activations_map[0] + 2224);
 80062d4:	f503 670b 	add.w	r7, r3, #2224	; 0x8b0
    conv2d_16_scratch0_array.data = AI_PTR(activations_map[0] + 4448);
 80062d8:	9022      	str	r0, [sp, #136]	; 0x88
    conv2d_18_output_array.data = AI_PTR(activations_map[0] + 4992);
 80062da:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
    conv2d_20_scratch1_array.data = AI_PTR(activations_map[0] + 13184);
 80062de:	f503 5b4e 	add.w	fp, r3, #13184	; 0x3380
    conv2d_3_output_array.data = AI_PTR(activations_map[0] + 512);
 80062e2:	9801      	ldr	r0, [sp, #4]
    conv2d_20_scratch1_array.data = AI_PTR(activations_map[0] + 13184);
 80062e4:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
    conv2d_32_scratch1_array.data = AI_PTR(activations_map[0] + 6048);
 80062e8:	f503 5bbd 	add.w	fp, r3, #6048	; 0x17a0
 80062ec:	f8cd b098 	str.w	fp, [sp, #152]	; 0x98
    conv2d_34_output_array.data = AI_PTR(activations_map[0] + 816);
 80062f0:	f503 7b4c 	add.w	fp, r3, #816	; 0x330
 80062f4:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
    conv2d_42_output_array.data = AI_PTR(activations_map[0] + 896);
 80062f8:	f503 7b60 	add.w	fp, r3, #896	; 0x380
 80062fc:	f8cd b0cc 	str.w	fp, [sp, #204]	; 0xcc
    conv2d_47_scratch1_array.data = AI_PTR(activations_map[0] + 8128);
 8006300:	f503 5bfe 	add.w	fp, r3, #8128	; 0x1fc0
 8006304:	f8cd b0b0 	str.w	fp, [sp, #176]	; 0xb0
    conv2d_3_output_array.data = AI_PTR(activations_map[0] + 512);
 8006308:	f8df b160 	ldr.w	fp, [pc, #352]	; 800646c <network_configure_activations+0x3f4>
 800630c:	e9cb 0002 	strd	r0, r0, [fp, #8]
    conv2d_4_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006310:	f8df b15c 	ldr.w	fp, [pc, #348]	; 8006470 <network_configure_activations+0x3f8>
 8006314:	e9cb 3302 	strd	r3, r3, [fp, #8]
    conv2d_4_scratch1_array.data = AI_PTR(activations_map[0] + 33280);
 8006318:	f8df b158 	ldr.w	fp, [pc, #344]	; 8006474 <network_configure_activations+0x3fc>
 800631c:	e9cb 5502 	strd	r5, r5, [fp, #8]
    conv2d_4_output_array.data = AI_PTR(activations_map[0] + 33280);
 8006320:	f8df b154 	ldr.w	fp, [pc, #340]	; 8006478 <network_configure_activations+0x400>
 8006324:	e9cb 5502 	strd	r5, r5, [fp, #8]
    conv2d_6_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006328:	4d39      	ldr	r5, [pc, #228]	; (8006410 <network_configure_activations+0x398>)
 800632a:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv2d_6_scratch1_array.data = AI_PTR(activations_map[0] + 31696);
 800632e:	4d39      	ldr	r5, [pc, #228]	; (8006414 <network_configure_activations+0x39c>)
 8006330:	e9c5 4402 	strd	r4, r4, [r5, #8]
    conv2d_6_output_array.data = AI_PTR(activations_map[0] + 31696);
 8006334:	4d38      	ldr	r5, [pc, #224]	; (8006418 <network_configure_activations+0x3a0>)
 8006336:	e9c5 4402 	strd	r4, r4, [r5, #8]
    conv2d_7_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800633a:	4c38      	ldr	r4, [pc, #224]	; (800641c <network_configure_activations+0x3a4>)
    conv2d_7_output_array.data = AI_PTR(activations_map[0] + 272);
 800633c:	f503 7588 	add.w	r5, r3, #272	; 0x110
    conv2d_7_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006340:	e9c4 3302 	strd	r3, r3, [r4, #8]
    conv2d_7_output_array.data = AI_PTR(activations_map[0] + 272);
 8006344:	4c36      	ldr	r4, [pc, #216]	; (8006420 <network_configure_activations+0x3a8>)
 8006346:	e9c4 5502 	strd	r5, r5, [r4, #8]
    conv2d_8_scratch0_array.data = AI_PTR(activations_map[0] + 8464);
 800634a:	4c36      	ldr	r4, [pc, #216]	; (8006424 <network_configure_activations+0x3ac>)
 800634c:	e9c4 2202 	strd	r2, r2, [r4, #8]
    conv2d_8_scratch1_array.data = AI_PTR(activations_map[0] + 8976);
 8006350:	4c35      	ldr	r4, [pc, #212]	; (8006428 <network_configure_activations+0x3b0>)
 8006352:	e9c4 aa02 	strd	sl, sl, [r4, #8]
    conv2d_8_output_array.data = AI_PTR(activations_map[0] + 58128);
 8006356:	4c35      	ldr	r4, [pc, #212]	; (800642c <network_configure_activations+0x3b4>)
 8006358:	e9c4 9902 	strd	r9, r9, [r4, #8]
    conv2d_9_scratch0_array.data = AI_PTR(activations_map[0] + 8464);
 800635c:	4c34      	ldr	r4, [pc, #208]	; (8006430 <network_configure_activations+0x3b8>)
 800635e:	e9c4 2202 	strd	r2, r2, [r4, #8]
    conv2d_9_scratch1_array.data = AI_PTR(activations_map[0] + 107280);
 8006362:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8006364:	4c33      	ldr	r4, [pc, #204]	; (8006434 <network_configure_activations+0x3bc>)
 8006366:	e9c4 5502 	strd	r5, r5, [r4, #8]
    conv2d_9_output_array.data = AI_PTR(activations_map[0] + 156432);
 800636a:	9d02      	ldr	r5, [sp, #8]
 800636c:	4c32      	ldr	r4, [pc, #200]	; (8006438 <network_configure_activations+0x3c0>)
 800636e:	e9c4 5502 	strd	r5, r5, [r4, #8]
    conv2d_10_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006372:	4c32      	ldr	r4, [pc, #200]	; (800643c <network_configure_activations+0x3c4>)
    eltwise_11_output_array.data = AI_PTR(activations_map[0] + 16656);
 8006374:	9d03      	ldr	r5, [sp, #12]
    conv2d_10_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006376:	e9c4 3302 	strd	r3, r3, [r4, #8]
    conv2d_10_output_array.data = AI_PTR(activations_map[0] + 8464);
 800637a:	4c31      	ldr	r4, [pc, #196]	; (8006440 <network_configure_activations+0x3c8>)
 800637c:	e9c4 2202 	strd	r2, r2, [r4, #8]
    eltwise_11_output_array.data = AI_PTR(activations_map[0] + 16656);
 8006380:	4a30      	ldr	r2, [pc, #192]	; (8006444 <network_configure_activations+0x3cc>)
    conv2d_14_scratch1_array.data = AI_PTR(activations_map[0] + 1780);
 8006382:	f203 64f4 	addw	r4, r3, #1780	; 0x6f4
    eltwise_11_output_array.data = AI_PTR(activations_map[0] + 16656);
 8006386:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_12_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800638a:	4a2f      	ldr	r2, [pc, #188]	; (8006448 <network_configure_activations+0x3d0>)
    conv2d_12_scratch1_array.data = AI_PTR(activations_map[0] + 24848);
 800638c:	9d20      	ldr	r5, [sp, #128]	; 0x80
    conv2d_12_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800638e:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_12_scratch1_array.data = AI_PTR(activations_map[0] + 24848);
 8006392:	4a2e      	ldr	r2, [pc, #184]	; (800644c <network_configure_activations+0x3d4>)
 8006394:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_12_output_array.data = AI_PTR(activations_map[0] + 74000);
 8006398:	9d04      	ldr	r5, [sp, #16]
 800639a:	4a2d      	ldr	r2, [pc, #180]	; (8006450 <network_configure_activations+0x3d8>)
 800639c:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_14_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80063a0:	4a2c      	ldr	r2, [pc, #176]	; (8006454 <network_configure_activations+0x3dc>)
    conv2d_14_output_array.data = AI_PTR(activations_map[0] + 14068);
 80063a2:	9d05      	ldr	r5, [sp, #20]
    conv2d_14_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80063a4:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_14_scratch1_array.data = AI_PTR(activations_map[0] + 1780);
 80063a8:	4a2b      	ldr	r2, [pc, #172]	; (8006458 <network_configure_activations+0x3e0>)
 80063aa:	e9c2 4402 	strd	r4, r4, [r2, #8]
    conv2d_14_output_array.data = AI_PTR(activations_map[0] + 14068);
 80063ae:	4a2b      	ldr	r2, [pc, #172]	; (800645c <network_configure_activations+0x3e4>)
    conv2d_15_output_array.data = AI_PTR(activations_map[0] + 352);
 80063b0:	f503 74b0 	add.w	r4, r3, #352	; 0x160
    conv2d_14_output_array.data = AI_PTR(activations_map[0] + 14068);
 80063b4:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_15_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80063b8:	4a29      	ldr	r2, [pc, #164]	; (8006460 <network_configure_activations+0x3e8>)
 80063ba:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_15_output_array.data = AI_PTR(activations_map[0] + 352);
 80063be:	4a29      	ldr	r2, [pc, #164]	; (8006464 <network_configure_activations+0x3ec>)
 80063c0:	e9c2 4402 	strd	r4, r4, [r2, #8]
    conv2d_16_scratch0_array.data = AI_PTR(activations_map[0] + 4448);
 80063c4:	9822      	ldr	r0, [sp, #136]	; 0x88
    conv2d_16_scratch1_array.data = AI_PTR(activations_map[0] + 5472);
 80063c6:	f503 54ab 	add.w	r4, r3, #5472	; 0x1560
    conv2d_16_scratch0_array.data = AI_PTR(activations_map[0] + 4448);
 80063ca:	4a27      	ldr	r2, [pc, #156]	; (8006468 <network_configure_activations+0x3f0>)
    conv2d_16_output_array.data = AI_PTR(activations_map[0] + 30048);
 80063cc:	9d06      	ldr	r5, [sp, #24]
    conv2d_16_scratch0_array.data = AI_PTR(activations_map[0] + 4448);
 80063ce:	e9c2 0002 	strd	r0, r0, [r2, #8]
 80063d2:	e053      	b.n	800647c <network_configure_activations+0x404>
 80063d4:	20007620 	.word	0x20007620
 80063d8:	00018ec0 	.word	0x00018ec0
 80063dc:	0001a310 	.word	0x0001a310
 80063e0:	00026310 	.word	0x00026310
 80063e4:	00012110 	.word	0x00012110
 80063e8:	200070f0 	.word	0x200070f0
 80063ec:	00013560 	.word	0x00013560
 80063f0:	20003e58 	.word	0x20003e58
 80063f4:	20003e28 	.word	0x20003e28
 80063f8:	20003e88 	.word	0x20003e88
 80063fc:	00019118 	.word	0x00019118
 8006400:	200048a8 	.word	0x200048a8
 8006404:	20004878 	.word	0x20004878
 8006408:	200048d8 	.word	0x200048d8
 800640c:	20005198 	.word	0x20005198
 8006410:	20006ce0 	.word	0x20006ce0
 8006414:	20006d10 	.word	0x20006d10
 8006418:	20006cb0 	.word	0x20006cb0
 800641c:	20006e10 	.word	0x20006e10
 8006420:	20006de0 	.word	0x20006de0
 8006424:	20006f10 	.word	0x20006f10
 8006428:	20006f40 	.word	0x20006f40
 800642c:	20006ee0 	.word	0x20006ee0
 8006430:	20007040 	.word	0x20007040
 8006434:	20007070 	.word	0x20007070
 8006438:	20007010 	.word	0x20007010
 800643c:	20003698 	.word	0x20003698
 8006440:	20003668 	.word	0x20003668
 8006444:	20007238 	.word	0x20007238
 8006448:	20003798 	.word	0x20003798
 800644c:	200037c8 	.word	0x200037c8
 8006450:	20003768 	.word	0x20003768
 8006454:	200038c8 	.word	0x200038c8
 8006458:	200038f8 	.word	0x200038f8
 800645c:	20003898 	.word	0x20003898
 8006460:	200039f8 	.word	0x200039f8
 8006464:	200039c8 	.word	0x200039c8
 8006468:	20003af8 	.word	0x20003af8
 800646c:	20005168 	.word	0x20005168
 8006470:	20005cb8 	.word	0x20005cb8
 8006474:	20005ce8 	.word	0x20005ce8
 8006478:	20005c88 	.word	0x20005c88
    conv2d_16_scratch1_array.data = AI_PTR(activations_map[0] + 5472);
 800647c:	4ab8      	ldr	r2, [pc, #736]	; (8006760 <network_configure_activations+0x6e8>)
 800647e:	e9c2 4402 	strd	r4, r4, [r2, #8]
    conv2d_16_output_array.data = AI_PTR(activations_map[0] + 30048);
 8006482:	4ab8      	ldr	r2, [pc, #736]	; (8006764 <network_configure_activations+0x6ec>)
    conv2d_18_output_array.data = AI_PTR(activations_map[0] + 4992);
 8006484:	9c2b      	ldr	r4, [sp, #172]	; 0xac
    conv2d_16_output_array.data = AI_PTR(activations_map[0] + 30048);
 8006486:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_17_scratch0_array.data = AI_PTR(activations_map[0] + 4448);
 800648a:	4ab7      	ldr	r2, [pc, #732]	; (8006768 <network_configure_activations+0x6f0>)
    conv2d_17_scratch1_array.data = AI_PTR(activations_map[0] + 54624);
 800648c:	9d21      	ldr	r5, [sp, #132]	; 0x84
    conv2d_17_scratch0_array.data = AI_PTR(activations_map[0] + 4448);
 800648e:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_17_scratch1_array.data = AI_PTR(activations_map[0] + 54624);
 8006492:	4ab6      	ldr	r2, [pc, #728]	; (800676c <network_configure_activations+0x6f4>)
 8006494:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_17_output_array.data = AI_PTR(activations_map[0] + 79200);
 8006498:	9d07      	ldr	r5, [sp, #28]
 800649a:	4ab5      	ldr	r2, [pc, #724]	; (8006770 <network_configure_activations+0x6f8>)
 800649c:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_18_scratch0_array.data = AI_PTR(activations_map[0] + 4448);
 80064a0:	4ab4      	ldr	r2, [pc, #720]	; (8006774 <network_configure_activations+0x6fc>)
    conv2d_20_output_array.data = AI_PTR(activations_map[0] + 37760);
 80064a2:	9d08      	ldr	r5, [sp, #32]
    conv2d_18_scratch0_array.data = AI_PTR(activations_map[0] + 4448);
 80064a4:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_18_output_array.data = AI_PTR(activations_map[0] + 4992);
 80064a8:	4ab3      	ldr	r2, [pc, #716]	; (8006778 <network_configure_activations+0x700>)
    eltwise_19_output_array.data = AI_PTR(activations_map[0] + 9088);
 80064aa:	f503 500e 	add.w	r0, r3, #9088	; 0x2380
    conv2d_18_output_array.data = AI_PTR(activations_map[0] + 4992);
 80064ae:	e9c2 4402 	strd	r4, r4, [r2, #8]
    eltwise_19_output_array.data = AI_PTR(activations_map[0] + 9088);
 80064b2:	4ab2      	ldr	r2, [pc, #712]	; (800677c <network_configure_activations+0x704>)
 80064b4:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_20_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80064b8:	4ab1      	ldr	r2, [pc, #708]	; (8006780 <network_configure_activations+0x708>)
    conv2d_20_scratch1_array.data = AI_PTR(activations_map[0] + 13184);
 80064ba:	9823      	ldr	r0, [sp, #140]	; 0x8c
    conv2d_20_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80064bc:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_20_scratch1_array.data = AI_PTR(activations_map[0] + 13184);
 80064c0:	4ab0      	ldr	r2, [pc, #704]	; (8006784 <network_configure_activations+0x70c>)
 80064c2:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_20_output_array.data = AI_PTR(activations_map[0] + 37760);
 80064c6:	4ab0      	ldr	r2, [pc, #704]	; (8006788 <network_configure_activations+0x710>)
 80064c8:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_21_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80064cc:	4aaf      	ldr	r2, [pc, #700]	; (800678c <network_configure_activations+0x714>)
 80064ce:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_21_scratch1_array.data = AI_PTR(activations_map[0] + 13184);
 80064d2:	4aaf      	ldr	r2, [pc, #700]	; (8006790 <network_configure_activations+0x718>)
    conv2d_21_output_array.data = AI_PTR(activations_map[0] + 62336);
 80064d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
    conv2d_21_scratch1_array.data = AI_PTR(activations_map[0] + 13184);
 80064d6:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_21_output_array.data = AI_PTR(activations_map[0] + 62336);
 80064da:	4aae      	ldr	r2, [pc, #696]	; (8006794 <network_configure_activations+0x71c>)
    conv2d_22_output_array.data = AI_PTR(activations_map[0] + 544);
 80064dc:	f503 7008 	add.w	r0, r3, #544	; 0x220
    conv2d_21_output_array.data = AI_PTR(activations_map[0] + 62336);
 80064e0:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_22_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80064e4:	4aac      	ldr	r2, [pc, #688]	; (8006798 <network_configure_activations+0x720>)
    conv2d_24_scratch1_array.data = AI_PTR(activations_map[0] + 8736);
 80064e6:	9d24      	ldr	r5, [sp, #144]	; 0x90
    conv2d_22_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80064e8:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_22_output_array.data = AI_PTR(activations_map[0] + 544);
 80064ec:	4aab      	ldr	r2, [pc, #684]	; (800679c <network_configure_activations+0x724>)
 80064ee:	e9c2 0002 	strd	r0, r0, [r2, #8]
    eltwise_23_output_array.data = AI_PTR(activations_map[0] + 4640);
 80064f2:	f503 5091 	add.w	r0, r3, #4640	; 0x1220
 80064f6:	4aaa      	ldr	r2, [pc, #680]	; (80067a0 <network_configure_activations+0x728>)
 80064f8:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_24_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80064fc:	4aa9      	ldr	r2, [pc, #676]	; (80067a4 <network_configure_activations+0x72c>)
    conv2d_26_scratch1_array.data = AI_PTR(activations_map[0] + 3556);
 80064fe:	f603 50e4 	addw	r0, r3, #3556	; 0xde4
    conv2d_24_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006502:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_24_scratch1_array.data = AI_PTR(activations_map[0] + 8736);
 8006506:	4aa8      	ldr	r2, [pc, #672]	; (80067a8 <network_configure_activations+0x730>)
 8006508:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_24_output_array.data = AI_PTR(activations_map[0] + 33312);
 800650c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800650e:	4aa7      	ldr	r2, [pc, #668]	; (80067ac <network_configure_activations+0x734>)
 8006510:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_26_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006514:	4aa6      	ldr	r2, [pc, #664]	; (80067b0 <network_configure_activations+0x738>)
    conv2d_26_output_array.data = AI_PTR(activations_map[0] + 9700);
 8006516:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    conv2d_26_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006518:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_26_scratch1_array.data = AI_PTR(activations_map[0] + 3556);
 800651c:	4aa5      	ldr	r2, [pc, #660]	; (80067b4 <network_configure_activations+0x73c>)
 800651e:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_26_output_array.data = AI_PTR(activations_map[0] + 9700);
 8006522:	4aa5      	ldr	r2, [pc, #660]	; (80067b8 <network_configure_activations+0x740>)
    conv2d_27_output_array.data = AI_PTR(activations_map[0] + 624);
 8006524:	f503 701c 	add.w	r0, r3, #624	; 0x270
    conv2d_26_output_array.data = AI_PTR(activations_map[0] + 9700);
 8006528:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_27_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800652c:	4aa3      	ldr	r2, [pc, #652]	; (80067bc <network_configure_activations+0x744>)
 800652e:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_27_output_array.data = AI_PTR(activations_map[0] + 624);
 8006532:	4aa3      	ldr	r2, [pc, #652]	; (80067c0 <network_configure_activations+0x748>)
 8006534:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_28_scratch0_array.data = AI_PTR(activations_map[0] + 2160);
 8006538:	4aa2      	ldr	r2, [pc, #648]	; (80067c4 <network_configure_activations+0x74c>)
    conv2d_28_scratch1_array.data = AI_PTR(activations_map[0] + 3696);
 800653a:	f503 6067 	add.w	r0, r3, #3696	; 0xe70
    conv2d_28_scratch0_array.data = AI_PTR(activations_map[0] + 2160);
 800653e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_28_scratch1_array.data = AI_PTR(activations_map[0] + 3696);
 8006542:	4aa1      	ldr	r2, [pc, #644]	; (80067c8 <network_configure_activations+0x750>)
 8006544:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_28_output_array.data = AI_PTR(activations_map[0] + 12912);
 8006548:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800654a:	4aa0      	ldr	r2, [pc, #640]	; (80067cc <network_configure_activations+0x754>)
 800654c:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_29_scratch0_array.data = AI_PTR(activations_map[0] + 2160);
 8006550:	4a9f      	ldr	r2, [pc, #636]	; (80067d0 <network_configure_activations+0x758>)
    conv2d_29_scratch1_array.data = AI_PTR(activations_map[0] + 22128);
 8006552:	9d25      	ldr	r5, [sp, #148]	; 0x94
    conv2d_29_scratch0_array.data = AI_PTR(activations_map[0] + 2160);
 8006554:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_29_scratch1_array.data = AI_PTR(activations_map[0] + 22128);
 8006558:	4a9e      	ldr	r2, [pc, #632]	; (80067d4 <network_configure_activations+0x75c>)
 800655a:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_29_output_array.data = AI_PTR(activations_map[0] + 31344);
 800655e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006560:	4a9d      	ldr	r2, [pc, #628]	; (80067d8 <network_configure_activations+0x760>)
 8006562:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_30_scratch0_array.data = AI_PTR(activations_map[0] + 2160);
 8006566:	4a9d      	ldr	r2, [pc, #628]	; (80067dc <network_configure_activations+0x764>)
    conv2d_32_output_array.data = AI_PTR(activations_map[0] + 15264);
 8006568:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    conv2d_30_scratch0_array.data = AI_PTR(activations_map[0] + 2160);
 800656a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_30_output_array.data = AI_PTR(activations_map[0] + 2976);
 800656e:	f503 613a 	add.w	r1, r3, #2976	; 0xba0
 8006572:	4a9b      	ldr	r2, [pc, #620]	; (80067e0 <network_configure_activations+0x768>)
 8006574:	e9c2 1102 	strd	r1, r1, [r2, #8]
    eltwise_31_output_array.data = AI_PTR(activations_map[0] + 4512);
 8006578:	f503 518d 	add.w	r1, r3, #4512	; 0x11a0
 800657c:	4a99      	ldr	r2, [pc, #612]	; (80067e4 <network_configure_activations+0x76c>)
 800657e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_32_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006582:	4a99      	ldr	r2, [pc, #612]	; (80067e8 <network_configure_activations+0x770>)
    conv2d_32_scratch1_array.data = AI_PTR(activations_map[0] + 6048);
 8006584:	9926      	ldr	r1, [sp, #152]	; 0x98
    conv2d_32_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006586:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_32_scratch1_array.data = AI_PTR(activations_map[0] + 6048);
 800658a:	4a98      	ldr	r2, [pc, #608]	; (80067ec <network_configure_activations+0x774>)
 800658c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_32_output_array.data = AI_PTR(activations_map[0] + 15264);
 8006590:	4a97      	ldr	r2, [pc, #604]	; (80067f0 <network_configure_activations+0x778>)
 8006592:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_33_scratch0_array.data = AI_PTR(activations_map[0] + 6048);
 8006596:	4a97      	ldr	r2, [pc, #604]	; (80067f4 <network_configure_activations+0x77c>)
    conv2d_33_scratch1_array.data = AI_PTR(activations_map[0] + 24480);
 8006598:	9d27      	ldr	r5, [sp, #156]	; 0x9c
    conv2d_33_scratch0_array.data = AI_PTR(activations_map[0] + 6048);
 800659a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_33_scratch1_array.data = AI_PTR(activations_map[0] + 24480);
 800659e:	4a96      	ldr	r2, [pc, #600]	; (80067f8 <network_configure_activations+0x780>)
    eltwise_35_output_array.data = AI_PTR(activations_map[0] + 2352);
 80065a0:	f503 6113 	add.w	r1, r3, #2352	; 0x930
    conv2d_33_scratch1_array.data = AI_PTR(activations_map[0] + 24480);
 80065a4:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_33_output_array.data = AI_PTR(activations_map[0] + 33696);
 80065a8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80065aa:	4a94      	ldr	r2, [pc, #592]	; (80067fc <network_configure_activations+0x784>)
 80065ac:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_34_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80065b0:	4a93      	ldr	r2, [pc, #588]	; (8006800 <network_configure_activations+0x788>)
    conv2d_34_output_array.data = AI_PTR(activations_map[0] + 816);
 80065b2:	9812      	ldr	r0, [sp, #72]	; 0x48
    conv2d_36_output_array.data = AI_PTR(activations_map[0] + 13104);
 80065b4:	9d10      	ldr	r5, [sp, #64]	; 0x40
    conv2d_34_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80065b6:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_34_output_array.data = AI_PTR(activations_map[0] + 816);
 80065ba:	4a92      	ldr	r2, [pc, #584]	; (8006804 <network_configure_activations+0x78c>)
 80065bc:	e9c2 0002 	strd	r0, r0, [r2, #8]
    eltwise_35_output_array.data = AI_PTR(activations_map[0] + 2352);
 80065c0:	4a91      	ldr	r2, [pc, #580]	; (8006808 <network_configure_activations+0x790>)
 80065c2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_36_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80065c6:	4a91      	ldr	r2, [pc, #580]	; (800680c <network_configure_activations+0x794>)
    conv2d_43_output_array.data = AI_PTR(activations_map[0] + 17280);
 80065c8:	f503 4187 	add.w	r1, r3, #17280	; 0x4380
    conv2d_36_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80065cc:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_36_scratch1_array.data = AI_PTR(activations_map[0] + 3888);
 80065d0:	4a8f      	ldr	r2, [pc, #572]	; (8006810 <network_configure_activations+0x798>)
 80065d2:	e9c2 ee02 	strd	lr, lr, [r2, #8]
    conv2d_36_output_array.data = AI_PTR(activations_map[0] + 13104);
 80065d6:	4a8f      	ldr	r2, [pc, #572]	; (8006814 <network_configure_activations+0x79c>)
 80065d8:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_37_scratch0_array.data = AI_PTR(activations_map[0] + 3888);
 80065dc:	4a8e      	ldr	r2, [pc, #568]	; (8006818 <network_configure_activations+0x7a0>)
    conv2d_37_scratch1_array.data = AI_PTR(activations_map[0] + 22320);
 80065de:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    conv2d_37_scratch0_array.data = AI_PTR(activations_map[0] + 3888);
 80065e0:	e9c2 ee02 	strd	lr, lr, [r2, #8]
    conv2d_37_scratch1_array.data = AI_PTR(activations_map[0] + 22320);
 80065e4:	4a8d      	ldr	r2, [pc, #564]	; (800681c <network_configure_activations+0x7a4>)
 80065e6:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_37_output_array.data = AI_PTR(activations_map[0] + 31536);
 80065ea:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80065ec:	4a8c      	ldr	r2, [pc, #560]	; (8006820 <network_configure_activations+0x7a8>)
 80065ee:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_38_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80065f2:	4a8c      	ldr	r2, [pc, #560]	; (8006824 <network_configure_activations+0x7ac>)
    conv2d_40_scratch1_array.data = AI_PTR(activations_map[0] + 5424);
 80065f4:	9d29      	ldr	r5, [sp, #164]	; 0xa4
    conv2d_38_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80065f6:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_38_output_array.data = AI_PTR(activations_map[0] + 816);
 80065fa:	4a8b      	ldr	r2, [pc, #556]	; (8006828 <network_configure_activations+0x7b0>)
 80065fc:	e9c2 0002 	strd	r0, r0, [r2, #8]
    eltwise_39_output_array.data = AI_PTR(activations_map[0] + 3888);
 8006600:	4a8a      	ldr	r2, [pc, #552]	; (800682c <network_configure_activations+0x7b4>)
 8006602:	e9c2 ee02 	strd	lr, lr, [r2, #8]
    conv2d_40_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006606:	4a8a      	ldr	r2, [pc, #552]	; (8006830 <network_configure_activations+0x7b8>)
 8006608:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_40_scratch1_array.data = AI_PTR(activations_map[0] + 5424);
 800660c:	4a89      	ldr	r2, [pc, #548]	; (8006834 <network_configure_activations+0x7bc>)
 800660e:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_40_output_array.data = AI_PTR(activations_map[0] + 14640);
 8006612:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8006614:	4a88      	ldr	r2, [pc, #544]	; (8006838 <network_configure_activations+0x7c0>)
    conv2d_42_output_array.data = AI_PTR(activations_map[0] + 896);
 8006616:	9833      	ldr	r0, [sp, #204]	; 0xcc
    conv2d_40_output_array.data = AI_PTR(activations_map[0] + 14640);
 8006618:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_41_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800661c:	4a87      	ldr	r2, [pc, #540]	; (800683c <network_configure_activations+0x7c4>)
    conv2d_41_scratch1_array.data = AI_PTR(activations_map[0] + 5332);
 800661e:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
    conv2d_41_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006620:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_41_scratch1_array.data = AI_PTR(activations_map[0] + 5332);
 8006624:	4a86      	ldr	r2, [pc, #536]	; (8006840 <network_configure_activations+0x7c8>)
 8006626:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_41_output_array.data = AI_PTR(activations_map[0] + 23856);
 800662a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800662c:	4a85      	ldr	r2, [pc, #532]	; (8006844 <network_configure_activations+0x7cc>)
 800662e:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_42_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006632:	4a85      	ldr	r2, [pc, #532]	; (8006848 <network_configure_activations+0x7d0>)
 8006634:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_42_output_array.data = AI_PTR(activations_map[0] + 896);
 8006638:	4a84      	ldr	r2, [pc, #528]	; (800684c <network_configure_activations+0x7d4>)
 800663a:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_43_scratch0_array.data = AI_PTR(activations_map[0] + 2944);
 800663e:	4a84      	ldr	r2, [pc, #528]	; (8006850 <network_configure_activations+0x7d8>)
 8006640:	e9c2 cc02 	strd	ip, ip, [r2, #8]
    conv2d_43_scratch1_array.data = AI_PTR(activations_map[0] + 4992);
 8006644:	4a83      	ldr	r2, [pc, #524]	; (8006854 <network_configure_activations+0x7dc>)
 8006646:	e9c2 4402 	strd	r4, r4, [r2, #8]
    conv2d_43_output_array.data = AI_PTR(activations_map[0] + 17280);
 800664a:	4a83      	ldr	r2, [pc, #524]	; (8006858 <network_configure_activations+0x7e0>)
    conv2d_44_output_array.data = AI_PTR(activations_map[0] + 41856);
 800664c:	9c15      	ldr	r4, [sp, #84]	; 0x54
    conv2d_43_output_array.data = AI_PTR(activations_map[0] + 17280);
 800664e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_44_scratch0_array.data = AI_PTR(activations_map[0] + 2944);
 8006652:	4a82      	ldr	r2, [pc, #520]	; (800685c <network_configure_activations+0x7e4>)
    conv2d_44_scratch1_array.data = AI_PTR(activations_map[0] + 29568);
 8006654:	f503 41e7 	add.w	r1, r3, #29568	; 0x7380
    conv2d_44_scratch0_array.data = AI_PTR(activations_map[0] + 2944);
 8006658:	e9c2 cc02 	strd	ip, ip, [r2, #8]
    conv2d_44_scratch1_array.data = AI_PTR(activations_map[0] + 29568);
 800665c:	4a80      	ldr	r2, [pc, #512]	; (8006860 <network_configure_activations+0x7e8>)
 800665e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_44_output_array.data = AI_PTR(activations_map[0] + 41856);
 8006662:	4a80      	ldr	r2, [pc, #512]	; (8006864 <network_configure_activations+0x7ec>)
    conv2d_45_output_array.data = AI_PTR(activations_map[0] + 4032);
 8006664:	f503 617c 	add.w	r1, r3, #4032	; 0xfc0
    conv2d_44_output_array.data = AI_PTR(activations_map[0] + 41856);
 8006668:	e9c2 4402 	strd	r4, r4, [r2, #8]
    conv2d_45_scratch0_array.data = AI_PTR(activations_map[0] + 2944);
 800666c:	4a7e      	ldr	r2, [pc, #504]	; (8006868 <network_configure_activations+0x7f0>)
 800666e:	e9c2 cc02 	strd	ip, ip, [r2, #8]
    conv2d_45_output_array.data = AI_PTR(activations_map[0] + 4032);
 8006672:	4a7e      	ldr	r2, [pc, #504]	; (800686c <network_configure_activations+0x7f4>)
 8006674:	e9c2 1102 	strd	r1, r1, [r2, #8]
    eltwise_46_output_array.data = AI_PTR(activations_map[0] + 6080);
 8006678:	f503 51be 	add.w	r1, r3, #6080	; 0x17c0
 800667c:	4a7c      	ldr	r2, [pc, #496]	; (8006870 <network_configure_activations+0x7f8>)
    conv2d_47_output_array.data = AI_PTR(activations_map[0] + 20416);
 800667e:	9c16      	ldr	r4, [sp, #88]	; 0x58
    eltwise_46_output_array.data = AI_PTR(activations_map[0] + 6080);
 8006680:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_47_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006684:	4a7b      	ldr	r2, [pc, #492]	; (8006874 <network_configure_activations+0x7fc>)
    conv2d_47_scratch1_array.data = AI_PTR(activations_map[0] + 8128);
 8006686:	992c      	ldr	r1, [sp, #176]	; 0xb0
    conv2d_47_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006688:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_47_scratch1_array.data = AI_PTR(activations_map[0] + 8128);
 800668c:	4a7a      	ldr	r2, [pc, #488]	; (8006878 <network_configure_activations+0x800>)
 800668e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_47_output_array.data = AI_PTR(activations_map[0] + 20416);
 8006692:	4a7a      	ldr	r2, [pc, #488]	; (800687c <network_configure_activations+0x804>)
 8006694:	e9c2 4402 	strd	r4, r4, [r2, #8]
    conv2d_48_scratch0_array.data = AI_PTR(activations_map[0] + 8128);
 8006698:	4a79      	ldr	r2, [pc, #484]	; (8006880 <network_configure_activations+0x808>)
 800669a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_48_scratch1_array.data = AI_PTR(activations_map[0] + 32704);
 800669e:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80066a0:	4a78      	ldr	r2, [pc, #480]	; (8006884 <network_configure_activations+0x80c>)
 80066a2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_48_output_array.data = AI_PTR(activations_map[0] + 44992);
 80066a6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80066a8:	4a77      	ldr	r2, [pc, #476]	; (8006888 <network_configure_activations+0x810>)
 80066aa:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_49_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80066ae:	4a77      	ldr	r2, [pc, #476]	; (800688c <network_configure_activations+0x814>)
    conv2d_49_output_array.data = AI_PTR(activations_map[0] + 1088);
 80066b0:	f503 6188 	add.w	r1, r3, #1088	; 0x440
    conv2d_49_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80066b4:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_49_output_array.data = AI_PTR(activations_map[0] + 1088);
 80066b8:	4a75      	ldr	r2, [pc, #468]	; (8006890 <network_configure_activations+0x818>)
 80066ba:	e9c2 1102 	strd	r1, r1, [r2, #8]
    eltwise_50_output_array.data = AI_PTR(activations_map[0] + 3136);
 80066be:	f503 6144 	add.w	r1, r3, #3136	; 0xc40
 80066c2:	4a74      	ldr	r2, [pc, #464]	; (8006894 <network_configure_activations+0x81c>)
 80066c4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_51_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80066c8:	4a73      	ldr	r2, [pc, #460]	; (8006898 <network_configure_activations+0x820>)
    conv2d_51_scratch1_array.data = AI_PTR(activations_map[0] + 5184);
 80066ca:	f503 51a2 	add.w	r1, r3, #5184	; 0x1440
    conv2d_51_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80066ce:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_51_scratch1_array.data = AI_PTR(activations_map[0] + 5184);
 80066d2:	4a72      	ldr	r2, [pc, #456]	; (800689c <network_configure_activations+0x824>)
 80066d4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_51_output_array.data = AI_PTR(activations_map[0] + 17472);
 80066d8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80066da:	4a71      	ldr	r2, [pc, #452]	; (80068a0 <network_configure_activations+0x828>)
 80066dc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_53_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80066e0:	4a70      	ldr	r2, [pc, #448]	; (80068a4 <network_configure_activations+0x82c>)
 80066e2:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_53_scratch1_array.data = AI_PTR(activations_map[0] + 7108);
 80066e6:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80066e8:	4a6f      	ldr	r2, [pc, #444]	; (80068a8 <network_configure_activations+0x830>)
 80066ea:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_53_output_array.data = AI_PTR(activations_map[0] + 10180);
 80066ee:	9919      	ldr	r1, [sp, #100]	; 0x64
 80066f0:	4a6e      	ldr	r2, [pc, #440]	; (80068ac <network_configure_activations+0x834>)
 80066f2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_54_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80066f6:	4a6e      	ldr	r2, [pc, #440]	; (80068b0 <network_configure_activations+0x838>)
    conv2d_54_output_array.data = AI_PTR(activations_map[0] + 1328);
 80066f8:	f503 61a6 	add.w	r1, r3, #1328	; 0x530
    conv2d_54_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80066fc:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_54_output_array.data = AI_PTR(activations_map[0] + 1328);
 8006700:	4a6c      	ldr	r2, [pc, #432]	; (80068b4 <network_configure_activations+0x83c>)
 8006702:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_55_scratch0_array.data = AI_PTR(activations_map[0] + 2224);
 8006706:	4a6c      	ldr	r2, [pc, #432]	; (80068b8 <network_configure_activations+0x840>)
    conv2d_55_scratch1_array.data = AI_PTR(activations_map[0] + 5808);
 8006708:	992f      	ldr	r1, [sp, #188]	; 0xbc
    conv2d_55_scratch0_array.data = AI_PTR(activations_map[0] + 2224);
 800670a:	e9c2 7702 	strd	r7, r7, [r2, #8]
    conv2d_55_scratch1_array.data = AI_PTR(activations_map[0] + 5808);
 800670e:	4a6b      	ldr	r2, [pc, #428]	; (80068bc <network_configure_activations+0x844>)
 8006710:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_55_output_array.data = AI_PTR(activations_map[0] + 11184);
 8006714:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006716:	4a6a      	ldr	r2, [pc, #424]	; (80068c0 <network_configure_activations+0x848>)
 8006718:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_56_scratch0_array.data = AI_PTR(activations_map[0] + 16560);
 800671c:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800671e:	4a69      	ldr	r2, [pc, #420]	; (80068c4 <network_configure_activations+0x84c>)
 8006720:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_56_scratch1_array.data = AI_PTR(activations_map[0] + 2224);
 8006724:	4a68      	ldr	r2, [pc, #416]	; (80068c8 <network_configure_activations+0x850>)
    conv2d_56_output_array.data = AI_PTR(activations_map[0] + 28996);
 8006726:	991b      	ldr	r1, [sp, #108]	; 0x6c
    conv2d_56_scratch1_array.data = AI_PTR(activations_map[0] + 2224);
 8006728:	e9c2 7702 	strd	r7, r7, [r2, #8]
    conv2d_56_output_array.data = AI_PTR(activations_map[0] + 28996);
 800672c:	4a67      	ldr	r2, [pc, #412]	; (80068cc <network_configure_activations+0x854>)
 800672e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_57_scratch0_array.data = AI_PTR(activations_map[0] + 2224);
 8006732:	4a67      	ldr	r2, [pc, #412]	; (80068d0 <network_configure_activations+0x858>)
 8006734:	e9c2 7702 	strd	r7, r7, [r2, #8]
    conv2d_57_output_array.data = AI_PTR(activations_map[0] + 0);
 8006738:	4a66      	ldr	r2, [pc, #408]	; (80068d4 <network_configure_activations+0x85c>)
 800673a:	e9c2 3302 	strd	r3, r3, [r2, #8]
    eltwise_58_output_array.data = AI_PTR(activations_map[0] + 2224);
 800673e:	4a66      	ldr	r2, [pc, #408]	; (80068d8 <network_configure_activations+0x860>)
 8006740:	e9c2 7702 	strd	r7, r7, [r2, #8]
    conv2d_59_scratch0_array.data = AI_PTR(activations_map[0] + 3120);
 8006744:	4a65      	ldr	r2, [pc, #404]	; (80068dc <network_configure_activations+0x864>)
    conv2d_59_scratch1_array.data = AI_PTR(activations_map[0] + 6704);
 8006746:	9931      	ldr	r1, [sp, #196]	; 0xc4
    conv2d_60_scratch0_array.data = AI_PTR(activations_map[0] + 17456);
 8006748:	9f32      	ldr	r7, [sp, #200]	; 0xc8
    conv2d_59_scratch0_array.data = AI_PTR(activations_map[0] + 3120);
 800674a:	e9c2 6602 	strd	r6, r6, [r2, #8]
    conv2d_59_scratch1_array.data = AI_PTR(activations_map[0] + 6704);
 800674e:	4a64      	ldr	r2, [pc, #400]	; (80068e0 <network_configure_activations+0x868>)
 8006750:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_59_output_array.data = AI_PTR(activations_map[0] + 12080);
 8006754:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006756:	4a63      	ldr	r2, [pc, #396]	; (80068e4 <network_configure_activations+0x86c>)
 8006758:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800675c:	e0c4      	b.n	80068e8 <network_configure_activations+0x870>
 800675e:	bf00      	nop
 8006760:	20003b28 	.word	0x20003b28
 8006764:	20003ac8 	.word	0x20003ac8
 8006768:	20003c28 	.word	0x20003c28
 800676c:	20003c58 	.word	0x20003c58
 8006770:	20003bf8 	.word	0x20003bf8
 8006774:	20003d58 	.word	0x20003d58
 8006778:	20003d28 	.word	0x20003d28
 800677c:	20007288 	.word	0x20007288
 8006780:	20003f88 	.word	0x20003f88
 8006784:	20003fb8 	.word	0x20003fb8
 8006788:	20003f58 	.word	0x20003f58
 800678c:	200040b8 	.word	0x200040b8
 8006790:	200040e8 	.word	0x200040e8
 8006794:	20004088 	.word	0x20004088
 8006798:	200041e8 	.word	0x200041e8
 800679c:	200041b8 	.word	0x200041b8
 80067a0:	200072d8 	.word	0x200072d8
 80067a4:	200042e8 	.word	0x200042e8
 80067a8:	20004318 	.word	0x20004318
 80067ac:	200042b8 	.word	0x200042b8
 80067b0:	20004418 	.word	0x20004418
 80067b4:	20004448 	.word	0x20004448
 80067b8:	200043e8 	.word	0x200043e8
 80067bc:	20004548 	.word	0x20004548
 80067c0:	20004518 	.word	0x20004518
 80067c4:	20004648 	.word	0x20004648
 80067c8:	20004678 	.word	0x20004678
 80067cc:	20004618 	.word	0x20004618
 80067d0:	20004778 	.word	0x20004778
 80067d4:	200047a8 	.word	0x200047a8
 80067d8:	20004748 	.word	0x20004748
 80067dc:	200049d8 	.word	0x200049d8
 80067e0:	200049a8 	.word	0x200049a8
 80067e4:	20007328 	.word	0x20007328
 80067e8:	20004ad8 	.word	0x20004ad8
 80067ec:	20004b08 	.word	0x20004b08
 80067f0:	20004aa8 	.word	0x20004aa8
 80067f4:	20004c08 	.word	0x20004c08
 80067f8:	20004c38 	.word	0x20004c38
 80067fc:	20004bd8 	.word	0x20004bd8
 8006800:	20004d38 	.word	0x20004d38
 8006804:	20004d08 	.word	0x20004d08
 8006808:	20007378 	.word	0x20007378
 800680c:	20004e38 	.word	0x20004e38
 8006810:	20004e68 	.word	0x20004e68
 8006814:	20004e08 	.word	0x20004e08
 8006818:	20004f68 	.word	0x20004f68
 800681c:	20004f98 	.word	0x20004f98
 8006820:	20004f38 	.word	0x20004f38
 8006824:	20005098 	.word	0x20005098
 8006828:	20005068 	.word	0x20005068
 800682c:	200073c8 	.word	0x200073c8
 8006830:	20005298 	.word	0x20005298
 8006834:	200052c8 	.word	0x200052c8
 8006838:	20005268 	.word	0x20005268
 800683c:	200053c8 	.word	0x200053c8
 8006840:	200053f8 	.word	0x200053f8
 8006844:	20005398 	.word	0x20005398
 8006848:	200054f8 	.word	0x200054f8
 800684c:	200054c8 	.word	0x200054c8
 8006850:	200055f8 	.word	0x200055f8
 8006854:	20005628 	.word	0x20005628
 8006858:	200055c8 	.word	0x200055c8
 800685c:	20005728 	.word	0x20005728
 8006860:	20005758 	.word	0x20005758
 8006864:	200056f8 	.word	0x200056f8
 8006868:	20005858 	.word	0x20005858
 800686c:	20005828 	.word	0x20005828
 8006870:	20007418 	.word	0x20007418
 8006874:	20005958 	.word	0x20005958
 8006878:	20005988 	.word	0x20005988
 800687c:	20005928 	.word	0x20005928
 8006880:	20005a88 	.word	0x20005a88
 8006884:	20005ab8 	.word	0x20005ab8
 8006888:	20005a58 	.word	0x20005a58
 800688c:	20005bb8 	.word	0x20005bb8
 8006890:	20005b88 	.word	0x20005b88
 8006894:	20007468 	.word	0x20007468
 8006898:	20005de8 	.word	0x20005de8
 800689c:	20005e18 	.word	0x20005e18
 80068a0:	20005db8 	.word	0x20005db8
 80068a4:	20005f18 	.word	0x20005f18
 80068a8:	20005f48 	.word	0x20005f48
 80068ac:	20005ee8 	.word	0x20005ee8
 80068b0:	20006048 	.word	0x20006048
 80068b4:	20006018 	.word	0x20006018
 80068b8:	20006148 	.word	0x20006148
 80068bc:	20006178 	.word	0x20006178
 80068c0:	20006118 	.word	0x20006118
 80068c4:	20006278 	.word	0x20006278
 80068c8:	200062a8 	.word	0x200062a8
 80068cc:	20006248 	.word	0x20006248
 80068d0:	200063a8 	.word	0x200063a8
 80068d4:	20006378 	.word	0x20006378
 80068d8:	200074b8 	.word	0x200074b8
 80068dc:	200064a8 	.word	0x200064a8
 80068e0:	200064d8 	.word	0x200064d8
 80068e4:	20006478 	.word	0x20006478
    conv2d_60_scratch0_array.data = AI_PTR(activations_map[0] + 17456);
 80068e8:	4a30      	ldr	r2, [pc, #192]	; (80069ac <network_configure_activations+0x934>)
    conv2d_60_output_array.data = AI_PTR(activations_map[0] + 29892);
 80068ea:	991d      	ldr	r1, [sp, #116]	; 0x74
    conv2d_60_scratch0_array.data = AI_PTR(activations_map[0] + 17456);
 80068ec:	e9c2 7702 	strd	r7, r7, [r2, #8]
    conv2d_60_scratch1_array.data = AI_PTR(activations_map[0] + 3120);
 80068f0:	4a2f      	ldr	r2, [pc, #188]	; (80069b0 <network_configure_activations+0x938>)
 80068f2:	e9c2 6602 	strd	r6, r6, [r2, #8]
    conv2d_60_output_array.data = AI_PTR(activations_map[0] + 29892);
 80068f6:	4a2f      	ldr	r2, [pc, #188]	; (80069b4 <network_configure_activations+0x93c>)
 80068f8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_61_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80068fc:	4a2e      	ldr	r2, [pc, #184]	; (80069b8 <network_configure_activations+0x940>)
    conv2d_63_scratch1_array.data = AI_PTR(activations_map[0] + 4480);
 80068fe:	f503 518c 	add.w	r1, r3, #4480	; 0x1180
    conv2d_61_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006902:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_61_output_array.data = AI_PTR(activations_map[0] + 3120);
 8006906:	4a2d      	ldr	r2, [pc, #180]	; (80069bc <network_configure_activations+0x944>)
 8006908:	e9c2 6602 	strd	r6, r6, [r2, #8]
    eltwise_62_output_array.data = AI_PTR(activations_map[0] + 0);
 800690c:	4a2c      	ldr	r2, [pc, #176]	; (80069c0 <network_configure_activations+0x948>)
 800690e:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_63_scratch0_array.data = AI_PTR(activations_map[0] + 896);
 8006912:	4a2c      	ldr	r2, [pc, #176]	; (80069c4 <network_configure_activations+0x94c>)
 8006914:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_63_scratch1_array.data = AI_PTR(activations_map[0] + 4480);
 8006918:	4a2b      	ldr	r2, [pc, #172]	; (80069c8 <network_configure_activations+0x950>)
 800691a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_63_output_array.data = AI_PTR(activations_map[0] + 9856);
 800691e:	f503 511a 	add.w	r1, r3, #9856	; 0x2680
 8006922:	4a2a      	ldr	r2, [pc, #168]	; (80069cc <network_configure_activations+0x954>)
 8006924:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_64_scratch0_array.data = AI_PTR(activations_map[0] + 15232);
 8006928:	f503 516e 	add.w	r1, r3, #15232	; 0x3b80
 800692c:	4a28      	ldr	r2, [pc, #160]	; (80069d0 <network_configure_activations+0x958>)
 800692e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_64_scratch1_array.data = AI_PTR(activations_map[0] + 0);
 8006932:	4a28      	ldr	r2, [pc, #160]	; (80069d4 <network_configure_activations+0x95c>)
    conv2d_65_output_array.data = AI_PTR(activations_map[0] + 2464);
 8006934:	f503 611a 	add.w	r1, r3, #2464	; 0x9a0
    conv2d_64_scratch1_array.data = AI_PTR(activations_map[0] + 0);
 8006938:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_64_output_array.data = AI_PTR(activations_map[0] + 27668);
 800693c:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800693e:	4a26      	ldr	r2, [pc, #152]	; (80069d8 <network_configure_activations+0x960>)
    conv2d_66_scratch1_array.data = AI_PTR(activations_map[0] + 17504);
 8006940:	9834      	ldr	r0, [sp, #208]	; 0xd0
    conv2d_66_scratch2_array.data = AI_PTR(activations_map[0] + 37984);
 8006942:	9f35      	ldr	r7, [sp, #212]	; 0xd4
    conv2d_64_output_array.data = AI_PTR(activations_map[0] + 27668);
 8006944:	e9c2 6602 	strd	r6, r6, [r2, #8]
    conv2d_65_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006948:	4a24      	ldr	r2, [pc, #144]	; (80069dc <network_configure_activations+0x964>)
 800694a:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_65_output_array.data = AI_PTR(activations_map[0] + 2464);
 800694e:	4a24      	ldr	r2, [pc, #144]	; (80069e0 <network_configure_activations+0x968>)
 8006950:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_66_scratch0_array.data = AI_PTR(activations_map[0] + 4256);
 8006954:	f503 5185 	add.w	r1, r3, #4256	; 0x10a0
 8006958:	4a22      	ldr	r2, [pc, #136]	; (80069e4 <network_configure_activations+0x96c>)
 800695a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_66_scratch1_array.data = AI_PTR(activations_map[0] + 17504);
 800695e:	4a22      	ldr	r2, [pc, #136]	; (80069e8 <network_configure_activations+0x970>)
    dense_68_output_array.data = AI_PTR(activations_map[0] + 1280);
 8006960:	f503 61a0 	add.w	r1, r3, #1280	; 0x500
    conv2d_66_scratch1_array.data = AI_PTR(activations_map[0] + 17504);
 8006964:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_66_scratch2_array.data = AI_PTR(activations_map[0] + 37984);
 8006968:	4a20      	ldr	r2, [pc, #128]	; (80069ec <network_configure_activations+0x974>)
    conv2d_66_output_array.data = AI_PTR(activations_map[0] + 0);
 800696a:	4821      	ldr	r0, [pc, #132]	; (80069f0 <network_configure_activations+0x978>)
    conv2d_66_scratch2_array.data = AI_PTR(activations_map[0] + 37984);
 800696c:	e9c2 7702 	strd	r7, r7, [r2, #8]
    dense_68_output_array.data = AI_PTR(activations_map[0] + 1280);
 8006970:	4a20      	ldr	r2, [pc, #128]	; (80069f4 <network_configure_activations+0x97c>)
    conv2d_66_output_array.data = AI_PTR(activations_map[0] + 0);
 8006972:	e9c0 3302 	strd	r3, r3, [r0, #8]
    dense_68_output_array.data = AI_PTR(activations_map[0] + 1280);
 8006976:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_68_0_conversion_output_array.data = AI_PTR(activations_map[0] + 0);
 800697a:	481f      	ldr	r0, [pc, #124]	; (80069f8 <network_configure_activations+0x980>)
    nl_69_output_array.data = AI_PTR(activations_map[0] + 20);
 800697c:	f103 0114 	add.w	r1, r3, #20
 8006980:	4a1e      	ldr	r2, [pc, #120]	; (80069fc <network_configure_activations+0x984>)
    dense_68_0_conversion_output_array.data = AI_PTR(activations_map[0] + 0);
 8006982:	e9c0 3302 	strd	r3, r3, [r0, #8]
    nl_69_output_array.data = AI_PTR(activations_map[0] + 20);
 8006986:	e9c2 1102 	strd	r1, r1, [r2, #8]
}
 800698a:	4640      	mov	r0, r8
    nl_69_0_conversion_output_array.data = AI_PTR(activations_map[0] + 0);
 800698c:	4a1c      	ldr	r2, [pc, #112]	; (8006a00 <network_configure_activations+0x988>)
 800698e:	e9c2 3302 	strd	r3, r3, [r2, #8]
}
 8006992:	b039      	add	sp, #228	; 0xe4
 8006994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8006998:	2213      	movs	r2, #19
 800699a:	2130      	movs	r1, #48	; 0x30
 800699c:	4620      	mov	r0, r4
 800699e:	f015 fc6b 	bl	801c278 <ai_platform_network_set_error>
}
 80069a2:	4640      	mov	r0, r8
 80069a4:	b039      	add	sp, #228	; 0xe4
 80069a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069aa:	bf00      	nop
 80069ac:	200065d8 	.word	0x200065d8
 80069b0:	20006608 	.word	0x20006608
 80069b4:	200065a8 	.word	0x200065a8
 80069b8:	20006708 	.word	0x20006708
 80069bc:	200066d8 	.word	0x200066d8
 80069c0:	20007508 	.word	0x20007508
 80069c4:	20006808 	.word	0x20006808
 80069c8:	20006838 	.word	0x20006838
 80069cc:	200067d8 	.word	0x200067d8
 80069d0:	20006938 	.word	0x20006938
 80069d4:	20006968 	.word	0x20006968
 80069d8:	20006908 	.word	0x20006908
 80069dc:	20006a68 	.word	0x20006a68
 80069e0:	20006a38 	.word	0x20006a38
 80069e4:	20006b80 	.word	0x20006b80
 80069e8:	20006bb0 	.word	0x20006bb0
 80069ec:	20006be0 	.word	0x20006be0
 80069f0:	20006b50 	.word	0x20006b50
 80069f4:	200071b8 	.word	0x200071b8
 80069f8:	20007140 	.word	0x20007140
 80069fc:	200075f0 	.word	0x200075f0
 8006a00:	200075a0 	.word	0x200075a0

08006a04 <ai_network_get_info>:

AI_DEPRECATED
AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 8006a04:	b570      	push	{r4, r5, r6, lr}
 8006a06:	460d      	mov	r5, r1
 8006a08:	b0a0      	sub	sp, #128	; 0x80
 8006a0a:	4606      	mov	r6, r0
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8006a0c:	f015 fbb0 	bl	801c170 <ai_platform_context_acquire>

  if (report && net_ctx)
 8006a10:	2d00      	cmp	r5, #0
 8006a12:	bf18      	it	ne
 8006a14:	2800      	cmpne	r0, #0
 8006a16:	bf14      	ite	ne
 8006a18:	2401      	movne	r4, #1
 8006a1a:	2400      	moveq	r4, #0
 8006a1c:	d102      	bne.n	8006a24 <ai_network_get_info+0x20>

    *report = r;
    return true;
  }
  return false;
}
 8006a1e:	4620      	mov	r0, r4
 8006a20:	b020      	add	sp, #128	; 0x80
 8006a22:	bd70      	pop	{r4, r5, r6, pc}
    ai_network_report r = {
 8006a24:	226c      	movs	r2, #108	; 0x6c
 8006a26:	2100      	movs	r1, #0
 8006a28:	a805      	add	r0, sp, #20
 8006a2a:	f01f fdaa 	bl	8026582 <memset>
 8006a2e:	4916      	ldr	r1, [pc, #88]	; (8006a88 <ai_network_get_info+0x84>)
 8006a30:	4b16      	ldr	r3, [pc, #88]	; (8006a8c <ai_network_get_info+0x88>)
 8006a32:	4a17      	ldr	r2, [pc, #92]	; (8006a90 <ai_network_get_info+0x8c>)
 8006a34:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8006a38:	4b16      	ldr	r3, [pc, #88]	; (8006a94 <ai_network_get_info+0x90>)
 8006a3a:	e9cd 2303 	strd	r2, r3, [sp, #12]
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8006a3e:	f015 f969 	bl	801bd14 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8006a42:	9005      	str	r0, [sp, #20]
      .runtime_version   = ai_platform_runtime_get_version(),
 8006a44:	f015 f9e4 	bl	801be10 <ai_platform_runtime_get_version>
    ai_network_report r = {
 8006a48:	4b13      	ldr	r3, [pc, #76]	; (8006a98 <ai_network_get_info+0x94>)
 8006a4a:	e9cd 0306 	strd	r0, r3, [sp, #24]
 8006a4e:	f240 1307 	movw	r3, #263	; 0x107
 8006a52:	f8ad 3020 	strh.w	r3, [sp, #32]
      .api_version            = ai_platform_api_get_version(),
 8006a56:	f015 fa6b 	bl	801bf30 <ai_platform_api_get_version>
 8006a5a:	900a      	str	r0, [sp, #40]	; 0x28
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8006a5c:	f015 faf8 	bl	801c050 <ai_platform_interface_api_get_version>
    ai_network_report r = {
 8006a60:	4b0e      	ldr	r3, [pc, #56]	; (8006a9c <ai_network_get_info+0x98>)
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8006a62:	4602      	mov	r2, r0
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8006a64:	a901      	add	r1, sp, #4
 8006a66:	4630      	mov	r0, r6
    ai_network_report r = {
 8006a68:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8006a6c:	f015 fc0a 	bl	801c284 <ai_platform_api_get_network_report>
 8006a70:	4604      	mov	r4, r0
 8006a72:	2800      	cmp	r0, #0
 8006a74:	d0d3      	beq.n	8006a1e <ai_network_get_info+0x1a>
    *report = r;
 8006a76:	227c      	movs	r2, #124	; 0x7c
 8006a78:	a901      	add	r1, sp, #4
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	f01f fe1b 	bl	80266b6 <memcpy>
}
 8006a80:	4620      	mov	r0, r4
 8006a82:	b020      	add	sp, #128	; 0x80
 8006a84:	bd70      	pop	{r4, r5, r6, pc}
 8006a86:	bf00      	nop
 8006a88:	080294e8 	.word	0x080294e8
 8006a8c:	080294f0 	.word	0x080294f0
 8006a90:	08029514 	.word	0x08029514
 8006a94:	08029530 	.word	0x08029530
 8006a98:	080292c4 	.word	0x080292c4
 8006a9c:	012370e4 	.word	0x012370e4

08006aa0 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8006aa0:	b510      	push	{r4, lr}
  return ai_platform_network_create(
 8006aa2:	2205      	movs	r2, #5
{
 8006aa4:	b082      	sub	sp, #8
  return ai_platform_network_create(
 8006aa6:	2400      	movs	r4, #0
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e9cd 2400 	strd	r2, r4, [sp]
 8006aae:	4a02      	ldr	r2, [pc, #8]	; (8006ab8 <ai_network_create+0x18>)
 8006ab0:	f016 f816 	bl	801cae0 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8006ab4:	b002      	add	sp, #8
 8006ab6:	bd10      	pop	{r4, pc}
 8006ab8:	20007518 	.word	0x20007518

08006abc <ai_network_destroy>:
}

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 8006abc:	f016 b9b0 	b.w	801ce20 <ai_platform_network_destroy>

08006ac0 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8006ac0:	b570      	push	{r4, r5, r6, lr}
 8006ac2:	4606      	mov	r6, r0
 8006ac4:	460d      	mov	r5, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8006ac6:	f016 fa9d 	bl	801d004 <ai_platform_network_init>
  if (!net_ctx) return false;
 8006aca:	4604      	mov	r4, r0
 8006acc:	b178      	cbz	r0, 8006aee <ai_network_init+0x2e>

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
 8006ace:	4629      	mov	r1, r5
 8006ad0:	f7fe fdb0 	bl	8005634 <network_configure_weights>
 8006ad4:	4603      	mov	r3, r0
  ok &= network_configure_activations(net_ctx, params);
 8006ad6:	4629      	mov	r1, r5
 8006ad8:	4620      	mov	r0, r4
  ok &= network_configure_weights(net_ctx, params);
 8006ada:	461c      	mov	r4, r3
  ok &= network_configure_activations(net_ctx, params);
 8006adc:	f7ff facc 	bl	8006078 <network_configure_activations>
 8006ae0:	4603      	mov	r3, r0

  ok &= ai_platform_network_post_init(network);
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	401c      	ands	r4, r3
 8006ae6:	f016 fc1f 	bl	801d328 <ai_platform_network_post_init>
 8006aea:	b2e4      	uxtb	r4, r4
 8006aec:	4020      	ands	r0, r4

  return ok;
}
 8006aee:	bd70      	pop	{r4, r5, r6, pc}

08006af0 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8006af0:	f016 bd30 	b.w	801d554 <ai_platform_network_process>

08006af4 <ai_network_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_activations_buffer_get(const ai_handle ptr)
{
 8006af4:	b410      	push	{r4}
  ai_buffer buf = AI_BUFFER_INIT(
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_ACTIVATIONS_SIZE, 1, AI_NETWORK_DATA_ACTIVATIONS_COUNT),
    AI_NETWORK_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 8006af6:	2200      	movs	r2, #0
 8006af8:	4c08      	ldr	r4, [pc, #32]	; (8006b1c <ai_network_data_activations_buffer_get+0x28>)
{
 8006afa:	b085      	sub	sp, #20
  return buf;
 8006afc:	6004      	str	r4, [r0, #0]
 8006afe:	60c2      	str	r2, [r0, #12]
 8006b00:	4c07      	ldr	r4, [pc, #28]	; (8006b20 <ai_network_data_activations_buffer_get+0x2c>)
 8006b02:	f8c0 d018 	str.w	sp, [r0, #24]
 8006b06:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8006b0a:	f240 4201 	movw	r2, #1025	; 0x401
 8006b0e:	e9c0 4204 	strd	r4, r2, [r0, #16]
}
 8006b12:	b005      	add	sp, #20
 8006b14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	00040440 	.word	0x00040440
 8006b20:	00038200 	.word	0x00038200

08006b24 <ai_network_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_weights_buffer_get(const ai_handle ptr)
{
 8006b24:	b410      	push	{r4}
  ai_buffer buf = AI_BUFFER_INIT(
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_WEIGHTS_SIZE, 1, AI_NETWORK_DATA_WEIGHTS_COUNT),
    AI_NETWORK_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 8006b26:	2200      	movs	r2, #0
 8006b28:	4c08      	ldr	r4, [pc, #32]	; (8006b4c <ai_network_data_weights_buffer_get+0x28>)
{
 8006b2a:	b085      	sub	sp, #20
  return buf;
 8006b2c:	6004      	str	r4, [r0, #0]
 8006b2e:	60c2      	str	r2, [r0, #12]
 8006b30:	4c07      	ldr	r4, [pc, #28]	; (8006b50 <ai_network_data_weights_buffer_get+0x2c>)
 8006b32:	f8c0 d018 	str.w	sp, [r0, #24]
 8006b36:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8006b3a:	f240 4201 	movw	r2, #1025	; 0x401
 8006b3e:	e9c0 4204 	strd	r4, r2, [r0, #16]
}
 8006b42:	b005      	add	sp, #20
 8006b44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	40040440 	.word	0x40040440
 8006b50:	00065b74 	.word	0x00065b74

08006b54 <ai_network_data_weights_get>:
    AI_PTR(AI_MAGIC_MARKER)
  };

  return AI_HANDLE_PTR(s_network_weights_table);

}
 8006b54:	4800      	ldr	r0, [pc, #0]	; (8006b58 <ai_network_data_weights_get+0x4>)
 8006b56:	4770      	bx	lr
 8006b58:	08098958 	.word	0x08098958

08006b5c <SD_initialize>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
  Stat = STA_NOINIT;
 8006b5c:	2301      	movs	r3, #1
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 8006b5e:	2000      	movs	r0, #0
{
 8006b60:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8006b62:	4c07      	ldr	r4, [pc, #28]	; (8006b80 <SD_initialize+0x24>)
 8006b64:	7023      	strb	r3, [r4, #0]
  Stat = STA_NOINIT;
 8006b66:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 8006b68:	f004 fe08 	bl	800b77c <BSP_SD_GetCardState>
 8006b6c:	b918      	cbnz	r0, 8006b76 <SD_initialize+0x1a>
    Stat &= ~STA_NOINIT;
 8006b6e:	7823      	ldrb	r3, [r4, #0]
 8006b70:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006b74:	7023      	strb	r3, [r4, #0]
  return Stat;
 8006b76:	7823      	ldrb	r3, [r4, #0]
 8006b78:	b2db      	uxtb	r3, r3
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 8006b7a:	7023      	strb	r3, [r4, #0]
#endif
  return Stat;
 8006b7c:	7820      	ldrb	r0, [r4, #0]
}
 8006b7e:	bd10      	pop	{r4, pc}
 8006b80:	20007630 	.word	0x20007630

08006b84 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006b84:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8006b86:	2301      	movs	r3, #1
 8006b88:	4c05      	ldr	r4, [pc, #20]	; (8006ba0 <SD_status+0x1c>)
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 8006b8a:	2000      	movs	r0, #0
  Stat = STA_NOINIT;
 8006b8c:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 8006b8e:	f004 fdf5 	bl	800b77c <BSP_SD_GetCardState>
 8006b92:	b918      	cbnz	r0, 8006b9c <SD_status+0x18>
    Stat &= ~STA_NOINIT;
 8006b94:	7823      	ldrb	r3, [r4, #0]
 8006b96:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006b9a:	7023      	strb	r3, [r4, #0]
  return Stat;
 8006b9c:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 8006b9e:	bd10      	pop	{r4, pc}
 8006ba0:	20007630 	.word	0x20007630

08006ba4 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006ba4:	b508      	push	{r3, lr}
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks(0, (uint32_t*)buff,
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	f004 fdbc 	bl	800b724 <BSP_SD_ReadBlocks>
 8006bac:	b108      	cbz	r0, 8006bb2 <SD_read+0xe>
  DRESULT res = RES_ERROR;
 8006bae:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
 8006bb0:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState(0) != SD_TRANSFER_OK)
 8006bb2:	2000      	movs	r0, #0
 8006bb4:	f004 fde2 	bl	800b77c <BSP_SD_GetCardState>
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d0f9      	beq.n	8006bb0 <SD_read+0xc>
 8006bbc:	2000      	movs	r0, #0
 8006bbe:	f004 fddd 	bl	800b77c <BSP_SD_GetCardState>
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	d1f5      	bne.n	8006bb2 <SD_read+0xe>
 8006bc6:	e7f3      	b.n	8006bb0 <SD_read+0xc>

08006bc8 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006bc8:	4b19      	ldr	r3, [pc, #100]	; (8006c30 <SD_ioctl+0x68>)
{
 8006bca:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006bcc:	7818      	ldrb	r0, [r3, #0]
{
 8006bce:	b08b      	sub	sp, #44	; 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006bd0:	f010 0401 	ands.w	r4, r0, #1
 8006bd4:	d106      	bne.n	8006be4 <SD_ioctl+0x1c>
 8006bd6:	4615      	mov	r5, r2

  switch (cmd)
 8006bd8:	2903      	cmp	r1, #3
 8006bda:	d827      	bhi.n	8006c2c <SD_ioctl+0x64>
 8006bdc:	e8df f001 	tbb	[pc, r1]
 8006be0:	1c130a06 	.word	0x1c130a06
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006be4:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 8006be6:	4620      	mov	r0, r4
 8006be8:	b00b      	add	sp, #44	; 0x2c
 8006bea:	bd30      	pop	{r4, r5, pc}
    res = RES_OK;
 8006bec:	460c      	mov	r4, r1
}
 8006bee:	4620      	mov	r0, r4
 8006bf0:	b00b      	add	sp, #44	; 0x2c
 8006bf2:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(0, &CardInfo);
 8006bf4:	a901      	add	r1, sp, #4
 8006bf6:	2000      	movs	r0, #0
 8006bf8:	f004 fdcc 	bl	800b794 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006bfc:	9b07      	ldr	r3, [sp, #28]
}
 8006bfe:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006c00:	602b      	str	r3, [r5, #0]
}
 8006c02:	b00b      	add	sp, #44	; 0x2c
 8006c04:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(0, &CardInfo);
 8006c06:	a901      	add	r1, sp, #4
 8006c08:	2000      	movs	r0, #0
 8006c0a:	f004 fdc3 	bl	800b794 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006c0e:	9b08      	ldr	r3, [sp, #32]
}
 8006c10:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006c12:	802b      	strh	r3, [r5, #0]
}
 8006c14:	b00b      	add	sp, #44	; 0x2c
 8006c16:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(0, &CardInfo);
 8006c18:	a901      	add	r1, sp, #4
 8006c1a:	2000      	movs	r0, #0
 8006c1c:	f004 fdba 	bl	800b794 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006c20:	9b08      	ldr	r3, [sp, #32]
}
 8006c22:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006c24:	0a5b      	lsrs	r3, r3, #9
 8006c26:	602b      	str	r3, [r5, #0]
}
 8006c28:	b00b      	add	sp, #44	; 0x2c
 8006c2a:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
 8006c2c:	2404      	movs	r4, #4
 8006c2e:	e7da      	b.n	8006be6 <SD_ioctl+0x1e>
 8006c30:	20007630 	.word	0x20007630

08006c34 <SD_write>:
{
 8006c34:	b508      	push	{r3, lr}
  if(BSP_SD_WriteBlocks(0, (uint32_t*)buff,
 8006c36:	2000      	movs	r0, #0
 8006c38:	f004 fd8a 	bl	800b750 <BSP_SD_WriteBlocks>
 8006c3c:	b108      	cbz	r0, 8006c42 <SD_write+0xe>
  DRESULT res = RES_ERROR;
 8006c3e:	2001      	movs	r0, #1
}
 8006c40:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState(0) != SD_TRANSFER_OK)
 8006c42:	2000      	movs	r0, #0
 8006c44:	f004 fd9a 	bl	800b77c <BSP_SD_GetCardState>
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	d0f9      	beq.n	8006c40 <SD_write+0xc>
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	f004 fd95 	bl	800b77c <BSP_SD_GetCardState>
 8006c52:	2800      	cmp	r0, #0
 8006c54:	d1f5      	bne.n	8006c42 <SD_write+0xe>
 8006c56:	e7f3      	b.n	8006c40 <SD_write+0xc>

08006c58 <HAL_MspInit>:
/**
 * @brief  Initializes the Global MSP.
 * @param  None
 * @retval None
 */
void HAL_MspInit(void) {}
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop

08006c5c <HAL_RNG_MspInit>:
 *           - Peripheral's clock enable
 * @param hrng: RNG handle pointer
 * @retval None
 */
void HAL_RNG_MspInit(RNG_HandleTypeDef *hrng)
{
 8006c5c:	b500      	push	{lr}
 8006c5e:	b0b3      	sub	sp, #204	; 0xcc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  /*Select PLL output as RNG clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8006c60:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 8006c64:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8006c68:	a802      	add	r0, sp, #8
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8006c6a:	9202      	str	r2, [sp, #8]
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 8006c6c:	9322      	str	r3, [sp, #136]	; 0x88
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8006c6e:	f009 fbc3 	bl	80103f8 <HAL_RCCEx_PeriphCLKConfig>

  /* RNG Peripheral clock enable */
  __HAL_RCC_RNG_CLK_ENABLE();
 8006c72:	4b08      	ldr	r3, [pc, #32]	; (8006c94 <HAL_RNG_MspInit+0x38>)
 8006c74:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8006c78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c7c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8006c80:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c88:	9301      	str	r3, [sp, #4]
 8006c8a:	9b01      	ldr	r3, [sp, #4]
}
 8006c8c:	b033      	add	sp, #204	; 0xcc
 8006c8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c92:	bf00      	nop
 8006c94:	58024400 	.word	0x58024400

08006c98 <HAL_RNG_MspDeInit>:
 * @retval None
 */
void HAL_RNG_MspDeInit(RNG_HandleTypeDef *hrng)
{
  /* Enable RNG reset state */
  __HAL_RCC_RNG_FORCE_RESET();
 8006c98:	4b06      	ldr	r3, [pc, #24]	; (8006cb4 <HAL_RNG_MspDeInit+0x1c>)
 8006c9a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006c9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ca2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Release RNG from reset state */
  __HAL_RCC_RNG_RELEASE_RESET();
 8006ca6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8006cb2:	4770      	bx	lr
 8006cb4:	58024400 	.word	0x58024400

08006cb8 <HAL_UART_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8006cbc:	4d52      	ldr	r5, [pc, #328]	; (8006e08 <HAL_UART_MspInit+0x150>)
  USARTx_RX_GPIO_CLK_ENABLE();

  /* Select SysClk as source of USART1 clocks */
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART16;
 8006cbe:	f04f 0801 	mov.w	r8, #1
{
 8006cc2:	b0bb      	sub	sp, #236	; 0xec
  RCC_PeriphClkInit.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8006cc4:	2400      	movs	r4, #0
  USARTx_TX_GPIO_CLK_ENABLE();
 8006cc6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
{
 8006cca:	4607      	mov	r7, r0
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit);
 8006ccc:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8006cce:	f44f 6980 	mov.w	r9, #1024	; 0x400
  USARTx_TX_GPIO_CLK_ENABLE();
 8006cd2:	ea43 0308 	orr.w	r3, r3, r8

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);

  /*##-3- Configure the DMA ##################################################*/
  /* Configure the DMA handler for Transmission process */
  hdma_tx.Instance                 = USARTx_TX_DMA_STREAM;
 8006cd6:	4e4d      	ldr	r6, [pc, #308]	; (8006e0c <HAL_UART_MspInit+0x154>)
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
  hdma_tx.Init.Mode                = DMA_NORMAL;
  hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
  hdma_tx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  hdma_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  hdma_tx.Init.MemBurst            = DMA_MBURST_INC4;
 8006cd8:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
  hdma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8006cdc:	f44f 1a00 	mov.w	sl, #2097152	; 0x200000
  USARTx_TX_GPIO_CLK_ENABLE();
 8006ce0:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8006ce4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8006ce8:	ea03 0308 	and.w	r3, r3, r8
 8006cec:	9300      	str	r3, [sp, #0]
 8006cee:	9b00      	ldr	r3, [sp, #0]
  USARTx_RX_GPIO_CLK_ENABLE();
 8006cf0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8006cf4:	ea43 0308 	orr.w	r3, r3, r8
 8006cf8:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8006cfc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART16;
 8006d00:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  USARTx_RX_GPIO_CLK_ENABLE();
 8006d04:	ea03 0308 	and.w	r3, r3, r8
  RCC_PeriphClkInit.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8006d08:	9429      	str	r4, [sp, #164]	; 0xa4
  USARTx_RX_GPIO_CLK_ENABLE();
 8006d0a:	9301      	str	r3, [sp, #4]
 8006d0c:	9b01      	ldr	r3, [sp, #4]
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit);
 8006d0e:	f009 fb73 	bl	80103f8 <HAL_RCCEx_PeriphCLKConfig>
  USARTx_CLK_ENABLE();
 8006d12:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8006d16:	f44f 7200 	mov.w	r2, #512	; 0x200
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8006d1a:	483d      	ldr	r0, [pc, #244]	; (8006e10 <HAL_UART_MspInit+0x158>)
  USARTx_CLK_ENABLE();
 8006d1c:	f043 0310 	orr.w	r3, r3, #16
 8006d20:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
 8006d24:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 8006d28:	f003 0310 	and.w	r3, r3, #16
 8006d2c:	9302      	str	r3, [sp, #8]
 8006d2e:	9b02      	ldr	r3, [sp, #8]
  DMAx_CLK_ENABLE();
 8006d30:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 8006d34:	ea43 0308 	orr.w	r3, r3, r8
 8006d38:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 8006d3c:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8006d40:	2507      	movs	r5, #7
  DMAx_CLK_ENABLE();
 8006d42:	ea03 0308 	and.w	r3, r3, r8
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8006d46:	9508      	str	r5, [sp, #32]
  DMAx_CLK_ENABLE();
 8006d48:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8006d4a:	2302      	movs	r3, #2
  DMAx_CLK_ENABLE();
 8006d4c:	9903      	ldr	r1, [sp, #12]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8006d4e:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8006d50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d54:	2201      	movs	r2, #1
 8006d56:	2303      	movs	r3, #3
 8006d58:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8006d5c:	f007 fa80 	bl	800e260 <HAL_GPIO_Init>
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8006d60:	a904      	add	r1, sp, #16
 8006d62:	482b      	ldr	r0, [pc, #172]	; (8006e10 <HAL_UART_MspInit+0x158>)
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8006d64:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8006d66:	f8cd 9010 	str.w	r9, [sp, #16]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8006d6a:	f007 fa79 	bl	800e260 <HAL_GPIO_Init>
  hdma_tx.Init.MemBurst            = DMA_MBURST_INC4;
 8006d6e:	2303      	movs	r3, #3
  hdma_tx.Init.Request             = USARTx_TX_DMA_CHANNEL;
 8006d70:	222a      	movs	r2, #42	; 0x2a

  HAL_DMA_Init(&hdma_tx);
 8006d72:	4630      	mov	r0, r6

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);

  /* Configure the DMA handler for reception process */
  hdma_rx.Instance                 = USARTx_RX_DMA_STREAM;
 8006d74:	4d27      	ldr	r5, [pc, #156]	; (8006e14 <HAL_UART_MspInit+0x15c>)
  hdma_tx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8006d76:	6274      	str	r4, [r6, #36]	; 0x24
  hdma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8006d78:	f8c6 a030 	str.w	sl, [r6, #48]	; 0x30
  hdma_tx.Init.MemBurst            = DMA_MBURST_INC4;
 8006d7c:	e9c6 3b0a 	strd	r3, fp, [r6, #40]	; 0x28
  hdma_tx.Init.Request             = USARTx_TX_DMA_CHANNEL;
 8006d80:	4b25      	ldr	r3, [pc, #148]	; (8006e18 <HAL_UART_MspInit+0x160>)
 8006d82:	e9c6 3200 	strd	r3, r2, [r6]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8006d86:	2240      	movs	r2, #64	; 0x40
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8006d88:	e9c6 4903 	strd	r4, r9, [r6, #12]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8006d8c:	60b2      	str	r2, [r6, #8]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8006d8e:	e9c6 4405 	strd	r4, r4, [r6, #20]
  hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8006d92:	e9c6 4407 	strd	r4, r4, [r6, #28]
  HAL_DMA_Init(&hdma_tx);
 8006d96:	f005 f8fb 	bl	800bf90 <HAL_DMA_Init>
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
  hdma_rx.Init.Mode                = DMA_NORMAL;
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
  hdma_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006d9a:	2303      	movs	r3, #3
  hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;

  HAL_DMA_Init(&hdma_rx);
 8006d9c:	4628      	mov	r0, r5
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8006d9e:	677e      	str	r6, [r7, #116]	; 0x74
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8006da0:	f8c5 9010 	str.w	r9, [r5, #16]
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8006da4:	f8c5 a030 	str.w	sl, [r5, #48]	; 0x30
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8006da8:	63b7      	str	r7, [r6, #56]	; 0x38
  hdma_rx.Init.Mode                = DMA_NORMAL;
 8006daa:	61ec      	str	r4, [r5, #28]
  hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
 8006dac:	e9c5 3b0a 	strd	r3, fp, [r5, #40]	; 0x28
  hdma_rx.Instance                 = USARTx_RX_DMA_STREAM;
 8006db0:	4b1a      	ldr	r3, [pc, #104]	; (8006e1c <HAL_UART_MspInit+0x164>)
 8006db2:	602b      	str	r3, [r5, #0]
  hdma_rx.Init.Request             = USARTx_RX_DMA_CHANNEL;
 8006db4:	2329      	movs	r3, #41	; 0x29
 8006db6:	606b      	str	r3, [r5, #4]
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8006db8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8006dbc:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8006dc0:	e9c5 3408 	strd	r3, r4, [r5, #32]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8006dc4:	e9c5 4405 	strd	r4, r4, [r5, #20]
  HAL_DMA_Init(&hdma_rx);
 8006dc8:	f005 f8e2 	bl	800bf90 <HAL_DMA_Init>
  /* Associate the initialized DMA handle to the the UART handle */
  __HAL_LINKDMA(huart, hdmarx, hdma_rx);

  /*##-4- Configure the NVIC for DMA #########################################*/
  /* NVIC configuration for DMA transfer complete interrupt (USARTx_TX) */
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 8006dcc:	4642      	mov	r2, r8
 8006dce:	4621      	mov	r1, r4
 8006dd0:	202f      	movs	r0, #47	; 0x2f
  __HAL_LINKDMA(huart, hdmarx, hdma_rx);
 8006dd2:	67bd      	str	r5, [r7, #120]	; 0x78
 8006dd4:	63af      	str	r7, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 8006dd6:	f004 fd89 	bl	800b8ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8006dda:	202f      	movs	r0, #47	; 0x2f
 8006ddc:	f004 fdc4 	bl	800b968 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for DMA transfer complete interrupt (USARTx_RX) */
  HAL_NVIC_SetPriority(USARTx_DMA_RX_IRQn, 0, 0);
 8006de0:	4622      	mov	r2, r4
 8006de2:	4621      	mov	r1, r4
 8006de4:	2010      	movs	r0, #16
 8006de6:	f004 fd81 	bl	800b8ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_DMA_RX_IRQn);
 8006dea:	2010      	movs	r0, #16
 8006dec:	f004 fdbc 	bl	800b968 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for USART, to catch the TX complete */
  HAL_NVIC_SetPriority(USARTx_IRQn, 0, 1);
 8006df0:	4642      	mov	r2, r8
 8006df2:	4621      	mov	r1, r4
 8006df4:	2025      	movs	r0, #37	; 0x25
 8006df6:	f004 fd79 	bl	800b8ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8006dfa:	2025      	movs	r0, #37	; 0x25
 8006dfc:	f004 fdb4 	bl	800b968 <HAL_NVIC_EnableIRQ>
}
 8006e00:	b03b      	add	sp, #236	; 0xec
 8006e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e06:	bf00      	nop
 8006e08:	58024400 	.word	0x58024400
 8006e0c:	20009370 	.word	0x20009370
 8006e10:	58020000 	.word	0x58020000
 8006e14:	200092f8 	.word	0x200092f8
 8006e18:	400200b8 	.word	0x400200b8
 8006e1c:	40020088 	.word	0x40020088

08006e20 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM8)
 8006e20:	4b0a      	ldr	r3, [pc, #40]	; (8006e4c <HAL_TIM_PWM_MspInit+0x2c>)
 8006e22:	6802      	ldr	r2, [r0, #0]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d000      	beq.n	8006e2a <HAL_TIM_PWM_MspInit+0xa>
 8006e28:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006e2a:	4b09      	ldr	r3, [pc, #36]	; (8006e50 <HAL_TIM_PWM_MspInit+0x30>)
{
 8006e2c:	b082      	sub	sp, #8
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006e2e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006e32:	f042 0202 	orr.w	r2, r2, #2
 8006e36:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8006e3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e3e:	f003 0302 	and.w	r3, r3, #2
 8006e42:	9301      	str	r3, [sp, #4]
 8006e44:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006e46:	b002      	add	sp, #8
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	40010400 	.word	0x40010400
 8006e50:	58024400 	.word	0x58024400

08006e54 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM13)
 8006e54:	4b0a      	ldr	r3, [pc, #40]	; (8006e80 <HAL_TIM_Base_MspInit+0x2c>)
 8006e56:	6802      	ldr	r2, [r0, #0]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d000      	beq.n	8006e5e <HAL_TIM_Base_MspInit+0xa>
 8006e5c:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8006e5e:	4b09      	ldr	r3, [pc, #36]	; (8006e84 <HAL_TIM_Base_MspInit+0x30>)
{
 8006e60:	b082      	sub	sp, #8
    __HAL_RCC_TIM13_CLK_ENABLE();
 8006e62:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8006e66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e6a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8006e6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e76:	9301      	str	r3, [sp, #4]
 8006e78:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8006e7a:	b002      	add	sp, #8
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	40001c00 	.word	0x40001c00
 8006e84:	58024400 	.word	0x58024400

08006e88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM8)
 8006e88:	4925      	ldr	r1, [pc, #148]	; (8006f20 <HAL_TIM_MspPostInit+0x98>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e8a:	2300      	movs	r3, #0
  if(htim->Instance==TIM8)
 8006e8c:	6802      	ldr	r2, [r0, #0]
{
 8006e8e:	b510      	push	{r4, lr}
  if(htim->Instance==TIM8)
 8006e90:	428a      	cmp	r2, r1
{
 8006e92:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e94:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e98:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8006e9c:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM8)
 8006e9e:	d004      	beq.n	8006eaa <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }
  else if(htim->Instance==TIM13)
 8006ea0:	4b20      	ldr	r3, [pc, #128]	; (8006f24 <HAL_TIM_MspPostInit+0x9c>)
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d01a      	beq.n	8006edc <HAL_TIM_MspPostInit+0x54>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8006ea6:	b008      	add	sp, #32
 8006ea8:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006eaa:	4b1f      	ldr	r3, [pc, #124]	; (8006f28 <HAL_TIM_MspPostInit+0xa0>)
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006eac:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8006eae:	a902      	add	r1, sp, #8
 8006eb0:	481e      	ldr	r0, [pc, #120]	; (8006f2c <HAL_TIM_MspPostInit+0xa4>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006eb2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006eba:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006ec2:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
    GPIO_InitStruct.Pin = ARD_D6_Pin|ARD_D9_Pin;
 8006ec8:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8006f10 <HAL_TIM_MspPostInit+0x88>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = ARD_D6_Pin|ARD_D9_Pin;
 8006ed0:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8006ed4:	f007 f9c4 	bl	800e260 <HAL_GPIO_Init>
}
 8006ed8:	b008      	add	sp, #32
 8006eda:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006edc:	4b12      	ldr	r3, [pc, #72]	; (8006f28 <HAL_TIM_MspPostInit+0xa0>)
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8006ede:	2409      	movs	r4, #9
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8006ee0:	a902      	add	r1, sp, #8
 8006ee2:	4813      	ldr	r0, [pc, #76]	; (8006f30 <HAL_TIM_MspPostInit+0xa8>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006ee4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006ee8:	f042 0220 	orr.w	r2, r2, #32
 8006eec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8006ef4:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006ef6:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 8006efa:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8006f18 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006efe:	9301      	str	r3, [sp, #4]
 8006f00:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 8006f02:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8006f06:	f007 f9ab 	bl	800e260 <HAL_GPIO_Init>
}
 8006f0a:	b008      	add	sp, #32
 8006f0c:	bd10      	pop	{r4, pc}
 8006f0e:	bf00      	nop
 8006f10:	000000c0 	.word	0x000000c0
 8006f14:	00000002 	.word	0x00000002
 8006f18:	00000100 	.word	0x00000100
 8006f1c:	00000002 	.word	0x00000002
 8006f20:	40010400 	.word	0x40010400
 8006f24:	40001c00 	.word	0x40001c00
 8006f28:	58024400 	.word	0x58024400
 8006f2c:	58022400 	.word	0x58022400
 8006f30:	58021400 	.word	0x58021400

08006f34 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop

08006f38 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8006f38:	e7fe      	b.n	8006f38 <HardFault_Handler>
 8006f3a:	bf00      	nop

08006f3c <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8006f3c:	e7fe      	b.n	8006f3c <MemManage_Handler>
 8006f3e:	bf00      	nop

08006f40 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8006f40:	e7fe      	b.n	8006f40 <BusFault_Handler>
 8006f42:	bf00      	nop

08006f44 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8006f44:	e7fe      	b.n	8006f44 <UsageFault_Handler>
 8006f46:	bf00      	nop

08006f48 <SVC_Handler>:
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop

08006f4c <DebugMon_Handler>:
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop

08006f50 <PendSV_Handler>:
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop

08006f54 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8006f54:	f004 bc86 	b.w	800b864 <HAL_IncTick>

08006f58 <DMA2_Stream3_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Stream3_IRQHandler(void)
{
  BSP_CAMERA_DMA_IRQHandler(0);
 8006f58:	2000      	movs	r0, #0
 8006f5a:	f003 bd53 	b.w	800aa04 <BSP_CAMERA_DMA_IRQHandler>
 8006f5e:	bf00      	nop

08006f60 <DCMI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DCMI_IRQHandler(void)
{
   BSP_CAMERA_IRQHandler(0);
 8006f60:	2000      	movs	r0, #0
 8006f62:	f003 bd49 	b.w	800a9f8 <BSP_CAMERA_IRQHandler>
 8006f66:	bf00      	nop

08006f68 <MDMA_IRQHandler>:
  * @param  None
  * @retval None
  */
void MDMA_IRQHandler(void)
{
  HAL_MDMA_IRQHandler(&hmdma);
 8006f68:	4801      	ldr	r0, [pc, #4]	; (8006f70 <MDMA_IRQHandler+0x8>)
 8006f6a:	f008 ba4d 	b.w	800f408 <HAL_MDMA_IRQHandler>
 8006f6e:	bf00      	nop
 8006f70:	20007b68 	.word	0x20007b68

08006f74 <DSI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
  HAL_DSI_IRQHandler(&hlcd_dsi);
 8006f74:	4801      	ldr	r0, [pc, #4]	; (8006f7c <DSI_IRQHandler+0x8>)
 8006f76:	f006 be73 	b.w	800dc60 <HAL_DSI_IRQHandler>
 8006f7a:	bf00      	nop
 8006f7c:	2000a0ac 	.word	0x2000a0ac

08006f80 <DMA2D_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2D_IRQHandler(void)
{
  HAL_DMA2D_IRQHandler(&hlcd_dma2d);
 8006f80:	4801      	ldr	r0, [pc, #4]	; (8006f88 <DMA2D_IRQHandler+0x8>)
 8006f82:	f006 bca7 	b.w	800d8d4 <HAL_DMA2D_IRQHandler>
 8006f86:	bf00      	nop
 8006f88:	2000a044 	.word	0x2000a044

08006f8c <DMA1_Stream5_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA stream
  *         used for USART data transmission
  */
void USARTx_DMA_RX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(App_Context.Test_ContextPtr->UartContext.UartHandle.hdmarx);
 8006f8c:	4b02      	ldr	r3, [pc, #8]	; (8006f98 <DMA1_Stream5_IRQHandler+0xc>)
 8006f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f90:	f8d3 05b4 	ldr.w	r0, [r3, #1460]	; 0x5b4
 8006f94:	f005 bf8a 	b.w	800ceac <HAL_DMA_IRQHandler>
 8006f98:	20007af0 	.word	0x20007af0

08006f9c <DMA1_Stream7_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA stream
  *         used for USART data reception
  */
void USARTx_DMA_TX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(App_Context.Test_ContextPtr->UartContext.UartHandle.hdmatx);
 8006f9c:	4b02      	ldr	r3, [pc, #8]	; (8006fa8 <DMA1_Stream7_IRQHandler+0xc>)
 8006f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa0:	f8d3 05b0 	ldr.w	r0, [r3, #1456]	; 0x5b0
 8006fa4:	f005 bf82 	b.w	800ceac <HAL_DMA_IRQHandler>
 8006fa8:	20007af0 	.word	0x20007af0

08006fac <USART1_IRQHandler>:
  * @note   This function is redefined in "main.h" and related to DMA
  *         used for USART data transmission
  */
void USARTx_IRQHandler(void)
{
  HAL_UART_IRQHandler(&App_Context.Test_ContextPtr->UartContext.UartHandle);
 8006fac:	4b02      	ldr	r3, [pc, #8]	; (8006fb8 <USART1_IRQHandler+0xc>)
 8006fae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006fb0:	f200 503c 	addw	r0, r0, #1340	; 0x53c
 8006fb4:	f00c ba10 	b.w	80133d8 <HAL_UART_IRQHandler>
 8006fb8:	20007af0 	.word	0x20007af0

08006fbc <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hlcd_ltdc);
 8006fbc:	4801      	ldr	r0, [pc, #4]	; (8006fc4 <LTDC_IRQHandler+0x8>)
 8006fbe:	f007 bfdd 	b.w	800ef7c <HAL_LTDC_IRQHandler>
 8006fc2:	bf00      	nop
 8006fc4:	2000a0c8 	.word	0x2000a0c8

08006fc8 <SystemInit>:
 */
void SystemInit(void)
{
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8006fc8:	498d      	ldr	r1, [pc, #564]	; (8007200 <SystemInit+0x238>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006fca:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 8006fcc:	4b8d      	ldr	r3, [pc, #564]	; (8007204 <SystemInit+0x23c>)

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006fce:	488e      	ldr	r0, [pc, #568]	; (8007208 <SystemInit+0x240>)
{
 8006fd0:	b4f0      	push	{r4, r5, r6, r7}
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8006fd2:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88
{
 8006fd6:	b082      	sub	sp, #8

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006fd8:	4d8c      	ldr	r5, [pc, #560]	; (800720c <SystemInit+0x244>)
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8006fda:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000
 8006fde:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 8006fe2:	690c      	ldr	r4, [r1, #16]
 8006fe4:	f044 0404 	orr.w	r4, r4, #4
 8006fe8:	610c      	str	r4, [r1, #16]
  EXTI_D2->EMR3 |= 0x4000UL;
 8006fea:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  RCC->CR |= RCC_CR_HSION;
 8006fee:	6819      	ldr	r1, [r3, #0]
 8006ff0:	f041 0101 	orr.w	r1, r1, #1
 8006ff4:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8006ff6:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8006ff8:	6819      	ldr	r1, [r3, #0]
 8006ffa:	4008      	ands	r0, r1
 8006ffc:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 8006ffe:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8007000:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8007002:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 8007004:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
 8007006:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
 8007008:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 800700a:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
 800700c:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 800700e:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
 8007010:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8007012:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8007014:	6819      	ldr	r1, [r3, #0]
 8007016:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800701a:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 800701c:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 800701e:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
  if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8007022:	4b7b      	ldr	r3, [pc, #492]	; (8007210 <SystemInit+0x248>)
  EXTI_D2->EMR3 |= 0x4000UL;
 8007024:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007028:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
  if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800702c:	682a      	ldr	r2, [r5, #0]
 800702e:	4013      	ands	r3, r2
 8007030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007034:	d203      	bcs.n	800703e <SystemInit+0x76>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
 8007036:	4b77      	ldr	r3, [pc, #476]	; (8007214 <SystemInit+0x24c>)
 8007038:	2201      	movs	r2, #1
 800703a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 * @param  None
 * @retval None
 */
void SystemInit_ExtMemCtl(void)
{
  __IO uint32_t tmp = 0;
 800703e:	2300      	movs	r3, #0
  register uint32_t tmpreg = 0, timeout = 0xFFFF;
  register __IO uint32_t index;

  /* Enable GPIOD, GPIOE, GPIOF, GPIOG, GPIOH and GPIOI interface
      clock */
  RCC->AHB4ENR |= 0x000001F8;
 8007040:	4d70      	ldr	r5, [pc, #448]	; (8007204 <SystemInit+0x23c>)

  /* Delay after an RCC peripheral clock enabling */
  tmp = READ_BIT(RCC->AHB4ENR, RCC_AHB4ENR_GPIOEEN);

  /* Connect PDx pins to FMC Alternate function */
  GPIOD->AFR[0] = 0x000000CC;
 8007042:	4975      	ldr	r1, [pc, #468]	; (8007218 <SystemInit+0x250>)
  /* Configure PDx pins in Pull-up */
  GPIOD->PUPDR = 0x50150005;

  /* Connect PEx pins to FMC Alternate function */
  GPIOE->AFR[0] = 0xC00000CC;
  GPIOE->AFR[1] = 0xCCCCCCCC;
 8007044:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
  __IO uint32_t tmp = 0;
 8007048:	9300      	str	r3, [sp, #0]
  RCC->AHB4ENR |= 0x000001F8;
 800704a:	f8d5 00e0 	ldr.w	r0, [r5, #224]	; 0xe0
  GPIOE->AFR[0] = 0xC00000CC;
 800704e:	4a73      	ldr	r2, [pc, #460]	; (800721c <SystemInit+0x254>)
  RCC->AHB4ENR |= 0x000001F8;
 8007050:	f440 70fc 	orr.w	r0, r0, #504	; 0x1f8
  GPIOE->OTYPER = 0x00000000;
  /* Configure PEx pins in Pull-up */
  GPIOE->PUPDR = 0x55554005;

  /* Connect PFx pins to FMC Alternate function */
  GPIOF->AFR[0] = 0x00CCCCCC;
 8007054:	4c72      	ldr	r4, [pc, #456]	; (8007220 <SystemInit+0x258>)
 8007056:	4f73      	ldr	r7, [pc, #460]	; (8007224 <SystemInit+0x25c>)
  RCC->AHB4ENR |= 0x000001F8;
 8007058:	f8c5 00e0 	str.w	r0, [r5, #224]	; 0xe0
  tmp = READ_BIT(RCC->AHB4ENR, RCC_AHB4ENR_GPIOEEN);
 800705c:	f8d5 00e0 	ldr.w	r0, [r5, #224]	; 0xe0
  GPIOF->AFR[1] = 0xCCCCC000;
 8007060:	f8df c224 	ldr.w	ip, [pc, #548]	; 8007288 <SystemInit+0x2c0>
  tmp = READ_BIT(RCC->AHB4ENR, RCC_AHB4ENR_GPIOEEN);
 8007064:	f000 0010 	and.w	r0, r0, #16
 8007068:	9000      	str	r0, [sp, #0]
  GPIOD->AFR[0] = 0x000000CC;
 800706a:	20cc      	movs	r0, #204	; 0xcc
 800706c:	6208      	str	r0, [r1, #32]
  GPIOD->AFR[1] = 0xCC000CCC;
 800706e:	486e      	ldr	r0, [pc, #440]	; (8007228 <SystemInit+0x260>)
 8007070:	6248      	str	r0, [r1, #36]	; 0x24
  GPIOD->MODER = 0xAFEAFFFA;
 8007072:	486e      	ldr	r0, [pc, #440]	; (800722c <SystemInit+0x264>)
 8007074:	6008      	str	r0, [r1, #0]
  GPIOD->OSPEEDR = 0xF03F000F;
 8007076:	486e      	ldr	r0, [pc, #440]	; (8007230 <SystemInit+0x268>)
 8007078:	6088      	str	r0, [r1, #8]
  GPIOD->PUPDR = 0x50150005;
 800707a:	486e      	ldr	r0, [pc, #440]	; (8007234 <SystemInit+0x26c>)
  GPIOD->OTYPER = 0x00000000;
 800707c:	604b      	str	r3, [r1, #4]
  GPIOD->PUPDR = 0x50150005;
 800707e:	60c8      	str	r0, [r1, #12]
  GPIOE->AFR[0] = 0xC00000CC;
 8007080:	496d      	ldr	r1, [pc, #436]	; (8007238 <SystemInit+0x270>)
  GPIOF->OTYPER = 0x00000000;
  /* Configure PFx pins in Pull-up */
  GPIOF->PUPDR = 0x55400555;

  /* Connect PGx pins to FMC Alternate function */
  GPIOG->AFR[0] = 0x00CCCCCC;
 8007082:	486e      	ldr	r0, [pc, #440]	; (800723c <SystemInit+0x274>)
  GPIOE->AFR[0] = 0xC00000CC;
 8007084:	6211      	str	r1, [r2, #32]
  GPIOE->MODER = 0xAAAABFFA;
 8007086:	496e      	ldr	r1, [pc, #440]	; (8007240 <SystemInit+0x278>)
  GPIOE->AFR[1] = 0xCCCCCCCC;
 8007088:	6256      	str	r6, [r2, #36]	; 0x24
  GPIOE->MODER = 0xAAAABFFA;
 800708a:	6011      	str	r1, [r2, #0]
  GPIOE->OSPEEDR = 0xFFFFC00F;
 800708c:	496d      	ldr	r1, [pc, #436]	; (8007244 <SystemInit+0x27c>)
 800708e:	6091      	str	r1, [r2, #8]
  GPIOE->PUPDR = 0x55554005;
 8007090:	496d      	ldr	r1, [pc, #436]	; (8007248 <SystemInit+0x280>)
  GPIOE->OTYPER = 0x00000000;
 8007092:	6053      	str	r3, [r2, #4]
  GPIOE->PUPDR = 0x55554005;
 8007094:	60d1      	str	r1, [r2, #12]
  GPIOH->OTYPER = 0x00000000;
  /* Configure PHx pins in Pull-up */
  GPIOH->PUPDR = 0x55555400;

  /* Connect PIx pins to FMC Alternate function */
  GPIOI->AFR[0] = 0xCCCCCCCC;
 8007096:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  GPIOF->AFR[0] = 0x00CCCCCC;
 800709a:	6227      	str	r7, [r4, #32]
  GPIOF->AFR[1] = 0xCCCCC000;
 800709c:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
  GPIOF->MODER = 0xAABFFAAA;
 80070a0:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 800728c <SystemInit+0x2c4>
  GPIOH->AFR[0] = 0xCCC00000;
 80070a4:	4969      	ldr	r1, [pc, #420]	; (800724c <SystemInit+0x284>)
  GPIOF->MODER = 0xAABFFAAA;
 80070a6:	f8c4 c000 	str.w	ip, [r4]
  GPIOF->OSPEEDR = 0xFFC00FFF;
 80070aa:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 8007290 <SystemInit+0x2c8>
 80070ae:	f8c4 c008 	str.w	ip, [r4, #8]
  GPIOF->PUPDR = 0x55400555;
 80070b2:	f8df c1e0 	ldr.w	ip, [pc, #480]	; 8007294 <SystemInit+0x2cc>
  GPIOF->OTYPER = 0x00000000;
 80070b6:	6063      	str	r3, [r4, #4]
  GPIOF->PUPDR = 0x55400555;
 80070b8:	f8c4 c00c 	str.w	ip, [r4, #12]
  GPIOG->AFR[1] = 0xC000000C;
 80070bc:	4c64      	ldr	r4, [pc, #400]	; (8007250 <SystemInit+0x288>)
  GPIOG->AFR[0] = 0x00CCCCCC;
 80070be:	6207      	str	r7, [r0, #32]
  GPIOG->AFR[1] = 0xC000000C;
 80070c0:	6244      	str	r4, [r0, #36]	; 0x24
  GPIOG->MODER = 0xBFFEFAAA;
 80070c2:	f5a4 3482 	sub.w	r4, r4, #66560	; 0x10400
 80070c6:	f5a4 74b1 	sub.w	r4, r4, #354	; 0x162
 80070ca:	6004      	str	r4, [r0, #0]
  GPIOG->OSPEEDR = 0xC0030FFF;
 80070cc:	f504 2482 	add.w	r4, r4, #266240	; 0x41000
 80070d0:	f204 5455 	addw	r4, r4, #1365	; 0x555
 80070d4:	6084      	str	r4, [r0, #8]
  GPIOG->PUPDR = 0x40010555;
 80070d6:	4c5f      	ldr	r4, [pc, #380]	; (8007254 <SystemInit+0x28c>)
  GPIOG->OTYPER = 0x00000000;
 80070d8:	6043      	str	r3, [r0, #4]
  GPIOG->PUPDR = 0x40010555;
 80070da:	60c4      	str	r4, [r0, #12]
    SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2
    ReadBurst          = FMC_SDRAM_RBURST_ENABLE
    ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0*/

  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
  FMC_Bank5_6_R->SDCR[1] = 0x00000165;
 80070dc:	f240 1465 	movw	r4, #357	; 0x165
  GPIOH->AFR[0] = 0xCCC00000;
 80070e0:	485d      	ldr	r0, [pc, #372]	; (8007258 <SystemInit+0x290>)
 80070e2:	6208      	str	r0, [r1, #32]
  GPIOH->MODER = 0xAAAAABFF;
 80070e4:	485d      	ldr	r0, [pc, #372]	; (800725c <SystemInit+0x294>)
  GPIOH->AFR[1] = 0xCCCCCCCC;
 80070e6:	624e      	str	r6, [r1, #36]	; 0x24
  GPIOH->MODER = 0xAAAAABFF;
 80070e8:	6008      	str	r0, [r1, #0]
  GPIOH->OSPEEDR = 0xFFFFFC00;
 80070ea:	485d      	ldr	r0, [pc, #372]	; (8007260 <SystemInit+0x298>)
 80070ec:	6088      	str	r0, [r1, #8]
  GPIOH->PUPDR = 0x55555400;
 80070ee:	485d      	ldr	r0, [pc, #372]	; (8007264 <SystemInit+0x29c>)
  GPIOH->OTYPER = 0x00000000;
 80070f0:	604b      	str	r3, [r1, #4]
  GPIOH->PUPDR = 0x55555400;
 80070f2:	60c8      	str	r0, [r1, #12]
  GPIOI->AFR[1] = 0x00000CC0;
 80070f4:	f44f 614c 	mov.w	r1, #3264	; 0xcc0
  GPIOI->MODER = 0xFFEBAAAA;
 80070f8:	485b      	ldr	r0, [pc, #364]	; (8007268 <SystemInit+0x2a0>)
  GPIOI->AFR[0] = 0xCCCCCCCC;
 80070fa:	6216      	str	r6, [r2, #32]
  GPIOI->AFR[1] = 0x00000CC0;
 80070fc:	6251      	str	r1, [r2, #36]	; 0x24
  GPIOI->MODER = 0xFFEBAAAA;
 80070fe:	6010      	str	r0, [r2, #0]
  GPIOI->OSPEEDR = 0x003CFFFF;
 8007100:	495a      	ldr	r1, [pc, #360]	; (800726c <SystemInit+0x2a4>)
  GPIOI->PUPDR = 0x00145555;
 8007102:	485b      	ldr	r0, [pc, #364]	; (8007270 <SystemInit+0x2a8>)
  GPIOI->OSPEEDR = 0x003CFFFF;
 8007104:	6091      	str	r1, [r2, #8]
  GPIOI->OTYPER = 0x00000000;
 8007106:	6053      	str	r3, [r2, #4]
  GPIOI->PUPDR = 0x00145555;
 8007108:	60d0      	str	r0, [r2, #12]
  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 800710a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 800710e:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 8007112:	4958      	ldr	r1, [pc, #352]	; (8007274 <SystemInit+0x2ac>)
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 8007114:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  FMC_Bank5_6_R->SDTR[0] = 0x00105000;
 8007118:	4857      	ldr	r0, [pc, #348]	; (8007278 <SystemInit+0x2b0>)
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 800711a:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;

  /* SDRAM initialization sequence */
  /* Clock enable command */
  FMC_Bank5_6_R->SDCMR = 0x00000009;
 800711e:	2309      	movs	r3, #9
  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 8007120:	640a      	str	r2, [r1, #64]	; 0x40
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;
 8007122:	4a56      	ldr	r2, [pc, #344]	; (800727c <SystemInit+0x2b4>)
  FMC_Bank5_6_R->SDCR[1] = 0x00000165;
 8007124:	644c      	str	r4, [r1, #68]	; 0x44
  FMC_Bank5_6_R->SDTR[0] = 0x00105000;
 8007126:	6488      	str	r0, [r1, #72]	; 0x48
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;
 8007128:	64ca      	str	r2, [r1, #76]	; 0x4c
  FMC_Bank5_6_R->SDCMR = 0x00000009;
 800712a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 800712c:	6d8b      	ldr	r3, [r1, #88]	; 0x58
  while ((tmpreg != 0) && (timeout-- > 0))
 800712e:	f013 0320 	ands.w	r3, r3, #32
 8007132:	d008      	beq.n	8007146 <SystemInit+0x17e>
 8007134:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007138:	e001      	b.n	800713e <SystemInit+0x176>
 800713a:	3a01      	subs	r2, #1
 800713c:	d054      	beq.n	80071e8 <SystemInit+0x220>
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 800713e:	6d8b      	ldr	r3, [r1, #88]	; 0x58
  while ((tmpreg != 0) && (timeout-- > 0))
 8007140:	f013 0320 	ands.w	r3, r3, #32
 8007144:	d1f9      	bne.n	800713a <SystemInit+0x172>
  }

  /* Delay */
  for (index = 0; index < 1000; index++)
 8007146:	9301      	str	r3, [sp, #4]
 8007148:	9b01      	ldr	r3, [sp, #4]
 800714a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800714e:	d253      	bcs.n	80071f8 <SystemInit+0x230>
  while ((tmpreg != 0) && (timeout-- > 0))
 8007150:	2300      	movs	r3, #0
  for (index = 0; index < 1000; index++)
 8007152:	9a01      	ldr	r2, [sp, #4]
 8007154:	3201      	adds	r2, #1
 8007156:	9201      	str	r2, [sp, #4]
 8007158:	9a01      	ldr	r2, [sp, #4]
 800715a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800715e:	d3f8      	bcc.n	8007152 <SystemInit+0x18a>
    ;

  /* PALL command */
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 8007160:	4a44      	ldr	r2, [pc, #272]	; (8007274 <SystemInit+0x2ac>)
 8007162:	210a      	movs	r1, #10
 8007164:	6511      	str	r1, [r2, #80]	; 0x50
  timeout = 0xFFFF;
  while ((tmpreg != 0) && (timeout-- > 0))
 8007166:	b143      	cbz	r3, 800717a <SystemInit+0x1b2>
  while ((tmpreg != 0) && (timeout-- > 0))
 8007168:	f64f 73ff 	movw	r3, #65535	; 0xffff
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 800716c:	4841      	ldr	r0, [pc, #260]	; (8007274 <SystemInit+0x2ac>)
 800716e:	e001      	b.n	8007174 <SystemInit+0x1ac>
  while ((tmpreg != 0) && (timeout-- > 0))
 8007170:	3b01      	subs	r3, #1
 8007172:	d01f      	beq.n	80071b4 <SystemInit+0x1ec>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8007174:	6d82      	ldr	r2, [r0, #88]	; 0x58
  while ((tmpreg != 0) && (timeout-- > 0))
 8007176:	0694      	lsls	r4, r2, #26
 8007178:	d4fa      	bmi.n	8007170 <SystemInit+0x1a8>
  }

  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 800717a:	4b3e      	ldr	r3, [pc, #248]	; (8007274 <SystemInit+0x2ac>)
 800717c:	22eb      	movs	r2, #235	; 0xeb
 800717e:	651a      	str	r2, [r3, #80]	; 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
  }

  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 8007180:	4b3c      	ldr	r3, [pc, #240]	; (8007274 <SystemInit+0x2ac>)
 8007182:	4a3f      	ldr	r2, [pc, #252]	; (8007280 <SystemInit+0x2b8>)
 8007184:	651a      	str	r2, [r3, #80]	; 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
  }
  /* Set refresh count */
  tmpreg = FMC_Bank5_6_R->SDRTR;
 8007186:	4b3b      	ldr	r3, [pc, #236]	; (8007274 <SystemInit+0x2ac>)
  FMC_Bank5_6_R->SDRTR = (tmpreg | (0x00000603 << 1));
 8007188:	f640 4206 	movw	r2, #3078	; 0xc06
  /* Disable write protection */
  tmpreg = FMC_Bank5_6_R->SDCR[1];
  FMC_Bank5_6_R->SDCR[1] = (tmpreg & 0xFFFFFDFF);

  /*FMC controller Enable*/
  FMC_Bank1_R->BTCR[0] |= 0x80000000;
 800718c:	493d      	ldr	r1, [pc, #244]	; (8007284 <SystemInit+0x2bc>)
  tmpreg = FMC_Bank5_6_R->SDRTR;
 800718e:	6d5c      	ldr	r4, [r3, #84]	; 0x54
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007190:	481b      	ldr	r0, [pc, #108]	; (8007200 <SystemInit+0x238>)
  FMC_Bank5_6_R->SDRTR = (tmpreg | (0x00000603 << 1));
 8007192:	4322      	orrs	r2, r4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007194:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  FMC_Bank5_6_R->SDRTR = (tmpreg | (0x00000603 << 1));
 8007198:	655a      	str	r2, [r3, #84]	; 0x54
  tmpreg = FMC_Bank5_6_R->SDCR[1];
 800719a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  FMC_Bank5_6_R->SDCR[1] = (tmpreg & 0xFFFFFDFF);
 800719c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80071a0:	645a      	str	r2, [r3, #68]	; 0x44
  FMC_Bank1_R->BTCR[0] |= 0x80000000;
 80071a2:	680b      	ldr	r3, [r1, #0]
 80071a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071a8:	600b      	str	r3, [r1, #0]

  (void)(tmp);
 80071aa:	9b00      	ldr	r3, [sp, #0]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80071ac:	6084      	str	r4, [r0, #8]
}
 80071ae:	b002      	add	sp, #8
 80071b0:	bcf0      	pop	{r4, r5, r6, r7}
 80071b2:	4770      	bx	lr
  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 80071b4:	22eb      	movs	r2, #235	; 0xeb
 80071b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 80071ba:	492e      	ldr	r1, [pc, #184]	; (8007274 <SystemInit+0x2ac>)
  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 80071bc:	6502      	str	r2, [r0, #80]	; 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
 80071be:	e001      	b.n	80071c4 <SystemInit+0x1fc>
 80071c0:	3b01      	subs	r3, #1
 80071c2:	d005      	beq.n	80071d0 <SystemInit+0x208>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 80071c4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
  while ((tmpreg != 0) && (timeout-- > 0))
 80071c6:	0690      	lsls	r0, r2, #26
 80071c8:	d4fa      	bmi.n	80071c0 <SystemInit+0x1f8>
  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 80071ca:	4b2d      	ldr	r3, [pc, #180]	; (8007280 <SystemInit+0x2b8>)
 80071cc:	650b      	str	r3, [r1, #80]	; 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
 80071ce:	e7da      	b.n	8007186 <SystemInit+0x1be>
  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 80071d0:	4a2b      	ldr	r2, [pc, #172]	; (8007280 <SystemInit+0x2b8>)
 80071d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 80071d6:	4827      	ldr	r0, [pc, #156]	; (8007274 <SystemInit+0x2ac>)
  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 80071d8:	650a      	str	r2, [r1, #80]	; 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
 80071da:	e001      	b.n	80071e0 <SystemInit+0x218>
 80071dc:	3b01      	subs	r3, #1
 80071de:	d0d2      	beq.n	8007186 <SystemInit+0x1be>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 80071e0:	6d82      	ldr	r2, [r0, #88]	; 0x58
  while ((tmpreg != 0) && (timeout-- > 0))
 80071e2:	0692      	lsls	r2, r2, #26
 80071e4:	d5cf      	bpl.n	8007186 <SystemInit+0x1be>
 80071e6:	e7f9      	b.n	80071dc <SystemInit+0x214>
  for (index = 0; index < 1000; index++)
 80071e8:	9201      	str	r2, [sp, #4]
 80071ea:	9a01      	ldr	r2, [sp, #4]
 80071ec:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80071f0:	d3af      	bcc.n	8007152 <SystemInit+0x18a>
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 80071f2:	230a      	movs	r3, #10
 80071f4:	650b      	str	r3, [r1, #80]	; 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
 80071f6:	e7b7      	b.n	8007168 <SystemInit+0x1a0>
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 80071f8:	230a      	movs	r3, #10
 80071fa:	650b      	str	r3, [r1, #80]	; 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
 80071fc:	e7bd      	b.n	800717a <SystemInit+0x1b2>
 80071fe:	bf00      	nop
 8007200:	e000ed00 	.word	0xe000ed00
 8007204:	58024400 	.word	0x58024400
 8007208:	eaf6ed7f 	.word	0xeaf6ed7f
 800720c:	5c001000 	.word	0x5c001000
 8007210:	ffff0000 	.word	0xffff0000
 8007214:	51008000 	.word	0x51008000
 8007218:	58020c00 	.word	0x58020c00
 800721c:	58021000 	.word	0x58021000
 8007220:	58021400 	.word	0x58021400
 8007224:	00cccccc 	.word	0x00cccccc
 8007228:	cc000ccc 	.word	0xcc000ccc
 800722c:	afeafffa 	.word	0xafeafffa
 8007230:	f03f000f 	.word	0xf03f000f
 8007234:	50150005 	.word	0x50150005
 8007238:	c00000cc 	.word	0xc00000cc
 800723c:	58021800 	.word	0x58021800
 8007240:	aaaabffa 	.word	0xaaaabffa
 8007244:	ffffc00f 	.word	0xffffc00f
 8007248:	55554005 	.word	0x55554005
 800724c:	58021c00 	.word	0x58021c00
 8007250:	c000000c 	.word	0xc000000c
 8007254:	40010555 	.word	0x40010555
 8007258:	ccc00000 	.word	0xccc00000
 800725c:	aaaaabff 	.word	0xaaaaabff
 8007260:	fffffc00 	.word	0xfffffc00
 8007264:	55555400 	.word	0x55555400
 8007268:	ffebaaaa 	.word	0xffebaaaa
 800726c:	003cffff 	.word	0x003cffff
 8007270:	00145555 	.word	0x00145555
 8007274:	52004100 	.word	0x52004100
 8007278:	00105000 	.word	0x00105000
 800727c:	01010351 	.word	0x01010351
 8007280:	0004400c 	.word	0x0004400c
 8007284:	52004000 	.word	0x52004000
 8007288:	ccccc000 	.word	0xccccc000
 800728c:	aabffaaa 	.word	0xaabffaaa
 8007290:	ffc00fff 	.word	0xffc00fff
 8007294:	55400555 	.word	0x55400555

08007298 <OTM8009A_DeInit>:
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
  return OTM8009A_ERROR;
}
 8007298:	f04f 30ff 	mov.w	r0, #4294967295
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop

080072a0 <OTM8009A_GetBrightness>:
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
  *Brightness = OTM8009ACtx.Brightness;
 80072a0:	4b02      	ldr	r3, [pc, #8]	; (80072ac <OTM8009A_GetBrightness+0xc>)
  return OTM8009A_OK;  
}
 80072a2:	2000      	movs	r0, #0
  *Brightness = OTM8009ACtx.Brightness;
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	600b      	str	r3, [r1, #0]
}
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	200093e8 	.word	0x200093e8

080072b0 <OTM8009A_GetOrientation>:
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 80072b0:	4b02      	ldr	r3, [pc, #8]	; (80072bc <OTM8009A_GetOrientation+0xc>)
  
  return OTM8009A_OK;
}
 80072b2:	2000      	movs	r0, #0
  *Orientation = OTM8009ACtx.Orientation;
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	600b      	str	r3, [r1, #0]
}
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	200093e8 	.word	0x200093e8

080072c0 <OTM8009A_GetXSize>:
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 80072c0:	4b05      	ldr	r3, [pc, #20]	; (80072d8 <OTM8009A_GetXSize+0x18>)
    *Xsize = OTM8009A_800X480_WIDTH;
    break;
  }
  
  return OTM8009A_OK;
}
 80072c2:	2000      	movs	r0, #0
  switch(OTM8009ACtx.Orientation)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4283      	cmp	r3, r0
 80072c8:	bf14      	ite	ne
 80072ca:	f44f 7348 	movne.w	r3, #800	; 0x320
 80072ce:	f44f 73f0 	moveq.w	r3, #480	; 0x1e0
    *Xsize = OTM8009A_480X800_WIDTH;
 80072d2:	600b      	str	r3, [r1, #0]
}
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	200093e8 	.word	0x200093e8

080072dc <OTM8009A_GetYSize>:
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 80072dc:	4b05      	ldr	r3, [pc, #20]	; (80072f4 <OTM8009A_GetYSize+0x18>)
    *Ysize = OTM8009A_800X480_HEIGHT;
    break;
  }
  
  return OTM8009A_OK;
}
 80072de:	2000      	movs	r0, #0
  switch(OTM8009ACtx.Orientation)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4283      	cmp	r3, r0
 80072e4:	bf14      	ite	ne
 80072e6:	f44f 73f0 	movne.w	r3, #480	; 0x1e0
 80072ea:	f44f 7348 	moveq.w	r3, #800	; 0x320
    *Ysize = OTM8009A_480X800_HEIGHT;
 80072ee:	600b      	str	r3, [r1, #0]
}
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	200093e8 	.word	0x200093e8

080072f8 <OTM8009A_SetCursor>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80072f8:	f04f 30ff 	mov.w	r0, #4294967295
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop

08007300 <OTM8009A_DrawBitmap>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8007300:	f04f 30ff 	mov.w	r0, #4294967295
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop

08007308 <OTM8009A_FillRGBRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8007308:	f04f 30ff 	mov.w	r0, #4294967295
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop

08007310 <OTM8009A_DrawHLine>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8007310:	f04f 30ff 	mov.w	r0, #4294967295
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop

08007318 <OTM8009A_FillRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8007318:	f04f 30ff 	mov.w	r0, #4294967295
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop

08007320 <OTM8009A_SetPixel>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8007320:	f04f 30ff 	mov.w	r0, #4294967295
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop

08007328 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8007328:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800732a:	6884      	ldr	r4, [r0, #8]
 800732c:	8800      	ldrh	r0, [r0, #0]
 800732e:	46a4      	mov	ip, r4
}
 8007330:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007334:	4760      	bx	ip
 8007336:	bf00      	nop

08007338 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8007338:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800733a:	6844      	ldr	r4, [r0, #4]
 800733c:	8800      	ldrh	r0, [r0, #0]
 800733e:	46a4      	mov	ip, r4
}
 8007340:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007344:	4760      	bx	ip
 8007346:	bf00      	nop

08007348 <OTM8009A_Init>:
{
 8007348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800734c:	2300      	movs	r3, #0
 800734e:	f100 0510 	add.w	r5, r0, #16
{
 8007352:	b083      	sub	sp, #12
 8007354:	4606      	mov	r6, r0
 8007356:	460f      	mov	r7, r1
 8007358:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800735a:	4619      	mov	r1, r3
 800735c:	4ada      	ldr	r2, [pc, #872]	; (80076c8 <OTM8009A_Init+0x380>)
 800735e:	4628      	mov	r0, r5
 8007360:	f000 fc64 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8007364:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007366:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8007368:	4ad8      	ldr	r2, [pc, #864]	; (80076cc <OTM8009A_Init+0x384>)
 800736a:	21ff      	movs	r1, #255	; 0xff
 800736c:	4628      	mov	r0, r5
 800736e:	f000 fc5d 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007372:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8007374:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007376:	4ad6      	ldr	r2, [pc, #856]	; (80076d0 <OTM8009A_Init+0x388>)
 8007378:	4619      	mov	r1, r3
 800737a:	4628      	mov	r0, r5
 800737c:	f000 fc56 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8007380:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007382:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8007384:	4ad3      	ldr	r2, [pc, #844]	; (80076d4 <OTM8009A_Init+0x38c>)
 8007386:	21ff      	movs	r1, #255	; 0xff
 8007388:	4628      	mov	r0, r5
 800738a:	f000 fc4f 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800738e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8007390:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007392:	4acf      	ldr	r2, [pc, #828]	; (80076d0 <OTM8009A_Init+0x388>)
 8007394:	4619      	mov	r1, r3
 8007396:	4628      	mov	r0, r5
 8007398:	f000 fc48 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 800739c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800739e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80073a0:	4acd      	ldr	r2, [pc, #820]	; (80076d8 <OTM8009A_Init+0x390>)
 80073a2:	21c4      	movs	r1, #196	; 0xc4
 80073a4:	4628      	mov	r0, r5
 80073a6:	f000 fc41 	bl	8007c2c <otm8009a_write_reg>
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 80073aa:	68f3      	ldr	r3, [r6, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80073ac:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 80073ae:	4798      	blx	r3
 80073b0:	4681      	mov	r9, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80073b2:	68f3      	ldr	r3, [r6, #12]
 80073b4:	4798      	blx	r3
 80073b6:	eba0 0009 	sub.w	r0, r0, r9
 80073ba:	2809      	cmp	r0, #9
 80073bc:	d9f9      	bls.n	80073b2 <OTM8009A_Init+0x6a>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 80073be:	2300      	movs	r3, #0
 80073c0:	4ac6      	ldr	r2, [pc, #792]	; (80076dc <OTM8009A_Init+0x394>)
 80073c2:	4628      	mov	r0, r5
 80073c4:	4619      	mov	r1, r3
 80073c6:	f000 fc31 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80073ca:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 80073cc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80073ce:	4ac4      	ldr	r2, [pc, #784]	; (80076e0 <OTM8009A_Init+0x398>)
 80073d0:	21c4      	movs	r1, #196	; 0xc4
 80073d2:	4628      	mov	r0, r5
 80073d4:	f000 fc2a 	bl	8007c2c <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 80073d8:	68f3      	ldr	r3, [r6, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80073da:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 80073dc:	4798      	blx	r3
 80073de:	4681      	mov	r9, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80073e0:	68f3      	ldr	r3, [r6, #12]
 80073e2:	4798      	blx	r3
 80073e4:	eba0 0009 	sub.w	r0, r0, r9
 80073e8:	2809      	cmp	r0, #9
 80073ea:	d9f9      	bls.n	80073e0 <OTM8009A_Init+0x98>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80073ec:	2300      	movs	r3, #0
 80073ee:	4abd      	ldr	r2, [pc, #756]	; (80076e4 <OTM8009A_Init+0x39c>)
 80073f0:	4628      	mov	r0, r5
 80073f2:	4619      	mov	r1, r3
 80073f4:	f000 fc1a 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80073f8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80073fa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80073fc:	4aba      	ldr	r2, [pc, #744]	; (80076e8 <OTM8009A_Init+0x3a0>)
 80073fe:	21c5      	movs	r1, #197	; 0xc5
 8007400:	4628      	mov	r0, r5
 8007402:	f000 fc13 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8007406:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8007408:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 800740a:	4ab8      	ldr	r2, [pc, #736]	; (80076ec <OTM8009A_Init+0x3a4>)
 800740c:	4619      	mov	r1, r3
 800740e:	4628      	mov	r0, r5
 8007410:	f000 fc0c 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8007414:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8007416:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8007418:	4ab5      	ldr	r2, [pc, #724]	; (80076f0 <OTM8009A_Init+0x3a8>)
 800741a:	21c5      	movs	r1, #197	; 0xc5
 800741c:	4628      	mov	r0, r5
 800741e:	f000 fc05 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8007422:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8007424:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8007426:	4ab3      	ldr	r2, [pc, #716]	; (80076f4 <OTM8009A_Init+0x3ac>)
 8007428:	4619      	mov	r1, r3
 800742a:	4628      	mov	r0, r5
 800742c:	f000 fbfe 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8007430:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8007432:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8007434:	4ab0      	ldr	r2, [pc, #704]	; (80076f8 <OTM8009A_Init+0x3b0>)
 8007436:	21c0      	movs	r1, #192	; 0xc0
 8007438:	4628      	mov	r0, r5
 800743a:	f000 fbf7 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800743e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8007440:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007442:	4aa1      	ldr	r2, [pc, #644]	; (80076c8 <OTM8009A_Init+0x380>)
 8007444:	4619      	mov	r1, r3
 8007446:	4628      	mov	r0, r5
 8007448:	f000 fbf0 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800744c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800744e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8007450:	4aaa      	ldr	r2, [pc, #680]	; (80076fc <OTM8009A_Init+0x3b4>)
 8007452:	21d9      	movs	r1, #217	; 0xd9
 8007454:	4628      	mov	r0, r5
 8007456:	f000 fbe9 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800745a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800745c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800745e:	4aa8      	ldr	r2, [pc, #672]	; (8007700 <OTM8009A_Init+0x3b8>)
 8007460:	4619      	mov	r1, r3
 8007462:	4628      	mov	r0, r5
 8007464:	f000 fbe2 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8007468:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800746a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 800746c:	4aa5      	ldr	r2, [pc, #660]	; (8007704 <OTM8009A_Init+0x3bc>)
 800746e:	21c1      	movs	r1, #193	; 0xc1
 8007470:	4628      	mov	r0, r5
 8007472:	f000 fbdb 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8007476:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8007478:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800747a:	4aa3      	ldr	r2, [pc, #652]	; (8007708 <OTM8009A_Init+0x3c0>)
 800747c:	4619      	mov	r1, r3
 800747e:	4628      	mov	r0, r5
 8007480:	f000 fbd4 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8007484:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8007486:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8007488:	4aa0      	ldr	r2, [pc, #640]	; (800770c <OTM8009A_Init+0x3c4>)
 800748a:	21c1      	movs	r1, #193	; 0xc1
 800748c:	4628      	mov	r0, r5
 800748e:	f000 fbcd 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8007492:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8007494:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8007496:	4a9e      	ldr	r2, [pc, #632]	; (8007710 <OTM8009A_Init+0x3c8>)
 8007498:	4619      	mov	r1, r3
 800749a:	4628      	mov	r0, r5
 800749c:	f000 fbc6 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80074a0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80074a2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80074a4:	4a9b      	ldr	r2, [pc, #620]	; (8007714 <OTM8009A_Init+0x3cc>)
 80074a6:	21c5      	movs	r1, #197	; 0xc5
 80074a8:	4628      	mov	r0, r5
 80074aa:	f000 fbbf 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80074ae:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80074b0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80074b2:	4a99      	ldr	r2, [pc, #612]	; (8007718 <OTM8009A_Init+0x3d0>)
 80074b4:	4619      	mov	r1, r3
 80074b6:	4628      	mov	r0, r5
 80074b8:	f000 fbb8 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80074bc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80074be:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80074c0:	4a8b      	ldr	r2, [pc, #556]	; (80076f0 <OTM8009A_Init+0x3a8>)
 80074c2:	21c5      	movs	r1, #197	; 0xc5
 80074c4:	4628      	mov	r0, r5
 80074c6:	f000 fbb1 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80074ca:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80074cc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80074ce:	4a7e      	ldr	r2, [pc, #504]	; (80076c8 <OTM8009A_Init+0x380>)
 80074d0:	4619      	mov	r1, r3
 80074d2:	4628      	mov	r0, r5
 80074d4:	f000 fbaa 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80074d8:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80074da:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80074dc:	4a8f      	ldr	r2, [pc, #572]	; (800771c <OTM8009A_Init+0x3d4>)
 80074de:	21d8      	movs	r1, #216	; 0xd8
 80074e0:	4628      	mov	r0, r5
 80074e2:	f000 fba3 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80074e6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80074e8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80074ea:	4a8d      	ldr	r2, [pc, #564]	; (8007720 <OTM8009A_Init+0x3d8>)
 80074ec:	4619      	mov	r1, r3
 80074ee:	4628      	mov	r0, r5
 80074f0:	f000 fb9c 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80074f4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80074f6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80074f8:	4a8a      	ldr	r2, [pc, #552]	; (8007724 <OTM8009A_Init+0x3dc>)
 80074fa:	21c5      	movs	r1, #197	; 0xc5
 80074fc:	4628      	mov	r0, r5
 80074fe:	f000 fb95 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8007502:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8007504:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8007506:	4a88      	ldr	r2, [pc, #544]	; (8007728 <OTM8009A_Init+0x3e0>)
 8007508:	4619      	mov	r1, r3
 800750a:	4628      	mov	r0, r5
 800750c:	f000 fb8e 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8007510:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8007512:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8007514:	4a85      	ldr	r2, [pc, #532]	; (800772c <OTM8009A_Init+0x3e4>)
 8007516:	21c0      	movs	r1, #192	; 0xc0
 8007518:	4628      	mov	r0, r5
 800751a:	f000 fb87 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800751e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8007520:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8007522:	4a83      	ldr	r2, [pc, #524]	; (8007730 <OTM8009A_Init+0x3e8>)
 8007524:	4619      	mov	r1, r3
 8007526:	4628      	mov	r0, r5
 8007528:	f000 fb80 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800752c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800752e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8007530:	4a80      	ldr	r2, [pc, #512]	; (8007734 <OTM8009A_Init+0x3ec>)
 8007532:	21c5      	movs	r1, #197	; 0xc5
 8007534:	4628      	mov	r0, r5
 8007536:	f000 fb79 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800753a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800753c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800753e:	4a70      	ldr	r2, [pc, #448]	; (8007700 <OTM8009A_Init+0x3b8>)
 8007540:	4619      	mov	r1, r3
 8007542:	4628      	mov	r0, r5
 8007544:	f000 fb72 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8007548:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800754a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800754c:	4a7a      	ldr	r2, [pc, #488]	; (8007738 <OTM8009A_Init+0x3f0>)
 800754e:	21c4      	movs	r1, #196	; 0xc4
 8007550:	4628      	mov	r0, r5
 8007552:	f000 fb6b 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8007556:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8007558:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800755a:	4a6b      	ldr	r2, [pc, #428]	; (8007708 <OTM8009A_Init+0x3c0>)
 800755c:	4619      	mov	r1, r3
 800755e:	4628      	mov	r0, r5
 8007560:	f000 fb64 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8007564:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8007566:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8007568:	4a74      	ldr	r2, [pc, #464]	; (800773c <OTM8009A_Init+0x3f4>)
 800756a:	21c1      	movs	r1, #193	; 0xc1
 800756c:	4628      	mov	r0, r5
 800756e:	f000 fb5d 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8007572:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8007574:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8007576:	4a72      	ldr	r2, [pc, #456]	; (8007740 <OTM8009A_Init+0x3f8>)
 8007578:	4619      	mov	r1, r3
 800757a:	4628      	mov	r0, r5
 800757c:	f000 fb56 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8007580:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8007582:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8007584:	4a6f      	ldr	r2, [pc, #444]	; (8007744 <OTM8009A_Init+0x3fc>)
 8007586:	21b3      	movs	r1, #179	; 0xb3
 8007588:	4628      	mov	r0, r5
 800758a:	f000 fb4f 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800758e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8007590:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007592:	4a4f      	ldr	r2, [pc, #316]	; (80076d0 <OTM8009A_Init+0x388>)
 8007594:	4619      	mov	r1, r3
 8007596:	4628      	mov	r0, r5
 8007598:	f000 fb48 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 800759c:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800759e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80075a0:	4a69      	ldr	r2, [pc, #420]	; (8007748 <OTM8009A_Init+0x400>)
 80075a2:	21ce      	movs	r1, #206	; 0xce
 80075a4:	4628      	mov	r0, r5
 80075a6:	f000 fb41 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80075aa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80075ac:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80075ae:	4a67      	ldr	r2, [pc, #412]	; (800774c <OTM8009A_Init+0x404>)
 80075b0:	4619      	mov	r1, r3
 80075b2:	4628      	mov	r0, r5
 80075b4:	f000 fb3a 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80075b8:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80075ba:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80075bc:	4a64      	ldr	r2, [pc, #400]	; (8007750 <OTM8009A_Init+0x408>)
 80075be:	21ce      	movs	r1, #206	; 0xce
 80075c0:	4628      	mov	r0, r5
 80075c2:	f000 fb33 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80075c6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80075c8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80075ca:	4a62      	ldr	r2, [pc, #392]	; (8007754 <OTM8009A_Init+0x40c>)
 80075cc:	4619      	mov	r1, r3
 80075ce:	4628      	mov	r0, r5
 80075d0:	f000 fb2c 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80075d4:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80075d6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80075d8:	4a5f      	ldr	r2, [pc, #380]	; (8007758 <OTM8009A_Init+0x410>)
 80075da:	21ce      	movs	r1, #206	; 0xce
 80075dc:	4628      	mov	r0, r5
 80075de:	f000 fb25 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80075e2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80075e4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80075e6:	4a5d      	ldr	r2, [pc, #372]	; (800775c <OTM8009A_Init+0x414>)
 80075e8:	4619      	mov	r1, r3
 80075ea:	4628      	mov	r0, r5
 80075ec:	f000 fb1e 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80075f0:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80075f2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80075f4:	4a5a      	ldr	r2, [pc, #360]	; (8007760 <OTM8009A_Init+0x418>)
 80075f6:	21cf      	movs	r1, #207	; 0xcf
 80075f8:	4628      	mov	r0, r5
 80075fa:	f000 fb17 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80075fe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8007600:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007602:	4a58      	ldr	r2, [pc, #352]	; (8007764 <OTM8009A_Init+0x41c>)
 8007604:	4619      	mov	r1, r3
 8007606:	4628      	mov	r0, r5
 8007608:	f000 fb10 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800760c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800760e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8007610:	4a55      	ldr	r2, [pc, #340]	; (8007768 <OTM8009A_Init+0x420>)
 8007612:	21cf      	movs	r1, #207	; 0xcf
 8007614:	4628      	mov	r0, r5
 8007616:	f000 fb09 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800761a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800761c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800761e:	4a2c      	ldr	r2, [pc, #176]	; (80076d0 <OTM8009A_Init+0x388>)
 8007620:	4619      	mov	r1, r3
 8007622:	4628      	mov	r0, r5
 8007624:	f000 fb02 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8007628:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800762a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800762c:	4a4f      	ldr	r2, [pc, #316]	; (800776c <OTM8009A_Init+0x424>)
 800762e:	21cb      	movs	r1, #203	; 0xcb
 8007630:	4628      	mov	r0, r5
 8007632:	f000 fafb 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8007636:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8007638:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800763a:	4a4d      	ldr	r2, [pc, #308]	; (8007770 <OTM8009A_Init+0x428>)
 800763c:	4619      	mov	r1, r3
 800763e:	4628      	mov	r0, r5
 8007640:	f000 faf4 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8007644:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8007646:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8007648:	4a4a      	ldr	r2, [pc, #296]	; (8007774 <OTM8009A_Init+0x42c>)
 800764a:	21cb      	movs	r1, #203	; 0xcb
 800764c:	4628      	mov	r0, r5
 800764e:	f000 faed 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007652:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8007654:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007656:	4a3d      	ldr	r2, [pc, #244]	; (800774c <OTM8009A_Init+0x404>)
 8007658:	4619      	mov	r1, r3
 800765a:	4628      	mov	r0, r5
 800765c:	f000 fae6 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8007660:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007662:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8007664:	4a44      	ldr	r2, [pc, #272]	; (8007778 <OTM8009A_Init+0x430>)
 8007666:	21cb      	movs	r1, #203	; 0xcb
 8007668:	4628      	mov	r0, r5
 800766a:	f000 fadf 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800766e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8007670:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007672:	4a38      	ldr	r2, [pc, #224]	; (8007754 <OTM8009A_Init+0x40c>)
 8007674:	4619      	mov	r1, r3
 8007676:	4628      	mov	r0, r5
 8007678:	f000 fad8 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 800767c:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800767e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8007680:	4a3e      	ldr	r2, [pc, #248]	; (800777c <OTM8009A_Init+0x434>)
 8007682:	21cb      	movs	r1, #203	; 0xcb
 8007684:	4628      	mov	r0, r5
 8007686:	f000 fad1 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800768a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 800768c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800768e:	4a33      	ldr	r2, [pc, #204]	; (800775c <OTM8009A_Init+0x414>)
 8007690:	4619      	mov	r1, r3
 8007692:	4628      	mov	r0, r5
 8007694:	f000 faca 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8007698:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800769a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800769c:	4a38      	ldr	r2, [pc, #224]	; (8007780 <OTM8009A_Init+0x438>)
 800769e:	21cb      	movs	r1, #203	; 0xcb
 80076a0:	4628      	mov	r0, r5
 80076a2:	f000 fac3 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80076a6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80076a8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80076aa:	4a2e      	ldr	r2, [pc, #184]	; (8007764 <OTM8009A_Init+0x41c>)
 80076ac:	4619      	mov	r1, r3
 80076ae:	4628      	mov	r0, r5
 80076b0:	f000 fabc 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80076b4:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80076b6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80076b8:	4a32      	ldr	r2, [pc, #200]	; (8007784 <OTM8009A_Init+0x43c>)
 80076ba:	21cb      	movs	r1, #203	; 0xcb
 80076bc:	4628      	mov	r0, r5
 80076be:	f000 fab5 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80076c2:	2300      	movs	r3, #0
 80076c4:	e060      	b.n	8007788 <OTM8009A_Init+0x440>
 80076c6:	bf00      	nop
 80076c8:	08098ac1 	.word	0x08098ac1
 80076cc:	08098990 	.word	0x08098990
 80076d0:	08098ac2 	.word	0x08098ac2
 80076d4:	08098a1c 	.word	0x08098a1c
 80076d8:	08098ac3 	.word	0x08098ac3
 80076dc:	08098ac4 	.word	0x08098ac4
 80076e0:	08098ac5 	.word	0x08098ac5
 80076e4:	08098ac6 	.word	0x08098ac6
 80076e8:	08098ac7 	.word	0x08098ac7
 80076ec:	08098ac8 	.word	0x08098ac8
 80076f0:	08098ac9 	.word	0x08098ac9
 80076f4:	08098aca 	.word	0x08098aca
 80076f8:	08098acb 	.word	0x08098acb
 80076fc:	08098acc 	.word	0x08098acc
 8007700:	08098acd 	.word	0x08098acd
 8007704:	08098ace 	.word	0x08098ace
 8007708:	08098acf 	.word	0x08098acf
 800770c:	08098ad0 	.word	0x08098ad0
 8007710:	08098ad1 	.word	0x08098ad1
 8007714:	08098ad2 	.word	0x08098ad2
 8007718:	08098ad3 	.word	0x08098ad3
 800771c:	08098a90 	.word	0x08098a90
 8007720:	08098ad4 	.word	0x08098ad4
 8007724:	08098ad5 	.word	0x08098ad5
 8007728:	08098ad6 	.word	0x08098ad6
 800772c:	08098ad7 	.word	0x08098ad7
 8007730:	08098ad8 	.word	0x08098ad8
 8007734:	08098ad9 	.word	0x08098ad9
 8007738:	08098ada 	.word	0x08098ada
 800773c:	08098adb 	.word	0x08098adb
 8007740:	08098adc 	.word	0x08098adc
 8007744:	08098a94 	.word	0x08098a94
 8007748:	08098a98 	.word	0x08098a98
 800774c:	08098add 	.word	0x08098add
 8007750:	08098aa0 	.word	0x08098aa0
 8007754:	08098ade 	.word	0x08098ade
 8007758:	08098ab0 	.word	0x08098ab0
 800775c:	08098adf 	.word	0x08098adf
 8007760:	08098994 	.word	0x08098994
 8007764:	08098ae0 	.word	0x08098ae0
 8007768:	08098aed 	.word	0x08098aed
 800776c:	080989a0 	.word	0x080989a0
 8007770:	08098ae1 	.word	0x08098ae1
 8007774:	080989ac 	.word	0x080989ac
 8007778:	080989bc 	.word	0x080989bc
 800777c:	080989cc 	.word	0x080989cc
 8007780:	080989d8 	.word	0x080989d8
 8007784:	080989e8 	.word	0x080989e8
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8007788:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800778a:	4aa7      	ldr	r2, [pc, #668]	; (8007a28 <OTM8009A_Init+0x6e0>)
 800778c:	4619      	mov	r1, r3
 800778e:	4628      	mov	r0, r5
 8007790:	f000 fa4c 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8007794:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8007796:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8007798:	4aa4      	ldr	r2, [pc, #656]	; (8007a2c <OTM8009A_Init+0x6e4>)
 800779a:	21cb      	movs	r1, #203	; 0xcb
 800779c:	4628      	mov	r0, r5
 800779e:	f000 fa45 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80077a2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80077a4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80077a6:	4aa2      	ldr	r2, [pc, #648]	; (8007a30 <OTM8009A_Init+0x6e8>)
 80077a8:	4619      	mov	r1, r3
 80077aa:	4628      	mov	r0, r5
 80077ac:	f000 fa3e 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80077b0:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80077b2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80077b4:	4a9f      	ldr	r2, [pc, #636]	; (8007a34 <OTM8009A_Init+0x6ec>)
 80077b6:	21cb      	movs	r1, #203	; 0xcb
 80077b8:	4628      	mov	r0, r5
 80077ba:	f000 fa37 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80077be:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80077c0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80077c2:	4a9d      	ldr	r2, [pc, #628]	; (8007a38 <OTM8009A_Init+0x6f0>)
 80077c4:	4619      	mov	r1, r3
 80077c6:	4628      	mov	r0, r5
 80077c8:	f000 fa30 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80077cc:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80077ce:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80077d0:	4a9a      	ldr	r2, [pc, #616]	; (8007a3c <OTM8009A_Init+0x6f4>)
 80077d2:	21cc      	movs	r1, #204	; 0xcc
 80077d4:	4628      	mov	r0, r5
 80077d6:	f000 fa29 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80077da:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80077dc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80077de:	4a98      	ldr	r2, [pc, #608]	; (8007a40 <OTM8009A_Init+0x6f8>)
 80077e0:	4619      	mov	r1, r3
 80077e2:	4628      	mov	r0, r5
 80077e4:	f000 fa22 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80077e8:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80077ea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80077ec:	4a95      	ldr	r2, [pc, #596]	; (8007a44 <OTM8009A_Init+0x6fc>)
 80077ee:	21cc      	movs	r1, #204	; 0xcc
 80077f0:	4628      	mov	r0, r5
 80077f2:	f000 fa1b 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80077f6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80077f8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80077fa:	4a93      	ldr	r2, [pc, #588]	; (8007a48 <OTM8009A_Init+0x700>)
 80077fc:	4619      	mov	r1, r3
 80077fe:	4628      	mov	r0, r5
 8007800:	f000 fa14 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8007804:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007806:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8007808:	4a90      	ldr	r2, [pc, #576]	; (8007a4c <OTM8009A_Init+0x704>)
 800780a:	21cc      	movs	r1, #204	; 0xcc
 800780c:	4628      	mov	r0, r5
 800780e:	f000 fa0d 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007812:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8007814:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007816:	4a8e      	ldr	r2, [pc, #568]	; (8007a50 <OTM8009A_Init+0x708>)
 8007818:	4619      	mov	r1, r3
 800781a:	4628      	mov	r0, r5
 800781c:	f000 fa06 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8007820:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007822:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8007824:	4a8b      	ldr	r2, [pc, #556]	; (8007a54 <OTM8009A_Init+0x70c>)
 8007826:	21cc      	movs	r1, #204	; 0xcc
 8007828:	4628      	mov	r0, r5
 800782a:	f000 f9ff 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800782e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8007830:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007832:	4a89      	ldr	r2, [pc, #548]	; (8007a58 <OTM8009A_Init+0x710>)
 8007834:	4619      	mov	r1, r3
 8007836:	4628      	mov	r0, r5
 8007838:	f000 f9f8 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800783c:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800783e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8007840:	4a86      	ldr	r2, [pc, #536]	; (8007a5c <OTM8009A_Init+0x714>)
 8007842:	21cc      	movs	r1, #204	; 0xcc
 8007844:	4628      	mov	r0, r5
 8007846:	f000 f9f1 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800784a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800784c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800784e:	4a84      	ldr	r2, [pc, #528]	; (8007a60 <OTM8009A_Init+0x718>)
 8007850:	4619      	mov	r1, r3
 8007852:	4628      	mov	r0, r5
 8007854:	f000 f9ea 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8007858:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800785a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800785c:	4a81      	ldr	r2, [pc, #516]	; (8007a64 <OTM8009A_Init+0x71c>)
 800785e:	21cc      	movs	r1, #204	; 0xcc
 8007860:	4628      	mov	r0, r5
 8007862:	f000 f9e3 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007866:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8007868:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800786a:	4a7f      	ldr	r2, [pc, #508]	; (8007a68 <OTM8009A_Init+0x720>)
 800786c:	4619      	mov	r1, r3
 800786e:	4628      	mov	r0, r5
 8007870:	f000 f9dc 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8007874:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007876:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8007878:	4a7c      	ldr	r2, [pc, #496]	; (8007a6c <OTM8009A_Init+0x724>)
 800787a:	21c5      	movs	r1, #197	; 0xc5
 800787c:	4628      	mov	r0, r5
 800787e:	f000 f9d5 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8007882:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8007884:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8007886:	4a7a      	ldr	r2, [pc, #488]	; (8007a70 <OTM8009A_Init+0x728>)
 8007888:	4619      	mov	r1, r3
 800788a:	4628      	mov	r0, r5
 800788c:	f000 f9ce 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8007890:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8007892:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8007894:	4a77      	ldr	r2, [pc, #476]	; (8007a74 <OTM8009A_Init+0x72c>)
 8007896:	21f5      	movs	r1, #245	; 0xf5
 8007898:	4628      	mov	r0, r5
 800789a:	f000 f9c7 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800789e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80078a0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80078a2:	4a75      	ldr	r2, [pc, #468]	; (8007a78 <OTM8009A_Init+0x730>)
 80078a4:	4619      	mov	r1, r3
 80078a6:	4628      	mov	r0, r5
 80078a8:	f000 f9c0 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80078ac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80078ae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80078b0:	4a72      	ldr	r2, [pc, #456]	; (8007a7c <OTM8009A_Init+0x734>)
 80078b2:	21c6      	movs	r1, #198	; 0xc6
 80078b4:	4628      	mov	r0, r5
 80078b6:	f000 f9b9 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80078ba:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80078bc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80078be:	4a70      	ldr	r2, [pc, #448]	; (8007a80 <OTM8009A_Init+0x738>)
 80078c0:	4619      	mov	r1, r3
 80078c2:	4628      	mov	r0, r5
 80078c4:	f000 f9b2 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80078c8:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80078ca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80078cc:	4a6d      	ldr	r2, [pc, #436]	; (8007a84 <OTM8009A_Init+0x73c>)
 80078ce:	21ff      	movs	r1, #255	; 0xff
 80078d0:	4628      	mov	r0, r5
 80078d2:	f000 f9ab 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80078d6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80078d8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80078da:	4a69      	ldr	r2, [pc, #420]	; (8007a80 <OTM8009A_Init+0x738>)
 80078dc:	4619      	mov	r1, r3
 80078de:	4628      	mov	r0, r5
 80078e0:	f000 f9a4 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80078e4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80078e6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80078e8:	4a65      	ldr	r2, [pc, #404]	; (8007a80 <OTM8009A_Init+0x738>)
 80078ea:	4619      	mov	r1, r3
 80078ec:	4628      	mov	r0, r5
 80078ee:	f000 f99d 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80078f2:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80078f4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80078f6:	4a64      	ldr	r2, [pc, #400]	; (8007a88 <OTM8009A_Init+0x740>)
 80078f8:	21e1      	movs	r1, #225	; 0xe1
 80078fa:	4628      	mov	r0, r5
 80078fc:	f000 f996 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007900:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8007902:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007904:	4a5e      	ldr	r2, [pc, #376]	; (8007a80 <OTM8009A_Init+0x738>)
 8007906:	4619      	mov	r1, r3
 8007908:	4628      	mov	r0, r5
 800790a:	f000 f98f 	bl	8007c2c <otm8009a_write_reg>
 800790e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8007910:	2310      	movs	r3, #16
 8007912:	4a5e      	ldr	r2, [pc, #376]	; (8007a8c <OTM8009A_Init+0x744>)
 8007914:	21e2      	movs	r1, #226	; 0xe2
 8007916:	4628      	mov	r0, r5
 8007918:	f000 f988 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 800791c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 800791e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8007920:	4a5b      	ldr	r2, [pc, #364]	; (8007a90 <OTM8009A_Init+0x748>)
 8007922:	2111      	movs	r1, #17
 8007924:	4628      	mov	r0, r5
 8007926:	f000 f981 	bl	8007c2c <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 800792a:	68f3      	ldr	r3, [r6, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 800792c:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 800792e:	4798      	blx	r3
 8007930:	4681      	mov	r9, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8007932:	68f3      	ldr	r3, [r6, #12]
 8007934:	4798      	blx	r3
 8007936:	eba0 0009 	sub.w	r0, r0, r9
 800793a:	2877      	cmp	r0, #119	; 0x77
 800793c:	d9f9      	bls.n	8007932 <OTM8009A_Init+0x5ea>
  switch(ColorCoding)
 800793e:	2f00      	cmp	r7, #0
 8007940:	d06f      	beq.n	8007a22 <OTM8009A_Init+0x6da>
 8007942:	2f02      	cmp	r7, #2
 8007944:	d14c      	bne.n	80079e0 <OTM8009A_Init+0x698>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8007946:	2300      	movs	r3, #0
 8007948:	4a52      	ldr	r2, [pc, #328]	; (8007a94 <OTM8009A_Init+0x74c>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 800794a:	213a      	movs	r1, #58	; 0x3a
 800794c:	4628      	mov	r0, r5
 800794e:	f000 f96d 	bl	8007c2c <otm8009a_write_reg>
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8007952:	f8df 9168 	ldr.w	r9, [pc, #360]	; 8007abc <OTM8009A_Init+0x774>
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8007956:	f1b8 0f01 	cmp.w	r8, #1
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 800795a:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 800795c:	f8c9 7004 	str.w	r7, [r9, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8007960:	d043      	beq.n	80079ea <OTM8009A_Init+0x6a2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8007962:	2300      	movs	r3, #0
 8007964:	f8c9 3000 	str.w	r3, [r9]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8007968:	2300      	movs	r3, #0
 800796a:	4a4b      	ldr	r2, [pc, #300]	; (8007a98 <OTM8009A_Init+0x750>)
 800796c:	2151      	movs	r1, #81	; 0x51
 800796e:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8007970:	461e      	mov	r6, r3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8007972:	f000 f95b 	bl	8007c2c <otm8009a_write_reg>
 8007976:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8007978:	4a48      	ldr	r2, [pc, #288]	; (8007a9c <OTM8009A_Init+0x754>)
 800797a:	4633      	mov	r3, r6
 800797c:	2153      	movs	r1, #83	; 0x53
 800797e:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8007980:	f8c9 6008 	str.w	r6, [r9, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8007984:	f000 f952 	bl	8007c2c <otm8009a_write_reg>
 8007988:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 800798a:	4633      	mov	r3, r6
 800798c:	4a44      	ldr	r2, [pc, #272]	; (8007aa0 <OTM8009A_Init+0x758>)
 800798e:	2155      	movs	r1, #85	; 0x55
 8007990:	4628      	mov	r0, r5
 8007992:	f000 f94b 	bl	8007c2c <otm8009a_write_reg>
 8007996:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8007998:	4633      	mov	r3, r6
 800799a:	4a42      	ldr	r2, [pc, #264]	; (8007aa4 <OTM8009A_Init+0x75c>)
 800799c:	215e      	movs	r1, #94	; 0x5e
 800799e:	4628      	mov	r0, r5
 80079a0:	f000 f944 	bl	8007c2c <otm8009a_write_reg>
 80079a4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 80079a6:	4633      	mov	r3, r6
 80079a8:	4a3f      	ldr	r2, [pc, #252]	; (8007aa8 <OTM8009A_Init+0x760>)
 80079aa:	2129      	movs	r1, #41	; 0x29
 80079ac:	4628      	mov	r0, r5
 80079ae:	f000 f93d 	bl	8007c2c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80079b2:	4633      	mov	r3, r6
 80079b4:	4631      	mov	r1, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 80079b6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80079b8:	4a31      	ldr	r2, [pc, #196]	; (8007a80 <OTM8009A_Init+0x738>)
 80079ba:	4628      	mov	r0, r5
 80079bc:	f000 f936 	bl	8007c2c <otm8009a_write_reg>
 80079c0:	4601      	mov	r1, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 80079c2:	4633      	mov	r3, r6
 80079c4:	4a39      	ldr	r2, [pc, #228]	; (8007aac <OTM8009A_Init+0x764>)
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80079c6:	440c      	add	r4, r1
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 80079c8:	4628      	mov	r0, r5
 80079ca:	212c      	movs	r1, #44	; 0x2c
 80079cc:	f000 f92e 	bl	8007c2c <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 80079d0:	42c4      	cmn	r4, r0
}
 80079d2:	bf14      	ite	ne
 80079d4:	f04f 30ff 	movne.w	r0, #4294967295
 80079d8:	4630      	moveq	r0, r6
 80079da:	b003      	add	sp, #12
 80079dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80079e0:	f1b8 0f01 	cmp.w	r8, #1
 80079e4:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8007abc <OTM8009A_Init+0x774>
 80079e8:	d1bb      	bne.n	8007962 <OTM8009A_Init+0x61a>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80079ea:	2360      	movs	r3, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80079ec:	f10d 0207 	add.w	r2, sp, #7
 80079f0:	2136      	movs	r1, #54	; 0x36
 80079f2:	4628      	mov	r0, r5
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80079f4:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80079f8:	2300      	movs	r3, #0
 80079fa:	f000 f917 	bl	8007c2c <otm8009a_write_reg>
 80079fe:	1826      	adds	r6, r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8007a00:	2304      	movs	r3, #4
 8007a02:	4a2b      	ldr	r2, [pc, #172]	; (8007ab0 <OTM8009A_Init+0x768>)
 8007a04:	212a      	movs	r1, #42	; 0x2a
 8007a06:	4628      	mov	r0, r5
 8007a08:	f000 f910 	bl	8007c2c <otm8009a_write_reg>
 8007a0c:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8007a0e:	2304      	movs	r3, #4
 8007a10:	4a28      	ldr	r2, [pc, #160]	; (8007ab4 <OTM8009A_Init+0x76c>)
 8007a12:	212b      	movs	r1, #43	; 0x2b
 8007a14:	4628      	mov	r0, r5
 8007a16:	f000 f909 	bl	8007c2c <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8007a1a:	f8c9 8000 	str.w	r8, [r9]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8007a1e:	1834      	adds	r4, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8007a20:	e7a2      	b.n	8007968 <OTM8009A_Init+0x620>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8007a22:	463b      	mov	r3, r7
 8007a24:	4a24      	ldr	r2, [pc, #144]	; (8007ab8 <OTM8009A_Init+0x770>)
 8007a26:	e790      	b.n	800794a <OTM8009A_Init+0x602>
 8007a28:	08098ae2 	.word	0x08098ae2
 8007a2c:	080989f8 	.word	0x080989f8
 8007a30:	08098ae3 	.word	0x08098ae3
 8007a34:	08098a04 	.word	0x08098a04
 8007a38:	08098ac2 	.word	0x08098ac2
 8007a3c:	08098a10 	.word	0x08098a10
 8007a40:	08098ae1 	.word	0x08098ae1
 8007a44:	08098a20 	.word	0x08098a20
 8007a48:	08098add 	.word	0x08098add
 8007a4c:	08098a30 	.word	0x08098a30
 8007a50:	08098ade 	.word	0x08098ade
 8007a54:	08098a40 	.word	0x08098a40
 8007a58:	08098adf 	.word	0x08098adf
 8007a5c:	08098a4c 	.word	0x08098a4c
 8007a60:	08098ae0 	.word	0x08098ae0
 8007a64:	08098a5c 	.word	0x08098a5c
 8007a68:	08098acd 	.word	0x08098acd
 8007a6c:	08098aee 	.word	0x08098aee
 8007a70:	08098aef 	.word	0x08098aef
 8007a74:	08098af0 	.word	0x08098af0
 8007a78:	08098af1 	.word	0x08098af1
 8007a7c:	08098af2 	.word	0x08098af2
 8007a80:	08098ac1 	.word	0x08098ac1
 8007a84:	08098a6c 	.word	0x08098a6c
 8007a88:	08098a70 	.word	0x08098a70
 8007a8c:	08098a80 	.word	0x08098a80
 8007a90:	08098ae4 	.word	0x08098ae4
 8007a94:	08098ae5 	.word	0x08098ae5
 8007a98:	08098ae7 	.word	0x08098ae7
 8007a9c:	08098ae8 	.word	0x08098ae8
 8007aa0:	08098ae9 	.word	0x08098ae9
 8007aa4:	08098aea 	.word	0x08098aea
 8007aa8:	08098aeb 	.word	0x08098aeb
 8007aac:	08098aec 	.word	0x08098aec
 8007ab0:	08098988 	.word	0x08098988
 8007ab4:	0809898c 	.word	0x0809898c
 8007ab8:	08098ae6 	.word	0x08098ae6
 8007abc:	200093e8 	.word	0x200093e8

08007ac0 <OTM8009A_SetBrightness>:
{
 8007ac0:	b530      	push	{r4, r5, lr}
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8007ac2:	ebc1 2c01 	rsb	ip, r1, r1, lsl #8
 8007ac6:	4d0c      	ldr	r5, [pc, #48]	; (8007af8 <OTM8009A_SetBrightness+0x38>)
{
 8007ac8:	b083      	sub	sp, #12
 8007aca:	460c      	mov	r4, r1
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8007acc:	fba5 5c0c 	umull	r5, ip, r5, ip
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	f10d 0207 	add.w	r2, sp, #7
 8007ad6:	3010      	adds	r0, #16
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8007ad8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8007adc:	2151      	movs	r1, #81	; 0x51
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8007ade:	f88d c007 	strb.w	ip, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8007ae2:	f000 f8a3 	bl	8007c2c <otm8009a_write_reg>
 8007ae6:	b918      	cbnz	r0, 8007af0 <OTM8009A_SetBrightness+0x30>
    OTM8009ACtx.Brightness = Brightness;
 8007ae8:	4b04      	ldr	r3, [pc, #16]	; (8007afc <OTM8009A_SetBrightness+0x3c>)
 8007aea:	609c      	str	r4, [r3, #8]
}
 8007aec:	b003      	add	sp, #12
 8007aee:	bd30      	pop	{r4, r5, pc}
    ret = OTM8009A_ERROR;
 8007af0:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8007af4:	e7fa      	b.n	8007aec <OTM8009A_SetBrightness+0x2c>
 8007af6:	bf00      	nop
 8007af8:	51eb851f 	.word	0x51eb851f
 8007afc:	200093e8 	.word	0x200093e8

08007b00 <OTM8009A_DisplayOn>:
{
 8007b00:	b500      	push	{lr}
 8007b02:	b083      	sub	sp, #12
  uint8_t display = 0;
 8007b04:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8007b06:	2129      	movs	r1, #41	; 0x29
 8007b08:	3010      	adds	r0, #16
 8007b0a:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 8007b0e:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8007b12:	f000 f88b 	bl	8007c2c <otm8009a_write_reg>
 8007b16:	3800      	subs	r0, #0
 8007b18:	bf18      	it	ne
 8007b1a:	2001      	movne	r0, #1
}
 8007b1c:	4240      	negs	r0, r0
 8007b1e:	b003      	add	sp, #12
 8007b20:	f85d fb04 	ldr.w	pc, [sp], #4

08007b24 <OTM8009A_DisplayOff>:
{
 8007b24:	b500      	push	{lr}
 8007b26:	b083      	sub	sp, #12
  uint8_t display = 0;
 8007b28:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8007b2a:	2128      	movs	r1, #40	; 0x28
 8007b2c:	3010      	adds	r0, #16
 8007b2e:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 8007b32:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8007b36:	f000 f879 	bl	8007c2c <otm8009a_write_reg>
 8007b3a:	3800      	subs	r0, #0
 8007b3c:	bf18      	it	ne
 8007b3e:	2001      	movne	r0, #1
}
 8007b40:	4240      	negs	r0, r0
 8007b42:	b003      	add	sp, #12
 8007b44:	f85d fb04 	ldr.w	pc, [sp], #4

08007b48 <OTM8009A_SetOrientation>:
{
 8007b48:	b570      	push	{r4, r5, r6, lr}
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8007b4a:	2260      	movs	r2, #96	; 0x60
{
 8007b4c:	b082      	sub	sp, #8
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8007b4e:	2300      	movs	r3, #0
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8007b50:	2901      	cmp	r1, #1
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8007b52:	f88d 2006 	strb.w	r2, [sp, #6]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8007b56:	f88d 3007 	strb.w	r3, [sp, #7]
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8007b5a:	d828      	bhi.n	8007bae <OTM8009A_SetOrientation+0x66>
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8007b5c:	d020      	beq.n	8007ba0 <OTM8009A_SetOrientation+0x58>
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8007b5e:	f100 0610 	add.w	r6, r0, #16
 8007b62:	f10d 0207 	add.w	r2, sp, #7
 8007b66:	2136      	movs	r1, #54	; 0x36
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8007b68:	461d      	mov	r5, r3
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	f000 f85e 	bl	8007c2c <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8007b70:	2304      	movs	r3, #4
 8007b72:	4a10      	ldr	r2, [pc, #64]	; (8007bb4 <OTM8009A_SetOrientation+0x6c>)
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8007b74:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8007b76:	212a      	movs	r1, #42	; 0x2a
 8007b78:	4630      	mov	r0, r6
 8007b7a:	f000 f857 	bl	8007c2c <otm8009a_write_reg>
 8007b7e:	4602      	mov	r2, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8007b80:	2304      	movs	r3, #4
 8007b82:	4630      	mov	r0, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8007b84:	4414      	add	r4, r2
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8007b86:	212b      	movs	r1, #43	; 0x2b
 8007b88:	4a0b      	ldr	r2, [pc, #44]	; (8007bb8 <OTM8009A_SetOrientation+0x70>)
 8007b8a:	f000 f84f 	bl	8007c2c <otm8009a_write_reg>
 8007b8e:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8007b90:	4b0a      	ldr	r3, [pc, #40]	; (8007bbc <OTM8009A_SetOrientation+0x74>)
  if(ret != OTM8009A_OK)
 8007b92:	3800      	subs	r0, #0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8007b94:	601d      	str	r5, [r3, #0]
  if(ret != OTM8009A_OK)
 8007b96:	bf18      	it	ne
 8007b98:	2001      	movne	r0, #1
 8007b9a:	4240      	negs	r0, r0
}
 8007b9c:	b002      	add	sp, #8
 8007b9e:	bd70      	pop	{r4, r5, r6, pc}
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8007ba0:	460d      	mov	r5, r1
 8007ba2:	f100 0610 	add.w	r6, r0, #16
 8007ba6:	f10d 0206 	add.w	r2, sp, #6
 8007baa:	2136      	movs	r1, #54	; 0x36
 8007bac:	e7dd      	b.n	8007b6a <OTM8009A_SetOrientation+0x22>
    ret = OTM8009A_ERROR;
 8007bae:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8007bb2:	e7f3      	b.n	8007b9c <OTM8009A_SetOrientation+0x54>
 8007bb4:	08098988 	.word	0x08098988
 8007bb8:	0809898c 	.word	0x0809898c
 8007bbc:	200093e8 	.word	0x200093e8

08007bc0 <OTM8009A_ReadID>:
{ 
 8007bc0:	460a      	mov	r2, r1
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 8007bc2:	3010      	adds	r0, #16
 8007bc4:	21da      	movs	r1, #218	; 0xda
{ 
 8007bc6:	b508      	push	{r3, lr}
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 8007bc8:	2300      	movs	r3, #0
 8007bca:	f000 f827 	bl	8007c1c <otm8009a_read_reg>
 8007bce:	3800      	subs	r0, #0
 8007bd0:	bf18      	it	ne
 8007bd2:	2001      	movne	r0, #1
}  
 8007bd4:	4240      	negs	r0, r0
 8007bd6:	bd08      	pop	{r3, pc}

08007bd8 <OTM8009A_DrawVLine>:
 8007bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop

08007be0 <OTM8009A_GetPixel>:
 8007be0:	f04f 30ff 	mov.w	r0, #4294967295
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop

08007be8 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8007be8:	b180      	cbz	r0, 8007c0c <OTM8009A_RegisterBusIO+0x24>
 8007bea:	4603      	mov	r3, r0
{
 8007bec:	b410      	push	{r4}
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007bee:	e9d1 2401 	ldrd	r2, r4, [r1, #4]
 8007bf2:	68c8      	ldr	r0, [r1, #12]
 8007bf4:	605a      	str	r2, [r3, #4]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8007bf6:	4907      	ldr	r1, [pc, #28]	; (8007c14 <OTM8009A_RegisterBusIO+0x2c>)
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8007bf8:	4a07      	ldr	r2, [pc, #28]	; (8007c18 <OTM8009A_RegisterBusIO+0x30>)
    pObj->Ctx.handle   = pObj;
 8007bfa:	619b      	str	r3, [r3, #24]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007bfc:	e9c3 4002 	strd	r4, r0, [r3, #8]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8007c00:	e9c3 2104 	strd	r2, r1, [r3, #16]
  int32_t ret = OTM8009A_OK;
 8007c04:	2000      	movs	r0, #0
}
 8007c06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c0a:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8007c0c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	08007329 	.word	0x08007329
 8007c18:	08007339 	.word	0x08007339

08007c1c <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8007c1c:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8007c1e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8007c22:	46a4      	mov	ip, r4
}
 8007c24:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8007c28:	4760      	bx	ip
 8007c2a:	bf00      	nop

08007c2c <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8007c2c:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8007c2e:	6804      	ldr	r4, [r0, #0]
 8007c30:	6880      	ldr	r0, [r0, #8]
 8007c32:	46a4      	mov	ip, r4
}
 8007c34:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8007c38:	4760      	bx	ip
 8007c3a:	bf00      	nop

08007c3c <OV5640_DeInit>:
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
  if (pObj->IsInitialized == 1U)
 8007c3c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d102      	bne.n	8007c4a <OV5640_DeInit+0xe>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 8007c44:	2300      	movs	r3, #0
 8007c46:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  }

  return OV5640_OK;
}
 8007c4a:	2000      	movs	r0, #0
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop

08007c50 <OV5640_GetPixelFormat>:
{
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
}
 8007c50:	f04f 30ff 	mov.w	r0, #4294967295
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop

08007c58 <OV5640_GetCapabilities>:
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
  int32_t ret;

  if (pObj == NULL)
 8007c58:	b160      	cbz	r0, 8007c74 <OV5640_GetCapabilities+0x1c>
  {
    ret = OV5640_ERROR;
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 8007c5a:	2301      	movs	r3, #1
    Capabilities->Config_Resolution    = 1;
    Capabilities->Config_Saturation    = 1;
    Capabilities->Config_SpecialEffect = 1;
    Capabilities->Config_Zoom          = 1;

    ret = OV5640_OK;
 8007c5c:	2000      	movs	r0, #0
    Capabilities->Config_Brightness    = 1;
 8007c5e:	60cb      	str	r3, [r1, #12]
    Capabilities->Config_LightMode     = 1;
 8007c60:	604b      	str	r3, [r1, #4]
    Capabilities->Config_MirrorFlip    = 1;
 8007c62:	61cb      	str	r3, [r1, #28]
    Capabilities->Config_NightMode     = 1;
 8007c64:	624b      	str	r3, [r1, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 8007c66:	600b      	str	r3, [r1, #0]
    Capabilities->Config_Saturation    = 1;
 8007c68:	610b      	str	r3, [r1, #16]
    Capabilities->Config_SpecialEffect = 1;
 8007c6a:	608b      	str	r3, [r1, #8]
    Capabilities->Config_Zoom          = 1;
 8007c6c:	620b      	str	r3, [r1, #32]
    Capabilities->Config_HueDegree     = 1;
 8007c6e:	e9c1 3305 	strd	r3, r3, [r1, #20]
    ret = OV5640_OK;
 8007c72:	4770      	bx	lr
    ret = OV5640_ERROR;
 8007c74:	f04f 30ff 	mov.w	r0, #4294967295
  }

  return ret;
}
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop

08007c7c <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8007c7c:	b410      	push	{r4}
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007c7e:	6904      	ldr	r4, [r0, #16]
 8007c80:	8900      	ldrh	r0, [r0, #8]
 8007c82:	46a4      	mov	ip, r4
}
 8007c84:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007c88:	4760      	bx	ip
 8007c8a:	bf00      	nop

08007c8c <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8007c8c:	b410      	push	{r4}
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007c8e:	68c4      	ldr	r4, [r0, #12]
 8007c90:	8900      	ldrh	r0, [r0, #8]
 8007c92:	46a4      	mov	ip, r4
}
 8007c94:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007c98:	4760      	bx	ip
 8007c9a:	bf00      	nop

08007c9c <OV5640_SetResolution>:
  if (Resolution > OV5640_R800x480)
 8007c9c:	2904      	cmp	r1, #4
 8007c9e:	d87f      	bhi.n	8007da0 <OV5640_SetResolution+0x104>
    switch (Resolution)
 8007ca0:	3901      	subs	r1, #1
{
 8007ca2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ca4:	b083      	sub	sp, #12
    switch (Resolution)
 8007ca6:	2903      	cmp	r1, #3
 8007ca8:	d863      	bhi.n	8007d72 <OV5640_SetResolution+0xd6>
 8007caa:	e8df f001 	tbb	[pc, r1]
 8007cae:	341c      	.short	0x341c
 8007cb0:	024b      	.short	0x024b
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8007cb2:	f100 0418 	add.w	r4, r0, #24
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8007cb6:	2600      	movs	r6, #0
 8007cb8:	f10d 0507 	add.w	r5, sp, #7
 8007cbc:	4f3c      	ldr	r7, [pc, #240]	; (8007db0 <OV5640_SetResolution+0x114>)
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8007cbe:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8007cc8:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8007cca:	8852      	ldrh	r2, [r2, #2]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8007ccc:	441e      	add	r6, r3
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8007cce:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8007cd2:	462a      	mov	r2, r5
 8007cd4:	f001 f85a 	bl	8008d8c <ov5640_write_reg>
 8007cd8:	2800      	cmp	r0, #0
 8007cda:	d15d      	bne.n	8007d98 <OV5640_SetResolution+0xfc>
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8007cdc:	2e04      	cmp	r6, #4
 8007cde:	d1ee      	bne.n	8007cbe <OV5640_SetResolution+0x22>
    ret = OV5640_ERROR;
 8007ce0:	2000      	movs	r0, #0
}
 8007ce2:	b003      	add	sp, #12
 8007ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8007ce6:	f100 0418 	add.w	r4, r0, #24
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8007cea:	2600      	movs	r6, #0
 8007cec:	f10d 0507 	add.w	r5, sp, #7
 8007cf0:	4f30      	ldr	r7, [pc, #192]	; (8007db4 <OV5640_SetResolution+0x118>)
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8007cf2:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8007cfc:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8007cfe:	8852      	ldrh	r2, [r2, #2]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8007d00:	441e      	add	r6, r3
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8007d02:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8007d06:	462a      	mov	r2, r5
 8007d08:	f001 f840 	bl	8008d8c <ov5640_write_reg>
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	d143      	bne.n	8007d98 <OV5640_SetResolution+0xfc>
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8007d10:	2e04      	cmp	r6, #4
 8007d12:	d1ee      	bne.n	8007cf2 <OV5640_SetResolution+0x56>
 8007d14:	e7e4      	b.n	8007ce0 <OV5640_SetResolution+0x44>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8007d16:	f100 0418 	add.w	r4, r0, #24
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8007d1a:	2600      	movs	r6, #0
 8007d1c:	f10d 0507 	add.w	r5, sp, #7
 8007d20:	4f25      	ldr	r7, [pc, #148]	; (8007db8 <OV5640_SetResolution+0x11c>)
            tmp = (uint8_t)OV5640_480x272[index][1];
 8007d22:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8007d26:	2301      	movs	r3, #1
 8007d28:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8007d2c:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_480x272[index][1];
 8007d2e:	8852      	ldrh	r2, [r2, #2]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8007d30:	441e      	add	r6, r3
            tmp = (uint8_t)OV5640_480x272[index][1];
 8007d32:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8007d36:	462a      	mov	r2, r5
 8007d38:	f001 f828 	bl	8008d8c <ov5640_write_reg>
 8007d3c:	bb60      	cbnz	r0, 8007d98 <OV5640_SetResolution+0xfc>
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8007d3e:	2e04      	cmp	r6, #4
 8007d40:	d1ef      	bne.n	8007d22 <OV5640_SetResolution+0x86>
 8007d42:	e7cd      	b.n	8007ce0 <OV5640_SetResolution+0x44>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8007d44:	f100 0418 	add.w	r4, r0, #24
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8007d48:	2600      	movs	r6, #0
 8007d4a:	f10d 0507 	add.w	r5, sp, #7
 8007d4e:	4f1b      	ldr	r7, [pc, #108]	; (8007dbc <OV5640_SetResolution+0x120>)
            tmp = (uint8_t)OV5640_VGA[index][1];
 8007d50:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8007d54:	2301      	movs	r3, #1
 8007d56:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8007d5a:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_VGA[index][1];
 8007d5c:	8852      	ldrh	r2, [r2, #2]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8007d5e:	441e      	add	r6, r3
            tmp = (uint8_t)OV5640_VGA[index][1];
 8007d60:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8007d64:	462a      	mov	r2, r5
 8007d66:	f001 f811 	bl	8008d8c <ov5640_write_reg>
 8007d6a:	b9a8      	cbnz	r0, 8007d98 <OV5640_SetResolution+0xfc>
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8007d6c:	2e04      	cmp	r6, #4
 8007d6e:	d1ef      	bne.n	8007d50 <OV5640_SetResolution+0xb4>
 8007d70:	e7b6      	b.n	8007ce0 <OV5640_SetResolution+0x44>
    switch (Resolution)
 8007d72:	2600      	movs	r6, #0
 8007d74:	4f12      	ldr	r7, [pc, #72]	; (8007dc0 <OV5640_SetResolution+0x124>)
 8007d76:	f10d 0507 	add.w	r5, sp, #7
 8007d7a:	f100 0418 	add.w	r4, r0, #24
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8007d7e:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8007d82:	2301      	movs	r3, #1
 8007d84:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8007d88:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8007d8a:	8852      	ldrh	r2, [r2, #2]
 8007d8c:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8007d90:	462a      	mov	r2, r5
 8007d92:	f000 fffb 	bl	8008d8c <ov5640_write_reg>
 8007d96:	b130      	cbz	r0, 8007da6 <OV5640_SetResolution+0x10a>
    ret = OV5640_ERROR;
 8007d98:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007d9c:	b003      	add	sp, #12
 8007d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = OV5640_ERROR;
 8007da0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007da4:	4770      	bx	lr
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8007da6:	3601      	adds	r6, #1
 8007da8:	2e04      	cmp	r6, #4
 8007daa:	d1e8      	bne.n	8007d7e <OV5640_SetResolution+0xe2>
 8007dac:	e798      	b.n	8007ce0 <OV5640_SetResolution+0x44>
 8007dae:	bf00      	nop
 8007db0:	08098fd4 	.word	0x08098fd4
 8007db4:	08098fb4 	.word	0x08098fb4
 8007db8:	08098b10 	.word	0x08098b10
 8007dbc:	08098fc4 	.word	0x08098fc4
 8007dc0:	08098fa4 	.word	0x08098fa4

08007dc4 <OV5640_SetLightMode>:
{
 8007dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmp = 0x00;
 8007dc6:	2200      	movs	r2, #0
{
 8007dc8:	b083      	sub	sp, #12
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8007dca:	f100 0518 	add.w	r5, r0, #24
 8007dce:	2301      	movs	r3, #1
  tmp = 0x00;
 8007dd0:	f88d 2007 	strb.w	r2, [sp, #7]
{
 8007dd4:	460e      	mov	r6, r1
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8007dd6:	f10d 0207 	add.w	r2, sp, #7
 8007dda:	f243 4106 	movw	r1, #13318	; 0x3406
 8007dde:	4628      	mov	r0, r5
 8007de0:	f000 ffd4 	bl	8008d8c <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007de4:	4604      	mov	r4, r0
 8007de6:	b110      	cbz	r0, 8007dee <OV5640_SetLightMode+0x2a>
}
 8007de8:	4620      	mov	r0, r4
 8007dea:	b003      	add	sp, #12
 8007dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 0x46;
 8007dee:	2246      	movs	r2, #70	; 0x46
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8007df0:	2301      	movs	r3, #1
 8007df2:	f245 1190 	movw	r1, #20880	; 0x5190
 8007df6:	4628      	mov	r0, r5
    tmp = 0x46;
 8007df8:	f88d 2007 	strb.w	r2, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8007dfc:	f10d 0207 	add.w	r2, sp, #7
 8007e00:	f000 ffc4 	bl	8008d8c <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007e04:	4604      	mov	r4, r0
 8007e06:	2800      	cmp	r0, #0
 8007e08:	d1ee      	bne.n	8007de8 <OV5640_SetLightMode+0x24>
    tmp = 0xF8;
 8007e0a:	22f8      	movs	r2, #248	; 0xf8
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	f245 1191 	movw	r1, #20881	; 0x5191
 8007e12:	4628      	mov	r0, r5
    tmp = 0xF8;
 8007e14:	f88d 2007 	strb.w	r2, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 8007e18:	f10d 0207 	add.w	r2, sp, #7
 8007e1c:	f000 ffb6 	bl	8008d8c <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007e20:	4604      	mov	r4, r0
 8007e22:	2800      	cmp	r0, #0
 8007e24:	d1e0      	bne.n	8007de8 <OV5640_SetLightMode+0x24>
    tmp = 0x04;
 8007e26:	2204      	movs	r2, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 8007e28:	2301      	movs	r3, #1
 8007e2a:	f245 1192 	movw	r1, #20882	; 0x5192
 8007e2e:	4628      	mov	r0, r5
    tmp = 0x04;
 8007e30:	f88d 2007 	strb.w	r2, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 8007e34:	f10d 0207 	add.w	r2, sp, #7
 8007e38:	f000 ffa8 	bl	8008d8c <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007e3c:	4604      	mov	r4, r0
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	d1d2      	bne.n	8007de8 <OV5640_SetLightMode+0x24>
    switch (LightMode)
 8007e42:	1e71      	subs	r1, r6, #1
 8007e44:	2600      	movs	r6, #0
 8007e46:	2907      	cmp	r1, #7
 8007e48:	d805      	bhi.n	8007e56 <OV5640_SetLightMode+0x92>
 8007e4a:	e8df f001 	tbb	[pc, r1]
 8007e4e:	607c      	.short	0x607c
 8007e50:	04044304 	.word	0x04044304
 8007e54:	2604      	.short	0x2604
 8007e56:	4f54      	ldr	r7, [pc, #336]	; (8007fa8 <OV5640_SetLightMode+0x1e4>)
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8007e58:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8007e62:	4628      	mov	r0, r5
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8007e64:	8852      	ldrh	r2, [r2, #2]
 8007e66:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8007e6a:	f10d 0207 	add.w	r2, sp, #7
 8007e6e:	f000 ff8d 	bl	8008d8c <ov5640_write_reg>
 8007e72:	2800      	cmp	r0, #0
 8007e74:	f000 8086 	beq.w	8007f84 <OV5640_SetLightMode+0x1c0>
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8007e78:	2e06      	cmp	r6, #6
 8007e7a:	d009      	beq.n	8007e90 <OV5640_SetLightMode+0xcc>
 8007e7c:	2e05      	cmp	r6, #5
 8007e7e:	f106 0302 	add.w	r3, r6, #2
 8007e82:	d005      	beq.n	8007e90 <OV5640_SetLightMode+0xcc>
 8007e84:	2b06      	cmp	r3, #6
 8007e86:	f103 0302 	add.w	r3, r3, #2
 8007e8a:	d001      	beq.n	8007e90 <OV5640_SetLightMode+0xcc>
 8007e8c:	2b07      	cmp	r3, #7
 8007e8e:	d1f9      	bne.n	8007e84 <OV5640_SetLightMode+0xc0>
    switch (LightMode)
 8007e90:	f04f 34ff 	mov.w	r4, #4294967295
}
 8007e94:	4620      	mov	r0, r4
 8007e96:	b003      	add	sp, #12
 8007e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e9a:	4f44      	ldr	r7, [pc, #272]	; (8007fac <OV5640_SetLightMode+0x1e8>)
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8007e9c:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8007ea6:	4628      	mov	r0, r5
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8007ea8:	8852      	ldrh	r2, [r2, #2]
 8007eaa:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8007eae:	f10d 0207 	add.w	r2, sp, #7
 8007eb2:	f000 ff6b 	bl	8008d8c <ov5640_write_reg>
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	d058      	beq.n	8007f6c <OV5640_SetLightMode+0x1a8>
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8007eba:	2e06      	cmp	r6, #6
 8007ebc:	d0e8      	beq.n	8007e90 <OV5640_SetLightMode+0xcc>
 8007ebe:	2e05      	cmp	r6, #5
 8007ec0:	f106 0302 	add.w	r3, r6, #2
 8007ec4:	d0e4      	beq.n	8007e90 <OV5640_SetLightMode+0xcc>
 8007ec6:	2b06      	cmp	r3, #6
 8007ec8:	f103 0302 	add.w	r3, r3, #2
 8007ecc:	d0e0      	beq.n	8007e90 <OV5640_SetLightMode+0xcc>
 8007ece:	2b07      	cmp	r3, #7
 8007ed0:	d1f9      	bne.n	8007ec6 <OV5640_SetLightMode+0x102>
 8007ed2:	e7dd      	b.n	8007e90 <OV5640_SetLightMode+0xcc>
 8007ed4:	4f36      	ldr	r7, [pc, #216]	; (8007fb0 <OV5640_SetLightMode+0x1ec>)
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8007ed6:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8007eda:	2301      	movs	r3, #1
 8007edc:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8007ee0:	4628      	mov	r0, r5
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8007ee2:	8852      	ldrh	r2, [r2, #2]
 8007ee4:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8007ee8:	f10d 0207 	add.w	r2, sp, #7
 8007eec:	f000 ff4e 	bl	8008d8c <ov5640_write_reg>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	d03f      	beq.n	8007f74 <OV5640_SetLightMode+0x1b0>
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8007ef4:	2e06      	cmp	r6, #6
 8007ef6:	d0cb      	beq.n	8007e90 <OV5640_SetLightMode+0xcc>
 8007ef8:	2e05      	cmp	r6, #5
 8007efa:	f106 0302 	add.w	r3, r6, #2
 8007efe:	d0c7      	beq.n	8007e90 <OV5640_SetLightMode+0xcc>
 8007f00:	2b06      	cmp	r3, #6
 8007f02:	f103 0302 	add.w	r3, r3, #2
 8007f06:	d0c3      	beq.n	8007e90 <OV5640_SetLightMode+0xcc>
 8007f08:	2b07      	cmp	r3, #7
 8007f0a:	d1f9      	bne.n	8007f00 <OV5640_SetLightMode+0x13c>
 8007f0c:	e7c0      	b.n	8007e90 <OV5640_SetLightMode+0xcc>
 8007f0e:	4f29      	ldr	r7, [pc, #164]	; (8007fb4 <OV5640_SetLightMode+0x1f0>)
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8007f10:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8007f14:	2301      	movs	r3, #1
 8007f16:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8007f1a:	4628      	mov	r0, r5
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8007f1c:	8852      	ldrh	r2, [r2, #2]
 8007f1e:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8007f22:	f10d 0207 	add.w	r2, sp, #7
 8007f26:	f000 ff31 	bl	8008d8c <ov5640_write_reg>
 8007f2a:	b338      	cbz	r0, 8007f7c <OV5640_SetLightMode+0x1b8>
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8007f2c:	2e06      	cmp	r6, #6
 8007f2e:	d0af      	beq.n	8007e90 <OV5640_SetLightMode+0xcc>
 8007f30:	2e05      	cmp	r6, #5
 8007f32:	f106 0302 	add.w	r3, r6, #2
 8007f36:	d0ab      	beq.n	8007e90 <OV5640_SetLightMode+0xcc>
 8007f38:	2b06      	cmp	r3, #6
 8007f3a:	f103 0302 	add.w	r3, r3, #2
 8007f3e:	d0a7      	beq.n	8007e90 <OV5640_SetLightMode+0xcc>
 8007f40:	2b07      	cmp	r3, #7
 8007f42:	d1f9      	bne.n	8007f38 <OV5640_SetLightMode+0x174>
 8007f44:	e7a4      	b.n	8007e90 <OV5640_SetLightMode+0xcc>
 8007f46:	4f1c      	ldr	r7, [pc, #112]	; (8007fb8 <OV5640_SetLightMode+0x1f4>)
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8007f48:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8007f52:	4628      	mov	r0, r5
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8007f54:	8852      	ldrh	r2, [r2, #2]
 8007f56:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8007f5a:	f10d 0207 	add.w	r2, sp, #7
 8007f5e:	f000 ff15 	bl	8008d8c <ov5640_write_reg>
 8007f62:	b9a0      	cbnz	r0, 8007f8e <OV5640_SetLightMode+0x1ca>
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8007f64:	3601      	adds	r6, #1
 8007f66:	2e07      	cmp	r6, #7
 8007f68:	d1ee      	bne.n	8007f48 <OV5640_SetLightMode+0x184>
 8007f6a:	e73d      	b.n	8007de8 <OV5640_SetLightMode+0x24>
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8007f6c:	3601      	adds	r6, #1
 8007f6e:	2e07      	cmp	r6, #7
 8007f70:	d194      	bne.n	8007e9c <OV5640_SetLightMode+0xd8>
 8007f72:	e739      	b.n	8007de8 <OV5640_SetLightMode+0x24>
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8007f74:	3601      	adds	r6, #1
 8007f76:	2e07      	cmp	r6, #7
 8007f78:	d1ad      	bne.n	8007ed6 <OV5640_SetLightMode+0x112>
 8007f7a:	e735      	b.n	8007de8 <OV5640_SetLightMode+0x24>
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8007f7c:	3601      	adds	r6, #1
 8007f7e:	2e07      	cmp	r6, #7
 8007f80:	d1c6      	bne.n	8007f10 <OV5640_SetLightMode+0x14c>
 8007f82:	e731      	b.n	8007de8 <OV5640_SetLightMode+0x24>
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8007f84:	3601      	adds	r6, #1
 8007f86:	2e07      	cmp	r6, #7
 8007f88:	f47f af66 	bne.w	8007e58 <OV5640_SetLightMode+0x94>
 8007f8c:	e72c      	b.n	8007de8 <OV5640_SetLightMode+0x24>
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8007f8e:	2e06      	cmp	r6, #6
 8007f90:	f106 0301 	add.w	r3, r6, #1
 8007f94:	f43f af7c 	beq.w	8007e90 <OV5640_SetLightMode+0xcc>
 8007f98:	2b06      	cmp	r3, #6
 8007f9a:	f103 0302 	add.w	r3, r3, #2
 8007f9e:	f43f af77 	beq.w	8007e90 <OV5640_SetLightMode+0xcc>
 8007fa2:	2b07      	cmp	r3, #7
 8007fa4:	d1f8      	bne.n	8007f98 <OV5640_SetLightMode+0x1d4>
 8007fa6:	e773      	b.n	8007e90 <OV5640_SetLightMode+0xcc>
 8007fa8:	08098f18 	.word	0x08098f18
 8007fac:	08098f34 	.word	0x08098f34
 8007fb0:	08098f50 	.word	0x08098f50
 8007fb4:	08098f6c 	.word	0x08098f6c
 8007fb8:	08098f88 	.word	0x08098f88

08007fbc <OV5640_SetColorEffect>:
  switch (Effect)
 8007fbc:	3901      	subs	r1, #1
{
 8007fbe:	b530      	push	{r4, r5, lr}
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007fc0:	f100 0418 	add.w	r4, r0, #24
{
 8007fc4:	b083      	sub	sp, #12
  switch (Effect)
 8007fc6:	291f      	cmp	r1, #31
 8007fc8:	d821      	bhi.n	800800e <OV5640_SetColorEffect+0x52>
 8007fca:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007fce:	0033      	.short	0x0033
 8007fd0:	00200062 	.word	0x00200062
 8007fd4:	00200091 	.word	0x00200091
 8007fd8:	00200020 	.word	0x00200020
 8007fdc:	002000ad 	.word	0x002000ad
 8007fe0:	00200020 	.word	0x00200020
 8007fe4:	00200020 	.word	0x00200020
 8007fe8:	00200020 	.word	0x00200020
 8007fec:	002000e7 	.word	0x002000e7
 8007ff0:	00200020 	.word	0x00200020
 8007ff4:	00200020 	.word	0x00200020
 8007ff8:	00200020 	.word	0x00200020
 8007ffc:	00200020 	.word	0x00200020
 8008000:	00200020 	.word	0x00200020
 8008004:	00200020 	.word	0x00200020
 8008008:	00200020 	.word	0x00200020
 800800c:	0119      	.short	0x0119
      tmp = 0x7F;
 800800e:	217f      	movs	r1, #127	; 0x7f
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008010:	2301      	movs	r3, #1
 8008012:	f10d 0207 	add.w	r2, sp, #7
 8008016:	4620      	mov	r0, r4
      tmp = 0x7F;
 8008018:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800801c:	f245 0101 	movw	r1, #20481	; 0x5001
 8008020:	f000 feb4 	bl	8008d8c <ov5640_write_reg>
      if (ret == OV5640_OK)
 8008024:	4684      	mov	ip, r0
 8008026:	2800      	cmp	r0, #0
 8008028:	f000 80fa 	beq.w	8008220 <OV5640_SetColorEffect+0x264>
        ret = OV5640_ERROR;
 800802c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008030:	b003      	add	sp, #12
 8008032:	bd30      	pop	{r4, r5, pc}
      tmp = 0xFF;
 8008034:	21ff      	movs	r1, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008036:	2301      	movs	r3, #1
 8008038:	f10d 0207 	add.w	r2, sp, #7
 800803c:	4620      	mov	r0, r4
      tmp = 0xFF;
 800803e:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008042:	f245 0101 	movw	r1, #20481	; 0x5001
 8008046:	f000 fea1 	bl	8008d8c <ov5640_write_reg>
      if (ret == OV5640_OK)
 800804a:	2800      	cmp	r0, #0
 800804c:	d1ee      	bne.n	800802c <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 800804e:	2118      	movs	r1, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8008050:	2301      	movs	r3, #1
 8008052:	f10d 0207 	add.w	r2, sp, #7
 8008056:	4620      	mov	r0, r4
        tmp = 0x18;
 8008058:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800805c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8008060:	f000 fe94 	bl	8008d8c <ov5640_write_reg>
      if (ret == OV5640_OK)
 8008064:	2800      	cmp	r0, #0
 8008066:	d1e1      	bne.n	800802c <OV5640_SetColorEffect+0x70>
        tmp = 0xA0;
 8008068:	21a0      	movs	r1, #160	; 0xa0
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800806a:	2301      	movs	r3, #1
 800806c:	f10d 0207 	add.w	r2, sp, #7
 8008070:	4620      	mov	r0, r4
        tmp = 0xA0;
 8008072:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8008076:	f245 5183 	movw	r1, #21891	; 0x5583
 800807a:	f000 fe87 	bl	8008d8c <ov5640_write_reg>
      if (ret == OV5640_OK)
 800807e:	2800      	cmp	r0, #0
 8008080:	d1d4      	bne.n	800802c <OV5640_SetColorEffect+0x70>
        tmp = 0x40;
 8008082:	f04f 0c40 	mov.w	ip, #64	; 0x40
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8008086:	2301      	movs	r3, #1
 8008088:	f10d 0207 	add.w	r2, sp, #7
 800808c:	f245 5184 	movw	r1, #21892	; 0x5584
 8008090:	e0cb      	b.n	800822a <OV5640_SetColorEffect+0x26e>
      tmp = 0xFF;
 8008092:	21ff      	movs	r1, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008094:	2301      	movs	r3, #1
 8008096:	f10d 0207 	add.w	r2, sp, #7
 800809a:	4620      	mov	r0, r4
      tmp = 0xFF;
 800809c:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80080a0:	f245 0101 	movw	r1, #20481	; 0x5001
 80080a4:	f000 fe72 	bl	8008d8c <ov5640_write_reg>
      if (ret == OV5640_OK)
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d1bf      	bne.n	800802c <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 80080ac:	2118      	movs	r1, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80080ae:	2301      	movs	r3, #1
 80080b0:	f10d 0207 	add.w	r2, sp, #7
 80080b4:	4620      	mov	r0, r4
        tmp = 0x18;
 80080b6:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80080ba:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80080be:	f000 fe65 	bl	8008d8c <ov5640_write_reg>
      if (ret == OV5640_OK)
 80080c2:	2800      	cmp	r0, #0
 80080c4:	d1b2      	bne.n	800802c <OV5640_SetColorEffect+0x70>
        tmp = 0x80;
 80080c6:	2180      	movs	r1, #128	; 0x80
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80080c8:	2301      	movs	r3, #1
 80080ca:	f10d 0207 	add.w	r2, sp, #7
 80080ce:	4620      	mov	r0, r4
        tmp = 0x80;
 80080d0:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80080d4:	f245 5183 	movw	r1, #21891	; 0x5583
 80080d8:	f000 fe58 	bl	8008d8c <ov5640_write_reg>
      if (ret == OV5640_OK)
 80080dc:	2800      	cmp	r0, #0
 80080de:	d1a5      	bne.n	800802c <OV5640_SetColorEffect+0x70>
        tmp = 0xC0;
 80080e0:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80080e4:	2301      	movs	r3, #1
 80080e6:	f10d 0207 	add.w	r2, sp, #7
 80080ea:	f245 5184 	movw	r1, #21892	; 0x5584
 80080ee:	e09c      	b.n	800822a <OV5640_SetColorEffect+0x26e>
      tmp = 0xFF;
 80080f0:	21ff      	movs	r1, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80080f2:	2301      	movs	r3, #1
 80080f4:	f10d 0207 	add.w	r2, sp, #7
 80080f8:	4620      	mov	r0, r4
      tmp = 0xFF;
 80080fa:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80080fe:	f245 0101 	movw	r1, #20481	; 0x5001
 8008102:	f000 fe43 	bl	8008d8c <ov5640_write_reg>
      if (ret == OV5640_OK)
 8008106:	2800      	cmp	r0, #0
 8008108:	d190      	bne.n	800802c <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 800810a:	2118      	movs	r1, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800810c:	2301      	movs	r3, #1
 800810e:	f10d 0207 	add.w	r2, sp, #7
 8008112:	4620      	mov	r0, r4
        tmp = 0x18;
 8008114:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8008118:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800811c:	f000 fe36 	bl	8008d8c <ov5640_write_reg>
      if (ret == OV5640_OK)
 8008120:	2800      	cmp	r0, #0
 8008122:	d183      	bne.n	800802c <OV5640_SetColorEffect+0x70>
        tmp = 0x60;
 8008124:	2560      	movs	r5, #96	; 0x60
 8008126:	e01c      	b.n	8008162 <OV5640_SetColorEffect+0x1a6>
      tmp = 0xFF;
 8008128:	21ff      	movs	r1, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800812a:	2301      	movs	r3, #1
 800812c:	f10d 0207 	add.w	r2, sp, #7
 8008130:	4620      	mov	r0, r4
      tmp = 0xFF;
 8008132:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008136:	f245 0101 	movw	r1, #20481	; 0x5001
 800813a:	f000 fe27 	bl	8008d8c <ov5640_write_reg>
      if (ret == OV5640_OK)
 800813e:	2800      	cmp	r0, #0
 8008140:	f47f af74 	bne.w	800802c <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 8008144:	2118      	movs	r1, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8008146:	2301      	movs	r3, #1
 8008148:	f10d 0207 	add.w	r2, sp, #7
 800814c:	4620      	mov	r0, r4
        tmp = 0x18;
 800814e:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8008152:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8008156:	f000 fe19 	bl	8008d8c <ov5640_write_reg>
      if (ret == OV5640_OK)
 800815a:	2800      	cmp	r0, #0
 800815c:	f47f af66 	bne.w	800802c <OV5640_SetColorEffect+0x70>
        tmp = 0x80;
 8008160:	2580      	movs	r5, #128	; 0x80
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8008162:	2301      	movs	r3, #1
 8008164:	f10d 0207 	add.w	r2, sp, #7
 8008168:	f245 5183 	movw	r1, #21891	; 0x5583
 800816c:	4620      	mov	r0, r4
        tmp = 0x80;
 800816e:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8008172:	f000 fe0b 	bl	8008d8c <ov5640_write_reg>
      if (ret == OV5640_OK)
 8008176:	2800      	cmp	r0, #0
 8008178:	f47f af58 	bne.w	800802c <OV5640_SetColorEffect+0x70>
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800817c:	2301      	movs	r3, #1
 800817e:	f10d 0207 	add.w	r2, sp, #7
 8008182:	f245 5184 	movw	r1, #21892	; 0x5584
 8008186:	4620      	mov	r0, r4
        tmp = 0x80;
 8008188:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800818c:	f000 fdfe 	bl	8008d8c <ov5640_write_reg>
      if (ret != OV5640_OK)
 8008190:	3800      	subs	r0, #0
 8008192:	bf18      	it	ne
 8008194:	2001      	movne	r0, #1
 8008196:	4240      	negs	r0, r0
}
 8008198:	b003      	add	sp, #12
 800819a:	bd30      	pop	{r4, r5, pc}
      tmp = 0xFF;
 800819c:	21ff      	movs	r1, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800819e:	2301      	movs	r3, #1
 80081a0:	f10d 0207 	add.w	r2, sp, #7
 80081a4:	4620      	mov	r0, r4
      tmp = 0xFF;
 80081a6:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80081aa:	f245 0101 	movw	r1, #20481	; 0x5001
 80081ae:	f000 fded 	bl	8008d8c <ov5640_write_reg>
      if (ret == OV5640_OK)
 80081b2:	2800      	cmp	r0, #0
 80081b4:	f47f af3a 	bne.w	800802c <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 80081b8:	2118      	movs	r1, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80081ba:	2301      	movs	r3, #1
 80081bc:	f10d 0207 	add.w	r2, sp, #7
 80081c0:	4620      	mov	r0, r4
        tmp = 0x18;
 80081c2:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80081c6:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80081ca:	f000 fddf 	bl	8008d8c <ov5640_write_reg>
      if (ret == OV5640_OK)
 80081ce:	2800      	cmp	r0, #0
 80081d0:	f47f af2c 	bne.w	800802c <OV5640_SetColorEffect+0x70>
        tmp = 0x40;
 80081d4:	2140      	movs	r1, #64	; 0x40
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80081d6:	2301      	movs	r3, #1
 80081d8:	f10d 0207 	add.w	r2, sp, #7
 80081dc:	4620      	mov	r0, r4
        tmp = 0x40;
 80081de:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80081e2:	f245 5183 	movw	r1, #21891	; 0x5583
 80081e6:	f000 fdd1 	bl	8008d8c <ov5640_write_reg>
      if (ret == OV5640_OK)
 80081ea:	2800      	cmp	r0, #0
 80081ec:	f47f af1e 	bne.w	800802c <OV5640_SetColorEffect+0x70>
        tmp = 0xA0;
 80081f0:	f04f 0ca0 	mov.w	ip, #160	; 0xa0
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80081f4:	2301      	movs	r3, #1
 80081f6:	f10d 0207 	add.w	r2, sp, #7
 80081fa:	f245 5184 	movw	r1, #21892	; 0x5584
 80081fe:	e014      	b.n	800822a <OV5640_SetColorEffect+0x26e>
      tmp = 0xFF;
 8008200:	21ff      	movs	r1, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008202:	2301      	movs	r3, #1
 8008204:	f10d 0207 	add.w	r2, sp, #7
 8008208:	4620      	mov	r0, r4
      tmp = 0xFF;
 800820a:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800820e:	f245 0101 	movw	r1, #20481	; 0x5001
 8008212:	f000 fdbb 	bl	8008d8c <ov5640_write_reg>
      if (ret == OV5640_OK)
 8008216:	2800      	cmp	r0, #0
 8008218:	f47f af08 	bne.w	800802c <OV5640_SetColorEffect+0x70>
        tmp = 0x40;
 800821c:	f04f 0c40 	mov.w	ip, #64	; 0x40
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8008220:	2301      	movs	r3, #1
 8008222:	f10d 0207 	add.w	r2, sp, #7
 8008226:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800822a:	4620      	mov	r0, r4
        tmp = 0x00;
 800822c:	f88d c007 	strb.w	ip, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8008230:	f000 fdac 	bl	8008d8c <ov5640_write_reg>
      if (ret != OV5640_OK)
 8008234:	3800      	subs	r0, #0
 8008236:	bf18      	it	ne
 8008238:	2001      	movne	r0, #1
 800823a:	4240      	negs	r0, r0
}
 800823c:	b003      	add	sp, #12
 800823e:	bd30      	pop	{r4, r5, pc}

08008240 <OV5640_SetBrightness>:
{
 8008240:	b530      	push	{r4, r5, lr}
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8008242:	4a2c      	ldr	r2, [pc, #176]	; (80082f4 <OV5640_SetBrightness+0xb4>)
{
 8008244:	b085      	sub	sp, #20
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008246:	f100 0418 	add.w	r4, r0, #24
{
 800824a:	460d      	mov	r5, r1
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 800824c:	ab01      	add	r3, sp, #4
 800824e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008250:	c303      	stmia	r3!, {r0, r1}
  tmp = 0xFF;
 8008252:	21ff      	movs	r1, #255	; 0xff
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8008254:	701a      	strb	r2, [r3, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008256:	4620      	mov	r0, r4
 8008258:	2301      	movs	r3, #1
  tmp = 0xFF;
 800825a:	f88d 1003 	strb.w	r1, [sp, #3]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800825e:	f10d 0203 	add.w	r2, sp, #3
 8008262:	f245 0101 	movw	r1, #20481	; 0x5001
 8008266:	f000 fd91 	bl	8008d8c <ov5640_write_reg>
  if (ret == OV5640_OK)
 800826a:	b108      	cbz	r0, 8008270 <OV5640_SetBrightness+0x30>
}
 800826c:	b005      	add	sp, #20
 800826e:	bd30      	pop	{r4, r5, pc}
    tmp = brightness_level[Level + 4];
 8008270:	f105 0210 	add.w	r2, r5, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8008274:	2301      	movs	r3, #1
 8008276:	f245 5187 	movw	r1, #21895	; 0x5587
 800827a:	4620      	mov	r0, r4
    tmp = brightness_level[Level + 4];
 800827c:	446a      	add	r2, sp
 800827e:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8008282:	f88d 2003 	strb.w	r2, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8008286:	f10d 0203 	add.w	r2, sp, #3
 800828a:	f000 fd7f 	bl	8008d8c <ov5640_write_reg>
  if (ret == OV5640_OK)
 800828e:	2800      	cmp	r0, #0
 8008290:	d1ec      	bne.n	800826c <OV5640_SetBrightness+0x2c>
    tmp = 0x04;
 8008292:	2204      	movs	r2, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8008294:	2301      	movs	r3, #1
 8008296:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800829a:	4620      	mov	r0, r4
    tmp = 0x04;
 800829c:	f88d 2003 	strb.w	r2, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80082a0:	f10d 0203 	add.w	r2, sp, #3
 80082a4:	f000 fd72 	bl	8008d8c <ov5640_write_reg>
  if (ret == OV5640_OK)
 80082a8:	2800      	cmp	r0, #0
 80082aa:	d1df      	bne.n	800826c <OV5640_SetBrightness+0x2c>
    if (Level < 0)
 80082ac:	2d00      	cmp	r5, #0
 80082ae:	db10      	blt.n	80082d2 <OV5640_SetBrightness+0x92>
      tmp = 0x09;
 80082b0:	2509      	movs	r5, #9
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 80082b2:	2301      	movs	r3, #1
 80082b4:	f10d 0203 	add.w	r2, sp, #3
 80082b8:	f245 5188 	movw	r1, #21896	; 0x5588
 80082bc:	4620      	mov	r0, r4
      tmp = 0x09;
 80082be:	f88d 5003 	strb.w	r5, [sp, #3]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 80082c2:	f000 fd63 	bl	8008d8c <ov5640_write_reg>
 80082c6:	3800      	subs	r0, #0
 80082c8:	bf18      	it	ne
 80082ca:	2001      	movne	r0, #1
 80082cc:	4240      	negs	r0, r0
}
 80082ce:	b005      	add	sp, #20
 80082d0:	bd30      	pop	{r4, r5, pc}
      tmp = 0x01;
 80082d2:	2301      	movs	r3, #1
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 80082d4:	f10d 0203 	add.w	r2, sp, #3
 80082d8:	f245 5188 	movw	r1, #21896	; 0x5588
 80082dc:	4620      	mov	r0, r4
      tmp = 0x01;
 80082de:	f88d 3003 	strb.w	r3, [sp, #3]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 80082e2:	f000 fd53 	bl	8008d8c <ov5640_write_reg>
 80082e6:	3800      	subs	r0, #0
 80082e8:	bf18      	it	ne
 80082ea:	2001      	movne	r0, #1
 80082ec:	4240      	negs	r0, r0
}
 80082ee:	b005      	add	sp, #20
 80082f0:	bd30      	pop	{r4, r5, pc}
 80082f2:	bf00      	nop
 80082f4:	08028c20 	.word	0x08028c20

080082f8 <OV5640_SetSaturation>:
{
 80082f8:	b530      	push	{r4, r5, lr}
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 80082fa:	4a29      	ldr	r2, [pc, #164]	; (80083a0 <OV5640_SetSaturation+0xa8>)
{
 80082fc:	b085      	sub	sp, #20
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80082fe:	f100 0418 	add.w	r4, r0, #24
{
 8008302:	460d      	mov	r5, r1
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8008304:	ab01      	add	r3, sp, #4
 8008306:	ca07      	ldmia	r2, {r0, r1, r2}
 8008308:	c303      	stmia	r3!, {r0, r1}
  tmp = 0xFF;
 800830a:	21ff      	movs	r1, #255	; 0xff
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 800830c:	701a      	strb	r2, [r3, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800830e:	4620      	mov	r0, r4
 8008310:	2301      	movs	r3, #1
  tmp = 0xFF;
 8008312:	f88d 1003 	strb.w	r1, [sp, #3]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008316:	f10d 0203 	add.w	r2, sp, #3
 800831a:	f245 0101 	movw	r1, #20481	; 0x5001
 800831e:	f000 fd35 	bl	8008d8c <ov5640_write_reg>
  if (ret == OV5640_OK)
 8008322:	b118      	cbz	r0, 800832c <OV5640_SetSaturation+0x34>
    ret = OV5640_ERROR;
 8008324:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008328:	b005      	add	sp, #20
 800832a:	bd30      	pop	{r4, r5, pc}
    tmp = saturation_level[Level + 4];
 800832c:	f105 0310 	add.w	r3, r5, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8008330:	f10d 0203 	add.w	r2, sp, #3
 8008334:	4620      	mov	r0, r4
    tmp = saturation_level[Level + 4];
 8008336:	eb0d 0103 	add.w	r1, sp, r3
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800833a:	2301      	movs	r3, #1
    tmp = saturation_level[Level + 4];
 800833c:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8008340:	f88d 1003 	strb.w	r1, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8008344:	f245 5183 	movw	r1, #21891	; 0x5583
 8008348:	f000 fd20 	bl	8008d8c <ov5640_write_reg>
  if (ret == OV5640_OK)
 800834c:	2800      	cmp	r0, #0
 800834e:	d1e9      	bne.n	8008324 <OV5640_SetSaturation+0x2c>
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8008350:	2301      	movs	r3, #1
 8008352:	f10d 0203 	add.w	r2, sp, #3
 8008356:	f245 5184 	movw	r1, #21892	; 0x5584
 800835a:	4620      	mov	r0, r4
 800835c:	f000 fd16 	bl	8008d8c <ov5640_write_reg>
  if (ret == OV5640_OK)
 8008360:	2800      	cmp	r0, #0
 8008362:	d1df      	bne.n	8008324 <OV5640_SetSaturation+0x2c>
    tmp = 0x02;
 8008364:	2102      	movs	r1, #2
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8008366:	2301      	movs	r3, #1
 8008368:	f10d 0203 	add.w	r2, sp, #3
 800836c:	4620      	mov	r0, r4
    tmp = 0x02;
 800836e:	f88d 1003 	strb.w	r1, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8008372:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8008376:	f000 fd09 	bl	8008d8c <ov5640_write_reg>
  if (ret == OV5640_OK)
 800837a:	2800      	cmp	r0, #0
 800837c:	d1d2      	bne.n	8008324 <OV5640_SetSaturation+0x2c>
    tmp = 0x41;
 800837e:	2541      	movs	r5, #65	; 0x41
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8008380:	2301      	movs	r3, #1
 8008382:	f10d 0203 	add.w	r2, sp, #3
 8008386:	f245 5188 	movw	r1, #21896	; 0x5588
 800838a:	4620      	mov	r0, r4
    tmp = 0x41;
 800838c:	f88d 5003 	strb.w	r5, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8008390:	f000 fcfc 	bl	8008d8c <ov5640_write_reg>
  if (ret != OV5640_OK)
 8008394:	3800      	subs	r0, #0
 8008396:	bf18      	it	ne
 8008398:	2001      	movne	r0, #1
 800839a:	4240      	negs	r0, r0
}
 800839c:	b005      	add	sp, #20
 800839e:	bd30      	pop	{r4, r5, pc}
 80083a0:	08028c2c 	.word	0x08028c2c

080083a4 <OV5640_SetContrast>:
{
 80083a4:	b530      	push	{r4, r5, lr}
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 80083a6:	4a29      	ldr	r2, [pc, #164]	; (800844c <OV5640_SetContrast+0xa8>)
{
 80083a8:	b085      	sub	sp, #20
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80083aa:	f100 0418 	add.w	r4, r0, #24
{
 80083ae:	460d      	mov	r5, r1
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 80083b0:	ab01      	add	r3, sp, #4
 80083b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80083b4:	c303      	stmia	r3!, {r0, r1}
  tmp = 0xFF;
 80083b6:	21ff      	movs	r1, #255	; 0xff
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 80083b8:	701a      	strb	r2, [r3, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80083ba:	4620      	mov	r0, r4
 80083bc:	2301      	movs	r3, #1
  tmp = 0xFF;
 80083be:	f88d 1003 	strb.w	r1, [sp, #3]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80083c2:	f10d 0203 	add.w	r2, sp, #3
 80083c6:	f245 0101 	movw	r1, #20481	; 0x5001
 80083ca:	f000 fcdf 	bl	8008d8c <ov5640_write_reg>
  if (ret == OV5640_OK)
 80083ce:	b118      	cbz	r0, 80083d8 <OV5640_SetContrast+0x34>
    ret = OV5640_ERROR;
 80083d0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80083d4:	b005      	add	sp, #20
 80083d6:	bd30      	pop	{r4, r5, pc}
    tmp = 0x04;
 80083d8:	2204      	movs	r2, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80083da:	2301      	movs	r3, #1
 80083dc:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80083e0:	4620      	mov	r0, r4
    tmp = 0x04;
 80083e2:	f88d 2003 	strb.w	r2, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80083e6:	f10d 0203 	add.w	r2, sp, #3
 80083ea:	f000 fccf 	bl	8008d8c <ov5640_write_reg>
  if (ret == OV5640_OK)
 80083ee:	2800      	cmp	r0, #0
 80083f0:	d1ee      	bne.n	80083d0 <OV5640_SetContrast+0x2c>
    tmp = contrast_level[Level + 4];
 80083f2:	f105 0310 	add.w	r3, r5, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 80083f6:	f10d 0203 	add.w	r2, sp, #3
 80083fa:	4620      	mov	r0, r4
    tmp = contrast_level[Level + 4];
 80083fc:	eb0d 0103 	add.w	r1, sp, r3
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 8008400:	2301      	movs	r3, #1
    tmp = contrast_level[Level + 4];
 8008402:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8008406:	f88d 1003 	strb.w	r1, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 800840a:	f245 5186 	movw	r1, #21894	; 0x5586
 800840e:	f000 fcbd 	bl	8008d8c <ov5640_write_reg>
  if (ret == OV5640_OK)
 8008412:	2800      	cmp	r0, #0
 8008414:	d1dc      	bne.n	80083d0 <OV5640_SetContrast+0x2c>
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 8008416:	2301      	movs	r3, #1
 8008418:	f10d 0203 	add.w	r2, sp, #3
 800841c:	f245 5185 	movw	r1, #21893	; 0x5585
 8008420:	4620      	mov	r0, r4
 8008422:	f000 fcb3 	bl	8008d8c <ov5640_write_reg>
  if (ret == OV5640_OK)
 8008426:	2800      	cmp	r0, #0
 8008428:	d1d2      	bne.n	80083d0 <OV5640_SetContrast+0x2c>
    tmp = 0x41;
 800842a:	2541      	movs	r5, #65	; 0x41
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 800842c:	2301      	movs	r3, #1
 800842e:	f10d 0203 	add.w	r2, sp, #3
 8008432:	f245 5188 	movw	r1, #21896	; 0x5588
 8008436:	4620      	mov	r0, r4
    tmp = 0x41;
 8008438:	f88d 5003 	strb.w	r5, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 800843c:	f000 fca6 	bl	8008d8c <ov5640_write_reg>
  if (ret != OV5640_OK)
 8008440:	3800      	subs	r0, #0
 8008442:	bf18      	it	ne
 8008444:	2001      	movne	r0, #1
 8008446:	4240      	negs	r0, r0
}
 8008448:	b005      	add	sp, #20
 800844a:	bd30      	pop	{r4, r5, pc}
 800844c:	08098af4 	.word	0x08098af4

08008450 <OV5640_SetHueDegree>:
{
 8008450:	b570      	push	{r4, r5, r6, lr}
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8008452:	4b33      	ldr	r3, [pc, #204]	; (8008520 <OV5640_SetHueDegree+0xd0>)
{
 8008454:	b08a      	sub	sp, #40	; 0x28
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008456:	f100 0418 	add.w	r4, r0, #24
{
 800845a:	460d      	mov	r5, r1
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 800845c:	f103 0c0c 	add.w	ip, r3, #12
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8008460:	f10d 0e04 	add.w	lr, sp, #4
 8008464:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8008468:	ab04      	add	r3, sp, #16
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 800846a:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 800846e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8008472:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8008476:	4b2b      	ldr	r3, [pc, #172]	; (8008524 <OV5640_SetHueDegree+0xd4>)
 8008478:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800847c:	ab0a      	add	r3, sp, #40	; 0x28
 800847e:	e903 0007 	stmdb	r3, {r0, r1, r2}
  tmp = 0xFF;
 8008482:	22ff      	movs	r2, #255	; 0xff
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008484:	2301      	movs	r3, #1
 8008486:	f245 0101 	movw	r1, #20481	; 0x5001
 800848a:	4620      	mov	r0, r4
  tmp = 0xFF;
 800848c:	f88d 2003 	strb.w	r2, [sp, #3]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008490:	f10d 0203 	add.w	r2, sp, #3
 8008494:	f000 fc7a 	bl	8008d8c <ov5640_write_reg>
  if (ret == OV5640_OK)
 8008498:	b118      	cbz	r0, 80084a2 <OV5640_SetHueDegree+0x52>
    ret = OV5640_ERROR;
 800849a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800849e:	b00a      	add	sp, #40	; 0x28
 80084a0:	bd70      	pop	{r4, r5, r6, pc}
    tmp = 0x01;
 80084a2:	2601      	movs	r6, #1
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80084a4:	f10d 0203 	add.w	r2, sp, #3
 80084a8:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80084ac:	4620      	mov	r0, r4
 80084ae:	4633      	mov	r3, r6
    tmp = 0x01;
 80084b0:	f88d 6003 	strb.w	r6, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80084b4:	f000 fc6a 	bl	8008d8c <ov5640_write_reg>
  if (ret == OV5640_OK)
 80084b8:	2800      	cmp	r0, #0
 80084ba:	d1ee      	bne.n	800849a <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl1[Degree + 6];
 80084bc:	f105 032e 	add.w	r3, r5, #46	; 0x2e
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 80084c0:	f10d 0203 	add.w	r2, sp, #3
 80084c4:	f245 5181 	movw	r1, #21889	; 0x5581
 80084c8:	4620      	mov	r0, r4
    tmp = hue_degree_ctrl1[Degree + 6];
 80084ca:	eb0d 0503 	add.w	r5, sp, r3
 80084ce:	f815 3c24 	ldrb.w	r3, [r5, #-36]
 80084d2:	f88d 3003 	strb.w	r3, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 80084d6:	4633      	mov	r3, r6
 80084d8:	f000 fc58 	bl	8008d8c <ov5640_write_reg>
  if (ret == OV5640_OK)
 80084dc:	2800      	cmp	r0, #0
 80084de:	d1dc      	bne.n	800849a <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl2[Degree + 6];
 80084e0:	f815 3c18 	ldrb.w	r3, [r5, #-24]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 80084e4:	f10d 0203 	add.w	r2, sp, #3
 80084e8:	f245 5182 	movw	r1, #21890	; 0x5582
 80084ec:	4620      	mov	r0, r4
    tmp = hue_degree_ctrl2[Degree + 6];
 80084ee:	f88d 3003 	strb.w	r3, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 80084f2:	4633      	mov	r3, r6
 80084f4:	f000 fc4a 	bl	8008d8c <ov5640_write_reg>
  if (ret == OV5640_OK)
 80084f8:	2800      	cmp	r0, #0
 80084fa:	d1ce      	bne.n	800849a <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl8[Degree + 6];
 80084fc:	f815 5c0c 	ldrb.w	r5, [r5, #-12]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8008500:	4633      	mov	r3, r6
 8008502:	f10d 0203 	add.w	r2, sp, #3
 8008506:	f245 5188 	movw	r1, #21896	; 0x5588
 800850a:	4620      	mov	r0, r4
    tmp = hue_degree_ctrl8[Degree + 6];
 800850c:	f88d 5003 	strb.w	r5, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8008510:	f000 fc3c 	bl	8008d8c <ov5640_write_reg>
  if (ret != OV5640_OK)
 8008514:	3800      	subs	r0, #0
 8008516:	bf18      	it	ne
 8008518:	2001      	movne	r0, #1
 800851a:	4240      	negs	r0, r0
}
 800851c:	b00a      	add	sp, #40	; 0x28
 800851e:	bd70      	pop	{r4, r5, r6, pc}
 8008520:	08028c38 	.word	0x08028c38
 8008524:	08098b00 	.word	0x08098b00

08008528 <OV5640_SetPixelFormat>:
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8008528:	2902      	cmp	r1, #2
{
 800852a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800852e:	4604      	mov	r4, r0
 8008530:	b082      	sub	sp, #8
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8008532:	d902      	bls.n	800853a <OV5640_SetPixelFormat+0x12>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8008534:	1fcb      	subs	r3, r1, #7
 8008536:	2b01      	cmp	r3, #1
 8008538:	d82b      	bhi.n	8008592 <OV5640_SetPixelFormat+0x6a>
    switch (PixelFormat)
 800853a:	3901      	subs	r1, #1
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 800853c:	f104 0718 	add.w	r7, r4, #24
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8008540:	f10d 0507 	add.w	r5, sp, #7
    switch (PixelFormat)
 8008544:	2907      	cmp	r1, #7
 8008546:	d82a      	bhi.n	800859e <OV5640_SetPixelFormat+0x76>
 8008548:	e8df f001 	tbb	[pc, r1]
 800854c:	29290450 	.word	0x29290450
 8008550:	a17a2929 	.word	0xa17a2929
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8008554:	2230      	movs	r2, #48	; 0x30
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8008556:	2301      	movs	r3, #1
 8008558:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 800855c:	4638      	mov	r0, r7
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 800855e:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8008562:	462a      	mov	r2, r5
 8008564:	f000 fc12 	bl	8008d8c <ov5640_write_reg>
 8008568:	b998      	cbnz	r0, 8008592 <OV5640_SetPixelFormat+0x6a>
  tickstart = pObj->IO.GetTick();
 800856a:	6963      	ldr	r3, [r4, #20]
 800856c:	4798      	blx	r3
 800856e:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8008570:	6963      	ldr	r3, [r4, #20]
 8008572:	4798      	blx	r3
 8008574:	4286      	cmp	r6, r0
 8008576:	d0fb      	beq.n	8008570 <OV5640_SetPixelFormat+0x48>
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8008578:	2100      	movs	r1, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 800857a:	2301      	movs	r3, #1
 800857c:	462a      	mov	r2, r5
 800857e:	4638      	mov	r0, r7
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8008580:	f88d 1007 	strb.w	r1, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8008584:	f245 011f 	movw	r1, #20511	; 0x501f
 8008588:	f000 fc00 	bl	8008d8c <ov5640_write_reg>
 800858c:	2800      	cmp	r0, #0
 800858e:	f000 80fa 	beq.w	8008786 <OV5640_SetPixelFormat+0x25e>
              ret = OV5640_ERROR;
 8008592:	f04f 36ff 	mov.w	r6, #4294967295
}
 8008596:	4630      	mov	r0, r6
 8008598:	b002      	add	sp, #8
 800859a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 800859e:	226f      	movs	r2, #111	; 0x6f
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 80085a0:	2301      	movs	r3, #1
 80085a2:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 80085a6:	4638      	mov	r0, r7
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 80085a8:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 80085ac:	462a      	mov	r2, r5
 80085ae:	f000 fbed 	bl	8008d8c <ov5640_write_reg>
 80085b2:	2800      	cmp	r0, #0
 80085b4:	d1ed      	bne.n	8008592 <OV5640_SetPixelFormat+0x6a>
  tickstart = pObj->IO.GetTick();
 80085b6:	6963      	ldr	r3, [r4, #20]
 80085b8:	4798      	blx	r3
 80085ba:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80085bc:	6963      	ldr	r3, [r4, #20]
 80085be:	4798      	blx	r3
 80085c0:	42b0      	cmp	r0, r6
 80085c2:	d0fb      	beq.n	80085bc <OV5640_SetPixelFormat+0x94>
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 80085c4:	2301      	movs	r3, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 80085c6:	462a      	mov	r2, r5
 80085c8:	4638      	mov	r0, r7
 80085ca:	f245 011f 	movw	r1, #20511	; 0x501f
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 80085ce:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 80085d2:	f000 fbdb 	bl	8008d8c <ov5640_write_reg>
 80085d6:	4606      	mov	r6, r0
 80085d8:	2800      	cmp	r0, #0
 80085da:	d1da      	bne.n	8008592 <OV5640_SetPixelFormat+0x6a>
  tickstart = pObj->IO.GetTick();
 80085dc:	6963      	ldr	r3, [r4, #20]
 80085de:	4798      	blx	r3
 80085e0:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80085e2:	6963      	ldr	r3, [r4, #20]
 80085e4:	4798      	blx	r3
 80085e6:	4285      	cmp	r5, r0
 80085e8:	d0fb      	beq.n	80085e2 <OV5640_SetPixelFormat+0xba>
 80085ea:	e7d4      	b.n	8008596 <OV5640_SetPixelFormat+0x6e>
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 80085ec:	2223      	movs	r2, #35	; 0x23
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 80085ee:	2301      	movs	r3, #1
 80085f0:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 80085f4:	4638      	mov	r0, r7
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 80085f6:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 80085fa:	462a      	mov	r2, r5
 80085fc:	f000 fbc6 	bl	8008d8c <ov5640_write_reg>
 8008600:	2800      	cmp	r0, #0
 8008602:	d1c6      	bne.n	8008592 <OV5640_SetPixelFormat+0x6a>
  tickstart = pObj->IO.GetTick();
 8008604:	6963      	ldr	r3, [r4, #20]
 8008606:	4798      	blx	r3
 8008608:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 800860a:	6963      	ldr	r3, [r4, #20]
 800860c:	4798      	blx	r3
 800860e:	4286      	cmp	r6, r0
 8008610:	d0fb      	beq.n	800860a <OV5640_SetPixelFormat+0xe2>
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8008612:	2301      	movs	r3, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8008614:	462a      	mov	r2, r5
 8008616:	4638      	mov	r0, r7
 8008618:	f245 011f 	movw	r1, #20511	; 0x501f
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 800861c:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8008620:	f000 fbb4 	bl	8008d8c <ov5640_write_reg>
 8008624:	2800      	cmp	r0, #0
 8008626:	d1b4      	bne.n	8008592 <OV5640_SetPixelFormat+0x6a>
  tickstart = pObj->IO.GetTick();
 8008628:	6963      	ldr	r3, [r4, #20]
 800862a:	4798      	blx	r3
 800862c:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 800862e:	6963      	ldr	r3, [r4, #20]
 8008630:	4798      	blx	r3
 8008632:	4285      	cmp	r5, r0
 8008634:	d0fb      	beq.n	800862e <OV5640_SetPixelFormat+0x106>
    ret = OV5640_ERROR;
 8008636:	2600      	movs	r6, #0
}
 8008638:	4630      	mov	r0, r6
 800863a:	b002      	add	sp, #8
 800863c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8008640:	2210      	movs	r2, #16
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8008642:	2301      	movs	r3, #1
 8008644:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 8008648:	4638      	mov	r0, r7
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 800864a:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 800864e:	462a      	mov	r2, r5
 8008650:	f000 fb9c 	bl	8008d8c <ov5640_write_reg>
 8008654:	2800      	cmp	r0, #0
 8008656:	d19c      	bne.n	8008592 <OV5640_SetPixelFormat+0x6a>
  tickstart = pObj->IO.GetTick();
 8008658:	6963      	ldr	r3, [r4, #20]
 800865a:	4798      	blx	r3
 800865c:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 800865e:	6963      	ldr	r3, [r4, #20]
 8008660:	4798      	blx	r3
 8008662:	42b0      	cmp	r0, r6
 8008664:	d0fb      	beq.n	800865e <OV5640_SetPixelFormat+0x136>
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8008666:	2100      	movs	r1, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8008668:	2301      	movs	r3, #1
 800866a:	462a      	mov	r2, r5
 800866c:	4638      	mov	r0, r7
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 800866e:	f88d 1007 	strb.w	r1, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8008672:	f245 011f 	movw	r1, #20511	; 0x501f
 8008676:	f000 fb89 	bl	8008d8c <ov5640_write_reg>
 800867a:	2800      	cmp	r0, #0
 800867c:	d189      	bne.n	8008592 <OV5640_SetPixelFormat+0x6a>
  tickstart = pObj->IO.GetTick();
 800867e:	6963      	ldr	r3, [r4, #20]
 8008680:	4798      	blx	r3
 8008682:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8008684:	6963      	ldr	r3, [r4, #20]
 8008686:	4798      	blx	r3
 8008688:	4285      	cmp	r5, r0
 800868a:	d0fb      	beq.n	8008684 <OV5640_SetPixelFormat+0x15c>
 800868c:	e7d3      	b.n	8008636 <OV5640_SetPixelFormat+0x10e>
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 800868e:	2230      	movs	r2, #48	; 0x30
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8008690:	2301      	movs	r3, #1
 8008692:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 8008696:	4638      	mov	r0, r7
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8008698:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 800869c:	462a      	mov	r2, r5
 800869e:	f000 fb75 	bl	8008d8c <ov5640_write_reg>
 80086a2:	2800      	cmp	r0, #0
 80086a4:	d053      	beq.n	800874e <OV5640_SetPixelFormat+0x226>
              ret = OV5640_ERROR;
 80086a6:	f04f 36ff 	mov.w	r6, #4294967295
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 80086aa:	2301      	movs	r3, #1
 80086ac:	462a      	mov	r2, r5
 80086ae:	f643 0121 	movw	r1, #14369	; 0x3821
 80086b2:	4638      	mov	r0, r7
 80086b4:	f000 fb62 	bl	8008d7c <ov5640_read_reg>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	f47f af6a 	bne.w	8008592 <OV5640_SetPixelFormat+0x6a>
        tmp |= (1 << 5);
 80086be:	f89d 2007 	ldrb.w	r2, [sp, #7]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 80086c2:	2301      	movs	r3, #1
 80086c4:	f643 0121 	movw	r1, #14369	; 0x3821
 80086c8:	4638      	mov	r0, r7
        tmp |= (1 << 5);
 80086ca:	f042 0220 	orr.w	r2, r2, #32
 80086ce:	f88d 2007 	strb.w	r2, [sp, #7]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 80086d2:	462a      	mov	r2, r5
 80086d4:	f000 fb5a 	bl	8008d8c <ov5640_write_reg>
 80086d8:	2800      	cmp	r0, #0
 80086da:	f47f af5a 	bne.w	8008592 <OV5640_SetPixelFormat+0x6a>
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80086de:	2301      	movs	r3, #1
 80086e0:	462a      	mov	r2, r5
 80086e2:	f243 0102 	movw	r1, #12290	; 0x3002
 80086e6:	4638      	mov	r0, r7
 80086e8:	f000 fb48 	bl	8008d7c <ov5640_read_reg>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	f47f af50 	bne.w	8008592 <OV5640_SetPixelFormat+0x6a>
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 80086f2:	f89d 2007 	ldrb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80086f6:	2301      	movs	r3, #1
 80086f8:	f243 0102 	movw	r1, #12290	; 0x3002
 80086fc:	4638      	mov	r0, r7
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 80086fe:	f022 021c 	bic.w	r2, r2, #28
 8008702:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8008706:	462a      	mov	r2, r5
 8008708:	f000 fb40 	bl	8008d8c <ov5640_write_reg>
 800870c:	2800      	cmp	r0, #0
 800870e:	f47f af40 	bne.w	8008592 <OV5640_SetPixelFormat+0x6a>
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8008712:	2301      	movs	r3, #1
 8008714:	462a      	mov	r2, r5
 8008716:	f243 0106 	movw	r1, #12294	; 0x3006
 800871a:	4638      	mov	r0, r7
 800871c:	f000 fb2e 	bl	8008d7c <ov5640_read_reg>
 8008720:	2800      	cmp	r0, #0
 8008722:	f47f af36 	bne.w	8008592 <OV5640_SetPixelFormat+0x6a>
                tmp |= ((1 << 5) | (1 << 3));
 8008726:	f89d 1007 	ldrb.w	r1, [sp, #7]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 800872a:	2301      	movs	r3, #1
 800872c:	462a      	mov	r2, r5
 800872e:	4638      	mov	r0, r7
                tmp |= ((1 << 5) | (1 << 3));
 8008730:	f041 0128 	orr.w	r1, r1, #40	; 0x28
 8008734:	f88d 1007 	strb.w	r1, [sp, #7]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8008738:	f243 0106 	movw	r1, #12294	; 0x3006
 800873c:	f000 fb26 	bl	8008d8c <ov5640_write_reg>
 8008740:	2800      	cmp	r0, #0
 8008742:	f47f af26 	bne.w	8008592 <OV5640_SetPixelFormat+0x6a>
}
 8008746:	4630      	mov	r0, r6
 8008748:	b002      	add	sp, #8
 800874a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  tickstart = pObj->IO.GetTick();
 800874e:	6963      	ldr	r3, [r4, #20]
 8008750:	4798      	blx	r3
 8008752:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8008754:	6963      	ldr	r3, [r4, #20]
 8008756:	4798      	blx	r3
 8008758:	42b0      	cmp	r0, r6
 800875a:	d0fb      	beq.n	8008754 <OV5640_SetPixelFormat+0x22c>
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 800875c:	2200      	movs	r2, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 800875e:	2301      	movs	r3, #1
 8008760:	f245 011f 	movw	r1, #20511	; 0x501f
 8008764:	4638      	mov	r0, r7
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8008766:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 800876a:	462a      	mov	r2, r5
 800876c:	f000 fb0e 	bl	8008d8c <ov5640_write_reg>
 8008770:	4606      	mov	r6, r0
 8008772:	2800      	cmp	r0, #0
 8008774:	d197      	bne.n	80086a6 <OV5640_SetPixelFormat+0x17e>
  tickstart = pObj->IO.GetTick();
 8008776:	6963      	ldr	r3, [r4, #20]
 8008778:	4798      	blx	r3
 800877a:	4680      	mov	r8, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 800877c:	6963      	ldr	r3, [r4, #20]
 800877e:	4798      	blx	r3
 8008780:	4580      	cmp	r8, r0
 8008782:	d0fb      	beq.n	800877c <OV5640_SetPixelFormat+0x254>
 8008784:	e791      	b.n	80086aa <OV5640_SetPixelFormat+0x182>
  tickstart = pObj->IO.GetTick();
 8008786:	6963      	ldr	r3, [r4, #20]
 8008788:	4798      	blx	r3
 800878a:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 800878c:	6963      	ldr	r3, [r4, #20]
 800878e:	4798      	blx	r3
 8008790:	4285      	cmp	r5, r0
 8008792:	d0fb      	beq.n	800878c <OV5640_SetPixelFormat+0x264>
 8008794:	e74f      	b.n	8008636 <OV5640_SetPixelFormat+0x10e>
 8008796:	bf00      	nop

08008798 <OV5640_GetResolution>:
{
 8008798:	b570      	push	{r4, r5, r6, lr}
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 800879a:	f100 0418 	add.w	r4, r0, #24
{
 800879e:	b082      	sub	sp, #8
 80087a0:	460e      	mov	r6, r1
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 80087a2:	2301      	movs	r3, #1
 80087a4:	f10d 0207 	add.w	r2, sp, #7
 80087a8:	f643 0108 	movw	r1, #14344	; 0x3808
 80087ac:	4620      	mov	r0, r4
 80087ae:	f000 fae5 	bl	8008d7c <ov5640_read_reg>
 80087b2:	2800      	cmp	r0, #0
 80087b4:	d150      	bne.n	8008858 <OV5640_GetResolution+0xc0>
    x_size = (uint16_t)tmp << 8U;
 80087b6:	f89d 5007 	ldrb.w	r5, [sp, #7]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 80087ba:	2301      	movs	r3, #1
 80087bc:	f10d 0207 	add.w	r2, sp, #7
 80087c0:	f643 0109 	movw	r1, #14345	; 0x3809
 80087c4:	4620      	mov	r0, r4
    x_size = (uint16_t)tmp << 8U;
 80087c6:	022d      	lsls	r5, r5, #8
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 80087c8:	f000 fad8 	bl	8008d7c <ov5640_read_reg>
 80087cc:	2800      	cmp	r0, #0
 80087ce:	d143      	bne.n	8008858 <OV5640_GetResolution+0xc0>
      x_size |= tmp;
 80087d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 80087d4:	f10d 0207 	add.w	r2, sp, #7
 80087d8:	f643 010a 	movw	r1, #14346	; 0x380a
 80087dc:	4620      	mov	r0, r4
      x_size |= tmp;
 80087de:	431d      	orrs	r5, r3
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 80087e0:	2301      	movs	r3, #1
 80087e2:	f000 facb 	bl	8008d7c <ov5640_read_reg>
 80087e6:	bbb8      	cbnz	r0, 8008858 <OV5640_GetResolution+0xc0>
        y_size = (uint16_t)tmp << 8U;
 80087e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 80087ec:	4620      	mov	r0, r4
 80087ee:	f10d 0207 	add.w	r2, sp, #7
 80087f2:	f643 010b 	movw	r1, #14347	; 0x380b
        y_size = (uint16_t)tmp << 8U;
 80087f6:	021c      	lsls	r4, r3, #8
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 80087f8:	2301      	movs	r3, #1
 80087fa:	f000 fabf 	bl	8008d7c <ov5640_read_reg>
 80087fe:	bb58      	cbnz	r0, 8008858 <OV5640_GetResolution+0xc0>
          y_size |= tmp;
 8008800:	f89d 3007 	ldrb.w	r3, [sp, #7]
          if ((x_size == 800U) && (y_size == 480U))
 8008804:	f5b5 7f48 	cmp.w	r5, #800	; 0x320
          y_size |= tmp;
 8008808:	ea43 0304 	orr.w	r3, r3, r4
          if ((x_size == 800U) && (y_size == 480U))
 800880c:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8008810:	fab2 f282 	clz	r2, r2
 8008814:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8008818:	d104      	bne.n	8008824 <OV5640_GetResolution+0x8c>
 800881a:	b11a      	cbz	r2, 8008824 <OV5640_GetResolution+0x8c>
            *Resolution = OV5640_R800x480;
 800881c:	2304      	movs	r3, #4
 800881e:	6033      	str	r3, [r6, #0]
}
 8008820:	b002      	add	sp, #8
 8008822:	bd70      	pop	{r4, r5, r6, pc}
          else if ((x_size == 640U) && (y_size == 480U))
 8008824:	f5b5 7f20 	cmp.w	r5, #640	; 0x280
 8008828:	d104      	bne.n	8008834 <OV5640_GetResolution+0x9c>
 800882a:	b11a      	cbz	r2, 8008834 <OV5640_GetResolution+0x9c>
            *Resolution = OV5640_R640x480;
 800882c:	2303      	movs	r3, #3
 800882e:	6033      	str	r3, [r6, #0]
}
 8008830:	b002      	add	sp, #8
 8008832:	bd70      	pop	{r4, r5, r6, pc}
          else if ((x_size == 480U) && (y_size == 272U))
 8008834:	f5b5 7ff0 	cmp.w	r5, #480	; 0x1e0
 8008838:	d106      	bne.n	8008848 <OV5640_GetResolution+0xb0>
 800883a:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800883e:	d103      	bne.n	8008848 <OV5640_GetResolution+0xb0>
            *Resolution = OV5640_R480x272;
 8008840:	2302      	movs	r3, #2
 8008842:	6033      	str	r3, [r6, #0]
}
 8008844:	b002      	add	sp, #8
 8008846:	bd70      	pop	{r4, r5, r6, pc}
          else if ((x_size == 320U) && (y_size == 240U))
 8008848:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
 800884c:	d108      	bne.n	8008860 <OV5640_GetResolution+0xc8>
 800884e:	2bf0      	cmp	r3, #240	; 0xf0
 8008850:	d106      	bne.n	8008860 <OV5640_GetResolution+0xc8>
            *Resolution = OV5640_R320x240;
 8008852:	2301      	movs	r3, #1
 8008854:	6033      	str	r3, [r6, #0]
            ret = OV5640_OK;
 8008856:	e7e3      	b.n	8008820 <OV5640_GetResolution+0x88>
    ret = OV5640_ERROR;
 8008858:	f04f 30ff 	mov.w	r0, #4294967295
}
 800885c:	b002      	add	sp, #8
 800885e:	bd70      	pop	{r4, r5, r6, pc}
          else if ((x_size == 160U) && (y_size == 120U))
 8008860:	2da0      	cmp	r5, #160	; 0xa0
 8008862:	d1f9      	bne.n	8008858 <OV5640_GetResolution+0xc0>
 8008864:	2b78      	cmp	r3, #120	; 0x78
 8008866:	d1f7      	bne.n	8008858 <OV5640_GetResolution+0xc0>
            *Resolution = OV5640_R160x120;
 8008868:	2300      	movs	r3, #0
 800886a:	6033      	str	r3, [r6, #0]
  return ret;
 800886c:	e7d8      	b.n	8008820 <OV5640_GetResolution+0x88>
 800886e:	bf00      	nop

08008870 <OV5640_ReadID>:
{
 8008870:	b5f0      	push	{r4, r5, r6, r7, lr}
  pObj->IO.Init();
 8008872:	4606      	mov	r6, r0
{
 8008874:	b083      	sub	sp, #12
 8008876:	460f      	mov	r7, r1
 8008878:	4604      	mov	r4, r0
  pObj->IO.Init();
 800887a:	f856 3b18 	ldr.w	r3, [r6], #24
 800887e:	4798      	blx	r3
  tmp = 0x80;
 8008880:	2380      	movs	r3, #128	; 0x80
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8008882:	f10d 0207 	add.w	r2, sp, #7
 8008886:	f243 0108 	movw	r1, #12296	; 0x3008
  tmp = 0x80;
 800888a:	f88d 3007 	strb.w	r3, [sp, #7]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 800888e:	4630      	mov	r0, r6
 8008890:	2301      	movs	r3, #1
 8008892:	f000 fa7b 	bl	8008d8c <ov5640_write_reg>
 8008896:	bb28      	cbnz	r0, 80088e4 <OV5640_ReadID+0x74>
  tickstart = pObj->IO.GetTick();
 8008898:	6963      	ldr	r3, [r4, #20]
 800889a:	4798      	blx	r3
 800889c:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 800889e:	6963      	ldr	r3, [r4, #20]
 80088a0:	4798      	blx	r3
 80088a2:	1b43      	subs	r3, r0, r5
 80088a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80088a8:	d3f9      	bcc.n	800889e <OV5640_ReadID+0x2e>
    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 80088aa:	2301      	movs	r3, #1
 80088ac:	f10d 0207 	add.w	r2, sp, #7
 80088b0:	f243 010a 	movw	r1, #12298	; 0x300a
 80088b4:	4630      	mov	r0, r6
 80088b6:	f000 fa61 	bl	8008d7c <ov5640_read_reg>
 80088ba:	b998      	cbnz	r0, 80088e4 <OV5640_ReadID+0x74>
      *Id = (uint32_t)tmp << 8U;
 80088bc:	f89d 1007 	ldrb.w	r1, [sp, #7]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 80088c0:	2301      	movs	r3, #1
 80088c2:	f10d 0207 	add.w	r2, sp, #7
 80088c6:	4630      	mov	r0, r6
      *Id = (uint32_t)tmp << 8U;
 80088c8:	0209      	lsls	r1, r1, #8
 80088ca:	6039      	str	r1, [r7, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 80088cc:	f243 010b 	movw	r1, #12299	; 0x300b
 80088d0:	f000 fa54 	bl	8008d7c <ov5640_read_reg>
 80088d4:	b930      	cbnz	r0, 80088e4 <OV5640_ReadID+0x74>
        *Id |= tmp;
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80088dc:	4313      	orrs	r3, r2
 80088de:	603b      	str	r3, [r7, #0]
}
 80088e0:	b003      	add	sp, #12
 80088e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = OV5640_ERROR;
 80088e4:	f04f 30ff 	mov.w	r0, #4294967295
 80088e8:	e7fa      	b.n	80088e0 <OV5640_ReadID+0x70>
 80088ea:	bf00      	nop

080088ec <OV5640_MirrorFlipConfig>:
{
 80088ec:	b530      	push	{r4, r5, lr}
  uint8_t tmp3820 = 0;
 80088ee:	2200      	movs	r2, #0
{
 80088f0:	b083      	sub	sp, #12
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80088f2:	f100 0418 	add.w	r4, r0, #24
{
 80088f6:	460d      	mov	r5, r1
  uint8_t tmp3820 = 0;
 80088f8:	f88d 2006 	strb.w	r2, [sp, #6]
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80088fc:	2301      	movs	r3, #1
 80088fe:	f10d 0206 	add.w	r2, sp, #6
 8008902:	f643 0120 	movw	r1, #14368	; 0x3820
 8008906:	4620      	mov	r0, r4
 8008908:	f000 fa38 	bl	8008d7c <ov5640_read_reg>
 800890c:	2800      	cmp	r0, #0
 800890e:	d160      	bne.n	80089d2 <OV5640_MirrorFlipConfig+0xe6>
    tmp3820 &= 0xF9U;
 8008910:	f89d 3006 	ldrb.w	r3, [sp, #6]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8008914:	f10d 0207 	add.w	r2, sp, #7
 8008918:	f643 0121 	movw	r1, #14369	; 0x3821
 800891c:	4620      	mov	r0, r4
    tmp3820 &= 0xF9U;
 800891e:	f023 0306 	bic.w	r3, r3, #6
 8008922:	f88d 3006 	strb.w	r3, [sp, #6]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8008926:	2301      	movs	r3, #1
 8008928:	f000 fa28 	bl	8008d7c <ov5640_read_reg>
 800892c:	2800      	cmp	r0, #0
 800892e:	d150      	bne.n	80089d2 <OV5640_MirrorFlipConfig+0xe6>
      tmp3821 &= 0xF9U;
 8008930:	f89d 3007 	ldrb.w	r3, [sp, #7]
      switch (Config)
 8008934:	2d02      	cmp	r5, #2
      tmp3821 &= 0xF9U;
 8008936:	f023 0306 	bic.w	r3, r3, #6
 800893a:	f88d 3007 	strb.w	r3, [sp, #7]
      switch (Config)
 800893e:	d01b      	beq.n	8008978 <OV5640_MirrorFlipConfig+0x8c>
 8008940:	2d03      	cmp	r5, #3
 8008942:	d049      	beq.n	80089d8 <OV5640_MirrorFlipConfig+0xec>
 8008944:	2d01      	cmp	r5, #1
 8008946:	d034      	beq.n	80089b2 <OV5640_MirrorFlipConfig+0xc6>
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8008948:	2301      	movs	r3, #1
 800894a:	f10d 0206 	add.w	r2, sp, #6
 800894e:	f643 0120 	movw	r1, #14368	; 0x3820
 8008952:	4620      	mov	r0, r4
 8008954:	f000 fa1a 	bl	8008d8c <ov5640_write_reg>
 8008958:	2800      	cmp	r0, #0
 800895a:	d13a      	bne.n	80089d2 <OV5640_MirrorFlipConfig+0xe6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800895c:	2301      	movs	r3, #1
 800895e:	f10d 0207 	add.w	r2, sp, #7
 8008962:	f643 0121 	movw	r1, #14369	; 0x3821
 8008966:	4620      	mov	r0, r4
 8008968:	f000 fa10 	bl	8008d8c <ov5640_write_reg>
 800896c:	3800      	subs	r0, #0
 800896e:	bf18      	it	ne
 8008970:	2001      	movne	r0, #1
 8008972:	4240      	negs	r0, r0
}
 8008974:	b003      	add	sp, #12
 8008976:	bd30      	pop	{r4, r5, pc}
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8008978:	2301      	movs	r3, #1
 800897a:	f10d 0206 	add.w	r2, sp, #6
 800897e:	f643 0120 	movw	r1, #14368	; 0x3820
 8008982:	4620      	mov	r0, r4
 8008984:	f000 fa02 	bl	8008d8c <ov5640_write_reg>
 8008988:	bb18      	cbnz	r0, 80089d2 <OV5640_MirrorFlipConfig+0xe6>
            tmp3821 |= 0x06U;
 800898a:	f89d 5007 	ldrb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800898e:	2301      	movs	r3, #1
 8008990:	f10d 0207 	add.w	r2, sp, #7
 8008994:	f643 0121 	movw	r1, #14369	; 0x3821
            tmp3821 |= 0x06U;
 8008998:	f045 0506 	orr.w	r5, r5, #6
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800899c:	4620      	mov	r0, r4
            tmp3821 |= 0x06U;
 800899e:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80089a2:	f000 f9f3 	bl	8008d8c <ov5640_write_reg>
 80089a6:	3800      	subs	r0, #0
 80089a8:	bf18      	it	ne
 80089aa:	2001      	movne	r0, #1
 80089ac:	4240      	negs	r0, r0
}
 80089ae:	b003      	add	sp, #12
 80089b0:	bd30      	pop	{r4, r5, pc}
          tmp3820 |= 0x06U;
 80089b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80089b6:	f10d 0206 	add.w	r2, sp, #6
 80089ba:	f643 0120 	movw	r1, #14368	; 0x3820
 80089be:	4620      	mov	r0, r4
          tmp3820 |= 0x06U;
 80089c0:	f043 0306 	orr.w	r3, r3, #6
 80089c4:	f88d 3006 	strb.w	r3, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80089c8:	462b      	mov	r3, r5
 80089ca:	f000 f9df 	bl	8008d8c <ov5640_write_reg>
 80089ce:	2800      	cmp	r0, #0
 80089d0:	d0c4      	beq.n	800895c <OV5640_MirrorFlipConfig+0x70>
    ret = OV5640_ERROR;
 80089d2:	f04f 30ff 	mov.w	r0, #4294967295
 80089d6:	e7cd      	b.n	8008974 <OV5640_MirrorFlipConfig+0x88>
          tmp3820 |= 0x06U;
 80089d8:	f89d 1006 	ldrb.w	r1, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80089dc:	2301      	movs	r3, #1
 80089de:	f10d 0206 	add.w	r2, sp, #6
 80089e2:	4620      	mov	r0, r4
          tmp3820 |= 0x06U;
 80089e4:	f041 0106 	orr.w	r1, r1, #6
 80089e8:	f88d 1006 	strb.w	r1, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80089ec:	f643 0120 	movw	r1, #14368	; 0x3820
 80089f0:	f000 f9cc 	bl	8008d8c <ov5640_write_reg>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	d0c8      	beq.n	800898a <OV5640_MirrorFlipConfig+0x9e>
 80089f8:	e7eb      	b.n	80089d2 <OV5640_MirrorFlipConfig+0xe6>
 80089fa:	bf00      	nop

080089fc <OV5640_NightModeConfig>:
{
 80089fc:	b570      	push	{r4, r5, r6, lr}
  uint8_t tmp = 0;
 80089fe:	2300      	movs	r3, #0
{
 8008a00:	b082      	sub	sp, #8
  if (Cmd == NIGHT_MODE_ENABLE)
 8008a02:	2901      	cmp	r1, #1
  uint8_t tmp = 0;
 8008a04:	f88d 3007 	strb.w	r3, [sp, #7]
  if (Cmd == NIGHT_MODE_ENABLE)
 8008a08:	d01e      	beq.n	8008a48 <OV5640_NightModeConfig+0x4c>
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8008a0a:	f100 0418 	add.w	r4, r0, #24
 8008a0e:	2301      	movs	r3, #1
 8008a10:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8008a14:	f10d 0207 	add.w	r2, sp, #7
 8008a18:	4620      	mov	r0, r4
 8008a1a:	f000 f9af 	bl	8008d7c <ov5640_read_reg>
 8008a1e:	b9f8      	cbnz	r0, 8008a60 <OV5640_NightModeConfig+0x64>
      tmp &= 0xFBU;
 8008a20:	f89d 5007 	ldrb.w	r5, [sp, #7]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8008a24:	2301      	movs	r3, #1
 8008a26:	f10d 0207 	add.w	r2, sp, #7
 8008a2a:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
      tmp &= 0xFBU;
 8008a2e:	f025 0504 	bic.w	r5, r5, #4
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8008a32:	4620      	mov	r0, r4
      tmp &= 0xFBU;
 8008a34:	f88d 5007 	strb.w	r5, [sp, #7]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8008a38:	f000 f9a8 	bl	8008d8c <ov5640_write_reg>
 8008a3c:	3800      	subs	r0, #0
 8008a3e:	bf18      	it	ne
 8008a40:	2001      	movne	r0, #1
 8008a42:	4240      	negs	r0, r0
}
 8008a44:	b002      	add	sp, #8
 8008a46:	bd70      	pop	{r4, r5, r6, pc}
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 8008a48:	f100 0418 	add.w	r4, r0, #24
 8008a4c:	460d      	mov	r5, r1
 8008a4e:	460b      	mov	r3, r1
 8008a50:	f10d 0207 	add.w	r2, sp, #7
 8008a54:	f243 0138 	movw	r1, #12344	; 0x3038
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f000 f997 	bl	8008d8c <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008a5e:	b118      	cbz	r0, 8008a68 <OV5640_NightModeConfig+0x6c>
      ret = OV5640_ERROR;
 8008a60:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008a64:	b002      	add	sp, #8
 8008a66:	bd70      	pop	{r4, r5, r6, pc}
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 8008a68:	462b      	mov	r3, r5
 8008a6a:	f10d 0207 	add.w	r2, sp, #7
 8008a6e:	f243 0139 	movw	r1, #12345	; 0x3039
 8008a72:	4620      	mov	r0, r4
 8008a74:	f000 f98a 	bl	8008d8c <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	d1f1      	bne.n	8008a60 <OV5640_NightModeConfig+0x64>
      tmp = 0x7C;
 8008a7c:	227c      	movs	r2, #124	; 0x7c
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8008a7e:	462b      	mov	r3, r5
 8008a80:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8008a84:	4620      	mov	r0, r4
      tmp = 0x7C;
 8008a86:	f88d 2007 	strb.w	r2, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8008a8a:	f10d 0207 	add.w	r2, sp, #7
 8008a8e:	f000 f97d 	bl	8008d8c <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008a92:	2800      	cmp	r0, #0
 8008a94:	d1e4      	bne.n	8008a60 <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8008a96:	462b      	mov	r3, r5
 8008a98:	f10d 0207 	add.w	r2, sp, #7
 8008a9c:	f643 2108 	movw	r1, #14856	; 0x3a08
 8008aa0:	4620      	mov	r0, r4
      tmp = 0x01;
 8008aa2:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8008aa6:	f000 f971 	bl	8008d8c <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	d1d8      	bne.n	8008a60 <OV5640_NightModeConfig+0x64>
      tmp = 0x27;
 8008aae:	2227      	movs	r2, #39	; 0x27
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8008ab0:	462b      	mov	r3, r5
 8008ab2:	f643 2109 	movw	r1, #14857	; 0x3a09
 8008ab6:	4620      	mov	r0, r4
      tmp = 0x27;
 8008ab8:	f88d 2007 	strb.w	r2, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8008abc:	f10d 0207 	add.w	r2, sp, #7
 8008ac0:	f000 f964 	bl	8008d8c <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008ac4:	2800      	cmp	r0, #0
 8008ac6:	d1cb      	bne.n	8008a60 <OV5640_NightModeConfig+0x64>
      tmp = 0x00;
 8008ac8:	f88d 0007 	strb.w	r0, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 8008acc:	462b      	mov	r3, r5
 8008ace:	f10d 0207 	add.w	r2, sp, #7
 8008ad2:	f643 210a 	movw	r1, #14858	; 0x3a0a
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f000 f958 	bl	8008d8c <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008adc:	2800      	cmp	r0, #0
 8008ade:	d1bf      	bne.n	8008a60 <OV5640_NightModeConfig+0x64>
      tmp = 0xF6;
 8008ae0:	22f6      	movs	r2, #246	; 0xf6
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 8008ae2:	462b      	mov	r3, r5
 8008ae4:	f643 210b 	movw	r1, #14859	; 0x3a0b
 8008ae8:	4620      	mov	r0, r4
      tmp = 0xF6;
 8008aea:	f88d 2007 	strb.w	r2, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 8008aee:	f10d 0207 	add.w	r2, sp, #7
 8008af2:	f000 f94b 	bl	8008d8c <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008af6:	2800      	cmp	r0, #0
 8008af8:	d1b2      	bne.n	8008a60 <OV5640_NightModeConfig+0x64>
      tmp = 0x04;
 8008afa:	2204      	movs	r2, #4
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8008afc:	462b      	mov	r3, r5
 8008afe:	f643 210d 	movw	r1, #14861	; 0x3a0d
 8008b02:	4620      	mov	r0, r4
      tmp = 0x04;
 8008b04:	f88d 2007 	strb.w	r2, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8008b08:	f10d 0207 	add.w	r2, sp, #7
 8008b0c:	f000 f93e 	bl	8008d8c <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008b10:	2800      	cmp	r0, #0
 8008b12:	d1a5      	bne.n	8008a60 <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 8008b14:	462b      	mov	r3, r5
 8008b16:	f10d 0207 	add.w	r2, sp, #7
 8008b1a:	f643 210e 	movw	r1, #14862	; 0x3a0e
 8008b1e:	4620      	mov	r0, r4
 8008b20:	f000 f934 	bl	8008d8c <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008b24:	2800      	cmp	r0, #0
 8008b26:	d19b      	bne.n	8008a60 <OV5640_NightModeConfig+0x64>
      tmp = 0x0B;
 8008b28:	260b      	movs	r6, #11
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	f10d 0207 	add.w	r2, sp, #7
 8008b30:	f643 2102 	movw	r1, #14850	; 0x3a02
 8008b34:	4620      	mov	r0, r4
      tmp = 0x0B;
 8008b36:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8008b3a:	f000 f927 	bl	8008d8c <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	d18e      	bne.n	8008a60 <OV5640_NightModeConfig+0x64>
      tmp = 0x88;
 8008b42:	2588      	movs	r5, #136	; 0x88
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 8008b44:	2301      	movs	r3, #1
 8008b46:	f10d 0207 	add.w	r2, sp, #7
 8008b4a:	f643 2103 	movw	r1, #14851	; 0x3a03
 8008b4e:	4620      	mov	r0, r4
      tmp = 0x88;
 8008b50:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 8008b54:	f000 f91a 	bl	8008d8c <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	d181      	bne.n	8008a60 <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	f10d 0207 	add.w	r2, sp, #7
 8008b62:	f643 2114 	movw	r1, #14868	; 0x3a14
 8008b66:	4620      	mov	r0, r4
      tmp = 0x0B;
 8008b68:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8008b6c:	f000 f90e 	bl	8008d8c <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008b70:	2800      	cmp	r0, #0
 8008b72:	f47f af75 	bne.w	8008a60 <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 8008b76:	2301      	movs	r3, #1
 8008b78:	f10d 0207 	add.w	r2, sp, #7
 8008b7c:	f643 2115 	movw	r1, #14869	; 0x3a15
 8008b80:	e757      	b.n	8008a32 <OV5640_NightModeConfig+0x36>
 8008b82:	bf00      	nop

08008b84 <OV5640_ZoomConfig>:
{
 8008b84:	b530      	push	{r4, r5, lr}
 8008b86:	b083      	sub	sp, #12
 8008b88:	460d      	mov	r5, r1
 8008b8a:	4604      	mov	r4, r0
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 8008b8c:	a901      	add	r1, sp, #4
 8008b8e:	f7ff fe03 	bl	8008798 <OV5640_GetResolution>
 8008b92:	bb88      	cbnz	r0, 8008bf8 <OV5640_ZoomConfig+0x74>
    if (zoom == OV5640_ZOOM_x1)
 8008b94:	2d44      	cmp	r5, #68	; 0x44
 8008b96:	d026      	beq.n	8008be6 <OV5640_ZoomConfig+0x62>
      switch (res)
 8008b98:	9b01      	ldr	r3, [sp, #4]
 8008b9a:	2b02      	cmp	r3, #2
 8008b9c:	d91f      	bls.n	8008bde <OV5640_ZoomConfig+0x5a>
 8008b9e:	2b03      	cmp	r3, #3
 8008ba0:	d100      	bne.n	8008ba4 <OV5640_ZoomConfig+0x20>
          zoom = zoom >> 2U;
 8008ba2:	08ad      	lsrs	r5, r5, #2
      tmp = 0x00;
 8008ba4:	2200      	movs	r2, #0
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8008ba6:	3418      	adds	r4, #24
 8008ba8:	2301      	movs	r3, #1
 8008baa:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
      tmp = 0x00;
 8008bae:	f88d 2003 	strb.w	r2, [sp, #3]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f10d 0203 	add.w	r2, sp, #3
 8008bb8:	f000 f8e8 	bl	8008d8c <ov5640_write_reg>
 8008bbc:	b9e0      	cbnz	r0, 8008bf8 <OV5640_ZoomConfig+0x74>
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	f10d 0203 	add.w	r2, sp, #3
 8008bc4:	f245 6101 	movw	r1, #22017	; 0x5601
 8008bc8:	4620      	mov	r0, r4
        tmp = (uint8_t)zoom;
 8008bca:	f88d 5003 	strb.w	r5, [sp, #3]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 8008bce:	f000 f8dd 	bl	8008d8c <ov5640_write_reg>
 8008bd2:	3800      	subs	r0, #0
 8008bd4:	bf18      	it	ne
 8008bd6:	2001      	movne	r0, #1
 8008bd8:	4240      	negs	r0, r0
}
 8008bda:	b003      	add	sp, #12
 8008bdc:	bd30      	pop	{r4, r5, pc}
      switch (res)
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d0e0      	beq.n	8008ba4 <OV5640_ZoomConfig+0x20>
          zoom = zoom >> 1U;
 8008be2:	086d      	lsrs	r5, r5, #1
          break;
 8008be4:	e7de      	b.n	8008ba4 <OV5640_ZoomConfig+0x20>
      tmp = 0x10;
 8008be6:	2510      	movs	r5, #16
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8008be8:	2301      	movs	r3, #1
 8008bea:	f10d 0203 	add.w	r2, sp, #3
 8008bee:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8008bf2:	f104 0018 	add.w	r0, r4, #24
 8008bf6:	e7e8      	b.n	8008bca <OV5640_ZoomConfig+0x46>
    ret = OV5640_ERROR;
 8008bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bfc:	e7ed      	b.n	8008bda <OV5640_ZoomConfig+0x56>
 8008bfe:	bf00      	nop

08008c00 <OV5640_Init>:
{
 8008c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (pObj->IsInitialized == 0U)
 8008c04:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
{
 8008c08:	b083      	sub	sp, #12
  if (pObj->IsInitialized == 0U)
 8008c0a:	2c00      	cmp	r4, #0
 8008c0c:	d149      	bne.n	8008ca2 <OV5640_Init+0xa2>
    if ((Resolution > OV5640_R800x480) ||
 8008c0e:	2904      	cmp	r1, #4
 8008c10:	4689      	mov	r9, r1
 8008c12:	d841      	bhi.n	8008c98 <OV5640_Init+0x98>
 8008c14:	2a02      	cmp	r2, #2
 8008c16:	4607      	mov	r7, r0
 8008c18:	4690      	mov	r8, r2
 8008c1a:	d902      	bls.n	8008c22 <OV5640_Init+0x22>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8008c1c:	1fd3      	subs	r3, r2, #7
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d83a      	bhi.n	8008c98 <OV5640_Init+0x98>
 8008c22:	4d22      	ldr	r5, [pc, #136]	; (8008cac <OV5640_Init+0xac>)
 8008c24:	f107 0618 	add.w	r6, r7, #24
          tmp = (uint8_t)OV5640_Common[index][1];
 8008c28:	eb05 0c84 	add.w	ip, r5, r4, lsl #2
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8008c2c:	f835 1024 	ldrh.w	r1, [r5, r4, lsl #2]
 8008c30:	2301      	movs	r3, #1
 8008c32:	f10d 0206 	add.w	r2, sp, #6
          tmp = (uint8_t)OV5640_Common[index][1];
 8008c36:	f8bc c002 	ldrh.w	ip, [ip, #2]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8008c3a:	4630      	mov	r0, r6
          tmp = (uint8_t)OV5640_Common[index][1];
 8008c3c:	f88d c006 	strb.w	ip, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8008c40:	f000 f8a4 	bl	8008d8c <ov5640_write_reg>
 8008c44:	b9f0      	cbnz	r0, 8008c84 <OV5640_Init+0x84>
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8008c46:	3401      	adds	r4, #1
 8008c48:	2cfe      	cmp	r4, #254	; 0xfe
 8008c4a:	d1ed      	bne.n	8008c28 <OV5640_Init+0x28>
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8008c4c:	4649      	mov	r1, r9
 8008c4e:	4638      	mov	r0, r7
 8008c50:	f7ff f824 	bl	8007c9c <OV5640_SetResolution>
 8008c54:	bb00      	cbnz	r0, 8008c98 <OV5640_Init+0x98>
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 8008c56:	4641      	mov	r1, r8
 8008c58:	4638      	mov	r0, r7
 8008c5a:	f7ff fc65 	bl	8008528 <OV5640_SetPixelFormat>
 8008c5e:	b9d8      	cbnz	r0, 8008c98 <OV5640_Init+0x98>
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8008c60:	2122      	movs	r1, #34	; 0x22
    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8008c62:	2301      	movs	r3, #1
 8008c64:	f10d 0207 	add.w	r2, sp, #7
 8008c68:	4630      	mov	r0, r6
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8008c6a:	f88d 1007 	strb.w	r1, [sp, #7]
    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8008c6e:	f244 7140 	movw	r1, #18240	; 0x4740
 8008c72:	f000 f88b 	bl	8008d8c <ov5640_write_reg>
 8008c76:	b978      	cbnz	r0, 8008c98 <OV5640_Init+0x98>
          pObj->IsInitialized = 1U;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
}
 8008c7e:	b003      	add	sp, #12
 8008c80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8008c84:	2cfd      	cmp	r4, #253	; 0xfd
 8008c86:	f104 0301 	add.w	r3, r4, #1
 8008c8a:	d005      	beq.n	8008c98 <OV5640_Init+0x98>
 8008c8c:	2bfd      	cmp	r3, #253	; 0xfd
 8008c8e:	f103 0302 	add.w	r3, r3, #2
 8008c92:	d001      	beq.n	8008c98 <OV5640_Init+0x98>
 8008c94:	2bfe      	cmp	r3, #254	; 0xfe
 8008c96:	d1f9      	bne.n	8008c8c <OV5640_Init+0x8c>
      ret = OV5640_ERROR;
 8008c98:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008c9c:	b003      	add	sp, #12
 8008c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  int32_t ret = OV5640_OK;
 8008ca2:	2000      	movs	r0, #0
}
 8008ca4:	b003      	add	sp, #12
 8008ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008caa:	bf00      	nop
 8008cac:	08098b20 	.word	0x08098b20

08008cb0 <OV5640_RegisterBusIO>:
  if (pObj == NULL)
 8008cb0:	b1c0      	cbz	r0, 8008ce4 <OV5640_RegisterBusIO+0x34>
    pObj->IO.Address   = pIO->Address;
 8008cb2:	890a      	ldrh	r2, [r1, #8]
{
 8008cb4:	b430      	push	{r4, r5}
    pObj->IO.DeInit    = pIO->DeInit;
 8008cb6:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
 8008cba:	8102      	strh	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8008cbc:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8008cc0:	694a      	ldr	r2, [r1, #20]
 8008cc2:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8008cc6:	4909      	ldr	r1, [pc, #36]	; (8008cec <OV5640_RegisterBusIO+0x3c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8008cc8:	60c5      	str	r5, [r0, #12]
 8008cca:	e9c0 4204 	strd	r4, r2, [r0, #16]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 8008cce:	4a08      	ldr	r2, [pc, #32]	; (8008cf0 <OV5640_RegisterBusIO+0x40>)
    pObj->Ctx.handle   = pObj;
 8008cd0:	e9c0 1007 	strd	r1, r0, [r0, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 8008cd4:	6182      	str	r2, [r0, #24]
    if (pObj->IO.Init != NULL)
 8008cd6:	b10b      	cbz	r3, 8008cdc <OV5640_RegisterBusIO+0x2c>
}
 8008cd8:	bc30      	pop	{r4, r5}
      ret = pObj->IO.Init();
 8008cda:	4718      	bx	r3
}
 8008cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce0:	bc30      	pop	{r4, r5}
 8008ce2:	4770      	bx	lr
 8008ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	08007c7d 	.word	0x08007c7d
 8008cf0:	08007c8d 	.word	0x08007c8d

08008cf4 <OV5640_ColorbarModeConfig>:
  uint8_t tmp = 0x40;
 8008cf4:	2340      	movs	r3, #64	; 0x40
{
 8008cf6:	b530      	push	{r4, r5, lr}
 8008cf8:	b083      	sub	sp, #12
  uint8_t tmp = 0x40;
 8008cfa:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((Cmd == COLORBAR_MODE_ENABLE) || (Cmd == COLORBAR_MODE_GRADUALV))
 8008cfe:	1e4b      	subs	r3, r1, #1
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d922      	bls.n	8008d4a <OV5640_ColorbarModeConfig+0x56>
    tmp = 0x10;
 8008d04:	2110      	movs	r1, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8008d06:	f100 0418 	add.w	r4, r0, #24
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	f10d 0207 	add.w	r2, sp, #7
    tmp = 0x10;
 8008d10:	f88d 1007 	strb.w	r1, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8008d14:	4620      	mov	r0, r4
 8008d16:	f245 5184 	movw	r1, #21892	; 0x5584
 8008d1a:	f000 f837 	bl	8008d8c <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008d1e:	4605      	mov	r5, r0
 8008d20:	b118      	cbz	r0, 8008d2a <OV5640_ColorbarModeConfig+0x36>
      ret = OV5640_ERROR;
 8008d22:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008d26:	b003      	add	sp, #12
 8008d28:	bd30      	pop	{r4, r5, pc}
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	f10d 0207 	add.w	r2, sp, #7
 8008d30:	f245 013d 	movw	r1, #20541	; 0x503d
 8008d34:	4620      	mov	r0, r4
      tmp = 0x00;
 8008d36:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 8008d3a:	f000 f827 	bl	8008d8c <ov5640_write_reg>
    if (ret != OV5640_OK)
 8008d3e:	3800      	subs	r0, #0
 8008d40:	bf18      	it	ne
 8008d42:	2001      	movne	r0, #1
 8008d44:	4240      	negs	r0, r0
}
 8008d46:	b003      	add	sp, #12
 8008d48:	bd30      	pop	{r4, r5, pc}
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8008d4a:	f100 0418 	add.w	r4, r0, #24
 8008d4e:	460d      	mov	r5, r1
 8008d50:	2301      	movs	r3, #1
 8008d52:	f10d 0207 	add.w	r2, sp, #7
 8008d56:	f245 5184 	movw	r1, #21892	; 0x5584
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	f000 f816 	bl	8008d8c <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008d60:	2800      	cmp	r0, #0
 8008d62:	d1de      	bne.n	8008d22 <OV5640_ColorbarModeConfig+0x2e>
      tmp = (Cmd == COLORBAR_MODE_GRADUALV ? 0x8c : 0x80);
 8008d64:	2d02      	cmp	r5, #2
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 8008d66:	f04f 0301 	mov.w	r3, #1
 8008d6a:	f10d 0207 	add.w	r2, sp, #7
 8008d6e:	f245 013d 	movw	r1, #20541	; 0x503d
      tmp = (Cmd == COLORBAR_MODE_GRADUALV ? 0x8c : 0x80);
 8008d72:	bf0c      	ite	eq
 8008d74:	258c      	moveq	r5, #140	; 0x8c
 8008d76:	2580      	movne	r5, #128	; 0x80
 8008d78:	e7dc      	b.n	8008d34 <OV5640_ColorbarModeConfig+0x40>
 8008d7a:	bf00      	nop

08008d7c <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8008d7c:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8008d7e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8008d82:	46a4      	mov	ip, r4
}
 8008d84:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8008d88:	4760      	bx	ip
 8008d8a:	bf00      	nop

08008d8c <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8008d8c:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8008d8e:	6804      	ldr	r4, [r0, #0]
 8008d90:	6880      	ldr	r0, [r0, #8]
 8008d92:	46a4      	mov	ip, r4
}
 8008d94:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8008d98:	4760      	bx	ip
 8008d9a:	bf00      	nop

08008d9c <OV9655_DeInit>:
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV9655_DeInit(OV9655_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8008d9c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d102      	bne.n	8008daa <OV9655_DeInit+0xe>
  {
    pObj->IsInitialized = 0U;
 8008da4:	2300      	movs	r3, #0
 8008da6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  }

  return OV9655_OK;
}
 8008daa:	2000      	movs	r0, #0
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop

08008db0 <OV9655_GetPixelFormat>:
{
  (void)(pObj);
  (void)(PixelFormat);

  return OV9655_ERROR;
}
 8008db0:	f04f 30ff 	mov.w	r0, #4294967295
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop

08008db8 <OV9655_GetCapabilities>:
  */
int32_t OV9655_GetCapabilities(OV9655_Object_t *pObj, OV9655_Capabilities_t *Capabilities)
{
  int32_t ret;

  if(pObj == NULL)
 8008db8:	b168      	cbz	r0, 8008dd6 <OV9655_GetCapabilities+0x1e>
  {
    ret = OV9655_ERROR;
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 8008dba:	2301      	movs	r3, #1
    Capabilities->Config_Contrast      = 1;
    Capabilities->Config_HueDegree     = 0;
 8008dbc:	2200      	movs	r2, #0
    Capabilities->Config_Brightness    = 1;
 8008dbe:	60cb      	str	r3, [r1, #12]
    Capabilities->Config_Resolution    = 1;
    Capabilities->Config_Saturation    = 0;
    Capabilities->Config_SpecialEffect = 1;
    Capabilities->Config_Zoom          = 0;

    ret = OV9655_OK;
 8008dc0:	4610      	mov	r0, r2
    Capabilities->Config_LightMode     = 0;
 8008dc2:	604a      	str	r2, [r1, #4]
    Capabilities->Config_MirrorFlip    = 1;
 8008dc4:	61cb      	str	r3, [r1, #28]
    Capabilities->Config_NightMode     = 1;
 8008dc6:	624b      	str	r3, [r1, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 8008dc8:	600b      	str	r3, [r1, #0]
    Capabilities->Config_Saturation    = 0;
 8008dca:	610a      	str	r2, [r1, #16]
    Capabilities->Config_SpecialEffect = 1;
 8008dcc:	608b      	str	r3, [r1, #8]
    Capabilities->Config_Zoom          = 0;
 8008dce:	620a      	str	r2, [r1, #32]
    Capabilities->Config_HueDegree     = 0;
 8008dd0:	e9c1 3205 	strd	r3, r2, [r1, #20]
    ret = OV9655_OK;
 8008dd4:	4770      	bx	lr
    ret = OV9655_ERROR;
 8008dd6:	f04f 30ff 	mov.w	r0, #4294967295
  }

  return ret;
}
 8008dda:	4770      	bx	lr

08008ddc <OV9655_SetLightMode>:
{
  (void)(pObj);
  (void)(LightMode);

  return OV9655_ERROR;
}
 8008ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop

08008de4 <OV9655_SetSaturation>:
{
  (void)(pObj);
  (void)(Level);

  return OV9655_ERROR;
}
 8008de4:	f04f 30ff 	mov.w	r0, #4294967295
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop

08008dec <OV9655_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV9655_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8008dec:	b410      	push	{r4}
  OV9655_Object_t *pObj = (OV9655_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8008dee:	6904      	ldr	r4, [r0, #16]
 8008df0:	8900      	ldrh	r0, [r0, #8]
 8008df2:	46a4      	mov	ip, r4
}
 8008df4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8008df8:	4760      	bx	ip
 8008dfa:	bf00      	nop

08008dfc <OV9655_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV9655_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8008dfc:	b410      	push	{r4}
  OV9655_Object_t *pObj = (OV9655_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8008dfe:	68c4      	ldr	r4, [r0, #12]
 8008e00:	8900      	ldrh	r0, [r0, #8]
 8008e02:	46a4      	mov	ip, r4
}
 8008e04:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8008e08:	4760      	bx	ip
 8008e0a:	bf00      	nop

08008e0c <OV9655_SetResolution>:
  if (Resolution > OV9655_R640x480)
 8008e0c:	2903      	cmp	r1, #3
 8008e0e:	f200 8092 	bhi.w	8008f36 <OV9655_SetResolution+0x12a>
    switch (Resolution)
 8008e12:	2901      	cmp	r1, #1
{
 8008e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e18:	4604      	mov	r4, r0
 8008e1a:	b082      	sub	sp, #8
    switch (Resolution)
 8008e1c:	d02e      	beq.n	8008e7c <OV9655_SetResolution+0x70>
 8008e1e:	3902      	subs	r1, #2
 8008e20:	2600      	movs	r6, #0
 8008e22:	2901      	cmp	r1, #1
 8008e24:	d859      	bhi.n	8008eda <OV9655_SetResolution+0xce>
 8008e26:	f100 0818 	add.w	r8, r0, #24
 8008e2a:	f10d 0907 	add.w	r9, sp, #7
 8008e2e:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 8008ff0 <OV9655_SetResolution+0x1e4>
          tmp = OV9655_VGA[index][1];
 8008e32:	eb0a 0046 	add.w	r0, sl, r6, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8008e36:	2301      	movs	r3, #1
 8008e38:	464a      	mov	r2, r9
 8008e3a:	f81a 1016 	ldrb.w	r1, [sl, r6, lsl #1]
          tmp = OV9655_VGA[index][1];
 8008e3e:	7845      	ldrb	r5, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8008e40:	4640      	mov	r0, r8
          tmp = OV9655_VGA[index][1];
 8008e42:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8008e46:	f000 fc1d 	bl	8009684 <ov9655_write_reg>
  tickstart = pObj->IO.GetTick();
 8008e4a:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8008e4c:	4607      	mov	r7, r0
  tickstart = pObj->IO.GetTick();
 8008e4e:	4798      	blx	r3
 8008e50:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8008e52:	6963      	ldr	r3, [r4, #20]
 8008e54:	4798      	blx	r3
 8008e56:	1b43      	subs	r3, r0, r5
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d9fa      	bls.n	8008e52 <OV9655_SetResolution+0x46>
      for(index=0; index<(sizeof(OV9655_VGA)/2U); index++)
 8008e5c:	3601      	adds	r6, #1
 8008e5e:	2e93      	cmp	r6, #147	; 0x93
 8008e60:	d06c      	beq.n	8008f3c <OV9655_SetResolution+0x130>
        if(ret != OV9655_ERROR)
 8008e62:	2f00      	cmp	r7, #0
 8008e64:	d0e5      	beq.n	8008e32 <OV9655_SetResolution+0x26>
      for(index=0; index<(sizeof(OV9655_VGA)/2U); index++)
 8008e66:	2e92      	cmp	r6, #146	; 0x92
 8008e68:	f106 0602 	add.w	r6, r6, #2
 8008e6c:	d001      	beq.n	8008e72 <OV9655_SetResolution+0x66>
 8008e6e:	2e93      	cmp	r6, #147	; 0x93
 8008e70:	d1f9      	bne.n	8008e66 <OV9655_SetResolution+0x5a>
    ret = OV9655_ERROR;
 8008e72:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008e76:	b002      	add	sp, #8
 8008e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch (Resolution)
 8008e7c:	2600      	movs	r6, #0
 8008e7e:	f8df a174 	ldr.w	sl, [pc, #372]	; 8008ff4 <OV9655_SetResolution+0x1e8>
 8008e82:	f100 0818 	add.w	r8, r0, #24
 8008e86:	f10d 0907 	add.w	r9, sp, #7
          tmp = OV9655_QVGA_QQVGA[index][1];
 8008e8a:	eb0a 0046 	add.w	r0, sl, r6, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008e8e:	2301      	movs	r3, #1
 8008e90:	464a      	mov	r2, r9
 8008e92:	f81a 1016 	ldrb.w	r1, [sl, r6, lsl #1]
          tmp = OV9655_QVGA_QQVGA[index][1];
 8008e96:	7845      	ldrb	r5, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008e98:	4640      	mov	r0, r8
          tmp = OV9655_QVGA_QQVGA[index][1];
 8008e9a:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008e9e:	f000 fbf1 	bl	8009684 <ov9655_write_reg>
  tickstart = pObj->IO.GetTick();
 8008ea2:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008ea4:	4607      	mov	r7, r0
  tickstart = pObj->IO.GetTick();
 8008ea6:	4798      	blx	r3
 8008ea8:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8008eaa:	6963      	ldr	r3, [r4, #20]
 8008eac:	4798      	blx	r3
 8008eae:	1b43      	subs	r3, r0, r5
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d9fa      	bls.n	8008eaa <OV9655_SetResolution+0x9e>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8008eb4:	3601      	adds	r6, #1
 8008eb6:	2e91      	cmp	r6, #145	; 0x91
 8008eb8:	d06d      	beq.n	8008f96 <OV9655_SetResolution+0x18a>
        if(ret != OV9655_ERROR)
 8008eba:	2f00      	cmp	r7, #0
 8008ebc:	d0e5      	beq.n	8008e8a <OV9655_SetResolution+0x7e>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8008ebe:	2e90      	cmp	r6, #144	; 0x90
 8008ec0:	f106 0602 	add.w	r6, r6, #2
 8008ec4:	d001      	beq.n	8008eca <OV9655_SetResolution+0xbe>
 8008ec6:	2e91      	cmp	r6, #145	; 0x91
 8008ec8:	d1f9      	bne.n	8008ebe <OV9655_SetResolution+0xb2>
 8008eca:	2700      	movs	r7, #0
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 8008ecc:	2f04      	cmp	r7, #4
 8008ece:	f107 0702 	add.w	r7, r7, #2
 8008ed2:	d0ce      	beq.n	8008e72 <OV9655_SetResolution+0x66>
 8008ed4:	2f05      	cmp	r7, #5
 8008ed6:	d1f9      	bne.n	8008ecc <OV9655_SetResolution+0xc0>
 8008ed8:	e7cb      	b.n	8008e72 <OV9655_SetResolution+0x66>
 8008eda:	f8df a118 	ldr.w	sl, [pc, #280]	; 8008ff4 <OV9655_SetResolution+0x1e8>
 8008ede:	f100 0818 	add.w	r8, r0, #24
 8008ee2:	f10d 0907 	add.w	r9, sp, #7
          tmp = OV9655_QVGA_QQVGA[index][1];
 8008ee6:	eb0a 0046 	add.w	r0, sl, r6, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008eea:	2301      	movs	r3, #1
 8008eec:	464a      	mov	r2, r9
 8008eee:	f81a 1016 	ldrb.w	r1, [sl, r6, lsl #1]
          tmp = OV9655_QVGA_QQVGA[index][1];
 8008ef2:	7845      	ldrb	r5, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008ef4:	4640      	mov	r0, r8
          tmp = OV9655_QVGA_QQVGA[index][1];
 8008ef6:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008efa:	f000 fbc3 	bl	8009684 <ov9655_write_reg>
  tickstart = pObj->IO.GetTick();
 8008efe:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008f00:	4607      	mov	r7, r0
  tickstart = pObj->IO.GetTick();
 8008f02:	4798      	blx	r3
 8008f04:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8008f06:	6963      	ldr	r3, [r4, #20]
 8008f08:	4798      	blx	r3
 8008f0a:	1b43      	subs	r3, r0, r5
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d9fa      	bls.n	8008f06 <OV9655_SetResolution+0xfa>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8008f10:	3601      	adds	r6, #1
 8008f12:	2e91      	cmp	r6, #145	; 0x91
 8008f14:	d017      	beq.n	8008f46 <OV9655_SetResolution+0x13a>
        if(ret != OV9655_ERROR)
 8008f16:	2f00      	cmp	r7, #0
 8008f18:	d0e5      	beq.n	8008ee6 <OV9655_SetResolution+0xda>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8008f1a:	2e90      	cmp	r6, #144	; 0x90
 8008f1c:	f106 0602 	add.w	r6, r6, #2
 8008f20:	d001      	beq.n	8008f26 <OV9655_SetResolution+0x11a>
 8008f22:	2e91      	cmp	r6, #145	; 0x91
 8008f24:	d1f9      	bne.n	8008f1a <OV9655_SetResolution+0x10e>
 8008f26:	2700      	movs	r7, #0
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 8008f28:	2f04      	cmp	r7, #4
 8008f2a:	f107 0702 	add.w	r7, r7, #2
 8008f2e:	d0a0      	beq.n	8008e72 <OV9655_SetResolution+0x66>
 8008f30:	2f05      	cmp	r7, #5
 8008f32:	d1f9      	bne.n	8008f28 <OV9655_SetResolution+0x11c>
 8008f34:	e79d      	b.n	8008e72 <OV9655_SetResolution+0x66>
    ret = OV9655_ERROR;
 8008f36:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008f3a:	4770      	bx	lr
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8008f3c:	1e38      	subs	r0, r7, #0
 8008f3e:	bf18      	it	ne
 8008f40:	2001      	movne	r0, #1
 8008f42:	4240      	negs	r0, r0
  return ret;
 8008f44:	e797      	b.n	8008e76 <OV9655_SetResolution+0x6a>
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008f46:	1e38      	subs	r0, r7, #0
 8008f48:	4e27      	ldr	r6, [pc, #156]	; (8008fe8 <OV9655_SetResolution+0x1dc>)
 8008f4a:	f04f 0700 	mov.w	r7, #0
 8008f4e:	bf18      	it	ne
 8008f50:	2001      	movne	r0, #1
 8008f52:	4240      	negs	r0, r0
        if(ret != OV9655_ERROR)
 8008f54:	2800      	cmp	r0, #0
 8008f56:	d1e7      	bne.n	8008f28 <OV9655_SetResolution+0x11c>
          tmp = OV9655_QQVGA[index][1];
 8008f58:	7873      	ldrb	r3, [r6, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008f5a:	464a      	mov	r2, r9
 8008f5c:	7831      	ldrb	r1, [r6, #0]
 8008f5e:	4640      	mov	r0, r8
          tmp = OV9655_QQVGA[index][1];
 8008f60:	f88d 3007 	strb.w	r3, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008f64:	2301      	movs	r3, #1
 8008f66:	f000 fb8d 	bl	8009684 <ov9655_write_reg>
  tickstart = pObj->IO.GetTick();
 8008f6a:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008f6c:	4605      	mov	r5, r0
  tickstart = pObj->IO.GetTick();
 8008f6e:	4798      	blx	r3
 8008f70:	4682      	mov	sl, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8008f72:	6963      	ldr	r3, [r4, #20]
 8008f74:	4798      	blx	r3
 8008f76:	eba0 000a 	sub.w	r0, r0, sl
 8008f7a:	2801      	cmp	r0, #1
 8008f7c:	d9f9      	bls.n	8008f72 <OV9655_SetResolution+0x166>
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008f7e:	1e28      	subs	r0, r5, #0
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 8008f80:	f107 0701 	add.w	r7, r7, #1
 8008f84:	f106 0602 	add.w	r6, r6, #2
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008f88:	bf18      	it	ne
 8008f8a:	2001      	movne	r0, #1
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 8008f8c:	2f05      	cmp	r7, #5
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008f8e:	f1c0 0000 	rsb	r0, r0, #0
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 8008f92:	d1df      	bne.n	8008f54 <OV9655_SetResolution+0x148>
 8008f94:	e76f      	b.n	8008e76 <OV9655_SetResolution+0x6a>
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008f96:	1e38      	subs	r0, r7, #0
 8008f98:	4e14      	ldr	r6, [pc, #80]	; (8008fec <OV9655_SetResolution+0x1e0>)
 8008f9a:	f04f 0700 	mov.w	r7, #0
 8008f9e:	bf18      	it	ne
 8008fa0:	2001      	movne	r0, #1
 8008fa2:	4240      	negs	r0, r0
        if(ret != OV9655_ERROR)
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	d191      	bne.n	8008ecc <OV9655_SetResolution+0xc0>
          tmp = OV9655_QVGA[index][1];
 8008fa8:	7873      	ldrb	r3, [r6, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 8008faa:	464a      	mov	r2, r9
 8008fac:	7831      	ldrb	r1, [r6, #0]
 8008fae:	4640      	mov	r0, r8
          tmp = OV9655_QVGA[index][1];
 8008fb0:	f88d 3007 	strb.w	r3, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	f000 fb65 	bl	8009684 <ov9655_write_reg>
  tickstart = pObj->IO.GetTick();
 8008fba:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 8008fbc:	4605      	mov	r5, r0
  tickstart = pObj->IO.GetTick();
 8008fbe:	4798      	blx	r3
 8008fc0:	4682      	mov	sl, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8008fc2:	6963      	ldr	r3, [r4, #20]
 8008fc4:	4798      	blx	r3
 8008fc6:	eba0 000a 	sub.w	r0, r0, sl
 8008fca:	2801      	cmp	r0, #1
 8008fcc:	d9f9      	bls.n	8008fc2 <OV9655_SetResolution+0x1b6>
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 8008fce:	1e28      	subs	r0, r5, #0
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 8008fd0:	f107 0701 	add.w	r7, r7, #1
 8008fd4:	f106 0602 	add.w	r6, r6, #2
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 8008fd8:	bf18      	it	ne
 8008fda:	2001      	movne	r0, #1
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 8008fdc:	2f05      	cmp	r7, #5
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 8008fde:	f1c0 0000 	rsb	r0, r0, #0
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 8008fe2:	d1df      	bne.n	8008fa4 <OV9655_SetResolution+0x198>
 8008fe4:	e747      	b.n	8008e76 <OV9655_SetResolution+0x6a>
 8008fe6:	bf00      	nop
 8008fe8:	08098ff0 	.word	0x08098ff0
 8008fec:	08098ffc 	.word	0x08098ffc
 8008ff0:	0809912c 	.word	0x0809912c
 8008ff4:	08099008 	.word	0x08099008

08008ff8 <OV9655_SetColorEffect>:
  switch(Effect)
 8008ff8:	3901      	subs	r1, #1
{
 8008ffa:	b570      	push	{r4, r5, r6, lr}
 8008ffc:	b082      	sub	sp, #8
  switch(Effect)
 8008ffe:	291f      	cmp	r1, #31
 8009000:	d821      	bhi.n	8009046 <OV9655_SetColorEffect+0x4e>
 8009002:	e8df f011 	tbh	[pc, r1, lsl #1]
 8009006:	006c      	.short	0x006c
 8009008:	002000b1 	.word	0x002000b1
 800900c:	002000e4 	.word	0x002000e4
 8009010:	00200020 	.word	0x00200020
 8009014:	0020012b 	.word	0x0020012b
 8009018:	00200020 	.word	0x00200020
 800901c:	00200020 	.word	0x00200020
 8009020:	00200020 	.word	0x00200020
 8009024:	00200145 	.word	0x00200145
 8009028:	00200020 	.word	0x00200020
 800902c:	00200020 	.word	0x00200020
 8009030:	00200020 	.word	0x00200020
 8009034:	00200020 	.word	0x00200020
 8009038:	00200020 	.word	0x00200020
 800903c:	00200020 	.word	0x00200020
 8009040:	00200020 	.word	0x00200020
 8009044:	0174      	.short	0x0174
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8009046:	f100 0518 	add.w	r5, r0, #24
    tmp = 0xCC;
 800904a:	21cc      	movs	r1, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800904c:	2301      	movs	r3, #1
 800904e:	f10d 0207 	add.w	r2, sp, #7
    tmp = 0xCC;
 8009052:	f88d 1007 	strb.w	r1, [sp, #7]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8009056:	4628      	mov	r0, r5
 8009058:	213a      	movs	r1, #58	; 0x3a
    tmp = 0x80;
 800905a:	2680      	movs	r6, #128	; 0x80
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800905c:	f000 fb12 	bl	8009684 <ov9655_write_reg>
 8009060:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8009062:	2301      	movs	r3, #1
 8009064:	f10d 0207 	add.w	r2, sp, #7
 8009068:	214f      	movs	r1, #79	; 0x4f
 800906a:	4628      	mov	r0, r5
    tmp = 0x80;
 800906c:	f88d 6007 	strb.w	r6, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8009070:	f000 fb08 	bl	8009684 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8009074:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8009076:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8009078:	f10d 0207 	add.w	r2, sp, #7
 800907c:	2150      	movs	r1, #80	; 0x50
 800907e:	4628      	mov	r0, r5
 8009080:	f000 fb00 	bl	8009684 <ov9655_write_reg>
    tmp = 0x00;
 8009084:	2300      	movs	r3, #0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8009086:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8009088:	f10d 0207 	add.w	r2, sp, #7
    tmp = 0x00;
 800908c:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8009090:	2151      	movs	r1, #81	; 0x51
 8009092:	2301      	movs	r3, #1
 8009094:	4628      	mov	r0, r5
 8009096:	f000 faf5 	bl	8009684 <ov9655_write_reg>
 800909a:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 800909c:	2301      	movs	r3, #1
 800909e:	f10d 0207 	add.w	r2, sp, #7
 80090a2:	2152      	movs	r1, #82	; 0x52
 80090a4:	4628      	mov	r0, r5
 80090a6:	f000 faed 	bl	8009684 <ov9655_write_reg>
    tmp = 0x80;
 80090aa:	f88d 6007 	strb.w	r6, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80090ae:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80090b0:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80090b2:	f10d 0207 	add.w	r2, sp, #7
 80090b6:	2153      	movs	r1, #83	; 0x53
 80090b8:	4628      	mov	r0, r5
 80090ba:	f000 fae3 	bl	8009684 <ov9655_write_reg>
 80090be:	4601      	mov	r1, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80090c0:	2301      	movs	r3, #1
 80090c2:	f10d 0207 	add.w	r2, sp, #7
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80090c6:	440c      	add	r4, r1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80090c8:	4628      	mov	r0, r5
 80090ca:	2154      	movs	r1, #84	; 0x54
 80090cc:	f000 fada 	bl	8009684 <ov9655_write_reg>
 80090d0:	4420      	add	r0, r4
  if(ret != OV9655_OK)
 80090d2:	3800      	subs	r0, #0
 80090d4:	bf18      	it	ne
 80090d6:	2001      	movne	r0, #1
}
 80090d8:	4240      	negs	r0, r0
 80090da:	b002      	add	sp, #8
 80090dc:	bd70      	pop	{r4, r5, r6, pc}
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80090de:	f100 0518 	add.w	r5, r0, #24
    tmp = 0xCC;
 80090e2:	21cc      	movs	r1, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80090e4:	2301      	movs	r3, #1
 80090e6:	f10d 0207 	add.w	r2, sp, #7
    tmp = 0xCC;
 80090ea:	f88d 1007 	strb.w	r1, [sp, #7]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80090ee:	4628      	mov	r0, r5
 80090f0:	213a      	movs	r1, #58	; 0x3a
 80090f2:	f000 fac7 	bl	8009684 <ov9655_write_reg>
    tmp = 0x00;
 80090f6:	2200      	movs	r2, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80090f8:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80090fa:	2301      	movs	r3, #1
 80090fc:	214f      	movs	r1, #79	; 0x4f
    tmp = 0x00;
 80090fe:	f88d 2007 	strb.w	r2, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8009102:	4628      	mov	r0, r5
 8009104:	f10d 0207 	add.w	r2, sp, #7
 8009108:	f000 fabc 	bl	8009684 <ov9655_write_reg>
 800910c:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 800910e:	2301      	movs	r3, #1
 8009110:	f10d 0207 	add.w	r2, sp, #7
 8009114:	2150      	movs	r1, #80	; 0x50
 8009116:	4628      	mov	r0, r5
 8009118:	f000 fab4 	bl	8009684 <ov9655_write_reg>
 800911c:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 800911e:	2301      	movs	r3, #1
 8009120:	f10d 0207 	add.w	r2, sp, #7
 8009124:	2151      	movs	r1, #81	; 0x51
 8009126:	4628      	mov	r0, r5
 8009128:	f000 faac 	bl	8009684 <ov9655_write_reg>
 800912c:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 800912e:	2301      	movs	r3, #1
 8009130:	f10d 0207 	add.w	r2, sp, #7
 8009134:	2152      	movs	r1, #82	; 0x52
 8009136:	4628      	mov	r0, r5
 8009138:	f000 faa4 	bl	8009684 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 800913c:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 800913e:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8009140:	f10d 0207 	add.w	r2, sp, #7
 8009144:	2153      	movs	r1, #83	; 0x53
 8009146:	4628      	mov	r0, r5
 8009148:	f000 fa9c 	bl	8009684 <ov9655_write_reg>
 800914c:	4601      	mov	r1, r0
    tmp = 0x60;
 800914e:	2360      	movs	r3, #96	; 0x60
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8009150:	f10d 0207 	add.w	r2, sp, #7
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8009154:	440c      	add	r4, r1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8009156:	4628      	mov	r0, r5
    tmp = 0x60;
 8009158:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 800915c:	2154      	movs	r1, #84	; 0x54
 800915e:	2301      	movs	r3, #1
 8009160:	f000 fa90 	bl	8009684 <ov9655_write_reg>
 8009164:	4420      	add	r0, r4
    break;
 8009166:	e7b4      	b.n	80090d2 <OV9655_SetColorEffect+0xda>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8009168:	f100 0518 	add.w	r5, r0, #24
    tmp = 0xCC;
 800916c:	21cc      	movs	r1, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800916e:	2301      	movs	r3, #1
 8009170:	f10d 0207 	add.w	r2, sp, #7
    tmp = 0xCC;
 8009174:	f88d 1007 	strb.w	r1, [sp, #7]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8009178:	4628      	mov	r0, r5
 800917a:	213a      	movs	r1, #58	; 0x3a
 800917c:	f000 fa82 	bl	8009684 <ov9655_write_reg>
    tmp = 0x60;
 8009180:	2260      	movs	r2, #96	; 0x60
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8009182:	2301      	movs	r3, #1
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8009184:	4604      	mov	r4, r0
    tmp = 0x60;
 8009186:	f88d 2007 	strb.w	r2, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 800918a:	214f      	movs	r1, #79	; 0x4f
 800918c:	f10d 0207 	add.w	r2, sp, #7
 8009190:	4628      	mov	r0, r5
 8009192:	f000 fa77 	bl	8009684 <ov9655_write_reg>
    tmp = 0x00;
 8009196:	2300      	movs	r3, #0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8009198:	4404      	add	r4, r0
    tmp = 0x00;
 800919a:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 800919e:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80091a0:	f10d 0207 	add.w	r2, sp, #7
 80091a4:	2150      	movs	r1, #80	; 0x50
 80091a6:	4628      	mov	r0, r5
 80091a8:	f000 fa6c 	bl	8009684 <ov9655_write_reg>
 80091ac:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80091ae:	f10d 0207 	add.w	r2, sp, #7
 80091b2:	2301      	movs	r3, #1
 80091b4:	2151      	movs	r1, #81	; 0x51
 80091b6:	4628      	mov	r0, r5
 80091b8:	f000 fa64 	bl	8009684 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80091bc:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80091be:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80091c0:	f10d 0207 	add.w	r2, sp, #7
 80091c4:	2152      	movs	r1, #82	; 0x52
 80091c6:	4628      	mov	r0, r5
 80091c8:	f000 fa5c 	bl	8009684 <ov9655_write_reg>
 80091cc:	e76f      	b.n	80090ae <OV9655_SetColorEffect+0xb6>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80091ce:	f100 0618 	add.w	r6, r0, #24
    tmp = 0xCC;
 80091d2:	21cc      	movs	r1, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80091d4:	2301      	movs	r3, #1
 80091d6:	f10d 0207 	add.w	r2, sp, #7
    tmp = 0xCC;
 80091da:	f88d 1007 	strb.w	r1, [sp, #7]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80091de:	4630      	mov	r0, r6
 80091e0:	213a      	movs	r1, #58	; 0x3a
    tmp = 0x00;
 80091e2:	2500      	movs	r5, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80091e4:	f000 fa4e 	bl	8009684 <ov9655_write_reg>
 80091e8:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80091ea:	2301      	movs	r3, #1
 80091ec:	f10d 0207 	add.w	r2, sp, #7
 80091f0:	214f      	movs	r1, #79	; 0x4f
 80091f2:	4630      	mov	r0, r6
    tmp = 0x00;
 80091f4:	f88d 5007 	strb.w	r5, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80091f8:	f000 fa44 	bl	8009684 <ov9655_write_reg>
 80091fc:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80091fe:	2301      	movs	r3, #1
 8009200:	f10d 0207 	add.w	r2, sp, #7
 8009204:	2150      	movs	r1, #80	; 0x50
 8009206:	4630      	mov	r0, r6
 8009208:	f000 fa3c 	bl	8009684 <ov9655_write_reg>
 800920c:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 800920e:	2301      	movs	r3, #1
 8009210:	f10d 0207 	add.w	r2, sp, #7
 8009214:	2151      	movs	r1, #81	; 0x51
 8009216:	4630      	mov	r0, r6
 8009218:	f000 fa34 	bl	8009684 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 800921c:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 800921e:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8009220:	f10d 0207 	add.w	r2, sp, #7
 8009224:	2152      	movs	r1, #82	; 0x52
 8009226:	4630      	mov	r0, r6
 8009228:	f000 fa2c 	bl	8009684 <ov9655_write_reg>
    tmp = 0x80;
 800922c:	2380      	movs	r3, #128	; 0x80
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 800922e:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8009230:	f10d 0207 	add.w	r2, sp, #7
 8009234:	2153      	movs	r1, #83	; 0x53
    tmp = 0x80;
 8009236:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 800923a:	4630      	mov	r0, r6
 800923c:	2301      	movs	r3, #1
 800923e:	f000 fa21 	bl	8009684 <ov9655_write_reg>
 8009242:	4603      	mov	r3, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8009244:	f10d 0207 	add.w	r2, sp, #7
 8009248:	4630      	mov	r0, r6
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 800924a:	441c      	add	r4, r3
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 800924c:	2154      	movs	r1, #84	; 0x54
 800924e:	2301      	movs	r3, #1
    tmp = 0x00;
 8009250:	f88d 5007 	strb.w	r5, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8009254:	f000 fa16 	bl	8009684 <ov9655_write_reg>
 8009258:	4420      	add	r0, r4
    break;
 800925a:	e73a      	b.n	80090d2 <OV9655_SetColorEffect+0xda>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800925c:	f100 0518 	add.w	r5, r0, #24
    tmp = 0xCC;
 8009260:	21cc      	movs	r1, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8009262:	2301      	movs	r3, #1
 8009264:	f10d 0207 	add.w	r2, sp, #7
    tmp = 0xCC;
 8009268:	f88d 1007 	strb.w	r1, [sp, #7]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800926c:	4628      	mov	r0, r5
 800926e:	213a      	movs	r1, #58	; 0x3a
 8009270:	f000 fa08 	bl	8009684 <ov9655_write_reg>
    tmp = 0x00;
 8009274:	2200      	movs	r2, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8009276:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8009278:	2301      	movs	r3, #1
    tmp = 0x00;
 800927a:	f88d 2007 	strb.w	r2, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 800927e:	214f      	movs	r1, #79	; 0x4f
 8009280:	f10d 0207 	add.w	r2, sp, #7
 8009284:	4628      	mov	r0, r5
 8009286:	f000 f9fd 	bl	8009684 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 800928a:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 800928c:	4404      	add	r4, r0
 800928e:	e787      	b.n	80091a0 <OV9655_SetColorEffect+0x1a8>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8009290:	f100 0518 	add.w	r5, r0, #24
    tmp = 0xCC;
 8009294:	21cc      	movs	r1, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8009296:	2301      	movs	r3, #1
 8009298:	f10d 0207 	add.w	r2, sp, #7
    tmp = 0xCC;
 800929c:	f88d 1007 	strb.w	r1, [sp, #7]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80092a0:	4628      	mov	r0, r5
 80092a2:	213a      	movs	r1, #58	; 0x3a
    tmp = 0x00;
 80092a4:	2600      	movs	r6, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80092a6:	f000 f9ed 	bl	8009684 <ov9655_write_reg>
 80092aa:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80092ac:	2301      	movs	r3, #1
 80092ae:	f10d 0207 	add.w	r2, sp, #7
 80092b2:	214f      	movs	r1, #79	; 0x4f
 80092b4:	4628      	mov	r0, r5
    tmp = 0x00;
 80092b6:	f88d 6007 	strb.w	r6, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80092ba:	f000 f9e3 	bl	8009684 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80092be:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80092c0:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80092c2:	f10d 0207 	add.w	r2, sp, #7
 80092c6:	2150      	movs	r1, #80	; 0x50
 80092c8:	4628      	mov	r0, r5
 80092ca:	f000 f9db 	bl	8009684 <ov9655_write_reg>
    tmp = 0x20;
 80092ce:	2320      	movs	r3, #32
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80092d0:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80092d2:	f10d 0207 	add.w	r2, sp, #7
    tmp = 0x20;
 80092d6:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80092da:	2151      	movs	r1, #81	; 0x51
 80092dc:	2301      	movs	r3, #1
 80092de:	4628      	mov	r0, r5
 80092e0:	f000 f9d0 	bl	8009684 <ov9655_write_reg>
    tmp = 0xF0;
 80092e4:	23f0      	movs	r3, #240	; 0xf0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80092e6:	4404      	add	r4, r0
    tmp = 0xF0;
 80092e8:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80092ec:	e6d6      	b.n	800909c <OV9655_SetColorEffect+0xa4>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80092ee:	f100 0518 	add.w	r5, r0, #24
    tmp = 0xEC;
 80092f2:	21ec      	movs	r1, #236	; 0xec
 80092f4:	e6aa      	b.n	800904c <OV9655_SetColorEffect+0x54>
 80092f6:	bf00      	nop

080092f8 <OV9655_SetBrightness>:
{
 80092f8:	b500      	push	{lr}
  tmp = brightness_level[Level + 4];
 80092fa:	3110      	adds	r1, #16
{
 80092fc:	b085      	sub	sp, #20
  const uint8_t brightness_level[] = {0xB0U, 0xB0U, 0xB0U, 0x98U, 0x00U, 0x18U, 0x30U, 0x30U, 0x30U};
 80092fe:	4a0d      	ldr	r2, [pc, #52]	; (8009334 <OV9655_SetBrightness+0x3c>)
{
 8009300:	4686      	mov	lr, r0
  tmp = brightness_level[Level + 4];
 8009302:	eb0d 0c01 	add.w	ip, sp, r1
  const uint8_t brightness_level[] = {0xB0U, 0xB0U, 0xB0U, 0x98U, 0x00U, 0x18U, 0x30U, 0x30U, 0x30U};
 8009306:	ab01      	add	r3, sp, #4
 8009308:	ca07      	ldmia	r2, {r0, r1, r2}
 800930a:	c303      	stmia	r3!, {r0, r1}
 800930c:	701a      	strb	r2, [r3, #0]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 800930e:	2155      	movs	r1, #85	; 0x55
  tmp = brightness_level[Level + 4];
 8009310:	f81c cc08 	ldrb.w	ip, [ip, #-8]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 8009314:	2301      	movs	r3, #1
 8009316:	f10d 0203 	add.w	r2, sp, #3
 800931a:	f10e 0018 	add.w	r0, lr, #24
  tmp = brightness_level[Level + 4];
 800931e:	f88d c003 	strb.w	ip, [sp, #3]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 8009322:	f000 f9af 	bl	8009684 <ov9655_write_reg>
 8009326:	3800      	subs	r0, #0
 8009328:	bf18      	it	ne
 800932a:	2001      	movne	r0, #1
}
 800932c:	4240      	negs	r0, r0
 800932e:	b005      	add	sp, #20
 8009330:	f85d fb04 	ldr.w	pc, [sp], #4
 8009334:	08028c50 	.word	0x08028c50

08009338 <OV9655_SetContrast>:
{
 8009338:	b500      	push	{lr}
  tmp = contrast_level[Level + 4];
 800933a:	3110      	adds	r1, #16
{
 800933c:	b085      	sub	sp, #20
  const uint8_t contrast_level[] = {0x30U, 0x30U, 0x30U, 0x38U, 0x40U, 0x50U, 0x60U, 0x60U, 0x60U};
 800933e:	4a0d      	ldr	r2, [pc, #52]	; (8009374 <OV9655_SetContrast+0x3c>)
{
 8009340:	4686      	mov	lr, r0
  tmp = contrast_level[Level + 4];
 8009342:	eb0d 0c01 	add.w	ip, sp, r1
  const uint8_t contrast_level[] = {0x30U, 0x30U, 0x30U, 0x38U, 0x40U, 0x50U, 0x60U, 0x60U, 0x60U};
 8009346:	ab01      	add	r3, sp, #4
 8009348:	ca07      	ldmia	r2, {r0, r1, r2}
 800934a:	c303      	stmia	r3!, {r0, r1}
 800934c:	701a      	strb	r2, [r3, #0]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 800934e:	2156      	movs	r1, #86	; 0x56
  tmp = contrast_level[Level + 4];
 8009350:	f81c cc08 	ldrb.w	ip, [ip, #-8]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 8009354:	2301      	movs	r3, #1
 8009356:	f10d 0203 	add.w	r2, sp, #3
 800935a:	f10e 0018 	add.w	r0, lr, #24
  tmp = contrast_level[Level + 4];
 800935e:	f88d c003 	strb.w	ip, [sp, #3]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 8009362:	f000 f98f 	bl	8009684 <ov9655_write_reg>
 8009366:	3800      	subs	r0, #0
 8009368:	bf18      	it	ne
 800936a:	2001      	movne	r0, #1
}
 800936c:	4240      	negs	r0, r0
 800936e:	b005      	add	sp, #20
 8009370:	f85d fb04 	ldr.w	pc, [sp], #4
 8009374:	08098fe4 	.word	0x08098fe4

08009378 <OV9655_SetPixelFormat>:
  if((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422))
 8009378:	f031 0302 	bics.w	r3, r1, #2
{
 800937c:	b530      	push	{r4, r5, lr}
 800937e:	b083      	sub	sp, #12
  if((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422))
 8009380:	d177      	bne.n	8009472 <OV9655_SetPixelFormat+0xfa>
  else if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8009382:	f100 0418 	add.w	r4, r0, #24
 8009386:	460d      	mov	r5, r1
 8009388:	2301      	movs	r3, #1
 800938a:	f10d 0207 	add.w	r2, sp, #7
 800938e:	2112      	movs	r1, #18
 8009390:	4620      	mov	r0, r4
 8009392:	f000 f96f 	bl	8009674 <ov9655_read_reg>
 8009396:	2800      	cmp	r0, #0
 8009398:	d16b      	bne.n	8009472 <OV9655_SetPixelFormat+0xfa>
    tmp &= ~0x03U; /* Reset Bit[0:1] corresponding to pixel format selection */
 800939a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    switch (PixelFormat)
 800939e:	2d02      	cmp	r5, #2
    tmp &= ~0x03U; /* Reset Bit[0:1] corresponding to pixel format selection */
 80093a0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    switch (PixelFormat)
 80093a4:	d029      	beq.n	80093fa <OV9655_SetPixelFormat+0x82>
      tmp |= 0x03U;
 80093a6:	f043 0103 	orr.w	r1, r3, #3
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 80093aa:	f10d 0207 	add.w	r2, sp, #7
 80093ae:	2301      	movs	r3, #1
 80093b0:	4620      	mov	r0, r4
      tmp |= 0x03U;
 80093b2:	f88d 1007 	strb.w	r1, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 80093b6:	2112      	movs	r1, #18
 80093b8:	f000 f964 	bl	8009684 <ov9655_write_reg>
 80093bc:	2800      	cmp	r0, #0
 80093be:	d158      	bne.n	8009472 <OV9655_SetPixelFormat+0xfa>
      else if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 80093c0:	2301      	movs	r3, #1
 80093c2:	f10d 0207 	add.w	r2, sp, #7
 80093c6:	2140      	movs	r1, #64	; 0x40
 80093c8:	4620      	mov	r0, r4
 80093ca:	f000 f953 	bl	8009674 <ov9655_read_reg>
 80093ce:	2800      	cmp	r0, #0
 80093d0:	d14f      	bne.n	8009472 <OV9655_SetPixelFormat+0xfa>
        tmp |= 0x10U;
 80093d2:	f89d 5007 	ldrb.w	r5, [sp, #7]
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 80093d6:	2301      	movs	r3, #1
 80093d8:	f10d 0207 	add.w	r2, sp, #7
 80093dc:	2140      	movs	r1, #64	; 0x40
        tmp |= 0x10U;
 80093de:	f045 0510 	orr.w	r5, r5, #16
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 80093e2:	4620      	mov	r0, r4
        tmp |= 0x10U;
 80093e4:	f88d 5007 	strb.w	r5, [sp, #7]
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 80093e8:	f000 f94c 	bl	8009684 <ov9655_write_reg>
 80093ec:	3800      	subs	r0, #0
 80093ee:	bf18      	it	ne
 80093f0:	2001      	movne	r0, #1
 80093f2:	4245      	negs	r5, r0
}
 80093f4:	4628      	mov	r0, r5
 80093f6:	b003      	add	sp, #12
 80093f8:	bd30      	pop	{r4, r5, pc}
      tmp |= 0x02U;
 80093fa:	f043 0102 	orr.w	r1, r3, #2
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 80093fe:	f10d 0207 	add.w	r2, sp, #7
 8009402:	2301      	movs	r3, #1
 8009404:	4620      	mov	r0, r4
      tmp |= 0x02U;
 8009406:	f88d 1007 	strb.w	r1, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 800940a:	2112      	movs	r1, #18
 800940c:	f000 f93a 	bl	8009684 <ov9655_write_reg>
 8009410:	bb78      	cbnz	r0, 8009472 <OV9655_SetPixelFormat+0xfa>
        if(ov9655_read_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 8009412:	2301      	movs	r3, #1
 8009414:	f10d 0207 	add.w	r2, sp, #7
 8009418:	213a      	movs	r1, #58	; 0x3a
 800941a:	4620      	mov	r0, r4
 800941c:	f000 f92a 	bl	8009674 <ov9655_read_reg>
 8009420:	bb38      	cbnz	r0, 8009472 <OV9655_SetPixelFormat+0xfa>
          tmp &= ~(3 << 2); /* Clear bits 3:2: YUV output sequence is 0:yuyv */
 8009422:	f89d 1007 	ldrb.w	r1, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 8009426:	2301      	movs	r3, #1
 8009428:	f10d 0207 	add.w	r2, sp, #7
 800942c:	4620      	mov	r0, r4
          tmp &= ~(3 << 2); /* Clear bits 3:2: YUV output sequence is 0:yuyv */
 800942e:	f021 012c 	bic.w	r1, r1, #44	; 0x2c
 8009432:	f88d 1007 	strb.w	r1, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 8009436:	213a      	movs	r1, #58	; 0x3a
 8009438:	f000 f924 	bl	8009684 <ov9655_write_reg>
 800943c:	b9c8      	cbnz	r0, 8009472 <OV9655_SetPixelFormat+0xfa>
            if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 800943e:	2301      	movs	r3, #1
 8009440:	f10d 0207 	add.w	r2, sp, #7
 8009444:	2140      	movs	r1, #64	; 0x40
 8009446:	4620      	mov	r0, r4
 8009448:	f000 f914 	bl	8009674 <ov9655_read_reg>
 800944c:	4605      	mov	r5, r0
 800944e:	b9a8      	cbnz	r0, 800947c <OV9655_SetPixelFormat+0x104>
                tmp &= ~(3 << 4); /* Clear bits 5:4: RGB 555/565 option */
 8009450:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009454:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8009458:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800945c:	f88d 3007 	strb.w	r3, [sp, #7]
            if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8009460:	2301      	movs	r3, #1
 8009462:	f10d 0207 	add.w	r2, sp, #7
 8009466:	2140      	movs	r1, #64	; 0x40
 8009468:	4620      	mov	r0, r4
 800946a:	f000 f90b 	bl	8009684 <ov9655_write_reg>
 800946e:	2800      	cmp	r0, #0
 8009470:	d0c0      	beq.n	80093f4 <OV9655_SetPixelFormat+0x7c>
              ret = OV9655_ERROR;
 8009472:	f04f 35ff 	mov.w	r5, #4294967295
}
 8009476:	4628      	mov	r0, r5
 8009478:	b003      	add	sp, #12
 800947a:	bd30      	pop	{r4, r5, pc}
              ret = OV9655_ERROR;
 800947c:	f04f 35ff 	mov.w	r5, #4294967295
 8009480:	e7ee      	b.n	8009460 <OV9655_SetPixelFormat+0xe8>
 8009482:	bf00      	nop

08009484 <OV9655_GetResolution>:
{
 8009484:	b510      	push	{r4, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	460c      	mov	r4, r1
  if(ov9655_read_reg(&pObj->Ctx, OV9655_HORIZONTAL_FRAME_CTRL, &tmp, 1) != OV9655_OK)
 800948a:	2301      	movs	r3, #1
 800948c:	2132      	movs	r1, #50	; 0x32
 800948e:	f10d 0207 	add.w	r2, sp, #7
 8009492:	3018      	adds	r0, #24
 8009494:	f000 f8ee 	bl	8009674 <ov9655_read_reg>
 8009498:	b938      	cbnz	r0, 80094aa <OV9655_GetResolution+0x26>
    switch (tmp)
 800949a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800949e:	2ba4      	cmp	r3, #164	; 0xa4
 80094a0:	d007      	beq.n	80094b2 <OV9655_GetResolution+0x2e>
 80094a2:	2bff      	cmp	r3, #255	; 0xff
 80094a4:	d00c      	beq.n	80094c0 <OV9655_GetResolution+0x3c>
 80094a6:	2b12      	cmp	r3, #18
 80094a8:	d006      	beq.n	80094b8 <OV9655_GetResolution+0x34>
    ret = OV9655_ERROR;
 80094aa:	f04f 30ff 	mov.w	r0, #4294967295
}
 80094ae:	b002      	add	sp, #8
 80094b0:	bd10      	pop	{r4, pc}
      *Resolution = OV9655_R160x120;
 80094b2:	6020      	str	r0, [r4, #0]
}
 80094b4:	b002      	add	sp, #8
 80094b6:	bd10      	pop	{r4, pc}
      *Resolution = OV9655_R320x240;
 80094b8:	2301      	movs	r3, #1
 80094ba:	6023      	str	r3, [r4, #0]
}
 80094bc:	b002      	add	sp, #8
 80094be:	bd10      	pop	{r4, pc}
      *Resolution = OV9655_R640x480;
 80094c0:	2303      	movs	r3, #3
 80094c2:	6023      	str	r3, [r4, #0]
}
 80094c4:	b002      	add	sp, #8
 80094c6:	bd10      	pop	{r4, pc}

080094c8 <OV9655_ReadID>:
{
 80094c8:	b530      	push	{r4, r5, lr}
  pObj->IO.Init();
 80094ca:	4604      	mov	r4, r0
{
 80094cc:	b083      	sub	sp, #12
 80094ce:	460d      	mov	r5, r1
  pObj->IO.Init();
 80094d0:	f854 3b18 	ldr.w	r3, [r4], #24
 80094d4:	4798      	blx	r3
    if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_HIGH, &tmp, 1)!= OV9655_OK)
 80094d6:	2301      	movs	r3, #1
 80094d8:	f10d 0207 	add.w	r2, sp, #7
 80094dc:	210a      	movs	r1, #10
 80094de:	4620      	mov	r0, r4
 80094e0:	f000 f8c8 	bl	8009674 <ov9655_read_reg>
 80094e4:	b990      	cbnz	r0, 800950c <OV9655_ReadID+0x44>
      *Id = (uint32_t)tmp << 8U;
 80094e6:	f89d 1007 	ldrb.w	r1, [sp, #7]
      if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_LOW, &tmp, 1)!= OV9655_OK)
 80094ea:	2301      	movs	r3, #1
 80094ec:	f10d 0207 	add.w	r2, sp, #7
 80094f0:	4620      	mov	r0, r4
      *Id = (uint32_t)tmp << 8U;
 80094f2:	0209      	lsls	r1, r1, #8
 80094f4:	6029      	str	r1, [r5, #0]
      if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_LOW, &tmp, 1)!= OV9655_OK)
 80094f6:	210b      	movs	r1, #11
 80094f8:	f000 f8bc 	bl	8009674 <ov9655_read_reg>
 80094fc:	b930      	cbnz	r0, 800950c <OV9655_ReadID+0x44>
        *Id |= tmp;
 80094fe:	682b      	ldr	r3, [r5, #0]
 8009500:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009504:	4313      	orrs	r3, r2
 8009506:	602b      	str	r3, [r5, #0]
}
 8009508:	b003      	add	sp, #12
 800950a:	bd30      	pop	{r4, r5, pc}
      ret = OV9655_ERROR;
 800950c:	f04f 30ff 	mov.w	r0, #4294967295
 8009510:	e7fa      	b.n	8009508 <OV9655_ReadID+0x40>
 8009512:	bf00      	nop

08009514 <OV9655_MirrorFlipConfig>:
  if(Config > OV9655_MIRROR_FLIP)
 8009514:	2903      	cmp	r1, #3
 8009516:	d824      	bhi.n	8009562 <OV9655_MirrorFlipConfig+0x4e>
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8009518:	2301      	movs	r3, #1
{
 800951a:	b530      	push	{r4, r5, lr}
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 800951c:	f100 0418 	add.w	r4, r0, #24
{
 8009520:	b083      	sub	sp, #12
 8009522:	460d      	mov	r5, r1
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8009524:	211e      	movs	r1, #30
 8009526:	f10d 0207 	add.w	r2, sp, #7
 800952a:	4620      	mov	r0, r4
 800952c:	f000 f8a2 	bl	8009674 <ov9655_read_reg>
 8009530:	b9a0      	cbnz	r0, 800955c <OV9655_MirrorFlipConfig+0x48>
      tmp &= ~(3U << 4U);    /* Clear Bit[5:4] Mirror/VFlip */
 8009532:	f89d c007 	ldrb.w	ip, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8009536:	4620      	mov	r0, r4
 8009538:	2301      	movs	r3, #1
 800953a:	f10d 0207 	add.w	r2, sp, #7
      tmp &= ~(3U << 4U);    /* Clear Bit[5:4] Mirror/VFlip */
 800953e:	f02c 0430 	bic.w	r4, ip, #48	; 0x30
      tmp |= (Config << 4U); /* Configure Bit[5:4] Mirror/VFlip */
 8009542:	ea44 1105 	orr.w	r1, r4, r5, lsl #4
 8009546:	f88d 1007 	strb.w	r1, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 800954a:	211e      	movs	r1, #30
 800954c:	f000 f89a 	bl	8009684 <ov9655_write_reg>
 8009550:	3800      	subs	r0, #0
 8009552:	bf18      	it	ne
 8009554:	2001      	movne	r0, #1
 8009556:	4240      	negs	r0, r0
}
 8009558:	b003      	add	sp, #12
 800955a:	bd30      	pop	{r4, r5, pc}
    ret = OV9655_ERROR;
 800955c:	f04f 30ff 	mov.w	r0, #4294967295
 8009560:	e7fa      	b.n	8009558 <OV9655_MirrorFlipConfig+0x44>
 8009562:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009566:	4770      	bx	lr

08009568 <OV9655_NightModeConfig>:
{
 8009568:	b530      	push	{r4, r5, lr}
  if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL11, &tmp, 1) != OV9655_OK)
 800956a:	f100 0418 	add.w	r4, r0, #24
{
 800956e:	b083      	sub	sp, #12
 8009570:	460d      	mov	r5, r1
  if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL11, &tmp, 1) != OV9655_OK)
 8009572:	2301      	movs	r3, #1
 8009574:	f10d 0207 	add.w	r2, sp, #7
 8009578:	213b      	movs	r1, #59	; 0x3b
 800957a:	4620      	mov	r0, r4
 800957c:	f000 f87a 	bl	8009674 <ov9655_read_reg>
 8009580:	b9b8      	cbnz	r0, 80095b2 <OV9655_NightModeConfig+0x4a>
    if(Cmd == NIGHT_MODE_ENABLE)
 8009582:	2d01      	cmp	r5, #1
      tmp |= 0x80U;
 8009584:	f89d 5007 	ldrb.w	r5, [sp, #7]
    if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL11 ,&tmp, 1) != OV9655_OK)
 8009588:	f04f 0301 	mov.w	r3, #1
 800958c:	f10d 0207 	add.w	r2, sp, #7
      tmp |= 0x80U;
 8009590:	bf0c      	ite	eq
 8009592:	f045 0580 	orreq.w	r5, r5, #128	; 0x80
      tmp &= 0x7FU;
 8009596:	f005 057f 	andne.w	r5, r5, #127	; 0x7f
    if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL11 ,&tmp, 1) != OV9655_OK)
 800959a:	213b      	movs	r1, #59	; 0x3b
 800959c:	4620      	mov	r0, r4
 800959e:	f88d 5007 	strb.w	r5, [sp, #7]
 80095a2:	f000 f86f 	bl	8009684 <ov9655_write_reg>
 80095a6:	3800      	subs	r0, #0
 80095a8:	bf18      	it	ne
 80095aa:	2001      	movne	r0, #1
 80095ac:	4240      	negs	r0, r0
}
 80095ae:	b003      	add	sp, #12
 80095b0:	bd30      	pop	{r4, r5, pc}
    ret = OV9655_ERROR;
 80095b2:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80095b6:	e7fa      	b.n	80095ae <OV9655_NightModeConfig+0x46>

080095b8 <OV9655_Init>:
  if(pObj->IsInitialized == 0U)
 80095b8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80095bc:	bb5b      	cbnz	r3, 8009616 <OV9655_Init+0x5e>
    if((Resolution > OV9655_R640x480) || ((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422)))
 80095be:	2903      	cmp	r1, #3
{
 80095c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095c2:	460e      	mov	r6, r1
 80095c4:	b083      	sub	sp, #12
    if((Resolution > OV9655_R640x480) || ((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422)))
 80095c6:	d828      	bhi.n	800961a <OV9655_Init+0x62>
 80095c8:	f032 0302 	bics.w	r3, r2, #2
 80095cc:	4617      	mov	r7, r2
 80095ce:	d124      	bne.n	800961a <OV9655_Init+0x62>
      tmp = 0x80U;
 80095d0:	2280      	movs	r2, #128	; 0x80
 80095d2:	4604      	mov	r4, r0
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 80095d4:	2301      	movs	r3, #1
 80095d6:	2112      	movs	r1, #18
      tmp = 0x80U;
 80095d8:	f88d 2007 	strb.w	r2, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 80095dc:	3018      	adds	r0, #24
 80095de:	f10d 0207 	add.w	r2, sp, #7
 80095e2:	f000 f84f 	bl	8009684 <ov9655_write_reg>
 80095e6:	b9c0      	cbnz	r0, 800961a <OV9655_Init+0x62>
  tickstart = pObj->IO.GetTick();
 80095e8:	6963      	ldr	r3, [r4, #20]
 80095ea:	4798      	blx	r3
 80095ec:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80095ee:	6963      	ldr	r3, [r4, #20]
 80095f0:	4798      	blx	r3
 80095f2:	1b43      	subs	r3, r0, r5
 80095f4:	2bc7      	cmp	r3, #199	; 0xc7
 80095f6:	d9fa      	bls.n	80095ee <OV9655_Init+0x36>
        if(OV9655_SetResolution(pObj, Resolution)!= OV9655_OK)
 80095f8:	4631      	mov	r1, r6
 80095fa:	4620      	mov	r0, r4
 80095fc:	f7ff fc06 	bl	8008e0c <OV9655_SetResolution>
 8009600:	b958      	cbnz	r0, 800961a <OV9655_Init+0x62>
        else if(OV9655_SetPixelFormat(pObj, PixelFormat)!= OV9655_OK)
 8009602:	4639      	mov	r1, r7
 8009604:	4620      	mov	r0, r4
 8009606:	f7ff feb7 	bl	8009378 <OV9655_SetPixelFormat>
 800960a:	b930      	cbnz	r0, 800961a <OV9655_Init+0x62>
          pObj->IsInitialized = 1U;
 800960c:	2301      	movs	r3, #1
 800960e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8009612:	b003      	add	sp, #12
 8009614:	bdf0      	pop	{r4, r5, r6, r7, pc}
  int32_t ret = OV9655_OK;
 8009616:	2000      	movs	r0, #0
}
 8009618:	4770      	bx	lr
      ret = OV9655_ERROR;
 800961a:	f04f 30ff 	mov.w	r0, #4294967295
 800961e:	e7f8      	b.n	8009612 <OV9655_Init+0x5a>

08009620 <OV9655_SetHueDegree>:
 8009620:	f04f 30ff 	mov.w	r0, #4294967295
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop

08009628 <OV9655_ZoomConfig>:
 8009628:	f04f 30ff 	mov.w	r0, #4294967295
 800962c:	4770      	bx	lr
 800962e:	bf00      	nop

08009630 <OV9655_RegisterBusIO>:
  if (pObj == NULL)
 8009630:	b1c0      	cbz	r0, 8009664 <OV9655_RegisterBusIO+0x34>
    pObj->IO.Address   = pIO->Address;
 8009632:	890a      	ldrh	r2, [r1, #8]
{
 8009634:	b430      	push	{r4, r5}
    pObj->IO.DeInit    = pIO->DeInit;
 8009636:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
 800963a:	8102      	strh	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 800963c:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8009640:	694a      	ldr	r2, [r1, #20]
 8009642:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
    pObj->Ctx.ReadReg  = OV9655_ReadRegWrap;
 8009646:	4909      	ldr	r1, [pc, #36]	; (800966c <OV9655_RegisterBusIO+0x3c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8009648:	60c5      	str	r5, [r0, #12]
 800964a:	e9c0 4204 	strd	r4, r2, [r0, #16]
    pObj->Ctx.WriteReg = OV9655_WriteRegWrap;
 800964e:	4a08      	ldr	r2, [pc, #32]	; (8009670 <OV9655_RegisterBusIO+0x40>)
    pObj->Ctx.handle   = pObj;
 8009650:	e9c0 1007 	strd	r1, r0, [r0, #28]
    pObj->Ctx.WriteReg = OV9655_WriteRegWrap;
 8009654:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8009656:	b10b      	cbz	r3, 800965c <OV9655_RegisterBusIO+0x2c>
}
 8009658:	bc30      	pop	{r4, r5}
      ret = pObj->IO.Init();
 800965a:	4718      	bx	r3
}
 800965c:	f04f 30ff 	mov.w	r0, #4294967295
 8009660:	bc30      	pop	{r4, r5}
 8009662:	4770      	bx	lr
 8009664:	f04f 30ff 	mov.w	r0, #4294967295
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop
 800966c:	08008ded 	.word	0x08008ded
 8009670:	08008dfd 	.word	0x08008dfd

08009674 <ov9655_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t ov9655_read_reg(ov9655_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8009674:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8009676:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800967a:	46a4      	mov	ip, r4
}
 800967c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8009680:	4760      	bx	ip
 8009682:	bf00      	nop

08009684 <ov9655_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ov9655_write_reg(ov9655_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8009684:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8009686:	6804      	ldr	r4, [r0, #0]
 8009688:	6880      	ldr	r0, [r0, #8]
 800968a:	46a4      	mov	ip, r4
}
 800968c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8009690:	4760      	bx	ip
 8009692:	bf00      	nop

08009694 <BSP_LED_Init>:
{
  int32_t ret = BSP_ERROR_NONE;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE();
 8009694:	4b13      	ldr	r3, [pc, #76]	; (80096e4 <BSP_LED_Init+0x50>)

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8009696:	4914      	ldr	r1, [pc, #80]	; (80096e8 <BSP_LED_Init+0x54>)
  LEDx_GPIO_CLK_ENABLE();
 8009698:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800969c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
{
 80096a0:	b530      	push	{r4, r5, lr}
  LEDx_GPIO_CLK_ENABLE();
 80096a2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 80096a6:	b089      	sub	sp, #36	; 0x24
  LEDx_GPIO_CLK_ENABLE();
 80096a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80096ac:	2401      	movs	r4, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80096ae:	4a0f      	ldr	r2, [pc, #60]	; (80096ec <BSP_LED_Init+0x58>)
  LEDx_GPIO_CLK_ENABLE();
 80096b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80096b4:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80096b8:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  LEDx_GPIO_CLK_ENABLE();
 80096bc:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096be:	2303      	movs	r3, #3
  LEDx_GPIO_CLK_ENABLE();
 80096c0:	9902      	ldr	r1, [sp, #8]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80096c2:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096c4:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80096c6:	9001      	str	r0, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80096c8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80096ca:	e9cd 5403 	strd	r5, r4, [sp, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80096ce:	f004 fdc7 	bl	800e260 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80096d2:	9801      	ldr	r0, [sp, #4]
 80096d4:	4622      	mov	r2, r4
 80096d6:	b2a9      	uxth	r1, r5
 80096d8:	f004 ffd2 	bl	800e680 <HAL_GPIO_WritePin>
 return ret;
}
 80096dc:	2000      	movs	r0, #0
 80096de:	b009      	add	sp, #36	; 0x24
 80096e0:	bd30      	pop	{r4, r5, pc}
 80096e2:	bf00      	nop
 80096e4:	58024400 	.word	0x58024400
 80096e8:	080992bc 	.word	0x080992bc
 80096ec:	080992cc 	.word	0x080992cc

080096f0 <BSP_LED_On>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_On(Led_TypeDef Led)
{
 80096f0:	4603      	mov	r3, r0
  int32_t ret = BSP_ERROR_NONE;

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 80096f2:	4906      	ldr	r1, [pc, #24]	; (800970c <BSP_LED_On+0x1c>)
 80096f4:	2200      	movs	r2, #0
 80096f6:	f831 1023 	ldrh.w	r1, [r1, r3, lsl #2]
{
 80096fa:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 80096fc:	4c04      	ldr	r4, [pc, #16]	; (8009710 <BSP_LED_On+0x20>)
 80096fe:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8009702:	f004 ffbd 	bl	800e680 <HAL_GPIO_WritePin>
  return ret;
}
 8009706:	2000      	movs	r0, #0
 8009708:	bd10      	pop	{r4, pc}
 800970a:	bf00      	nop
 800970c:	080992bc 	.word	0x080992bc
 8009710:	080992cc 	.word	0x080992cc

08009714 <BSP_LED_Off>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Off(Led_TypeDef Led)
{
 8009714:	4603      	mov	r3, r0
  int32_t ret = BSP_ERROR_NONE;
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8009716:	4906      	ldr	r1, [pc, #24]	; (8009730 <BSP_LED_Off+0x1c>)
 8009718:	2201      	movs	r2, #1
 800971a:	f831 1023 	ldrh.w	r1, [r1, r3, lsl #2]
{
 800971e:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8009720:	4c04      	ldr	r4, [pc, #16]	; (8009734 <BSP_LED_Off+0x20>)
 8009722:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8009726:	f004 ffab 	bl	800e680 <HAL_GPIO_WritePin>
  return ret;
}
 800972a:	2000      	movs	r0, #0
 800972c:	bd10      	pop	{r4, pc}
 800972e:	bf00      	nop
 8009730:	080992bc 	.word	0x080992bc
 8009734:	080992cc 	.word	0x080992cc

08009738 <BSP_LED_Toggle>:
  * @retval BSP status
  */
int32_t  BSP_LED_Toggle(Led_TypeDef Led)
{
  int32_t ret = BSP_ERROR_NONE;
  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 8009738:	4a05      	ldr	r2, [pc, #20]	; (8009750 <BSP_LED_Toggle+0x18>)
 800973a:	4906      	ldr	r1, [pc, #24]	; (8009754 <BSP_LED_Toggle+0x1c>)
{
 800973c:	b508      	push	{r3, lr}
 800973e:	4603      	mov	r3, r0
  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 8009740:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8009744:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8009748:	f004 ff9e 	bl	800e688 <HAL_GPIO_TogglePin>
  return ret;
}
 800974c:	2000      	movs	r0, #0
 800974e:	bd08      	pop	{r3, pc}
 8009750:	080992bc 	.word	0x080992bc
 8009754:	080992cc 	.word	0x080992cc

08009758 <BSP_PB_Init>:
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_WAKEUP_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_WAKEUP_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={BUTTON_WAKEUP_EXTI_LINE};
  /* Enable the BUTTON clock*/
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 8009758:	4b21      	ldr	r3, [pc, #132]	; (80097e0 <BSP_PB_Init+0x88>)
 800975a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800975e:	f042 0204 	orr.w	r2, r2, #4
{
 8009762:	b530      	push	{r4, r5, lr}
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 8009764:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 8009768:	b089      	sub	sp, #36	; 0x24
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 800976a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800976e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 8009772:	f002 0204 	and.w	r2, r2, #4
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8009776:	9502      	str	r5, [sp, #8]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8009778:	ed9f 7b17 	vldr	d7, [pc, #92]	; 80097d8 <BSP_PB_Init+0x80>
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 800977c:	9201      	str	r2, [sp, #4]
 800977e:	9a01      	ldr	r2, [sp, #4]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8009780:	ed8d 7b04 	vstr	d7, [sp, #16]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;

  if(ButtonMode == BUTTON_MODE_GPIO)
 8009784:	b941      	cbnz	r1, 8009798 <BSP_PB_Init+0x40>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8009786:	460b      	mov	r3, r1
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8009788:	4816      	ldr	r0, [pc, #88]	; (80097e4 <BSP_PB_Init+0x8c>)
 800978a:	a902      	add	r1, sp, #8
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800978c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800978e:	f004 fd67 	bl	800e260 <HAL_GPIO_Init>
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
  }
  return BSP_ERROR_NONE;
}
 8009792:	2000      	movs	r0, #0
 8009794:	b009      	add	sp, #36	; 0x24
 8009796:	bd30      	pop	{r4, r5, pc}
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8009798:	4b13      	ldr	r3, [pc, #76]	; (80097e8 <BSP_PB_Init+0x90>)
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800979a:	a902      	add	r1, sp, #8
 800979c:	4604      	mov	r4, r0
 800979e:	4811      	ldr	r0, [pc, #68]	; (80097e4 <BSP_PB_Init+0x8c>)
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80097a0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80097a2:	f004 fd5d 	bl	800e260 <HAL_GPIO_Init>
    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80097a6:	4b11      	ldr	r3, [pc, #68]	; (80097ec <BSP_PB_Init+0x94>)
 80097a8:	4911      	ldr	r1, [pc, #68]	; (80097f0 <BSP_PB_Init+0x98>)
 80097aa:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80097ae:	4620      	mov	r0, r4
 80097b0:	f004 fd4e 	bl	800e250 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80097b4:	4a0f      	ldr	r2, [pc, #60]	; (80097f4 <BSP_PB_Init+0x9c>)
 80097b6:	2100      	movs	r1, #0
 80097b8:	4620      	mov	r0, r4
 80097ba:	f004 fd41 	bl	800e240 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80097be:	2200      	movs	r2, #0
 80097c0:	210f      	movs	r1, #15
 80097c2:	2028      	movs	r0, #40	; 0x28
 80097c4:	f002 f892 	bl	800b8ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80097c8:	2028      	movs	r0, #40	; 0x28
 80097ca:	f002 f8cd 	bl	800b968 <HAL_NVIC_EnableIRQ>
}
 80097ce:	2000      	movs	r0, #0
 80097d0:	b009      	add	sp, #36	; 0x24
 80097d2:	bd30      	pop	{r4, r5, pc}
 80097d4:	f3af 8000 	nop.w
 80097d8:	00000000 	.word	0x00000000
 80097dc:	00000002 	.word	0x00000002
 80097e0:	58024400 	.word	0x58024400
 80097e4:	58020800 	.word	0x58020800
 80097e8:	11110000 	.word	0x11110000
 80097ec:	20009420 	.word	0x20009420
 80097f0:	1670000d 	.word	0x1670000d
 80097f4:	08009811 	.word	0x08009811

080097f8 <BSP_PB_GetState>:
  *            @arg  BUTTON_WAKEUP: Wakeup Push Button
  * @retval The Button GPIO pin value
  */
int32_t  BSP_PB_GetState(Button_TypeDef Button)
{
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80097f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80097fc:	4802      	ldr	r0, [pc, #8]	; (8009808 <BSP_PB_GetState+0x10>)
{
 80097fe:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8009800:	f004 ff38 	bl	800e674 <HAL_GPIO_ReadPin>
}
 8009804:	bd08      	pop	{r3, pc}
 8009806:	bf00      	nop
 8009808:	58020800 	.word	0x58020800

0800980c <BSP_PB_Callback>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);
  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800980c:	4770      	bx	lr
 800980e:	bf00      	nop

08009810 <BUTTON_WAKEUP_EXTI_Callback>:
  BSP_PB_Callback(BUTTON_WAKEUP);
 8009810:	2000      	movs	r0, #0
{
 8009812:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_WAKEUP);
 8009814:	f7ff fffa 	bl	800980c <BSP_PB_Callback>
}
 8009818:	bd08      	pop	{r3, pc}
 800981a:	bf00      	nop
 800981c:	0000      	movs	r0, r0
	...

08009820 <BSP_JOY_Init>:
  *                                 with interrupt generation capability
  * @param  JoyPins joystick pins to be initialized
  * @retval BSP status
  */
int32_t BSP_JOY_Init(JOY_TypeDef JOY, JOYMode_TypeDef JoyMode, JOYPin_TypeDef JoyPins)
{
 8009820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                                                   BSP_JOY1_RIGHT_IT_PRIORITY,
                                                   BSP_JOY1_UP_IT_PRIORITY
                                                  };

  /* Store Joystick pins initialized */
  JoyPinsMask |= (uint32_t)JoyPins;
 8009824:	4c56      	ldr	r4, [pc, #344]	; (8009980 <BSP_JOY_Init+0x160>)
  for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
  {
    key_pressed = 1UL << joykey;
    if((key_pressed & (uint32_t)JoyPins) == key_pressed)
    {
      if(JOY == JOY1)
 8009826:	fab0 f780 	clz	r7, r0
{
 800982a:	4616      	mov	r6, r2
 800982c:	4688      	mov	r8, r1
  JoyPinsMask |= (uint32_t)JoyPins;
 800982e:	6823      	ldr	r3, [r4, #0]
      if(JOY == JOY1)
 8009830:	097f      	lsrs	r7, r7, #5
 8009832:	4d54      	ldr	r5, [pc, #336]	; (8009984 <BSP_JOY_Init+0x164>)
  JoyPinsMask |= (uint32_t)JoyPins;
 8009834:	4313      	orrs	r3, r2
          {
            JOY1_UP_GPIO_CLK_ENABLE();
          }
        }

        gpio_init_structure.Pin = JOY1_PIN[joykey];
 8009836:	f8df a168 	ldr.w	sl, [pc, #360]	; 80099a0 <BSP_JOY_Init+0x180>
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
        }
        else /*(JoyMode == JOY_MODE_EXTI)*/
        {
          /* Configure Joy pin as input with External interrupt */
          gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
 800983a:	f8df 9168 	ldr.w	r9, [pc, #360]	; 80099a4 <BSP_JOY_Init+0x184>
{
 800983e:	ed2d 8b02 	vpush	{d8}
        gpio_init_structure.Pull = GPIO_PULLUP;
 8009842:	ed9f 8b4d 	vldr	d8, [pc, #308]	; 8009978 <BSP_JOY_Init+0x158>
  JoyPinsMask |= (uint32_t)JoyPins;
 8009846:	6023      	str	r3, [r4, #0]
{
 8009848:	b08f      	sub	sp, #60	; 0x3c
  for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
 800984a:	2400      	movs	r4, #0
    key_pressed = 1UL << joykey;
 800984c:	2301      	movs	r3, #1
 800984e:	40a3      	lsls	r3, r4
      if(JOY == JOY1)
 8009850:	43b3      	bics	r3, r6
 8009852:	d100      	bne.n	8009856 <BSP_JOY_Init+0x36>
 8009854:	b94f      	cbnz	r7, 800986a <BSP_JOY_Init+0x4a>
  for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
 8009856:	3401      	adds	r4, #1
 8009858:	3504      	adds	r5, #4
 800985a:	2c05      	cmp	r4, #5
 800985c:	d1f6      	bne.n	800984c <BSP_JOY_Init+0x2c>
      }
    }
  }

  return ret;
}
 800985e:	2000      	movs	r0, #0
 8009860:	b00f      	add	sp, #60	; 0x3c
 8009862:	ecbd 8b02 	vpop	{d8}
 8009866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(key_pressed == (uint32_t)JOY_SEL)
 800986a:	2c03      	cmp	r4, #3
 800986c:	d874      	bhi.n	8009958 <BSP_JOY_Init+0x138>
 800986e:	e8df f004 	tbb	[pc, r4]
 8009872:	571e      	.short	0x571e
 8009874:	0265      	.short	0x0265
          JOY1_RIGHT_GPIO_CLK_ENABLE();
 8009876:	4b44      	ldr	r3, [pc, #272]	; (8009988 <BSP_JOY_Init+0x168>)
 8009878:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800987c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009880:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800988c:	9306      	str	r3, [sp, #24]
 800988e:	9b06      	ldr	r3, [sp, #24]
        gpio_init_structure.Pin = JOY1_PIN[joykey];
 8009890:	f83a 3014 	ldrh.w	r3, [sl, r4, lsl #1]
        gpio_init_structure.Pull = GPIO_PULLUP;
 8009894:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
        gpio_init_structure.Pin = JOY1_PIN[joykey];
 8009898:	9308      	str	r3, [sp, #32]
        if (JoyMode == JOY_MODE_GPIO)
 800989a:	f1b8 0f00 	cmp.w	r8, #0
 800989e:	d11b      	bne.n	80098d8 <BSP_JOY_Init+0xb8>
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 80098a0:	a908      	add	r1, sp, #32
 80098a2:	6828      	ldr	r0, [r5, #0]
          gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80098a4:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 80098a8:	f004 fcda 	bl	800e260 <HAL_GPIO_Init>
 80098ac:	e7d3      	b.n	8009856 <BSP_JOY_Init+0x36>
          JOY1_SEL_GPIO_CLK_ENABLE();
 80098ae:	4b36      	ldr	r3, [pc, #216]	; (8009988 <BSP_JOY_Init+0x168>)
 80098b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80098b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80098b8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80098bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098c4:	9303      	str	r3, [sp, #12]
 80098c6:	9b03      	ldr	r3, [sp, #12]
        gpio_init_structure.Pin = JOY1_PIN[joykey];
 80098c8:	f83a 3014 	ldrh.w	r3, [sl, r4, lsl #1]
        gpio_init_structure.Pull = GPIO_PULLUP;
 80098cc:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
        gpio_init_structure.Pin = JOY1_PIN[joykey];
 80098d0:	9308      	str	r3, [sp, #32]
        if (JoyMode == JOY_MODE_GPIO)
 80098d2:	f1b8 0f00 	cmp.w	r8, #0
 80098d6:	d0e3      	beq.n	80098a0 <BSP_JOY_Init+0x80>
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 80098d8:	a908      	add	r1, sp, #32
 80098da:	6828      	ldr	r0, [r5, #0]
          gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
 80098dc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 80098e0:	f004 fcbe 	bl	800e260 <HAL_GPIO_Init>
         (void)HAL_EXTI_GetHandle(&hjoy_exti[joykey], JOY_EXTI_LINE[joykey]);
 80098e4:	4b29      	ldr	r3, [pc, #164]	; (800998c <BSP_JOY_Init+0x16c>)
 80098e6:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 80098ea:	4b29      	ldr	r3, [pc, #164]	; (8009990 <BSP_JOY_Init+0x170>)
 80098ec:	4658      	mov	r0, fp
 80098ee:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 80098f2:	f004 fcad 	bl	800e250 <HAL_EXTI_GetHandle>
         (void)HAL_EXTI_RegisterCallback(&hjoy_exti[joykey],  HAL_EXTI_COMMON_CB_ID, JoyCallback[joykey]);
 80098f6:	4b27      	ldr	r3, [pc, #156]	; (8009994 <BSP_JOY_Init+0x174>)
 80098f8:	4658      	mov	r0, fp
 80098fa:	2100      	movs	r1, #0
 80098fc:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 8009900:	f004 fc9e 	bl	800e240 <HAL_EXTI_RegisterCallback>
          HAL_NVIC_SetPriority((IRQn_Type)(JOY1_IRQn[joykey]), BSP_JOY_PRIO[joykey], 0x00);
 8009904:	4b24      	ldr	r3, [pc, #144]	; (8009998 <BSP_JOY_Init+0x178>)
 8009906:	2200      	movs	r2, #0
 8009908:	f933 0014 	ldrsh.w	r0, [r3, r4, lsl #1]
 800990c:	4b23      	ldr	r3, [pc, #140]	; (800999c <BSP_JOY_Init+0x17c>)
 800990e:	9001      	str	r0, [sp, #4]
 8009910:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8009914:	f001 ffea 	bl	800b8ec <HAL_NVIC_SetPriority>
          HAL_NVIC_EnableIRQ((IRQn_Type)(JOY1_IRQn[joykey]));
 8009918:	9801      	ldr	r0, [sp, #4]
 800991a:	f002 f825 	bl	800b968 <HAL_NVIC_EnableIRQ>
 800991e:	e79a      	b.n	8009856 <BSP_JOY_Init+0x36>
          JOY1_DOWN_GPIO_CLK_ENABLE();
 8009920:	4b19      	ldr	r3, [pc, #100]	; (8009988 <BSP_JOY_Init+0x168>)
 8009922:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009926:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800992a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800992e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009936:	9304      	str	r3, [sp, #16]
 8009938:	9b04      	ldr	r3, [sp, #16]
 800993a:	e7a9      	b.n	8009890 <BSP_JOY_Init+0x70>
          JOY1_LEFT_GPIO_CLK_ENABLE();
 800993c:	4b12      	ldr	r3, [pc, #72]	; (8009988 <BSP_JOY_Init+0x168>)
 800993e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009942:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009946:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800994a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800994e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009952:	9305      	str	r3, [sp, #20]
 8009954:	9b05      	ldr	r3, [sp, #20]
 8009956:	e79b      	b.n	8009890 <BSP_JOY_Init+0x70>
            JOY1_UP_GPIO_CLK_ENABLE();
 8009958:	4b0b      	ldr	r3, [pc, #44]	; (8009988 <BSP_JOY_Init+0x168>)
 800995a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800995e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009962:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800996a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800996e:	9307      	str	r3, [sp, #28]
 8009970:	9b07      	ldr	r3, [sp, #28]
 8009972:	e78d      	b.n	8009890 <BSP_JOY_Init+0x70>
 8009974:	f3af 8000 	nop.w
 8009978:	00000001 	.word	0x00000001
 800997c:	00000003 	.word	0x00000003
 8009980:	200093f4 	.word	0x200093f4
 8009984:	08099280 	.word	0x08099280
 8009988:	58024400 	.word	0x58024400
 800998c:	200093f8 	.word	0x200093f8
 8009990:	08099294 	.word	0x08099294
 8009994:	080992a8 	.word	0x080992a8
 8009998:	08099268 	.word	0x08099268
 800999c:	08099254 	.word	0x08099254
 80099a0:	08099274 	.word	0x08099274
 80099a4:	11310000 	.word	0x11310000

080099a8 <BSP_JOY_GetState>:
*            @arg  JOY_LEFT
*            @arg  JOY_RIGHT
*            @arg  JOY_UP
*/
int32_t BSP_JOY_GetState(JOY_TypeDef JOY,uint32_t JoyPin)
{
 80099a8:	b538      	push	{r3, r4, r5, lr}

  uint32_t joykey, key_pressed;
  for (joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
  {
    key_pressed = 1UL << joykey;
    if((key_pressed & JoyPinsMask) == key_pressed)
 80099aa:	4d21      	ldr	r5, [pc, #132]	; (8009a30 <BSP_JOY_GetState+0x88>)
    {
      if(JOY == JOY1)
 80099ac:	fab0 f480 	clz	r4, r0
    if((key_pressed & JoyPinsMask) == key_pressed)
 80099b0:	682b      	ldr	r3, [r5, #0]
      if(JOY == JOY1)
 80099b2:	0964      	lsrs	r4, r4, #5
 80099b4:	07db      	lsls	r3, r3, #31
 80099b6:	d500      	bpl.n	80099ba <BSP_JOY_GetState+0x12>
 80099b8:	b98c      	cbnz	r4, 80099de <BSP_JOY_GetState+0x36>
    if((key_pressed & JoyPinsMask) == key_pressed)
 80099ba:	682b      	ldr	r3, [r5, #0]
      if(JOY == JOY1)
 80099bc:	0798      	lsls	r0, r3, #30
 80099be:	d500      	bpl.n	80099c2 <BSP_JOY_GetState+0x1a>
 80099c0:	b9ac      	cbnz	r4, 80099ee <BSP_JOY_GetState+0x46>
    if((key_pressed & JoyPinsMask) == key_pressed)
 80099c2:	682b      	ldr	r3, [r5, #0]
      if(JOY == JOY1)
 80099c4:	0759      	lsls	r1, r3, #29
 80099c6:	d500      	bpl.n	80099ca <BSP_JOY_GetState+0x22>
 80099c8:	b9cc      	cbnz	r4, 80099fe <BSP_JOY_GetState+0x56>
    if((key_pressed & JoyPinsMask) == key_pressed)
 80099ca:	682b      	ldr	r3, [r5, #0]
      if(JOY == JOY1)
 80099cc:	071a      	lsls	r2, r3, #28
 80099ce:	d500      	bpl.n	80099d2 <BSP_JOY_GetState+0x2a>
 80099d0:	b9ec      	cbnz	r4, 8009a0e <BSP_JOY_GetState+0x66>
    if((key_pressed & JoyPinsMask) == key_pressed)
 80099d2:	682b      	ldr	r3, [r5, #0]
      if(JOY == JOY1)
 80099d4:	06db      	lsls	r3, r3, #27
 80099d6:	d500      	bpl.n	80099da <BSP_JOY_GetState+0x32>
 80099d8:	bb0c      	cbnz	r4, 8009a1e <BSP_JOY_GetState+0x76>
        }
      }
    }
  }
  /* No Joystick key pressed */
  return (int32_t)JOY_NONE;
 80099da:	2000      	movs	r0, #0

}
 80099dc:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 80099de:	2104      	movs	r1, #4
 80099e0:	4814      	ldr	r0, [pc, #80]	; (8009a34 <BSP_JOY_GetState+0x8c>)
 80099e2:	f004 fe47 	bl	800e674 <HAL_GPIO_ReadPin>
 80099e6:	2801      	cmp	r0, #1
 80099e8:	d0e7      	beq.n	80099ba <BSP_JOY_GetState+0x12>
    key_pressed = 1UL << joykey;
 80099ea:	2001      	movs	r0, #1
}
 80099ec:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 80099ee:	2108      	movs	r1, #8
 80099f0:	4810      	ldr	r0, [pc, #64]	; (8009a34 <BSP_JOY_GetState+0x8c>)
 80099f2:	f004 fe3f 	bl	800e674 <HAL_GPIO_ReadPin>
 80099f6:	2801      	cmp	r0, #1
 80099f8:	d0e3      	beq.n	80099c2 <BSP_JOY_GetState+0x1a>
    key_pressed = 1UL << joykey;
 80099fa:	2002      	movs	r0, #2
}
 80099fc:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 80099fe:	2110      	movs	r1, #16
 8009a00:	480c      	ldr	r0, [pc, #48]	; (8009a34 <BSP_JOY_GetState+0x8c>)
 8009a02:	f004 fe37 	bl	800e674 <HAL_GPIO_ReadPin>
 8009a06:	2801      	cmp	r0, #1
 8009a08:	d0df      	beq.n	80099ca <BSP_JOY_GetState+0x22>
    key_pressed = 1UL << joykey;
 8009a0a:	2004      	movs	r0, #4
}
 8009a0c:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 8009a0e:	2120      	movs	r1, #32
 8009a10:	4808      	ldr	r0, [pc, #32]	; (8009a34 <BSP_JOY_GetState+0x8c>)
 8009a12:	f004 fe2f 	bl	800e674 <HAL_GPIO_ReadPin>
 8009a16:	2801      	cmp	r0, #1
 8009a18:	d0db      	beq.n	80099d2 <BSP_JOY_GetState+0x2a>
    key_pressed = 1UL << joykey;
 8009a1a:	2008      	movs	r0, #8
}
 8009a1c:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 8009a1e:	2140      	movs	r1, #64	; 0x40
 8009a20:	4804      	ldr	r0, [pc, #16]	; (8009a34 <BSP_JOY_GetState+0x8c>)
 8009a22:	f004 fe27 	bl	800e674 <HAL_GPIO_ReadPin>
 8009a26:	2801      	cmp	r0, #1
 8009a28:	d0d7      	beq.n	80099da <BSP_JOY_GetState+0x32>
    key_pressed = 1UL << joykey;
 8009a2a:	2010      	movs	r0, #16
}
 8009a2c:	bd38      	pop	{r3, r4, r5, pc}
 8009a2e:	bf00      	nop
 8009a30:	200093f4 	.word	0x200093f4
 8009a34:	58022800 	.word	0x58022800

08009a38 <BSP_JOY_Callback>:
  UNUSED(JOY);
  UNUSED(JoyPin);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on JoyPin is triggered. */
}
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop

08009a3c <JOY1_UP_EXTI_Callback>:
  * @brief  JOY1 UP EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_UP_EXTI_Callback(void)
{
  BSP_JOY_Callback(JOY1, JOY_UP);
 8009a3c:	2110      	movs	r1, #16
 8009a3e:	2000      	movs	r0, #0
{
 8009a40:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_UP);
 8009a42:	f7ff fff9 	bl	8009a38 <BSP_JOY_Callback>
}
 8009a46:	bd08      	pop	{r3, pc}

08009a48 <JOY1_RIGHT_EXTI_Callback>:
  * @brief  JOY1 RIGHT EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_RIGHT_EXTI_Callback(void)
{
  BSP_JOY_Callback(JOY1, JOY_RIGHT);
 8009a48:	2108      	movs	r1, #8
 8009a4a:	2000      	movs	r0, #0
{
 8009a4c:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_RIGHT);
 8009a4e:	f7ff fff3 	bl	8009a38 <BSP_JOY_Callback>
}
 8009a52:	bd08      	pop	{r3, pc}

08009a54 <JOY1_LEFT_EXTI_Callback>:
  BSP_JOY_Callback(JOY1, JOY_LEFT);
 8009a54:	2104      	movs	r1, #4
 8009a56:	2000      	movs	r0, #0
{
 8009a58:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_LEFT);
 8009a5a:	f7ff ffed 	bl	8009a38 <BSP_JOY_Callback>
}
 8009a5e:	bd08      	pop	{r3, pc}

08009a60 <JOY1_DOWN_EXTI_Callback>:
  BSP_JOY_Callback(JOY1, JOY_DOWN);
 8009a60:	2102      	movs	r1, #2
 8009a62:	2000      	movs	r0, #0
{
 8009a64:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_DOWN);
 8009a66:	f7ff ffe7 	bl	8009a38 <BSP_JOY_Callback>
}
 8009a6a:	bd08      	pop	{r3, pc}

08009a6c <JOY1_SEL_EXTI_Callback>:
  BSP_JOY_Callback(JOY1, JOY_SEL);
 8009a6c:	2101      	movs	r1, #1
 8009a6e:	2000      	movs	r0, #0
{
 8009a70:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_SEL);
 8009a72:	f7ff ffe1 	bl	8009a38 <BSP_JOY_Callback>
}
 8009a76:	bd08      	pop	{r3, pc}

08009a78 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 8009a78:	4a10      	ldr	r2, [pc, #64]	; (8009abc <BSP_I2C4_DeInit+0x44>)
{
 8009a7a:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 8009a7c:	6813      	ldr	r3, [r2, #0]
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8009a82:	b10b      	cbz	r3, 8009a88 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 8009a84:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 8009a86:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8009a88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009a8c:	480c      	ldr	r0, [pc, #48]	; (8009ac0 <BSP_I2C4_DeInit+0x48>)
 8009a8e:	f004 fd29 	bl	800e4e4 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8009a92:	480b      	ldr	r0, [pc, #44]	; (8009ac0 <BSP_I2C4_DeInit+0x48>)
 8009a94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009a98:	f004 fd24 	bl	800e4e4 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8009a9c:	4a09      	ldr	r2, [pc, #36]	; (8009ac4 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8009a9e:	480a      	ldr	r0, [pc, #40]	; (8009ac8 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 8009aa0:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 8009aa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009aa8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8009aac:	f004 ff00 	bl	800e8b0 <HAL_I2C_DeInit>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d0e7      	beq.n	8009a84 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 8009ab4:	f06f 0007 	mvn.w	r0, #7
}
 8009ab8:	bd08      	pop	{r3, pc}
 8009aba:	bf00      	nop
 8009abc:	20009428 	.word	0x20009428
 8009ac0:	58020c00 	.word	0x58020c00
 8009ac4:	58024400 	.word	0x58024400
 8009ac8:	20009e30 	.word	0x20009e30

08009acc <MX_I2C4_Init>:
  hI2c->Init.OwnAddress1      = 0;
 8009acc:	2300      	movs	r3, #0
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009ace:	2201      	movs	r2, #1
{
 8009ad0:	b510      	push	{r4, lr}
  hI2c->Init.OwnAddress1      = 0;
 8009ad2:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8009ad6:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009ada:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8009ade:	e9c0 3307 	strd	r3, r3, [r0, #28]
{
 8009ae2:	4604      	mov	r4, r0
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8009ae4:	f004 fe8c 	bl	800e800 <HAL_I2C_Init>
 8009ae8:	b108      	cbz	r0, 8009aee <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
 8009aea:	2001      	movs	r0, #1
}
 8009aec:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8009aee:	4601      	mov	r1, r0
 8009af0:	4620      	mov	r0, r4
 8009af2:	f005 f979 	bl	800ede8 <HAL_I2CEx_ConfigAnalogFilter>
 8009af6:	2800      	cmp	r0, #0
 8009af8:	d1f7      	bne.n	8009aea <MX_I2C4_Init+0x1e>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8009afa:	4601      	mov	r1, r0
 8009afc:	4620      	mov	r0, r4
 8009afe:	f005 f99d 	bl	800ee3c <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 8009b02:	3800      	subs	r0, #0
 8009b04:	bf18      	it	ne
 8009b06:	2001      	movne	r0, #1
}
 8009b08:	bd10      	pop	{r4, pc}
 8009b0a:	bf00      	nop

08009b0c <BSP_I2C4_Init>:
  if (I2c4InitCounter == 0U)
 8009b0c:	4b90      	ldr	r3, [pc, #576]	; (8009d50 <BSP_I2C4_Init+0x244>)
  hbus_i2c4.Instance = BUS_I2C4;
 8009b0e:	4891      	ldr	r0, [pc, #580]	; (8009d54 <BSP_I2C4_Init+0x248>)
 8009b10:	4a91      	ldr	r2, [pc, #580]	; (8009d58 <BSP_I2C4_Init+0x24c>)
  if (I2c4InitCounter == 0U)
 8009b12:	6819      	ldr	r1, [r3, #0]
{
 8009b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b18:	b09d      	sub	sp, #116	; 0x74
  hbus_i2c4.Instance = BUS_I2C4;
 8009b1a:	6002      	str	r2, [r0, #0]
  if (I2c4InitCounter == 0U)
 8009b1c:	9103      	str	r1, [sp, #12]
 8009b1e:	b119      	cbz	r1, 8009b28 <BSP_I2C4_Init+0x1c>
  int32_t ret = BSP_ERROR_NONE;
 8009b20:	2000      	movs	r0, #0
}
 8009b22:	b01d      	add	sp, #116	; 0x74
 8009b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 8009b28:	2201      	movs	r2, #1
 8009b2a:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8009b2c:	f005 f956 	bl	800eddc <HAL_I2C_GetState>
 8009b30:	2800      	cmp	r0, #0
 8009b32:	d1f5      	bne.n	8009b20 <BSP_I2C4_Init+0x14>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8009b34:	4c89      	ldr	r4, [pc, #548]	; (8009d5c <BSP_I2C4_Init+0x250>)
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8009b36:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009b3a:	2112      	movs	r1, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8009b3c:	2504      	movs	r5, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8009b3e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8009b42:	2600      	movs	r6, #0
 8009b44:	2702      	movs	r7, #2
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8009b46:	f043 0308 	orr.w	r3, r3, #8
 8009b4a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8009b4e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8009b52:	f003 0308 	and.w	r3, r3, #8
 8009b56:	9313      	str	r3, [sp, #76]	; 0x4c
 8009b58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8009b5a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8009b5e:	f043 0308 	orr.w	r3, r3, #8
 8009b62:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8009b66:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8009b6a:	951a      	str	r5, [sp, #104]	; 0x68
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8009b6c:	f003 0308 	and.w	r3, r3, #8
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8009b70:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8009b74:	9314      	str	r3, [sp, #80]	; 0x50
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8009b76:	a916      	add	r1, sp, #88	; 0x58
 8009b78:	4879      	ldr	r0, [pc, #484]	; (8009d60 <BSP_I2C4_Init+0x254>)
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8009b7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8009b7c:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8009b80:	f004 fb6e 	bl	800e260 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8009b84:	2312      	movs	r3, #18
 8009b86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8009b8a:	a916      	add	r1, sp, #88	; 0x58
 8009b8c:	4874      	ldr	r0, [pc, #464]	; (8009d60 <BSP_I2C4_Init+0x254>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8009b8e:	951a      	str	r5, [sp, #104]	; 0x68
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8009b90:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8009b94:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8009b98:	f004 fb62 	bl	800e260 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 8009b9c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8009ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ba4:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8009ba8:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8009bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bb0:	9315      	str	r3, [sp, #84]	; 0x54
 8009bb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  BUS_I2C4_FORCE_RESET();
 8009bb4:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8009bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bbc:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
 8009bc0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8009bc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bc8:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8009bcc:	f006 fad8 	bl	8010180 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	f000 81b3 	beq.w	8009f3c <BSP_I2C4_Init+0x430>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8009bd6:	4b63      	ldr	r3, [pc, #396]	; (8009d64 <BSP_I2C4_Init+0x258>)
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8009bd8:	f06f 011d 	mvn.w	r1, #29
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8009bdc:	9d03      	ldr	r5, [sp, #12]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8009bde:	f04f 0b10 	mov.w	fp, #16
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8009be2:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009be6:	f8df a184 	ldr.w	sl, [pc, #388]	; 8009d6c <BSP_I2C4_Init+0x260>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8009bea:	fbb3 f2f0 	udiv	r2, r3, r0
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8009bee:	f640 13f6 	movw	r3, #2550	; 0x9f6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8009bf2:	4610      	mov	r0, r2
 8009bf4:	9202      	str	r2, [sp, #8]
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8009bf6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8009bfa:	eba3 0480 	sub.w	r4, r3, r0, lsl #2
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8009bfe:	4681      	mov	r9, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8009c00:	0043      	lsls	r3, r0, #1
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8009c02:	1a8e      	subs	r6, r1, r2
 8009c04:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8009c08:	9311      	str	r3, [sp, #68]	; 0x44
 8009c0a:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8009c0e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8009c12:	0059      	lsls	r1, r3, #1
 8009c14:	4b54      	ldr	r3, [pc, #336]	; (8009d68 <BSP_I2C4_Init+0x25c>)
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8009c16:	4688      	mov	r8, r1
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	9110      	str	r1, [sp, #64]	; 0x40
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8009c1c:	ebb6 0f49 	cmp.w	r6, r9, lsl #1
 8009c20:	46cc      	mov	ip, r9
 8009c22:	eb09 0249 	add.w	r2, r9, r9, lsl #1
 8009c26:	bf94      	ite	ls
 8009c28:	2001      	movls	r0, #1
 8009c2a:	2000      	movhi	r0, #0
 8009c2c:	ebb4 0f49 	cmp.w	r4, r9, lsl #1
 8009c30:	f000 0001 	and.w	r0, r0, #1
 8009c34:	eb09 0189 	add.w	r1, r9, r9, lsl #2
 8009c38:	bf38      	it	cc
 8009c3a:	2000      	movcc	r0, #0
 8009c3c:	4296      	cmp	r6, r2
 8009c3e:	eb09 0e41 	add.w	lr, r9, r1, lsl #1
 8009c42:	9005      	str	r0, [sp, #20]
 8009c44:	bf8c      	ite	hi
 8009c46:	2000      	movhi	r0, #0
 8009c48:	2001      	movls	r0, #1
 8009c4a:	4294      	cmp	r4, r2
 8009c4c:	bf38      	it	cc
 8009c4e:	2000      	movcc	r0, #0
 8009c50:	ebb6 0f89 	cmp.w	r6, r9, lsl #2
 8009c54:	9006      	str	r0, [sp, #24]
 8009c56:	eb09 0082 	add.w	r0, r9, r2, lsl #2
 8009c5a:	9004      	str	r0, [sp, #16]
 8009c5c:	bf94      	ite	ls
 8009c5e:	2001      	movls	r0, #1
 8009c60:	2000      	movhi	r0, #0
 8009c62:	ebb4 0f89 	cmp.w	r4, r9, lsl #2
 8009c66:	f000 0701 	and.w	r7, r0, #1
 8009c6a:	bf38      	it	cc
 8009c6c:	2700      	movcc	r7, #0
 8009c6e:	428e      	cmp	r6, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8009c70:	f04f 0000 	mov.w	r0, #0
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8009c74:	9707      	str	r7, [sp, #28]
 8009c76:	bf8c      	ite	hi
 8009c78:	2700      	movhi	r7, #0
 8009c7a:	2701      	movls	r7, #1
 8009c7c:	428c      	cmp	r4, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8009c7e:	9001      	str	r0, [sp, #4]
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8009c80:	bf38      	it	cc
 8009c82:	2700      	movcc	r7, #0
 8009c84:	ebb6 0f42 	cmp.w	r6, r2, lsl #1
 8009c88:	bf98      	it	ls
 8009c8a:	2001      	movls	r0, #1
 8009c8c:	ebb4 0f42 	cmp.w	r4, r2, lsl #1
 8009c90:	9708      	str	r7, [sp, #32]
 8009c92:	f000 0001 	and.w	r0, r0, #1
 8009c96:	bf38      	it	cc
 8009c98:	2000      	movcc	r0, #0
 8009c9a:	9009      	str	r0, [sp, #36]	; 0x24
 8009c9c:	ebc9 00c9 	rsb	r0, r9, r9, lsl #3
 8009ca0:	4286      	cmp	r6, r0
 8009ca2:	bf8c      	ite	hi
 8009ca4:	2700      	movhi	r7, #0
 8009ca6:	2701      	movls	r7, #1
 8009ca8:	4284      	cmp	r4, r0
 8009caa:	bf38      	it	cc
 8009cac:	2700      	movcc	r7, #0
 8009cae:	ebb6 0fc9 	cmp.w	r6, r9, lsl #3
 8009cb2:	4638      	mov	r0, r7
 8009cb4:	bf94      	ite	ls
 8009cb6:	2001      	movls	r0, #1
 8009cb8:	2000      	movhi	r0, #0
 8009cba:	970a      	str	r7, [sp, #40]	; 0x28
 8009cbc:	ebb4 0fc9 	cmp.w	r4, r9, lsl #3
 8009cc0:	f000 0701 	and.w	r7, r0, #1
 8009cc4:	eb09 00c9 	add.w	r0, r9, r9, lsl #3
 8009cc8:	bf38      	it	cc
 8009cca:	2700      	movcc	r7, #0
 8009ccc:	4286      	cmp	r6, r0
 8009cce:	970b      	str	r7, [sp, #44]	; 0x2c
 8009cd0:	bf8c      	ite	hi
 8009cd2:	2700      	movhi	r7, #0
 8009cd4:	2701      	movls	r7, #1
 8009cd6:	4284      	cmp	r4, r0
 8009cd8:	bf38      	it	cc
 8009cda:	2700      	movcc	r7, #0
 8009cdc:	ebb6 0f41 	cmp.w	r6, r1, lsl #1
 8009ce0:	4638      	mov	r0, r7
 8009ce2:	bf94      	ite	ls
 8009ce4:	2001      	movls	r0, #1
 8009ce6:	2000      	movhi	r0, #0
 8009ce8:	ebb4 0f41 	cmp.w	r4, r1, lsl #1
 8009cec:	970c      	str	r7, [sp, #48]	; 0x30
 8009cee:	f04f 0700 	mov.w	r7, #0
 8009cf2:	f000 0101 	and.w	r1, r0, #1
 8009cf6:	bf38      	it	cc
 8009cf8:	2100      	movcc	r1, #0
 8009cfa:	4576      	cmp	r6, lr
 8009cfc:	9804      	ldr	r0, [sp, #16]
 8009cfe:	910d      	str	r1, [sp, #52]	; 0x34
 8009d00:	bf8c      	ite	hi
 8009d02:	2100      	movhi	r1, #0
 8009d04:	2101      	movls	r1, #1
 8009d06:	4574      	cmp	r4, lr
 8009d08:	bf38      	it	cc
 8009d0a:	2100      	movcc	r1, #0
 8009d0c:	ebb6 0f82 	cmp.w	r6, r2, lsl #2
 8009d10:	910e      	str	r1, [sp, #56]	; 0x38
 8009d12:	bf94      	ite	ls
 8009d14:	2101      	movls	r1, #1
 8009d16:	2100      	movhi	r1, #0
 8009d18:	ebb4 0f82 	cmp.w	r4, r2, lsl #2
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	f001 0e01 	and.w	lr, r1, #1
 8009d22:	bf38      	it	cc
 8009d24:	f04f 0e00 	movcc.w	lr, #0
 8009d28:	4286      	cmp	r6, r0
 8009d2a:	bf8c      	ite	hi
 8009d2c:	2200      	movhi	r2, #0
 8009d2e:	2201      	movls	r2, #1
 8009d30:	4284      	cmp	r4, r0
 8009d32:	bf38      	it	cc
 8009d34:	2200      	movcc	r2, #0
 8009d36:	920f      	str	r2, [sp, #60]	; 0x3c
 8009d38:	ebc9 1209 	rsb	r2, r9, r9, lsl #4
 8009d3c:	4296      	cmp	r6, r2
 8009d3e:	bf8c      	ite	hi
 8009d40:	2100      	movhi	r1, #0
 8009d42:	2101      	movls	r1, #1
 8009d44:	4294      	cmp	r4, r2
 8009d46:	bf38      	it	cc
 8009d48:	2100      	movcc	r1, #0
 8009d4a:	9104      	str	r1, [sp, #16]
 8009d4c:	e014      	b.n	8009d78 <BSP_I2C4_Init+0x26c>
 8009d4e:	bf00      	nop
 8009d50:	20009428 	.word	0x20009428
 8009d54:	20009e30 	.word	0x20009e30
 8009d58:	58001c00 	.word	0x58001c00
 8009d5c:	58024400 	.word	0x58024400
 8009d60:	58020c00 	.word	0x58020c00
 8009d64:	3b9aca00 	.word	0x3b9aca00
 8009d68:	20009e2c 	.word	0x20009e2c
 8009d6c:	2000942c 	.word	0x2000942c
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8009d70:	2f10      	cmp	r7, #16
 8009d72:	44cc      	add	ip, r9
 8009d74:	f000 8215 	beq.w	800a1a2 <BSP_I2C4_Init+0x696>
      if (tscldel >= (uint32_t)tscldel_min)
 8009d78:	f240 3179 	movw	r1, #889	; 0x379
 8009d7c:	463a      	mov	r2, r7
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8009d7e:	3701      	adds	r7, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8009d80:	458c      	cmp	ip, r1
 8009d82:	d9f5      	bls.n	8009d70 <BSP_I2C4_Init+0x264>
            if(presc != prev_presc)
 8009d84:	2e00      	cmp	r6, #0
 8009d86:	f040 80e3 	bne.w	8009f50 <BSP_I2C4_Init+0x444>
 8009d8a:	45ab      	cmp	fp, r5
 8009d8c:	f000 80e0 	beq.w	8009f50 <BSP_I2C4_Init+0x444>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009d90:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8009d94:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009d96:	2000      	movs	r0, #0
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009d98:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009d9c:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009d9e:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009da2:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009da4:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009da6:	4651      	mov	r1, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009da8:	f200 817c 	bhi.w	800a0a4 <BSP_I2C4_Init+0x598>
 8009dac:	46ab      	mov	fp, r5
            if(presc != prev_presc)
 8009dae:	45ab      	cmp	fp, r5
 8009db0:	f000 814d 	beq.w	800a04e <BSP_I2C4_Init+0x542>
 8009db4:	9905      	ldr	r1, [sp, #20]
 8009db6:	2900      	cmp	r1, #0
 8009db8:	f000 80e5 	beq.w	8009f86 <BSP_I2C4_Init+0x47a>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009dbc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8009dc0:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009dc2:	2002      	movs	r0, #2
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009dc4:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009dc8:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009dca:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009dce:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009dd0:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009dd2:	4651      	mov	r1, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009dd4:	f200 8166 	bhi.w	800a0a4 <BSP_I2C4_Init+0x598>
 8009dd8:	46ab      	mov	fp, r5
            if(presc != prev_presc)
 8009dda:	45ab      	cmp	fp, r5
 8009ddc:	f000 8137 	beq.w	800a04e <BSP_I2C4_Init+0x542>
 8009de0:	9907      	ldr	r1, [sp, #28]
 8009de2:	2900      	cmp	r1, #0
 8009de4:	f000 80e3 	beq.w	8009fae <BSP_I2C4_Init+0x4a2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009de8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8009dec:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009dee:	2004      	movs	r0, #4
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009df0:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009df4:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009df6:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009dfa:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009dfc:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009dfe:	4651      	mov	r1, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009e00:	f200 8150 	bhi.w	800a0a4 <BSP_I2C4_Init+0x598>
 8009e04:	46ab      	mov	fp, r5
            if(presc != prev_presc)
 8009e06:	45ab      	cmp	fp, r5
 8009e08:	f000 8121 	beq.w	800a04e <BSP_I2C4_Init+0x542>
 8009e0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e0e:	2900      	cmp	r1, #0
 8009e10:	f000 80e1 	beq.w	8009fd6 <BSP_I2C4_Init+0x4ca>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009e14:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8009e18:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009e1a:	2006      	movs	r0, #6
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009e1c:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009e20:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009e22:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009e26:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009e28:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009e2a:	4651      	mov	r1, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009e2c:	f200 813a 	bhi.w	800a0a4 <BSP_I2C4_Init+0x598>
 8009e30:	46ab      	mov	fp, r5
            if(presc != prev_presc)
 8009e32:	45ab      	cmp	fp, r5
 8009e34:	f000 810b 	beq.w	800a04e <BSP_I2C4_Init+0x542>
 8009e38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e3a:	2900      	cmp	r1, #0
 8009e3c:	f000 80df 	beq.w	8009ffe <BSP_I2C4_Init+0x4f2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009e40:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8009e44:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009e46:	2008      	movs	r0, #8
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009e48:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009e4c:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009e4e:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009e52:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009e54:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009e56:	4651      	mov	r1, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009e58:	f200 8124 	bhi.w	800a0a4 <BSP_I2C4_Init+0x598>
 8009e5c:	46ab      	mov	fp, r5
            if(presc != prev_presc)
 8009e5e:	45ab      	cmp	fp, r5
 8009e60:	f000 80f5 	beq.w	800a04e <BSP_I2C4_Init+0x542>
 8009e64:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009e66:	2900      	cmp	r1, #0
 8009e68:	f000 80dd 	beq.w	800a026 <BSP_I2C4_Init+0x51a>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009e6c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8009e70:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009e72:	200a      	movs	r0, #10
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009e74:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009e78:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009e7a:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009e7e:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009e80:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009e82:	4651      	mov	r1, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009e84:	f200 810e 	bhi.w	800a0a4 <BSP_I2C4_Init+0x598>
 8009e88:	46ab      	mov	fp, r5
            if(presc != prev_presc)
 8009e8a:	45ab      	cmp	fp, r5
 8009e8c:	f000 80df 	beq.w	800a04e <BSP_I2C4_Init+0x542>
 8009e90:	f1be 0f00 	cmp.w	lr, #0
 8009e94:	f000 80db 	beq.w	800a04e <BSP_I2C4_Init+0x542>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009e98:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8009e9c:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009e9e:	200c      	movs	r0, #12
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009ea0:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009ea4:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009ea6:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009eaa:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009eac:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009eae:	4651      	mov	r1, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009eb0:	f200 80f8 	bhi.w	800a0a4 <BSP_I2C4_Init+0x598>
 8009eb4:	46ab      	mov	fp, r5
            if(presc != prev_presc)
 8009eb6:	4546      	cmp	r6, r8
 8009eb8:	bf8c      	ite	hi
 8009eba:	2100      	movhi	r1, #0
 8009ebc:	2101      	movls	r1, #1
 8009ebe:	4544      	cmp	r4, r8
 8009ec0:	bf38      	it	cc
 8009ec2:	2100      	movcc	r1, #0
 8009ec4:	2900      	cmp	r1, #0
 8009ec6:	f000 80d7 	beq.w	800a078 <BSP_I2C4_Init+0x56c>
 8009eca:	455d      	cmp	r5, fp
 8009ecc:	f43f af50 	beq.w	8009d70 <BSP_I2C4_Init+0x264>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009ed0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8009ed4:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009ed6:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
 8009eda:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009ede:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009ee0:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009ee2:	f04f 020e 	mov.w	r2, #14
 8009ee6:	608a      	str	r2, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009ee8:	4651      	mov	r1, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009eea:	f200 80db 	bhi.w	800a0a4 <BSP_I2C4_Init+0x598>
 8009eee:	46ab      	mov	fp, r5
 8009ef0:	e73e      	b.n	8009d70 <BSP_I2C4_Init+0x264>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8009ef2:	9a07      	ldr	r2, [sp, #28]
 8009ef4:	9b08      	ldr	r3, [sp, #32]
 8009ef6:	3214      	adds	r2, #20
 8009ef8:	3301      	adds	r3, #1
 8009efa:	9207      	str	r2, [sp, #28]
 8009efc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009efe:	9308      	str	r3, [sp, #32]
 8009f00:	4293      	cmp	r3, r2
 8009f02:	f040 80ee 	bne.w	800a0e2 <BSP_I2C4_Init+0x5d6>
        if (idx < I2C_VALID_TIMING_NBR)
 8009f06:	297f      	cmp	r1, #127	; 0x7f
 8009f08:	d818      	bhi.n	8009f3c <BSP_I2C4_Init+0x430>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009f0a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8009f0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f10:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8009f14:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8009f18:	6850      	ldr	r0, [r2, #4]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8009f1a:	7c13      	ldrb	r3, [r2, #16]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8009f1c:	0500      	lsls	r0, r0, #20
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009f1e:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8009f22:	f400 0070 	and.w	r0, r0, #15728640	; 0xf00000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8009f26:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009f2a:	4303      	orrs	r3, r0
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8009f2c:	0409      	lsls	r1, r1, #16
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8009f2e:	0212      	lsls	r2, r2, #8
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8009f30:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8009f34:	b292      	uxth	r2, r2
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009f36:	430b      	orrs	r3, r1
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	9303      	str	r3, [sp, #12]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8009f3c:	9903      	ldr	r1, [sp, #12]
 8009f3e:	48a1      	ldr	r0, [pc, #644]	; (800a1c4 <BSP_I2C4_Init+0x6b8>)
 8009f40:	f7ff fdc4 	bl	8009acc <MX_I2C4_Init>
 8009f44:	2800      	cmp	r0, #0
 8009f46:	f43f adeb 	beq.w	8009b20 <BSP_I2C4_Init+0x14>
          ret = BSP_ERROR_BUS_FAILURE;
 8009f4a:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8009f4e:	e5e8      	b.n	8009b22 <BSP_I2C4_Init+0x16>
            if(presc != prev_presc)
 8009f50:	454e      	cmp	r6, r9
 8009f52:	bf8c      	ite	hi
 8009f54:	2100      	movhi	r1, #0
 8009f56:	2101      	movls	r1, #1
 8009f58:	454c      	cmp	r4, r9
 8009f5a:	bf38      	it	cc
 8009f5c:	2100      	movcc	r1, #0
 8009f5e:	2900      	cmp	r1, #0
 8009f60:	f43f af25 	beq.w	8009dae <BSP_I2C4_Init+0x2a2>
 8009f64:	45ab      	cmp	fp, r5
 8009f66:	d072      	beq.n	800a04e <BSP_I2C4_Init+0x542>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009f68:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8009f6c:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009f6e:	2001      	movs	r0, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009f70:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009f74:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009f76:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009f7a:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009f7c:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009f7e:	4651      	mov	r1, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009f80:	f200 8090 	bhi.w	800a0a4 <BSP_I2C4_Init+0x598>
 8009f84:	46ab      	mov	fp, r5
            if(presc != prev_presc)
 8009f86:	45ab      	cmp	fp, r5
 8009f88:	d061      	beq.n	800a04e <BSP_I2C4_Init+0x542>
 8009f8a:	9906      	ldr	r1, [sp, #24]
 8009f8c:	2900      	cmp	r1, #0
 8009f8e:	f43f af24 	beq.w	8009dda <BSP_I2C4_Init+0x2ce>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009f92:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8009f96:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009f98:	2003      	movs	r0, #3
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009f9a:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009f9e:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009fa0:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009fa4:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009fa6:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009fa8:	4651      	mov	r1, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009faa:	d87b      	bhi.n	800a0a4 <BSP_I2C4_Init+0x598>
 8009fac:	46ab      	mov	fp, r5
            if(presc != prev_presc)
 8009fae:	45ab      	cmp	fp, r5
 8009fb0:	d04d      	beq.n	800a04e <BSP_I2C4_Init+0x542>
 8009fb2:	9908      	ldr	r1, [sp, #32]
 8009fb4:	2900      	cmp	r1, #0
 8009fb6:	f43f af26 	beq.w	8009e06 <BSP_I2C4_Init+0x2fa>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009fba:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8009fbe:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009fc0:	2005      	movs	r0, #5
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009fc2:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009fc6:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009fc8:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009fcc:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009fce:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009fd0:	4651      	mov	r1, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009fd2:	d867      	bhi.n	800a0a4 <BSP_I2C4_Init+0x598>
 8009fd4:	46ab      	mov	fp, r5
            if(presc != prev_presc)
 8009fd6:	45ab      	cmp	fp, r5
 8009fd8:	d039      	beq.n	800a04e <BSP_I2C4_Init+0x542>
 8009fda:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009fdc:	2900      	cmp	r1, #0
 8009fde:	f43f af28 	beq.w	8009e32 <BSP_I2C4_Init+0x326>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009fe2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8009fe6:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009fe8:	2007      	movs	r0, #7
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009fea:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009fee:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009ff0:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009ff4:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009ff6:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009ff8:	4651      	mov	r1, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009ffa:	d853      	bhi.n	800a0a4 <BSP_I2C4_Init+0x598>
 8009ffc:	46ab      	mov	fp, r5
            if(presc != prev_presc)
 8009ffe:	45ab      	cmp	fp, r5
 800a000:	d025      	beq.n	800a04e <BSP_I2C4_Init+0x542>
 800a002:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a004:	2900      	cmp	r1, #0
 800a006:	f43f af2a 	beq.w	8009e5e <BSP_I2C4_Init+0x352>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a00a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800a00e:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800a010:	2009      	movs	r0, #9
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a012:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800a016:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a018:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800a01c:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800a01e:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a020:	4651      	mov	r1, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800a022:	d83f      	bhi.n	800a0a4 <BSP_I2C4_Init+0x598>
 800a024:	46ab      	mov	fp, r5
            if(presc != prev_presc)
 800a026:	45ab      	cmp	fp, r5
 800a028:	d011      	beq.n	800a04e <BSP_I2C4_Init+0x542>
 800a02a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a02c:	2900      	cmp	r1, #0
 800a02e:	f43f af2c 	beq.w	8009e8a <BSP_I2C4_Init+0x37e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a032:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800a036:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800a038:	200b      	movs	r0, #11
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a03a:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800a03e:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a040:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800a044:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800a046:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a048:	4651      	mov	r1, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800a04a:	d82b      	bhi.n	800a0a4 <BSP_I2C4_Init+0x598>
 800a04c:	46ab      	mov	fp, r5
            if(presc != prev_presc)
 800a04e:	455d      	cmp	r5, fp
 800a050:	f43f af31 	beq.w	8009eb6 <BSP_I2C4_Init+0x3aa>
 800a054:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a056:	2900      	cmp	r1, #0
 800a058:	f43f af2d 	beq.w	8009eb6 <BSP_I2C4_Init+0x3aa>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a05c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800a060:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800a062:	200d      	movs	r0, #13
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a064:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800a068:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a06a:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800a06e:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800a070:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a072:	4651      	mov	r1, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800a074:	d816      	bhi.n	800a0a4 <BSP_I2C4_Init+0x598>
 800a076:	46ab      	mov	fp, r5
            if(presc != prev_presc)
 800a078:	455d      	cmp	r5, fp
 800a07a:	f43f ae79 	beq.w	8009d70 <BSP_I2C4_Init+0x264>
 800a07e:	9904      	ldr	r1, [sp, #16]
 800a080:	2900      	cmp	r1, #0
 800a082:	f43f ae75 	beq.w	8009d70 <BSP_I2C4_Init+0x264>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a086:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800a08a:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a08c:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
 800a090:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800a094:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800a096:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800a098:	f04f 020f 	mov.w	r2, #15
 800a09c:	608a      	str	r2, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a09e:	4651      	mov	r1, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800a0a0:	f67f af25 	bls.w	8009eee <BSP_I2C4_Init+0x3e2>
 800a0a4:	4a48      	ldr	r2, [pc, #288]	; (800a1c8 <BSP_I2C4_Init+0x6bc>)
 800a0a6:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
 800a0aa:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800a0ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0ae:	f241 220c 	movw	r2, #4620	; 0x120c
 800a0b2:	f640 769f 	movw	r6, #3999	; 0xf9f
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800a0b6:	f242 7a10 	movw	sl, #10000	; 0x2710
 800a0ba:	1ad2      	subs	r2, r2, r3
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800a0bc:	f241 0b47 	movw	fp, #4167	; 0x1047
 800a0c0:	920c      	str	r2, [sp, #48]	; 0x30
 800a0c2:	9a02      	ldr	r2, [sp, #8]
 800a0c4:	4296      	cmp	r6, r2
 800a0c6:	bf38      	it	cc
 800a0c8:	4616      	movcc	r6, r2
 800a0ca:	4a40      	ldr	r2, [pc, #256]	; (800a1cc <BSP_I2C4_Init+0x6c0>)
 800a0cc:	189a      	adds	r2, r3, r2
 800a0ce:	3332      	adds	r3, #50	; 0x32
 800a0d0:	930d      	str	r3, [sp, #52]	; 0x34
 800a0d2:	4b3f      	ldr	r3, [pc, #252]	; (800a1d0 <BSP_I2C4_Init+0x6c4>)
 800a0d4:	920e      	str	r2, [sp, #56]	; 0x38
 800a0d6:	9307      	str	r3, [sp, #28]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800a0d8:	2300      	movs	r3, #0
 800a0da:	9308      	str	r3, [sp, #32]
 800a0dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a0e0:	4619      	mov	r1, r3
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800a0e2:	9b07      	ldr	r3, [sp, #28]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800a0e4:	f04f 0800 	mov.w	r8, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800a0e8:	6818      	ldr	r0, [r3, #0]
 800a0ea:	9b02      	ldr	r3, [sp, #8]
 800a0ec:	fb00 3003 	mla	r0, r0, r3, r3
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800a0f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0f2:	1a1b      	subs	r3, r3, r0
 800a0f4:	ea4f 0943 	mov.w	r9, r3, lsl #1
 800a0f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0fa:	eb03 0e00 	add.w	lr, r3, r0
 800a0fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a100:	4403      	add	r3, r0
 800a102:	9309      	str	r3, [sp, #36]	; 0x24
 800a104:	e006      	b.n	800a114 <BSP_I2C4_Init+0x608>
 800a106:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
 800a10a:	4486      	add	lr, r0
 800a10c:	eba9 0900 	sub.w	r9, r9, r0
 800a110:	f43f aeef 	beq.w	8009ef2 <BSP_I2C4_Init+0x3e6>
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800a114:	f241 225c 	movw	r2, #4700	; 0x125c
 800a118:	f8cd 8004 	str.w	r8, [sp, #4]
 800a11c:	f1ae 0332 	sub.w	r3, lr, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800a120:	f108 0801 	add.w	r8, r8, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800a124:	4596      	cmp	lr, r2
 800a126:	d9ee      	bls.n	800a106 <BSP_I2C4_Init+0x5fa>
 800a128:	9a02      	ldr	r2, [sp, #8]
 800a12a:	ebb2 0f93 	cmp.w	r2, r3, lsr #2
 800a12e:	d2ea      	bcs.n	800a106 <BSP_I2C4_Init+0x5fa>
 800a130:	f242 4c4a 	movw	ip, #9290	; 0x244a
 800a134:	464c      	mov	r4, r9
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800a136:	f8cd 9018 	str.w	r9, [sp, #24]
 800a13a:	2200      	movs	r2, #0
 800a13c:	ebac 0c03 	sub.w	ip, ip, r3
 800a140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a142:	4689      	mov	r9, r1
 800a144:	4473      	add	r3, lr
 800a146:	e9cd e804 	strd	lr, r8, [sp, #16]
 800a14a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a14e:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800a152:	e005      	b.n	800a160 <BSP_I2C4_Init+0x654>
 800a154:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800a158:	4403      	add	r3, r0
 800a15a:	eba4 0400 	sub.w	r4, r4, r0
 800a15e:	d01a      	beq.n	800a196 <BSP_I2C4_Init+0x68a>
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800a160:	eb0c 0103 	add.w	r1, ip, r3
 800a164:	4617      	mov	r7, r2
 800a166:	f203 6583 	addw	r5, r3, #1667	; 0x683
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800a16a:	3201      	adds	r2, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800a16c:	428e      	cmp	r6, r1
 800a16e:	d2f1      	bcs.n	800a154 <BSP_I2C4_Init+0x648>
 800a170:	455d      	cmp	r5, fp
 800a172:	d8ef      	bhi.n	800a154 <BSP_I2C4_Init+0x648>
            if (error < 0)
 800a174:	ea33 0123 	bics.w	r1, r3, r3, asr #32
 800a178:	bf28      	it	cs
 800a17a:	4621      	movcs	r1, r4
            if ((uint32_t)error < prev_error)
 800a17c:	4551      	cmp	r1, sl
 800a17e:	d2e9      	bcs.n	800a154 <BSP_I2C4_Init+0x648>
              I2c_valid_timing[count].sclh = sclh;
 800a180:	468a      	mov	sl, r1
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800a182:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
              I2c_valid_timing[count].scll = scll;
 800a186:	9901      	ldr	r1, [sp, #4]
              I2c_valid_timing[count].sclh = sclh;
 800a188:	46c1      	mov	r9, r8
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800a18a:	4403      	add	r3, r0
 800a18c:	eba4 0400 	sub.w	r4, r4, r0
              I2c_valid_timing[count].sclh = sclh;
 800a190:	e9ce 7103 	strd	r7, r1, [lr, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800a194:	d1e4      	bne.n	800a160 <BSP_I2C4_Init+0x654>
 800a196:	4649      	mov	r1, r9
 800a198:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800a19c:	e9dd e804 	ldrd	lr, r8, [sp, #16]
 800a1a0:	e7b1      	b.n	800a106 <BSP_I2C4_Init+0x5fa>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800a1a2:	9a02      	ldr	r2, [sp, #8]
 800a1a4:	3501      	adds	r5, #1
 800a1a6:	4491      	add	r9, r2
 800a1a8:	2d10      	cmp	r5, #16
 800a1aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a1ac:	4490      	add	r8, r2
 800a1ae:	f47f ad35 	bne.w	8009c1c <BSP_I2C4_Init+0x110>
 800a1b2:	4a05      	ldr	r2, [pc, #20]	; (800a1c8 <BSP_I2C4_Init+0x6bc>)
 800a1b4:	930a      	str	r3, [sp, #40]	; 0x28
 800a1b6:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f43f aebf 	beq.w	8009f3c <BSP_I2C4_Init+0x430>
 800a1be:	4b04      	ldr	r3, [pc, #16]	; (800a1d0 <BSP_I2C4_Init+0x6c4>)
 800a1c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1c2:	e773      	b.n	800a0ac <BSP_I2C4_Init+0x5a0>
 800a1c4:	20009e30 	.word	0x20009e30
 800a1c8:	20009e2c 	.word	0x20009e2c
 800a1cc:	ffffdbb6 	.word	0xffffdbb6
 800a1d0:	2000942c 	.word	0x2000942c

0800a1d4 <BSP_I2C4_WriteReg>:
{
 800a1d4:	b530      	push	{r4, r5, lr}
 800a1d6:	4614      	mov	r4, r2
 800a1d8:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800a1da:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800a1de:	460a      	mov	r2, r1
 800a1e0:	9301      	str	r3, [sp, #4]
 800a1e2:	4601      	mov	r1, r0
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	4809      	ldr	r0, [pc, #36]	; (800a20c <BSP_I2C4_WriteReg+0x38>)
 800a1e8:	9502      	str	r5, [sp, #8]
 800a1ea:	9400      	str	r4, [sp, #0]
 800a1ec:	f004 fb7a 	bl	800e8e4 <HAL_I2C_Mem_Write>
 800a1f0:	b908      	cbnz	r0, 800a1f6 <BSP_I2C4_WriteReg+0x22>
}
 800a1f2:	b005      	add	sp, #20
 800a1f4:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800a1f6:	4805      	ldr	r0, [pc, #20]	; (800a20c <BSP_I2C4_WriteReg+0x38>)
 800a1f8:	f004 fdf4 	bl	800ede4 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800a1fc:	2804      	cmp	r0, #4
 800a1fe:	bf0c      	ite	eq
 800a200:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 800a204:	f06f 0003 	mvnne.w	r0, #3
 800a208:	e7f3      	b.n	800a1f2 <BSP_I2C4_WriteReg+0x1e>
 800a20a:	bf00      	nop
 800a20c:	20009e30 	.word	0x20009e30

0800a210 <BSP_I2C4_ReadReg>:
{
 800a210:	b530      	push	{r4, r5, lr}
 800a212:	4614      	mov	r4, r2
 800a214:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800a216:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800a21a:	460a      	mov	r2, r1
 800a21c:	9301      	str	r3, [sp, #4]
 800a21e:	4601      	mov	r1, r0
 800a220:	2301      	movs	r3, #1
 800a222:	4809      	ldr	r0, [pc, #36]	; (800a248 <BSP_I2C4_ReadReg+0x38>)
 800a224:	9502      	str	r5, [sp, #8]
 800a226:	9400      	str	r4, [sp, #0]
 800a228:	f004 fc86 	bl	800eb38 <HAL_I2C_Mem_Read>
 800a22c:	b908      	cbnz	r0, 800a232 <BSP_I2C4_ReadReg+0x22>
}
 800a22e:	b005      	add	sp, #20
 800a230:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800a232:	4805      	ldr	r0, [pc, #20]	; (800a248 <BSP_I2C4_ReadReg+0x38>)
 800a234:	f004 fdd6 	bl	800ede4 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800a238:	2804      	cmp	r0, #4
 800a23a:	bf0c      	ite	eq
 800a23c:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 800a240:	f06f 0003 	mvnne.w	r0, #3
 800a244:	e7f3      	b.n	800a22e <BSP_I2C4_ReadReg+0x1e>
 800a246:	bf00      	nop
 800a248:	20009e30 	.word	0x20009e30

0800a24c <BSP_I2C4_WriteReg16>:
{
 800a24c:	b530      	push	{r4, r5, lr}
 800a24e:	4614      	mov	r4, r2
 800a250:	b085      	sub	sp, #20
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800a252:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800a256:	460a      	mov	r2, r1
 800a258:	9301      	str	r3, [sp, #4]
 800a25a:	4601      	mov	r1, r0
 800a25c:	2302      	movs	r3, #2
 800a25e:	4809      	ldr	r0, [pc, #36]	; (800a284 <BSP_I2C4_WriteReg16+0x38>)
 800a260:	9502      	str	r5, [sp, #8]
 800a262:	9400      	str	r4, [sp, #0]
 800a264:	f004 fb3e 	bl	800e8e4 <HAL_I2C_Mem_Write>
 800a268:	b908      	cbnz	r0, 800a26e <BSP_I2C4_WriteReg16+0x22>
}
 800a26a:	b005      	add	sp, #20
 800a26c:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800a26e:	4805      	ldr	r0, [pc, #20]	; (800a284 <BSP_I2C4_WriteReg16+0x38>)
 800a270:	f004 fdb8 	bl	800ede4 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800a274:	2804      	cmp	r0, #4
 800a276:	bf0c      	ite	eq
 800a278:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 800a27c:	f06f 0003 	mvnne.w	r0, #3
 800a280:	e7f3      	b.n	800a26a <BSP_I2C4_WriteReg16+0x1e>
 800a282:	bf00      	nop
 800a284:	20009e30 	.word	0x20009e30

0800a288 <BSP_I2C4_ReadReg16>:
{
 800a288:	b530      	push	{r4, r5, lr}
 800a28a:	4614      	mov	r4, r2
 800a28c:	b085      	sub	sp, #20
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800a28e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800a292:	460a      	mov	r2, r1
 800a294:	9301      	str	r3, [sp, #4]
 800a296:	4601      	mov	r1, r0
 800a298:	2302      	movs	r3, #2
 800a29a:	4809      	ldr	r0, [pc, #36]	; (800a2c0 <BSP_I2C4_ReadReg16+0x38>)
 800a29c:	9502      	str	r5, [sp, #8]
 800a29e:	9400      	str	r4, [sp, #0]
 800a2a0:	f004 fc4a 	bl	800eb38 <HAL_I2C_Mem_Read>
 800a2a4:	b908      	cbnz	r0, 800a2aa <BSP_I2C4_ReadReg16+0x22>
}
 800a2a6:	b005      	add	sp, #20
 800a2a8:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800a2aa:	4805      	ldr	r0, [pc, #20]	; (800a2c0 <BSP_I2C4_ReadReg16+0x38>)
 800a2ac:	f004 fd9a 	bl	800ede4 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800a2b0:	2804      	cmp	r0, #4
 800a2b2:	bf0c      	ite	eq
 800a2b4:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 800a2b8:	f06f 0003 	mvnne.w	r0, #3
 800a2bc:	e7f3      	b.n	800a2a6 <BSP_I2C4_ReadReg16+0x1e>
 800a2be:	bf00      	nop
 800a2c0:	20009e30 	.word	0x20009e30

0800a2c4 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 800a2c4:	f001 bada 	b.w	800b87c <HAL_GetTick>

0800a2c8 <BSP_CAMERA_DeInit>:
  * @brief  DeInitializes the camera.
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_DeInit(uint32_t Instance)
{
 800a2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2ca:	b089      	sub	sp, #36	; 0x24
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 800a2cc:	2800      	cmp	r0, #0
 800a2ce:	d171      	bne.n	800a3b4 <BSP_CAMERA_DeInit+0xec>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    if((Camera_CompObj == NULL)||(Camera_Drv == NULL))
 800a2d0:	4e3a      	ldr	r6, [pc, #232]	; (800a3bc <BSP_CAMERA_DeInit+0xf4>)
 800a2d2:	6833      	ldr	r3, [r6, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d06a      	beq.n	800a3ae <BSP_CAMERA_DeInit+0xe6>
 800a2d8:	4f39      	ldr	r7, [pc, #228]	; (800a3c0 <BSP_CAMERA_DeInit+0xf8>)
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d066      	beq.n	800a3ae <BSP_CAMERA_DeInit+0xe6>
    {
      ret = BSP_ERROR_NO_INIT;
    }
    else
    {
      hcamera_dcmi.Instance = DCMI;
 800a2e0:	4c38      	ldr	r4, [pc, #224]	; (800a3c4 <BSP_CAMERA_DeInit+0xfc>)
 800a2e2:	4b39      	ldr	r3, [pc, #228]	; (800a3c8 <BSP_CAMERA_DeInit+0x100>)

  if(Instance >= CAMERA_INSTANCES_NBR)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(HAL_DCMI_Stop(&hcamera_dcmi) != HAL_OK)
 800a2e4:	4620      	mov	r0, r4
      hcamera_dcmi.Instance = DCMI;
 800a2e6:	6023      	str	r3, [r4, #0]
  else if(HAL_DCMI_Stop(&hcamera_dcmi) != HAL_OK)
 800a2e8:	f001 fc22 	bl	800bb30 <HAL_DCMI_Stop>
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	d158      	bne.n	800a3a2 <BSP_CAMERA_DeInit+0xda>
      else if(HAL_DCMI_DisableCROP(&hcamera_dcmi)!= HAL_OK)
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	f001 fd3b 	bl	800bd6c <HAL_DCMI_DisableCrop>
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	d153      	bne.n	800a3a2 <BSP_CAMERA_DeInit+0xda>
      else if(HAL_DCMI_DeInit(&hcamera_dcmi) != HAL_OK)
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	f001 fc0c 	bl	800bb18 <HAL_DCMI_DeInit>
 800a300:	2800      	cmp	r0, #0
 800a302:	d14e      	bne.n	800a3a2 <BSP_CAMERA_DeInit+0xda>
static void DCMI_MspDeInit(DCMI_HandleTypeDef *hdcmi)
{
  GPIO_InitTypeDef gpio_init_structure;

  /* Disable NVIC  for DCMI transfer complete interrupt */
  HAL_NVIC_DisableIRQ(DCMI_IRQn);
 800a304:	204e      	movs	r0, #78	; 0x4e
  HAL_GPIO_DeInit(GPIOG, gpio_init_structure.Pin);



  /* Disable DCMI clock */
  __HAL_RCC_DCMI_CLK_DISABLE();
 800a306:	4d31      	ldr	r5, [pc, #196]	; (800a3cc <BSP_CAMERA_DeInit+0x104>)
  HAL_NVIC_DisableIRQ(DCMI_IRQn);
 800a308:	f001 fb3c 	bl	800b984 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(DMA2_Stream3_IRQn);
 800a30c:	203b      	movs	r0, #59	; 0x3b
 800a30e:	f001 fb39 	bl	800b984 <HAL_NVIC_DisableIRQ>
  (void)HAL_DMA_DeInit(hdcmi->DMA_Handle);
 800a312:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a314:	f002 f8da 	bl	800c4cc <HAL_DMA_DeInit>
  HAL_GPIO_DeInit(GPIOA, gpio_init_structure.Pin);
 800a318:	2150      	movs	r1, #80	; 0x50
 800a31a:	482d      	ldr	r0, [pc, #180]	; (800a3d0 <BSP_CAMERA_DeInit+0x108>)
 800a31c:	f004 f8e2 	bl	800e4e4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, gpio_init_structure.Pin);
 800a320:	f44f 7160 	mov.w	r1, #896	; 0x380
 800a324:	482b      	ldr	r0, [pc, #172]	; (800a3d4 <BSP_CAMERA_DeInit+0x10c>)
 800a326:	f004 f8dd 	bl	800e4e4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, gpio_init_structure.Pin);
 800a32a:	f44f 612c 	mov.w	r1, #2752	; 0xac0
 800a32e:	482a      	ldr	r0, [pc, #168]	; (800a3d8 <BSP_CAMERA_DeInit+0x110>)
 800a330:	f004 f8d8 	bl	800e4e4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, gpio_init_structure.Pin);
 800a334:	2108      	movs	r1, #8
 800a336:	4829      	ldr	r0, [pc, #164]	; (800a3dc <BSP_CAMERA_DeInit+0x114>)
 800a338:	f004 f8d4 	bl	800e4e4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, gpio_init_structure.Pin);
 800a33c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a340:	4827      	ldr	r0, [pc, #156]	; (800a3e0 <BSP_CAMERA_DeInit+0x118>)
 800a342:	f004 f8cf 	bl	800e4e4 <HAL_GPIO_DeInit>
  __HAL_RCC_DCMI_CLK_DISABLE();
 800a346:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
        if(Camera_Drv->DeInit(Camera_CompObj) != BSP_ERROR_NONE)
 800a34a:	6830      	ldr	r0, [r6, #0]
  __HAL_RCC_DCMI_CLK_DISABLE();
 800a34c:	f023 0301 	bic.w	r3, r3, #1
 800a350:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
        if(Camera_Drv->DeInit(Camera_CompObj) != BSP_ERROR_NONE)
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	4798      	blx	r3
 800a35a:	4604      	mov	r4, r0
 800a35c:	bb20      	cbnz	r0, 800a3a8 <BSP_CAMERA_DeInit+0xe0>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a35e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800a362:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a366:	2101      	movs	r1, #1
 800a368:	2600      	movs	r6, #0
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a36a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800a36e:	2702      	movs	r7, #2
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a370:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800a374:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800a378:	f403 7300 	and.w	r3, r3, #512	; 0x200
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800a37c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a380:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800a382:	a902      	add	r1, sp, #8
 800a384:	4817      	ldr	r0, [pc, #92]	; (800a3e4 <BSP_CAMERA_DeInit+0x11c>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a386:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800a388:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800a38c:	f003 ff68 	bl	800e260 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_14, GPIO_PIN_SET);
 800a390:	2201      	movs	r2, #1
 800a392:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a396:	4813      	ldr	r0, [pc, #76]	; (800a3e4 <BSP_CAMERA_DeInit+0x11c>)
 800a398:	f004 f972 	bl	800e680 <HAL_GPIO_WritePin>
}
 800a39c:	4620      	mov	r0, r4
 800a39e:	b009      	add	sp, #36	; 0x24
 800a3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = BSP_ERROR_PERIPH_FAILURE;
 800a3a2:	f06f 0403 	mvn.w	r4, #3
 800a3a6:	e7f9      	b.n	800a39c <BSP_CAMERA_DeInit+0xd4>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800a3a8:	f06f 0404 	mvn.w	r4, #4
  return ret;
 800a3ac:	e7f6      	b.n	800a39c <BSP_CAMERA_DeInit+0xd4>
      ret = BSP_ERROR_NO_INIT;
 800a3ae:	f04f 34ff 	mov.w	r4, #4294967295
 800a3b2:	e7f3      	b.n	800a39c <BSP_CAMERA_DeInit+0xd4>
    ret = BSP_ERROR_WRONG_PARAM;
 800a3b4:	f06f 0401 	mvn.w	r4, #1
 800a3b8:	e7f0      	b.n	800a39c <BSP_CAMERA_DeInit+0xd4>
 800a3ba:	bf00      	nop
 800a3bc:	20009ea8 	.word	0x20009ea8
 800a3c0:	20009ee0 	.word	0x20009ee0
 800a3c4:	20009f38 	.word	0x20009f38
 800a3c8:	48020000 	.word	0x48020000
 800a3cc:	58024400 	.word	0x58024400
 800a3d0:	58020000 	.word	0x58020000
 800a3d4:	58020400 	.word	0x58020400
 800a3d8:	58020800 	.word	0x58020800
 800a3dc:	58020c00 	.word	0x58020c00
 800a3e0:	58021800 	.word	0x58021800
 800a3e4:	58022400 	.word	0x58022400

0800a3e8 <MX_DCMI_Init>:
  hdcmi->Init.HSPolarity       = HSPolarity;
 800a3e8:	4909      	ldr	r1, [pc, #36]	; (800a410 <MX_DCMI_Init+0x28>)
  hdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 800a3ea:	2200      	movs	r2, #0
{
 800a3ec:	b510      	push	{r4, lr}
  hdcmi->Init.HSPolarity       = HSPolarity;
 800a3ee:	6809      	ldr	r1, [r1, #0]
  hdcmi->Instance              = DCMI;
 800a3f0:	4c08      	ldr	r4, [pc, #32]	; (800a414 <MX_DCMI_Init+0x2c>)
  hdcmi->Init.SynchroMode      = DCMI_SYNCHRO_HARDWARE;
 800a3f2:	6042      	str	r2, [r0, #4]
  hdcmi->Instance              = DCMI;
 800a3f4:	6004      	str	r4, [r0, #0]
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 800a3f6:	2480      	movs	r4, #128	; 0x80
  hdcmi->Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800a3f8:	6182      	str	r2, [r0, #24]
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 800a3fa:	60c4      	str	r4, [r0, #12]
  hdcmi->Init.HSPolarity       = HSPolarity;
 800a3fc:	e9c0 1204 	strd	r1, r2, [r0, #16]
  hdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;
 800a400:	2120      	movs	r1, #32
 800a402:	6081      	str	r1, [r0, #8]
  if(HAL_DCMI_Init(hdcmi) != HAL_OK)
 800a404:	f001 fb38 	bl	800ba78 <HAL_DCMI_Init>
}
 800a408:	3800      	subs	r0, #0
 800a40a:	bf18      	it	ne
 800a40c:	2001      	movne	r0, #1
 800a40e:	bd10      	pop	{r4, pc}
 800a410:	20009ee4 	.word	0x20009ee4
 800a414:	48020000 	.word	0x48020000

0800a418 <BSP_CAMERA_Init>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 800a418:	2800      	cmp	r0, #0
 800a41a:	f040 8210 	bne.w	800a83e <BSP_CAMERA_Init+0x426>
{
 800a41e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_DCMI_CLK_ENABLE();
 800a422:	4ccb      	ldr	r4, [pc, #812]	; (800a750 <BSP_CAMERA_Init+0x338>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 800a424:	260d      	movs	r6, #13
 800a426:	4691      	mov	r9, r2
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 800a428:	2250      	movs	r2, #80	; 0x50
  __HAL_RCC_DCMI_CLK_ENABLE();
 800a42a:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800a42e:	4605      	mov	r5, r0
 800a430:	460f      	mov	r7, r1
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 800a432:	48c8      	ldr	r0, [pc, #800]	; (800a754 <BSP_CAMERA_Init+0x33c>)
  __HAL_RCC_DCMI_CLK_ENABLE();
 800a434:	f043 0301 	orr.w	r3, r3, #1
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 800a438:	f8df 8364 	ldr.w	r8, [pc, #868]	; 800a7a0 <BSP_CAMERA_Init+0x388>
  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800a43c:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
{
 800a440:	ed2d 8b02 	vpush	{d8}
  __HAL_RCC_DCMI_CLK_ENABLE();
 800a444:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
{
 800a448:	b093      	sub	sp, #76	; 0x4c
  __HAL_RCC_DCMI_CLK_ENABLE();
 800a44a:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 800a44e:	a90c      	add	r1, sp, #48	; 0x30
  __HAL_RCC_DCMI_CLK_ENABLE();
 800a450:	f003 0301 	and.w	r3, r3, #1
 800a454:	9303      	str	r3, [sp, #12]
 800a456:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800a458:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800a45c:	f043 0302 	orr.w	r3, r3, #2
 800a460:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800a464:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800a468:	f003 0302 	and.w	r3, r3, #2
 800a46c:	9304      	str	r3, [sp, #16]
 800a46e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a470:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a474:	f043 0301 	orr.w	r3, r3, #1
 800a478:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a47c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a480:	f003 0301 	and.w	r3, r3, #1
 800a484:	9305      	str	r3, [sp, #20]
 800a486:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a488:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a48c:	f043 0302 	orr.w	r3, r3, #2
 800a490:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a494:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a498:	f003 0302 	and.w	r3, r3, #2
 800a49c:	9306      	str	r3, [sp, #24]
 800a49e:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a4a0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a4a4:	f043 0304 	orr.w	r3, r3, #4
 800a4a8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a4ac:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a4b0:	f003 0304 	and.w	r3, r3, #4
 800a4b4:	9307      	str	r3, [sp, #28]
 800a4b6:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a4b8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a4bc:	f043 0308 	orr.w	r3, r3, #8
 800a4c0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a4c4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a4c8:	f003 0308 	and.w	r3, r3, #8
 800a4cc:	9308      	str	r3, [sp, #32]
 800a4ce:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a4d0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a4d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4d8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a4dc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 800a4e0:	9610      	str	r6, [sp, #64]	; 0x40
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a4e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 800a4e6:	ed9f 8b94 	vldr	d8, [pc, #592]	; 800a738 <BSP_CAMERA_Init+0x320>
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a4ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 800a4ee:	2302      	movs	r3, #2
 800a4f0:	ed8d 8b0e 	vstr	d8, [sp, #56]	; 0x38
 800a4f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 800a4f8:	f003 feb2 	bl	800e260 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 800a4fc:	f44f 7260 	mov.w	r2, #896	; 0x380
 800a500:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 800a502:	a90c      	add	r1, sp, #48	; 0x30
 800a504:	4894      	ldr	r0, [pc, #592]	; (800a758 <BSP_CAMERA_Init+0x340>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 800a506:	9610      	str	r6, [sp, #64]	; 0x40
  gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 800a508:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a50c:	ed8d 8b0e 	vstr	d8, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 800a510:	f003 fea6 	bl	800e260 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11;
 800a514:	f44f 622c 	mov.w	r2, #2752	; 0xac0
 800a518:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800a51a:	a90c      	add	r1, sp, #48	; 0x30
 800a51c:	488f      	ldr	r0, [pc, #572]	; (800a75c <BSP_CAMERA_Init+0x344>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 800a51e:	9610      	str	r6, [sp, #64]	; 0x40
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11;
 800a520:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a524:	ed8d 8b0e 	vstr	d8, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800a528:	f003 fe9a 	bl	800e260 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_3;
 800a52c:	2208      	movs	r2, #8
 800a52e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800a530:	a90c      	add	r1, sp, #48	; 0x30
 800a532:	488b      	ldr	r0, [pc, #556]	; (800a760 <BSP_CAMERA_Init+0x348>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 800a534:	9610      	str	r6, [sp, #64]	; 0x40
  gpio_init_structure.Pin       = GPIO_PIN_3;
 800a536:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a53a:	ed8d 8b0e 	vstr	d8, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800a53e:	f003 fe8f 	bl	800e260 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_10;
 800a542:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a546:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800a548:	a90c      	add	r1, sp, #48	; 0x30
 800a54a:	4886      	ldr	r0, [pc, #536]	; (800a764 <BSP_CAMERA_Init+0x34c>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 800a54c:	9610      	str	r6, [sp, #64]	; 0x40
  hdma_handler.Init.Priority            = DMA_PRIORITY_HIGH;
 800a54e:	f44f 7680 	mov.w	r6, #256	; 0x100
  gpio_init_structure.Pin       = GPIO_PIN_10;
 800a552:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a556:	ed8d 8b0e 	vstr	d8, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800a55a:	f003 fe81 	bl	800e260 <HAL_GPIO_Init>
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 800a55e:	4b82      	ldr	r3, [pc, #520]	; (800a768 <BSP_CAMERA_Init+0x350>)
 800a560:	224b      	movs	r2, #75	; 0x4b
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a562:	f44f 6080 	mov.w	r0, #1024	; 0x400
  hdma_handler.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800a566:	f04f 0c04 	mov.w	ip, #4
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 800a56a:	210f      	movs	r1, #15
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 800a56c:	605a      	str	r2, [r3, #4]
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a56e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800a572:	f8c3 a018 	str.w	sl, [r3, #24]
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 800a576:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
 800a57a:	f8c3 8038 	str.w	r8, [r3, #56]	; 0x38
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a57e:	e9c3 0204 	strd	r0, r2, [r3, #16]
  hdma_handler.Init.Priority            = DMA_PRIORITY_HIGH;
 800a582:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 800a586:	204e      	movs	r0, #78	; 0x4e
  hdma_handler.Init.Priority            = DMA_PRIORITY_HIGH;
 800a588:	e9c3 6207 	strd	r6, r2, [r3, #28]
  hdma_handler.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800a58c:	2203      	movs	r2, #3
 800a58e:	e9c3 c209 	strd	ip, r2, [r3, #36]	; 0x24
  hdma_handler.Instance                 = DMA2_Stream3;
 800a592:	4a76      	ldr	r2, [pc, #472]	; (800a76c <BSP_CAMERA_Init+0x354>)
 800a594:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 800a596:	462a      	mov	r2, r5
  hdma_handler.Init.PeriphInc           = DMA_PINC_DISABLE;
 800a598:	e9c3 5502 	strd	r5, r5, [r3, #8]
  hdma_handler.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 800a59c:	e9c3 550b 	strd	r5, r5, [r3, #44]	; 0x2c
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 800a5a0:	f001 f9a4 	bl	800b8ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800a5a4:	204e      	movs	r0, #78	; 0x4e
 800a5a6:	f001 f9df 	bl	800b968 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 800a5aa:	462a      	mov	r2, r5
 800a5ac:	210f      	movs	r1, #15
 800a5ae:	203b      	movs	r0, #59	; 0x3b
 800a5b0:	f001 f99c 	bl	800b8ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800a5b4:	203b      	movs	r0, #59	; 0x3b
 800a5b6:	f001 f9d7 	bl	800b968 <HAL_NVIC_EnableIRQ>
  (void)HAL_DMA_Init(hdcmi->DMA_Handle);
 800a5ba:	f8d8 0048 	ldr.w	r0, [r8, #72]	; 0x48
 800a5be:	f001 fce7 	bl	800bf90 <HAL_DMA_Init>
    if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 800a5c2:	4640      	mov	r0, r8
 800a5c4:	f7ff ff10 	bl	800a3e8 <MX_DCMI_Init>
 800a5c8:	4605      	mov	r5, r0
 800a5ca:	2800      	cmp	r0, #0
 800a5cc:	f040 80ad 	bne.w	800a72a <BSP_CAMERA_Init+0x312>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a5d0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800a5d4:	a90c      	add	r1, sp, #48	; 0x30
 800a5d6:	4866      	ldr	r0, [pc, #408]	; (800a770 <BSP_CAMERA_Init+0x358>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a5d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 800a5dc:	4e65      	ldr	r6, [pc, #404]	; (800a774 <BSP_CAMERA_Init+0x35c>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800a5de:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 800a7a4 <BSP_CAMERA_Init+0x38c>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a5e2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a5e6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  IOCtx.GetTick     = BSP_GetTick;
 800a5ea:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a7a8 <BSP_CAMERA_Init+0x390>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a5ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800a5f2:	ed9f 7b53 	vldr	d7, [pc, #332]	; 800a740 <BSP_CAMERA_Init+0x328>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a5f6:	930a      	str	r3, [sp, #40]	; 0x28
 800a5f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800a5fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a5fe:	ed9f 7b52 	vldr	d7, [pc, #328]	; 800a748 <BSP_CAMERA_Init+0x330>
 800a602:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800a606:	f003 fe2b 	bl	800e260 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_SET);
 800a60a:	2201      	movs	r2, #1
 800a60c:	4651      	mov	r1, sl
 800a60e:	4858      	ldr	r0, [pc, #352]	; (800a770 <BSP_CAMERA_Init+0x358>)
 800a610:	f004 f836 	bl	800e680 <HAL_GPIO_WritePin>
    HAL_Delay(100);     /* POWER_DOWN de-asserted during 100 ms */
 800a614:	2064      	movs	r0, #100	; 0x64
 800a616:	f001 f937 	bl	800b888 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_RESET);
 800a61a:	462a      	mov	r2, r5
 800a61c:	4651      	mov	r1, sl
 800a61e:	4854      	ldr	r0, [pc, #336]	; (800a770 <BSP_CAMERA_Init+0x358>)
 800a620:	f004 f82e 	bl	800e680 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800a624:	2014      	movs	r0, #20
 800a626:	f001 f92f 	bl	800b888 <HAL_Delay>
  IOCtx.Address     = CAMERA_OV9655_ADDRESS;
 800a62a:	2260      	movs	r2, #96	; 0x60
  IOCtx.Init        = BSP_I2C4_Init;
 800a62c:	4b52      	ldr	r3, [pc, #328]	; (800a778 <BSP_CAMERA_Init+0x360>)
  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 800a62e:	a90c      	add	r1, sp, #48	; 0x30
  IOCtx.Address     = CAMERA_OV9655_ADDRESS;
 800a630:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 800a634:	4630      	mov	r0, r6
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800a636:	4a51      	ldr	r2, [pc, #324]	; (800a77c <BSP_CAMERA_Init+0x364>)
  IOCtx.GetTick     = BSP_GetTick;
 800a638:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800a63c:	9210      	str	r2, [sp, #64]	; 0x40
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800a63e:	4a50      	ldr	r2, [pc, #320]	; (800a780 <BSP_CAMERA_Init+0x368>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800a640:	e9cd 3b0c 	strd	r3, fp, [sp, #48]	; 0x30
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800a644:	920f      	str	r2, [sp, #60]	; 0x3c
  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 800a646:	f7fe fff3 	bl	8009630 <OV9655_RegisterBusIO>
 800a64a:	2800      	cmp	r0, #0
 800a64c:	f040 80b0 	bne.w	800a7b0 <BSP_CAMERA_Init+0x398>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(OV9655_ReadID(&OV9655Obj, &CameraId) != OV9655_OK)
 800a650:	4c4c      	ldr	r4, [pc, #304]	; (800a784 <BSP_CAMERA_Init+0x36c>)
 800a652:	4630      	mov	r0, r6
 800a654:	4621      	mov	r1, r4
 800a656:	f7fe ff37 	bl	80094c8 <OV9655_ReadID>
 800a65a:	2800      	cmp	r0, #0
 800a65c:	f040 80a8 	bne.w	800a7b0 <BSP_CAMERA_Init+0x398>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    if((CameraId != OV9655_ID) && (CameraId != OV9655_ID_2))
 800a660:	6821      	ldr	r1, [r4, #0]
 800a662:	4a49      	ldr	r2, [pc, #292]	; (800a788 <BSP_CAMERA_Init+0x370>)
 800a664:	440a      	add	r2, r1
 800a666:	2a01      	cmp	r2, #1
 800a668:	f200 80a2 	bhi.w	800a7b0 <BSP_CAMERA_Init+0x398>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
 800a66c:	4a47      	ldr	r2, [pc, #284]	; (800a78c <BSP_CAMERA_Init+0x374>)
      Camera_CompObj = &OV9655Obj;
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 800a66e:	4630      	mov	r0, r6
      Camera_CompObj = &OV9655Obj;
 800a670:	4d47      	ldr	r5, [pc, #284]	; (800a790 <BSP_CAMERA_Init+0x378>)
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 800a672:	4639      	mov	r1, r7
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
 800a674:	f8df a134 	ldr.w	sl, [pc, #308]	; 800a7ac <BSP_CAMERA_Init+0x394>
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 800a678:	6813      	ldr	r3, [r2, #0]
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
 800a67a:	f8ca 2000 	str.w	r2, [sl]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 800a67e:	464a      	mov	r2, r9
      Camera_CompObj = &OV9655Obj;
 800a680:	602e      	str	r6, [r5, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 800a682:	4798      	blx	r3
 800a684:	2800      	cmp	r0, #0
 800a686:	f040 8093 	bne.w	800a7b0 <BSP_CAMERA_Init+0x398>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if(Camera_Drv->GetCapabilities(Camera_CompObj, &Camera_Cap) != OV9655_OK)
 800a68a:	f8da 3000 	ldr.w	r3, [sl]
 800a68e:	6828      	ldr	r0, [r5, #0]
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	4940      	ldr	r1, [pc, #256]	; (800a794 <BSP_CAMERA_Init+0x37c>)
 800a694:	4798      	blx	r3
 800a696:	2800      	cmp	r0, #0
 800a698:	f040 808a 	bne.w	800a7b0 <BSP_CAMERA_Init+0x398>
        if((CameraId == OV9655_ID) || (CameraId == OV9655_ID_2))
 800a69c:	6822      	ldr	r2, [r4, #0]
 800a69e:	4b3a      	ldr	r3, [pc, #232]	; (800a788 <BSP_CAMERA_Init+0x370>)
 800a6a0:	4413      	add	r3, r2
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d839      	bhi.n	800a71a <BSP_CAMERA_Init+0x302>
          if(Resolution == CAMERA_R480x272)
 800a6a6:	2f02      	cmp	r7, #2
 800a6a8:	f000 80b5 	beq.w	800a816 <BSP_CAMERA_Init+0x3fe>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a6ac:	4b28      	ldr	r3, [pc, #160]	; (800a750 <BSP_CAMERA_Init+0x338>)
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800a6ae:	a90c      	add	r1, sp, #48	; 0x30
 800a6b0:	482f      	ldr	r0, [pc, #188]	; (800a770 <BSP_CAMERA_Init+0x358>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a6b2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a6b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a6ba:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800a6be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a6c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a6ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a6d4:	2302      	movs	r3, #2
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800a6dc:	f003 fdc0 	bl	800e260 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_SET);
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a6e6:	4822      	ldr	r0, [pc, #136]	; (800a770 <BSP_CAMERA_Init+0x358>)
 800a6e8:	f003 ffca 	bl	800e680 <HAL_GPIO_WritePin>
    HAL_Delay(100);     /* POWER_DOWN de-asserted during 100 ms */
 800a6ec:	2064      	movs	r0, #100	; 0x64
 800a6ee:	f001 f8cb 	bl	800b888 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_RESET);
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a6f8:	481d      	ldr	r0, [pc, #116]	; (800a770 <BSP_CAMERA_Init+0x358>)
 800a6fa:	f003 ffc1 	bl	800e680 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800a6fe:	2014      	movs	r0, #20
 800a700:	f001 f8c2 	bl	800b888 <HAL_Delay>
          Camera_Ctx[Instance].CameraId  = CameraId;
 800a704:	4b24      	ldr	r3, [pc, #144]	; (800a798 <BSP_CAMERA_Init+0x380>)
 800a706:	6822      	ldr	r2, [r4, #0]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 800a708:	2000      	movs	r0, #0
 800a70a:	e9c3 7901 	strd	r7, r9, [r3, #4]
          Camera_Ctx[Instance].CameraId  = CameraId;
 800a70e:	601a      	str	r2, [r3, #0]
}
 800a710:	b013      	add	sp, #76	; 0x4c
 800a712:	ecbd 8b02 	vpop	{d8}
 800a716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          HSPolarity = DCMI_HSPOLARITY_HIGH;
 800a71a:	4b20      	ldr	r3, [pc, #128]	; (800a79c <BSP_CAMERA_Init+0x384>)
 800a71c:	2240      	movs	r2, #64	; 0x40
          if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 800a71e:	4820      	ldr	r0, [pc, #128]	; (800a7a0 <BSP_CAMERA_Init+0x388>)
          HSPolarity = DCMI_HSPOLARITY_HIGH;
 800a720:	601a      	str	r2, [r3, #0]
          if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 800a722:	f7ff fe61 	bl	800a3e8 <MX_DCMI_Init>
 800a726:	2800      	cmp	r0, #0
 800a728:	d0c0      	beq.n	800a6ac <BSP_CAMERA_Init+0x294>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800a72a:	f06f 0003 	mvn.w	r0, #3
}
 800a72e:	b013      	add	sp, #76	; 0x4c
 800a730:	ecbd 8b02 	vpop	{d8}
 800a734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a738:	00000001 	.word	0x00000001
 800a73c:	00000003 	.word	0x00000003
 800a740:	00004000 	.word	0x00004000
 800a744:	00000001 	.word	0x00000001
 800a748:	00000000 	.word	0x00000000
 800a74c:	00000002 	.word	0x00000002
 800a750:	58024400 	.word	0x58024400
 800a754:	58020000 	.word	0x58020000
 800a758:	58020400 	.word	0x58020400
 800a75c:	58020800 	.word	0x58020800
 800a760:	58020c00 	.word	0x58020c00
 800a764:	58021800 	.word	0x58021800
 800a768:	20009f88 	.word	0x20009f88
 800a76c:	40020458 	.word	0x40020458
 800a770:	58022400 	.word	0x58022400
 800a774:	20009f10 	.word	0x20009f10
 800a778:	08009b0d 	.word	0x08009b0d
 800a77c:	0800a211 	.word	0x0800a211
 800a780:	0800a1d5 	.word	0x0800a1d5
 800a784:	20009e7c 	.word	0x20009e7c
 800a788:	ffff69aa 	.word	0xffff69aa
 800a78c:	200076cc 	.word	0x200076cc
 800a790:	20009ea8 	.word	0x20009ea8
 800a794:	20009e80 	.word	0x20009e80
 800a798:	20009eac 	.word	0x20009eac
 800a79c:	20009ee4 	.word	0x20009ee4
 800a7a0:	20009f38 	.word	0x20009f38
 800a7a4:	08009a79 	.word	0x08009a79
 800a7a8:	0800a2c5 	.word	0x0800a2c5
 800a7ac:	20009ee0 	.word	0x20009ee0
  OV5640_IO_t              IOCtx;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
  IOCtx.Init        = BSP_I2C4_Init;
 800a7b0:	4b24      	ldr	r3, [pc, #144]	; (800a844 <BSP_CAMERA_Init+0x42c>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
  IOCtx.GetTick     = BSP_GetTick;

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 800a7b2:	a90c      	add	r1, sp, #48	; 0x30
 800a7b4:	4d24      	ldr	r5, [pc, #144]	; (800a848 <BSP_CAMERA_Init+0x430>)
  IOCtx.GetTick     = BSP_GetTick;
 800a7b6:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 800a7ba:	4628      	mov	r0, r5
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800a7bc:	e9cd 3b0c 	strd	r3, fp, [sp, #48]	; 0x30
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 800a7c0:	4b22      	ldr	r3, [pc, #136]	; (800a84c <BSP_CAMERA_Init+0x434>)
 800a7c2:	9310      	str	r3, [sp, #64]	; 0x40
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 800a7c4:	4b22      	ldr	r3, [pc, #136]	; (800a850 <BSP_CAMERA_Init+0x438>)
 800a7c6:	930f      	str	r3, [sp, #60]	; 0x3c
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 800a7c8:	2378      	movs	r3, #120	; 0x78
 800a7ca:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 800a7ce:	f7fe fa6f 	bl	8008cb0 <OV5640_RegisterBusIO>
 800a7d2:	b9e8      	cbnz	r0, 800a810 <BSP_CAMERA_Init+0x3f8>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(OV5640_ReadID(&OV5640Obj, &CameraId) != OV5640_OK)
 800a7d4:	4c1f      	ldr	r4, [pc, #124]	; (800a854 <BSP_CAMERA_Init+0x43c>)
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	4621      	mov	r1, r4
 800a7da:	f7fe f849 	bl	8008870 <OV5640_ReadID>
 800a7de:	b9b8      	cbnz	r0, 800a810 <BSP_CAMERA_Init+0x3f8>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    if(CameraId != OV5640_ID)
 800a7e0:	6822      	ldr	r2, [r4, #0]
 800a7e2:	f245 6340 	movw	r3, #22080	; 0x5640
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d112      	bne.n	800a810 <BSP_CAMERA_Init+0x3f8>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
      Camera_CompObj = &OV5640Obj;
 800a7ea:	4e1b      	ldr	r6, [pc, #108]	; (800a858 <BSP_CAMERA_Init+0x440>)
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 800a7ec:	4628      	mov	r0, r5
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 800a7ee:	4b1b      	ldr	r3, [pc, #108]	; (800a85c <BSP_CAMERA_Init+0x444>)
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 800a7f0:	464a      	mov	r2, r9
      Camera_CompObj = &OV5640Obj;
 800a7f2:	6035      	str	r5, [r6, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 800a7f4:	4639      	mov	r1, r7
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 800a7f6:	4d1a      	ldr	r5, [pc, #104]	; (800a860 <BSP_CAMERA_Init+0x448>)
 800a7f8:	602b      	str	r3, [r5, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4798      	blx	r3
 800a7fe:	b938      	cbnz	r0, 800a810 <BSP_CAMERA_Init+0x3f8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if(Camera_Drv->GetCapabilities(Camera_CompObj, &Camera_Cap) != OV5640_OK)
 800a800:	682b      	ldr	r3, [r5, #0]
 800a802:	6830      	ldr	r0, [r6, #0]
 800a804:	68db      	ldr	r3, [r3, #12]
 800a806:	4917      	ldr	r1, [pc, #92]	; (800a864 <BSP_CAMERA_Init+0x44c>)
 800a808:	4798      	blx	r3
 800a80a:	2800      	cmp	r0, #0
 800a80c:	f43f af46 	beq.w	800a69c <BSP_CAMERA_Init+0x284>
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a810:	f06f 0006 	mvn.w	r0, #6
 800a814:	e77c      	b.n	800a710 <BSP_CAMERA_Init+0x2f8>
            if(HAL_DCMI_ConfigCROP(&hcamera_dcmi,           /* Crop in the middle of the VGA picture */
 800a816:	f240 130f 	movw	r3, #271	; 0x10f
 800a81a:	2268      	movs	r2, #104	; 0x68
 800a81c:	2150      	movs	r1, #80	; 0x50
 800a81e:	4812      	ldr	r0, [pc, #72]	; (800a868 <BSP_CAMERA_Init+0x450>)
 800a820:	9300      	str	r3, [sp, #0]
 800a822:	f240 33bf 	movw	r3, #959	; 0x3bf
 800a826:	f001 fa83 	bl	800bd30 <HAL_DCMI_ConfigCrop>
 800a82a:	2800      	cmp	r0, #0
 800a82c:	f47f af7d 	bne.w	800a72a <BSP_CAMERA_Init+0x312>
              if(HAL_DCMI_EnableCROP(&hcamera_dcmi) != HAL_OK)
 800a830:	480d      	ldr	r0, [pc, #52]	; (800a868 <BSP_CAMERA_Init+0x450>)
 800a832:	f001 fab3 	bl	800bd9c <HAL_DCMI_EnableCrop>
 800a836:	2800      	cmp	r0, #0
 800a838:	f47f af77 	bne.w	800a72a <BSP_CAMERA_Init+0x312>
 800a83c:	e736      	b.n	800a6ac <BSP_CAMERA_Init+0x294>
    ret = BSP_ERROR_WRONG_PARAM;
 800a83e:	f06f 0001 	mvn.w	r0, #1
}
 800a842:	4770      	bx	lr
 800a844:	08009b0d 	.word	0x08009b0d
 800a848:	20009ee8 	.word	0x20009ee8
 800a84c:	0800a289 	.word	0x0800a289
 800a850:	0800a24d 	.word	0x0800a24d
 800a854:	20009e7c 	.word	0x20009e7c
 800a858:	20009ea8 	.word	0x20009ea8
 800a85c:	20007688 	.word	0x20007688
 800a860:	20009ee0 	.word	0x20009ee0
 800a864:	20009e80 	.word	0x20009e80
 800a868:	20009f38 	.word	0x20009f38

0800a86c <BSP_CAMERA_Suspend>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 800a86c:	b948      	cbnz	r0, 800a882 <BSP_CAMERA_Suspend+0x16>
  else if(HAL_DCMI_Suspend(&hcamera_dcmi) != HAL_OK)
 800a86e:	4806      	ldr	r0, [pc, #24]	; (800a888 <BSP_CAMERA_Suspend+0x1c>)
{
 800a870:	b508      	push	{r3, lr}
  else if(HAL_DCMI_Suspend(&hcamera_dcmi) != HAL_OK)
 800a872:	f001 f99f 	bl	800bbb4 <HAL_DCMI_Suspend>
    return BSP_ERROR_PERIPH_FAILURE;
 800a876:	2800      	cmp	r0, #0
 800a878:	bf0c      	ite	eq
 800a87a:	2000      	moveq	r0, #0
 800a87c:	f06f 0003 	mvnne.w	r0, #3
}
 800a880:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a882:	f06f 0001 	mvn.w	r0, #1
}
 800a886:	4770      	bx	lr
 800a888:	20009f38 	.word	0x20009f38

0800a88c <BSP_CAMERA_Resume>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 800a88c:	b948      	cbnz	r0, 800a8a2 <BSP_CAMERA_Resume+0x16>
  else if(HAL_DCMI_Resume(&hcamera_dcmi) != HAL_OK)
 800a88e:	4806      	ldr	r0, [pc, #24]	; (800a8a8 <BSP_CAMERA_Resume+0x1c>)
{
 800a890:	b508      	push	{r3, lr}
  else if(HAL_DCMI_Resume(&hcamera_dcmi) != HAL_OK)
 800a892:	f001 f9d3 	bl	800bc3c <HAL_DCMI_Resume>
    ret = BSP_ERROR_NONE;
 800a896:	2800      	cmp	r0, #0
 800a898:	bf14      	ite	ne
 800a89a:	f06f 0003 	mvnne.w	r0, #3
 800a89e:	2000      	moveq	r0, #0
}
 800a8a0:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a8a2:	f06f 0001 	mvn.w	r0, #1
}
 800a8a6:	4770      	bx	lr
 800a8a8:	20009f38 	.word	0x20009f38

0800a8ac <BSP_CAMERA_SetBrightness>:
  if((Instance >= CAMERA_INSTANCES_NBR) || ((Brightness < CAMERA_BRIGHTNESS_MIN) && (Brightness > CAMERA_BRIGHTNESS_MAX)))
 800a8ac:	b988      	cbnz	r0, 800a8d2 <BSP_CAMERA_SetBrightness+0x26>
{
 800a8ae:	b538      	push	{r3, r4, r5, lr}
  else if(Camera_Cap.Brightness == 0U)
 800a8b0:	4b0c      	ldr	r3, [pc, #48]	; (800a8e4 <BSP_CAMERA_SetBrightness+0x38>)
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	b183      	cbz	r3, 800a8d8 <BSP_CAMERA_SetBrightness+0x2c>
  else if(Camera_Drv->SetBrightness(Camera_CompObj, Brightness) < 0)
 800a8b6:	4b0c      	ldr	r3, [pc, #48]	; (800a8e8 <BSP_CAMERA_SetBrightness+0x3c>)
 800a8b8:	4604      	mov	r4, r0
 800a8ba:	4a0c      	ldr	r2, [pc, #48]	; (800a8ec <BSP_CAMERA_SetBrightness+0x40>)
 800a8bc:	460d      	mov	r5, r1
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	6810      	ldr	r0, [r2, #0]
 800a8c2:	699b      	ldr	r3, [r3, #24]
 800a8c4:	4798      	blx	r3
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	db09      	blt.n	800a8de <BSP_CAMERA_SetBrightness+0x32>
    Camera_Ctx[Instance].Brightness = Brightness;
 800a8ca:	4b09      	ldr	r3, [pc, #36]	; (800a8f0 <BSP_CAMERA_SetBrightness+0x44>)
    ret = BSP_ERROR_NONE;
 800a8cc:	4620      	mov	r0, r4
    Camera_Ctx[Instance].Brightness = Brightness;
 800a8ce:	615d      	str	r5, [r3, #20]
}
 800a8d0:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a8d2:	f06f 0001 	mvn.w	r0, #1
}
 800a8d6:	4770      	bx	lr
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800a8d8:	f06f 000a 	mvn.w	r0, #10
}
 800a8dc:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a8de:	f06f 0004 	mvn.w	r0, #4
}
 800a8e2:	bd38      	pop	{r3, r4, r5, pc}
 800a8e4:	20009e80 	.word	0x20009e80
 800a8e8:	20009ee0 	.word	0x20009ee0
 800a8ec:	20009ea8 	.word	0x20009ea8
 800a8f0:	20009eac 	.word	0x20009eac

0800a8f4 <BSP_CAMERA_SetContrast>:
  if((Instance >= CAMERA_INSTANCES_NBR) || ((Contrast < CAMERA_CONTRAST_MIN) && (Contrast > CAMERA_CONTRAST_MAX)))
 800a8f4:	b988      	cbnz	r0, 800a91a <BSP_CAMERA_SetContrast+0x26>
{
 800a8f6:	b538      	push	{r3, r4, r5, lr}
  else if(Camera_Cap.Contrast == 0U)
 800a8f8:	4b0c      	ldr	r3, [pc, #48]	; (800a92c <BSP_CAMERA_SetContrast+0x38>)
 800a8fa:	695b      	ldr	r3, [r3, #20]
 800a8fc:	b183      	cbz	r3, 800a920 <BSP_CAMERA_SetContrast+0x2c>
  else if(Camera_Drv->SetContrast(Camera_CompObj, Contrast)  < 0)
 800a8fe:	4b0c      	ldr	r3, [pc, #48]	; (800a930 <BSP_CAMERA_SetContrast+0x3c>)
 800a900:	4604      	mov	r4, r0
 800a902:	4a0c      	ldr	r2, [pc, #48]	; (800a934 <BSP_CAMERA_SetContrast+0x40>)
 800a904:	460d      	mov	r5, r1
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	6810      	ldr	r0, [r2, #0]
 800a90a:	6a1b      	ldr	r3, [r3, #32]
 800a90c:	4798      	blx	r3
 800a90e:	2800      	cmp	r0, #0
 800a910:	db09      	blt.n	800a926 <BSP_CAMERA_SetContrast+0x32>
    Camera_Ctx[Instance].Contrast = Contrast;
 800a912:	4b09      	ldr	r3, [pc, #36]	; (800a938 <BSP_CAMERA_SetContrast+0x44>)
    ret = BSP_ERROR_NONE;
 800a914:	4620      	mov	r0, r4
    Camera_Ctx[Instance].Contrast = Contrast;
 800a916:	61dd      	str	r5, [r3, #28]
}
 800a918:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a91a:	f06f 0001 	mvn.w	r0, #1
}
 800a91e:	4770      	bx	lr
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800a920:	f06f 000a 	mvn.w	r0, #10
}
 800a924:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a926:	f06f 0004 	mvn.w	r0, #4
}
 800a92a:	bd38      	pop	{r3, r4, r5, pc}
 800a92c:	20009e80 	.word	0x20009e80
 800a930:	20009ee0 	.word	0x20009ee0
 800a934:	20009ea8 	.word	0x20009ea8
 800a938:	20009eac 	.word	0x20009eac

0800a93c <BSP_CAMERA_SetMirrorFlip>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 800a93c:	b988      	cbnz	r0, 800a962 <BSP_CAMERA_SetMirrorFlip+0x26>
{
 800a93e:	b538      	push	{r3, r4, r5, lr}
  else if(Camera_Cap.MirrorFlip == 0U)
 800a940:	4b0c      	ldr	r3, [pc, #48]	; (800a974 <BSP_CAMERA_SetMirrorFlip+0x38>)
 800a942:	69db      	ldr	r3, [r3, #28]
 800a944:	b183      	cbz	r3, 800a968 <BSP_CAMERA_SetMirrorFlip+0x2c>
  else if(Camera_Drv->MirrorFlipConfig(Camera_CompObj, MirrorFlip)  < 0)
 800a946:	4b0c      	ldr	r3, [pc, #48]	; (800a978 <BSP_CAMERA_SetMirrorFlip+0x3c>)
 800a948:	4604      	mov	r4, r0
 800a94a:	4a0c      	ldr	r2, [pc, #48]	; (800a97c <BSP_CAMERA_SetMirrorFlip+0x40>)
 800a94c:	460d      	mov	r5, r1
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	6810      	ldr	r0, [r2, #0]
 800a952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a954:	4798      	blx	r3
 800a956:	2800      	cmp	r0, #0
 800a958:	db09      	blt.n	800a96e <BSP_CAMERA_SetMirrorFlip+0x32>
    Camera_Ctx[Instance].MirrorFlip = MirrorFlip;
 800a95a:	4b09      	ldr	r3, [pc, #36]	; (800a980 <BSP_CAMERA_SetMirrorFlip+0x44>)
    ret = BSP_ERROR_NONE;
 800a95c:	4620      	mov	r0, r4
    Camera_Ctx[Instance].MirrorFlip = MirrorFlip;
 800a95e:	625d      	str	r5, [r3, #36]	; 0x24
}
 800a960:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a962:	f06f 0001 	mvn.w	r0, #1
}
 800a966:	4770      	bx	lr
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800a968:	f06f 000a 	mvn.w	r0, #10
}
 800a96c:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a96e:	f06f 0004 	mvn.w	r0, #4
}
 800a972:	bd38      	pop	{r3, r4, r5, pc}
 800a974:	20009e80 	.word	0x20009e80
 800a978:	20009ee0 	.word	0x20009ee0
 800a97c:	20009ea8 	.word	0x20009ea8
 800a980:	20009eac 	.word	0x20009eac
 800a984:	00000000 	.word	0x00000000

0800a988 <BSP_CAMERA_PwrDown>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 800a988:	bb20      	cbnz	r0, 800a9d4 <BSP_CAMERA_PwrDown+0x4c>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a98a:	4b19      	ldr	r3, [pc, #100]	; (800a9f0 <BSP_CAMERA_PwrDown+0x68>)
 800a98c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800a994:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800a9e0 <BSP_CAMERA_PwrDown+0x58>
{
 800a998:	b510      	push	{r4, lr}
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a99a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 800a99e:	b088      	sub	sp, #32
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a9a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a9a4:	4604      	mov	r4, r0
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800a9a6:	a902      	add	r1, sp, #8
 800a9a8:	4812      	ldr	r0, [pc, #72]	; (800a9f4 <BSP_CAMERA_PwrDown+0x6c>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a9aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800a9ae:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a9b2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800a9e8 <BSP_CAMERA_PwrDown+0x60>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a9b6:	9301      	str	r3, [sp, #4]
 800a9b8:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800a9ba:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800a9be:	f003 fc4f 	bl	800e260 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_14, GPIO_PIN_SET);
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a9c8:	480a      	ldr	r0, [pc, #40]	; (800a9f4 <BSP_CAMERA_PwrDown+0x6c>)
 800a9ca:	f003 fe59 	bl	800e680 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 800a9ce:	4620      	mov	r0, r4
}
 800a9d0:	b008      	add	sp, #32
 800a9d2:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a9d4:	f06f 0001 	mvn.w	r0, #1
}
 800a9d8:	4770      	bx	lr
 800a9da:	bf00      	nop
 800a9dc:	f3af 8000 	nop.w
 800a9e0:	00004000 	.word	0x00004000
 800a9e4:	00000001 	.word	0x00000001
 800a9e8:	00000000 	.word	0x00000000
 800a9ec:	00000002 	.word	0x00000002
 800a9f0:	58024400 	.word	0x58024400
 800a9f4:	58022400 	.word	0x58022400

0800a9f8 <BSP_CAMERA_IRQHandler>:
  HAL_DCMI_IRQHandler(&hcamera_dcmi);
 800a9f8:	4801      	ldr	r0, [pc, #4]	; (800aa00 <BSP_CAMERA_IRQHandler+0x8>)
 800a9fa:	f001 b94b 	b.w	800bc94 <HAL_DCMI_IRQHandler>
 800a9fe:	bf00      	nop
 800aa00:	20009f38 	.word	0x20009f38

0800aa04 <BSP_CAMERA_DMA_IRQHandler>:
  HAL_DMA_IRQHandler(hcamera_dcmi.DMA_Handle);
 800aa04:	4b01      	ldr	r3, [pc, #4]	; (800aa0c <BSP_CAMERA_DMA_IRQHandler+0x8>)
 800aa06:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800aa08:	f002 ba50 	b.w	800ceac <HAL_DMA_IRQHandler>
 800aa0c:	20009f38 	.word	0x20009f38

0800aa10 <BSP_CAMERA_LineEventCallback>:
}
 800aa10:	4770      	bx	lr
 800aa12:	bf00      	nop

0800aa14 <HAL_DCMI_LineEventCallback>:
  BSP_CAMERA_LineEventCallback(0);
 800aa14:	2000      	movs	r0, #0
{
 800aa16:	b508      	push	{r3, lr}
  BSP_CAMERA_LineEventCallback(0);
 800aa18:	f7ff fffa 	bl	800aa10 <BSP_CAMERA_LineEventCallback>
}
 800aa1c:	bd08      	pop	{r3, pc}
 800aa1e:	bf00      	nop

0800aa20 <HAL_DCMI_FrameEventCallback>:
  BSP_CAMERA_FrameEventCallback(0);
 800aa20:	2000      	movs	r0, #0
{
 800aa22:	b508      	push	{r3, lr}
  BSP_CAMERA_FrameEventCallback(0);
 800aa24:	f7f6 fe36 	bl	8001694 <BSP_CAMERA_FrameEventCallback>
}
 800aa28:	bd08      	pop	{r3, pc}
 800aa2a:	bf00      	nop

0800aa2c <HAL_DCMI_VsyncEventCallback>:
  BSP_CAMERA_VsyncEventCallback(0);
 800aa2c:	2000      	movs	r0, #0
{
 800aa2e:	b508      	push	{r3, lr}
  BSP_CAMERA_VsyncEventCallback(0);
 800aa30:	f7f6 fe4c 	bl	80016cc <BSP_CAMERA_VsyncEventCallback>
}
 800aa34:	bd08      	pop	{r3, pc}
 800aa36:	bf00      	nop

0800aa38 <HAL_DCMI_ErrorCallback>:
  BSP_CAMERA_ErrorCallback(0);
 800aa38:	2000      	movs	r0, #0
{
 800aa3a:	b508      	push	{r3, lr}
  BSP_CAMERA_ErrorCallback(0);
 800aa3c:	f7f6 fe7c 	bl	8001738 <BSP_CAMERA_ErrorCallback>
}
 800aa40:	bd08      	pop	{r3, pc}
 800aa42:	bf00      	nop

0800aa44 <BSP_LCD_SetActiveLayer>:
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800aa44:	b910      	cbnz	r0, 800aa4c <BSP_LCD_SetActiveLayer+0x8>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 800aa46:	4b03      	ldr	r3, [pc, #12]	; (800aa54 <BSP_LCD_SetActiveLayer+0x10>)
 800aa48:	6099      	str	r1, [r3, #8]
 800aa4a:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800aa4c:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 800aa50:	4770      	bx	lr
 800aa52:	bf00      	nop
 800aa54:	2000a004 	.word	0x2000a004

0800aa58 <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800aa58:	b918      	cbnz	r0, 800aa62 <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 800aa5a:	4b03      	ldr	r3, [pc, #12]	; (800aa68 <BSP_LCD_GetPixelFormat+0x10>)
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	600b      	str	r3, [r1, #0]
 800aa60:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800aa62:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 800aa66:	4770      	bx	lr
 800aa68:	2000a004 	.word	0x2000a004

0800aa6c <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800aa6c:	b948      	cbnz	r0, 800aa82 <BSP_LCD_GetXSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetXSize != NULL)
 800aa6e:	4b06      	ldr	r3, [pc, #24]	; (800aa88 <BSP_LCD_GetXSize+0x1c>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa74:	b11b      	cbz	r3, 800aa7e <BSP_LCD_GetXSize+0x12>
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 800aa76:	4b05      	ldr	r3, [pc, #20]	; (800aa8c <BSP_LCD_GetXSize+0x20>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	600b      	str	r3, [r1, #0]
 800aa7c:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 800aa7e:	4618      	mov	r0, r3
  }

  return ret;
}
 800aa80:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800aa82:	f06f 0001 	mvn.w	r0, #1
 800aa86:	4770      	bx	lr
 800aa88:	2000a020 	.word	0x2000a020
 800aa8c:	2000a004 	.word	0x2000a004

0800aa90 <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800aa90:	b948      	cbnz	r0, 800aaa6 <BSP_LCD_GetYSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetYSize != NULL)
 800aa92:	4b06      	ldr	r3, [pc, #24]	; (800aaac <BSP_LCD_GetYSize+0x1c>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa98:	b11b      	cbz	r3, 800aaa2 <BSP_LCD_GetYSize+0x12>
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 800aa9a:	4b05      	ldr	r3, [pc, #20]	; (800aab0 <BSP_LCD_GetYSize+0x20>)
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	600b      	str	r3, [r1, #0]
 800aaa0:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 800aaa2:	4618      	mov	r0, r3
  }

  return ret;
}
 800aaa4:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800aaa6:	f06f 0001 	mvn.w	r0, #1
 800aaaa:	4770      	bx	lr
 800aaac:	2000a020 	.word	0x2000a020
 800aab0:	2000a004 	.word	0x2000a004

0800aab4 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 800aab4:	b470      	push	{r4, r5, r6}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800aab6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800aaba:	4d12      	ldr	r5, [pc, #72]	; (800ab04 <BSP_LCD_ReadPixel+0x50>)
 800aabc:	f04f 0c34 	mov.w	ip, #52	; 0x34
 800aac0:	eb05 0480 	add.w	r4, r5, r0, lsl #2
 800aac4:	0080      	lsls	r0, r0, #2
 800aac6:	68a6      	ldr	r6, [r4, #8]
 800aac8:	4c0f      	ldr	r4, [pc, #60]	; (800ab08 <BSP_LCD_ReadPixel+0x54>)
 800aaca:	fb0c 4c06 	mla	ip, ip, r6, r4
 800aace:	f8dc 4048 	ldr.w	r4, [ip, #72]	; 0x48
 800aad2:	b954      	cbnz	r4, 800aaea <BSP_LCD_ReadPixel+0x36>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800aad4:	5828      	ldr	r0, [r5, r0]
 800aad6:	f8dc 405c 	ldr.w	r4, [ip, #92]	; 0x5c
 800aada:	fb00 1202 	mla	r2, r0, r2, r1
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
  }

  return BSP_ERROR_NONE;
}
 800aade:	2000      	movs	r0, #0
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800aae0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
}
 800aae4:	bc70      	pop	{r4, r5, r6}
 800aae6:	601a      	str	r2, [r3, #0]
 800aae8:	4770      	bx	lr
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800aaea:	582c      	ldr	r4, [r5, r0]
 800aaec:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 800aaf0:	fb04 1202 	mla	r2, r4, r2, r1
 800aaf4:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
}
 800aaf8:	2000      	movs	r0, #0
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800aafa:	b292      	uxth	r2, r2
}
 800aafc:	bc70      	pop	{r4, r5, r6}
 800aafe:	601a      	str	r2, [r3, #0]
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	2000a004 	.word	0x2000a004
 800ab08:	2000a0c8 	.word	0x2000a0c8

0800ab0c <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 800ab0c:	b470      	push	{r4, r5, r6}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ab0e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800ab12:	4d11      	ldr	r5, [pc, #68]	; (800ab58 <BSP_LCD_WritePixel+0x4c>)
 800ab14:	f04f 0c34 	mov.w	ip, #52	; 0x34
 800ab18:	eb05 0480 	add.w	r4, r5, r0, lsl #2
 800ab1c:	0080      	lsls	r0, r0, #2
 800ab1e:	68a6      	ldr	r6, [r4, #8]
 800ab20:	4c0e      	ldr	r4, [pc, #56]	; (800ab5c <BSP_LCD_WritePixel+0x50>)
 800ab22:	fb0c 4c06 	mla	ip, ip, r6, r4
 800ab26:	f8dc 4048 	ldr.w	r4, [ip, #72]	; 0x48
 800ab2a:	b94c      	cbnz	r4, 800ab40 <BSP_LCD_WritePixel+0x34>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800ab2c:	5828      	ldr	r0, [r5, r0]
 800ab2e:	f8dc 405c 	ldr.w	r4, [ip, #92]	; 0x5c
 800ab32:	fb00 1202 	mla	r2, r0, r2, r1
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
  }

  return BSP_ERROR_NONE;
}
 800ab36:	2000      	movs	r0, #0
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800ab38:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
}
 800ab3c:	bc70      	pop	{r4, r5, r6}
 800ab3e:	4770      	bx	lr
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800ab40:	582c      	ldr	r4, [r5, r0]
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 800ab48:	fb04 1202 	mla	r2, r4, r2, r1
}
 800ab4c:	bc70      	pop	{r4, r5, r6}
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800ab4e:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 800ab52:	2000      	movs	r0, #0
 800ab54:	4770      	bx	lr
 800ab56:	bf00      	nop
 800ab58:	2000a004 	.word	0x2000a004
 800ab5c:	2000a0c8 	.word	0x2000a0c8

0800ab60 <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 800ab60:	b510      	push	{r4, lr}
 800ab62:	460c      	mov	r4, r1
 800ab64:	b084      	sub	sp, #16
  int32_t ret = BSP_ERROR_NONE;

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 800ab66:	4601      	mov	r1, r0
 800ab68:	2006      	movs	r0, #6
 800ab6a:	9401      	str	r4, [sp, #4]
 800ab6c:	9000      	str	r0, [sp, #0]
 800ab6e:	9202      	str	r2, [sp, #8]
 800ab70:	4804      	ldr	r0, [pc, #16]	; (800ab84 <DSI_IO_Read+0x24>)
 800ab72:	f003 fac5 	bl	800e100 <HAL_DSI_Read>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800ab76:	2800      	cmp	r0, #0
  }

  return ret;
}
 800ab78:	bf14      	ite	ne
 800ab7a:	f06f 0007 	mvnne.w	r0, #7
 800ab7e:	2000      	moveq	r0, #0
 800ab80:	b004      	add	sp, #16
 800ab82:	bd10      	pop	{r4, pc}
 800ab84:	2000a0ac 	.word	0x2000a0ac

0800ab88 <BSP_LCD_DrawBitmap>:
{
 800ab88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800ab8c:	4e4d      	ldr	r6, [pc, #308]	; (800acc4 <BSP_LCD_DrawBitmap+0x13c>)
 800ab8e:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800ab92:	f893 a018 	ldrb.w	sl, [r3, #24]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800ab96:	f04f 0e34 	mov.w	lr, #52	; 0x34
 800ab9a:	eb06 0c84 	add.w	ip, r6, r4, lsl #2
 800ab9e:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800aba2:	7b1d      	ldrb	r5, [r3, #12]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800aba4:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800aba8:	fb04 1202 	mla	r2, r4, r2, r1
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800abac:	7d1c      	ldrb	r4, [r3, #20]
 800abae:	7cd9      	ldrb	r1, [r3, #19]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800abb0:	042d      	lsls	r5, r5, #16
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800abb2:	0424      	lsls	r4, r4, #16
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800abb4:	7adf      	ldrb	r7, [r3, #11]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800abb6:	f893 901c 	ldrb.w	r9, [r3, #28]
{
 800abba:	b085      	sub	sp, #20
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800abbc:	eb04 2401 	add.w	r4, r4, r1, lsl #8
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800abc0:	7dd9      	ldrb	r1, [r3, #23]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800abc2:	eb05 2507 	add.w	r5, r5, r7, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800abc6:	4f40      	ldr	r7, [pc, #256]	; (800acc8 <BSP_LCD_DrawBitmap+0x140>)
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800abc8:	eb0a 2a01 	add.w	sl, sl, r1, lsl #8
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800abcc:	7f59      	ldrb	r1, [r3, #29]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800abce:	f8dc 8010 	ldr.w	r8, [ip, #16]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800abd2:	eb09 2901 	add.w	r9, r9, r1, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800abd6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800abda:	fb0e 7701 	mla	r7, lr, r1, r7
 800abde:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800abe0:	fb08 1802 	mla	r8, r8, r2, r1
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800abe4:	7c99      	ldrb	r1, [r3, #18]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800abe6:	7a9a      	ldrb	r2, [r3, #10]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800abe8:	4421      	add	r1, r4
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800abea:	7d9c      	ldrb	r4, [r3, #22]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800abec:	442a      	add	r2, r5
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800abee:	44a2      	add	sl, r4
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800abf0:	7b5c      	ldrb	r4, [r3, #13]
 800abf2:	eb02 6204 	add.w	r2, r2, r4, lsl #24
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800abf6:	7d5c      	ldrb	r4, [r3, #21]
 800abf8:	eb01 6104 	add.w	r1, r1, r4, lsl #24
  if ((bit_pixel/8U) == 4U)
 800abfc:	f1a9 0420 	sub.w	r4, r9, #32
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800ac00:	9103      	str	r1, [sp, #12]
  if ((bit_pixel/8U) == 4U)
 800ac02:	2c07      	cmp	r4, #7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800ac04:	7e59      	ldrb	r1, [r3, #25]
 800ac06:	eb0a 6a01 	add.w	sl, sl, r1, lsl #24
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800ac0a:	ea4f 01c0 	mov.w	r1, r0, lsl #3
  if ((bit_pixel/8U) == 4U)
 800ac0e:	d956      	bls.n	800acbe <BSP_LCD_DrawBitmap+0x136>
  else if ((bit_pixel/8U) == 2U)
 800ac10:	f1a9 0410 	sub.w	r4, r9, #16
    input_color_mode = DMA2D_INPUT_RGB888;
 800ac14:	2c08      	cmp	r4, #8
 800ac16:	bf34      	ite	cc
 800ac18:	f04f 0b02 	movcc.w	fp, #2
 800ac1c:	f04f 0b01 	movcs.w	fp, #1
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 800ac20:	9c03      	ldr	r4, [sp, #12]
 800ac22:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 800ac26:	fb04 f909 	mul.w	r9, r4, r9
 800ac2a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800ac2e:	fb09 2204 	mla	r2, r9, r4, r2
 800ac32:	189d      	adds	r5, r3, r2
  for(index=0; index < height; index++)
 800ac34:	f1ba 0f00 	cmp.w	sl, #0
 800ac38:	d03d      	beq.n	800acb6 <BSP_LCD_DrawBitmap+0x12e>
  switch(Lcd_Ctx[Instance].PixelFormat)
 800ac3a:	1a09      	subs	r1, r1, r0
    pbmp -= width*(bit_pixel/8U);
 800ac3c:	f1c9 0900 	rsb	r9, r9, #0
  for(index=0; index < height; index++)
 800ac40:	2700      	movs	r7, #0
 800ac42:	4c22      	ldr	r4, [pc, #136]	; (800accc <BSP_LCD_DrawBitmap+0x144>)
  switch(Lcd_Ctx[Instance].PixelFormat)
 800ac44:	eb06 0681 	add.w	r6, r6, r1, lsl #2
 800ac48:	e006      	b.n	800ac58 <BSP_LCD_DrawBitmap+0xd0>
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 800ac4a:	6833      	ldr	r3, [r6, #0]
  for(index=0; index < height; index++)
 800ac4c:	45ba      	cmp	sl, r7
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 800ac4e:	6932      	ldr	r2, [r6, #16]
    pbmp -= width*(bit_pixel/8U);
 800ac50:	444d      	add	r5, r9
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 800ac52:	fb02 8803 	mla	r8, r2, r3, r8
  for(index=0; index < height; index++)
 800ac56:	d02e      	beq.n	800acb6 <BSP_LCD_DrawBitmap+0x12e>
  switch(Lcd_Ctx[Instance].PixelFormat)
 800ac58:	68f3      	ldr	r3, [r6, #12]
  hlcd_dma2d.Init.OutputOffset = 0;
 800ac5a:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 800ac5c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 800ac60:	21ff      	movs	r1, #255	; 0xff
  switch(Lcd_Ctx[Instance].PixelFormat)
 800ac62:	f1a3 0302 	sub.w	r3, r3, #2
  for(index=0; index < height; index++)
 800ac66:	3701      	adds	r7, #1
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 800ac68:	6060      	str	r0, [r4, #4]
  switch(Lcd_Ctx[Instance].PixelFormat)
 800ac6a:	fab3 f383 	clz	r3, r3
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800ac6e:	4817      	ldr	r0, [pc, #92]	; (800accc <BSP_LCD_DrawBitmap+0x144>)
  hlcd_dma2d.Init.OutputOffset = 0;
 800ac70:	60e2      	str	r2, [r4, #12]
  switch(Lcd_Ctx[Instance].PixelFormat)
 800ac72:	095b      	lsrs	r3, r3, #5
 800ac74:	005b      	lsls	r3, r3, #1
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800ac76:	60a3      	str	r3, [r4, #8]
  hlcd_dma2d.Instance = DMA2D;
 800ac78:	4b15      	ldr	r3, [pc, #84]	; (800acd0 <BSP_LCD_DrawBitmap+0x148>)
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 800ac7a:	e9c4 2113 	strd	r2, r1, [r4, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 800ac7e:	e9c4 2b11 	strd	r2, fp, [r4, #68]	; 0x44
  hlcd_dma2d.Instance = DMA2D;
 800ac82:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800ac84:	f002 fc62 	bl	800d54c <HAL_DMA2D_Init>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	d1de      	bne.n	800ac4a <BSP_LCD_DrawBitmap+0xc2>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800ac8c:	2101      	movs	r1, #1
 800ac8e:	480f      	ldr	r0, [pc, #60]	; (800accc <BSP_LCD_DrawBitmap+0x144>)
 800ac90:	f002 feb4 	bl	800d9fc <HAL_DMA2D_ConfigLayer>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	d1d8      	bne.n	800ac4a <BSP_LCD_DrawBitmap+0xc2>
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 800ac98:	2301      	movs	r3, #1
 800ac9a:	4642      	mov	r2, r8
 800ac9c:	4629      	mov	r1, r5
 800ac9e:	480b      	ldr	r0, [pc, #44]	; (800accc <BSP_LCD_DrawBitmap+0x144>)
 800aca0:	9300      	str	r3, [sp, #0]
 800aca2:	9b03      	ldr	r3, [sp, #12]
 800aca4:	f002 fd1a 	bl	800d6dc <HAL_DMA2D_Start>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	d1ce      	bne.n	800ac4a <BSP_LCD_DrawBitmap+0xc2>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 800acac:	2132      	movs	r1, #50	; 0x32
 800acae:	4807      	ldr	r0, [pc, #28]	; (800accc <BSP_LCD_DrawBitmap+0x144>)
 800acb0:	f002 fd70 	bl	800d794 <HAL_DMA2D_PollForTransfer>
 800acb4:	e7c9      	b.n	800ac4a <BSP_LCD_DrawBitmap+0xc2>
}
 800acb6:	2000      	movs	r0, #0
 800acb8:	b005      	add	sp, #20
 800acba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
 800acbe:	f04f 0b00 	mov.w	fp, #0
 800acc2:	e7ad      	b.n	800ac20 <BSP_LCD_DrawBitmap+0x98>
 800acc4:	2000a004 	.word	0x2000a004
 800acc8:	2000a0c8 	.word	0x2000a0c8
 800accc:	2000a044 	.word	0x2000a044
 800acd0:	52001000 	.word	0x52001000

0800acd4 <BSP_LCD_DrawVLine>:
{
 800acd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acd8:	4616      	mov	r6, r2
 800acda:	461d      	mov	r5, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800acdc:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 800ace0:	4b35      	ldr	r3, [pc, #212]	; (800adb8 <BSP_LCD_DrawVLine+0xe4>)
{
 800ace2:	b085      	sub	sp, #20
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800ace4:	f04f 0a34 	mov.w	sl, #52	; 0x34
 800ace8:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 800acec:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
{
 800acf0:	9103      	str	r1, [sp, #12]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800acf2:	00c2      	lsls	r2, r0, #3
 800acf4:	4931      	ldr	r1, [pc, #196]	; (800adbc <BSP_LCD_DrawVLine+0xe8>)
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800acf6:	eb06 0e05 	add.w	lr, r6, r5
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800acfa:	f8dc 7008 	ldr.w	r7, [ip, #8]
  switch(Lcd_Ctx[Instance].PixelFormat)
 800acfe:	1a12      	subs	r2, r2, r0
{
 800ad00:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800ad02:	fb0a 1107 	mla	r1, sl, r7, r1
  switch(Lcd_Ctx[Instance].PixelFormat)
 800ad06:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800ad0a:	f8dc a010 	ldr.w	sl, [ip, #16]
 800ad0e:	f8d1 905c 	ldr.w	r9, [r1, #92]	; 0x5c
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800ad12:	f8dc 1004 	ldr.w	r1, [ip, #4]
  switch(Lcd_Ctx[Instance].PixelFormat)
 800ad16:	68da      	ldr	r2, [r3, #12]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800ad18:	458e      	cmp	lr, r1
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 800ad1a:	bf88      	it	hi
 800ad1c:	1b8d      	subhi	r5, r1, r6
  switch(Lcd_Ctx[Instance].PixelFormat)
 800ad1e:	2a02      	cmp	r2, #2
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 800ad20:	f108 31ff 	add.w	r1, r8, #4294967295
  switch(Lcd_Ctx[Instance].PixelFormat)
 800ad24:	d011      	beq.n	800ad4a <BSP_LCD_DrawVLine+0x76>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800ad26:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800ad28:	f8df b098 	ldr.w	fp, [pc, #152]	; 800adc4 <BSP_LCD_DrawVLine+0xf0>
  hlcd_dma2d.Instance = DMA2D;
 800ad2c:	4b24      	ldr	r3, [pc, #144]	; (800adc0 <BSP_LCD_DrawVLine+0xec>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800ad2e:	4658      	mov	r0, fp
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800ad30:	e9cb 2102 	strd	r2, r1, [fp, #8]
  hlcd_dma2d.Instance = DMA2D;
 800ad34:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800ad38:	e9cb 3200 	strd	r3, r2, [fp]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800ad3c:	f002 fc06 	bl	800d54c <HAL_DMA2D_Init>
 800ad40:	b310      	cbz	r0, 800ad88 <BSP_LCD_DrawVLine+0xb4>
}
 800ad42:	2000      	movs	r0, #0
 800ad44:	b005      	add	sp, #20
 800ad46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 800ad4a:	f3c4 1345 	ubfx	r3, r4, #5, #6
 800ad4e:	f3c4 20c4 	ubfx	r0, r4, #11, #5
 800ad52:	f004 041f 	and.w	r4, r4, #31
 800ad56:	eb03 1cc3 	add.w	ip, r3, r3, lsl #7
 800ad5a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 800ad5e:	eb03 034c 	add.w	r3, r3, ip, lsl #1
 800ad62:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 800ad66:	3321      	adds	r3, #33	; 0x21
 800ad68:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800ad6c:	3017      	adds	r0, #23
 800ad6e:	099b      	lsrs	r3, r3, #6
 800ad70:	ebc4 1444 	rsb	r4, r4, r4, lsl #5
 800ad74:	0980      	lsrs	r0, r0, #6
 800ad76:	021b      	lsls	r3, r3, #8
 800ad78:	3417      	adds	r4, #23
 800ad7a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ad7e:	ea43 1394 	orr.w	r3, r3, r4, lsr #6
 800ad82:	f043 447f 	orr.w	r4, r3, #4278190080	; 0xff000000
    break;
 800ad86:	e7cf      	b.n	800ad28 <BSP_LCD_DrawVLine+0x54>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800ad88:	2101      	movs	r1, #1
 800ad8a:	4658      	mov	r0, fp
 800ad8c:	f002 fe36 	bl	800d9fc <HAL_DMA2D_ConfigLayer>
 800ad90:	2800      	cmp	r0, #0
 800ad92:	d1d6      	bne.n	800ad42 <BSP_LCD_DrawVLine+0x6e>
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800ad94:	9b03      	ldr	r3, [sp, #12]
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800ad96:	4621      	mov	r1, r4
 800ad98:	4658      	mov	r0, fp
 800ad9a:	9500      	str	r5, [sp, #0]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800ad9c:	fb06 3208 	mla	r2, r6, r8, r3
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800ada0:	2301      	movs	r3, #1
 800ada2:	fb0a 9202 	mla	r2, sl, r2, r9
 800ada6:	f002 fc99 	bl	800d6dc <HAL_DMA2D_Start>
 800adaa:	2800      	cmp	r0, #0
 800adac:	d1c9      	bne.n	800ad42 <BSP_LCD_DrawVLine+0x6e>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 800adae:	2119      	movs	r1, #25
 800adb0:	4658      	mov	r0, fp
 800adb2:	f002 fcef 	bl	800d794 <HAL_DMA2D_PollForTransfer>
 800adb6:	e7c4      	b.n	800ad42 <BSP_LCD_DrawVLine+0x6e>
 800adb8:	2000a004 	.word	0x2000a004
 800adbc:	2000a0c8 	.word	0x2000a0c8
 800adc0:	52001000 	.word	0x52001000
 800adc4:	2000a044 	.word	0x2000a044

0800adc8 <DSI_IO_Write>:
  if(Size <= 1U)
 800adc8:	2b01      	cmp	r3, #1
{
 800adca:	b530      	push	{r4, r5, lr}
 800adcc:	460c      	mov	r4, r1
 800adce:	b083      	sub	sp, #12
 800add0:	4601      	mov	r1, r0
 800add2:	4615      	mov	r5, r2
  if(Size <= 1U)
 800add4:	d909      	bls.n	800adea <DSI_IO_Write+0x22>
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 800add6:	2239      	movs	r2, #57	; 0x39
 800add8:	480a      	ldr	r0, [pc, #40]	; (800ae04 <DSI_IO_Write+0x3c>)
 800adda:	e9cd 4500 	strd	r4, r5, [sp]
 800adde:	f003 f925 	bl	800e02c <HAL_DSI_LongWrite>
 800ade2:	b958      	cbnz	r0, 800adfc <DSI_IO_Write+0x34>
  int32_t ret = BSP_ERROR_NONE;
 800ade4:	2000      	movs	r0, #0
}
 800ade6:	b003      	add	sp, #12
 800ade8:	bd30      	pop	{r4, r5, pc}
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 800adea:	5cd5      	ldrb	r5, [r2, r3]
 800adec:	4623      	mov	r3, r4
 800adee:	2215      	movs	r2, #21
 800adf0:	4804      	ldr	r0, [pc, #16]	; (800ae04 <DSI_IO_Write+0x3c>)
 800adf2:	9500      	str	r5, [sp, #0]
 800adf4:	f003 f8ee 	bl	800dfd4 <HAL_DSI_ShortWrite>
 800adf8:	2800      	cmp	r0, #0
 800adfa:	d0f3      	beq.n	800ade4 <DSI_IO_Write+0x1c>
      ret = BSP_ERROR_BUS_FAILURE;
 800adfc:	f06f 0007 	mvn.w	r0, #7
 800ae00:	e7f1      	b.n	800ade6 <DSI_IO_Write+0x1e>
 800ae02:	bf00      	nop
 800ae04:	2000a0ac 	.word	0x2000a0ac

0800ae08 <BSP_LCD_FillRGBRect>:
{
 800ae08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae0c:	b083      	sub	sp, #12
 800ae0e:	e9dd 460c 	ldrd	r4, r6, [sp, #48]	; 0x30
  for(i = 0; i < Height; i++)
 800ae12:	b36e      	cbz	r6, 800ae70 <BSP_LCD_FillRGBRect+0x68>
 800ae14:	b364      	cbz	r4, 800ae70 <BSP_LCD_FillRGBRect+0x68>
 800ae16:	4d2e      	ldr	r5, [pc, #184]	; (800aed0 <BSP_LCD_FillRGBRect+0xc8>)
 800ae18:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ae1c:	271c      	movs	r7, #28
 800ae1e:	4416      	add	r6, r2
 800ae20:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 800ae24:	f04f 0e34 	mov.w	lr, #52	; 0x34
 800ae28:	fb07 5b00 	mla	fp, r7, r0, r5
 800ae2c:	4d29      	ldr	r5, [pc, #164]	; (800aed4 <BSP_LCD_FillRGBRect+0xcc>)
 800ae2e:	9601      	str	r6, [sp, #4]
    for(j = 0; j < Width; j++)
 800ae30:	f04f 0800 	mov.w	r8, #0
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ae34:	f8dc 6008 	ldr.w	r6, [ip, #8]
      BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 800ae38:	eb01 0008 	add.w	r0, r1, r8
 800ae3c:	f8d3 9000 	ldr.w	r9, [r3]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ae40:	fb0e 5a06 	mla	sl, lr, r6, r5
 800ae44:	f8da 6048 	ldr.w	r6, [sl, #72]	; 0x48
 800ae48:	b9b6      	cbnz	r6, 800ae78 <BSP_LCD_FillRGBRect+0x70>
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800ae4a:	f8dc 7000 	ldr.w	r7, [ip]
    for(j = 0; j < Width; j++)
 800ae4e:	f108 0801 	add.w	r8, r8, #1
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800ae52:	f8da 605c 	ldr.w	r6, [sl, #92]	; 0x5c
 800ae56:	fb07 0702 	mla	r7, r7, r2, r0
    for(j = 0; j < Width; j++)
 800ae5a:	4544      	cmp	r4, r8
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800ae5c:	f846 9027 	str.w	r9, [r6, r7, lsl #2]
      pData += Lcd_Ctx[Instance].BppFactor;
 800ae60:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800ae64:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 800ae66:	d1e5      	bne.n	800ae34 <BSP_LCD_FillRGBRect+0x2c>
  for(i = 0; i < Height; i++)
 800ae68:	3201      	adds	r2, #1
 800ae6a:	9801      	ldr	r0, [sp, #4]
 800ae6c:	4290      	cmp	r0, r2
 800ae6e:	d1df      	bne.n	800ae30 <BSP_LCD_FillRGBRect+0x28>
}
 800ae70:	2000      	movs	r0, #0
 800ae72:	b003      	add	sp, #12
 800ae74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800ae78:	f8dc 6000 	ldr.w	r6, [ip]
 800ae7c:	fa1f f989 	uxth.w	r9, r9
 800ae80:	f8da 705c 	ldr.w	r7, [sl, #92]	; 0x5c
    for(j = 0; j < Width; j++)
 800ae84:	f108 0801 	add.w	r8, r8, #1
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800ae88:	fb06 0002 	mla	r0, r6, r2, r0
    for(j = 0; j < Width; j++)
 800ae8c:	4544      	cmp	r4, r8
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800ae8e:	f827 9010 	strh.w	r9, [r7, r0, lsl #1]
      pData += Lcd_Ctx[Instance].BppFactor;
 800ae92:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800ae96:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 800ae98:	d0e6      	beq.n	800ae68 <BSP_LCD_FillRGBRect+0x60>
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800ae9a:	f8db 0008 	ldr.w	r0, [fp, #8]
 800ae9e:	f8dc 6010 	ldr.w	r6, [ip, #16]
 800aea2:	fb0e 5000 	mla	r0, lr, r0, r5
 800aea6:	f8d0 a05c 	ldr.w	sl, [r0, #92]	; 0x5c
 800aeaa:	f8db 0000 	ldr.w	r0, [fp]
 800aeae:	fb02 f000 	mul.w	r0, r2, r0
 800aeb2:	f8d3 9000 	ldr.w	r9, [r3]
 800aeb6:	eb08 0701 	add.w	r7, r8, r1
    for(j = 0; j < Width; j++)
 800aeba:	f108 0801 	add.w	r8, r8, #1
      pData += Lcd_Ctx[Instance].BppFactor;
 800aebe:	4433      	add	r3, r6
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800aec0:	fa1f f989 	uxth.w	r9, r9
 800aec4:	4407      	add	r7, r0
    for(j = 0; j < Width; j++)
 800aec6:	4544      	cmp	r4, r8
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800aec8:	f82a 9017 	strh.w	r9, [sl, r7, lsl #1]
    for(j = 0; j < Width; j++)
 800aecc:	d8f1      	bhi.n	800aeb2 <BSP_LCD_FillRGBRect+0xaa>
 800aece:	e7cb      	b.n	800ae68 <BSP_LCD_FillRGBRect+0x60>
 800aed0:	2000a004 	.word	0x2000a004
 800aed4:	2000a0c8 	.word	0x2000a0c8

0800aed8 <BSP_LCD_FillRect>:
{
 800aed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800aedc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
{
 800aee0:	460f      	mov	r7, r1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800aee2:	492f      	ldr	r1, [pc, #188]	; (800afa0 <BSP_LCD_FillRect+0xc8>)
{
 800aee4:	461e      	mov	r6, r3
 800aee6:	4690      	mov	r8, r2
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800aee8:	2434      	movs	r4, #52	; 0x34
 800aeea:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 800aeee:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800aef2:	4a2c      	ldr	r2, [pc, #176]	; (800afa4 <BSP_LCD_FillRect+0xcc>)
{
 800aef4:	b083      	sub	sp, #12
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800aef6:	6899      	ldr	r1, [r3, #8]
{
 800aef8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800aefa:	fb04 2201 	mla	r2, r4, r1, r2
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 800aefe:	eba9 0106 	sub.w	r1, r9, r6
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800af02:	f8d2 a05c 	ldr.w	sl, [r2, #92]	; 0x5c
 800af06:	e9d3 2b03 	ldrd	r2, fp, [r3, #12]
  switch(Lcd_Ctx[Instance].PixelFormat)
 800af0a:	2a02      	cmp	r2, #2
 800af0c:	d010      	beq.n	800af30 <BSP_LCD_FillRect+0x58>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800af0e:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800af10:	4c25      	ldr	r4, [pc, #148]	; (800afa8 <BSP_LCD_FillRect+0xd0>)
  hlcd_dma2d.Instance = DMA2D;
 800af12:	4b26      	ldr	r3, [pc, #152]	; (800afac <BSP_LCD_FillRect+0xd4>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800af14:	4620      	mov	r0, r4
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800af16:	e9c4 2102 	strd	r2, r1, [r4, #8]
  hlcd_dma2d.Instance = DMA2D;
 800af1a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800af1e:	e9c4 3200 	strd	r3, r2, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800af22:	f002 fb13 	bl	800d54c <HAL_DMA2D_Init>
 800af26:	b310      	cbz	r0, 800af6e <BSP_LCD_FillRect+0x96>
}
 800af28:	2000      	movs	r0, #0
 800af2a:	b003      	add	sp, #12
 800af2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 800af30:	f3c5 1345 	ubfx	r3, r5, #5, #6
 800af34:	f3c5 20c4 	ubfx	r0, r5, #11, #5
 800af38:	f005 051f 	and.w	r5, r5, #31
 800af3c:	eb03 14c3 	add.w	r4, r3, r3, lsl #7
 800af40:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 800af44:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 800af48:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 800af4c:	3321      	adds	r3, #33	; 0x21
 800af4e:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 800af52:	3017      	adds	r0, #23
 800af54:	099b      	lsrs	r3, r3, #6
 800af56:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800af5a:	0980      	lsrs	r0, r0, #6
 800af5c:	021b      	lsls	r3, r3, #8
 800af5e:	3517      	adds	r5, #23
 800af60:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800af64:	ea43 1395 	orr.w	r3, r3, r5, lsr #6
 800af68:	f043 457f 	orr.w	r5, r3, #4278190080	; 0xff000000
    break;
 800af6c:	e7d0      	b.n	800af10 <BSP_LCD_FillRect+0x38>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800af6e:	2101      	movs	r1, #1
 800af70:	4620      	mov	r0, r4
 800af72:	f002 fd43 	bl	800d9fc <HAL_DMA2D_ConfigLayer>
 800af76:	2800      	cmp	r0, #0
 800af78:	d1d6      	bne.n	800af28 <BSP_LCD_FillRect+0x50>
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800af7a:	fb08 7209 	mla	r2, r8, r9, r7
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800af7e:	4629      	mov	r1, r5
 800af80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af82:	4633      	mov	r3, r6
 800af84:	fb0b a202 	mla	r2, fp, r2, sl
 800af88:	4620      	mov	r0, r4
 800af8a:	9500      	str	r5, [sp, #0]
 800af8c:	f002 fba6 	bl	800d6dc <HAL_DMA2D_Start>
 800af90:	2800      	cmp	r0, #0
 800af92:	d1c9      	bne.n	800af28 <BSP_LCD_FillRect+0x50>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 800af94:	2119      	movs	r1, #25
 800af96:	4620      	mov	r0, r4
 800af98:	f002 fbfc 	bl	800d794 <HAL_DMA2D_PollForTransfer>
 800af9c:	e7c4      	b.n	800af28 <BSP_LCD_FillRect+0x50>
 800af9e:	bf00      	nop
 800afa0:	2000a004 	.word	0x2000a004
 800afa4:	2000a0c8 	.word	0x2000a0c8
 800afa8:	2000a044 	.word	0x2000a044
 800afac:	52001000 	.word	0x52001000

0800afb0 <BSP_LCD_DrawHLine>:
{
 800afb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb4:	469b      	mov	fp, r3
 800afb6:	4617      	mov	r7, r2
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800afb8:	4b35      	ldr	r3, [pc, #212]	; (800b090 <BSP_LCD_DrawHLine+0xe0>)
 800afba:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
{
 800afbe:	460e      	mov	r6, r1
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800afc0:	f04f 0934 	mov.w	r9, #52	; 0x34
 800afc4:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 800afc8:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 800afcc:	00c2      	lsls	r2, r0, #3
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 800afce:	eb06 0c0b 	add.w	ip, r6, fp
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800afd2:	4930      	ldr	r1, [pc, #192]	; (800b094 <BSP_LCD_DrawHLine+0xe4>)
{
 800afd4:	b083      	sub	sp, #12
  switch(Lcd_Ctx[Instance].PixelFormat)
 800afd6:	1a12      	subs	r2, r2, r0
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 800afd8:	45e0      	cmp	r8, ip
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800afda:	f8de 4008 	ldr.w	r4, [lr, #8]
  switch(Lcd_Ctx[Instance].PixelFormat)
 800afde:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 800afe2:	bf38      	it	cc
 800afe4:	eba8 0b06 	subcc.w	fp, r8, r6
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800afe8:	fb09 1104 	mla	r1, r9, r4, r1
{
 800afec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  switch(Lcd_Ctx[Instance].PixelFormat)
 800afee:	68da      	ldr	r2, [r3, #12]
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800aff0:	f8de a010 	ldr.w	sl, [lr, #16]
  switch(Lcd_Ctx[Instance].PixelFormat)
 800aff4:	2a02      	cmp	r2, #2
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800aff6:	f8d1 905c 	ldr.w	r9, [r1, #92]	; 0x5c
  switch(Lcd_Ctx[Instance].PixelFormat)
 800affa:	d011      	beq.n	800b020 <BSP_LCD_DrawHLine+0x70>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800affc:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800affe:	4c26      	ldr	r4, [pc, #152]	; (800b098 <BSP_LCD_DrawHLine+0xe8>)
 800b000:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800b004:	6063      	str	r3, [r4, #4]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800b006:	2300      	movs	r3, #0
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800b008:	4620      	mov	r0, r4
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800b00a:	60a2      	str	r2, [r4, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800b00c:	60e3      	str	r3, [r4, #12]
  hlcd_dma2d.Instance = DMA2D;
 800b00e:	4b23      	ldr	r3, [pc, #140]	; (800b09c <BSP_LCD_DrawHLine+0xec>)
 800b010:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800b012:	f002 fa9b 	bl	800d54c <HAL_DMA2D_Init>
 800b016:	b310      	cbz	r0, 800b05e <BSP_LCD_DrawHLine+0xae>
}
 800b018:	2000      	movs	r0, #0
 800b01a:	b003      	add	sp, #12
 800b01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 800b020:	f3c5 1345 	ubfx	r3, r5, #5, #6
 800b024:	f3c5 21c4 	ubfx	r1, r5, #11, #5
 800b028:	f005 051f 	and.w	r5, r5, #31
 800b02c:	eb03 10c3 	add.w	r0, r3, r3, lsl #7
 800b030:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 800b034:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800b038:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 800b03c:	3321      	adds	r3, #33	; 0x21
 800b03e:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 800b042:	3117      	adds	r1, #23
 800b044:	099b      	lsrs	r3, r3, #6
 800b046:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800b04a:	0989      	lsrs	r1, r1, #6
 800b04c:	021b      	lsls	r3, r3, #8
 800b04e:	3517      	adds	r5, #23
 800b050:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b054:	ea43 1395 	orr.w	r3, r3, r5, lsr #6
 800b058:	f043 457f 	orr.w	r5, r3, #4278190080	; 0xff000000
    break;
 800b05c:	e7cf      	b.n	800affe <BSP_LCD_DrawHLine+0x4e>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800b05e:	2101      	movs	r1, #1
 800b060:	4620      	mov	r0, r4
 800b062:	f002 fccb 	bl	800d9fc <HAL_DMA2D_ConfigLayer>
 800b066:	2800      	cmp	r0, #0
 800b068:	d1d6      	bne.n	800b018 <BSP_LCD_DrawHLine+0x68>
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800b06a:	fb07 6208 	mla	r2, r7, r8, r6
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800b06e:	4629      	mov	r1, r5
 800b070:	2501      	movs	r5, #1
 800b072:	465b      	mov	r3, fp
 800b074:	fb0a 9202 	mla	r2, sl, r2, r9
 800b078:	4620      	mov	r0, r4
 800b07a:	9500      	str	r5, [sp, #0]
 800b07c:	f002 fb2e 	bl	800d6dc <HAL_DMA2D_Start>
 800b080:	2800      	cmp	r0, #0
 800b082:	d1c9      	bne.n	800b018 <BSP_LCD_DrawHLine+0x68>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 800b084:	2119      	movs	r1, #25
 800b086:	4620      	mov	r0, r4
 800b088:	f002 fb84 	bl	800d794 <HAL_DMA2D_PollForTransfer>
 800b08c:	e7c4      	b.n	800b018 <BSP_LCD_DrawHLine+0x68>
 800b08e:	bf00      	nop
 800b090:	2000a004 	.word	0x2000a004
 800b094:	2000a0c8 	.word	0x2000a0c8
 800b098:	2000a044 	.word	0x2000a044
 800b09c:	52001000 	.word	0x52001000

0800b0a0 <MX_DSIHOST_DSI_Init>:
{
 800b0a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0a4:	4699      	mov	r9, r3
 800b0a6:	b09e      	sub	sp, #120	; 0x78
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800b0a8:	2300      	movs	r3, #0
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800b0aa:	f04f 0a04 	mov.w	sl, #4
 800b0ae:	2601      	movs	r6, #1
{
 800b0b0:	4690      	mov	r8, r2
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800b0b2:	6043      	str	r3, [r0, #4]
  PLLInit.PLLNDIV = 100;
 800b0b4:	2264      	movs	r2, #100	; 0x64
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 800b0b6:	9302      	str	r3, [sp, #8]
  hdsi->Instance = DSI;
 800b0b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
{
 800b0bc:	460f      	mov	r7, r1
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 800b0be:	4669      	mov	r1, sp
  hdsi->Instance = DSI;
 800b0c0:	6003      	str	r3, [r0, #0]
  PLLInit.PLLNDIV = 100;
 800b0c2:	2305      	movs	r3, #5
{
 800b0c4:	4604      	mov	r4, r0
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800b0c6:	e9c0 a602 	strd	sl, r6, [r0, #8]
  PLLInit.PLLNDIV = 100;
 800b0ca:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 800b0ce:	f002 fd07 	bl	800dae0 <HAL_DSI_Init>
 800b0d2:	b118      	cbz	r0, 800b0dc <MX_DSIHOST_DSI_Init+0x3c>
    return HAL_ERROR;
 800b0d4:	4630      	mov	r0, r6
}
 800b0d6:	b01e      	add	sp, #120	; 0x78
 800b0d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 800b0dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 800b0e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b0e4:	4605      	mov	r5, r0
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 800b0e6:	4620      	mov	r0, r4
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 800b0e8:	9314      	str	r3, [sp, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 800b0ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 800b0ee:	240f      	movs	r4, #15
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 800b0f0:	a903      	add	r1, sp, #12
  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 800b0f2:	9317      	str	r3, [sp, #92]	; 0x5c
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 800b0f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 800b0f8:	9411      	str	r4, [sp, #68]	; 0x44
  VidCfg.Mode = DSI_VID_MODE_BURST;
 800b0fa:	2402      	movs	r4, #2
  VidCfg.ColorCoding = PixelFormat;
 800b0fc:	f8cd 9010 	str.w	r9, [sp, #16]
  VidCfg.VerticalSyncActive = OTM8009A_480X800_VSYNC;
 800b100:	9610      	str	r6, [sp, #64]	; 0x40
  VidCfg.VerticalActive = Height;
 800b102:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  VidCfg.VirtualChannelID = 0;
 800b106:	9503      	str	r5, [sp, #12]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 800b108:	9505      	str	r5, [sp, #20]
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 800b10a:	951d      	str	r5, [sp, #116]	; 0x74
  VidCfg.Mode = DSI_VID_MODE_BURST;
 800b10c:	9406      	str	r4, [sp, #24]
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 800b10e:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 800b112:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b116:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b11a:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 800b11e:	f44f 7380 	mov.w	r3, #256	; 0x100
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800b122:	f24f 4224 	movw	r2, #62500	; 0xf424
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 800b126:	931c      	str	r3, [sp, #112]	; 0x70
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800b128:	4b0f      	ldr	r3, [pc, #60]	; (800b168 <MX_DSIHOST_DSI_Init+0xc8>)
 800b12a:	fb02 3307 	mla	r3, r2, r7, r3
 800b12e:	4a0f      	ldr	r2, [pc, #60]	; (800b16c <MX_DSIHOST_DSI_Init+0xcc>)
 800b130:	fba2 2303 	umull	r2, r3, r2, r3
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 800b134:	2210      	movs	r2, #16
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800b136:	0b5b      	lsrs	r3, r3, #13
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 800b138:	9212      	str	r2, [sp, #72]	; 0x48
  VidCfg.NullPacketSize = 0xFFFU;
 800b13a:	f640 72ff 	movw	r2, #4095	; 0xfff
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800b13e:	930f      	str	r3, [sp, #60]	; 0x3c
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 800b140:	234d      	movs	r3, #77	; 0x4d
  VidCfg.NullPacketSize = 0xFFFU;
 800b142:	9209      	str	r2, [sp, #36]	; 0x24
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 800b144:	930e      	str	r3, [sp, #56]	; 0x38
  VidCfg.NumberOfChunks = 0;
 800b146:	e9cd 7507 	strd	r7, r5, [sp, #28]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 800b14a:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
  VidCfg.HorizontalSyncActive = (OTM8009A_480X800_HSYNC * 62500U)/27429U;
 800b14e:	e9cd 5a0c 	strd	r5, sl, [sp, #48]	; 0x30
  VidCfg.LPVACTLargestPacketSize = 4;
 800b152:	e9cd aa15 	strd	sl, sl, [sp, #84]	; 0x54
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 800b156:	f002 fdf9 	bl	800dd4c <HAL_DSI_ConfigVideoMode>
  return HAL_OK;
 800b15a:	3800      	subs	r0, #0
 800b15c:	bf18      	it	ne
 800b15e:	2001      	movne	r0, #1
}
 800b160:	b01e      	add	sp, #120	; 0x78
 800b162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b166:	bf00      	nop
 800b168:	0042c1d8 	.word	0x0042c1d8
 800b16c:	4c751ce3 	.word	0x4c751ce3

0800b170 <MX_LTDC_Init>:
{
 800b170:	b410      	push	{r4}
  hltdc->Instance = LTDC;
 800b172:	4c0e      	ldr	r4, [pc, #56]	; (800b1ac <MX_LTDC_Init+0x3c>)
 800b174:	6004      	str	r4, [r0, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800b176:	2400      	movs	r4, #0
  hltdc->Init.Backcolor.Blue  = 0x00;
 800b178:	8684      	strh	r4, [r0, #52]	; 0x34
  hltdc->Init.Backcolor.Red   = 0x00;
 800b17a:	f880 4036 	strb.w	r4, [r0, #54]	; 0x36
  hltdc->Init.VerticalSync       = OTM8009A_480X800_VSYNC - 1;
 800b17e:	6184      	str	r4, [r0, #24]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800b180:	e9c0 4401 	strd	r4, r4, [r0, #4]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800b184:	e9c0 4403 	strd	r4, r4, [r0, #12]
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 800b188:	2401      	movs	r4, #1
 800b18a:	6144      	str	r4, [r0, #20]
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 800b18c:	2423      	movs	r4, #35	; 0x23
 800b18e:	61c4      	str	r4, [r0, #28]
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 800b190:	190c      	adds	r4, r1, r4
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 800b192:	3145      	adds	r1, #69	; 0x45
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 800b194:	6244      	str	r4, [r0, #36]	; 0x24
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 800b196:	240f      	movs	r4, #15
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 800b198:	62c1      	str	r1, [r0, #44]	; 0x2c
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 800b19a:	1911      	adds	r1, r2, r4
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 800b19c:	321f      	adds	r2, #31
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 800b19e:	6204      	str	r4, [r0, #32]
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 800b1a0:	6281      	str	r1, [r0, #40]	; 0x28
}
 800b1a2:	f85d 4b04 	ldr.w	r4, [sp], #4
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 800b1a6:	6302      	str	r2, [r0, #48]	; 0x30
  return HAL_LTDC_Init(hltdc);
 800b1a8:	f003 be76 	b.w	800ee98 <HAL_LTDC_Init>
 800b1ac:	50001000 	.word	0x50001000

0800b1b0 <MX_LTDC_ConfigLayer>:
{
 800b1b0:	4613      	mov	r3, r2
 800b1b2:	460a      	mov	r2, r1
 800b1b4:	b510      	push	{r4, lr}
  pLayerCfg.WindowX1 = Config->X1;
 800b1b6:	e9d3 1400 	ldrd	r1, r4, [r3]
{
 800b1ba:	b08e      	sub	sp, #56	; 0x38
  pLayerCfg.WindowX0 = Config->X0;
 800b1bc:	9101      	str	r1, [sp, #4]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 800b1be:	1a61      	subs	r1, r4, r1
  pLayerCfg.WindowX1 = Config->X1;
 800b1c0:	9402      	str	r4, [sp, #8]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 800b1c2:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.WindowY1 = Config->Y1;
 800b1c4:	e9d3 1402 	ldrd	r1, r4, [r3, #8]
  pLayerCfg.WindowY0 = Config->Y0;
 800b1c8:	9103      	str	r1, [sp, #12]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 800b1ca:	1a61      	subs	r1, r4, r1
  pLayerCfg.WindowY1 = Config->Y1;
 800b1cc:	9404      	str	r4, [sp, #16]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 800b1ce:	910c      	str	r1, [sp, #48]	; 0x30
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 800b1d0:	a901      	add	r1, sp, #4
  pLayerCfg.FBStartAdress = Config->Address;
 800b1d2:	e9d3 4304 	ldrd	r4, r3, [r3, #16]
 800b1d6:	930a      	str	r3, [sp, #40]	; 0x28
  pLayerCfg.Alpha = 255;
 800b1d8:	2300      	movs	r3, #0
  pLayerCfg.PixelFormat = Config->PixelFormat;
 800b1da:	9405      	str	r4, [sp, #20]
  pLayerCfg.Alpha = 255;
 800b1dc:	24ff      	movs	r4, #255	; 0xff
  pLayerCfg.Backcolor.Blue = 0;
 800b1de:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Red = 0;
 800b1e2:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  pLayerCfg.Alpha = 255;
 800b1e6:	e9cd 4306 	strd	r4, r3, [sp, #24]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800b1ea:	2307      	movs	r3, #7
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800b1ec:	f44f 64c0 	mov.w	r4, #1536	; 0x600
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800b1f0:	9309      	str	r3, [sp, #36]	; 0x24
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800b1f2:	9408      	str	r4, [sp, #32]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 800b1f4:	f003 ff24 	bl	800f040 <HAL_LTDC_ConfigLayer>
}
 800b1f8:	b00e      	add	sp, #56	; 0x38
 800b1fa:	bd10      	pop	{r4, pc}

0800b1fc <MX_LTDC_ClockConfig>:
{
 800b1fc:	b510      	push	{r4, lr}
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 800b1fe:	2105      	movs	r1, #5
{
 800b200:	b0b0      	sub	sp, #192	; 0xc0
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 800b202:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 800b206:	2084      	movs	r0, #132	; 0x84
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 800b208:	2202      	movs	r2, #2
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800b20a:	2300      	movs	r3, #0
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 800b20c:	9400      	str	r4, [sp, #0]
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 800b20e:	2418      	movs	r4, #24
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 800b210:	9109      	str	r1, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 800b212:	f44f 6100 	mov.w	r1, #2048	; 0x800
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 800b216:	900a      	str	r0, [sp, #40]	; 0x28
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800b218:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 800b21a:	920b      	str	r2, [sp, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3Q      = 2U;
 800b21c:	920c      	str	r2, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 800b21e:	e9cd 410d 	strd	r4, r1, [sp, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3FRACN  = 0U;
 800b222:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800b226:	f005 f8e7 	bl	80103f8 <HAL_RCCEx_PeriphCLKConfig>
}
 800b22a:	b030      	add	sp, #192	; 0xc0
 800b22c:	bd10      	pop	{r4, pc}
 800b22e:	bf00      	nop

0800b230 <BSP_LCD_InitEx>:
{
 800b230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800b234:	2901      	cmp	r1, #1
{
 800b236:	b097      	sub	sp, #92	; 0x5c
 800b238:	461e      	mov	r6, r3
 800b23a:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
 800b23e:	9103      	str	r1, [sp, #12]
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800b240:	f200 8144 	bhi.w	800b4cc <BSP_LCD_InitEx+0x29c>
 800b244:	1e03      	subs	r3, r0, #0
 800b246:	bf18      	it	ne
 800b248:	2301      	movne	r3, #1
 800b24a:	2800      	cmp	r0, #0
 800b24c:	f040 813e 	bne.w	800b4cc <BSP_LCD_InitEx+0x29c>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 800b250:	1e51      	subs	r1, r2, #1
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800b252:	2901      	cmp	r1, #1
 800b254:	f200 813a 	bhi.w	800b4cc <BSP_LCD_InitEx+0x29c>
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800b258:	2a02      	cmp	r2, #2
 800b25a:	f000 8106 	beq.w	800b46a <BSP_LCD_InitEx+0x23a>
      ctrl_pixel_format = OTM8009A_FORMAT_RGB888;
 800b25e:	9301      	str	r3, [sp, #4]
      Lcd_Ctx[Instance].BppFactor = 4U;
 800b260:	2104      	movs	r1, #4
      dsi_pixel_format = DSI_RGB888;
 800b262:	2305      	movs	r3, #5
  LCD_RESET_GPIO_CLK_ENABLE();
 800b264:	4c9e      	ldr	r4, [pc, #632]	; (800b4e0 <BSP_LCD_InitEx+0x2b0>)
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800b266:	2501      	movs	r5, #1
 800b268:	4f9e      	ldr	r7, [pc, #632]	; (800b4e4 <BSP_LCD_InitEx+0x2b4>)
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 800b26a:	f04f 0808 	mov.w	r8, #8
 800b26e:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 800b270:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 800b274:	489c      	ldr	r0, [pc, #624]	; (800b4e8 <BSP_LCD_InitEx+0x2b8>)
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800b276:	f04f 0a02 	mov.w	sl, #2
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 800b27a:	e9c7 2103 	strd	r2, r1, [r7, #12]
    Lcd_Ctx[Instance].YSize  = Height;
 800b27e:	e9c7 6900 	strd	r6, r9, [r7]
  LCD_RESET_GPIO_CLK_ENABLE();
 800b282:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 800b286:	a910      	add	r1, sp, #64	; 0x40
  LCD_RESET_GPIO_CLK_ENABLE();
 800b288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b28c:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 800b290:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 800b294:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  LCD_RESET_GPIO_CLK_ENABLE();
 800b298:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800b29c:	920a      	str	r2, [sp, #40]	; 0x28
 800b29e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2a0:	2203      	movs	r2, #3
  gpio_init_structure.Pull  = GPIO_PULLUP;
 800b2a2:	e9cd 5511 	strd	r5, r5, [sp, #68]	; 0x44
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2a6:	9213      	str	r2, [sp, #76]	; 0x4c
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 800b2a8:	f002 ffda 	bl	800e260 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 800b2ac:	4641      	mov	r1, r8
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	488d      	ldr	r0, [pc, #564]	; (800b4e8 <BSP_LCD_InitEx+0x2b8>)
 800b2b2:	f003 f9e5 	bl	800e680 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 800b2b6:	2014      	movs	r0, #20
 800b2b8:	f000 fae6 	bl	800b888 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 800b2bc:	4641      	mov	r1, r8
 800b2be:	462a      	mov	r2, r5
 800b2c0:	4889      	ldr	r0, [pc, #548]	; (800b4e8 <BSP_LCD_InitEx+0x2b8>)
 800b2c2:	f003 f9dd 	bl	800e680 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 800b2c6:	200a      	movs	r0, #10
 800b2c8:	f000 fade 	bl	800b888 <HAL_Delay>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800b2cc:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800b2d0:	f04f 0800 	mov.w	r8, #0
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800b2d4:	4885      	ldr	r0, [pc, #532]	; (800b4ec <BSP_LCD_InitEx+0x2bc>)
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800b2d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800b2da:	a910      	add	r1, sp, #64	; 0x40
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800b2dc:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 800b2e0:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 800b2e4:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800b2e8:	f402 7200 	and.w	r2, r2, #512	; 0x200
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800b2ec:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800b2f0:	9511      	str	r5, [sp, #68]	; 0x44
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800b2f2:	9208      	str	r2, [sp, #32]
 800b2f4:	9a08      	ldr	r2, [sp, #32]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800b2f6:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800b2fa:	f002 ffb1 	bl	800e260 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800b2fe:	4659      	mov	r1, fp
 800b300:	462a      	mov	r2, r5
 800b302:	487a      	ldr	r0, [pc, #488]	; (800b4ec <BSP_LCD_InitEx+0x2bc>)
 800b304:	f003 f9bc 	bl	800e680 <HAL_GPIO_WritePin>
  LCD_TE_GPIO_CLK_ENABLE();
 800b308:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 800b30c:	a910      	add	r1, sp, #64	; 0x40
 800b30e:	4877      	ldr	r0, [pc, #476]	; (800b4ec <BSP_LCD_InitEx+0x2bc>)
  LCD_TE_GPIO_CLK_ENABLE();
 800b310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    hlcd_dsi.Instance = DSI;
 800b314:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b518 <BSP_LCD_InitEx+0x2e8>
  LCD_TE_GPIO_CLK_ENABLE();
 800b318:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 800b31c:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800b320:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  LCD_TE_GPIO_CLK_ENABLE();
 800b324:	f402 7200 	and.w	r2, r2, #512	; 0x200
    hlcd_ltdc.Instance = LTDC;
 800b328:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 800b51c <BSP_LCD_InitEx+0x2ec>
  gpio_init_structure.Pin       = LCD_TE_PIN;
 800b32c:	ed9f 7b6a 	vldr	d7, [pc, #424]	; 800b4d8 <BSP_LCD_InitEx+0x2a8>
  LCD_TE_GPIO_CLK_ENABLE();
 800b330:	9209      	str	r2, [sp, #36]	; 0x24
 800b332:	9a09      	ldr	r2, [sp, #36]	; 0x24
  gpio_init_structure.Pin       = LCD_TE_PIN;
 800b334:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 800b338:	f002 ff92 	bl	800e260 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 800b33c:	462a      	mov	r2, r5
 800b33e:	2104      	movs	r1, #4
 800b340:	486a      	ldr	r0, [pc, #424]	; (800b4ec <BSP_LCD_InitEx+0x2bc>)
 800b342:	f003 f99d 	bl	800e680 <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 800b346:	4642      	mov	r2, r8
 800b348:	210f      	movs	r1, #15
 800b34a:	2058      	movs	r0, #88	; 0x58
 800b34c:	f000 face 	bl	800b8ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800b350:	2058      	movs	r0, #88	; 0x58
 800b352:	f000 fb09 	bl	800b968 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 800b356:	4642      	mov	r2, r8
 800b358:	210f      	movs	r1, #15
 800b35a:	205a      	movs	r0, #90	; 0x5a
 800b35c:	f000 fac6 	bl	800b8ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800b360:	205a      	movs	r0, #90	; 0x5a
 800b362:	f000 fb01 	bl	800b968 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 800b366:	4642      	mov	r2, r8
 800b368:	210f      	movs	r1, #15
 800b36a:	207b      	movs	r0, #123	; 0x7b
 800b36c:	f000 fabe 	bl	800b8ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 800b370:	207b      	movs	r0, #123	; 0x7b
 800b372:	f000 faf9 	bl	800b968 <HAL_NVIC_EnableIRQ>
    hlcd_ltdc.Instance = LTDC;
 800b376:	4a5e      	ldr	r2, [pc, #376]	; (800b4f0 <BSP_LCD_InitEx+0x2c0>)
    hlcd_dma2d.Instance = DMA2D;
 800b378:	495e      	ldr	r1, [pc, #376]	; (800b4f4 <BSP_LCD_InitEx+0x2c4>)
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 800b37a:	4658      	mov	r0, fp
    hlcd_ltdc.Instance = LTDC;
 800b37c:	f8ca 2000 	str.w	r2, [sl]
    hlcd_dma2d.Instance = DMA2D;
 800b380:	4a5d      	ldr	r2, [pc, #372]	; (800b4f8 <BSP_LCD_InitEx+0x2c8>)
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 800b382:	9b02      	ldr	r3, [sp, #8]
    hlcd_dma2d.Instance = DMA2D;
 800b384:	6011      	str	r1, [r2, #0]
    hlcd_dsi.Instance = DSI;
 800b386:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 800b38a:	4631      	mov	r1, r6
    hlcd_dsi.Instance = DSI;
 800b38c:	f8cb 2000 	str.w	r2, [fp]
    __HAL_RCC_LTDC_CLK_ENABLE();
 800b390:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
 800b394:	f042 0208 	orr.w	r2, r2, #8
 800b398:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
 800b39c:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
 800b3a0:	f002 0208 	and.w	r2, r2, #8
 800b3a4:	9207      	str	r2, [sp, #28]
 800b3a6:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_LTDC_FORCE_RESET();
 800b3a8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800b3ac:	f042 0208 	orr.w	r2, r2, #8
 800b3b0:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 800b3b4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800b3b8:	f022 0208 	bic.w	r2, r2, #8
 800b3bc:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800b3c0:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
 800b3c4:	f042 0210 	orr.w	r2, r2, #16
 800b3c8:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
 800b3cc:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
 800b3d0:	f002 0210 	and.w	r2, r2, #16
 800b3d4:	9206      	str	r2, [sp, #24]
 800b3d6:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800b3d8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800b3da:	f042 0210 	orr.w	r2, r2, #16
 800b3de:	67e2      	str	r2, [r4, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800b3e0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800b3e2:	f022 0210 	bic.w	r2, r2, #16
 800b3e6:	67e2      	str	r2, [r4, #124]	; 0x7c
    __HAL_RCC_DSI_CLK_ENABLE();
 800b3e8:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
 800b3ec:	f042 0210 	orr.w	r2, r2, #16
 800b3f0:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
 800b3f4:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
 800b3f8:	f002 0210 	and.w	r2, r2, #16
 800b3fc:	9205      	str	r2, [sp, #20]
 800b3fe:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_DSI_FORCE_RESET();
 800b400:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800b404:	f042 0210 	orr.w	r2, r2, #16
 800b408:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 800b40c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800b410:	f022 0210 	bic.w	r2, r2, #16
 800b414:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 800b418:	464a      	mov	r2, r9
 800b41a:	f7ff fe41 	bl	800b0a0 <MX_DSIHOST_DSI_Init>
 800b41e:	2800      	cmp	r0, #0
 800b420:	d14f      	bne.n	800b4c2 <BSP_LCD_InitEx+0x292>
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 800b422:	4650      	mov	r0, sl
 800b424:	f7ff feea 	bl	800b1fc <MX_LTDC_ClockConfig>
 800b428:	2800      	cmp	r0, #0
 800b42a:	d14a      	bne.n	800b4c2 <BSP_LCD_InitEx+0x292>
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 800b42c:	4631      	mov	r1, r6
 800b42e:	464a      	mov	r2, r9
 800b430:	4650      	mov	r0, sl
 800b432:	f7ff fe9d 	bl	800b170 <MX_LTDC_Init>
 800b436:	4601      	mov	r1, r0
 800b438:	2800      	cmp	r0, #0
 800b43a:	d142      	bne.n	800b4c2 <BSP_LCD_InitEx+0x292>
      config.PixelFormat = ltdc_pixel_format;
 800b43c:	9b01      	ldr	r3, [sp, #4]
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 800b43e:	aa10      	add	r2, sp, #64	; 0x40
 800b440:	4650      	mov	r0, sl
      config.X1          = Width;
 800b442:	9611      	str	r6, [sp, #68]	; 0x44
      config.PixelFormat = ltdc_pixel_format;
 800b444:	9314      	str	r3, [sp, #80]	; 0x50
      config.Address     = LCD_LAYER_0_ADDRESS;
 800b446:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
      config.Y1          = Height;
 800b44a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
      config.X0          = 0;
 800b44e:	9110      	str	r1, [sp, #64]	; 0x40
      config.Y0          = 0;
 800b450:	9112      	str	r1, [sp, #72]	; 0x48
      config.Address     = LCD_LAYER_0_ADDRESS;
 800b452:	9315      	str	r3, [sp, #84]	; 0x54
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 800b454:	f7ff feac 	bl	800b1b0 <MX_LTDC_ConfigLayer>
 800b458:	4604      	mov	r4, r0
 800b45a:	b148      	cbz	r0, 800b470 <BSP_LCD_InitEx+0x240>
        ret = BSP_ERROR_PERIPH_FAILURE;
 800b45c:	f06f 0003 	mvn.w	r0, #3
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 800b460:	2301      	movs	r3, #1
 800b462:	61bb      	str	r3, [r7, #24]
}
 800b464:	b017      	add	sp, #92	; 0x5c
 800b466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Lcd_Ctx[Instance].BppFactor = 2U;
 800b46a:	4611      	mov	r1, r2
      ctrl_pixel_format = OTM8009A_FORMAT_RBG565;
 800b46c:	9201      	str	r2, [sp, #4]
 800b46e:	e6f9      	b.n	800b264 <BSP_LCD_InitEx+0x34>
        (void)HAL_DSI_Start(&hlcd_dsi);
 800b470:	4658      	mov	r0, fp
  IOCtx.Address     = 0;
  IOCtx.GetTick     = BSP_GetTick;
  IOCtx.WriteReg    = DSI_IO_Write;
  IOCtx.ReadReg     = DSI_IO_Read;

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800b472:	4d22      	ldr	r5, [pc, #136]	; (800b4fc <BSP_LCD_InitEx+0x2cc>)
        (void)HAL_DSI_Start(&hlcd_dsi);
 800b474:	f002 fd86 	bl	800df84 <HAL_DSI_Start>
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 800b478:	2104      	movs	r1, #4
 800b47a:	4658      	mov	r0, fp
 800b47c:	f002 fd6e 	bl	800df5c <HAL_DSI_ConfigFlowControl>
  IOCtx.GetTick     = BSP_GetTick;
 800b480:	4b1f      	ldr	r3, [pc, #124]	; (800b500 <BSP_LCD_InitEx+0x2d0>)
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800b482:	a90c      	add	r1, sp, #48	; 0x30
 800b484:	4628      	mov	r0, r5
  IOCtx.GetTick     = BSP_GetTick;
 800b486:	930f      	str	r3, [sp, #60]	; 0x3c
  IOCtx.WriteReg    = DSI_IO_Write;
 800b488:	4b1e      	ldr	r3, [pc, #120]	; (800b504 <BSP_LCD_InitEx+0x2d4>)
  IOCtx.Address     = 0;
 800b48a:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
  IOCtx.WriteReg    = DSI_IO_Write;
 800b48e:	930d      	str	r3, [sp, #52]	; 0x34
  IOCtx.ReadReg     = DSI_IO_Read;
 800b490:	4b1d      	ldr	r3, [pc, #116]	; (800b508 <BSP_LCD_InitEx+0x2d8>)
 800b492:	930e      	str	r3, [sp, #56]	; 0x38
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800b494:	f7fc fba8 	bl	8007be8 <OTM8009A_RegisterBusIO>
 800b498:	b980      	cbnz	r0, 800b4bc <BSP_LCD_InitEx+0x28c>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 800b49a:	4c1c      	ldr	r4, [pc, #112]	; (800b50c <BSP_LCD_InitEx+0x2dc>)

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 800b49c:	4628      	mov	r0, r5
 800b49e:	a90b      	add	r1, sp, #44	; 0x2c
    Lcd_CompObj = &OTM8009AObj;
 800b4a0:	6025      	str	r5, [r4, #0]
    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 800b4a2:	f7fc fb8d 	bl	8007bc0 <OTM8009A_ReadID>
 800b4a6:	b948      	cbnz	r0, 800b4bc <BSP_LCD_InitEx+0x28c>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }

    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 800b4a8:	4b19      	ldr	r3, [pc, #100]	; (800b510 <BSP_LCD_InitEx+0x2e0>)
 800b4aa:	4d1a      	ldr	r5, [pc, #104]	; (800b514 <BSP_LCD_InitEx+0x2e4>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 800b4ac:	9a03      	ldr	r2, [sp, #12]
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 800b4ae:	602b      	str	r3, [r5, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 800b4b0:	9901      	ldr	r1, [sp, #4]
 800b4b2:	6820      	ldr	r0, [r4, #0]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4798      	blx	r3
 800b4b8:	2800      	cmp	r0, #0
 800b4ba:	d0d1      	beq.n	800b460 <BSP_LCD_InitEx+0x230>
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b4bc:	f06f 0006 	mvn.w	r0, #6
 800b4c0:	e7ce      	b.n	800b460 <BSP_LCD_InitEx+0x230>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800b4c2:	f06f 0003 	mvn.w	r0, #3
}
 800b4c6:	b017      	add	sp, #92	; 0x5c
 800b4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800b4cc:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800b4d0:	e7c8      	b.n	800b464 <BSP_LCD_InitEx+0x234>
 800b4d2:	bf00      	nop
 800b4d4:	f3af 8000 	nop.w
 800b4d8:	00000004 	.word	0x00000004
 800b4dc:	00000000 	.word	0x00000000
 800b4e0:	58024400 	.word	0x58024400
 800b4e4:	2000a004 	.word	0x2000a004
 800b4e8:	58021800 	.word	0x58021800
 800b4ec:	58022400 	.word	0x58022400
 800b4f0:	50001000 	.word	0x50001000
 800b4f4:	52001000 	.word	0x52001000
 800b4f8:	2000a044 	.word	0x2000a044
 800b4fc:	2000a024 	.word	0x2000a024
 800b500:	0800a2c5 	.word	0x0800a2c5
 800b504:	0800adc9 	.word	0x0800adc9
 800b508:	0800ab61 	.word	0x0800ab61
 800b50c:	2000a000 	.word	0x2000a000
 800b510:	2000763c 	.word	0x2000763c
 800b514:	2000a020 	.word	0x2000a020
 800b518:	2000a0ac 	.word	0x2000a0ac
 800b51c:	2000a0c8 	.word	0x2000a0c8

0800b520 <BSP_LCD_Init>:
{
 800b520:	b510      	push	{r4, lr}
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 800b522:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
{
 800b526:	b082      	sub	sp, #8
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 800b528:	f44f 7348 	mov.w	r3, #800	; 0x320
 800b52c:	2201      	movs	r2, #1
 800b52e:	9400      	str	r4, [sp, #0]
 800b530:	f7ff fe7e 	bl	800b230 <BSP_LCD_InitEx>
}
 800b534:	b002      	add	sp, #8
 800b536:	bd10      	pop	{r4, pc}

0800b538 <BSP_LCD_ConfigLayer>:
  if(Instance >= LCD_INSTANCES_NBR)
 800b538:	b948      	cbnz	r0, 800b54e <BSP_LCD_ConfigLayer+0x16>
    if (MX_LTDC_ConfigLayer(&hlcd_ltdc, LayerIndex, Config) != HAL_OK)
 800b53a:	4806      	ldr	r0, [pc, #24]	; (800b554 <BSP_LCD_ConfigLayer+0x1c>)
{
 800b53c:	b508      	push	{r3, lr}
    if (MX_LTDC_ConfigLayer(&hlcd_ltdc, LayerIndex, Config) != HAL_OK)
 800b53e:	f7ff fe37 	bl	800b1b0 <MX_LTDC_ConfigLayer>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800b542:	2800      	cmp	r0, #0
 800b544:	bf0c      	ite	eq
 800b546:	2000      	moveq	r0, #0
 800b548:	f06f 0003 	mvnne.w	r0, #3
}
 800b54c:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800b54e:	f06f 0001 	mvn.w	r0, #1
}
 800b552:	4770      	bx	lr
 800b554:	2000a0c8 	.word	0x2000a0c8

0800b558 <BSP_LCD_SetBrightness>:
  if(Instance >= LCD_INSTANCES_NBR)
 800b558:	b958      	cbnz	r0, 800b572 <BSP_LCD_SetBrightness+0x1a>
    if(Lcd_Drv->SetBrightness(Lcd_CompObj, Brightness) != BSP_ERROR_NONE)
 800b55a:	4a07      	ldr	r2, [pc, #28]	; (800b578 <BSP_LCD_SetBrightness+0x20>)
{
 800b55c:	b508      	push	{r3, lr}
    if(Lcd_Drv->SetBrightness(Lcd_CompObj, Brightness) != BSP_ERROR_NONE)
 800b55e:	4b07      	ldr	r3, [pc, #28]	; (800b57c <BSP_LCD_SetBrightness+0x24>)
 800b560:	6810      	ldr	r0, [r2, #0]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	695b      	ldr	r3, [r3, #20]
 800b566:	4798      	blx	r3
      ret = BSP_ERROR_PERIPH_FAILURE;
 800b568:	2800      	cmp	r0, #0
 800b56a:	bf18      	it	ne
 800b56c:	f06f 0003 	mvnne.w	r0, #3
}
 800b570:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800b572:	f06f 0001 	mvn.w	r0, #1
}
 800b576:	4770      	bx	lr
 800b578:	2000a000 	.word	0x2000a000
 800b57c:	2000a020 	.word	0x2000a020

0800b580 <BSP_SD_DeInit>:
  * @retval SD status
  */
int32_t BSP_SD_DeInit(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;
  if(Instance >= SD_INSTANCES_NBR)
 800b580:	b9d0      	cbnz	r0, 800b5b8 <BSP_SD_DeInit+0x38>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    if(HAL_SD_DeInit(&hsd_sdmmc[Instance]) != HAL_OK)/* HAL SD de-initialization */
 800b582:	4810      	ldr	r0, [pc, #64]	; (800b5c4 <BSP_SD_DeInit+0x44>)
{
 800b584:	b510      	push	{r4, lr}
    if(HAL_SD_DeInit(&hsd_sdmmc[Instance]) != HAL_OK)/* HAL SD de-initialization */
 800b586:	f006 fb2d 	bl	8011be4 <HAL_SD_DeInit>
 800b58a:	4604      	mov	r4, r0
 800b58c:	b9b8      	cbnz	r0, 800b5be <BSP_SD_DeInit+0x3e>
{
  GPIO_InitTypeDef gpio_init_structure;

  if(hsd == &hsd_sdmmc[0])
  {
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 800b58e:	2031      	movs	r0, #49	; 0x31
 800b590:	f000 f9f8 	bl	800b984 <HAL_NVIC_DisableIRQ>

    /* DeInit GPIO pins can be done in the application
    (by surcharging this __weak function) */

    /* Disable SDMMC1 clock */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 800b594:	4a0c      	ldr	r2, [pc, #48]	; (800b5c8 <BSP_SD_DeInit+0x48>)
    /* GPIOC configuration */
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
#else
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
#endif
    HAL_GPIO_DeInit(GPIOC, gpio_init_structure.Pin);
 800b596:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 800b59a:	480c      	ldr	r0, [pc, #48]	; (800b5cc <BSP_SD_DeInit+0x4c>)
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 800b59c:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 800b5a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5a4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOC, gpio_init_structure.Pin);
 800b5a8:	f002 ff9c 	bl	800e4e4 <HAL_GPIO_DeInit>

    /* GPIOD configuration */
    gpio_init_structure.Pin = GPIO_PIN_2;
    HAL_GPIO_DeInit(GPIOD, gpio_init_structure.Pin);
 800b5ac:	2104      	movs	r1, #4
 800b5ae:	4808      	ldr	r0, [pc, #32]	; (800b5d0 <BSP_SD_DeInit+0x50>)
 800b5b0:	f002 ff98 	bl	800e4e4 <HAL_GPIO_DeInit>
  int32_t ret = BSP_ERROR_NONE;
 800b5b4:	4620      	mov	r0, r4
}
 800b5b6:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800b5b8:	f06f 0001 	mvn.w	r0, #1
}
 800b5bc:	4770      	bx	lr
      ret = BSP_ERROR_PERIPH_FAILURE;
 800b5be:	f06f 0003 	mvn.w	r0, #3
}
 800b5c2:	bd10      	pop	{r4, pc}
 800b5c4:	2000a170 	.word	0x2000a170
 800b5c8:	58024400 	.word	0x58024400
 800b5cc:	58020800 	.word	0x58020800
 800b5d0:	58020c00 	.word	0x58020c00

0800b5d4 <MX_SDMMC1_SD_Init>:
{
 800b5d4:	b510      	push	{r4, lr}
  hsd->Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b5d6:	2200      	movs	r2, #0
  hsd->Instance                 = SDMMC1;
 800b5d8:	4c07      	ldr	r4, [pc, #28]	; (800b5f8 <MX_SDMMC1_SD_Init+0x24>)
  hsd->Init.TranceiverPresent   = SDMMC_TRANSCEIVER_PRESENT;
 800b5da:	2102      	movs	r1, #2
  hsd->Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b5dc:	6102      	str	r2, [r0, #16]
  hsd->Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b5de:	e9c0 4200 	strd	r4, r2, [r0]
  hsd->Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b5e2:	e9c0 2202 	strd	r2, r2, [r0, #8]
  hsd->Init.ClockDiv            = SDMMC_NSpeed_CLK_DIV;
 800b5e6:	2204      	movs	r2, #4
 800b5e8:	e9c0 2105 	strd	r2, r1, [r0, #20]
  if(HAL_SD_Init(hsd) != HAL_OK)
 800b5ec:	f006 ff74 	bl	80124d8 <HAL_SD_Init>
}
 800b5f0:	3800      	subs	r0, #0
 800b5f2:	bf18      	it	ne
 800b5f4:	2001      	movne	r0, #1
 800b5f6:	bd10      	pop	{r4, pc}
 800b5f8:	52007000 	.word	0x52007000

0800b5fc <BSP_SD_Init>:
  if(Instance >= SD_INSTANCES_NBR)
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	f040 8081 	bne.w	800b704 <BSP_SD_Init+0x108>
    ret = (uint32_t)HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT,GPIO_PIN_8 );/*PinDetect[Instance]*/
 800b602:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b606:	4842      	ldr	r0, [pc, #264]	; (800b710 <BSP_SD_Init+0x114>)
{
 800b608:	b530      	push	{r4, r5, lr}
 800b60a:	b08d      	sub	sp, #52	; 0x34
    ret = (uint32_t)HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT,GPIO_PIN_8 );/*PinDetect[Instance]*/
 800b60c:	f003 f832 	bl	800e674 <HAL_GPIO_ReadPin>
    if(ret != GPIO_PIN_RESET)
 800b610:	4605      	mov	r5, r0
 800b612:	2800      	cmp	r0, #0
 800b614:	d172      	bne.n	800b6fc <BSP_SD_Init+0x100>
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800b616:	4c3f      	ldr	r4, [pc, #252]	; (800b714 <BSP_SD_Init+0x118>)
  gpio_init_structure.Alternate = GPIO_AF12_SDIO1;
 800b618:	220c      	movs	r2, #12
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800b61a:	a906      	add	r1, sp, #24
 800b61c:	483e      	ldr	r0, [pc, #248]	; (800b718 <BSP_SD_Init+0x11c>)
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800b61e:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 800b622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b626:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 800b62a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 800b62e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b632:	9301      	str	r3, [sp, #4]
 800b634:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b636:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800b63a:	f043 0302 	orr.w	r3, r3, #2
 800b63e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800b642:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800b646:	f003 0302 	and.w	r3, r3, #2
 800b64a:	9302      	str	r3, [sp, #8]
 800b64c:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b64e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800b652:	f043 0304 	orr.w	r3, r3, #4
 800b656:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800b65a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800b65e:	f003 0304 	and.w	r3, r3, #4
 800b662:	9303      	str	r3, [sp, #12]
 800b664:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b666:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800b66a:	f043 0308 	orr.w	r3, r3, #8
 800b66e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800b672:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Alternate = GPIO_AF12_SDIO1;
 800b676:	920a      	str	r2, [sp, #40]	; 0x28
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
 800b678:	f44f 5288 	mov.w	r2, #4352	; 0x1100
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b67c:	f003 0308 	and.w	r3, r3, #8
 800b680:	9304      	str	r3, [sp, #16]
 800b682:	9b04      	ldr	r3, [sp, #16]
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
 800b684:	2302      	movs	r3, #2
 800b686:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b68a:	2201      	movs	r2, #1
 800b68c:	2303      	movs	r3, #3
 800b68e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800b692:	f002 fde5 	bl	800e260 <HAL_GPIO_Init>
  gpio_init_structure.Pin = GPIO_PIN_2;
 800b696:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800b698:	a906      	add	r1, sp, #24
 800b69a:	4820      	ldr	r0, [pc, #128]	; (800b71c <BSP_SD_Init+0x120>)
  gpio_init_structure.Pin = GPIO_PIN_2;
 800b69c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800b69e:	f002 fddf 	bl	800e260 <HAL_GPIO_Init>
  SD_DETECT_GPIO_CLK_ENABLE();
 800b6a2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin = SD_DETECT_PIN;
 800b6a6:	f44f 7280 	mov.w	r2, #256	; 0x100
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 800b6aa:	a906      	add	r1, sp, #24
 800b6ac:	4818      	ldr	r0, [pc, #96]	; (800b710 <BSP_SD_Init+0x114>)
  SD_DETECT_GPIO_CLK_ENABLE();
 800b6ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6b2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800b6b6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800b6ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6be:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Pin = SD_DETECT_PIN;
 800b6c0:	2300      	movs	r3, #0
  SD_DETECT_GPIO_CLK_ENABLE();
 800b6c2:	9c05      	ldr	r4, [sp, #20]
  gpio_init_structure.Pin = SD_DETECT_PIN;
 800b6c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b6c8:	2302      	movs	r3, #2
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 800b6d0:	f002 fdc6 	bl	800e260 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, BSP_SD_IT_PRIORITY, 0);
 800b6d4:	462a      	mov	r2, r5
 800b6d6:	210e      	movs	r1, #14
 800b6d8:	2031      	movs	r0, #49	; 0x31
 800b6da:	f000 f907 	bl	800b8ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800b6de:	2031      	movs	r0, #49	; 0x31
 800b6e0:	f000 f942 	bl	800b968 <HAL_NVIC_EnableIRQ>
        if(MX_SDMMC1_SD_Init(&hsd_sdmmc[Instance]) != HAL_OK)
 800b6e4:	480e      	ldr	r0, [pc, #56]	; (800b720 <BSP_SD_Init+0x124>)
 800b6e6:	f7ff ff75 	bl	800b5d4 <MX_SDMMC1_SD_Init>
 800b6ea:	4604      	mov	r4, r0
 800b6ec:	b968      	cbnz	r0, 800b70a <BSP_SD_Init+0x10e>
          (void)HAL_SD_ConfigSpeedBusOperation(&hsd_sdmmc[Instance], SDMMC_SPEED_MODE_HIGH);
 800b6ee:	2102      	movs	r1, #2
 800b6f0:	480b      	ldr	r0, [pc, #44]	; (800b720 <BSP_SD_Init+0x124>)
 800b6f2:	f006 ff57 	bl	80125a4 <HAL_SD_ConfigSpeedBusOperation>
  int32_t ret = BSP_ERROR_NONE;
 800b6f6:	4620      	mov	r0, r4
}
 800b6f8:	b00d      	add	sp, #52	; 0x34
 800b6fa:	bd30      	pop	{r4, r5, pc}
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b6fc:	f06f 0006 	mvn.w	r0, #6
}
 800b700:	b00d      	add	sp, #52	; 0x34
 800b702:	bd30      	pop	{r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800b704:	f06f 0001 	mvn.w	r0, #1
}
 800b708:	4770      	bx	lr
          ret = BSP_ERROR_PERIPH_FAILURE;
 800b70a:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800b70e:	e7f3      	b.n	800b6f8 <BSP_SD_Init+0xfc>
 800b710:	58022000 	.word	0x58022000
 800b714:	58024400 	.word	0x58024400
 800b718:	58020800 	.word	0x58020800
 800b71c:	58020c00 	.word	0x58020c00
 800b720:	2000a170 	.word	0x2000a170

0800b724 <BSP_SD_ReadBlocks>:
{
 800b724:	b510      	push	{r4, lr}
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800b726:	2464      	movs	r4, #100	; 0x64
{
 800b728:	b082      	sub	sp, #8
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800b72a:	fb03 f404 	mul.w	r4, r3, r4
  if(Instance >= SD_INSTANCES_NBR)
 800b72e:	b950      	cbnz	r0, 800b746 <BSP_SD_ReadBlocks+0x22>
    if(HAL_SD_ReadBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 800b730:	4806      	ldr	r0, [pc, #24]	; (800b74c <BSP_SD_ReadBlocks+0x28>)
 800b732:	9400      	str	r4, [sp, #0]
 800b734:	f006 f880 	bl	8011838 <HAL_SD_ReadBlocks>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800b738:	2800      	cmp	r0, #0
 800b73a:	bf0c      	ite	eq
 800b73c:	2000      	moveq	r0, #0
 800b73e:	f06f 0003 	mvnne.w	r0, #3
}
 800b742:	b002      	add	sp, #8
 800b744:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800b746:	f06f 0001 	mvn.w	r0, #1
 800b74a:	e7fa      	b.n	800b742 <BSP_SD_ReadBlocks+0x1e>
 800b74c:	2000a170 	.word	0x2000a170

0800b750 <BSP_SD_WriteBlocks>:
{
 800b750:	b510      	push	{r4, lr}
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800b752:	2464      	movs	r4, #100	; 0x64
{
 800b754:	b082      	sub	sp, #8
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800b756:	fb03 f404 	mul.w	r4, r3, r4
  if(Instance >= SD_INSTANCES_NBR)
 800b75a:	b950      	cbnz	r0, 800b772 <BSP_SD_WriteBlocks+0x22>
    if(HAL_SD_WriteBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 800b75c:	4806      	ldr	r0, [pc, #24]	; (800b778 <BSP_SD_WriteBlocks+0x28>)
 800b75e:	9400      	str	r4, [sp, #0]
 800b760:	f006 f956 	bl	8011a10 <HAL_SD_WriteBlocks>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800b764:	2800      	cmp	r0, #0
 800b766:	bf0c      	ite	eq
 800b768:	2000      	moveq	r0, #0
 800b76a:	f06f 0003 	mvnne.w	r0, #3
}
 800b76e:	b002      	add	sp, #8
 800b770:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800b772:	f06f 0001 	mvn.w	r0, #1
 800b776:	e7fa      	b.n	800b76e <BSP_SD_WriteBlocks+0x1e>
 800b778:	2000a170 	.word	0x2000a170

0800b77c <BSP_SD_GetCardState>:
{
 800b77c:	b508      	push	{r3, lr}
  return (int32_t)((HAL_SD_GetCardState(&hsd_sdmmc[Instance]) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b77e:	4b04      	ldr	r3, [pc, #16]	; (800b790 <BSP_SD_GetCardState+0x14>)
 800b780:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
 800b784:	f007 f86c 	bl	8012860 <HAL_SD_GetCardState>
}
 800b788:	3804      	subs	r0, #4
 800b78a:	bf18      	it	ne
 800b78c:	2001      	movne	r0, #1
 800b78e:	bd08      	pop	{r3, pc}
 800b790:	2000a170 	.word	0x2000a170

0800b794 <BSP_SD_GetCardInfo>:
  if(Instance >= SD_INSTANCES_NBR)
 800b794:	b948      	cbnz	r0, 800b7aa <BSP_SD_GetCardInfo+0x16>
    if(HAL_SD_GetCardInfo(&hsd_sdmmc[Instance], CardInfo) != HAL_OK)
 800b796:	4806      	ldr	r0, [pc, #24]	; (800b7b0 <BSP_SD_GetCardInfo+0x1c>)
{
 800b798:	b508      	push	{r3, lr}
    if(HAL_SD_GetCardInfo(&hsd_sdmmc[Instance], CardInfo) != HAL_OK)
 800b79a:	f006 fdeb 	bl	8012374 <HAL_SD_GetCardInfo>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800b79e:	2800      	cmp	r0, #0
 800b7a0:	bf0c      	ite	eq
 800b7a2:	2000      	moveq	r0, #0
 800b7a4:	f06f 0003 	mvnne.w	r0, #3
}
 800b7a8:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800b7aa:	f06f 0001 	mvn.w	r0, #1
}
 800b7ae:	4770      	bx	lr
 800b7b0:	2000a170 	.word	0x2000a170

0800b7b4 <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 800b7b4:	4770      	bx	lr
 800b7b6:	bf00      	nop

0800b7b8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800b7b8:	4b0f      	ldr	r3, [pc, #60]	; (800b7f8 <HAL_InitTick+0x40>)
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	b90b      	cbnz	r3, 800b7c2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 800b7be:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800b7c0:	4770      	bx	lr
{
 800b7c2:	b510      	push	{r4, lr}
 800b7c4:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800b7c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b7ca:	4a0c      	ldr	r2, [pc, #48]	; (800b7fc <HAL_InitTick+0x44>)
 800b7cc:	fbb0 f3f3 	udiv	r3, r0, r3
 800b7d0:	6810      	ldr	r0, [r2, #0]
 800b7d2:	fbb0 f0f3 	udiv	r0, r0, r3
 800b7d6:	f000 f8e7 	bl	800b9a8 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b7da:	2c0f      	cmp	r4, #15
 800b7dc:	d800      	bhi.n	800b7e0 <HAL_InitTick+0x28>
 800b7de:	b108      	cbz	r0, 800b7e4 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 800b7e0:	2001      	movs	r0, #1
}
 800b7e2:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	4621      	mov	r1, r4
 800b7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ec:	f000 f87e 	bl	800b8ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b7f0:	4b03      	ldr	r3, [pc, #12]	; (800b800 <HAL_InitTick+0x48>)
 800b7f2:	2000      	movs	r0, #0
 800b7f4:	601c      	str	r4, [r3, #0]
}
 800b7f6:	bd10      	pop	{r4, pc}
 800b7f8:	20007710 	.word	0x20007710
 800b7fc:	20007634 	.word	0x20007634
 800b800:	20007714 	.word	0x20007714

0800b804 <HAL_Init>:
{
 800b804:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b806:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b808:	4c12      	ldr	r4, [pc, #72]	; (800b854 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b80a:	f000 f85d 	bl	800b8c8 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b80e:	f004 fa65 	bl	800fcdc <HAL_RCC_GetSysClockFreq>
 800b812:	4b11      	ldr	r3, [pc, #68]	; (800b858 <HAL_Init+0x54>)
 800b814:	4911      	ldr	r1, [pc, #68]	; (800b85c <HAL_Init+0x58>)
 800b816:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b818:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b81a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b81e:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b822:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b824:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b826:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 800b82a:	490d      	ldr	r1, [pc, #52]	; (800b860 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b82c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b830:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b832:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800b836:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b838:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b83a:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b83c:	f7ff ffbc 	bl	800b7b8 <HAL_InitTick>
 800b840:	b110      	cbz	r0, 800b848 <HAL_Init+0x44>
    return HAL_ERROR;
 800b842:	2401      	movs	r4, #1
}
 800b844:	4620      	mov	r0, r4
 800b846:	bd10      	pop	{r4, pc}
 800b848:	4604      	mov	r4, r0
  HAL_MspInit();
 800b84a:	f7fb fa05 	bl	8006c58 <HAL_MspInit>
}
 800b84e:	4620      	mov	r0, r4
 800b850:	bd10      	pop	{r4, pc}
 800b852:	bf00      	nop
 800b854:	20007638 	.word	0x20007638
 800b858:	58024400 	.word	0x58024400
 800b85c:	08098978 	.word	0x08098978
 800b860:	20007634 	.word	0x20007634

0800b864 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800b864:	4a03      	ldr	r2, [pc, #12]	; (800b874 <HAL_IncTick+0x10>)
 800b866:	4b04      	ldr	r3, [pc, #16]	; (800b878 <HAL_IncTick+0x14>)
 800b868:	6811      	ldr	r1, [r2, #0]
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	440b      	add	r3, r1
 800b86e:	6013      	str	r3, [r2, #0]
}
 800b870:	4770      	bx	lr
 800b872:	bf00      	nop
 800b874:	2000a1f0 	.word	0x2000a1f0
 800b878:	20007710 	.word	0x20007710

0800b87c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800b87c:	4b01      	ldr	r3, [pc, #4]	; (800b884 <HAL_GetTick+0x8>)
 800b87e:	6818      	ldr	r0, [r3, #0]
}
 800b880:	4770      	bx	lr
 800b882:	bf00      	nop
 800b884:	2000a1f0 	.word	0x2000a1f0

0800b888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b888:	b538      	push	{r3, r4, r5, lr}
 800b88a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800b88c:	f7ff fff6 	bl	800b87c <HAL_GetTick>
 800b890:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b892:	1c63      	adds	r3, r4, #1
 800b894:	d002      	beq.n	800b89c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800b896:	4b04      	ldr	r3, [pc, #16]	; (800b8a8 <HAL_Delay+0x20>)
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b89c:	f7ff ffee 	bl	800b87c <HAL_GetTick>
 800b8a0:	1b43      	subs	r3, r0, r5
 800b8a2:	42a3      	cmp	r3, r4
 800b8a4:	d3fa      	bcc.n	800b89c <HAL_Delay+0x14>
  {
  }
}
 800b8a6:	bd38      	pop	{r3, r4, r5, pc}
 800b8a8:	20007710 	.word	0x20007710

0800b8ac <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800b8ac:	4b01      	ldr	r3, [pc, #4]	; (800b8b4 <HAL_GetREVID+0x8>)
 800b8ae:	6818      	ldr	r0, [r3, #0]
}
 800b8b0:	0c00      	lsrs	r0, r0, #16
 800b8b2:	4770      	bx	lr
 800b8b4:	5c001000 	.word	0x5c001000

0800b8b8 <HAL_EnableCompensationCell>:
  *         voltage ranges from 2.4 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 800b8b8:	4a02      	ldr	r2, [pc, #8]	; (800b8c4 <HAL_EnableCompensationCell+0xc>)
 800b8ba:	6a13      	ldr	r3, [r2, #32]
 800b8bc:	f043 0301 	orr.w	r3, r3, #1
 800b8c0:	6213      	str	r3, [r2, #32]
}
 800b8c2:	4770      	bx	lr
 800b8c4:	58000400 	.word	0x58000400

0800b8c8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b8c8:	4906      	ldr	r1, [pc, #24]	; (800b8e4 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b8ca:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b8ce:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 800b8d0:	4b05      	ldr	r3, [pc, #20]	; (800b8e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b8d2:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b8d4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b8d8:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b8dc:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800b8de:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800b8e0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800b8e2:	4770      	bx	lr
 800b8e4:	e000ed00 	.word	0xe000ed00
 800b8e8:	05fa0000 	.word	0x05fa0000

0800b8ec <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b8ec:	4b1b      	ldr	r3, [pc, #108]	; (800b95c <HAL_NVIC_SetPriority+0x70>)
 800b8ee:	68db      	ldr	r3, [r3, #12]
 800b8f0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b8f4:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b8f6:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b8fa:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b8fe:	f1be 0f04 	cmp.w	lr, #4
 800b902:	bf28      	it	cs
 800b904:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b908:	f1bc 0f06 	cmp.w	ip, #6
 800b90c:	d91a      	bls.n	800b944 <HAL_NVIC_SetPriority+0x58>
 800b90e:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b910:	f04f 3cff 	mov.w	ip, #4294967295
 800b914:	fa0c fc03 	lsl.w	ip, ip, r3
 800b918:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b91c:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800b920:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b922:	fa0c fc0e 	lsl.w	ip, ip, lr
 800b926:	ea21 010c 	bic.w	r1, r1, ip
 800b92a:	fa01 f103 	lsl.w	r1, r1, r3
 800b92e:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800b932:	db0a      	blt.n	800b94a <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b934:	0109      	lsls	r1, r1, #4
 800b936:	4b0a      	ldr	r3, [pc, #40]	; (800b960 <HAL_NVIC_SetPriority+0x74>)
 800b938:	b2c9      	uxtb	r1, r1
 800b93a:	4403      	add	r3, r0
 800b93c:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800b940:	f85d fb04 	ldr.w	pc, [sp], #4
 800b944:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b946:	4613      	mov	r3, r2
 800b948:	e7e8      	b.n	800b91c <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b94a:	f000 000f 	and.w	r0, r0, #15
 800b94e:	0109      	lsls	r1, r1, #4
 800b950:	4b04      	ldr	r3, [pc, #16]	; (800b964 <HAL_NVIC_SetPriority+0x78>)
 800b952:	b2c9      	uxtb	r1, r1
 800b954:	4403      	add	r3, r0
 800b956:	7619      	strb	r1, [r3, #24]
 800b958:	f85d fb04 	ldr.w	pc, [sp], #4
 800b95c:	e000ed00 	.word	0xe000ed00
 800b960:	e000e100 	.word	0xe000e100
 800b964:	e000ecfc 	.word	0xe000ecfc

0800b968 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800b968:	2800      	cmp	r0, #0
 800b96a:	db07      	blt.n	800b97c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b96c:	f000 011f 	and.w	r1, r0, #31
 800b970:	2301      	movs	r3, #1
 800b972:	0940      	lsrs	r0, r0, #5
 800b974:	4a02      	ldr	r2, [pc, #8]	; (800b980 <HAL_NVIC_EnableIRQ+0x18>)
 800b976:	408b      	lsls	r3, r1
 800b978:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800b97c:	4770      	bx	lr
 800b97e:	bf00      	nop
 800b980:	e000e100 	.word	0xe000e100

0800b984 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800b984:	2800      	cmp	r0, #0
 800b986:	db0c      	blt.n	800b9a2 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b988:	0943      	lsrs	r3, r0, #5
 800b98a:	2201      	movs	r2, #1
 800b98c:	f000 001f 	and.w	r0, r0, #31
 800b990:	4904      	ldr	r1, [pc, #16]	; (800b9a4 <HAL_NVIC_DisableIRQ+0x20>)
 800b992:	3320      	adds	r3, #32
 800b994:	4082      	lsls	r2, r0
 800b996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800b99a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800b99e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800b9a2:	4770      	bx	lr
 800b9a4:	e000e100 	.word	0xe000e100

0800b9a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b9a8:	1e43      	subs	r3, r0, #1
 800b9aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b9ae:	d20c      	bcs.n	800b9ca <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b9b0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b9b4:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b9b6:	4906      	ldr	r1, [pc, #24]	; (800b9d0 <HAL_SYSTICK_Config+0x28>)
 800b9b8:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b9bc:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b9be:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b9c0:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b9c4:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b9c6:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b9c8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800b9ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800b9cc:	4770      	bx	lr
 800b9ce:	bf00      	nop
 800b9d0:	e000ed00 	.word	0xe000ed00

0800b9d4 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800b9d4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800b9d8:	4b04      	ldr	r3, [pc, #16]	; (800b9ec <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800b9da:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800b9dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b9de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b9e2:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 800b9e4:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 800b9e8:	4770      	bx	lr
 800b9ea:	bf00      	nop
 800b9ec:	e000ed00 	.word	0xe000ed00

0800b9f0 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800b9f0:	4b06      	ldr	r3, [pc, #24]	; (800ba0c <HAL_MPU_Enable+0x1c>)
 800b9f2:	f040 0001 	orr.w	r0, r0, #1
 800b9f6:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800b9fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b9fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ba00:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800ba02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ba06:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800ba0a:	4770      	bx	lr
 800ba0c:	e000ed00 	.word	0xe000ed00

0800ba10 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800ba10:	4a17      	ldr	r2, [pc, #92]	; (800ba70 <HAL_MPU_ConfigRegion+0x60>)
 800ba12:	7843      	ldrb	r3, [r0, #1]
 800ba14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 800ba18:	7801      	ldrb	r1, [r0, #0]
 800ba1a:	b321      	cbz	r1, 800ba66 <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800ba1c:	6843      	ldr	r3, [r0, #4]
{
 800ba1e:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
 800ba20:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800ba24:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800ba26:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800ba2a:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800ba2c:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800ba30:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800ba34:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800ba38:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800ba3a:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800ba3c:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800ba40:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800ba44:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800ba48:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800ba4c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 800ba50:	7a01      	ldrb	r1, [r0, #8]
 800ba52:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800ba56:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800ba5a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800ba5e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800ba62:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
 800ba66:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 800ba6a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 800ba6e:	4770      	bx	lr
 800ba70:	e000ed00 	.word	0xe000ed00

0800ba74 <HAL_DCMI_MspInit>:
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_MspInit could be implemented in the user file
   */
}
 800ba74:	4770      	bx	lr
 800ba76:	bf00      	nop

0800ba78 <HAL_DCMI_Init>:
  if (hdcmi == NULL)
 800ba78:	2800      	cmp	r0, #0
 800ba7a:	d047      	beq.n	800bb0c <HAL_DCMI_Init+0x94>
{
 800ba7c:	b570      	push	{r4, r5, r6, lr}
  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800ba7e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800ba82:	4604      	mov	r4, r0
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d03e      	beq.n	800bb06 <HAL_DCMI_Init+0x8e>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800ba88:	2202      	movs	r2, #2
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800ba8a:	69a3      	ldr	r3, [r4, #24]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800ba8c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d134      	bne.n	800bafe <HAL_DCMI_Init+0x86>
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800ba94:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800ba96:	6861      	ldr	r1, [r4, #4]
 800ba98:	6966      	ldr	r6, [r4, #20]
 800ba9a:	430b      	orrs	r3, r1
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800ba9c:	6822      	ldr	r2, [r4, #0]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800ba9e:	2910      	cmp	r1, #16
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800baa0:	ea43 0306 	orr.w	r3, r3, r6
 800baa4:	68e6      	ldr	r6, [r4, #12]
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800baa6:	6815      	ldr	r5, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800baa8:	ea43 0306 	orr.w	r3, r3, r6
 800baac:	6926      	ldr	r6, [r4, #16]
 800baae:	ea43 0306 	orr.w	r3, r3, r6
 800bab2:	68a6      	ldr	r6, [r4, #8]
 800bab4:	ea43 0306 	orr.w	r3, r3, r6
 800bab8:	6a26      	ldr	r6, [r4, #32]
 800baba:	ea43 0306 	orr.w	r3, r3, r6
 800babe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bac0:	ea43 0306 	orr.w	r3, r3, r6
 800bac4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bac6:	ea43 0306 	orr.w	r3, r3, r6
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800baca:	4e11      	ldr	r6, [pc, #68]	; (800bb10 <HAL_DCMI_Init+0x98>)
 800bacc:	ea06 0605 	and.w	r6, r6, r5
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800bad0:	6b25      	ldr	r5, [r4, #48]	; 0x30
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800bad2:	6016      	str	r6, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800bad4:	ea43 0305 	orr.w	r3, r3, r5
 800bad8:	6815      	ldr	r5, [r2, #0]
 800bada:	ea43 0305 	orr.w	r3, r3, r5
 800bade:	ea43 0300 	orr.w	r3, r3, r0
 800bae2:	6013      	str	r3, [r2, #0]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800bae4:	d101      	bne.n	800baea <HAL_DCMI_Init+0x72>
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800bae6:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800bae8:	6193      	str	r3, [r2, #24]
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800baea:	68d3      	ldr	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800baec:	2000      	movs	r0, #0
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800baee:	2101      	movs	r1, #1
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800baf0:	f043 031e 	orr.w	r3, r3, #30
 800baf4:	60d3      	str	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800baf6:	64e0      	str	r0, [r4, #76]	; 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800baf8:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 800bafc:	bd70      	pop	{r4, r5, r6, pc}
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800bafe:	2200      	movs	r2, #0
 800bb00:	4610      	mov	r0, r2
 800bb02:	6262      	str	r2, [r4, #36]	; 0x24
 800bb04:	e7c7      	b.n	800ba96 <HAL_DCMI_Init+0x1e>
    HAL_DCMI_MspInit(hdcmi);
 800bb06:	f7ff ffb5 	bl	800ba74 <HAL_DCMI_MspInit>
 800bb0a:	e7bd      	b.n	800ba88 <HAL_DCMI_Init+0x10>
    return HAL_ERROR;
 800bb0c:	2001      	movs	r0, #1
}
 800bb0e:	4770      	bx	lr
 800bb10:	ffe0f007 	.word	0xffe0f007

0800bb14 <HAL_DCMI_MspDeInit>:
 800bb14:	4770      	bx	lr
 800bb16:	bf00      	nop

0800bb18 <HAL_DCMI_DeInit>:
{
 800bb18:	b510      	push	{r4, lr}
 800bb1a:	4604      	mov	r4, r0
  HAL_DCMI_MspDeInit(hdcmi);
 800bb1c:	f7ff fffa 	bl	800bb14 <HAL_DCMI_MspDeInit>
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800bb20:	2000      	movs	r0, #0
 800bb22:	64e0      	str	r0, [r4, #76]	; 0x4c
  __HAL_UNLOCK(hdcmi);
 800bb24:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  hdcmi->State = HAL_DCMI_STATE_RESET;
 800bb28:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800bb2c:	bd10      	pop	{r4, pc}
 800bb2e:	bf00      	nop

0800bb30 <HAL_DCMI_Stop>:
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800bb30:	4a1e      	ldr	r2, [pc, #120]	; (800bbac <HAL_DCMI_Stop+0x7c>)
 800bb32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
{
 800bb36:	b538      	push	{r3, r4, r5, lr}
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800bb38:	6812      	ldr	r2, [r2, #0]
 800bb3a:	4b1d      	ldr	r3, [pc, #116]	; (800bbb0 <HAL_DCMI_Stop+0x80>)
 800bb3c:	fba3 3202 	umull	r3, r2, r3, r2
  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800bb40:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800bb44:	0a52      	lsrs	r2, r2, #9
  __HAL_LOCK(hdcmi);
 800bb46:	2b01      	cmp	r3, #1
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800bb48:	fb01 f202 	mul.w	r2, r1, r2
  __HAL_LOCK(hdcmi);
 800bb4c:	d02a      	beq.n	800bba4 <HAL_DCMI_Stop+0x74>

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800bb4e:	6801      	ldr	r1, [r0, #0]
 800bb50:	4605      	mov	r5, r0
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800bb52:	2302      	movs	r3, #2
  __HAL_LOCK(hdcmi);
 800bb54:	2001      	movs	r0, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800bb56:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
  __HAL_LOCK(hdcmi);
 800bb5a:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800bb5e:	680b      	ldr	r3, [r1, #0]
 800bb60:	f023 0301 	bic.w	r3, r3, #1
 800bb64:	600b      	str	r3, [r1, #0]
 800bb66:	e003      	b.n	800bb70 <HAL_DCMI_Stop+0x40>

      status = HAL_TIMEOUT;
      break;
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800bb68:	680b      	ldr	r3, [r1, #0]
 800bb6a:	f013 0301 	ands.w	r3, r3, #1
 800bb6e:	d017      	beq.n	800bba0 <HAL_DCMI_Stop+0x70>
    if (count == 0U)
 800bb70:	3a01      	subs	r2, #1
 800bb72:	d1f9      	bne.n	800bb68 <HAL_DCMI_Stop+0x38>
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800bb74:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
      status = HAL_TIMEOUT;
 800bb76:	2403      	movs	r4, #3
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800bb78:	f043 0320 	orr.w	r3, r3, #32
 800bb7c:	64eb      	str	r3, [r5, #76]	; 0x4c

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 800bb7e:	680b      	ldr	r3, [r1, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 800bb80:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  __HAL_DCMI_DISABLE(hdcmi);
 800bb82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb86:	600b      	str	r3, [r1, #0]
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 800bb88:	f000 ff4e 	bl	800ca28 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800bb8c:	6ce9      	ldr	r1, [r5, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800bb8e:	2301      	movs	r3, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800bb90:	2200      	movs	r2, #0
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800bb92:	64e9      	str	r1, [r5, #76]	; 0x4c

  /* Return function status */
  return status;
}
 800bb94:	4620      	mov	r0, r4
  __HAL_UNLOCK(hdcmi);
 800bb96:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
  hdcmi->State = HAL_DCMI_STATE_READY;
 800bb9a:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 800bb9e:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800bba0:	461c      	mov	r4, r3
 800bba2:	e7ec      	b.n	800bb7e <HAL_DCMI_Stop+0x4e>
  __HAL_LOCK(hdcmi);
 800bba4:	2402      	movs	r4, #2
}
 800bba6:	4620      	mov	r0, r4
 800bba8:	bd38      	pop	{r3, r4, r5, pc}
 800bbaa:	bf00      	nop
 800bbac:	20007634 	.word	0x20007634
 800bbb0:	10624dd3 	.word	0x10624dd3

0800bbb4 <HAL_DCMI_Suspend>:
{
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800bbb4:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800bbb8:	4b1e      	ldr	r3, [pc, #120]	; (800bc34 <HAL_DCMI_Suspend+0x80>)
  __HAL_LOCK(hdcmi);
 800bbba:	2901      	cmp	r1, #1
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800bbbc:	681b      	ldr	r3, [r3, #0]
  __HAL_LOCK(hdcmi);
 800bbbe:	d037      	beq.n	800bc30 <HAL_DCMI_Suspend+0x7c>
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	2001      	movs	r0, #1

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 800bbc4:	f892 1035 	ldrb.w	r1, [r2, #53]	; 0x35
  __HAL_LOCK(hdcmi);
 800bbc8:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 800bbcc:	2902      	cmp	r1, #2
 800bbce:	d004      	beq.n	800bbda <HAL_DCMI_Suspend+0x26>
      }
    }
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800bbd0:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800bbd2:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdcmi);
 800bbd4:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34

  /* Return function status */
  return status;
}
 800bbd8:	4770      	bx	lr
{
 800bbda:	b500      	push	{lr}
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800bbdc:	4916      	ldr	r1, [pc, #88]	; (800bc38 <HAL_DCMI_Suspend+0x84>)
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 800bbde:	f04f 0e05 	mov.w	lr, #5
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800bbe2:	6810      	ldr	r0, [r2, #0]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800bbe4:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 800bbe8:	fba1 1303 	umull	r1, r3, r1, r3
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 800bbec:	f882 e035 	strb.w	lr, [r2, #53]	; 0x35
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800bbf0:	6801      	ldr	r1, [r0, #0]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800bbf2:	0a5b      	lsrs	r3, r3, #9
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800bbf4:	f021 0101 	bic.w	r1, r1, #1
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800bbf8:	fb0c f303 	mul.w	r3, ip, r3
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800bbfc:	6001      	str	r1, [r0, #0]
 800bbfe:	e002      	b.n	800bc06 <HAL_DCMI_Suspend+0x52>
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800bc00:	6801      	ldr	r1, [r0, #0]
 800bc02:	07c9      	lsls	r1, r1, #31
 800bc04:	d50e      	bpl.n	800bc24 <HAL_DCMI_Suspend+0x70>
      if (count == 0U)
 800bc06:	3b01      	subs	r3, #1
 800bc08:	d1fa      	bne.n	800bc00 <HAL_DCMI_Suspend+0x4c>
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800bc0a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        hdcmi->State = HAL_DCMI_STATE_READY;
 800bc0c:	2101      	movs	r1, #1
        status = HAL_TIMEOUT;
 800bc0e:	2003      	movs	r0, #3
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800bc10:	f043 0320 	orr.w	r3, r3, #32
 800bc14:	64d3      	str	r3, [r2, #76]	; 0x4c
  __HAL_UNLOCK(hdcmi);
 800bc16:	2300      	movs	r3, #0
        hdcmi->State = HAL_DCMI_STATE_READY;
 800bc18:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800bc1c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
}
 800bc20:	f85d fb04 	ldr.w	pc, [sp], #4
  __HAL_UNLOCK(hdcmi);
 800bc24:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800bc26:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdcmi);
 800bc28:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
}
 800bc2c:	f85d fb04 	ldr.w	pc, [sp], #4
  __HAL_LOCK(hdcmi);
 800bc30:	2002      	movs	r0, #2
 800bc32:	4770      	bx	lr
 800bc34:	20007634 	.word	0x20007634
 800bc38:	10624dd3 	.word	0x10624dd3

0800bc3c <HAL_DCMI_Resume>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Resume(DCMI_HandleTypeDef *hdcmi)
{
  /* Process locked */
  __HAL_LOCK(hdcmi);
 800bc3c:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
{
 800bc40:	4603      	mov	r3, r0
  __HAL_LOCK(hdcmi);
 800bc42:	2a01      	cmp	r2, #1
 800bc44:	d013      	beq.n	800bc6e <HAL_DCMI_Resume+0x32>

  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 800bc46:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
  __HAL_LOCK(hdcmi);
 800bc4a:	2101      	movs	r1, #1
  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 800bc4c:	2a05      	cmp	r2, #5
  __HAL_LOCK(hdcmi);
 800bc4e:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 800bc52:	d107      	bne.n	800bc64 <HAL_DCMI_Resume+0x28>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_BUSY;

    /* Disable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800bc54:	6801      	ldr	r1, [r0, #0]
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 800bc56:	2202      	movs	r2, #2
 800bc58:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800bc5c:	680a      	ldr	r2, [r1, #0]
 800bc5e:	f042 0201 	orr.w	r2, r2, #1
 800bc62:	600a      	str	r2, [r1, #0]
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800bc64:	2200      	movs	r2, #0

  /* Return function status */
  return HAL_OK;
 800bc66:	4610      	mov	r0, r2
  __HAL_UNLOCK(hdcmi);
 800bc68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return HAL_OK;
 800bc6c:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800bc6e:	2002      	movs	r0, #2
}
 800bc70:	4770      	bx	lr
 800bc72:	bf00      	nop

0800bc74 <DCMI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc74:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800bc76:	b508      	push	{r3, lr}

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800bc78:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800bc7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc7c:	2b02      	cmp	r3, #2
 800bc7e:	d006      	beq.n	800bc8e <DCMI_DMAError+0x1a>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800bc80:	2301      	movs	r3, #1
 800bc82:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800bc86:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800bc88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc8c:	64c3      	str	r3, [r0, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 800bc8e:	f7fe fed3 	bl	800aa38 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 800bc92:	bd08      	pop	{r3, pc}

0800bc94 <HAL_DCMI_IRQHandler>:
{
 800bc94:	b538      	push	{r3, r4, r5, lr}
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800bc96:	6803      	ldr	r3, [r0, #0]
{
 800bc98:	4604      	mov	r4, r0
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800bc9a:	691d      	ldr	r5, [r3, #16]
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 800bc9c:	0769      	lsls	r1, r5, #29
 800bc9e:	d437      	bmi.n	800bd10 <HAL_DCMI_IRQHandler+0x7c>
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 800bca0:	07aa      	lsls	r2, r5, #30
 800bca2:	d425      	bmi.n	800bcf0 <HAL_DCMI_IRQHandler+0x5c>
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 800bca4:	06eb      	lsls	r3, r5, #27
 800bca6:	d41c      	bmi.n	800bce2 <HAL_DCMI_IRQHandler+0x4e>
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 800bca8:	0728      	lsls	r0, r5, #28
 800bcaa:	d413      	bmi.n	800bcd4 <HAL_DCMI_IRQHandler+0x40>
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 800bcac:	07e9      	lsls	r1, r5, #31
 800bcae:	d510      	bpl.n	800bcd2 <HAL_DCMI_IRQHandler+0x3e>
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800bcb0:	6823      	ldr	r3, [r4, #0]
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	0792      	lsls	r2, r2, #30
 800bcb6:	d503      	bpl.n	800bcc0 <HAL_DCMI_IRQHandler+0x2c>
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800bcb8:	68da      	ldr	r2, [r3, #12]
 800bcba:	f022 021e 	bic.w	r2, r2, #30
 800bcbe:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800bcc0:	68da      	ldr	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800bcc2:	2101      	movs	r1, #1
    HAL_DCMI_FrameEventCallback(hdcmi);
 800bcc4:	4620      	mov	r0, r4
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800bcc6:	f022 0201 	bic.w	r2, r2, #1
 800bcca:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800bccc:	6159      	str	r1, [r3, #20]
    HAL_DCMI_FrameEventCallback(hdcmi);
 800bcce:	f7fe fea7 	bl	800aa20 <HAL_DCMI_FrameEventCallback>
}
 800bcd2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800bcd4:	6823      	ldr	r3, [r4, #0]
 800bcd6:	2208      	movs	r2, #8
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800bcd8:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800bcda:	615a      	str	r2, [r3, #20]
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800bcdc:	f7fe fea6 	bl	800aa2c <HAL_DCMI_VsyncEventCallback>
 800bce0:	e7e4      	b.n	800bcac <HAL_DCMI_IRQHandler+0x18>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800bce2:	6823      	ldr	r3, [r4, #0]
 800bce4:	2210      	movs	r2, #16
    HAL_DCMI_LineEventCallback(hdcmi);
 800bce6:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800bce8:	615a      	str	r2, [r3, #20]
    HAL_DCMI_LineEventCallback(hdcmi);
 800bcea:	f7fe fe93 	bl	800aa14 <HAL_DCMI_LineEventCallback>
 800bcee:	e7db      	b.n	800bca8 <HAL_DCMI_IRQHandler+0x14>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800bcf0:	6823      	ldr	r3, [r4, #0]
 800bcf2:	2102      	movs	r1, #2
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800bcf4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800bcf6:	2204      	movs	r2, #4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800bcf8:	6159      	str	r1, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800bcfa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800bcfc:	f043 0301 	orr.w	r3, r3, #1
 800bd00:	64e3      	str	r3, [r4, #76]	; 0x4c
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800bd02:	4b0a      	ldr	r3, [pc, #40]	; (800bd2c <HAL_DCMI_IRQHandler+0x98>)
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800bd04:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800bd08:	6503      	str	r3, [r0, #80]	; 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800bd0a:	f001 f805 	bl	800cd18 <HAL_DMA_Abort_IT>
 800bd0e:	e7c9      	b.n	800bca4 <HAL_DCMI_IRQHandler+0x10>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800bd10:	2204      	movs	r2, #4
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800bd12:	6c80      	ldr	r0, [r0, #72]	; 0x48
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800bd14:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800bd16:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800bd18:	f043 0302 	orr.w	r3, r3, #2
 800bd1c:	64e3      	str	r3, [r4, #76]	; 0x4c
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800bd1e:	4b03      	ldr	r3, [pc, #12]	; (800bd2c <HAL_DCMI_IRQHandler+0x98>)
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800bd20:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800bd24:	6503      	str	r3, [r0, #80]	; 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800bd26:	f000 fff7 	bl	800cd18 <HAL_DMA_Abort_IT>
 800bd2a:	e7b9      	b.n	800bca0 <HAL_DCMI_IRQHandler+0xc>
 800bd2c:	0800bc75 	.word	0x0800bc75

0800bd30 <HAL_DCMI_ConfigCrop>:
{
 800bd30:	4684      	mov	ip, r0
  __HAL_LOCK(hdcmi);
 800bd32:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800bd36:	2801      	cmp	r0, #1
 800bd38:	d015      	beq.n	800bd66 <HAL_DCMI_ConfigCrop+0x36>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800bd3a:	2002      	movs	r0, #2
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_CWSTRT_VST_Pos));
 800bd3c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  __HAL_UNLOCK(hdcmi);
 800bd40:	2100      	movs	r1, #0
{
 800bd42:	b510      	push	{r4, lr}
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 800bd44:	9c02      	ldr	r4, [sp, #8]
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800bd46:	f04f 0e01 	mov.w	lr, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800bd4a:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 800bd4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bd52:	f8dc 0000 	ldr.w	r0, [ip]
 800bd56:	6243      	str	r3, [r0, #36]	; 0x24
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_CWSTRT_VST_Pos));
 800bd58:	6202      	str	r2, [r0, #32]
  return HAL_OK;
 800bd5a:	4608      	mov	r0, r1
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800bd5c:	f88c e035 	strb.w	lr, [ip, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800bd60:	f88c 1034 	strb.w	r1, [ip, #52]	; 0x34
}
 800bd64:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdcmi);
 800bd66:	2002      	movs	r0, #2
}
 800bd68:	4770      	bx	lr
 800bd6a:	bf00      	nop

0800bd6c <HAL_DCMI_DisableCrop>:
  __HAL_LOCK(hdcmi);
 800bd6c:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
{
 800bd70:	4603      	mov	r3, r0
  __HAL_LOCK(hdcmi);
 800bd72:	2a01      	cmp	r2, #1
 800bd74:	d010      	beq.n	800bd98 <HAL_DCMI_DisableCrop+0x2c>
  hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;
 800bd76:	6800      	ldr	r0, [r0, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800bd78:	2202      	movs	r2, #2
  __HAL_UNLOCK(hdcmi);
 800bd7a:	2100      	movs	r1, #0
  hdcmi->State = HAL_DCMI_STATE_READY;
 800bd7c:	f04f 0c01 	mov.w	ip, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800bd80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;
 800bd84:	6802      	ldr	r2, [r0, #0]
 800bd86:	f022 0204 	bic.w	r2, r2, #4
 800bd8a:	6002      	str	r2, [r0, #0]
  return HAL_OK;
 800bd8c:	4608      	mov	r0, r1
  hdcmi->State = HAL_DCMI_STATE_READY;
 800bd8e:	f883 c035 	strb.w	ip, [r3, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800bd92:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
  return HAL_OK;
 800bd96:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800bd98:	2002      	movs	r0, #2
}
 800bd9a:	4770      	bx	lr

0800bd9c <HAL_DCMI_EnableCrop>:
  __HAL_LOCK(hdcmi);
 800bd9c:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
{
 800bda0:	4603      	mov	r3, r0
  __HAL_LOCK(hdcmi);
 800bda2:	2a01      	cmp	r2, #1
 800bda4:	d010      	beq.n	800bdc8 <HAL_DCMI_EnableCrop+0x2c>
  hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 800bda6:	6800      	ldr	r0, [r0, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800bda8:	2202      	movs	r2, #2
  __HAL_UNLOCK(hdcmi);
 800bdaa:	2100      	movs	r1, #0
  hdcmi->State = HAL_DCMI_STATE_READY;
 800bdac:	f04f 0c01 	mov.w	ip, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800bdb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 800bdb4:	6802      	ldr	r2, [r0, #0]
 800bdb6:	f042 0204 	orr.w	r2, r2, #4
 800bdba:	6002      	str	r2, [r0, #0]
  return HAL_OK;
 800bdbc:	4608      	mov	r0, r1
  hdcmi->State = HAL_DCMI_STATE_READY;
 800bdbe:	f883 c035 	strb.w	ip, [r3, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800bdc2:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
  return HAL_OK;
 800bdc6:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800bdc8:	2002      	movs	r0, #2
}
 800bdca:	4770      	bx	lr

0800bdcc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bdcc:	6802      	ldr	r2, [r0, #0]
{
 800bdce:	4601      	mov	r1, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bdd0:	4b32      	ldr	r3, [pc, #200]	; (800be9c <DMA_CalcBaseAndBitshift+0xd0>)
 800bdd2:	4833      	ldr	r0, [pc, #204]	; (800bea0 <DMA_CalcBaseAndBitshift+0xd4>)
{
 800bdd4:	b470      	push	{r4, r5, r6}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bdd6:	4e33      	ldr	r6, [pc, #204]	; (800bea4 <DMA_CalcBaseAndBitshift+0xd8>)
 800bdd8:	4d33      	ldr	r5, [pc, #204]	; (800bea8 <DMA_CalcBaseAndBitshift+0xdc>)
 800bdda:	42b2      	cmp	r2, r6
 800bddc:	bf18      	it	ne
 800bdde:	429a      	cmpne	r2, r3
 800bde0:	4c32      	ldr	r4, [pc, #200]	; (800beac <DMA_CalcBaseAndBitshift+0xe0>)
 800bde2:	bf0c      	ite	eq
 800bde4:	2301      	moveq	r3, #1
 800bde6:	2300      	movne	r3, #0
 800bde8:	42aa      	cmp	r2, r5
 800bdea:	bf08      	it	eq
 800bdec:	f043 0301 	orreq.w	r3, r3, #1
 800bdf0:	42a2      	cmp	r2, r4
 800bdf2:	bf08      	it	eq
 800bdf4:	f043 0301 	orreq.w	r3, r3, #1
 800bdf8:	3430      	adds	r4, #48	; 0x30
 800bdfa:	4282      	cmp	r2, r0
 800bdfc:	bf08      	it	eq
 800bdfe:	f043 0301 	orreq.w	r3, r3, #1
 800be02:	3030      	adds	r0, #48	; 0x30
 800be04:	42a2      	cmp	r2, r4
 800be06:	bf08      	it	eq
 800be08:	f043 0301 	orreq.w	r3, r3, #1
 800be0c:	3430      	adds	r4, #48	; 0x30
 800be0e:	4282      	cmp	r2, r0
 800be10:	bf08      	it	eq
 800be12:	f043 0301 	orreq.w	r3, r3, #1
 800be16:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800be1a:	42a2      	cmp	r2, r4
 800be1c:	bf08      	it	eq
 800be1e:	f043 0301 	orreq.w	r3, r3, #1
 800be22:	f504 745c 	add.w	r4, r4, #880	; 0x370
 800be26:	4282      	cmp	r2, r0
 800be28:	bf08      	it	eq
 800be2a:	f043 0301 	orreq.w	r3, r3, #1
 800be2e:	3030      	adds	r0, #48	; 0x30
 800be30:	42a2      	cmp	r2, r4
 800be32:	bf08      	it	eq
 800be34:	f043 0301 	orreq.w	r3, r3, #1
 800be38:	3430      	adds	r4, #48	; 0x30
 800be3a:	4282      	cmp	r2, r0
 800be3c:	bf08      	it	eq
 800be3e:	f043 0301 	orreq.w	r3, r3, #1
 800be42:	3030      	adds	r0, #48	; 0x30
 800be44:	42a2      	cmp	r2, r4
 800be46:	bf08      	it	eq
 800be48:	f043 0301 	orreq.w	r3, r3, #1
 800be4c:	3430      	adds	r4, #48	; 0x30
 800be4e:	4282      	cmp	r2, r0
 800be50:	bf08      	it	eq
 800be52:	f043 0301 	orreq.w	r3, r3, #1
 800be56:	3030      	adds	r0, #48	; 0x30
 800be58:	42a2      	cmp	r2, r4
 800be5a:	bf08      	it	eq
 800be5c:	f043 0301 	orreq.w	r3, r3, #1
 800be60:	4282      	cmp	r2, r0
 800be62:	bf08      	it	eq
 800be64:	f043 0301 	orreq.w	r3, r3, #1
 800be68:	b913      	cbnz	r3, 800be70 <DMA_CalcBaseAndBitshift+0xa4>
 800be6a:	4b11      	ldr	r3, [pc, #68]	; (800beb0 <DMA_CalcBaseAndBitshift+0xe4>)
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d112      	bne.n	800be96 <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800be70:	b2d3      	uxtb	r3, r2
 800be72:	4810      	ldr	r0, [pc, #64]	; (800beb4 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800be74:	4c10      	ldr	r4, [pc, #64]	; (800beb8 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800be76:	3b10      	subs	r3, #16
 800be78:	fba0 5003 	umull	r5, r0, r0, r3

    if (stream_number > 3U)
 800be7c:	2b5f      	cmp	r3, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800be7e:	ea4f 1010 	mov.w	r0, r0, lsr #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800be82:	5c20      	ldrb	r0, [r4, r0]
 800be84:	65c8      	str	r0, [r1, #92]	; 0x5c
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800be86:	480d      	ldr	r0, [pc, #52]	; (800bebc <DMA_CalcBaseAndBitshift+0xf0>)
 800be88:	ea00 0002 	and.w	r0, r0, r2
 800be8c:	bf88      	it	hi
 800be8e:	3004      	addhi	r0, #4
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800be90:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 800be92:	bc70      	pop	{r4, r5, r6}
 800be94:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800be96:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 800be9a:	e7f9      	b.n	800be90 <DMA_CalcBaseAndBitshift+0xc4>
 800be9c:	40020010 	.word	0x40020010
 800bea0:	40020070 	.word	0x40020070
 800bea4:	40020028 	.word	0x40020028
 800bea8:	40020040 	.word	0x40020040
 800beac:	40020058 	.word	0x40020058
 800beb0:	400204b8 	.word	0x400204b8
 800beb4:	aaaaaaab 	.word	0xaaaaaaab
 800beb8:	08099308 	.word	0x08099308
 800bebc:	fffffc00 	.word	0xfffffc00

0800bec0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800bec0:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800bec2:	4a27      	ldr	r2, [pc, #156]	; (800bf60 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 800bec4:	4927      	ldr	r1, [pc, #156]	; (800bf64 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
 800bec6:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800bec8:	4d27      	ldr	r5, [pc, #156]	; (800bf68 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 800beca:	4c28      	ldr	r4, [pc, #160]	; (800bf6c <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 800becc:	42ab      	cmp	r3, r5
 800bece:	bf18      	it	ne
 800bed0:	4293      	cmpne	r3, r2
 800bed2:	bf0c      	ite	eq
 800bed4:	2201      	moveq	r2, #1
 800bed6:	2200      	movne	r2, #0
 800bed8:	428b      	cmp	r3, r1
 800beda:	bf08      	it	eq
 800bedc:	f042 0201 	orreq.w	r2, r2, #1
 800bee0:	3128      	adds	r1, #40	; 0x28
 800bee2:	42a3      	cmp	r3, r4
 800bee4:	bf08      	it	eq
 800bee6:	f042 0201 	orreq.w	r2, r2, #1
 800beea:	3428      	adds	r4, #40	; 0x28
 800beec:	428b      	cmp	r3, r1
 800beee:	bf08      	it	eq
 800bef0:	f042 0201 	orreq.w	r2, r2, #1
 800bef4:	3128      	adds	r1, #40	; 0x28
 800bef6:	42a3      	cmp	r3, r4
 800bef8:	bf08      	it	eq
 800befa:	f042 0201 	orreq.w	r2, r2, #1
 800befe:	428b      	cmp	r3, r1
 800bf00:	bf08      	it	eq
 800bf02:	f042 0201 	orreq.w	r2, r2, #1
 800bf06:	b912      	cbnz	r2, 800bf0e <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 800bf08:	4a19      	ldr	r2, [pc, #100]	; (800bf70 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d113      	bne.n	800bf36 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800bf0e:	b2db      	uxtb	r3, r3
 800bf10:	4918      	ldr	r1, [pc, #96]	; (800bf74 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800bf12:	4a19      	ldr	r2, [pc, #100]	; (800bf78 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800bf14:	3b08      	subs	r3, #8
 800bf16:	4c19      	ldr	r4, [pc, #100]	; (800bf7c <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
 800bf18:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800bf1c:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800bf1e:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800bf22:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800bf26:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800bf28:	fa01 f303 	lsl.w	r3, r1, r3
 800bf2c:	6683      	str	r3, [r0, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800bf2e:	e9c0 2418 	strd	r2, r4, [r0, #96]	; 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800bf32:	bc30      	pop	{r4, r5}
 800bf34:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800bf36:	b2d9      	uxtb	r1, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800bf38:	4a11      	ldr	r2, [pc, #68]	; (800bf80 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800bf3a:	4c12      	ldr	r4, [pc, #72]	; (800bf84 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
 800bf3c:	3910      	subs	r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800bf3e:	441a      	add	r2, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800bf40:	fba4 4101 	umull	r4, r1, r4, r1
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800bf44:	2aa8      	cmp	r2, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800bf46:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800bf4a:	d800      	bhi.n	800bf4e <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 800bf4c:	3108      	adds	r1, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800bf4e:	4a0e      	ldr	r2, [pc, #56]	; (800bf88 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800bf50:	f001 041f 	and.w	r4, r1, #31
 800bf54:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800bf56:	440a      	add	r2, r1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800bf58:	40a3      	lsls	r3, r4
 800bf5a:	4c0c      	ldr	r4, [pc, #48]	; (800bf8c <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800bf5c:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800bf5e:	e7e5      	b.n	800bf2c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
 800bf60:	58025408 	.word	0x58025408
 800bf64:	58025430 	.word	0x58025430
 800bf68:	5802541c 	.word	0x5802541c
 800bf6c:	58025444 	.word	0x58025444
 800bf70:	58025494 	.word	0x58025494
 800bf74:	cccccccd 	.word	0xcccccccd
 800bf78:	16009600 	.word	0x16009600
 800bf7c:	58025880 	.word	0x58025880
 800bf80:	bffdfbf0 	.word	0xbffdfbf0
 800bf84:	aaaaaaab 	.word	0xaaaaaaab
 800bf88:	10008200 	.word	0x10008200
 800bf8c:	40020880 	.word	0x40020880

0800bf90 <HAL_DMA_Init>:
{
 800bf90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf94:	4605      	mov	r5, r0
 800bf96:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 800bf98:	f7ff fc70 	bl	800b87c <HAL_GetTick>
  if(hdma == NULL)
 800bf9c:	2d00      	cmp	r5, #0
 800bf9e:	f000 8199 	beq.w	800c2d4 <HAL_DMA_Init+0x344>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bfa2:	682c      	ldr	r4, [r5, #0]
 800bfa4:	4606      	mov	r6, r0
 800bfa6:	4ba0      	ldr	r3, [pc, #640]	; (800c228 <HAL_DMA_Init+0x298>)
 800bfa8:	429c      	cmp	r4, r3
 800bfaa:	d048      	beq.n	800c03e <HAL_DMA_Init+0xae>
 800bfac:	3318      	adds	r3, #24
 800bfae:	429c      	cmp	r4, r3
 800bfb0:	d045      	beq.n	800c03e <HAL_DMA_Init+0xae>
 800bfb2:	3330      	adds	r3, #48	; 0x30
 800bfb4:	4a9d      	ldr	r2, [pc, #628]	; (800c22c <HAL_DMA_Init+0x29c>)
 800bfb6:	4294      	cmp	r4, r2
 800bfb8:	bf18      	it	ne
 800bfba:	429c      	cmpne	r4, r3
 800bfbc:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800bfc0:	bf0c      	ite	eq
 800bfc2:	2301      	moveq	r3, #1
 800bfc4:	2300      	movne	r3, #0
 800bfc6:	4294      	cmp	r4, r2
 800bfc8:	bf08      	it	eq
 800bfca:	f043 0301 	orreq.w	r3, r3, #1
 800bfce:	3218      	adds	r2, #24
 800bfd0:	4294      	cmp	r4, r2
 800bfd2:	bf08      	it	eq
 800bfd4:	f043 0301 	orreq.w	r3, r3, #1
 800bfd8:	3218      	adds	r2, #24
 800bfda:	4294      	cmp	r4, r2
 800bfdc:	bf08      	it	eq
 800bfde:	f043 0301 	orreq.w	r3, r3, #1
 800bfe2:	3218      	adds	r2, #24
 800bfe4:	4294      	cmp	r4, r2
 800bfe6:	bf08      	it	eq
 800bfe8:	f043 0301 	orreq.w	r3, r3, #1
 800bfec:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800bff0:	4294      	cmp	r4, r2
 800bff2:	bf08      	it	eq
 800bff4:	f043 0301 	orreq.w	r3, r3, #1
 800bff8:	3218      	adds	r2, #24
 800bffa:	4294      	cmp	r4, r2
 800bffc:	bf08      	it	eq
 800bffe:	f043 0301 	orreq.w	r3, r3, #1
 800c002:	3218      	adds	r2, #24
 800c004:	4294      	cmp	r4, r2
 800c006:	bf08      	it	eq
 800c008:	f043 0301 	orreq.w	r3, r3, #1
 800c00c:	3218      	adds	r2, #24
 800c00e:	4294      	cmp	r4, r2
 800c010:	bf08      	it	eq
 800c012:	f043 0301 	orreq.w	r3, r3, #1
 800c016:	3218      	adds	r2, #24
 800c018:	4294      	cmp	r4, r2
 800c01a:	bf08      	it	eq
 800c01c:	f043 0301 	orreq.w	r3, r3, #1
 800c020:	3218      	adds	r2, #24
 800c022:	4294      	cmp	r4, r2
 800c024:	bf08      	it	eq
 800c026:	f043 0301 	orreq.w	r3, r3, #1
 800c02a:	3218      	adds	r2, #24
 800c02c:	4294      	cmp	r4, r2
 800c02e:	bf08      	it	eq
 800c030:	f043 0301 	orreq.w	r3, r3, #1
 800c034:	b91b      	cbnz	r3, 800c03e <HAL_DMA_Init+0xae>
 800c036:	4b7e      	ldr	r3, [pc, #504]	; (800c230 <HAL_DMA_Init+0x2a0>)
 800c038:	429c      	cmp	r4, r3
 800c03a:	f040 81a4 	bne.w	800c386 <HAL_DMA_Init+0x3f6>
    hdma->State = HAL_DMA_STATE_BUSY;
 800c03e:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 800c040:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800c042:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800c046:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 800c04a:	6823      	ldr	r3, [r4, #0]
 800c04c:	f023 0301 	bic.w	r3, r3, #1
 800c050:	6023      	str	r3, [r4, #0]
 800c052:	e006      	b.n	800c062 <HAL_DMA_Init+0xd2>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c054:	f7ff fc12 	bl	800b87c <HAL_GetTick>
 800c058:	1b80      	subs	r0, r0, r6
 800c05a:	2805      	cmp	r0, #5
 800c05c:	f200 8120 	bhi.w	800c2a0 <HAL_DMA_Init+0x310>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800c060:	682c      	ldr	r4, [r5, #0]
 800c062:	6823      	ldr	r3, [r4, #0]
 800c064:	07df      	lsls	r7, r3, #31
 800c066:	d4f5      	bmi.n	800c054 <HAL_DMA_Init+0xc4>
    registerValue |=  hdma->Init.Direction           |
 800c068:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c06c:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 800c06e:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c070:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800c072:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c074:	430b      	orrs	r3, r1
 800c076:	6969      	ldr	r1, [r5, #20]
 800c078:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c07a:	69e9      	ldr	r1, [r5, #28]
 800c07c:	4313      	orrs	r3, r2
 800c07e:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c080:	496c      	ldr	r1, [pc, #432]	; (800c234 <HAL_DMA_Init+0x2a4>)
 800c082:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 800c084:	6a28      	ldr	r0, [r5, #32]
 800c086:	4303      	orrs	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800c088:	486b      	ldr	r0, [pc, #428]	; (800c238 <HAL_DMA_Init+0x2a8>)
    registerValue |=  hdma->Init.Direction           |
 800c08a:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c08c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800c08e:	2904      	cmp	r1, #4
 800c090:	f000 8124 	beq.w	800c2dc <HAL_DMA_Init+0x34c>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800c094:	6806      	ldr	r6, [r0, #0]
 800c096:	4869      	ldr	r0, [pc, #420]	; (800c23c <HAL_DMA_Init+0x2ac>)
 800c098:	4030      	ands	r0, r6
 800c09a:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 800c09e:	f080 80dd 	bcs.w	800c25c <HAL_DMA_Init+0x2cc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800c0a2:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800c0a4:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c0a6:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 800c0aa:	430b      	orrs	r3, r1
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800c0ac:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	f7ff fe8c 	bl	800bdcc <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c0b4:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800c0b6:	233f      	movs	r3, #63	; 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c0b8:	495b      	ldr	r1, [pc, #364]	; (800c228 <HAL_DMA_Init+0x298>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c0ba:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c0be:	4e60      	ldr	r6, [pc, #384]	; (800c240 <HAL_DMA_Init+0x2b0>)
 800c0c0:	4f60      	ldr	r7, [pc, #384]	; (800c244 <HAL_DMA_Init+0x2b4>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c0c2:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c0c4:	4a60      	ldr	r2, [pc, #384]	; (800c248 <HAL_DMA_Init+0x2b8>)
 800c0c6:	1ba6      	subs	r6, r4, r6
 800c0c8:	1be7      	subs	r7, r4, r7
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c0ca:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c0cc:	eba4 0b02 	sub.w	fp, r4, r2
 800c0d0:	4b5e      	ldr	r3, [pc, #376]	; (800c24c <HAL_DMA_Init+0x2bc>)
 800c0d2:	fab6 f686 	clz	r6, r6
 800c0d6:	fabb fb8b 	clz	fp, fp
 800c0da:	fab7 f787 	clz	r7, r7
 800c0de:	eba4 0a03 	sub.w	sl, r4, r3
 800c0e2:	4b5b      	ldr	r3, [pc, #364]	; (800c250 <HAL_DMA_Init+0x2c0>)
 800c0e4:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 800c0e8:	485a      	ldr	r0, [pc, #360]	; (800c254 <HAL_DMA_Init+0x2c4>)
 800c0ea:	429c      	cmp	r4, r3
 800c0ec:	bf18      	it	ne
 800c0ee:	428c      	cmpne	r4, r1
 800c0f0:	f103 0318 	add.w	r3, r3, #24
 800c0f4:	faba fa8a 	clz	sl, sl
 800c0f8:	ea4f 1656 	mov.w	r6, r6, lsr #5
 800c0fc:	bf0c      	ite	eq
 800c0fe:	2101      	moveq	r1, #1
 800c100:	2100      	movne	r1, #0
 800c102:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 800c106:	1a22      	subs	r2, r4, r0
 800c108:	429c      	cmp	r4, r3
 800c10a:	bf08      	it	eq
 800c10c:	f041 0101 	orreq.w	r1, r1, #1
 800c110:	3318      	adds	r3, #24
 800c112:	097f      	lsrs	r7, r7, #5
 800c114:	fab2 f282 	clz	r2, r2
 800c118:	429c      	cmp	r4, r3
 800c11a:	bf08      	it	eq
 800c11c:	f041 0101 	orreq.w	r1, r1, #1
 800c120:	3318      	adds	r3, #24
 800c122:	0952      	lsrs	r2, r2, #5
 800c124:	429c      	cmp	r4, r3
 800c126:	bf08      	it	eq
 800c128:	f041 0101 	orreq.w	r1, r1, #1
 800c12c:	3318      	adds	r3, #24
 800c12e:	9201      	str	r2, [sp, #4]
 800c130:	429c      	cmp	r4, r3
 800c132:	bf08      	it	eq
 800c134:	f041 0101 	orreq.w	r1, r1, #1
 800c138:	3318      	adds	r3, #24
 800c13a:	429c      	cmp	r4, r3
 800c13c:	bf08      	it	eq
 800c13e:	f041 0101 	orreq.w	r1, r1, #1
 800c142:	3318      	adds	r3, #24
 800c144:	429c      	cmp	r4, r3
 800c146:	bf08      	it	eq
 800c148:	f041 0101 	orreq.w	r1, r1, #1
 800c14c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800c150:	429c      	cmp	r4, r3
 800c152:	bf08      	it	eq
 800c154:	f041 0101 	orreq.w	r1, r1, #1
 800c158:	3318      	adds	r3, #24
 800c15a:	429c      	cmp	r4, r3
 800c15c:	bf08      	it	eq
 800c15e:	f041 0101 	orreq.w	r1, r1, #1
 800c162:	3318      	adds	r3, #24
 800c164:	429c      	cmp	r4, r3
 800c166:	bf08      	it	eq
 800c168:	f041 0101 	orreq.w	r1, r1, #1
 800c16c:	3318      	adds	r3, #24
 800c16e:	429c      	cmp	r4, r3
 800c170:	bf08      	it	eq
 800c172:	f041 0101 	orreq.w	r1, r1, #1
 800c176:	3318      	adds	r3, #24
 800c178:	429c      	cmp	r4, r3
 800c17a:	bf08      	it	eq
 800c17c:	f041 0101 	orreq.w	r1, r1, #1
 800c180:	3318      	adds	r3, #24
 800c182:	429c      	cmp	r4, r3
 800c184:	bf08      	it	eq
 800c186:	f041 0101 	orreq.w	r1, r1, #1
 800c18a:	3318      	adds	r3, #24
 800c18c:	429c      	cmp	r4, r3
 800c18e:	bf08      	it	eq
 800c190:	f041 0101 	orreq.w	r1, r1, #1
 800c194:	3318      	adds	r3, #24
 800c196:	429c      	cmp	r4, r3
 800c198:	bf08      	it	eq
 800c19a:	f041 0101 	orreq.w	r1, r1, #1
 800c19e:	4b2e      	ldr	r3, [pc, #184]	; (800c258 <HAL_DMA_Init+0x2c8>)
 800c1a0:	ea4b 0101 	orr.w	r1, fp, r1
 800c1a4:	eba4 0803 	sub.w	r8, r4, r3
 800c1a8:	3314      	adds	r3, #20
 800c1aa:	ea4a 0101 	orr.w	r1, sl, r1
 800c1ae:	fab8 f888 	clz	r8, r8
 800c1b2:	eba4 0903 	sub.w	r9, r4, r3
 800c1b6:	3314      	adds	r3, #20
 800c1b8:	4331      	orrs	r1, r6
 800c1ba:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800c1be:	fab9 f989 	clz	r9, r9
 800c1c2:	1ae3      	subs	r3, r4, r3
 800c1c4:	4339      	orrs	r1, r7
 800c1c6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 800c1ca:	fab3 f383 	clz	r3, r3
 800c1ce:	ea48 0101 	orr.w	r1, r8, r1
 800c1d2:	095b      	lsrs	r3, r3, #5
 800c1d4:	ea49 0101 	orr.w	r1, r9, r1
 800c1d8:	4319      	orrs	r1, r3
 800c1da:	d100      	bne.n	800c1de <HAL_DMA_Init+0x24e>
 800c1dc:	b1da      	cbz	r2, 800c216 <HAL_DMA_Init+0x286>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800c1de:	4628      	mov	r0, r5
 800c1e0:	9300      	str	r3, [sp, #0]
 800c1e2:	f7ff fe6d 	bl	800bec0 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800c1e6:	68a9      	ldr	r1, [r5, #8]
 800c1e8:	9b00      	ldr	r3, [sp, #0]
 800c1ea:	2980      	cmp	r1, #128	; 0x80
 800c1ec:	d066      	beq.n	800c2bc <HAL_DMA_Init+0x32c>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800c1ee:	6868      	ldr	r0, [r5, #4]
 800c1f0:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 800c1f2:	b2c4      	uxtb	r4, r0
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800c1f4:	3801      	subs	r0, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c1f6:	e9d5 c119 	ldrd	ip, r1, [r5, #100]	; 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800c1fa:	2807      	cmp	r0, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800c1fc:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c1fe:	f8cc 1004 	str.w	r1, [ip, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800c202:	d862      	bhi.n	800c2ca <HAL_DMA_Init+0x33a>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800c204:	1e61      	subs	r1, r4, #1
 800c206:	2907      	cmp	r1, #7
 800c208:	d979      	bls.n	800c2fe <HAL_DMA_Init+0x36e>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c20a:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 800c20c:	e9d5 301b 	ldrd	r3, r0, [r5, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800c210:	2100      	movs	r1, #0
 800c212:	6019      	str	r1, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c214:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c216:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800c218:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c21a:	6568      	str	r0, [r5, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800c21c:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 800c220:	b003      	add	sp, #12
 800c222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c226:	bf00      	nop
 800c228:	40020010 	.word	0x40020010
 800c22c:	40020040 	.word	0x40020040
 800c230:	400204b8 	.word	0x400204b8
 800c234:	fe10803f 	.word	0xfe10803f
 800c238:	5c001000 	.word	0x5c001000
 800c23c:	ffff0000 	.word	0xffff0000
 800c240:	58025430 	.word	0x58025430
 800c244:	58025444 	.word	0x58025444
 800c248:	58025408 	.word	0x58025408
 800c24c:	5802541c 	.word	0x5802541c
 800c250:	40020028 	.word	0x40020028
 800c254:	58025494 	.word	0x58025494
 800c258:	58025458 	.word	0x58025458
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800c25c:	6868      	ldr	r0, [r5, #4]
 800c25e:	f1a0 0629 	sub.w	r6, r0, #41	; 0x29
 800c262:	2e1f      	cmp	r6, #31
 800c264:	d925      	bls.n	800c2b2 <HAL_DMA_Init+0x322>
 800c266:	384f      	subs	r0, #79	; 0x4f
 800c268:	2803      	cmp	r0, #3
 800c26a:	d801      	bhi.n	800c270 <HAL_DMA_Init+0x2e0>
        registerValue |= DMA_SxCR_TRBUFF;
 800c26c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800c270:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c272:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800c274:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c276:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 800c27a:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c27e:	f47f af15 	bne.w	800c0ac <HAL_DMA_Init+0x11c>
 800c282:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 800c284:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800c286:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c288:	2800      	cmp	r0, #0
 800c28a:	f43f af0f 	beq.w	800c0ac <HAL_DMA_Init+0x11c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c28e:	2a00      	cmp	r2, #0
 800c290:	d153      	bne.n	800c33a <HAL_DMA_Init+0x3aa>
    switch (hdma->Init.FIFOThreshold)
 800c292:	2901      	cmp	r1, #1
 800c294:	d072      	beq.n	800c37c <HAL_DMA_Init+0x3ec>
 800c296:	f031 0202 	bics.w	r2, r1, #2
 800c29a:	f47f af07 	bne.w	800c0ac <HAL_DMA_Init+0x11c>
 800c29e:	e054      	b.n	800c34a <HAL_DMA_Init+0x3ba>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c2a0:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 800c2a2:	2303      	movs	r3, #3
        return HAL_ERROR;
 800c2a4:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c2a6:	656a      	str	r2, [r5, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 800c2a8:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 800c2ac:	b003      	add	sp, #12
 800c2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800c2b2:	4878      	ldr	r0, [pc, #480]	; (800c494 <HAL_DMA_Init+0x504>)
 800c2b4:	40f0      	lsrs	r0, r6
 800c2b6:	07c0      	lsls	r0, r0, #31
 800c2b8:	d5da      	bpl.n	800c270 <HAL_DMA_Init+0x2e0>
 800c2ba:	e7d7      	b.n	800c26c <HAL_DMA_Init+0x2dc>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800c2bc:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c2be:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 800c2c0:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800c2c4:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800c2c6:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c2c8:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 800c2ca:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 800c2cc:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800c2d0:	676b      	str	r3, [r5, #116]	; 0x74
 800c2d2:	e7a0      	b.n	800c216 <HAL_DMA_Init+0x286>
    return HAL_ERROR;
 800c2d4:	2001      	movs	r0, #1
}
 800c2d6:	b003      	add	sp, #12
 800c2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800c2dc:	6807      	ldr	r7, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c2de:	e9d5 060b 	ldrd	r0, r6, [r5, #44]	; 0x2c
 800c2e2:	4306      	orrs	r6, r0
 800c2e4:	4333      	orrs	r3, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800c2e6:	4e6c      	ldr	r6, [pc, #432]	; (800c498 <HAL_DMA_Init+0x508>)
 800c2e8:	403e      	ands	r6, r7
 800c2ea:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 800c2ee:	d2b5      	bcs.n	800c25c <HAL_DMA_Init+0x2cc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800c2f0:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800c2f2:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c2f4:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 800c2f8:	f043 0304 	orr.w	r3, r3, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c2fc:	e7c2      	b.n	800c284 <HAL_DMA_Init+0x2f4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800c2fe:	9a01      	ldr	r2, [sp, #4]
 800c300:	431a      	orrs	r2, r3
 800c302:	ea49 0902 	orr.w	r9, r9, r2
 800c306:	ea48 0809 	orr.w	r8, r8, r9
 800c30a:	ea47 0708 	orr.w	r7, r7, r8
 800c30e:	433e      	orrs	r6, r7
 800c310:	ea5a 0606 	orrs.w	r6, sl, r6
 800c314:	d107      	bne.n	800c326 <HAL_DMA_Init+0x396>
 800c316:	f1bb 0f00 	cmp.w	fp, #0
 800c31a:	d104      	bne.n	800c326 <HAL_DMA_Init+0x396>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c31c:	4b5f      	ldr	r3, [pc, #380]	; (800c49c <HAL_DMA_Init+0x50c>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800c31e:	4860      	ldr	r0, [pc, #384]	; (800c4a0 <HAL_DMA_Init+0x510>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c320:	4423      	add	r3, r4
 800c322:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800c324:	e003      	b.n	800c32e <HAL_DMA_Init+0x39e>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800c326:	4b5f      	ldr	r3, [pc, #380]	; (800c4a4 <HAL_DMA_Init+0x514>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800c328:	485f      	ldr	r0, [pc, #380]	; (800c4a8 <HAL_DMA_Init+0x518>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800c32a:	4423      	add	r3, r4
 800c32c:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800c32e:	2201      	movs	r2, #1
 800c330:	408a      	lsls	r2, r1
 800c332:	e9c5 301b 	strd	r3, r0, [r5, #108]	; 0x6c
 800c336:	676a      	str	r2, [r5, #116]	; 0x74
 800c338:	e76a      	b.n	800c210 <HAL_DMA_Init+0x280>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c33a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800c33e:	d00e      	beq.n	800c35e <HAL_DMA_Init+0x3ce>
    switch (hdma->Init.FIFOThreshold)
 800c340:	2902      	cmp	r1, #2
 800c342:	d905      	bls.n	800c350 <HAL_DMA_Init+0x3c0>
 800c344:	2903      	cmp	r1, #3
 800c346:	f47f aeb1 	bne.w	800c0ac <HAL_DMA_Init+0x11c>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c34a:	01c2      	lsls	r2, r0, #7
 800c34c:	f57f aeae 	bpl.w	800c0ac <HAL_DMA_Init+0x11c>
          hdma->State = HAL_DMA_STATE_READY;
 800c350:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c352:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 800c354:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c356:	656a      	str	r2, [r5, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 800c358:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
          return HAL_ERROR;
 800c35c:	e7a6      	b.n	800c2ac <HAL_DMA_Init+0x31c>
    switch (hdma->Init.FIFOThreshold)
 800c35e:	2903      	cmp	r1, #3
 800c360:	f63f aea4 	bhi.w	800c0ac <HAL_DMA_Init+0x11c>
 800c364:	a201      	add	r2, pc, #4	; (adr r2, 800c36c <HAL_DMA_Init+0x3dc>)
 800c366:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 800c36a:	bf00      	nop
 800c36c:	0800c351 	.word	0x0800c351
 800c370:	0800c34b 	.word	0x0800c34b
 800c374:	0800c351 	.word	0x0800c351
 800c378:	0800c37d 	.word	0x0800c37d
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c37c:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 800c380:	f47f ae94 	bne.w	800c0ac <HAL_DMA_Init+0x11c>
 800c384:	e7e4      	b.n	800c350 <HAL_DMA_Init+0x3c0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800c386:	4a49      	ldr	r2, [pc, #292]	; (800c4ac <HAL_DMA_Init+0x51c>)
 800c388:	4b49      	ldr	r3, [pc, #292]	; (800c4b0 <HAL_DMA_Init+0x520>)
 800c38a:	eba4 0b02 	sub.w	fp, r4, r2
 800c38e:	4e49      	ldr	r6, [pc, #292]	; (800c4b4 <HAL_DMA_Init+0x524>)
 800c390:	eba4 0a03 	sub.w	sl, r4, r3
 800c394:	4f48      	ldr	r7, [pc, #288]	; (800c4b8 <HAL_DMA_Init+0x528>)
 800c396:	fabb fb8b 	clz	fp, fp
 800c39a:	1ba6      	subs	r6, r4, r6
 800c39c:	faba fa8a 	clz	sl, sl
 800c3a0:	333c      	adds	r3, #60	; 0x3c
 800c3a2:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 800c3a6:	fab6 f686 	clz	r6, r6
 800c3aa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 800c3ae:	1be7      	subs	r7, r4, r7
 800c3b0:	eba4 0803 	sub.w	r8, r4, r3
 800c3b4:	0976      	lsrs	r6, r6, #5
 800c3b6:	3314      	adds	r3, #20
 800c3b8:	fab7 f787 	clz	r7, r7
 800c3bc:	ea4b 010a 	orr.w	r1, fp, sl
 800c3c0:	fab8 f888 	clz	r8, r8
 800c3c4:	eba4 0903 	sub.w	r9, r4, r3
 800c3c8:	097f      	lsrs	r7, r7, #5
 800c3ca:	4331      	orrs	r1, r6
 800c3cc:	3314      	adds	r3, #20
 800c3ce:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800c3d2:	fab9 f989 	clz	r9, r9
 800c3d6:	4339      	orrs	r1, r7
 800c3d8:	1ae3      	subs	r3, r4, r3
 800c3da:	4838      	ldr	r0, [pc, #224]	; (800c4bc <HAL_DMA_Init+0x52c>)
 800c3dc:	ea4f 1959 	mov.w	r9, r9, lsr #5
 800c3e0:	ea48 0101 	orr.w	r1, r8, r1
 800c3e4:	fab3 f383 	clz	r3, r3
 800c3e8:	1a22      	subs	r2, r4, r0
 800c3ea:	ea49 0101 	orr.w	r1, r9, r1
 800c3ee:	095b      	lsrs	r3, r3, #5
 800c3f0:	fab2 f282 	clz	r2, r2
 800c3f4:	4319      	orrs	r1, r3
 800c3f6:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800c3fa:	9201      	str	r2, [sp, #4]
 800c3fc:	d101      	bne.n	800c402 <HAL_DMA_Init+0x472>
 800c3fe:	2a00      	cmp	r2, #0
 800c400:	d041      	beq.n	800c486 <HAL_DMA_Init+0x4f6>
    __HAL_UNLOCK(hdma);
 800c402:	2100      	movs	r1, #0
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800c404:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800c4c8 <HAL_DMA_Init+0x538>
    __HAL_UNLOCK(hdma);
 800c408:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 800c40c:	2102      	movs	r1, #2
 800c40e:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800c412:	6821      	ldr	r1, [r4, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800c414:	ea01 0c0c 	and.w	ip, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800c418:	68a9      	ldr	r1, [r5, #8]
 800c41a:	2940      	cmp	r1, #64	; 0x40
 800c41c:	d030      	beq.n	800c480 <HAL_DMA_Init+0x4f0>
 800c41e:	f1a1 0180 	sub.w	r1, r1, #128	; 0x80
 800c422:	fab1 f181 	clz	r1, r1
 800c426:	0949      	lsrs	r1, r1, #5
 800c428:	ea4f 3e81 	mov.w	lr, r1, lsl #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800c42c:	6929      	ldr	r1, [r5, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800c42e:	68e8      	ldr	r0, [r5, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800c430:	08c9      	lsrs	r1, r1, #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800c432:	4a23      	ldr	r2, [pc, #140]	; (800c4c0 <HAL_DMA_Init+0x530>)
 800c434:	9300      	str	r3, [sp, #0]
 800c436:	ea41 00d0 	orr.w	r0, r1, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800c43a:	6969      	ldr	r1, [r5, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800c43c:	4422      	add	r2, r4
 800c43e:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800c442:	69a9      	ldr	r1, [r5, #24]
 800c444:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800c448:	69e9      	ldr	r1, [r5, #28]
 800c44a:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800c44e:	6a29      	ldr	r1, [r5, #32]
 800c450:	ea40 1111 	orr.w	r1, r0, r1, lsr #4
 800c454:	ea41 010c 	orr.w	r1, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800c458:	ea4e 0101 	orr.w	r1, lr, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800c45c:	6021      	str	r1, [r4, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800c45e:	4919      	ldr	r1, [pc, #100]	; (800c4c4 <HAL_DMA_Init+0x534>)
 800c460:	fba1 0102 	umull	r0, r1, r1, r2
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c464:	4628      	mov	r0, r5
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800c466:	0909      	lsrs	r1, r1, #4
 800c468:	0089      	lsls	r1, r1, #2
 800c46a:	65e9      	str	r1, [r5, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c46c:	f7ff fcae 	bl	800bdcc <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c470:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 800c472:	9b00      	ldr	r3, [sp, #0]
 800c474:	f001 041f 	and.w	r4, r1, #31
 800c478:	2101      	movs	r1, #1
 800c47a:	40a1      	lsls	r1, r4
 800c47c:	6041      	str	r1, [r0, #4]
 800c47e:	e6ae      	b.n	800c1de <HAL_DMA_Init+0x24e>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800c480:	f04f 0e10 	mov.w	lr, #16
 800c484:	e7d2      	b.n	800c42c <HAL_DMA_Init+0x49c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c486:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 800c488:	2303      	movs	r3, #3
    return HAL_ERROR;
 800c48a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c48c:	656a      	str	r2, [r5, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800c48e:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    return HAL_ERROR;
 800c492:	e70b      	b.n	800c2ac <HAL_DMA_Init+0x31c>
 800c494:	c3c0003f 	.word	0xc3c0003f
 800c498:	ffff0000 	.word	0xffff0000
 800c49c:	1000823f 	.word	0x1000823f
 800c4a0:	40020940 	.word	0x40020940
 800c4a4:	1600963f 	.word	0x1600963f
 800c4a8:	58025940 	.word	0x58025940
 800c4ac:	58025408 	.word	0x58025408
 800c4b0:	5802541c 	.word	0x5802541c
 800c4b4:	58025430 	.word	0x58025430
 800c4b8:	58025444 	.word	0x58025444
 800c4bc:	58025494 	.word	0x58025494
 800c4c0:	a7fdabf8 	.word	0xa7fdabf8
 800c4c4:	cccccccd 	.word	0xcccccccd
 800c4c8:	fffe000f 	.word	0xfffe000f

0800c4cc <HAL_DMA_DeInit>:
  if(hdma == NULL)
 800c4cc:	2800      	cmp	r0, #0
 800c4ce:	f000 80f2 	beq.w	800c6b6 <HAL_DMA_DeInit+0x1ea>
  __HAL_DMA_DISABLE(hdma);
 800c4d2:	497c      	ldr	r1, [pc, #496]	; (800c6c4 <HAL_DMA_DeInit+0x1f8>)
 800c4d4:	4a7c      	ldr	r2, [pc, #496]	; (800c6c8 <HAL_DMA_DeInit+0x1fc>)
{
 800c4d6:	b538      	push	{r3, r4, r5, lr}
  __HAL_DMA_DISABLE(hdma);
 800c4d8:	6804      	ldr	r4, [r0, #0]
 800c4da:	4605      	mov	r5, r0
 800c4dc:	4b7b      	ldr	r3, [pc, #492]	; (800c6cc <HAL_DMA_DeInit+0x200>)
 800c4de:	428c      	cmp	r4, r1
 800c4e0:	bf18      	it	ne
 800c4e2:	429c      	cmpne	r4, r3
 800c4e4:	f101 0148 	add.w	r1, r1, #72	; 0x48
 800c4e8:	bf0c      	ite	eq
 800c4ea:	2301      	moveq	r3, #1
 800c4ec:	2300      	movne	r3, #0
 800c4ee:	4294      	cmp	r4, r2
 800c4f0:	bf08      	it	eq
 800c4f2:	f043 0301 	orreq.w	r3, r3, #1
 800c4f6:	3230      	adds	r2, #48	; 0x30
 800c4f8:	428c      	cmp	r4, r1
 800c4fa:	bf08      	it	eq
 800c4fc:	f043 0301 	orreq.w	r3, r3, #1
 800c500:	3130      	adds	r1, #48	; 0x30
 800c502:	4294      	cmp	r4, r2
 800c504:	bf08      	it	eq
 800c506:	f043 0301 	orreq.w	r3, r3, #1
 800c50a:	f502 725c 	add.w	r2, r2, #880	; 0x370
 800c50e:	428c      	cmp	r4, r1
 800c510:	bf08      	it	eq
 800c512:	f043 0301 	orreq.w	r3, r3, #1
 800c516:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800c51a:	4294      	cmp	r4, r2
 800c51c:	bf08      	it	eq
 800c51e:	f043 0301 	orreq.w	r3, r3, #1
 800c522:	3230      	adds	r2, #48	; 0x30
 800c524:	428c      	cmp	r4, r1
 800c526:	bf08      	it	eq
 800c528:	f043 0301 	orreq.w	r3, r3, #1
 800c52c:	3130      	adds	r1, #48	; 0x30
 800c52e:	4294      	cmp	r4, r2
 800c530:	bf08      	it	eq
 800c532:	f043 0301 	orreq.w	r3, r3, #1
 800c536:	3230      	adds	r2, #48	; 0x30
 800c538:	428c      	cmp	r4, r1
 800c53a:	bf08      	it	eq
 800c53c:	f043 0301 	orreq.w	r3, r3, #1
 800c540:	3130      	adds	r1, #48	; 0x30
 800c542:	4294      	cmp	r4, r2
 800c544:	bf08      	it	eq
 800c546:	f043 0301 	orreq.w	r3, r3, #1
 800c54a:	3230      	adds	r2, #48	; 0x30
 800c54c:	428c      	cmp	r4, r1
 800c54e:	bf08      	it	eq
 800c550:	f043 0301 	orreq.w	r3, r3, #1
 800c554:	4294      	cmp	r4, r2
 800c556:	bf08      	it	eq
 800c558:	f043 0301 	orreq.w	r3, r3, #1
 800c55c:	3218      	adds	r2, #24
 800c55e:	4294      	cmp	r4, r2
 800c560:	bf08      	it	eq
 800c562:	f043 0301 	orreq.w	r3, r3, #1
 800c566:	b933      	cbnz	r3, 800c576 <HAL_DMA_DeInit+0xaa>
 800c568:	f5a2 6295 	sub.w	r2, r2, #1192	; 0x4a8
 800c56c:	4b58      	ldr	r3, [pc, #352]	; (800c6d0 <HAL_DMA_DeInit+0x204>)
 800c56e:	429c      	cmp	r4, r3
 800c570:	bf18      	it	ne
 800c572:	4294      	cmpne	r4, r2
 800c574:	d164      	bne.n	800c640 <HAL_DMA_DeInit+0x174>
 800c576:	6822      	ldr	r2, [r4, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800c578:	2300      	movs	r3, #0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800c57a:	2121      	movs	r1, #33	; 0x21
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c57c:	4628      	mov	r0, r5
  __HAL_DMA_DISABLE(hdma);
 800c57e:	f022 0201 	bic.w	r2, r2, #1
 800c582:	6022      	str	r2, [r4, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800c584:	6023      	str	r3, [r4, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800c586:	6063      	str	r3, [r4, #4]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800c588:	60a3      	str	r3, [r4, #8]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800c58a:	60e3      	str	r3, [r4, #12]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800c58c:	6123      	str	r3, [r4, #16]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800c58e:	6161      	str	r1, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c590:	f7ff fc1c 	bl	800bdcc <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c594:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800c596:	233f      	movs	r3, #63	; 0x3f
 800c598:	f002 021f 	and.w	r2, r2, #31
 800c59c:	4093      	lsls	r3, r2
 800c59e:	6083      	str	r3, [r0, #8]
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800c5a0:	4628      	mov	r0, r5
 800c5a2:	f7ff fc8d 	bl	800bec0 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->DMAmuxChannel != 0U)
 800c5a6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800c5a8:	b123      	cbz	r3, 800c5b4 <HAL_DMA_DeInit+0xe8>
      hdma->DMAmuxChannel->CCR = 0U;
 800c5aa:	2100      	movs	r1, #0
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c5ac:	6e6a      	ldr	r2, [r5, #100]	; 0x64
      hdma->DMAmuxChannel->CCR = 0U;
 800c5ae:	6019      	str	r1, [r3, #0]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c5b0:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800c5b2:	6053      	str	r3, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800c5b4:	6869      	ldr	r1, [r5, #4]
 800c5b6:	1e4b      	subs	r3, r1, #1
 800c5b8:	2b07      	cmp	r3, #7
 800c5ba:	d910      	bls.n	800c5de <HAL_DMA_DeInit+0x112>
    hdma->DMAmuxRequestGen = 0U;
 800c5bc:	2300      	movs	r3, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c5be:	656b      	str	r3, [r5, #84]	; 0x54
  return HAL_OK;
 800c5c0:	4618      	mov	r0, r3
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800c5c2:	676b      	str	r3, [r5, #116]	; 0x74
  hdma->State = HAL_DMA_STATE_RESET;
 800c5c4:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 800c5c8:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    hdma->DMAmuxRequestGenStatus = 0U;
 800c5cc:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
  hdma->XferHalfCpltCallback   = NULL;
 800c5d0:	e9c5 330f 	strd	r3, r3, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 800c5d4:	e9c5 3311 	strd	r3, r3, [r5, #68]	; 0x44
  hdma->XferAbortCallback      = NULL;
 800c5d8:	e9c5 3313 	strd	r3, r3, [r5, #76]	; 0x4c
}
 800c5dc:	bd38      	pop	{r3, r4, r5, pc}
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800c5de:	4a3d      	ldr	r2, [pc, #244]	; (800c6d4 <HAL_DMA_DeInit+0x208>)
 800c5e0:	483d      	ldr	r0, [pc, #244]	; (800c6d8 <HAL_DMA_DeInit+0x20c>)
 800c5e2:	4284      	cmp	r4, r0
 800c5e4:	bf18      	it	ne
 800c5e6:	4294      	cmpne	r4, r2
 800c5e8:	f100 0014 	add.w	r0, r0, #20
 800c5ec:	bf0c      	ite	eq
 800c5ee:	2201      	moveq	r2, #1
 800c5f0:	2200      	movne	r2, #0
 800c5f2:	4284      	cmp	r4, r0
 800c5f4:	bf08      	it	eq
 800c5f6:	f042 0201 	orreq.w	r2, r2, #1
 800c5fa:	3014      	adds	r0, #20
 800c5fc:	4284      	cmp	r4, r0
 800c5fe:	bf08      	it	eq
 800c600:	f042 0201 	orreq.w	r2, r2, #1
 800c604:	3014      	adds	r0, #20
 800c606:	4284      	cmp	r4, r0
 800c608:	bf08      	it	eq
 800c60a:	f042 0201 	orreq.w	r2, r2, #1
 800c60e:	3014      	adds	r0, #20
 800c610:	4284      	cmp	r4, r0
 800c612:	bf08      	it	eq
 800c614:	f042 0201 	orreq.w	r2, r2, #1
 800c618:	3014      	adds	r0, #20
 800c61a:	4284      	cmp	r4, r0
 800c61c:	bf08      	it	eq
 800c61e:	f042 0201 	orreq.w	r2, r2, #1
 800c622:	b912      	cbnz	r2, 800c62a <HAL_DMA_DeInit+0x15e>
 800c624:	4a2d      	ldr	r2, [pc, #180]	; (800c6dc <HAL_DMA_DeInit+0x210>)
 800c626:	4294      	cmp	r4, r2
 800c628:	d147      	bne.n	800c6ba <HAL_DMA_DeInit+0x1ee>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800c62a:	4a2d      	ldr	r2, [pc, #180]	; (800c6e0 <HAL_DMA_DeInit+0x214>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800c62c:	482d      	ldr	r0, [pc, #180]	; (800c6e4 <HAL_DMA_DeInit+0x218>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800c62e:	440a      	add	r2, r1
 800c630:	0091      	lsls	r1, r2, #2
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800c632:	2201      	movs	r2, #1
 800c634:	fa02 f303 	lsl.w	r3, r2, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800c638:	2200      	movs	r2, #0
 800c63a:	600a      	str	r2, [r1, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c63c:	6043      	str	r3, [r0, #4]
 800c63e:	e7bd      	b.n	800c5bc <HAL_DMA_DeInit+0xf0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800c640:	4b24      	ldr	r3, [pc, #144]	; (800c6d4 <HAL_DMA_DeInit+0x208>)
 800c642:	4825      	ldr	r0, [pc, #148]	; (800c6d8 <HAL_DMA_DeInit+0x20c>)
 800c644:	4928      	ldr	r1, [pc, #160]	; (800c6e8 <HAL_DMA_DeInit+0x21c>)
 800c646:	4284      	cmp	r4, r0
 800c648:	bf18      	it	ne
 800c64a:	429c      	cmpne	r4, r3
  __HAL_DMA_DISABLE(hdma);
 800c64c:	6822      	ldr	r2, [r4, #0]
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800c64e:	bf0c      	ite	eq
 800c650:	2301      	moveq	r3, #1
 800c652:	2300      	movne	r3, #0
  __HAL_DMA_DISABLE(hdma);
 800c654:	f022 0201 	bic.w	r2, r2, #1
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800c658:	428c      	cmp	r4, r1
 800c65a:	bf08      	it	eq
 800c65c:	f043 0301 	orreq.w	r3, r3, #1
 800c660:	3114      	adds	r1, #20
  __HAL_DMA_DISABLE(hdma);
 800c662:	6022      	str	r2, [r4, #0]
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800c664:	428c      	cmp	r4, r1
 800c666:	bf08      	it	eq
 800c668:	f043 0301 	orreq.w	r3, r3, #1
 800c66c:	4a1f      	ldr	r2, [pc, #124]	; (800c6ec <HAL_DMA_DeInit+0x220>)
 800c66e:	3128      	adds	r1, #40	; 0x28
 800c670:	4294      	cmp	r4, r2
 800c672:	bf08      	it	eq
 800c674:	f043 0301 	orreq.w	r3, r3, #1
 800c678:	3228      	adds	r2, #40	; 0x28
 800c67a:	428c      	cmp	r4, r1
 800c67c:	bf08      	it	eq
 800c67e:	f043 0301 	orreq.w	r3, r3, #1
 800c682:	4294      	cmp	r4, r2
 800c684:	bf08      	it	eq
 800c686:	f043 0301 	orreq.w	r3, r3, #1
 800c68a:	b913      	cbnz	r3, 800c692 <HAL_DMA_DeInit+0x1c6>
 800c68c:	4b13      	ldr	r3, [pc, #76]	; (800c6dc <HAL_DMA_DeInit+0x210>)
 800c68e:	429c      	cmp	r4, r3
 800c690:	d10f      	bne.n	800c6b2 <HAL_DMA_DeInit+0x1e6>
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800c692:	2300      	movs	r3, #0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c694:	4628      	mov	r0, r5
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800c696:	6023      	str	r3, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 800c698:	6063      	str	r3, [r4, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 800c69a:	60a3      	str	r3, [r4, #8]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800c69c:	60e3      	str	r3, [r4, #12]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 800c69e:	6123      	str	r3, [r4, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c6a0:	f7ff fb94 	bl	800bdcc <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c6a4:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	f002 021f 	and.w	r2, r2, #31
 800c6ac:	4093      	lsls	r3, r2
 800c6ae:	6043      	str	r3, [r0, #4]
 800c6b0:	e776      	b.n	800c5a0 <HAL_DMA_DeInit+0xd4>
    return HAL_ERROR;
 800c6b2:	2001      	movs	r0, #1
}
 800c6b4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c6b6:	2001      	movs	r0, #1
}
 800c6b8:	4770      	bx	lr
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c6ba:	4a0d      	ldr	r2, [pc, #52]	; (800c6f0 <HAL_DMA_DeInit+0x224>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800c6bc:	480d      	ldr	r0, [pc, #52]	; (800c6f4 <HAL_DMA_DeInit+0x228>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c6be:	440a      	add	r2, r1
 800c6c0:	0091      	lsls	r1, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800c6c2:	e7b6      	b.n	800c632 <HAL_DMA_DeInit+0x166>
 800c6c4:	40020040 	.word	0x40020040
 800c6c8:	40020070 	.word	0x40020070
 800c6cc:	40020058 	.word	0x40020058
 800c6d0:	40020028 	.word	0x40020028
 800c6d4:	58025408 	.word	0x58025408
 800c6d8:	5802541c 	.word	0x5802541c
 800c6dc:	58025494 	.word	0x58025494
 800c6e0:	1600963f 	.word	0x1600963f
 800c6e4:	58025940 	.word	0x58025940
 800c6e8:	58025430 	.word	0x58025430
 800c6ec:	58025458 	.word	0x58025458
 800c6f0:	1000823f 	.word	0x1000823f
 800c6f4:	40020940 	.word	0x40020940

0800c6f8 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	f000 8177 	beq.w	800c9ec <HAL_DMA_Start_IT+0x2f4>
 800c6fe:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 800c700:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800c704:	2801      	cmp	r0, #1
 800c706:	f000 8173 	beq.w	800c9f0 <HAL_DMA_Start_IT+0x2f8>
 800c70a:	2001      	movs	r0, #1
{
 800c70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(HAL_DMA_STATE_READY == hdma->State)
 800c710:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 800c714:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800c718:	4284      	cmp	r4, r0
 800c71a:	d008      	beq.n	800c72e <HAL_DMA_Start_IT+0x36>
    __HAL_UNLOCK(hdma);
 800c71c:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800c71e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 800c722:	f88c 2034 	strb.w	r2, [ip, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800c726:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
}
 800c72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800c72e:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 800c730:	f8dc 4000 	ldr.w	r4, [ip]
 800c734:	4d53      	ldr	r5, [pc, #332]	; (800c884 <HAL_DMA_Start_IT+0x18c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 800c736:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c73a:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800c73c:	4e52      	ldr	r6, [pc, #328]	; (800c888 <HAL_DMA_Start_IT+0x190>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c73e:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 800c742:	4852      	ldr	r0, [pc, #328]	; (800c88c <HAL_DMA_Start_IT+0x194>)
 800c744:	42ac      	cmp	r4, r5
 800c746:	bf18      	it	ne
 800c748:	4284      	cmpne	r4, r0
 800c74a:	f105 0518 	add.w	r5, r5, #24
 800c74e:	bf0c      	ite	eq
 800c750:	2001      	moveq	r0, #1
 800c752:	2000      	movne	r0, #0
 800c754:	42ac      	cmp	r4, r5
 800c756:	bf08      	it	eq
 800c758:	f040 0001 	orreq.w	r0, r0, #1
 800c75c:	3518      	adds	r5, #24
 800c75e:	42ac      	cmp	r4, r5
 800c760:	bf08      	it	eq
 800c762:	f040 0001 	orreq.w	r0, r0, #1
 800c766:	3518      	adds	r5, #24
 800c768:	42ac      	cmp	r4, r5
 800c76a:	bf08      	it	eq
 800c76c:	f040 0001 	orreq.w	r0, r0, #1
 800c770:	3518      	adds	r5, #24
 800c772:	42ac      	cmp	r4, r5
 800c774:	bf08      	it	eq
 800c776:	f040 0001 	orreq.w	r0, r0, #1
 800c77a:	f505 7556 	add.w	r5, r5, #856	; 0x358
 800c77e:	42ac      	cmp	r4, r5
 800c780:	bf08      	it	eq
 800c782:	f040 0001 	orreq.w	r0, r0, #1
 800c786:	3518      	adds	r5, #24
 800c788:	42ac      	cmp	r4, r5
 800c78a:	bf08      	it	eq
 800c78c:	f040 0001 	orreq.w	r0, r0, #1
 800c790:	3518      	adds	r5, #24
 800c792:	42ac      	cmp	r4, r5
 800c794:	bf08      	it	eq
 800c796:	f040 0001 	orreq.w	r0, r0, #1
 800c79a:	3518      	adds	r5, #24
 800c79c:	42ac      	cmp	r4, r5
 800c79e:	bf08      	it	eq
 800c7a0:	f040 0001 	orreq.w	r0, r0, #1
 800c7a4:	3518      	adds	r5, #24
 800c7a6:	42ac      	cmp	r4, r5
 800c7a8:	bf08      	it	eq
 800c7aa:	f040 0001 	orreq.w	r0, r0, #1
 800c7ae:	3518      	adds	r5, #24
 800c7b0:	42ac      	cmp	r4, r5
 800c7b2:	bf08      	it	eq
 800c7b4:	f040 0001 	orreq.w	r0, r0, #1
 800c7b8:	3518      	adds	r5, #24
 800c7ba:	42ac      	cmp	r4, r5
 800c7bc:	bf08      	it	eq
 800c7be:	f040 0001 	orreq.w	r0, r0, #1
 800c7c2:	3518      	adds	r5, #24
 800c7c4:	42ac      	cmp	r4, r5
 800c7c6:	bf14      	ite	ne
 800c7c8:	4681      	movne	r9, r0
 800c7ca:	f040 0901 	orreq.w	r9, r0, #1
 800c7ce:	f5a5 6595 	sub.w	r5, r5, #1192	; 0x4a8
 800c7d2:	42b4      	cmp	r4, r6
 800c7d4:	bf18      	it	ne
 800c7d6:	42ac      	cmpne	r4, r5
 800c7d8:	bf0c      	ite	eq
 800c7da:	2501      	moveq	r5, #1
 800c7dc:	2500      	movne	r5, #0
 800c7de:	d002      	beq.n	800c7e6 <HAL_DMA_Start_IT+0xee>
 800c7e0:	f1b9 0f00 	cmp.w	r9, #0
 800c7e4:	d054      	beq.n	800c890 <HAL_DMA_Start_IT+0x198>
 800c7e6:	6826      	ldr	r6, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c7e8:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 800c7ec:	f026 0601 	bic.w	r6, r6, #1
 800c7f0:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c7f2:	2d00      	cmp	r5, #0
 800c7f4:	d078      	beq.n	800c8e8 <HAL_DMA_Start_IT+0x1f0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c7f6:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 800c7fa:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800c7fc:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 800c800:	b117      	cbz	r7, 800c808 <HAL_DMA_Start_IT+0x110>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c802:	e9dc 601c 	ldrd	r6, r0, [ip, #112]	; 0x70
 800c806:	6070      	str	r0, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c808:	f8dc 605c 	ldr.w	r6, [ip, #92]	; 0x5c
 800c80c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 800c810:	f006 081f 	and.w	r8, r6, #31
 800c814:	fa0e fe08 	lsl.w	lr, lr, r8
 800c818:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c81c:	6826      	ldr	r6, [r4, #0]
 800c81e:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 800c822:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800c824:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c826:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800c82a:	2b40      	cmp	r3, #64	; 0x40
 800c82c:	f000 80e2 	beq.w	800c9f4 <HAL_DMA_Start_IT+0x2fc>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800c830:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800c832:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c834:	b91d      	cbnz	r5, 800c83e <HAL_DMA_Start_IT+0x146>
 800c836:	f1b9 0f00 	cmp.w	r9, #0
 800c83a:	f000 80e1 	beq.w	800ca00 <HAL_DMA_Start_IT+0x308>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800c83e:	6823      	ldr	r3, [r4, #0]
 800c840:	f023 031e 	bic.w	r3, r3, #30
 800c844:	f043 0316 	orr.w	r3, r3, #22
 800c848:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800c84a:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800c84e:	b11b      	cbz	r3, 800c858 <HAL_DMA_Start_IT+0x160>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800c850:	6823      	ldr	r3, [r4, #0]
 800c852:	f043 0308 	orr.w	r3, r3, #8
 800c856:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800c858:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	03d2      	lsls	r2, r2, #15
 800c860:	d503      	bpl.n	800c86a <HAL_DMA_Start_IT+0x172>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800c862:	681a      	ldr	r2, [r3, #0]
 800c864:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c868:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800c86a:	b11f      	cbz	r7, 800c874 <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c872:	603b      	str	r3, [r7, #0]
    __HAL_DMA_ENABLE(hdma);
 800c874:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c876:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800c878:	f043 0301 	orr.w	r3, r3, #1
 800c87c:	6023      	str	r3, [r4, #0]
}
 800c87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c882:	bf00      	nop
 800c884:	40020058 	.word	0x40020058
 800c888:	40020028 	.word	0x40020028
 800c88c:	40020040 	.word	0x40020040
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c890:	4f61      	ldr	r7, [pc, #388]	; (800ca18 <HAL_DMA_Start_IT+0x320>)
 800c892:	4e62      	ldr	r6, [pc, #392]	; (800ca1c <HAL_DMA_Start_IT+0x324>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c894:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c898:	42b4      	cmp	r4, r6
 800c89a:	bf18      	it	ne
 800c89c:	42bc      	cmpne	r4, r7
 800c89e:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800c8a2:	bf0c      	ite	eq
 800c8a4:	2701      	moveq	r7, #1
 800c8a6:	2700      	movne	r7, #0
 800c8a8:	42b4      	cmp	r4, r6
 800c8aa:	bf08      	it	eq
 800c8ac:	f047 0701 	orreq.w	r7, r7, #1
 800c8b0:	3614      	adds	r6, #20
 800c8b2:	42b4      	cmp	r4, r6
 800c8b4:	bf08      	it	eq
 800c8b6:	f047 0701 	orreq.w	r7, r7, #1
 800c8ba:	3614      	adds	r6, #20
 800c8bc:	42b4      	cmp	r4, r6
 800c8be:	bf08      	it	eq
 800c8c0:	f047 0701 	orreq.w	r7, r7, #1
 800c8c4:	3614      	adds	r6, #20
 800c8c6:	42b4      	cmp	r4, r6
 800c8c8:	bf08      	it	eq
 800c8ca:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 800c8ce:	6826      	ldr	r6, [r4, #0]
 800c8d0:	f026 0601 	bic.w	r6, r6, #1
 800c8d4:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c8d6:	4e52      	ldr	r6, [pc, #328]	; (800ca20 <HAL_DMA_Start_IT+0x328>)
 800c8d8:	42b4      	cmp	r4, r6
 800c8da:	bf08      	it	eq
 800c8dc:	f047 0701 	orreq.w	r7, r7, #1
 800c8e0:	b917      	cbnz	r7, 800c8e8 <HAL_DMA_Start_IT+0x1f0>
 800c8e2:	4f50      	ldr	r7, [pc, #320]	; (800ca24 <HAL_DMA_Start_IT+0x32c>)
 800c8e4:	42bc      	cmp	r4, r7
 800c8e6:	d10b      	bne.n	800c900 <HAL_DMA_Start_IT+0x208>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c8e8:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 800c8ec:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800c8ee:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 800c8f2:	b117      	cbz	r7, 800c8fa <HAL_DMA_Start_IT+0x202>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c8f4:	e9dc 061c 	ldrd	r0, r6, [ip, #112]	; 0x70
 800c8f8:	6046      	str	r6, [r0, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c8fa:	f1b9 0f00 	cmp.w	r9, #0
 800c8fe:	d183      	bne.n	800c808 <HAL_DMA_Start_IT+0x110>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800c900:	4f46      	ldr	r7, [pc, #280]	; (800ca1c <HAL_DMA_Start_IT+0x324>)
 800c902:	f8df e114 	ldr.w	lr, [pc, #276]	; 800ca18 <HAL_DMA_Start_IT+0x320>
 800c906:	4574      	cmp	r4, lr
 800c908:	bf18      	it	ne
 800c90a:	42bc      	cmpne	r4, r7
 800c90c:	f10e 0e14 	add.w	lr, lr, #20
 800c910:	bf0c      	ite	eq
 800c912:	2701      	moveq	r7, #1
 800c914:	2700      	movne	r7, #0
 800c916:	4574      	cmp	r4, lr
 800c918:	bf08      	it	eq
 800c91a:	f047 0701 	orreq.w	r7, r7, #1
 800c91e:	f10e 0e14 	add.w	lr, lr, #20
 800c922:	4574      	cmp	r4, lr
 800c924:	bf08      	it	eq
 800c926:	f047 0701 	orreq.w	r7, r7, #1
 800c92a:	f10e 0e14 	add.w	lr, lr, #20
 800c92e:	4574      	cmp	r4, lr
 800c930:	bf08      	it	eq
 800c932:	f047 0701 	orreq.w	r7, r7, #1
 800c936:	f10e 0e14 	add.w	lr, lr, #20
 800c93a:	4574      	cmp	r4, lr
 800c93c:	bf08      	it	eq
 800c93e:	f047 0701 	orreq.w	r7, r7, #1
 800c942:	f10e 0e14 	add.w	lr, lr, #20
 800c946:	4574      	cmp	r4, lr
 800c948:	bf08      	it	eq
 800c94a:	f047 0701 	orreq.w	r7, r7, #1
 800c94e:	b917      	cbnz	r7, 800c956 <HAL_DMA_Start_IT+0x25e>
 800c950:	4f34      	ldr	r7, [pc, #208]	; (800ca24 <HAL_DMA_Start_IT+0x32c>)
 800c952:	42bc      	cmp	r4, r7
 800c954:	d154      	bne.n	800ca00 <HAL_DMA_Start_IT+0x308>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800c956:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 800c95a:	2701      	movs	r7, #1
 800c95c:	f000 0e1f 	and.w	lr, r0, #31
 800c960:	fa07 f70e 	lsl.w	r7, r7, lr
 800c964:	f8ca 7004 	str.w	r7, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800c968:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c96a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800c96e:	2b40      	cmp	r3, #64	; 0x40
 800c970:	d043      	beq.n	800c9fa <HAL_DMA_Start_IT+0x302>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800c972:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800c974:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800c976:	6823      	ldr	r3, [r4, #0]
 800c978:	f023 030e 	bic.w	r3, r3, #14
 800c97c:	f043 030a 	orr.w	r3, r3, #10
 800c980:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800c982:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800c986:	2b00      	cmp	r3, #0
 800c988:	d02d      	beq.n	800c9e6 <HAL_DMA_Start_IT+0x2ee>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800c98a:	6823      	ldr	r3, [r4, #0]
 800c98c:	f043 0304 	orr.w	r3, r3, #4
 800c990:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c992:	4b21      	ldr	r3, [pc, #132]	; (800ca18 <HAL_DMA_Start_IT+0x320>)
 800c994:	4a21      	ldr	r2, [pc, #132]	; (800ca1c <HAL_DMA_Start_IT+0x324>)
 800c996:	4294      	cmp	r4, r2
 800c998:	bf18      	it	ne
 800c99a:	429c      	cmpne	r4, r3
 800c99c:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800c9a0:	bf0c      	ite	eq
 800c9a2:	2301      	moveq	r3, #1
 800c9a4:	2300      	movne	r3, #0
 800c9a6:	4294      	cmp	r4, r2
 800c9a8:	bf08      	it	eq
 800c9aa:	f043 0301 	orreq.w	r3, r3, #1
 800c9ae:	3214      	adds	r2, #20
 800c9b0:	4294      	cmp	r4, r2
 800c9b2:	bf08      	it	eq
 800c9b4:	f043 0301 	orreq.w	r3, r3, #1
 800c9b8:	3214      	adds	r2, #20
 800c9ba:	4294      	cmp	r4, r2
 800c9bc:	bf08      	it	eq
 800c9be:	f043 0301 	orreq.w	r3, r3, #1
 800c9c2:	3214      	adds	r2, #20
 800c9c4:	4294      	cmp	r4, r2
 800c9c6:	bf08      	it	eq
 800c9c8:	f043 0301 	orreq.w	r3, r3, #1
 800c9cc:	3214      	adds	r2, #20
 800c9ce:	4294      	cmp	r4, r2
 800c9d0:	bf08      	it	eq
 800c9d2:	f043 0301 	orreq.w	r3, r3, #1
 800c9d6:	3214      	adds	r2, #20
 800c9d8:	4294      	cmp	r4, r2
 800c9da:	bf08      	it	eq
 800c9dc:	f043 0301 	orreq.w	r3, r3, #1
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	f43f af47 	beq.w	800c874 <HAL_DMA_Start_IT+0x17c>
 800c9e6:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 800c9ea:	e735      	b.n	800c858 <HAL_DMA_Start_IT+0x160>
    return HAL_ERROR;
 800c9ec:	2001      	movs	r0, #1
 800c9ee:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800c9f0:	2002      	movs	r0, #2
}
 800c9f2:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800c9f4:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800c9f6:	60e1      	str	r1, [r4, #12]
 800c9f8:	e71c      	b.n	800c834 <HAL_DMA_Start_IT+0x13c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800c9fa:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800c9fc:	60e1      	str	r1, [r4, #12]
 800c9fe:	e7ba      	b.n	800c976 <HAL_DMA_Start_IT+0x27e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800ca00:	6823      	ldr	r3, [r4, #0]
 800ca02:	f023 030e 	bic.w	r3, r3, #14
 800ca06:	f043 030a 	orr.w	r3, r3, #10
 800ca0a:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800ca0c:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d1ba      	bne.n	800c98a <HAL_DMA_Start_IT+0x292>
 800ca14:	e7bd      	b.n	800c992 <HAL_DMA_Start_IT+0x29a>
 800ca16:	bf00      	nop
 800ca18:	5802541c 	.word	0x5802541c
 800ca1c:	58025408 	.word	0x58025408
 800ca20:	58025480 	.word	0x58025480
 800ca24:	58025494 	.word	0x58025494

0800ca28 <HAL_DMA_Abort>:
{
 800ca28:	b570      	push	{r4, r5, r6, lr}
 800ca2a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800ca2c:	f7fe ff26 	bl	800b87c <HAL_GetTick>
  if(hdma == NULL)
 800ca30:	2d00      	cmp	r5, #0
 800ca32:	f000 8124 	beq.w	800cc7e <HAL_DMA_Abort+0x256>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ca36:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 800ca3a:	2b02      	cmp	r3, #2
 800ca3c:	f040 80dd 	bne.w	800cbfa <HAL_DMA_Abort+0x1d2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ca40:	682c      	ldr	r4, [r5, #0]
 800ca42:	4606      	mov	r6, r0
 800ca44:	4b8f      	ldr	r3, [pc, #572]	; (800cc84 <HAL_DMA_Abort+0x25c>)
 800ca46:	4890      	ldr	r0, [pc, #576]	; (800cc88 <HAL_DMA_Abort+0x260>)
 800ca48:	4a90      	ldr	r2, [pc, #576]	; (800cc8c <HAL_DMA_Abort+0x264>)
 800ca4a:	4284      	cmp	r4, r0
 800ca4c:	bf18      	it	ne
 800ca4e:	429c      	cmpne	r4, r3
 800ca50:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800ca54:	498e      	ldr	r1, [pc, #568]	; (800cc90 <HAL_DMA_Abort+0x268>)
 800ca56:	bf0c      	ite	eq
 800ca58:	2301      	moveq	r3, #1
 800ca5a:	2300      	movne	r3, #0
 800ca5c:	4284      	cmp	r4, r0
 800ca5e:	bf08      	it	eq
 800ca60:	f043 0301 	orreq.w	r3, r3, #1
 800ca64:	3018      	adds	r0, #24
 800ca66:	4284      	cmp	r4, r0
 800ca68:	bf08      	it	eq
 800ca6a:	f043 0301 	orreq.w	r3, r3, #1
 800ca6e:	3018      	adds	r0, #24
 800ca70:	4284      	cmp	r4, r0
 800ca72:	bf08      	it	eq
 800ca74:	f043 0301 	orreq.w	r3, r3, #1
 800ca78:	3018      	adds	r0, #24
 800ca7a:	4284      	cmp	r4, r0
 800ca7c:	bf08      	it	eq
 800ca7e:	f043 0301 	orreq.w	r3, r3, #1
 800ca82:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800ca86:	4284      	cmp	r4, r0
 800ca88:	bf08      	it	eq
 800ca8a:	f043 0301 	orreq.w	r3, r3, #1
 800ca8e:	3018      	adds	r0, #24
 800ca90:	4284      	cmp	r4, r0
 800ca92:	bf08      	it	eq
 800ca94:	f043 0301 	orreq.w	r3, r3, #1
 800ca98:	3018      	adds	r0, #24
 800ca9a:	4284      	cmp	r4, r0
 800ca9c:	bf08      	it	eq
 800ca9e:	f043 0301 	orreq.w	r3, r3, #1
 800caa2:	3018      	adds	r0, #24
 800caa4:	4284      	cmp	r4, r0
 800caa6:	bf08      	it	eq
 800caa8:	f043 0301 	orreq.w	r3, r3, #1
 800caac:	3018      	adds	r0, #24
 800caae:	4284      	cmp	r4, r0
 800cab0:	bf08      	it	eq
 800cab2:	f043 0301 	orreq.w	r3, r3, #1
 800cab6:	3018      	adds	r0, #24
 800cab8:	4284      	cmp	r4, r0
 800caba:	bf08      	it	eq
 800cabc:	f043 0301 	orreq.w	r3, r3, #1
 800cac0:	3018      	adds	r0, #24
 800cac2:	4284      	cmp	r4, r0
 800cac4:	bf08      	it	eq
 800cac6:	f043 0301 	orreq.w	r3, r3, #1
 800caca:	3018      	adds	r0, #24
 800cacc:	4284      	cmp	r4, r0
 800cace:	bf08      	it	eq
 800cad0:	f043 0301 	orreq.w	r3, r3, #1
 800cad4:	428c      	cmp	r4, r1
 800cad6:	bf18      	it	ne
 800cad8:	4294      	cmpne	r4, r2
 800cada:	bf0c      	ite	eq
 800cadc:	2201      	moveq	r2, #1
 800cade:	2200      	movne	r2, #0
 800cae0:	d002      	beq.n	800cae8 <HAL_DMA_Abort+0xc0>
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	f000 8090 	beq.w	800cc08 <HAL_DMA_Abort+0x1e0>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800cae8:	6821      	ldr	r1, [r4, #0]
 800caea:	f021 011e 	bic.w	r1, r1, #30
 800caee:	6021      	str	r1, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800caf0:	6961      	ldr	r1, [r4, #20]
 800caf2:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800caf6:	6161      	str	r1, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800caf8:	2a00      	cmp	r2, #0
 800cafa:	f000 80b0 	beq.w	800cc5e <HAL_DMA_Abort+0x236>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800cafe:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 800cb00:	6813      	ldr	r3, [r2, #0]
 800cb02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb06:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800cb08:	6823      	ldr	r3, [r4, #0]
 800cb0a:	f023 0301 	bic.w	r3, r3, #1
 800cb0e:	6023      	str	r3, [r4, #0]
 800cb10:	e005      	b.n	800cb1e <HAL_DMA_Abort+0xf6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800cb12:	f7fe feb3 	bl	800b87c <HAL_GetTick>
 800cb16:	1b83      	subs	r3, r0, r6
 800cb18:	2b05      	cmp	r3, #5
 800cb1a:	f200 80a6 	bhi.w	800cc6a <HAL_DMA_Abort+0x242>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800cb1e:	6823      	ldr	r3, [r4, #0]
 800cb20:	07db      	lsls	r3, r3, #31
 800cb22:	d4f6      	bmi.n	800cb12 <HAL_DMA_Abort+0xea>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800cb24:	682a      	ldr	r2, [r5, #0]
 800cb26:	4b57      	ldr	r3, [pc, #348]	; (800cc84 <HAL_DMA_Abort+0x25c>)
 800cb28:	4857      	ldr	r0, [pc, #348]	; (800cc88 <HAL_DMA_Abort+0x260>)
 800cb2a:	495a      	ldr	r1, [pc, #360]	; (800cc94 <HAL_DMA_Abort+0x26c>)
 800cb2c:	4282      	cmp	r2, r0
 800cb2e:	bf18      	it	ne
 800cb30:	429a      	cmpne	r2, r3
 800cb32:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800cb36:	bf0c      	ite	eq
 800cb38:	2301      	moveq	r3, #1
 800cb3a:	2300      	movne	r3, #0
 800cb3c:	428a      	cmp	r2, r1
 800cb3e:	bf08      	it	eq
 800cb40:	f043 0301 	orreq.w	r3, r3, #1
 800cb44:	3130      	adds	r1, #48	; 0x30
 800cb46:	4282      	cmp	r2, r0
 800cb48:	bf08      	it	eq
 800cb4a:	f043 0301 	orreq.w	r3, r3, #1
 800cb4e:	3030      	adds	r0, #48	; 0x30
 800cb50:	428a      	cmp	r2, r1
 800cb52:	bf08      	it	eq
 800cb54:	f043 0301 	orreq.w	r3, r3, #1
 800cb58:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800cb5c:	4282      	cmp	r2, r0
 800cb5e:	bf08      	it	eq
 800cb60:	f043 0301 	orreq.w	r3, r3, #1
 800cb64:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800cb68:	428a      	cmp	r2, r1
 800cb6a:	bf08      	it	eq
 800cb6c:	f043 0301 	orreq.w	r3, r3, #1
 800cb70:	3130      	adds	r1, #48	; 0x30
 800cb72:	4282      	cmp	r2, r0
 800cb74:	bf08      	it	eq
 800cb76:	f043 0301 	orreq.w	r3, r3, #1
 800cb7a:	3030      	adds	r0, #48	; 0x30
 800cb7c:	428a      	cmp	r2, r1
 800cb7e:	bf08      	it	eq
 800cb80:	f043 0301 	orreq.w	r3, r3, #1
 800cb84:	3130      	adds	r1, #48	; 0x30
 800cb86:	4282      	cmp	r2, r0
 800cb88:	bf08      	it	eq
 800cb8a:	f043 0301 	orreq.w	r3, r3, #1
 800cb8e:	3030      	adds	r0, #48	; 0x30
 800cb90:	428a      	cmp	r2, r1
 800cb92:	bf08      	it	eq
 800cb94:	f043 0301 	orreq.w	r3, r3, #1
 800cb98:	3130      	adds	r1, #48	; 0x30
 800cb9a:	4282      	cmp	r2, r0
 800cb9c:	bf08      	it	eq
 800cb9e:	f043 0301 	orreq.w	r3, r3, #1
 800cba2:	428a      	cmp	r2, r1
 800cba4:	bf08      	it	eq
 800cba6:	f043 0301 	orreq.w	r3, r3, #1
 800cbaa:	3118      	adds	r1, #24
 800cbac:	428a      	cmp	r2, r1
 800cbae:	bf08      	it	eq
 800cbb0:	f043 0301 	orreq.w	r3, r3, #1
 800cbb4:	b933      	cbnz	r3, 800cbc4 <HAL_DMA_Abort+0x19c>
 800cbb6:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 800cbba:	4b35      	ldr	r3, [pc, #212]	; (800cc90 <HAL_DMA_Abort+0x268>)
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	bf18      	it	ne
 800cbc0:	428a      	cmpne	r2, r1
 800cbc2:	d16f      	bne.n	800cca4 <HAL_DMA_Abort+0x27c>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800cbc4:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800cbc6:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800cbc8:	6da9      	ldr	r1, [r5, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800cbca:	f002 021f 	and.w	r2, r2, #31
 800cbce:	4093      	lsls	r3, r2
 800cbd0:	608b      	str	r3, [r1, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 800cbd2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cbd4:	e9d5 2119 	ldrd	r2, r1, [r5, #100]	; 0x64
 800cbd8:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 800cbda:	b133      	cbz	r3, 800cbea <HAL_DMA_Abort+0x1c2>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800cbdc:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cbde:	e9d5 101c 	ldrd	r1, r0, [r5, #112]	; 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800cbe2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cbe6:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cbe8:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 800cbea:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 800cbec:	2201      	movs	r2, #1
  return HAL_OK;
 800cbee:	4618      	mov	r0, r3
    __HAL_UNLOCK(hdma);
 800cbf0:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800cbf4:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
}
 800cbf8:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cbfa:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800cbfc:	2300      	movs	r3, #0
    return HAL_ERROR;
 800cbfe:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cc00:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800cc02:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 800cc06:	bd70      	pop	{r4, r5, r6, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800cc08:	6822      	ldr	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800cc0a:	4923      	ldr	r1, [pc, #140]	; (800cc98 <HAL_DMA_Abort+0x270>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800cc0c:	f022 020e 	bic.w	r2, r2, #14
 800cc10:	6022      	str	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800cc12:	4a22      	ldr	r2, [pc, #136]	; (800cc9c <HAL_DMA_Abort+0x274>)
 800cc14:	428c      	cmp	r4, r1
 800cc16:	bf18      	it	ne
 800cc18:	4294      	cmpne	r4, r2
 800cc1a:	f101 0128 	add.w	r1, r1, #40	; 0x28
 800cc1e:	bf0c      	ite	eq
 800cc20:	2201      	moveq	r2, #1
 800cc22:	2200      	movne	r2, #0
 800cc24:	428c      	cmp	r4, r1
 800cc26:	bf08      	it	eq
 800cc28:	f042 0201 	orreq.w	r2, r2, #1
 800cc2c:	3114      	adds	r1, #20
 800cc2e:	428c      	cmp	r4, r1
 800cc30:	bf08      	it	eq
 800cc32:	f042 0201 	orreq.w	r2, r2, #1
 800cc36:	3114      	adds	r1, #20
 800cc38:	428c      	cmp	r4, r1
 800cc3a:	bf08      	it	eq
 800cc3c:	f042 0201 	orreq.w	r2, r2, #1
 800cc40:	3114      	adds	r1, #20
 800cc42:	428c      	cmp	r4, r1
 800cc44:	bf08      	it	eq
 800cc46:	f042 0201 	orreq.w	r2, r2, #1
 800cc4a:	3114      	adds	r1, #20
 800cc4c:	428c      	cmp	r4, r1
 800cc4e:	bf08      	it	eq
 800cc50:	f042 0201 	orreq.w	r2, r2, #1
 800cc54:	b91a      	cbnz	r2, 800cc5e <HAL_DMA_Abort+0x236>
 800cc56:	4a12      	ldr	r2, [pc, #72]	; (800cca0 <HAL_DMA_Abort+0x278>)
 800cc58:	4294      	cmp	r4, r2
 800cc5a:	f47f af55 	bne.w	800cb08 <HAL_DMA_Abort+0xe0>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800cc5e:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800cc60:	680a      	ldr	r2, [r1, #0]
 800cc62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cc66:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800cc68:	e74e      	b.n	800cb08 <HAL_DMA_Abort+0xe0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800cc6a:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 800cc6c:	2200      	movs	r2, #0
        hdma->State = HAL_DMA_STATE_ERROR;
 800cc6e:	2303      	movs	r3, #3
        return HAL_ERROR;
 800cc70:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800cc72:	6569      	str	r1, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800cc74:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 800cc78:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 800cc7c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800cc7e:	2001      	movs	r0, #1
}
 800cc80:	bd70      	pop	{r4, r5, r6, pc}
 800cc82:	bf00      	nop
 800cc84:	40020058 	.word	0x40020058
 800cc88:	40020040 	.word	0x40020040
 800cc8c:	40020010 	.word	0x40020010
 800cc90:	40020028 	.word	0x40020028
 800cc94:	40020070 	.word	0x40020070
 800cc98:	58025408 	.word	0x58025408
 800cc9c:	5802541c 	.word	0x5802541c
 800cca0:	58025494 	.word	0x58025494
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800cca4:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 800cca6:	2101      	movs	r1, #1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800cca8:	4b16      	ldr	r3, [pc, #88]	; (800cd04 <HAL_DMA_Abort+0x2dc>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800ccaa:	f000 001f 	and.w	r0, r0, #31
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ccae:	4c16      	ldr	r4, [pc, #88]	; (800cd08 <HAL_DMA_Abort+0x2e0>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800ccb0:	4081      	lsls	r1, r0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ccb2:	42a2      	cmp	r2, r4
 800ccb4:	bf18      	it	ne
 800ccb6:	429a      	cmpne	r2, r3
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ccb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ccba:	bf0c      	ite	eq
 800ccbc:	2301      	moveq	r3, #1
 800ccbe:	2300      	movne	r3, #0
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800ccc0:	6041      	str	r1, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ccc2:	4812      	ldr	r0, [pc, #72]	; (800cd0c <HAL_DMA_Abort+0x2e4>)
 800ccc4:	4912      	ldr	r1, [pc, #72]	; (800cd10 <HAL_DMA_Abort+0x2e8>)
 800ccc6:	4282      	cmp	r2, r0
 800ccc8:	bf08      	it	eq
 800ccca:	f043 0301 	orreq.w	r3, r3, #1
 800ccce:	3028      	adds	r0, #40	; 0x28
 800ccd0:	428a      	cmp	r2, r1
 800ccd2:	bf08      	it	eq
 800ccd4:	f043 0301 	orreq.w	r3, r3, #1
 800ccd8:	3128      	adds	r1, #40	; 0x28
 800ccda:	4282      	cmp	r2, r0
 800ccdc:	bf08      	it	eq
 800ccde:	f043 0301 	orreq.w	r3, r3, #1
 800cce2:	428a      	cmp	r2, r1
 800cce4:	bf08      	it	eq
 800cce6:	f043 0301 	orreq.w	r3, r3, #1
 800ccea:	3114      	adds	r1, #20
 800ccec:	428a      	cmp	r2, r1
 800ccee:	bf08      	it	eq
 800ccf0:	f043 0301 	orreq.w	r3, r3, #1
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	f47f af6c 	bne.w	800cbd2 <HAL_DMA_Abort+0x1aa>
 800ccfa:	4b06      	ldr	r3, [pc, #24]	; (800cd14 <HAL_DMA_Abort+0x2ec>)
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	f43f af68 	beq.w	800cbd2 <HAL_DMA_Abort+0x1aa>
 800cd02:	e772      	b.n	800cbea <HAL_DMA_Abort+0x1c2>
 800cd04:	5802541c 	.word	0x5802541c
 800cd08:	58025408 	.word	0x58025408
 800cd0c:	58025430 	.word	0x58025430
 800cd10:	58025444 	.word	0x58025444
 800cd14:	58025494 	.word	0x58025494

0800cd18 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 800cd18:	2800      	cmp	r0, #0
 800cd1a:	d05f      	beq.n	800cddc <HAL_DMA_Abort_IT+0xc4>
{
 800cd1c:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800cd1e:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 800cd22:	4603      	mov	r3, r0
 800cd24:	2a02      	cmp	r2, #2
 800cd26:	d155      	bne.n	800cdd4 <HAL_DMA_Abort_IT+0xbc>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800cd28:	6801      	ldr	r1, [r0, #0]
 800cd2a:	4a57      	ldr	r2, [pc, #348]	; (800ce88 <HAL_DMA_Abort_IT+0x170>)
 800cd2c:	4291      	cmp	r1, r2
 800cd2e:	d048      	beq.n	800cdc2 <HAL_DMA_Abort_IT+0xaa>
 800cd30:	3218      	adds	r2, #24
 800cd32:	4291      	cmp	r1, r2
 800cd34:	d045      	beq.n	800cdc2 <HAL_DMA_Abort_IT+0xaa>
 800cd36:	3230      	adds	r2, #48	; 0x30
 800cd38:	4c54      	ldr	r4, [pc, #336]	; (800ce8c <HAL_DMA_Abort_IT+0x174>)
 800cd3a:	4855      	ldr	r0, [pc, #340]	; (800ce90 <HAL_DMA_Abort_IT+0x178>)
 800cd3c:	42a1      	cmp	r1, r4
 800cd3e:	bf18      	it	ne
 800cd40:	4291      	cmpne	r1, r2
 800cd42:	f104 0448 	add.w	r4, r4, #72	; 0x48
 800cd46:	bf0c      	ite	eq
 800cd48:	2201      	moveq	r2, #1
 800cd4a:	2200      	movne	r2, #0
 800cd4c:	4281      	cmp	r1, r0
 800cd4e:	bf08      	it	eq
 800cd50:	f042 0201 	orreq.w	r2, r2, #1
 800cd54:	3030      	adds	r0, #48	; 0x30
 800cd56:	42a1      	cmp	r1, r4
 800cd58:	bf08      	it	eq
 800cd5a:	f042 0201 	orreq.w	r2, r2, #1
 800cd5e:	3430      	adds	r4, #48	; 0x30
 800cd60:	4281      	cmp	r1, r0
 800cd62:	bf08      	it	eq
 800cd64:	f042 0201 	orreq.w	r2, r2, #1
 800cd68:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800cd6c:	42a1      	cmp	r1, r4
 800cd6e:	bf08      	it	eq
 800cd70:	f042 0201 	orreq.w	r2, r2, #1
 800cd74:	f504 745c 	add.w	r4, r4, #880	; 0x370
 800cd78:	4281      	cmp	r1, r0
 800cd7a:	bf08      	it	eq
 800cd7c:	f042 0201 	orreq.w	r2, r2, #1
 800cd80:	3030      	adds	r0, #48	; 0x30
 800cd82:	42a1      	cmp	r1, r4
 800cd84:	bf08      	it	eq
 800cd86:	f042 0201 	orreq.w	r2, r2, #1
 800cd8a:	3430      	adds	r4, #48	; 0x30
 800cd8c:	4281      	cmp	r1, r0
 800cd8e:	bf08      	it	eq
 800cd90:	f042 0201 	orreq.w	r2, r2, #1
 800cd94:	3030      	adds	r0, #48	; 0x30
 800cd96:	42a1      	cmp	r1, r4
 800cd98:	bf08      	it	eq
 800cd9a:	f042 0201 	orreq.w	r2, r2, #1
 800cd9e:	3430      	adds	r4, #48	; 0x30
 800cda0:	4281      	cmp	r1, r0
 800cda2:	bf08      	it	eq
 800cda4:	f042 0201 	orreq.w	r2, r2, #1
 800cda8:	3030      	adds	r0, #48	; 0x30
 800cdaa:	42a1      	cmp	r1, r4
 800cdac:	bf08      	it	eq
 800cdae:	f042 0201 	orreq.w	r2, r2, #1
 800cdb2:	4281      	cmp	r1, r0
 800cdb4:	bf08      	it	eq
 800cdb6:	f042 0201 	orreq.w	r2, r2, #1
 800cdba:	b912      	cbnz	r2, 800cdc2 <HAL_DMA_Abort_IT+0xaa>
 800cdbc:	4a35      	ldr	r2, [pc, #212]	; (800ce94 <HAL_DMA_Abort_IT+0x17c>)
 800cdbe:	4291      	cmp	r1, r2
 800cdc0:	d10e      	bne.n	800cde0 <HAL_DMA_Abort_IT+0xc8>
      hdma->State = HAL_DMA_STATE_ABORT;
 800cdc2:	2204      	movs	r2, #4
  return HAL_OK;
 800cdc4:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 800cdc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800cdca:	680b      	ldr	r3, [r1, #0]
 800cdcc:	f023 0301 	bic.w	r3, r3, #1
 800cdd0:	600b      	str	r3, [r1, #0]
}
 800cdd2:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cdd4:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 800cdd6:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cdd8:	655a      	str	r2, [r3, #84]	; 0x54
}
 800cdda:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800cddc:	2001      	movs	r0, #1
}
 800cdde:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800cde0:	4a2d      	ldr	r2, [pc, #180]	; (800ce98 <HAL_DMA_Abort_IT+0x180>)
 800cde2:	4d2e      	ldr	r5, [pc, #184]	; (800ce9c <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800cde4:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800cde6:	42a9      	cmp	r1, r5
 800cde8:	bf18      	it	ne
 800cdea:	4291      	cmpne	r1, r2
 800cdec:	4c2c      	ldr	r4, [pc, #176]	; (800cea0 <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800cdee:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800cdf2:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 800cdf6:	bf0c      	ite	eq
 800cdf8:	2201      	moveq	r2, #1
 800cdfa:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800cdfc:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800cdfe:	42a1      	cmp	r1, r4
 800ce00:	bf08      	it	eq
 800ce02:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800ce06:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ce08:	3428      	adds	r4, #40	; 0x28
 800ce0a:	42a9      	cmp	r1, r5
 800ce0c:	bf08      	it	eq
 800ce0e:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800ce12:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ce16:	42a1      	cmp	r1, r4
 800ce18:	bf08      	it	eq
 800ce1a:	f042 0201 	orreq.w	r2, r2, #1
 800ce1e:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 800ce20:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ce22:	42a1      	cmp	r1, r4
 800ce24:	bf08      	it	eq
 800ce26:	f042 0201 	orreq.w	r2, r2, #1
 800ce2a:	481e      	ldr	r0, [pc, #120]	; (800cea4 <HAL_DMA_Abort_IT+0x18c>)
 800ce2c:	4281      	cmp	r1, r0
 800ce2e:	bf08      	it	eq
 800ce30:	f042 0201 	orreq.w	r2, r2, #1
 800ce34:	b912      	cbnz	r2, 800ce3c <HAL_DMA_Abort_IT+0x124>
 800ce36:	4a1c      	ldr	r2, [pc, #112]	; (800cea8 <HAL_DMA_Abort_IT+0x190>)
 800ce38:	4291      	cmp	r1, r2
 800ce3a:	d117      	bne.n	800ce6c <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800ce3c:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ce3e:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800ce40:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ce44:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800ce46:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ce4a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800ce4e:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ce50:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800ce52:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800ce54:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ce56:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
 800ce5a:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800ce5c:	b132      	cbz	r2, 800ce6c <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ce5e:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ce60:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ce64:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800ce68:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ce6a:	6044      	str	r4, [r0, #4]
      __HAL_UNLOCK(hdma);
 800ce6c:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 800ce6e:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 800ce70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 800ce72:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800ce76:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 800ce7a:	b11a      	cbz	r2, 800ce84 <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	4790      	blx	r2
  return HAL_OK;
 800ce80:	4620      	mov	r0, r4
}
 800ce82:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800ce84:	4610      	mov	r0, r2
}
 800ce86:	bd38      	pop	{r3, r4, r5, pc}
 800ce88:	40020010 	.word	0x40020010
 800ce8c:	40020040 	.word	0x40020040
 800ce90:	40020070 	.word	0x40020070
 800ce94:	400204b8 	.word	0x400204b8
 800ce98:	5802541c 	.word	0x5802541c
 800ce9c:	58025408 	.word	0x58025408
 800cea0:	58025430 	.word	0x58025430
 800cea4:	58025480 	.word	0x58025480
 800cea8:	58025494 	.word	0x58025494

0800ceac <HAL_DMA_IRQHandler>:
{
 800ceac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 800ceb0:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 800ceb2:	4b9e      	ldr	r3, [pc, #632]	; (800d12c <HAL_DMA_IRQHandler+0x280>)
{
 800ceb4:	b082      	sub	sp, #8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ceb6:	6d84      	ldr	r4, [r0, #88]	; 0x58
{
 800ceb8:	4606      	mov	r6, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 800ceba:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0U;
 800cebc:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800cebe:	6803      	ldr	r3, [r0, #0]
 800cec0:	4a9b      	ldr	r2, [pc, #620]	; (800d130 <HAL_DMA_IRQHandler+0x284>)
 800cec2:	489c      	ldr	r0, [pc, #624]	; (800d134 <HAL_DMA_IRQHandler+0x288>)
  tmpisr_dma  = regs_dma->ISR;
 800cec4:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800cec6:	4293      	cmp	r3, r2
 800cec8:	bf18      	it	ne
 800ceca:	4283      	cmpne	r3, r0
  tmpisr_bdma = regs_bdma->ISR;
 800cecc:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800cece:	bf0c      	ite	eq
 800ced0:	2001      	moveq	r0, #1
 800ced2:	2000      	movne	r0, #0
 800ced4:	d04f      	beq.n	800cf76 <HAL_DMA_IRQHandler+0xca>
 800ced6:	3218      	adds	r2, #24
 800ced8:	f8df c264 	ldr.w	ip, [pc, #612]	; 800d140 <HAL_DMA_IRQHandler+0x294>
 800cedc:	4563      	cmp	r3, ip
 800cede:	bf18      	it	ne
 800cee0:	4293      	cmpne	r3, r2
 800cee2:	f10c 0c18 	add.w	ip, ip, #24
 800cee6:	bf0c      	ite	eq
 800cee8:	2201      	moveq	r2, #1
 800ceea:	2200      	movne	r2, #0
 800ceec:	4563      	cmp	r3, ip
 800ceee:	bf08      	it	eq
 800cef0:	f042 0201 	orreq.w	r2, r2, #1
 800cef4:	f10c 0c18 	add.w	ip, ip, #24
 800cef8:	4563      	cmp	r3, ip
 800cefa:	bf08      	it	eq
 800cefc:	f042 0201 	orreq.w	r2, r2, #1
 800cf00:	f10c 0c18 	add.w	ip, ip, #24
 800cf04:	4563      	cmp	r3, ip
 800cf06:	bf08      	it	eq
 800cf08:	f042 0201 	orreq.w	r2, r2, #1
 800cf0c:	f10c 0c18 	add.w	ip, ip, #24
 800cf10:	4563      	cmp	r3, ip
 800cf12:	bf08      	it	eq
 800cf14:	f042 0201 	orreq.w	r2, r2, #1
 800cf18:	f50c 7c56 	add.w	ip, ip, #856	; 0x358
 800cf1c:	4563      	cmp	r3, ip
 800cf1e:	bf08      	it	eq
 800cf20:	f042 0201 	orreq.w	r2, r2, #1
 800cf24:	f10c 0c18 	add.w	ip, ip, #24
 800cf28:	4563      	cmp	r3, ip
 800cf2a:	bf08      	it	eq
 800cf2c:	f042 0201 	orreq.w	r2, r2, #1
 800cf30:	f10c 0c18 	add.w	ip, ip, #24
 800cf34:	4563      	cmp	r3, ip
 800cf36:	bf08      	it	eq
 800cf38:	f042 0201 	orreq.w	r2, r2, #1
 800cf3c:	f10c 0c18 	add.w	ip, ip, #24
 800cf40:	4563      	cmp	r3, ip
 800cf42:	bf08      	it	eq
 800cf44:	f042 0201 	orreq.w	r2, r2, #1
 800cf48:	f10c 0c18 	add.w	ip, ip, #24
 800cf4c:	4563      	cmp	r3, ip
 800cf4e:	bf08      	it	eq
 800cf50:	f042 0201 	orreq.w	r2, r2, #1
 800cf54:	f10c 0c18 	add.w	ip, ip, #24
 800cf58:	4563      	cmp	r3, ip
 800cf5a:	bf08      	it	eq
 800cf5c:	f042 0201 	orreq.w	r2, r2, #1
 800cf60:	f10c 0c18 	add.w	ip, ip, #24
 800cf64:	4563      	cmp	r3, ip
 800cf66:	bf08      	it	eq
 800cf68:	f042 0201 	orreq.w	r2, r2, #1
 800cf6c:	b91a      	cbnz	r2, 800cf76 <HAL_DMA_IRQHandler+0xca>
 800cf6e:	4a72      	ldr	r2, [pc, #456]	; (800d138 <HAL_DMA_IRQHandler+0x28c>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	f040 824b 	bne.w	800d40c <HAL_DMA_IRQHandler+0x560>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cf76:	6df1      	ldr	r1, [r6, #92]	; 0x5c
 800cf78:	2208      	movs	r2, #8
 800cf7a:	f001 0c1f 	and.w	ip, r1, #31
 800cf7e:	fa02 f20c 	lsl.w	r2, r2, ip
 800cf82:	4217      	tst	r7, r2
 800cf84:	f040 817d 	bne.w	800d282 <HAL_DMA_IRQHandler+0x3d6>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cf88:	fa27 f20c 	lsr.w	r2, r7, ip
 800cf8c:	07d2      	lsls	r2, r2, #31
 800cf8e:	d50a      	bpl.n	800cfa6 <HAL_DMA_IRQHandler+0xfa>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800cf90:	695a      	ldr	r2, [r3, #20]
 800cf92:	0612      	lsls	r2, r2, #24
 800cf94:	d507      	bpl.n	800cfa6 <HAL_DMA_IRQHandler+0xfa>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800cf96:	2201      	movs	r2, #1
 800cf98:	fa02 f20c 	lsl.w	r2, r2, ip
 800cf9c:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800cf9e:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800cfa0:	f042 0202 	orr.w	r2, r2, #2
 800cfa4:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cfa6:	f04f 0e04 	mov.w	lr, #4
 800cfaa:	fa0e fe0c 	lsl.w	lr, lr, ip
 800cfae:	ea1e 0f07 	tst.w	lr, r7
 800cfb2:	d05a      	beq.n	800d06a <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800cfb4:	2800      	cmp	r0, #0
 800cfb6:	d14f      	bne.n	800d058 <HAL_DMA_IRQHandler+0x1ac>
 800cfb8:	4a60      	ldr	r2, [pc, #384]	; (800d13c <HAL_DMA_IRQHandler+0x290>)
 800cfba:	f8df 8184 	ldr.w	r8, [pc, #388]	; 800d140 <HAL_DMA_IRQHandler+0x294>
 800cfbe:	4543      	cmp	r3, r8
 800cfc0:	bf18      	it	ne
 800cfc2:	4293      	cmpne	r3, r2
 800cfc4:	f108 0818 	add.w	r8, r8, #24
 800cfc8:	bf0c      	ite	eq
 800cfca:	2201      	moveq	r2, #1
 800cfcc:	2200      	movne	r2, #0
 800cfce:	4543      	cmp	r3, r8
 800cfd0:	bf08      	it	eq
 800cfd2:	f042 0201 	orreq.w	r2, r2, #1
 800cfd6:	f108 0818 	add.w	r8, r8, #24
 800cfda:	4543      	cmp	r3, r8
 800cfdc:	bf08      	it	eq
 800cfde:	f042 0201 	orreq.w	r2, r2, #1
 800cfe2:	f108 0818 	add.w	r8, r8, #24
 800cfe6:	4543      	cmp	r3, r8
 800cfe8:	bf08      	it	eq
 800cfea:	f042 0201 	orreq.w	r2, r2, #1
 800cfee:	f108 0818 	add.w	r8, r8, #24
 800cff2:	4543      	cmp	r3, r8
 800cff4:	bf08      	it	eq
 800cff6:	f042 0201 	orreq.w	r2, r2, #1
 800cffa:	f508 7856 	add.w	r8, r8, #856	; 0x358
 800cffe:	4543      	cmp	r3, r8
 800d000:	bf08      	it	eq
 800d002:	f042 0201 	orreq.w	r2, r2, #1
 800d006:	f108 0818 	add.w	r8, r8, #24
 800d00a:	4543      	cmp	r3, r8
 800d00c:	bf08      	it	eq
 800d00e:	f042 0201 	orreq.w	r2, r2, #1
 800d012:	f108 0818 	add.w	r8, r8, #24
 800d016:	4543      	cmp	r3, r8
 800d018:	bf08      	it	eq
 800d01a:	f042 0201 	orreq.w	r2, r2, #1
 800d01e:	f108 0818 	add.w	r8, r8, #24
 800d022:	4543      	cmp	r3, r8
 800d024:	bf08      	it	eq
 800d026:	f042 0201 	orreq.w	r2, r2, #1
 800d02a:	f108 0818 	add.w	r8, r8, #24
 800d02e:	4543      	cmp	r3, r8
 800d030:	bf08      	it	eq
 800d032:	f042 0201 	orreq.w	r2, r2, #1
 800d036:	f108 0818 	add.w	r8, r8, #24
 800d03a:	4543      	cmp	r3, r8
 800d03c:	bf08      	it	eq
 800d03e:	f042 0201 	orreq.w	r2, r2, #1
 800d042:	f108 0818 	add.w	r8, r8, #24
 800d046:	4543      	cmp	r3, r8
 800d048:	bf08      	it	eq
 800d04a:	f042 0201 	orreq.w	r2, r2, #1
 800d04e:	b91a      	cbnz	r2, 800d058 <HAL_DMA_IRQHandler+0x1ac>
 800d050:	4a39      	ldr	r2, [pc, #228]	; (800d138 <HAL_DMA_IRQHandler+0x28c>)
 800d052:	4293      	cmp	r3, r2
 800d054:	f040 8214 	bne.w	800d480 <HAL_DMA_IRQHandler+0x5d4>
 800d058:	681a      	ldr	r2, [r3, #0]
 800d05a:	0792      	lsls	r2, r2, #30
 800d05c:	d505      	bpl.n	800d06a <HAL_DMA_IRQHandler+0x1be>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d05e:	f8c4 e008 	str.w	lr, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800d062:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800d064:	f042 0204 	orr.w	r2, r2, #4
 800d068:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d06a:	2210      	movs	r2, #16
 800d06c:	fa02 fc0c 	lsl.w	ip, r2, ip
 800d070:	ea1c 0f07 	tst.w	ip, r7
 800d074:	d069      	beq.n	800d14a <HAL_DMA_IRQHandler+0x29e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800d076:	2800      	cmp	r0, #0
 800d078:	d145      	bne.n	800d106 <HAL_DMA_IRQHandler+0x25a>
 800d07a:	4a30      	ldr	r2, [pc, #192]	; (800d13c <HAL_DMA_IRQHandler+0x290>)
 800d07c:	4830      	ldr	r0, [pc, #192]	; (800d140 <HAL_DMA_IRQHandler+0x294>)
 800d07e:	4283      	cmp	r3, r0
 800d080:	bf18      	it	ne
 800d082:	4293      	cmpne	r3, r2
 800d084:	f100 0018 	add.w	r0, r0, #24
 800d088:	bf0c      	ite	eq
 800d08a:	2201      	moveq	r2, #1
 800d08c:	2200      	movne	r2, #0
 800d08e:	4283      	cmp	r3, r0
 800d090:	bf08      	it	eq
 800d092:	f042 0201 	orreq.w	r2, r2, #1
 800d096:	3018      	adds	r0, #24
 800d098:	4283      	cmp	r3, r0
 800d09a:	bf08      	it	eq
 800d09c:	f042 0201 	orreq.w	r2, r2, #1
 800d0a0:	3018      	adds	r0, #24
 800d0a2:	4283      	cmp	r3, r0
 800d0a4:	bf08      	it	eq
 800d0a6:	f042 0201 	orreq.w	r2, r2, #1
 800d0aa:	3018      	adds	r0, #24
 800d0ac:	4283      	cmp	r3, r0
 800d0ae:	bf08      	it	eq
 800d0b0:	f042 0201 	orreq.w	r2, r2, #1
 800d0b4:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800d0b8:	4283      	cmp	r3, r0
 800d0ba:	bf08      	it	eq
 800d0bc:	f042 0201 	orreq.w	r2, r2, #1
 800d0c0:	3018      	adds	r0, #24
 800d0c2:	4283      	cmp	r3, r0
 800d0c4:	bf08      	it	eq
 800d0c6:	f042 0201 	orreq.w	r2, r2, #1
 800d0ca:	3018      	adds	r0, #24
 800d0cc:	4283      	cmp	r3, r0
 800d0ce:	bf08      	it	eq
 800d0d0:	f042 0201 	orreq.w	r2, r2, #1
 800d0d4:	3018      	adds	r0, #24
 800d0d6:	4283      	cmp	r3, r0
 800d0d8:	bf08      	it	eq
 800d0da:	f042 0201 	orreq.w	r2, r2, #1
 800d0de:	3018      	adds	r0, #24
 800d0e0:	4283      	cmp	r3, r0
 800d0e2:	bf08      	it	eq
 800d0e4:	f042 0201 	orreq.w	r2, r2, #1
 800d0e8:	3018      	adds	r0, #24
 800d0ea:	4283      	cmp	r3, r0
 800d0ec:	bf08      	it	eq
 800d0ee:	f042 0201 	orreq.w	r2, r2, #1
 800d0f2:	3018      	adds	r0, #24
 800d0f4:	4283      	cmp	r3, r0
 800d0f6:	bf08      	it	eq
 800d0f8:	f042 0201 	orreq.w	r2, r2, #1
 800d0fc:	b91a      	cbnz	r2, 800d106 <HAL_DMA_IRQHandler+0x25a>
 800d0fe:	4a0e      	ldr	r2, [pc, #56]	; (800d138 <HAL_DMA_IRQHandler+0x28c>)
 800d100:	4293      	cmp	r3, r2
 800d102:	f040 81c5 	bne.w	800d490 <HAL_DMA_IRQHandler+0x5e4>
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	0712      	lsls	r2, r2, #28
 800d10a:	d51e      	bpl.n	800d14a <HAL_DMA_IRQHandler+0x29e>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d10c:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d110:	681a      	ldr	r2, [r3, #0]
 800d112:	0352      	lsls	r2, r2, #13
 800d114:	f100 814e 	bmi.w	800d3b4 <HAL_DMA_IRQHandler+0x508>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d118:	681a      	ldr	r2, [r3, #0]
 800d11a:	05d2      	lsls	r2, r2, #23
 800d11c:	d403      	bmi.n	800d126 <HAL_DMA_IRQHandler+0x27a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d11e:	681a      	ldr	r2, [r3, #0]
 800d120:	f022 0208 	bic.w	r2, r2, #8
 800d124:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800d126:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800d128:	b17b      	cbz	r3, 800d14a <HAL_DMA_IRQHandler+0x29e>
 800d12a:	e00b      	b.n	800d144 <HAL_DMA_IRQHandler+0x298>
 800d12c:	20007634 	.word	0x20007634
 800d130:	40020028 	.word	0x40020028
 800d134:	40020010 	.word	0x40020010
 800d138:	400204b8 	.word	0x400204b8
 800d13c:	40020040 	.word	0x40020040
 800d140:	40020058 	.word	0x40020058
            hdma->XferHalfCpltCallback(hdma);
 800d144:	4630      	mov	r0, r6
 800d146:	4798      	blx	r3
 800d148:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d14a:	f001 011f 	and.w	r1, r1, #31
 800d14e:	2020      	movs	r0, #32
 800d150:	4088      	lsls	r0, r1
 800d152:	4238      	tst	r0, r7
 800d154:	d066      	beq.n	800d224 <HAL_DMA_IRQHandler+0x378>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800d156:	6832      	ldr	r2, [r6, #0]
 800d158:	4ba4      	ldr	r3, [pc, #656]	; (800d3ec <HAL_DMA_IRQHandler+0x540>)
 800d15a:	4fa5      	ldr	r7, [pc, #660]	; (800d3f0 <HAL_DMA_IRQHandler+0x544>)
 800d15c:	42ba      	cmp	r2, r7
 800d15e:	bf18      	it	ne
 800d160:	429a      	cmpne	r2, r3
 800d162:	f107 0718 	add.w	r7, r7, #24
 800d166:	bf0c      	ite	eq
 800d168:	2301      	moveq	r3, #1
 800d16a:	2300      	movne	r3, #0
 800d16c:	42ba      	cmp	r2, r7
 800d16e:	bf08      	it	eq
 800d170:	f043 0301 	orreq.w	r3, r3, #1
 800d174:	3718      	adds	r7, #24
 800d176:	42ba      	cmp	r2, r7
 800d178:	bf08      	it	eq
 800d17a:	f043 0301 	orreq.w	r3, r3, #1
 800d17e:	3718      	adds	r7, #24
 800d180:	42ba      	cmp	r2, r7
 800d182:	bf08      	it	eq
 800d184:	f043 0301 	orreq.w	r3, r3, #1
 800d188:	3718      	adds	r7, #24
 800d18a:	42ba      	cmp	r2, r7
 800d18c:	bf08      	it	eq
 800d18e:	f043 0301 	orreq.w	r3, r3, #1
 800d192:	3718      	adds	r7, #24
 800d194:	42ba      	cmp	r2, r7
 800d196:	bf08      	it	eq
 800d198:	f043 0301 	orreq.w	r3, r3, #1
 800d19c:	3718      	adds	r7, #24
 800d19e:	42ba      	cmp	r2, r7
 800d1a0:	bf08      	it	eq
 800d1a2:	f043 0301 	orreq.w	r3, r3, #1
 800d1a6:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800d1aa:	42ba      	cmp	r2, r7
 800d1ac:	bf08      	it	eq
 800d1ae:	f043 0301 	orreq.w	r3, r3, #1
 800d1b2:	3718      	adds	r7, #24
 800d1b4:	42ba      	cmp	r2, r7
 800d1b6:	bf08      	it	eq
 800d1b8:	f043 0301 	orreq.w	r3, r3, #1
 800d1bc:	3718      	adds	r7, #24
 800d1be:	42ba      	cmp	r2, r7
 800d1c0:	bf08      	it	eq
 800d1c2:	f043 0301 	orreq.w	r3, r3, #1
 800d1c6:	3718      	adds	r7, #24
 800d1c8:	42ba      	cmp	r2, r7
 800d1ca:	bf08      	it	eq
 800d1cc:	f043 0301 	orreq.w	r3, r3, #1
 800d1d0:	3718      	adds	r7, #24
 800d1d2:	42ba      	cmp	r2, r7
 800d1d4:	bf08      	it	eq
 800d1d6:	f043 0301 	orreq.w	r3, r3, #1
 800d1da:	3718      	adds	r7, #24
 800d1dc:	42ba      	cmp	r2, r7
 800d1de:	bf08      	it	eq
 800d1e0:	f043 0301 	orreq.w	r3, r3, #1
 800d1e4:	3718      	adds	r7, #24
 800d1e6:	42ba      	cmp	r2, r7
 800d1e8:	bf08      	it	eq
 800d1ea:	f043 0301 	orreq.w	r3, r3, #1
 800d1ee:	b91b      	cbnz	r3, 800d1f8 <HAL_DMA_IRQHandler+0x34c>
 800d1f0:	4b80      	ldr	r3, [pc, #512]	; (800d3f4 <HAL_DMA_IRQHandler+0x548>)
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	f040 8161 	bne.w	800d4ba <HAL_DMA_IRQHandler+0x60e>
 800d1f8:	6813      	ldr	r3, [r2, #0]
 800d1fa:	06df      	lsls	r7, r3, #27
 800d1fc:	d512      	bpl.n	800d224 <HAL_DMA_IRQHandler+0x378>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d1fe:	60a0      	str	r0, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800d200:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 800d204:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d206:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800d208:	f000 80b6 	beq.w	800d378 <HAL_DMA_IRQHandler+0x4cc>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d20c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d210:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d212:	f000 80d8 	beq.w	800d3c6 <HAL_DMA_IRQHandler+0x51a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d216:	031f      	lsls	r7, r3, #12
 800d218:	f140 80e3 	bpl.w	800d3e2 <HAL_DMA_IRQHandler+0x536>
          if(hdma->XferCpltCallback != NULL)
 800d21c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800d21e:	b10b      	cbz	r3, 800d224 <HAL_DMA_IRQHandler+0x378>
            hdma->XferCpltCallback(hdma);
 800d220:	4630      	mov	r0, r6
 800d222:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800d224:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800d226:	2b00      	cmp	r3, #0
 800d228:	f000 80c1 	beq.w	800d3ae <HAL_DMA_IRQHandler+0x502>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800d22c:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800d22e:	07dc      	lsls	r4, r3, #31
 800d230:	d51e      	bpl.n	800d270 <HAL_DMA_IRQHandler+0x3c4>
        __HAL_DMA_DISABLE(hdma);
 800d232:	6832      	ldr	r2, [r6, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 800d234:	2104      	movs	r1, #4
 800d236:	f886 1035 	strb.w	r1, [r6, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 800d23a:	496f      	ldr	r1, [pc, #444]	; (800d3f8 <HAL_DMA_IRQHandler+0x54c>)
        __HAL_DMA_DISABLE(hdma);
 800d23c:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800d23e:	fba1 5105 	umull	r5, r1, r1, r5
        __HAL_DMA_DISABLE(hdma);
 800d242:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800d246:	0a89      	lsrs	r1, r1, #10
        __HAL_DMA_DISABLE(hdma);
 800d248:	6013      	str	r3, [r2, #0]
 800d24a:	e002      	b.n	800d252 <HAL_DMA_IRQHandler+0x3a6>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800d24c:	6813      	ldr	r3, [r2, #0]
 800d24e:	07d8      	lsls	r0, r3, #31
 800d250:	d504      	bpl.n	800d25c <HAL_DMA_IRQHandler+0x3b0>
          if (++count > timeout)
 800d252:	9b01      	ldr	r3, [sp, #4]
 800d254:	3301      	adds	r3, #1
 800d256:	428b      	cmp	r3, r1
 800d258:	9301      	str	r3, [sp, #4]
 800d25a:	d9f7      	bls.n	800d24c <HAL_DMA_IRQHandler+0x3a0>
        __HAL_UNLOCK(hdma);
 800d25c:	2300      	movs	r3, #0
 800d25e:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800d262:	6813      	ldr	r3, [r2, #0]
 800d264:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 800d266:	bf4c      	ite	mi
 800d268:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 800d26a:	2301      	movpl	r3, #1
 800d26c:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 800d270:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800d272:	2b00      	cmp	r3, #0
 800d274:	f000 809b 	beq.w	800d3ae <HAL_DMA_IRQHandler+0x502>
          hdma->XferCpltCallback(hdma);
 800d278:	4630      	mov	r0, r6
}
 800d27a:	b002      	add	sp, #8
 800d27c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferCpltCallback(hdma);
 800d280:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800d282:	f8d3 e000 	ldr.w	lr, [r3]
 800d286:	f01e 0f04 	tst.w	lr, #4
 800d28a:	d00a      	beq.n	800d2a2 <HAL_DMA_IRQHandler+0x3f6>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800d28c:	f8d3 e000 	ldr.w	lr, [r3]
 800d290:	f02e 0e04 	bic.w	lr, lr, #4
 800d294:	f8c3 e000 	str.w	lr, [r3]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d298:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800d29a:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800d29c:	f042 0201 	orr.w	r2, r2, #1
 800d2a0:	6572      	str	r2, [r6, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d2a2:	fa27 f20c 	lsr.w	r2, r7, ip
 800d2a6:	07d2      	lsls	r2, r2, #31
 800d2a8:	f57f ae7d 	bpl.w	800cfa6 <HAL_DMA_IRQHandler+0xfa>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800d2ac:	4a53      	ldr	r2, [pc, #332]	; (800d3fc <HAL_DMA_IRQHandler+0x550>)
 800d2ae:	f8df e150 	ldr.w	lr, [pc, #336]	; 800d400 <HAL_DMA_IRQHandler+0x554>
 800d2b2:	4573      	cmp	r3, lr
 800d2b4:	bf18      	it	ne
 800d2b6:	4293      	cmpne	r3, r2
 800d2b8:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800d2bc:	bf0c      	ite	eq
 800d2be:	2201      	moveq	r2, #1
 800d2c0:	2200      	movne	r2, #0
 800d2c2:	4573      	cmp	r3, lr
 800d2c4:	bf08      	it	eq
 800d2c6:	f042 0201 	orreq.w	r2, r2, #1
 800d2ca:	f10e 0e18 	add.w	lr, lr, #24
 800d2ce:	4573      	cmp	r3, lr
 800d2d0:	bf08      	it	eq
 800d2d2:	f042 0201 	orreq.w	r2, r2, #1
 800d2d6:	f10e 0e18 	add.w	lr, lr, #24
 800d2da:	4573      	cmp	r3, lr
 800d2dc:	bf08      	it	eq
 800d2de:	f042 0201 	orreq.w	r2, r2, #1
 800d2e2:	f10e 0e18 	add.w	lr, lr, #24
 800d2e6:	4573      	cmp	r3, lr
 800d2e8:	bf08      	it	eq
 800d2ea:	f042 0201 	orreq.w	r2, r2, #1
 800d2ee:	f50e 7e56 	add.w	lr, lr, #856	; 0x358
 800d2f2:	4573      	cmp	r3, lr
 800d2f4:	bf08      	it	eq
 800d2f6:	f042 0201 	orreq.w	r2, r2, #1
 800d2fa:	f10e 0e18 	add.w	lr, lr, #24
 800d2fe:	4573      	cmp	r3, lr
 800d300:	bf08      	it	eq
 800d302:	f042 0201 	orreq.w	r2, r2, #1
 800d306:	f10e 0e18 	add.w	lr, lr, #24
 800d30a:	4573      	cmp	r3, lr
 800d30c:	bf08      	it	eq
 800d30e:	f042 0201 	orreq.w	r2, r2, #1
 800d312:	f10e 0e18 	add.w	lr, lr, #24
 800d316:	4573      	cmp	r3, lr
 800d318:	bf08      	it	eq
 800d31a:	f042 0201 	orreq.w	r2, r2, #1
 800d31e:	f10e 0e18 	add.w	lr, lr, #24
 800d322:	4573      	cmp	r3, lr
 800d324:	bf08      	it	eq
 800d326:	f042 0201 	orreq.w	r2, r2, #1
 800d32a:	f10e 0e18 	add.w	lr, lr, #24
 800d32e:	4573      	cmp	r3, lr
 800d330:	bf08      	it	eq
 800d332:	f042 0201 	orreq.w	r2, r2, #1
 800d336:	f10e 0e18 	add.w	lr, lr, #24
 800d33a:	4573      	cmp	r3, lr
 800d33c:	bf08      	it	eq
 800d33e:	f042 0201 	orreq.w	r2, r2, #1
 800d342:	f10e 0e18 	add.w	lr, lr, #24
 800d346:	4573      	cmp	r3, lr
 800d348:	bf08      	it	eq
 800d34a:	f042 0201 	orreq.w	r2, r2, #1
 800d34e:	2a00      	cmp	r2, #0
 800d350:	f47f ae1e 	bne.w	800cf90 <HAL_DMA_IRQHandler+0xe4>
 800d354:	2800      	cmp	r0, #0
 800d356:	f47f ae1b 	bne.w	800cf90 <HAL_DMA_IRQHandler+0xe4>
 800d35a:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d35c:	2204      	movs	r2, #4
 800d35e:	fa02 f20c 	lsl.w	r2, r2, ip
 800d362:	423a      	tst	r2, r7
 800d364:	f040 808c 	bne.w	800d480 <HAL_DMA_IRQHandler+0x5d4>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d368:	2210      	movs	r2, #16
 800d36a:	fa02 fc0c 	lsl.w	ip, r2, ip
 800d36e:	ea17 0f0c 	tst.w	r7, ip
 800d372:	f43f aeea 	beq.w	800d14a <HAL_DMA_IRQHandler+0x29e>
 800d376:	e680      	b.n	800d07a <HAL_DMA_IRQHandler+0x1ce>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d378:	f023 0316 	bic.w	r3, r3, #22
 800d37c:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800d37e:	6953      	ldr	r3, [r2, #20]
 800d380:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d384:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d386:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d03b      	beq.n	800d404 <HAL_DMA_IRQHandler+0x558>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d38c:	6813      	ldr	r3, [r2, #0]
 800d38e:	f023 0308 	bic.w	r3, r3, #8
 800d392:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800d394:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 800d396:	2000      	movs	r0, #0
          hdma->State = HAL_DMA_STATE_READY;
 800d398:	2201      	movs	r2, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800d39a:	408b      	lsls	r3, r1
 800d39c:	60a3      	str	r3, [r4, #8]
          if(hdma->XferAbortCallback != NULL)
 800d39e:	6d33      	ldr	r3, [r6, #80]	; 0x50
          __HAL_UNLOCK(hdma);
 800d3a0:	f886 0034 	strb.w	r0, [r6, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800d3a4:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	f47f af65 	bne.w	800d278 <HAL_DMA_IRQHandler+0x3cc>
}
 800d3ae:	b002      	add	sp, #8
 800d3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	0318      	lsls	r0, r3, #12
 800d3b8:	f57f aeb5 	bpl.w	800d126 <HAL_DMA_IRQHandler+0x27a>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800d3bc:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	f47f aec0 	bne.w	800d144 <HAL_DMA_IRQHandler+0x298>
 800d3c4:	e6c1      	b.n	800d14a <HAL_DMA_IRQHandler+0x29e>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d3c6:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800d3ca:	f47f af27 	bne.w	800d21c <HAL_DMA_IRQHandler+0x370>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800d3ce:	6811      	ldr	r1, [r2, #0]
 800d3d0:	f021 0110 	bic.w	r1, r1, #16
 800d3d4:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800d3d6:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 800d3d8:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 800d3dc:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
 800d3e0:	e71c      	b.n	800d21c <HAL_DMA_IRQHandler+0x370>
            if(hdma->XferM1CpltCallback != NULL)
 800d3e2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	f47f af1b 	bne.w	800d220 <HAL_DMA_IRQHandler+0x374>
 800d3ea:	e71b      	b.n	800d224 <HAL_DMA_IRQHandler+0x378>
 800d3ec:	40020010 	.word	0x40020010
 800d3f0:	40020028 	.word	0x40020028
 800d3f4:	400204b8 	.word	0x400204b8
 800d3f8:	1b4e81b5 	.word	0x1b4e81b5
 800d3fc:	40020058 	.word	0x40020058
 800d400:	40020040 	.word	0x40020040
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d404:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800d406:	2b00      	cmp	r3, #0
 800d408:	d1c0      	bne.n	800d38c <HAL_DMA_IRQHandler+0x4e0>
 800d40a:	e7c3      	b.n	800d394 <HAL_DMA_IRQHandler+0x4e8>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800d40c:	4a4b      	ldr	r2, [pc, #300]	; (800d53c <HAL_DMA_IRQHandler+0x690>)
 800d40e:	484c      	ldr	r0, [pc, #304]	; (800d540 <HAL_DMA_IRQHandler+0x694>)
 800d410:	4283      	cmp	r3, r0
 800d412:	bf18      	it	ne
 800d414:	4293      	cmpne	r3, r2
 800d416:	f100 0014 	add.w	r0, r0, #20
 800d41a:	bf0c      	ite	eq
 800d41c:	2201      	moveq	r2, #1
 800d41e:	2200      	movne	r2, #0
 800d420:	4283      	cmp	r3, r0
 800d422:	bf08      	it	eq
 800d424:	f042 0201 	orreq.w	r2, r2, #1
 800d428:	3014      	adds	r0, #20
 800d42a:	4283      	cmp	r3, r0
 800d42c:	bf08      	it	eq
 800d42e:	f042 0201 	orreq.w	r2, r2, #1
 800d432:	3014      	adds	r0, #20
 800d434:	4283      	cmp	r3, r0
 800d436:	bf08      	it	eq
 800d438:	f042 0201 	orreq.w	r2, r2, #1
 800d43c:	3014      	adds	r0, #20
 800d43e:	4283      	cmp	r3, r0
 800d440:	bf08      	it	eq
 800d442:	f042 0201 	orreq.w	r2, r2, #1
 800d446:	3014      	adds	r0, #20
 800d448:	4283      	cmp	r3, r0
 800d44a:	bf08      	it	eq
 800d44c:	f042 0201 	orreq.w	r2, r2, #1
 800d450:	b912      	cbnz	r2, 800d458 <HAL_DMA_IRQHandler+0x5ac>
 800d452:	4a3c      	ldr	r2, [pc, #240]	; (800d544 <HAL_DMA_IRQHandler+0x698>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d1aa      	bne.n	800d3ae <HAL_DMA_IRQHandler+0x502>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800d458:	6df0      	ldr	r0, [r6, #92]	; 0x5c
 800d45a:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800d45c:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800d45e:	f000 001f 	and.w	r0, r0, #31
 800d462:	4085      	lsls	r5, r0
 800d464:	420d      	tst	r5, r1
 800d466:	d018      	beq.n	800d49a <HAL_DMA_IRQHandler+0x5ee>
 800d468:	0757      	lsls	r7, r2, #29
 800d46a:	d516      	bpl.n	800d49a <HAL_DMA_IRQHandler+0x5ee>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d46c:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800d46e:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d470:	d547      	bpl.n	800d502 <HAL_DMA_IRQHandler+0x656>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800d472:	03d1      	lsls	r1, r2, #15
 800d474:	d44b      	bmi.n	800d50e <HAL_DMA_IRQHandler+0x662>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800d476:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800d478:	2b00      	cmp	r3, #0
 800d47a:	f47f aefd 	bne.w	800d278 <HAL_DMA_IRQHandler+0x3cc>
 800d47e:	e796      	b.n	800d3ae <HAL_DMA_IRQHandler+0x502>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800d480:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d482:	2210      	movs	r2, #16
 800d484:	fa02 fc0c 	lsl.w	ip, r2, ip
 800d488:	ea17 0f0c 	tst.w	r7, ip
 800d48c:	f43f ae5d 	beq.w	800d14a <HAL_DMA_IRQHandler+0x29e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800d490:	681a      	ldr	r2, [r3, #0]
 800d492:	0750      	lsls	r0, r2, #29
 800d494:	f57f ae59 	bpl.w	800d14a <HAL_DMA_IRQHandler+0x29e>
 800d498:	e638      	b.n	800d10c <HAL_DMA_IRQHandler+0x260>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800d49a:	2502      	movs	r5, #2
 800d49c:	4085      	lsls	r5, r0
 800d49e:	420d      	tst	r5, r1
 800d4a0:	d010      	beq.n	800d4c4 <HAL_DMA_IRQHandler+0x618>
 800d4a2:	0797      	lsls	r7, r2, #30
 800d4a4:	d50e      	bpl.n	800d4c4 <HAL_DMA_IRQHandler+0x618>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800d4a6:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d4a8:	0414      	lsls	r4, r2, #16
 800d4aa:	d535      	bpl.n	800d518 <HAL_DMA_IRQHandler+0x66c>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800d4ac:	03d0      	lsls	r0, r2, #15
 800d4ae:	d43f      	bmi.n	800d530 <HAL_DMA_IRQHandler+0x684>
          if(hdma->XferM1CpltCallback != NULL)
 800d4b0:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	f47f aee0 	bne.w	800d278 <HAL_DMA_IRQHandler+0x3cc>
 800d4b8:	e779      	b.n	800d3ae <HAL_DMA_IRQHandler+0x502>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800d4ba:	6813      	ldr	r3, [r2, #0]
 800d4bc:	079b      	lsls	r3, r3, #30
 800d4be:	f57f aeb1 	bpl.w	800d224 <HAL_DMA_IRQHandler+0x378>
 800d4c2:	e69c      	b.n	800d1fe <HAL_DMA_IRQHandler+0x352>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800d4c4:	2508      	movs	r5, #8
 800d4c6:	4085      	lsls	r5, r0
 800d4c8:	420d      	tst	r5, r1
 800d4ca:	f43f af70 	beq.w	800d3ae <HAL_DMA_IRQHandler+0x502>
 800d4ce:	0711      	lsls	r1, r2, #28
 800d4d0:	f57f af6d 	bpl.w	800d3ae <HAL_DMA_IRQHandler+0x502>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d4d4:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 800d4d6:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d4d8:	f022 020e 	bic.w	r2, r2, #14
 800d4dc:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800d4de:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 800d4e0:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800d4e2:	fa03 f000 	lsl.w	r0, r3, r0
 800d4e6:	6060      	str	r0, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800d4e8:	6573      	str	r3, [r6, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 800d4ea:	f886 1034 	strb.w	r1, [r6, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800d4ee:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 800d4f2:	2a00      	cmp	r2, #0
 800d4f4:	f43f af5b 	beq.w	800d3ae <HAL_DMA_IRQHandler+0x502>
        hdma->XferErrorCallback(hdma);
 800d4f8:	4630      	mov	r0, r6
}
 800d4fa:	b002      	add	sp, #8
 800d4fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 800d500:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800d502:	0692      	lsls	r2, r2, #26
 800d504:	d403      	bmi.n	800d50e <HAL_DMA_IRQHandler+0x662>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d506:	681a      	ldr	r2, [r3, #0]
 800d508:	f022 0204 	bic.w	r2, r2, #4
 800d50c:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 800d50e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800d510:	2b00      	cmp	r3, #0
 800d512:	f47f aeb1 	bne.w	800d278 <HAL_DMA_IRQHandler+0x3cc>
 800d516:	e74a      	b.n	800d3ae <HAL_DMA_IRQHandler+0x502>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800d518:	f012 0220 	ands.w	r2, r2, #32
 800d51c:	d108      	bne.n	800d530 <HAL_DMA_IRQHandler+0x684>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800d51e:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800d520:	2001      	movs	r0, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800d522:	f021 010a 	bic.w	r1, r1, #10
 800d526:	6019      	str	r1, [r3, #0]
          __HAL_UNLOCK(hdma);
 800d528:	f886 2034 	strb.w	r2, [r6, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800d52c:	f886 0035 	strb.w	r0, [r6, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800d530:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800d532:	2b00      	cmp	r3, #0
 800d534:	f47f aea0 	bne.w	800d278 <HAL_DMA_IRQHandler+0x3cc>
 800d538:	e739      	b.n	800d3ae <HAL_DMA_IRQHandler+0x502>
 800d53a:	bf00      	nop
 800d53c:	58025408 	.word	0x58025408
 800d540:	5802541c 	.word	0x5802541c
 800d544:	58025494 	.word	0x58025494

0800d548 <HAL_DMA2D_MspInit>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800d548:	4770      	bx	lr
 800d54a:	bf00      	nop

0800d54c <HAL_DMA2D_Init>:
  if(hdma2d == NULL)
 800d54c:	2800      	cmp	r0, #0
 800d54e:	d035      	beq.n	800d5bc <HAL_DMA2D_Init+0x70>
{
 800d550:	b538      	push	{r3, r4, r5, lr}
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800d552:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800d556:	4604      	mov	r4, r0
 800d558:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d55c:	b34b      	cbz	r3, 800d5b2 <HAL_DMA2D_Init+0x66>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800d55e:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800d560:	2002      	movs	r0, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800d562:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800d564:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800d568:	69e1      	ldr	r1, [r4, #28]
 800d56a:	681d      	ldr	r5, [r3, #0]
 800d56c:	4814      	ldr	r0, [pc, #80]	; (800d5c0 <HAL_DMA2D_Init+0x74>)
 800d56e:	4311      	orrs	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800d570:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800d572:	4028      	ands	r0, r5
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800d574:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800d576:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800d578:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800d57a:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800d57c:	4302      	orrs	r2, r0
 800d57e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800d580:	4810      	ldr	r0, [pc, #64]	; (800d5c4 <HAL_DMA2D_Init+0x78>)
 800d582:	4008      	ands	r0, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800d584:	4910      	ldr	r1, [pc, #64]	; (800d5c8 <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800d586:	4302      	orrs	r2, r0
 800d588:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800d58a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d58c:	4011      	ands	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800d58e:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800d592:	4329      	orrs	r1, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800d594:	0552      	lsls	r2, r2, #21
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800d596:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800d598:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800d59a:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800d59e:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800d5a0:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800d5a4:	430a      	orrs	r2, r1
 800d5a6:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800d5a8:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800d5aa:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800d5ac:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
 800d5b0:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 800d5b2:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 800d5b6:	f7ff ffc7 	bl	800d548 <HAL_DMA2D_MspInit>
 800d5ba:	e7d0      	b.n	800d55e <HAL_DMA2D_Init+0x12>
     return HAL_ERROR;
 800d5bc:	2001      	movs	r0, #1
}
 800d5be:	4770      	bx	lr
 800d5c0:	fff8ffbf 	.word	0xfff8ffbf
 800d5c4:	fffffef8 	.word	0xfffffef8
 800d5c8:	ffff0000 	.word	0xffff0000

0800d5cc <HAL_DMA2D_MspDeInit>:
 800d5cc:	4770      	bx	lr
 800d5ce:	bf00      	nop

0800d5d0 <HAL_DMA2D_DeInit>:
  if(hdma2d == NULL)
 800d5d0:	2800      	cmp	r0, #0
 800d5d2:	d06b      	beq.n	800d6ac <HAL_DMA2D_DeInit+0xdc>
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800d5d4:	4b40      	ldr	r3, [pc, #256]	; (800d6d8 <HAL_DMA2D_DeInit+0x108>)
 800d5d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
{
 800d5da:	b570      	push	{r4, r5, r6, lr}
 800d5dc:	4605      	mov	r5, r0
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800d5de:	6804      	ldr	r4, [r0, #0]
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800d5e0:	06d8      	lsls	r0, r3, #27
 800d5e2:	d508      	bpl.n	800d5f6 <HAL_DMA2D_DeInit+0x26>
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800d5e4:	6823      	ldr	r3, [r4, #0]
 800d5e6:	07d9      	lsls	r1, r3, #31
 800d5e8:	d418      	bmi.n	800d61c <HAL_DMA2D_DeInit+0x4c>
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 800d5ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5ec:	069a      	lsls	r2, r3, #26
 800d5ee:	d45f      	bmi.n	800d6b0 <HAL_DMA2D_DeInit+0xe0>
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 800d5f0:	69e3      	ldr	r3, [r4, #28]
 800d5f2:	069b      	lsls	r3, r3, #26
 800d5f4:	d431      	bmi.n	800d65a <HAL_DMA2D_DeInit+0x8a>
  hdma2d->Instance->CR       =    0U;
 800d5f6:	2600      	movs	r6, #0
  hdma2d->Instance->IFCR     = 0x3FU;
 800d5f8:	233f      	movs	r3, #63	; 0x3f
  HAL_DMA2D_MspDeInit(hdma2d);
 800d5fa:	4628      	mov	r0, r5
  hdma2d->Instance->CR       =    0U;
 800d5fc:	6026      	str	r6, [r4, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 800d5fe:	60a3      	str	r3, [r4, #8]
  hdma2d->Instance->FGOR     =    0U;
 800d600:	6126      	str	r6, [r4, #16]
  hdma2d->Instance->BGOR     =    0U;
 800d602:	61a6      	str	r6, [r4, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 800d604:	61e6      	str	r6, [r4, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 800d606:	6266      	str	r6, [r4, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 800d608:	6366      	str	r6, [r4, #52]	; 0x34
  HAL_DMA2D_MspDeInit(hdma2d);
 800d60a:	f7ff ffdf 	bl	800d5cc <HAL_DMA2D_MspDeInit>
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800d60e:	666e      	str	r6, [r5, #100]	; 0x64
  return HAL_OK;
 800d610:	4630      	mov	r0, r6
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 800d612:	f885 6061 	strb.w	r6, [r5, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
 800d616:	f885 6060 	strb.w	r6, [r5, #96]	; 0x60
}
 800d61a:	bd70      	pop	{r4, r5, r6, pc}

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 800d61c:	6823      	ldr	r3, [r4, #0]
 800d61e:	f023 0305 	bic.w	r3, r3, #5
 800d622:	f043 0304 	orr.w	r3, r3, #4
 800d626:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d628:	f7fe f928 	bl	800b87c <HAL_GetTick>
 800d62c:	4606      	mov	r6, r0

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800d62e:	e005      	b.n	800d63c <HAL_DMA2D_DeInit+0x6c>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800d630:	f7fe f924 	bl	800b87c <HAL_GetTick>
 800d634:	1b80      	subs	r0, r0, r6
 800d636:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d63a:	d82b      	bhi.n	800d694 <HAL_DMA2D_DeInit+0xc4>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800d63c:	682c      	ldr	r4, [r5, #0]
 800d63e:	6823      	ldr	r3, [r4, #0]
 800d640:	f013 0301 	ands.w	r3, r3, #1
 800d644:	d1f4      	bne.n	800d630 <HAL_DMA2D_DeInit+0x60>
      return HAL_TIMEOUT;
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800d646:	6822      	ldr	r2, [r4, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800d648:	2101      	movs	r1, #1
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800d64a:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 800d64e:	6022      	str	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800d650:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800d654:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60

  return HAL_OK;
 800d658:	e7cd      	b.n	800d5f6 <HAL_DMA2D_DeInit+0x26>
{
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800d65a:	6823      	ldr	r3, [r4, #0]
 800d65c:	f043 0304 	orr.w	r3, r3, #4
 800d660:	6023      	str	r3, [r4, #0]
    reg  = &(hdma2d->Instance->FGPFCCR);
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 800d662:	f7fe f90b 	bl	800b87c <HAL_GetTick>
 800d666:	4606      	mov	r6, r0

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800d668:	e005      	b.n	800d676 <HAL_DMA2D_DeInit+0xa6>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800d66a:	f7fe f907 	bl	800b87c <HAL_GetTick>
 800d66e:	1b80      	subs	r0, r0, r6
 800d670:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d674:	d80e      	bhi.n	800d694 <HAL_DMA2D_DeInit+0xc4>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800d676:	69e3      	ldr	r3, [r4, #28]
 800d678:	f013 0320 	ands.w	r3, r3, #32
 800d67c:	d1f5      	bne.n	800d66a <HAL_DMA2D_DeInit+0x9a>
      return HAL_TIMEOUT;
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 800d67e:	682c      	ldr	r4, [r5, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800d680:	2101      	movs	r1, #1
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 800d682:	6822      	ldr	r2, [r4, #0]
 800d684:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 800d688:	6022      	str	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800d68a:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800d68e:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60

  return HAL_OK;
 800d692:	e7b0      	b.n	800d5f6 <HAL_DMA2D_DeInit+0x26>
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800d694:	6e6b      	ldr	r3, [r5, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800d696:	2203      	movs	r2, #3
      __HAL_UNLOCK(hdma2d);
 800d698:	2100      	movs	r1, #0
            return HAL_ERROR;
 800d69a:	2001      	movs	r0, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800d69c:	f043 0320 	orr.w	r3, r3, #32
      __HAL_UNLOCK(hdma2d);
 800d6a0:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800d6a4:	666b      	str	r3, [r5, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800d6a6:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
}
 800d6aa:	bd70      	pop	{r4, r5, r6, pc}
     return HAL_ERROR;
 800d6ac:	2001      	movs	r0, #1
}
 800d6ae:	4770      	bx	lr
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800d6b0:	6823      	ldr	r3, [r4, #0]
 800d6b2:	f043 0304 	orr.w	r3, r3, #4
 800d6b6:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800d6b8:	f7fe f8e0 	bl	800b87c <HAL_GetTick>
 800d6bc:	4606      	mov	r6, r0
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800d6be:	e005      	b.n	800d6cc <HAL_DMA2D_DeInit+0xfc>
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800d6c0:	f7fe f8dc 	bl	800b87c <HAL_GetTick>
 800d6c4:	1b80      	subs	r0, r0, r6
 800d6c6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d6ca:	d8e3      	bhi.n	800d694 <HAL_DMA2D_DeInit+0xc4>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800d6cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6ce:	f013 0320 	ands.w	r3, r3, #32
 800d6d2:	d1f5      	bne.n	800d6c0 <HAL_DMA2D_DeInit+0xf0>
 800d6d4:	e7d3      	b.n	800d67e <HAL_DMA2D_DeInit+0xae>
 800d6d6:	bf00      	nop
 800d6d8:	58024400 	.word	0x58024400

0800d6dc <HAL_DMA2D_Start>:
{
 800d6dc:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
 800d6de:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 800d6e2:	2c01      	cmp	r4, #1
 800d6e4:	d03a      	beq.n	800d75c <HAL_DMA2D_Start+0x80>
 800d6e6:	2401      	movs	r4, #1
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800d6e8:	9d03      	ldr	r5, [sp, #12]
  __HAL_LOCK(hdma2d);
 800d6ea:	f880 4060 	strb.w	r4, [r0, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800d6ee:	2402      	movs	r4, #2
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800d6f0:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800d6f4:	f880 4061 	strb.w	r4, [r0, #97]	; 0x61

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800d6f8:	e9d0 4600 	ldrd	r4, r6, [r0]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800d6fc:	6c65      	ldr	r5, [r4, #68]	; 0x44
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800d6fe:	f5b6 3f40 	cmp.w	r6, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800d702:	f005 4c40 	and.w	ip, r5, #3221225472	; 0xc0000000
 800d706:	ea43 030c 	orr.w	r3, r3, ip
 800d70a:	6463      	str	r3, [r4, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800d70c:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800d70e:	d00a      	beq.n	800d726 <HAL_DMA2D_Start+0x4a>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if(hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 800d710:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 800d714:	d025      	beq.n	800d762 <HAL_DMA2D_Start+0x86>
    WRITE_REG(hdma2d->Instance->BGMAR , pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800d716:	60e1      	str	r1, [r4, #12]
  __HAL_DMA2D_ENABLE(hdma2d);
 800d718:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800d71a:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 800d71c:	f043 0301 	orr.w	r3, r3, #1
 800d720:	6023      	str	r3, [r4, #0]
}
 800d722:	bc70      	pop	{r4, r5, r6}
 800d724:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800d726:	6883      	ldr	r3, [r0, #8]
 800d728:	b1b3      	cbz	r3, 800d758 <HAL_DMA2D_Start+0x7c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800d72a:	2b01      	cmp	r3, #1
 800d72c:	d026      	beq.n	800d77c <HAL_DMA2D_Start+0xa0>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800d72e:	2b02      	cmp	r3, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800d730:	f401 027f 	and.w	r2, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800d734:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800d738:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800d73a:	d022      	beq.n	800d782 <HAL_DMA2D_Start+0xa6>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800d73c:	2b03      	cmp	r3, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800d73e:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800d742:	d010      	beq.n	800d766 <HAL_DMA2D_Start+0x8a>
      tmp2 = (tmp2 >> 20U);
 800d744:	0d13      	lsrs	r3, r2, #20
      tmp3 = (tmp3 >> 12U);
 800d746:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800d748:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 800d74a:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800d74c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800d750:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800d754:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800d758:	63a1      	str	r1, [r4, #56]	; 0x38
 800d75a:	e7dd      	b.n	800d718 <HAL_DMA2D_Start+0x3c>
  __HAL_LOCK(hdma2d);
 800d75c:	2002      	movs	r0, #2
}
 800d75e:	bc70      	pop	{r4, r5, r6}
 800d760:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR , pdata);
 800d762:	6161      	str	r1, [r4, #20]
 800d764:	e7d8      	b.n	800d718 <HAL_DMA2D_Start+0x3c>
      tmp2 = (tmp2 >> 19U);
 800d766:	0cd3      	lsrs	r3, r2, #19
      tmp3 = (tmp3 >> 11U);
 800d768:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800d76a:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 800d76c:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800d76e:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 800d772:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 800d776:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 800d77a:	e7ed      	b.n	800d758 <HAL_DMA2D_Start+0x7c>
      tmp = (tmp3 | tmp2 | tmp4);
 800d77c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800d780:	e7ea      	b.n	800d758 <HAL_DMA2D_Start+0x7c>
      tmp2 = (tmp2 >> 19U);
 800d782:	0cd3      	lsrs	r3, r2, #19
      tmp3 = (tmp3 >> 10U);
 800d784:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800d786:	02db      	lsls	r3, r3, #11
 800d788:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 800d78c:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 800d790:	e7e2      	b.n	800d758 <HAL_DMA2D_Start+0x7c>
 800d792:	bf00      	nop

0800d794 <HAL_DMA2D_PollForTransfer>:
{
 800d794:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 800d796:	2300      	movs	r3, #0
{
 800d798:	b082      	sub	sp, #8
 800d79a:	4604      	mov	r4, r0
 800d79c:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 800d79e:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800d7a0:	6803      	ldr	r3, [r0, #0]
 800d7a2:	681a      	ldr	r2, [r3, #0]
 800d7a4:	07d6      	lsls	r6, r2, #31
 800d7a6:	d40f      	bmi.n	800d7c8 <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800d7a8:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800d7aa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d7ac:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 800d7ae:	0691      	lsls	r1, r2, #26
 800d7b0:	d432      	bmi.n	800d818 <HAL_DMA2D_PollForTransfer+0x84>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800d7b2:	2112      	movs	r1, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800d7b4:	2201      	movs	r2, #1
  return HAL_OK;
 800d7b6:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800d7b8:	6099      	str	r1, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800d7ba:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
        __HAL_UNLOCK(hdma2d);
 800d7be:	2300      	movs	r3, #0
 800d7c0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
}
 800d7c4:	b002      	add	sp, #8
 800d7c6:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 800d7c8:	f7fe f858 	bl	800b87c <HAL_GetTick>
 800d7cc:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800d7ce:	1c6a      	adds	r2, r5, #1
 800d7d0:	6823      	ldr	r3, [r4, #0]
 800d7d2:	d150      	bne.n	800d876 <HAL_DMA2D_PollForTransfer+0xe2>
 800d7d4:	685a      	ldr	r2, [r3, #4]
 800d7d6:	0796      	lsls	r6, r2, #30
 800d7d8:	d4e6      	bmi.n	800d7a8 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800d7da:	685a      	ldr	r2, [r3, #4]
 800d7dc:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800d7de:	9a01      	ldr	r2, [sp, #4]
 800d7e0:	f012 0f21 	tst.w	r2, #33	; 0x21
 800d7e4:	d0f6      	beq.n	800d7d4 <HAL_DMA2D_PollForTransfer+0x40>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800d7e6:	9a01      	ldr	r2, [sp, #4]
 800d7e8:	0690      	lsls	r0, r2, #26
 800d7ea:	d503      	bpl.n	800d7f4 <HAL_DMA2D_PollForTransfer+0x60>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800d7ec:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d7ee:	f042 0202 	orr.w	r2, r2, #2
 800d7f2:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800d7f4:	9a01      	ldr	r2, [sp, #4]
 800d7f6:	07d1      	lsls	r1, r2, #31
 800d7f8:	d503      	bpl.n	800d802 <HAL_DMA2D_PollForTransfer+0x6e>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800d7fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d7fc:	f042 0201 	orr.w	r2, r2, #1
 800d800:	6662      	str	r2, [r4, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800d802:	2121      	movs	r1, #33	; 0x21
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d804:	2204      	movs	r2, #4
        return HAL_ERROR;
 800d806:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800d808:	6099      	str	r1, [r3, #8]
        __HAL_UNLOCK(hdma2d);
 800d80a:	2300      	movs	r3, #0
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d80c:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
        __HAL_UNLOCK(hdma2d);
 800d810:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
}
 800d814:	b002      	add	sp, #8
 800d816:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 800d818:	f7fe f830 	bl	800b87c <HAL_GetTick>
 800d81c:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800d81e:	1c68      	adds	r0, r5, #1
 800d820:	6823      	ldr	r3, [r4, #0]
 800d822:	d141      	bne.n	800d8a8 <HAL_DMA2D_PollForTransfer+0x114>
 800d824:	685a      	ldr	r2, [r3, #4]
 800d826:	06d1      	lsls	r1, r2, #27
 800d828:	d4c3      	bmi.n	800d7b2 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800d82a:	685a      	ldr	r2, [r3, #4]
 800d82c:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800d82e:	9a01      	ldr	r2, [sp, #4]
 800d830:	f012 0f29 	tst.w	r2, #41	; 0x29
 800d834:	d0f6      	beq.n	800d824 <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800d836:	9a01      	ldr	r2, [sp, #4]
 800d838:	0712      	lsls	r2, r2, #28
 800d83a:	d503      	bpl.n	800d844 <HAL_DMA2D_PollForTransfer+0xb0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800d83c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d83e:	f042 0204 	orr.w	r2, r2, #4
 800d842:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800d844:	9a01      	ldr	r2, [sp, #4]
 800d846:	0696      	lsls	r6, r2, #26
 800d848:	d503      	bpl.n	800d852 <HAL_DMA2D_PollForTransfer+0xbe>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800d84a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d84c:	f042 0202 	orr.w	r2, r2, #2
 800d850:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800d852:	9a01      	ldr	r2, [sp, #4]
 800d854:	07d5      	lsls	r5, r2, #31
 800d856:	d503      	bpl.n	800d860 <HAL_DMA2D_PollForTransfer+0xcc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800d858:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d85a:	f042 0201 	orr.w	r2, r2, #1
 800d85e:	6662      	str	r2, [r4, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800d860:	2129      	movs	r1, #41	; 0x29
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800d862:	2204      	movs	r2, #4
        return HAL_ERROR;
 800d864:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800d866:	6099      	str	r1, [r3, #8]
        __HAL_UNLOCK(hdma2d);
 800d868:	2300      	movs	r3, #0
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800d86a:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
        __HAL_UNLOCK(hdma2d);
 800d86e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
}
 800d872:	b002      	add	sp, #8
 800d874:	bd70      	pop	{r4, r5, r6, pc}
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800d876:	685a      	ldr	r2, [r3, #4]
 800d878:	0790      	lsls	r0, r2, #30
 800d87a:	d495      	bmi.n	800d7a8 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800d87c:	685a      	ldr	r2, [r3, #4]
 800d87e:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800d880:	9a01      	ldr	r2, [sp, #4]
 800d882:	f012 0f21 	tst.w	r2, #33	; 0x21
 800d886:	d1ae      	bne.n	800d7e6 <HAL_DMA2D_PollForTransfer+0x52>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800d888:	f7fd fff8 	bl	800b87c <HAL_GetTick>
 800d88c:	1b80      	subs	r0, r0, r6
 800d88e:	42a8      	cmp	r0, r5
 800d890:	d801      	bhi.n	800d896 <HAL_DMA2D_PollForTransfer+0x102>
 800d892:	2d00      	cmp	r5, #0
 800d894:	d19b      	bne.n	800d7ce <HAL_DMA2D_PollForTransfer+0x3a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800d896:	6e63      	ldr	r3, [r4, #100]	; 0x64
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800d898:	2203      	movs	r2, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800d89a:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 800d89e:	4610      	mov	r0, r2
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800d8a0:	6663      	str	r3, [r4, #100]	; 0x64
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800d8a2:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
          return HAL_TIMEOUT;
 800d8a6:	e78a      	b.n	800d7be <HAL_DMA2D_PollForTransfer+0x2a>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800d8a8:	685a      	ldr	r2, [r3, #4]
 800d8aa:	06d2      	lsls	r2, r2, #27
 800d8ac:	d481      	bmi.n	800d7b2 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800d8ae:	685a      	ldr	r2, [r3, #4]
 800d8b0:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800d8b2:	9a01      	ldr	r2, [sp, #4]
 800d8b4:	f012 0f29 	tst.w	r2, #41	; 0x29
 800d8b8:	d1bd      	bne.n	800d836 <HAL_DMA2D_PollForTransfer+0xa2>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800d8ba:	f7fd ffdf 	bl	800b87c <HAL_GetTick>
 800d8be:	1b80      	subs	r0, r0, r6
 800d8c0:	42a8      	cmp	r0, r5
 800d8c2:	d8e8      	bhi.n	800d896 <HAL_DMA2D_PollForTransfer+0x102>
 800d8c4:	2d00      	cmp	r5, #0
 800d8c6:	d1aa      	bne.n	800d81e <HAL_DMA2D_PollForTransfer+0x8a>
 800d8c8:	e7e5      	b.n	800d896 <HAL_DMA2D_PollForTransfer+0x102>
 800d8ca:	bf00      	nop

0800d8cc <HAL_DMA2D_LineEventCallback>:
 800d8cc:	4770      	bx	lr
 800d8ce:	bf00      	nop

0800d8d0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 800d8d0:	4770      	bx	lr
 800d8d2:	bf00      	nop

0800d8d4 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800d8d4:	6803      	ldr	r3, [r0, #0]
{
 800d8d6:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800d8d8:	685d      	ldr	r5, [r3, #4]
{
 800d8da:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800d8dc:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800d8de:	07ea      	lsls	r2, r5, #31
 800d8e0:	d501      	bpl.n	800d8e6 <HAL_DMA2D_IRQHandler+0x12>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800d8e2:	05f1      	lsls	r1, r6, #23
 800d8e4:	d456      	bmi.n	800d994 <HAL_DMA2D_IRQHandler+0xc0>
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800d8e6:	06aa      	lsls	r2, r5, #26
 800d8e8:	d501      	bpl.n	800d8ee <HAL_DMA2D_IRQHandler+0x1a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800d8ea:	04b3      	lsls	r3, r6, #18
 800d8ec:	d43b      	bmi.n	800d966 <HAL_DMA2D_IRQHandler+0x92>
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800d8ee:	0728      	lsls	r0, r5, #28
 800d8f0:	d501      	bpl.n	800d8f6 <HAL_DMA2D_IRQHandler+0x22>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800d8f2:	0531      	lsls	r1, r6, #20
 800d8f4:	d421      	bmi.n	800d93a <HAL_DMA2D_IRQHandler+0x66>
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800d8f6:	076a      	lsls	r2, r5, #29
 800d8f8:	d501      	bpl.n	800d8fe <HAL_DMA2D_IRQHandler+0x2a>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800d8fa:	0573      	lsls	r3, r6, #21
 800d8fc:	d472      	bmi.n	800d9e4 <HAL_DMA2D_IRQHandler+0x110>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800d8fe:	07a8      	lsls	r0, r5, #30
 800d900:	d501      	bpl.n	800d906 <HAL_DMA2D_IRQHandler+0x32>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800d902:	05b1      	lsls	r1, r6, #22
 800d904:	d404      	bmi.n	800d910 <HAL_DMA2D_IRQHandler+0x3c>
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800d906:	06ea      	lsls	r2, r5, #27
 800d908:	d501      	bpl.n	800d90e <HAL_DMA2D_IRQHandler+0x3a>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800d90a:	04f3      	lsls	r3, r6, #19
 800d90c:	d457      	bmi.n	800d9be <HAL_DMA2D_IRQHandler+0xea>
}
 800d90e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800d910:	6823      	ldr	r3, [r4, #0]
 800d912:	681a      	ldr	r2, [r3, #0]
 800d914:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d918:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800d91a:	2202      	movs	r2, #2
 800d91c:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d91e:	2201      	movs	r2, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d920:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d922:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
 800d924:	2300      	movs	r3, #0
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d926:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800d92a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if(hdma2d->XferCpltCallback != NULL)
 800d92e:	6a23      	ldr	r3, [r4, #32]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d0e8      	beq.n	800d906 <HAL_DMA2D_IRQHandler+0x32>
        hdma2d->XferCpltCallback(hdma2d);
 800d934:	4620      	mov	r0, r4
 800d936:	4798      	blx	r3
 800d938:	e7e5      	b.n	800d906 <HAL_DMA2D_IRQHandler+0x32>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800d93a:	6823      	ldr	r3, [r4, #0]
 800d93c:	681a      	ldr	r2, [r3, #0]
 800d93e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d942:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800d944:	2208      	movs	r2, #8
 800d946:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d948:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800d94a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d94c:	4313      	orrs	r3, r2
 800d94e:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d950:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800d954:	2200      	movs	r2, #0
      if(hdma2d->XferErrorCallback != NULL)
 800d956:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
 800d958:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if(hdma2d->XferErrorCallback != NULL)
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d0ca      	beq.n	800d8f6 <HAL_DMA2D_IRQHandler+0x22>
        hdma2d->XferErrorCallback(hdma2d);
 800d960:	4620      	mov	r0, r4
 800d962:	4798      	blx	r3
 800d964:	e7c7      	b.n	800d8f6 <HAL_DMA2D_IRQHandler+0x22>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800d966:	6823      	ldr	r3, [r4, #0]
 800d968:	681a      	ldr	r2, [r3, #0]
 800d96a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d96e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800d970:	2220      	movs	r2, #32
 800d972:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d974:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800d976:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d978:	f043 0302 	orr.w	r3, r3, #2
 800d97c:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d97e:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800d982:	2200      	movs	r2, #0
      if(hdma2d->XferErrorCallback != NULL)
 800d984:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
 800d986:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if(hdma2d->XferErrorCallback != NULL)
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d0af      	beq.n	800d8ee <HAL_DMA2D_IRQHandler+0x1a>
        hdma2d->XferErrorCallback(hdma2d);
 800d98e:	4620      	mov	r0, r4
 800d990:	4798      	blx	r3
 800d992:	e7ac      	b.n	800d8ee <HAL_DMA2D_IRQHandler+0x1a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800d994:	681a      	ldr	r2, [r3, #0]
 800d996:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d99a:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800d99c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800d99e:	f042 0201 	orr.w	r2, r2, #1
 800d9a2:	6642      	str	r2, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800d9a4:	2201      	movs	r2, #1
 800d9a6:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d9a8:	2304      	movs	r3, #4
 800d9aa:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      if(hdma2d->XferErrorCallback != NULL)
 800d9b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d095      	beq.n	800d8e6 <HAL_DMA2D_IRQHandler+0x12>
        hdma2d->XferErrorCallback(hdma2d);
 800d9ba:	4798      	blx	r3
 800d9bc:	e793      	b.n	800d8e6 <HAL_DMA2D_IRQHandler+0x12>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800d9be:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800d9c0:	2010      	movs	r0, #16
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d9c2:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
 800d9c4:	2500      	movs	r5, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800d9c6:	681a      	ldr	r2, [r3, #0]
 800d9c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d9cc:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800d9ce:	6098      	str	r0, [r3, #8]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800d9d0:	4620      	mov	r0, r4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d9d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
 800d9d4:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d9d8:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d9da:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800d9de:	f7ff ff77 	bl	800d8d0 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800d9e2:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800d9e4:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800d9e6:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800d9e8:	681a      	ldr	r2, [r3, #0]
 800d9ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d9ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800d9f0:	2204      	movs	r2, #4
 800d9f2:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800d9f4:	f7ff ff6a 	bl	800d8cc <HAL_DMA2D_LineEventCallback>
 800d9f8:	e781      	b.n	800d8fe <HAL_DMA2D_IRQHandler+0x2a>
 800d9fa:	bf00      	nop

0800d9fc <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 800d9fc:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
 800da00:	2a01      	cmp	r2, #1
 800da02:	d065      	beq.n	800dad0 <HAL_DMA2D_ConfigLayer+0xd4>
 800da04:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800da06:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800da0a:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800da0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 800da10:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
 800da12:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800da14:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
 800da18:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800da1c:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800da1e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800da20:	6b05      	ldr	r5, [r0, #48]	; 0x30
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800da22:	0512      	lsls	r2, r2, #20
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800da24:	f1a4 0c09 	sub.w	ip, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800da28:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800da2c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800da2e:	f1bc 0f01 	cmp.w	ip, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800da32:	ea42 0204 	orr.w	r2, r2, r4
 800da36:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800da3a:	d922      	bls.n	800da82 <HAL_DMA2D_ConfigLayer+0x86>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800da3c:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800da3e:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800da42:	b981      	cbnz	r1, 800da66 <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800da44:	6818      	ldr	r0, [r3, #0]
 800da46:	4923      	ldr	r1, [pc, #140]	; (800dad4 <HAL_DMA2D_ConfigLayer+0xd8>)
 800da48:	6a45      	ldr	r5, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800da4a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800da4c:	4029      	ands	r1, r5
 800da4e:	4311      	orrs	r1, r2
 800da50:	6241      	str	r1, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800da52:	6184      	str	r4, [r0, #24]
  __HAL_UNLOCK(hdma2d);
 800da54:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800da56:	2101      	movs	r1, #1
  return HAL_OK;
 800da58:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800da5a:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
 800da5e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 800da62:	bc70      	pop	{r4, r5, r6}
 800da64:	4770      	bx	lr
    if(pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800da66:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800da68:	681c      	ldr	r4, [r3, #0]
    if(pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800da6a:	d129      	bne.n	800dac0 <HAL_DMA2D_ConfigLayer+0xc4>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800da6c:	69e5      	ldr	r5, [r4, #28]
 800da6e:	491a      	ldr	r1, [pc, #104]	; (800dad8 <HAL_DMA2D_ConfigLayer+0xdc>)
 800da70:	4029      	ands	r1, r5
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800da72:	6c05      	ldr	r5, [r0, #64]	; 0x40
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800da74:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800da76:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
 800da7a:	4311      	orrs	r1, r2
 800da7c:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800da7e:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800da80:	e7e8      	b.n	800da54 <HAL_DMA2D_ConfigLayer+0x58>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800da82:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800da84:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 800da88:	4314      	orrs	r4, r2
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800da8a:	b961      	cbnz	r1, 800daa6 <HAL_DMA2D_ConfigLayer+0xaa>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800da8c:	6819      	ldr	r1, [r3, #0]
 800da8e:	4a11      	ldr	r2, [pc, #68]	; (800dad4 <HAL_DMA2D_ConfigLayer+0xd8>)
 800da90:	6a4e      	ldr	r6, [r1, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800da92:	6b58      	ldr	r0, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800da94:	4032      	ands	r2, r6
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800da96:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800da98:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800da9c:	4322      	orrs	r2, r4
 800da9e:	624a      	str	r2, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800daa0:	618d      	str	r5, [r1, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800daa2:	6288      	str	r0, [r1, #40]	; 0x28
 800daa4:	e7d6      	b.n	800da54 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800daa6:	6819      	ldr	r1, [r3, #0]
 800daa8:	4a0a      	ldr	r2, [pc, #40]	; (800dad4 <HAL_DMA2D_ConfigLayer+0xd8>)
 800daaa:	69cd      	ldr	r5, [r1, #28]
 800daac:	402a      	ands	r2, r5
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800daae:	6a85      	ldr	r5, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800dab0:	4322      	orrs	r2, r4
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800dab2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800dab4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800dab8:	61ca      	str	r2, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800daba:	610d      	str	r5, [r1, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800dabc:	620c      	str	r4, [r1, #32]
 800dabe:	e7c9      	b.n	800da54 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800dac0:	69e5      	ldr	r5, [r4, #28]
 800dac2:	4904      	ldr	r1, [pc, #16]	; (800dad4 <HAL_DMA2D_ConfigLayer+0xd8>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800dac4:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800dac6:	4029      	ands	r1, r5
 800dac8:	4311      	orrs	r1, r2
 800daca:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800dacc:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800dace:	e7c1      	b.n	800da54 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 800dad0:	2002      	movs	r0, #2
}
 800dad2:	4770      	bx	lr
 800dad4:	00ccfff0 	.word	0x00ccfff0
 800dad8:	00c0fff0 	.word	0x00c0fff0

0800dadc <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 800dadc:	4770      	bx	lr
 800dade:	bf00      	nop

0800dae0 <HAL_DSI_Init>:
  if (hdsi == NULL)
 800dae0:	2800      	cmp	r0, #0
 800dae2:	f000 80b1 	beq.w	800dc48 <HAL_DSI_Init+0x168>
{
 800dae6:	b570      	push	{r4, r5, r6, lr}
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800dae8:	7c43      	ldrb	r3, [r0, #17]
{
 800daea:	b082      	sub	sp, #8
 800daec:	4604      	mov	r4, r0
 800daee:	460d      	mov	r5, r1
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	f000 80a6 	beq.w	800dc42 <HAL_DSI_Init+0x162>
  __HAL_DSI_REG_ENABLE(hdsi);
 800daf6:	6823      	ldr	r3, [r4, #0]
  hdsi->State = HAL_DSI_STATE_BUSY;
 800daf8:	2103      	movs	r1, #3
  __HAL_DSI_REG_ENABLE(hdsi);
 800dafa:	2200      	movs	r2, #0
  hdsi->State = HAL_DSI_STATE_BUSY;
 800dafc:	7461      	strb	r1, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800dafe:	9200      	str	r2, [sp, #0]
 800db00:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800db04:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800db08:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800db0c:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800db10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800db14:	9300      	str	r3, [sp, #0]
 800db16:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800db18:	f7fd feb0 	bl	800b87c <HAL_GetTick>
 800db1c:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800db1e:	e006      	b.n	800db2e <HAL_DSI_Init+0x4e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800db20:	f7fd feac 	bl	800b87c <HAL_GetTick>
 800db24:	1b83      	subs	r3, r0, r6
 800db26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800db2a:	f200 8087 	bhi.w	800dc3c <HAL_DSI_Init+0x15c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800db2e:	6823      	ldr	r3, [r4, #0]
 800db30:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800db34:	04d1      	lsls	r1, r2, #19
 800db36:	d5f3      	bpl.n	800db20 <HAL_DSI_Init+0x40>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800db38:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800db3c:	4a43      	ldr	r2, [pc, #268]	; (800dc4c <HAL_DSI_Init+0x16c>)
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800db3e:	6828      	ldr	r0, [r5, #0]
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800db40:	400a      	ands	r2, r1
 800db42:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800db46:	686a      	ldr	r2, [r5, #4]
 800db48:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800db4c:	02d2      	lsls	r2, r2, #11
 800db4e:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
 800db52:	68a8      	ldr	r0, [r5, #8]
 800db54:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800db58:	430a      	orrs	r2, r1
  __HAL_DSI_PLL_ENABLE(hdsi);
 800db5a:	2100      	movs	r1, #0
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800db5c:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 800db60:	9101      	str	r1, [sp, #4]
 800db62:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800db66:	f042 0201 	orr.w	r2, r2, #1
 800db6a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800db6e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800db72:	f003 0301 	and.w	r3, r3, #1
 800db76:	9301      	str	r3, [sp, #4]
 800db78:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 800db7a:	f7fd fe7f 	bl	800b87c <HAL_GetTick>
 800db7e:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800db80:	e005      	b.n	800db8e <HAL_DSI_Init+0xae>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800db82:	f7fd fe7b 	bl	800b87c <HAL_GetTick>
 800db86:	1b80      	subs	r0, r0, r6
 800db88:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800db8c:	d856      	bhi.n	800dc3c <HAL_DSI_Init+0x15c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800db8e:	6823      	ldr	r3, [r4, #0]
 800db90:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800db94:	05d2      	lsls	r2, r2, #23
 800db96:	d5f4      	bpl.n	800db82 <HAL_DSI_Init+0xa2>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800db98:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800db9c:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800db9e:	f042 0206 	orr.w	r2, r2, #6
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800dba2:	68a0      	ldr	r0, [r4, #8]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800dba4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800dba8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800dbac:	f022 0203 	bic.w	r2, r2, #3
 800dbb0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800dbb4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800dbb8:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800dbba:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800dbbc:	f042 0201 	orr.w	r2, r2, #1
 800dbc0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800dbc4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800dbc8:	f022 0203 	bic.w	r2, r2, #3
 800dbcc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800dbd0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800dbd4:	430a      	orrs	r2, r1
 800dbd6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800dbda:	689a      	ldr	r2, [r3, #8]
 800dbdc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800dbe0:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800dbe2:	686a      	ldr	r2, [r5, #4]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800dbe4:	6899      	ldr	r1, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800dbe6:	2a01      	cmp	r2, #1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800dbe8:	ea41 0100 	orr.w	r1, r1, r0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800dbec:	6828      	ldr	r0, [r5, #0]
 800dbee:	bf38      	it	cc
 800dbf0:	2201      	movcc	r2, #1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800dbf2:	6099      	str	r1, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800dbf4:	68a9      	ldr	r1, [r5, #8]
 800dbf6:	4d16      	ldr	r5, [pc, #88]	; (800dc50 <HAL_DSI_Init+0x170>)
 800dbf8:	f001 0103 	and.w	r1, r1, #3
 800dbfc:	fb05 f202 	mul.w	r2, r5, r2
 800dc00:	408a      	lsls	r2, r1
 800dc02:	f246 11a8 	movw	r1, #25000	; 0x61a8
 800dc06:	fb01 f000 	mul.w	r0, r1, r0
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800dc0a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800dc0e:	fbb2 f2f0 	udiv	r2, r2, r0
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800dc12:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800dc16:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 800dc1a:	2100      	movs	r1, #0
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800dc1c:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
 800dc20:	4302      	orrs	r2, r0
  return HAL_OK;
 800dc22:	4608      	mov	r0, r1
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800dc24:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->State = HAL_DSI_STATE_READY;
 800dc28:	2201      	movs	r2, #1
  hdsi->Instance->IER[0U] = 0U;
 800dc2a:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800dc2e:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800dc32:	6161      	str	r1, [r4, #20]
  hdsi->ErrorMsk = 0U;
 800dc34:	61a1      	str	r1, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 800dc36:	7462      	strb	r2, [r4, #17]
}
 800dc38:	b002      	add	sp, #8
 800dc3a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 800dc3c:	2003      	movs	r0, #3
}
 800dc3e:	b002      	add	sp, #8
 800dc40:	bd70      	pop	{r4, r5, r6, pc}
    HAL_DSI_MspInit(hdsi);
 800dc42:	f7ff ff4b 	bl	800dadc <HAL_DSI_MspInit>
 800dc46:	e756      	b.n	800daf6 <HAL_DSI_Init+0x16>
    return HAL_ERROR;
 800dc48:	2001      	movs	r0, #1
}
 800dc4a:	4770      	bx	lr
 800dc4c:	fffc8603 	.word	0xfffc8603
 800dc50:	003d0900 	.word	0x003d0900

0800dc54 <HAL_DSI_TearingEffectCallback>:
 800dc54:	4770      	bx	lr
 800dc56:	bf00      	nop

0800dc58 <HAL_DSI_EndOfRefreshCallback>:
 800dc58:	4770      	bx	lr
 800dc5a:	bf00      	nop

0800dc5c <HAL_DSI_ErrorCallback>:
 800dc5c:	4770      	bx	lr
 800dc5e:	bf00      	nop

0800dc60 <HAL_DSI_IRQHandler>:
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800dc60:	6803      	ldr	r3, [r0, #0]
 800dc62:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800dc66:	07d1      	lsls	r1, r2, #31
{
 800dc68:	b510      	push	{r4, lr}
 800dc6a:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800dc6c:	d503      	bpl.n	800dc76 <HAL_DSI_IRQHandler+0x16>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 800dc6e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800dc72:	07d2      	lsls	r2, r2, #31
 800dc74:	d462      	bmi.n	800dd3c <HAL_DSI_IRQHandler+0xdc>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800dc76:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800dc7a:	0791      	lsls	r1, r2, #30
 800dc7c:	d503      	bpl.n	800dc86 <HAL_DSI_IRQHandler+0x26>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800dc7e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800dc82:	0792      	lsls	r2, r2, #30
 800dc84:	d44f      	bmi.n	800dd26 <HAL_DSI_IRQHandler+0xc6>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 800dc86:	69a3      	ldr	r3, [r4, #24]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d04b      	beq.n	800dd24 <HAL_DSI_IRQHandler+0xc4>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800dc8c:	6821      	ldr	r1, [r4, #0]
 800dc8e:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800dc92:	f8d1 00c4 	ldr.w	r0, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800dc96:	f8d1 30c0 	ldr.w	r3, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800dc9a:	4002      	ands	r2, r0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800dc9c:	f8d1 10c8 	ldr.w	r1, [r1, #200]	; 0xc8
 800dca0:	400b      	ands	r3, r1

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800dca2:	b291      	uxth	r1, r2
 800dca4:	b119      	cbz	r1, 800dcae <HAL_DSI_IRQHandler+0x4e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800dca6:	6961      	ldr	r1, [r4, #20]
 800dca8:	f041 0101 	orr.w	r1, r1, #1
 800dcac:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800dcae:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 800dcb2:	d003      	beq.n	800dcbc <HAL_DSI_IRQHandler+0x5c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800dcb4:	6962      	ldr	r2, [r4, #20]
 800dcb6:	f042 0202 	orr.w	r2, r2, #2
 800dcba:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800dcbc:	07d8      	lsls	r0, r3, #31
 800dcbe:	d503      	bpl.n	800dcc8 <HAL_DSI_IRQHandler+0x68>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800dcc0:	6962      	ldr	r2, [r4, #20]
 800dcc2:	f042 0204 	orr.w	r2, r2, #4
 800dcc6:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800dcc8:	0799      	lsls	r1, r3, #30
 800dcca:	d503      	bpl.n	800dcd4 <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800dccc:	6962      	ldr	r2, [r4, #20]
 800dcce:	f042 0208 	orr.w	r2, r2, #8
 800dcd2:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800dcd4:	f013 0f0c 	tst.w	r3, #12
 800dcd8:	d003      	beq.n	800dce2 <HAL_DSI_IRQHandler+0x82>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800dcda:	6962      	ldr	r2, [r4, #20]
 800dcdc:	f042 0210 	orr.w	r2, r2, #16
 800dce0:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800dce2:	06da      	lsls	r2, r3, #27
 800dce4:	d503      	bpl.n	800dcee <HAL_DSI_IRQHandler+0x8e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800dce6:	6962      	ldr	r2, [r4, #20]
 800dce8:	f042 0220 	orr.w	r2, r2, #32
 800dcec:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800dcee:	0698      	lsls	r0, r3, #26
 800dcf0:	d503      	bpl.n	800dcfa <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800dcf2:	6962      	ldr	r2, [r4, #20]
 800dcf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dcf8:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800dcfa:	0659      	lsls	r1, r3, #25
 800dcfc:	d503      	bpl.n	800dd06 <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800dcfe:	6962      	ldr	r2, [r4, #20]
 800dd00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dd04:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800dd06:	061a      	lsls	r2, r3, #24
 800dd08:	d503      	bpl.n	800dd12 <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800dd0a:	6962      	ldr	r2, [r4, #20]
 800dd0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dd10:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800dd12:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 800dd16:	d003      	beq.n	800dd20 <HAL_DSI_IRQHandler+0xc0>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800dd18:	6963      	ldr	r3, [r4, #20]
 800dd1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dd1e:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800dd20:	6963      	ldr	r3, [r4, #20]
 800dd22:	b93b      	cbnz	r3, 800dd34 <HAL_DSI_IRQHandler+0xd4>
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800dd24:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800dd26:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800dd28:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800dd2a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800dd2e:	f7ff ff93 	bl	800dc58 <HAL_DSI_EndOfRefreshCallback>
 800dd32:	e7a8      	b.n	800dc86 <HAL_DSI_IRQHandler+0x26>
      HAL_DSI_ErrorCallback(hdsi);
 800dd34:	4620      	mov	r0, r4
 800dd36:	f7ff ff91 	bl	800dc5c <HAL_DSI_ErrorCallback>
}
 800dd3a:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 800dd42:	f7ff ff87 	bl	800dc54 <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800dd46:	6823      	ldr	r3, [r4, #0]
 800dd48:	e795      	b.n	800dc76 <HAL_DSI_IRQHandler+0x16>
 800dd4a:	bf00      	nop

0800dd4c <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800dd4c:	7c03      	ldrb	r3, [r0, #16]
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	f000 80f8 	beq.w	800df44 <HAL_DSI_ConfigVideoMode+0x1f8>
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800dd54:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdsi);
 800dd56:	2201      	movs	r2, #1
 800dd58:	4684      	mov	ip, r0
{
 800dd5a:	b430      	push	{r4, r5}
  __HAL_LOCK(hdsi);
 800dd5c:	7402      	strb	r2, [r0, #16]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800dd5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if (VidCfg->ColorCoding == DSI_RGB666)
 800dd60:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800dd62:	f022 0201 	bic.w	r2, r2, #1
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800dd66:	68cc      	ldr	r4, [r1, #12]
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
  hdsi->Instance->VPCR |= VidCfg->PacketSize;

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800dd68:	694d      	ldr	r5, [r1, #20]
  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800dd6a:	2803      	cmp	r0, #3
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800dd6c:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800dd6e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800dd72:	f022 0201 	bic.w	r2, r2, #1
 800dd76:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800dd7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd7c:	f022 0203 	bic.w	r2, r2, #3
 800dd80:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800dd82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd84:	ea42 0204 	orr.w	r2, r2, r4
 800dd88:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800dd8a:	4a6f      	ldr	r2, [pc, #444]	; (800df48 <HAL_DSI_ConfigVideoMode+0x1fc>)
 800dd8c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800dd8e:	ea02 0204 	and.w	r2, r2, r4
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800dd92:	690c      	ldr	r4, [r1, #16]
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800dd94:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800dd96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd98:	ea42 0204 	orr.w	r2, r2, r4
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800dd9c:	4c6b      	ldr	r4, [pc, #428]	; (800df4c <HAL_DSI_ConfigVideoMode+0x200>)
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800dd9e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800dda0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dda2:	ea02 0204 	and.w	r2, r2, r4
 800dda6:	641a      	str	r2, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800dda8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ddaa:	ea42 0205 	orr.w	r2, r2, r5
 800ddae:	641a      	str	r2, [r3, #64]	; 0x40
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800ddb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ddb2:	ea02 0204 	and.w	r2, r2, r4
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800ddb6:	698c      	ldr	r4, [r1, #24]
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800ddb8:	645a      	str	r2, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800ddba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ddbc:	ea42 0204 	orr.w	r2, r2, r4
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800ddc0:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800ddc2:	645a      	str	r2, [r3, #68]	; 0x44
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800ddc4:	68da      	ldr	r2, [r3, #12]
 800ddc6:	f022 0203 	bic.w	r2, r2, #3
 800ddca:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800ddcc:	68da      	ldr	r2, [r3, #12]
 800ddce:	ea42 0204 	orr.w	r2, r2, r4
 800ddd2:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800ddd4:	695a      	ldr	r2, [r3, #20]
 800ddd6:	f022 0207 	bic.w	r2, r2, #7
 800ddda:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800dddc:	695c      	ldr	r4, [r3, #20]
 800ddde:	e9d1 5208 	ldrd	r5, r2, [r1, #32]
 800dde2:	ea42 0205 	orr.w	r2, r2, r5
 800dde6:	69cd      	ldr	r5, [r1, #28]
 800dde8:	ea42 0205 	orr.w	r2, r2, r5
 800ddec:	ea42 0204 	orr.w	r2, r2, r4
 800ddf0:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800ddf2:	691a      	ldr	r2, [r3, #16]
 800ddf4:	f022 020f 	bic.w	r2, r2, #15
 800ddf8:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 800ddfa:	691a      	ldr	r2, [r3, #16]
 800ddfc:	ea42 0200 	orr.w	r2, r2, r0
 800de00:	611a      	str	r2, [r3, #16]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800de02:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800de06:	f022 020e 	bic.w	r2, r2, #14
 800de0a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800de0e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800de12:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800de16:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  if (VidCfg->ColorCoding == DSI_RGB666)
 800de1a:	d107      	bne.n	800de2c <HAL_DSI_ConfigVideoMode+0xe0>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800de1c:	691a      	ldr	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800de1e:	6888      	ldr	r0, [r1, #8]
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800de20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800de24:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800de26:	691a      	ldr	r2, [r3, #16]
 800de28:	4302      	orrs	r2, r0
 800de2a:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800de2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800de2e:	4848      	ldr	r0, [pc, #288]	; (800df50 <HAL_DSI_ConfigVideoMode+0x204>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800de30:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800de32:	4002      	ands	r2, r0
 800de34:	649a      	str	r2, [r3, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800de36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800de38:	4322      	orrs	r2, r4

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800de3a:	6acc      	ldr	r4, [r1, #44]	; 0x2c
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800de3c:	649a      	str	r2, [r3, #72]	; 0x48
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 800de3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800de40:	4002      	ands	r2, r0
 800de42:	64da      	str	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800de44:	6cd8      	ldr	r0, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800de46:	4a43      	ldr	r2, [pc, #268]	; (800df54 <HAL_DSI_ConfigVideoMode+0x208>)
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800de48:	4320      	orrs	r0, r4
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800de4a:	6b4c      	ldr	r4, [r1, #52]	; 0x34
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800de4c:	64d8      	str	r0, [r3, #76]	; 0x4c
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800de4e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800de50:	4002      	ands	r2, r0
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800de52:	6b08      	ldr	r0, [r1, #48]	; 0x30
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800de54:	651a      	str	r2, [r3, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800de56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de58:	4302      	orrs	r2, r0
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800de5a:	483f      	ldr	r0, [pc, #252]	; (800df58 <HAL_DSI_ConfigVideoMode+0x20c>)
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800de5c:	651a      	str	r2, [r3, #80]	; 0x50
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800de5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de60:	4002      	ands	r2, r0
 800de62:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800de64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de66:	4322      	orrs	r2, r4

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800de68:	6b8c      	ldr	r4, [r1, #56]	; 0x38
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800de6a:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 800de6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800de6e:	4002      	ands	r2, r0
 800de70:	659a      	str	r2, [r3, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800de72:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800de74:	4322      	orrs	r2, r4

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800de76:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800de78:	659a      	str	r2, [r3, #88]	; 0x58
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800de7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800de7c:	4002      	ands	r2, r0
 800de7e:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800de80:	6dd8      	ldr	r0, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800de82:	4a31      	ldr	r2, [pc, #196]	; (800df48 <HAL_DSI_ConfigVideoMode+0x1fc>)
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800de84:	4320      	orrs	r0, r4
 800de86:	65d8      	str	r0, [r3, #92]	; 0x5c
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800de88:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800de8a:	4002      	ands	r2, r0
 800de8c:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800de8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800de90:	6c08      	ldr	r0, [r1, #64]	; 0x40
 800de92:	4302      	orrs	r2, r0

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800de94:	6c48      	ldr	r0, [r1, #68]	; 0x44
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800de96:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 800de98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800de9e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800dea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dea2:	4302      	orrs	r2, r0

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800dea4:	6c88      	ldr	r0, [r1, #72]	; 0x48
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800dea6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 800dea8:	699a      	ldr	r2, [r3, #24]
 800deaa:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 800deae:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800deb0:	699a      	ldr	r2, [r3, #24]
 800deb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800deb6:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800deb8:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 800deba:	699a      	ldr	r2, [r3, #24]
 800debc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800dec0:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800dec2:	699a      	ldr	r2, [r3, #24]
 800dec4:	4302      	orrs	r2, r0

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800dec6:	6d08      	ldr	r0, [r1, #80]	; 0x50
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800dec8:	619a      	str	r2, [r3, #24]
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800deca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800decc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ded0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800ded2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ded4:	4302      	orrs	r2, r0

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800ded6:	6d48      	ldr	r0, [r1, #84]	; 0x54
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800ded8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 800deda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dedc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dee0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800dee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dee4:	4302      	orrs	r2, r0

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800dee6:	6d88      	ldr	r0, [r1, #88]	; 0x58
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800dee8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 800deea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800deec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800def0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800def2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800def4:	4302      	orrs	r2, r0
 800def6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800def8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800defa:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800defc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800df00:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800df02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df04:	4302      	orrs	r2, r0

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800df06:	6e08      	ldr	r0, [r1, #96]	; 0x60
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800df08:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800df0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800df10:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800df12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df14:	4302      	orrs	r2, r0
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800df16:	e9d1 4019 	ldrd	r4, r0, [r1, #100]	; 0x64
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800df1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800df1c:	2100      	movs	r1, #0
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 800df1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800df24:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 800df26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df28:	4322      	orrs	r2, r4
 800df2a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 800df2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df2e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800df32:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800df34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df36:	4302      	orrs	r2, r0

  return HAL_OK;
 800df38:	4608      	mov	r0, r1
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800df3a:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdsi);
 800df3c:	f88c 1010 	strb.w	r1, [ip, #16]
}
 800df40:	bc30      	pop	{r4, r5}
 800df42:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800df44:	2002      	movs	r0, #2
}
 800df46:	4770      	bx	lr
 800df48:	ffffc000 	.word	0xffffc000
 800df4c:	ffffe000 	.word	0xffffe000
 800df50:	fffff000 	.word	0xfffff000
 800df54:	ffff8000 	.word	0xffff8000
 800df58:	fffffc00 	.word	0xfffffc00

0800df5c <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800df5c:	7c02      	ldrb	r2, [r0, #16]
{
 800df5e:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800df60:	2a01      	cmp	r2, #1
 800df62:	d00d      	beq.n	800df80 <HAL_DSI_ConfigFlowControl+0x24>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800df64:	6802      	ldr	r2, [r0, #0]
  hdsi->Instance->PCR |= FlowControl;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800df66:	f04f 0c00 	mov.w	ip, #0
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800df6a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800df6c:	f020 001f 	bic.w	r0, r0, #31
 800df70:	62d0      	str	r0, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800df72:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800df74:	4301      	orrs	r1, r0

  return HAL_OK;
 800df76:	4660      	mov	r0, ip
  hdsi->Instance->PCR |= FlowControl;
 800df78:	62d1      	str	r1, [r2, #44]	; 0x2c
  __HAL_UNLOCK(hdsi);
 800df7a:	f883 c010 	strb.w	ip, [r3, #16]
  return HAL_OK;
 800df7e:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800df80:	2002      	movs	r0, #2
}
 800df82:	4770      	bx	lr

0800df84 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800df84:	7c03      	ldrb	r3, [r0, #16]
 800df86:	2b01      	cmp	r3, #1
 800df88:	d021      	beq.n	800dfce <HAL_DSI_Start+0x4a>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800df8a:	6803      	ldr	r3, [r0, #0]
 800df8c:	2100      	movs	r1, #0
 800df8e:	4602      	mov	r2, r0
  __HAL_DSI_WRAPPER_ENABLE(hdsi);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 800df90:	4608      	mov	r0, r1
{
 800df92:	b410      	push	{r4}
 800df94:	b083      	sub	sp, #12
  __HAL_DSI_ENABLE(hdsi);
 800df96:	9100      	str	r1, [sp, #0]
 800df98:	685c      	ldr	r4, [r3, #4]
 800df9a:	f044 0401 	orr.w	r4, r4, #1
 800df9e:	605c      	str	r4, [r3, #4]
 800dfa0:	685c      	ldr	r4, [r3, #4]
 800dfa2:	f004 0401 	and.w	r4, r4, #1
 800dfa6:	9400      	str	r4, [sp, #0]
 800dfa8:	9c00      	ldr	r4, [sp, #0]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800dfaa:	9101      	str	r1, [sp, #4]
 800dfac:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 800dfb0:	f044 0408 	orr.w	r4, r4, #8
 800dfb4:	f8c3 4404 	str.w	r4, [r3, #1028]	; 0x404
 800dfb8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
  __HAL_UNLOCK(hdsi);
 800dfbc:	7411      	strb	r1, [r2, #16]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800dfbe:	f003 0308 	and.w	r3, r3, #8
 800dfc2:	9301      	str	r3, [sp, #4]
 800dfc4:	9b01      	ldr	r3, [sp, #4]
}
 800dfc6:	b003      	add	sp, #12
 800dfc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfcc:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800dfce:	2002      	movs	r0, #2
}
 800dfd0:	4770      	bx	lr
 800dfd2:	bf00      	nop

0800dfd4 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800dfd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfd8:	4699      	mov	r9, r3
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800dfda:	7c03      	ldrb	r3, [r0, #16]
 800dfdc:	2b01      	cmp	r3, #1
 800dfde:	d022      	beq.n	800e026 <HAL_DSI_ShortWrite+0x52>
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	4605      	mov	r5, r0
 800dfe4:	4688      	mov	r8, r1
 800dfe6:	4617      	mov	r7, r2
 800dfe8:	7403      	strb	r3, [r0, #16]
  tickstart = HAL_GetTick();
 800dfea:	f7fd fc47 	bl	800b87c <HAL_GetTick>
 800dfee:	4606      	mov	r6, r0
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800dff0:	e006      	b.n	800e000 <HAL_DSI_ShortWrite+0x2c>
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 800dff2:	f7fd fc43 	bl	800b87c <HAL_GetTick>
 800dff6:	eba0 0c06 	sub.w	ip, r0, r6
 800dffa:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
 800dffe:	d810      	bhi.n	800e022 <HAL_DSI_ShortWrite+0x4e>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800e000:	682c      	ldr	r4, [r5, #0]
 800e002:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800e004:	07db      	lsls	r3, r3, #31
 800e006:	d5f4      	bpl.n	800dff2 <HAL_DSI_ShortWrite+0x1e>
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800e008:	ea47 2309 	orr.w	r3, r7, r9, lsl #8
 800e00c:	9a08      	ldr	r2, [sp, #32]
  return HAL_OK;
 800e00e:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800e010:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e014:	ea43 1388 	orr.w	r3, r3, r8, lsl #6
 800e018:	66e3      	str	r3, [r4, #108]	; 0x6c

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800e01a:	2300      	movs	r3, #0
 800e01c:	742b      	strb	r3, [r5, #16]

  return status;
}
 800e01e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 800e022:	2003      	movs	r0, #3
 800e024:	e7f9      	b.n	800e01a <HAL_DSI_ShortWrite+0x46>
  __HAL_LOCK(hdsi);
 800e026:	2002      	movs	r0, #2
}
 800e028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800e02c <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800e02c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e030:	461f      	mov	r7, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800e032:	7c03      	ldrb	r3, [r0, #16]
 800e034:	2b01      	cmp	r3, #1
 800e036:	d05c      	beq.n	800e0f2 <HAL_DSI_LongWrite+0xc6>
 800e038:	2301      	movs	r3, #1
 800e03a:	4605      	mov	r5, r0
 800e03c:	4688      	mov	r8, r1
 800e03e:	4691      	mov	r9, r2
 800e040:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800e042:	f7fd fc1b 	bl	800b87c <HAL_GetTick>
 800e046:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800e048:	e006      	b.n	800e058 <HAL_DSI_LongWrite+0x2c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800e04a:	f7fd fc17 	bl	800b87c <HAL_GetTick>
 800e04e:	eba0 0c06 	sub.w	ip, r0, r6
 800e052:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
 800e056:	d848      	bhi.n	800e0ea <HAL_DSI_LongWrite+0xbe>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800e058:	682a      	ldr	r2, [r5, #0]
 800e05a:	6f54      	ldr	r4, [r2, #116]	; 0x74
 800e05c:	f014 0401 	ands.w	r4, r4, #1
 800e060:	d0f3      	beq.n	800e04a <HAL_DSI_LongWrite+0x1e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800e062:	2f03      	cmp	r7, #3
 800e064:	463b      	mov	r3, r7
 800e066:	bf28      	it	cs
 800e068:	2303      	movcs	r3, #3

  for (count = 0U; count < nbBytes; count++)
 800e06a:	2f00      	cmp	r7, #0
 800e06c:	d044      	beq.n	800e0f8 <HAL_DSI_LongWrite+0xcc>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800e06e:	9909      	ldr	r1, [sp, #36]	; 0x24
  for (count = 0U; count < nbBytes; count++)
 800e070:	2f01      	cmp	r7, #1
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800e072:	9808      	ldr	r0, [sp, #32]
 800e074:	7809      	ldrb	r1, [r1, #0]
 800e076:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
  for (count = 0U; count < nbBytes; count++)
 800e07a:	d909      	bls.n	800e090 <HAL_DSI_LongWrite+0x64>
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800e07c:	9809      	ldr	r0, [sp, #36]	; 0x24
  for (count = 0U; count < nbBytes; count++)
 800e07e:	2f02      	cmp	r7, #2
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800e080:	7840      	ldrb	r0, [r0, #1]
 800e082:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  for (count = 0U; count < nbBytes; count++)
 800e086:	d903      	bls.n	800e090 <HAL_DSI_LongWrite+0x64>
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800e088:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e08a:	7880      	ldrb	r0, [r0, #2]
 800e08c:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  }
  hdsi->Instance->GPDR = fifoword;
 800e090:	6711      	str	r1, [r2, #112]	; 0x70

  uicounter = NbParams - nbBytes;
  pparams += nbBytes;
 800e092:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e094:	4419      	add	r1, r3
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800e096:	1afb      	subs	r3, r7, r3
 800e098:	d017      	beq.n	800e0ca <HAL_DSI_LongWrite+0x9e>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800e09a:	2b04      	cmp	r3, #4
 800e09c:	461c      	mov	r4, r3
    fifoword = 0U;
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800e09e:	7808      	ldrb	r0, [r1, #0]
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800e0a0:	bf28      	it	cs
 800e0a2:	2404      	movcs	r4, #4
    for (count = 0U; count < nbBytes; count++)
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	d00c      	beq.n	800e0c2 <HAL_DSI_LongWrite+0x96>
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800e0a8:	784e      	ldrb	r6, [r1, #1]
    for (count = 0U; count < nbBytes; count++)
 800e0aa:	2b02      	cmp	r3, #2
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800e0ac:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
    for (count = 0U; count < nbBytes; count++)
 800e0b0:	d007      	beq.n	800e0c2 <HAL_DSI_LongWrite+0x96>
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800e0b2:	788e      	ldrb	r6, [r1, #2]
    for (count = 0U; count < nbBytes; count++)
 800e0b4:	2b03      	cmp	r3, #3
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800e0b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    for (count = 0U; count < nbBytes; count++)
 800e0ba:	d902      	bls.n	800e0c2 <HAL_DSI_LongWrite+0x96>
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800e0bc:	78ce      	ldrb	r6, [r1, #3]
 800e0be:	ea40 6006 	orr.w	r0, r0, r6, lsl #24
  while (uicounter != 0U)
 800e0c2:	1b1b      	subs	r3, r3, r4
    }
    hdsi->Instance->GPDR = fifoword;

    uicounter -= nbBytes;
    pparams += nbBytes;
 800e0c4:	4421      	add	r1, r4
    hdsi->Instance->GPDR = fifoword;
 800e0c6:	6710      	str	r0, [r2, #112]	; 0x70
  while (uicounter != 0U)
 800e0c8:	d1e7      	bne.n	800e09a <HAL_DSI_LongWrite+0x6e>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800e0ca:	3701      	adds	r7, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800e0cc:	ea49 1388 	orr.w	r3, r9, r8, lsl #6
 800e0d0:	0239      	lsls	r1, r7, #8
 800e0d2:	460f      	mov	r7, r1
 800e0d4:	b289      	uxth	r1, r1
 800e0d6:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
 800e0da:	430b      	orrs	r3, r1
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800e0dc:	2100      	movs	r1, #0
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800e0de:	433b      	orrs	r3, r7

  return HAL_OK;
 800e0e0:	4608      	mov	r0, r1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800e0e2:	66d3      	str	r3, [r2, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 800e0e4:	7429      	strb	r1, [r5, #16]
}
 800e0e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 800e0ea:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800e0ec:	742c      	strb	r4, [r5, #16]
}
 800e0ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hdsi);
 800e0f2:	2002      	movs	r0, #2
}
 800e0f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  hdsi->Instance->GPDR = fifoword;
 800e0f8:	9b08      	ldr	r3, [sp, #32]
 800e0fa:	6713      	str	r3, [r2, #112]	; 0x70
  while (uicounter != 0U)
 800e0fc:	e7e5      	b.n	800e0ca <HAL_DSI_LongWrite+0x9e>
 800e0fe:	bf00      	nop

0800e100 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 800e100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e104:	461c      	mov	r4, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800e106:	7c03      	ldrb	r3, [r0, #16]
{
 800e108:	f8dd 9020 	ldr.w	r9, [sp, #32]
  __HAL_LOCK(hdsi);
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	f000 808a 	beq.w	800e226 <HAL_DSI_Read+0x126>
 800e112:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 800e114:	2c02      	cmp	r4, #2
 800e116:	4605      	mov	r5, r0
 800e118:	460f      	mov	r7, r1
 800e11a:	4616      	mov	r6, r2
  __HAL_LOCK(hdsi);
 800e11c:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 800e11e:	d810      	bhi.n	800e142 <HAL_DSI_Read+0x42>
      return HAL_ERROR;
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800e120:	f1b9 0f06 	cmp.w	r9, #6
 800e124:	d02c      	beq.n	800e180 <HAL_DSI_Read+0x80>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 800e126:	f1b9 0f04 	cmp.w	r9, #4
 800e12a:	d068      	beq.n	800e1fe <HAL_DSI_Read+0xfe>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 800e12c:	f1b9 0f14 	cmp.w	r9, #20
 800e130:	d07c      	beq.n	800e22c <HAL_DSI_Read+0x12c>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 800e132:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 800e136:	d068      	beq.n	800e20a <HAL_DSI_Read+0x10a>
      __HAL_UNLOCK(hdsi);
 800e138:	2300      	movs	r3, #0
      return HAL_ERROR;
 800e13a:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 800e13c:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 800e13e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  tickstart = HAL_GetTick();
 800e142:	f7fd fb9b 	bl	800b87c <HAL_GetTick>
 800e146:	4680      	mov	r8, r0
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800e148:	e006      	b.n	800e158 <HAL_DSI_Read+0x58>
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 800e14a:	f7fd fb97 	bl	800b87c <HAL_GetTick>
 800e14e:	eba0 0008 	sub.w	r0, r0, r8
 800e152:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800e156:	d8ef      	bhi.n	800e138 <HAL_DSI_Read+0x38>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800e158:	682b      	ldr	r3, [r5, #0]
 800e15a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800e15c:	07d1      	lsls	r1, r2, #31
 800e15e:	d5f4      	bpl.n	800e14a <HAL_DSI_Read+0x4a>
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800e160:	0222      	lsls	r2, r4, #8
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800e162:	f1b9 0f06 	cmp.w	r9, #6
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800e166:	ea4f 2104 	mov.w	r1, r4, lsl #8
 800e16a:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800e16e:	b289      	uxth	r1, r1
 800e170:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
 800e174:	ea42 0201 	orr.w	r2, r2, r1
 800e178:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 800e17c:	66da      	str	r2, [r3, #108]	; 0x6c
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800e17e:	d1d2      	bne.n	800e126 <HAL_DSI_Read+0x26>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800e180:	9b09      	ldr	r3, [sp, #36]	; 0x24
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 800e182:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800e184:	021b      	lsls	r3, r3, #8
 800e186:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 800e18a:	f043 0306 	orr.w	r3, r3, #6
 800e18e:	66d3      	str	r3, [r2, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800e190:	f7fd fb74 	bl	800b87c <HAL_GetTick>
 800e194:	4607      	mov	r7, r0
  while (((int32_t)(datasize)) > 0)
 800e196:	e005      	b.n	800e1a4 <HAL_DSI_Read+0xa4>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800e198:	f7fd fb70 	bl	800b87c <HAL_GetTick>
 800e19c:	1bc1      	subs	r1, r0, r7
 800e19e:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 800e1a2:	d822      	bhi.n	800e1ea <HAL_DSI_Read+0xea>
  while (((int32_t)(datasize)) > 0)
 800e1a4:	2c00      	cmp	r4, #0
 800e1a6:	dd25      	ble.n	800e1f4 <HAL_DSI_Read+0xf4>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 800e1a8:	682b      	ldr	r3, [r5, #0]
 800e1aa:	6f59      	ldr	r1, [r3, #116]	; 0x74
 800e1ac:	06ca      	lsls	r2, r1, #27
 800e1ae:	d4f3      	bmi.n	800e198 <HAL_DSI_Read+0x98>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800e1b0:	2c04      	cmp	r4, #4
      fifoword = hdsi->Instance->GPDR;
 800e1b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800e1b4:	4622      	mov	r2, r4
 800e1b6:	bf28      	it	cs
 800e1b8:	2204      	movcs	r2, #4
      for (count = 0U; count < nbbytes; count++)
 800e1ba:	2c01      	cmp	r4, #1
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800e1bc:	ea4f 2113 	mov.w	r1, r3, lsr #8
 800e1c0:	7033      	strb	r3, [r6, #0]
 800e1c2:	ea4f 4013 	mov.w	r0, r3, lsr #16
 800e1c6:	ea4f 6313 	mov.w	r3, r3, lsr #24
      for (count = 0U; count < nbbytes; count++)
 800e1ca:	d006      	beq.n	800e1da <HAL_DSI_Read+0xda>
 800e1cc:	2c02      	cmp	r4, #2
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800e1ce:	7071      	strb	r1, [r6, #1]
      for (count = 0U; count < nbbytes; count++)
 800e1d0:	d003      	beq.n	800e1da <HAL_DSI_Read+0xda>
 800e1d2:	2c03      	cmp	r4, #3
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800e1d4:	70b0      	strb	r0, [r6, #2]
 800e1d6:	bf88      	it	hi
 800e1d8:	70f3      	strbhi	r3, [r6, #3]
        pdata++;
 800e1da:	4416      	add	r6, r2
        datasize--;
 800e1dc:	1aa4      	subs	r4, r4, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800e1de:	f7fd fb4d 	bl	800b87c <HAL_GetTick>
 800e1e2:	1bc1      	subs	r1, r0, r7
 800e1e4:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 800e1e8:	d9dc      	bls.n	800e1a4 <HAL_DSI_Read+0xa4>
      __HAL_UNLOCK(hdsi);
 800e1ea:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800e1ec:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800e1ee:	742b      	strb	r3, [r5, #16]
}
 800e1f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_UNLOCK(hdsi);
 800e1f4:	2300      	movs	r3, #0
  return HAL_OK;
 800e1f6:	4618      	mov	r0, r3
  __HAL_UNLOCK(hdsi);
 800e1f8:	742b      	strb	r3, [r5, #16]
}
 800e1fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800e1fe:	01bf      	lsls	r7, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 800e200:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800e202:	f047 0704 	orr.w	r7, r7, #4
 800e206:	66df      	str	r7, [r3, #108]	; 0x6c
}
 800e208:	e7c2      	b.n	800e190 <HAL_DSI_Read+0x90>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800e20a:	990a      	ldr	r1, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800e20c:	01bb      	lsls	r3, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800e20e:	682a      	ldr	r2, [r5, #0]
 800e210:	7849      	ldrb	r1, [r1, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800e212:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800e216:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e218:	7809      	ldrb	r1, [r1, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800e21a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800e21e:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 800e222:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 800e224:	e7b4      	b.n	800e190 <HAL_DSI_Read+0x90>
  __HAL_LOCK(hdsi);
 800e226:	2002      	movs	r0, #2
}
 800e228:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800e22c:	990a      	ldr	r1, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800e22e:	01bb      	lsls	r3, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800e230:	682a      	ldr	r2, [r5, #0]
 800e232:	7809      	ldrb	r1, [r1, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800e234:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800e238:	f043 0314 	orr.w	r3, r3, #20
 800e23c:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 800e23e:	e7a7      	b.n	800e190 <HAL_DSI_Read+0x90>

0800e240 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800e240:	4603      	mov	r3, r0
  if (hexti == NULL)
  {
    return HAL_ERROR;
  }

  switch (CallbackID)
 800e242:	b919      	cbnz	r1, 800e24c <HAL_EXTI_RegisterCallback+0xc>
 800e244:	b110      	cbz	r0, 800e24c <HAL_EXTI_RegisterCallback+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800e246:	2000      	movs	r0, #0
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800e248:	605a      	str	r2, [r3, #4]
      break;
 800e24a:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 800e24c:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 800e24e:	4770      	bx	lr

0800e250 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800e250:	4603      	mov	r3, r0
 800e252:	b110      	cbz	r0, 800e25a <HAL_EXTI_GetHandle+0xa>
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;

    return HAL_OK;
 800e254:	2000      	movs	r0, #0
    hexti->Line = ExtiLine;
 800e256:	6019      	str	r1, [r3, #0]
    return HAL_OK;
 800e258:	4770      	bx	lr
    return HAL_ERROR;
 800e25a:	2001      	movs	r0, #1
  }
}
 800e25c:	4770      	bx	lr
 800e25e:	bf00      	nop

0800e260 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e264:	680d      	ldr	r5, [r1, #0]
{
 800e266:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e268:	2d00      	cmp	r5, #0
 800e26a:	f000 80e7 	beq.w	800e43c <HAL_GPIO_Init+0x1dc>
 800e26e:	f04f 0c00 	mov.w	ip, #0
 800e272:	f8df 8260 	ldr.w	r8, [pc, #608]	; 800e4d4 <HAL_GPIO_Init+0x274>
  uint32_t position = 0x00U;
 800e276:	4663      	mov	r3, ip
 800e278:	e025      	b.n	800e2c6 <HAL_GPIO_Init+0x66>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e27a:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e27e:	f003 0907 	and.w	r9, r3, #7
 800e282:	f04f 0a0f 	mov.w	sl, #15
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e286:	f004 0403 	and.w	r4, r4, #3
 800e28a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e28e:	ea4f 0989 	mov.w	r9, r9, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e292:	fa04 f40c 	lsl.w	r4, r4, ip
        temp = GPIOx->AFR[position >> 3U];
 800e296:	f8de 2020 	ldr.w	r2, [lr, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e29a:	fa0a fa09 	lsl.w	sl, sl, r9
 800e29e:	ea22 0a0a 	bic.w	sl, r2, sl
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e2a2:	690a      	ldr	r2, [r1, #16]
 800e2a4:	fa02 f209 	lsl.w	r2, r2, r9
 800e2a8:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->AFR[position >> 3U] = temp;
 800e2ac:	f8ce 2020 	str.w	r2, [lr, #32]
      temp = GPIOx->MODER;
 800e2b0:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800e2b2:	4032      	ands	r2, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e2b4:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 800e2b6:	6004      	str	r4, [r0, #0]
        }
        EXTI->FTSR1 = temp;
      }
    }

    position++;
 800e2b8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e2ba:	f10c 0c02 	add.w	ip, ip, #2
 800e2be:	fa35 f203 	lsrs.w	r2, r5, r3
 800e2c2:	f000 80bb 	beq.w	800e43c <HAL_GPIO_Init+0x1dc>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800e2c6:	2201      	movs	r2, #1
 800e2c8:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 800e2ca:	ea12 0e05 	ands.w	lr, r2, r5
 800e2ce:	d0f3      	beq.n	800e2b8 <HAL_GPIO_Init+0x58>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800e2d0:	684c      	ldr	r4, [r1, #4]
 800e2d2:	f024 0910 	bic.w	r9, r4, #16
 800e2d6:	f109 36ff 	add.w	r6, r9, #4294967295
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800e2da:	2e01      	cmp	r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e2dc:	f04f 0603 	mov.w	r6, #3
 800e2e0:	fa06 f60c 	lsl.w	r6, r6, ip
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800e2e4:	f200 80ad 	bhi.w	800e442 <HAL_GPIO_Init+0x1e2>
        temp = GPIOx->OSPEEDR;
 800e2e8:	f8d0 b008 	ldr.w	fp, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e2ec:	68cf      	ldr	r7, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e2ee:	ea2b 0b06 	bic.w	fp, fp, r6
 800e2f2:	43f6      	mvns	r6, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e2f4:	fa07 fa0c 	lsl.w	sl, r7, ip
 800e2f8:	ea4a 0a0b 	orr.w	sl, sl, fp
        GPIOx->OSPEEDR = temp;
 800e2fc:	f8c0 a008 	str.w	sl, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800e300:	ea4f 1a14 	mov.w	sl, r4, lsr #4
        temp = GPIOx->OTYPER;
 800e304:	f8d0 b004 	ldr.w	fp, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800e308:	fa0a fa03 	lsl.w	sl, sl, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e30c:	ea2b 0202 	bic.w	r2, fp, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800e310:	ea4a 0202 	orr.w	r2, sl, r2
        GPIOx->OTYPER = temp;
 800e314:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800e316:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800e318:	f1b9 0f02 	cmp.w	r9, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e31c:	ea02 0a06 	and.w	sl, r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e320:	688a      	ldr	r2, [r1, #8]
 800e322:	fa02 f20c 	lsl.w	r2, r2, ip
 800e326:	ea42 020a 	orr.w	r2, r2, sl
      GPIOx->PUPDR = temp;
 800e32a:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800e32c:	d0a5      	beq.n	800e27a <HAL_GPIO_Init+0x1a>
      temp = GPIOx->MODER;
 800e32e:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800e330:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e332:	f004 0203 	and.w	r2, r4, #3
 800e336:	fa02 f20c 	lsl.w	r2, r2, ip
 800e33a:	4332      	orrs	r2, r6
      GPIOx->MODER = temp;
 800e33c:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800e33e:	00e2      	lsls	r2, r4, #3
 800e340:	d5ba      	bpl.n	800e2b8 <HAL_GPIO_Init+0x58>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e342:	4e5d      	ldr	r6, [pc, #372]	; (800e4b8 <HAL_GPIO_Init+0x258>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e344:	f003 0903 	and.w	r9, r3, #3
 800e348:	f04f 0a0f 	mov.w	sl, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e34c:	4f5b      	ldr	r7, [pc, #364]	; (800e4bc <HAL_GPIO_Init+0x25c>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e34e:	f8d6 20f4 	ldr.w	r2, [r6, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e352:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e356:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e358:	f042 0202 	orr.w	r2, r2, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e35c:	fa0a fa09 	lsl.w	sl, sl, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e360:	f8c6 20f4 	str.w	r2, [r6, #244]	; 0xf4
 800e364:	f8d6 20f4 	ldr.w	r2, [r6, #244]	; 0xf4
 800e368:	f023 0603 	bic.w	r6, r3, #3
 800e36c:	f002 0202 	and.w	r2, r2, #2
 800e370:	4446      	add	r6, r8
 800e372:	9201      	str	r2, [sp, #4]
 800e374:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800e376:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e378:	ea22 020a 	bic.w	r2, r2, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e37c:	d026      	beq.n	800e3cc <HAL_GPIO_Init+0x16c>
 800e37e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800e382:	42b8      	cmp	r0, r7
 800e384:	d066      	beq.n	800e454 <HAL_GPIO_Init+0x1f4>
 800e386:	4f4e      	ldr	r7, [pc, #312]	; (800e4c0 <HAL_GPIO_Init+0x260>)
 800e388:	42b8      	cmp	r0, r7
 800e38a:	d06a      	beq.n	800e462 <HAL_GPIO_Init+0x202>
 800e38c:	4f4d      	ldr	r7, [pc, #308]	; (800e4c4 <HAL_GPIO_Init+0x264>)
 800e38e:	42b8      	cmp	r0, r7
 800e390:	d059      	beq.n	800e446 <HAL_GPIO_Init+0x1e6>
 800e392:	4f4d      	ldr	r7, [pc, #308]	; (800e4c8 <HAL_GPIO_Init+0x268>)
 800e394:	42b8      	cmp	r0, r7
 800e396:	d072      	beq.n	800e47e <HAL_GPIO_Init+0x21e>
 800e398:	4f4c      	ldr	r7, [pc, #304]	; (800e4cc <HAL_GPIO_Init+0x26c>)
 800e39a:	42b8      	cmp	r0, r7
 800e39c:	d076      	beq.n	800e48c <HAL_GPIO_Init+0x22c>
 800e39e:	4f4c      	ldr	r7, [pc, #304]	; (800e4d0 <HAL_GPIO_Init+0x270>)
 800e3a0:	42b8      	cmp	r0, r7
 800e3a2:	d065      	beq.n	800e470 <HAL_GPIO_Init+0x210>
 800e3a4:	f8df a130 	ldr.w	sl, [pc, #304]	; 800e4d8 <HAL_GPIO_Init+0x278>
 800e3a8:	4550      	cmp	r0, sl
 800e3aa:	d076      	beq.n	800e49a <HAL_GPIO_Init+0x23a>
 800e3ac:	f8df a12c 	ldr.w	sl, [pc, #300]	; 800e4dc <HAL_GPIO_Init+0x27c>
 800e3b0:	4550      	cmp	r0, sl
 800e3b2:	d079      	beq.n	800e4a8 <HAL_GPIO_Init+0x248>
 800e3b4:	f8df a128 	ldr.w	sl, [pc, #296]	; 800e4e0 <HAL_GPIO_Init+0x280>
 800e3b8:	4550      	cmp	r0, sl
 800e3ba:	bf0c      	ite	eq
 800e3bc:	f04f 0a09 	moveq.w	sl, #9
 800e3c0:	f04f 0a0a 	movne.w	sl, #10
 800e3c4:	fa0a f909 	lsl.w	r9, sl, r9
 800e3c8:	ea42 0209 	orr.w	r2, r2, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e3cc:	60b2      	str	r2, [r6, #8]
        temp = EXTI_CurrentCPU->IMR1;
 800e3ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800e3d2:	03e7      	lsls	r7, r4, #15
        temp &= ~(iocurrent);
 800e3d4:	ea6f 060e 	mvn.w	r6, lr
        temp = EXTI_CurrentCPU->IMR1;
 800e3d8:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
        EXTI_CurrentCPU->IMR1 = temp;
 800e3dc:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
    position++;
 800e3e0:	f103 0301 	add.w	r3, r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e3e4:	f10c 0c02 	add.w	ip, ip, #2
        temp &= ~(iocurrent);
 800e3e8:	bf54      	ite	pl
 800e3ea:	4032      	andpl	r2, r6
          temp |= iocurrent;
 800e3ec:	ea4e 0202 	orrmi.w	r2, lr, r2
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800e3f0:	03a7      	lsls	r7, r4, #14
        EXTI_CurrentCPU->IMR1 = temp;
 800e3f2:	f8c9 2080 	str.w	r2, [r9, #128]	; 0x80
        temp = EXTI_CurrentCPU->EMR1;
 800e3f6:	f8d9 2084 	ldr.w	r2, [r9, #132]	; 0x84
        EXTI_CurrentCPU->EMR1 = temp;
 800e3fa:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800e3fe:	bf54      	ite	pl
 800e400:	4032      	andpl	r2, r6
          temp |= iocurrent;
 800e402:	ea4e 0202 	orrmi.w	r2, lr, r2
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800e406:	02e7      	lsls	r7, r4, #11
        EXTI_CurrentCPU->EMR1 = temp;
 800e408:	f8c9 2084 	str.w	r2, [r9, #132]	; 0x84
        temp = EXTI->RTSR1;
 800e40c:	f8d9 2000 	ldr.w	r2, [r9]
        EXTI->RTSR1 = temp;
 800e410:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800e414:	bf54      	ite	pl
 800e416:	4032      	andpl	r2, r6
          temp |= iocurrent;
 800e418:	ea4e 0202 	orrmi.w	r2, lr, r2
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800e41c:	02a4      	lsls	r4, r4, #10
        EXTI->FTSR1 = temp;
 800e41e:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 800e422:	f8c9 2000 	str.w	r2, [r9]
        temp = EXTI->FTSR1;
 800e426:	f8d9 2004 	ldr.w	r2, [r9, #4]
        temp &= ~(iocurrent);
 800e42a:	bf54      	ite	pl
 800e42c:	4032      	andpl	r2, r6
          temp |= iocurrent;
 800e42e:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->FTSR1 = temp;
 800e432:	6062      	str	r2, [r4, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e434:	fa35 f203 	lsrs.w	r2, r5, r3
 800e438:	f47f af45 	bne.w	800e2c6 <HAL_GPIO_Init+0x66>
  }
}
 800e43c:	b003      	add	sp, #12
 800e43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e442:	43f6      	mvns	r6, r6
 800e444:	e767      	b.n	800e316 <HAL_GPIO_Init+0xb6>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e446:	f04f 0a03 	mov.w	sl, #3
 800e44a:	fa0a f909 	lsl.w	r9, sl, r9
 800e44e:	ea42 0209 	orr.w	r2, r2, r9
 800e452:	e7bb      	b.n	800e3cc <HAL_GPIO_Init+0x16c>
 800e454:	f04f 0a01 	mov.w	sl, #1
 800e458:	fa0a f909 	lsl.w	r9, sl, r9
 800e45c:	ea42 0209 	orr.w	r2, r2, r9
 800e460:	e7b4      	b.n	800e3cc <HAL_GPIO_Init+0x16c>
 800e462:	f04f 0a02 	mov.w	sl, #2
 800e466:	fa0a f909 	lsl.w	r9, sl, r9
 800e46a:	ea42 0209 	orr.w	r2, r2, r9
 800e46e:	e7ad      	b.n	800e3cc <HAL_GPIO_Init+0x16c>
 800e470:	f04f 0a06 	mov.w	sl, #6
 800e474:	fa0a f909 	lsl.w	r9, sl, r9
 800e478:	ea42 0209 	orr.w	r2, r2, r9
 800e47c:	e7a6      	b.n	800e3cc <HAL_GPIO_Init+0x16c>
 800e47e:	f04f 0a04 	mov.w	sl, #4
 800e482:	fa0a f909 	lsl.w	r9, sl, r9
 800e486:	ea42 0209 	orr.w	r2, r2, r9
 800e48a:	e79f      	b.n	800e3cc <HAL_GPIO_Init+0x16c>
 800e48c:	f04f 0a05 	mov.w	sl, #5
 800e490:	fa0a f909 	lsl.w	r9, sl, r9
 800e494:	ea42 0209 	orr.w	r2, r2, r9
 800e498:	e798      	b.n	800e3cc <HAL_GPIO_Init+0x16c>
 800e49a:	f04f 0a07 	mov.w	sl, #7
 800e49e:	fa0a f909 	lsl.w	r9, sl, r9
 800e4a2:	ea42 0209 	orr.w	r2, r2, r9
 800e4a6:	e791      	b.n	800e3cc <HAL_GPIO_Init+0x16c>
 800e4a8:	f04f 0a08 	mov.w	sl, #8
 800e4ac:	fa0a f909 	lsl.w	r9, sl, r9
 800e4b0:	ea42 0209 	orr.w	r2, r2, r9
 800e4b4:	e78a      	b.n	800e3cc <HAL_GPIO_Init+0x16c>
 800e4b6:	bf00      	nop
 800e4b8:	58024400 	.word	0x58024400
 800e4bc:	58020000 	.word	0x58020000
 800e4c0:	58020800 	.word	0x58020800
 800e4c4:	58020c00 	.word	0x58020c00
 800e4c8:	58021000 	.word	0x58021000
 800e4cc:	58021400 	.word	0x58021400
 800e4d0:	58021800 	.word	0x58021800
 800e4d4:	58000400 	.word	0x58000400
 800e4d8:	58021c00 	.word	0x58021c00
 800e4dc:	58022000 	.word	0x58022000
 800e4e0:	58022400 	.word	0x58022400

0800e4e4 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800e4e4:	2900      	cmp	r1, #0
 800e4e6:	f000 80a4 	beq.w	800e632 <HAL_GPIO_DeInit+0x14e>
  uint32_t position = 0x00U;
 800e4ea:	2300      	movs	r3, #0
{
 800e4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4f0:	f8df 9168 	ldr.w	r9, [pc, #360]	; 800e65c <HAL_GPIO_DeInit+0x178>
 800e4f4:	b083      	sub	sp, #12
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800e4f6:	f8df 8168 	ldr.w	r8, [pc, #360]	; 800e660 <HAL_GPIO_DeInit+0x17c>
 800e4fa:	f8df a168 	ldr.w	sl, [pc, #360]	; 800e664 <HAL_GPIO_DeInit+0x180>
 800e4fe:	f8df b168 	ldr.w	fp, [pc, #360]	; 800e668 <HAL_GPIO_DeInit+0x184>
    iocurrent = GPIO_Pin & (1UL << position) ;
 800e502:	f04f 0e01 	mov.w	lr, #1
 800e506:	fa0e f203 	lsl.w	r2, lr, r3
    if (iocurrent != 0x00U)
 800e50a:	ea12 0c01 	ands.w	ip, r2, r1
 800e50e:	d06b      	beq.n	800e5e8 <HAL_GPIO_DeInit+0x104>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800e510:	f023 0503 	bic.w	r5, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800e514:	f003 0403 	and.w	r4, r3, #3
 800e518:	260f      	movs	r6, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800e51a:	4540      	cmp	r0, r8
 800e51c:	444d      	add	r5, r9
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800e51e:	ea4f 0484 	mov.w	r4, r4, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 800e522:	68af      	ldr	r7, [r5, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800e524:	fa06 f604 	lsl.w	r6, r6, r4
 800e528:	ea07 0706 	and.w	r7, r7, r6
 800e52c:	9701      	str	r7, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800e52e:	d01f      	beq.n	800e570 <HAL_GPIO_DeInit+0x8c>
 800e530:	4550      	cmp	r0, sl
 800e532:	d01a      	beq.n	800e56a <HAL_GPIO_DeInit+0x86>
 800e534:	4558      	cmp	r0, fp
 800e536:	d05e      	beq.n	800e5f6 <HAL_GPIO_DeInit+0x112>
 800e538:	4f43      	ldr	r7, [pc, #268]	; (800e648 <HAL_GPIO_DeInit+0x164>)
 800e53a:	42b8      	cmp	r0, r7
 800e53c:	d065      	beq.n	800e60a <HAL_GPIO_DeInit+0x126>
 800e53e:	4f43      	ldr	r7, [pc, #268]	; (800e64c <HAL_GPIO_DeInit+0x168>)
 800e540:	42b8      	cmp	r0, r7
 800e542:	d067      	beq.n	800e614 <HAL_GPIO_DeInit+0x130>
 800e544:	4f42      	ldr	r7, [pc, #264]	; (800e650 <HAL_GPIO_DeInit+0x16c>)
 800e546:	42b8      	cmp	r0, r7
 800e548:	d05a      	beq.n	800e600 <HAL_GPIO_DeInit+0x11c>
 800e54a:	4f42      	ldr	r7, [pc, #264]	; (800e654 <HAL_GPIO_DeInit+0x170>)
 800e54c:	42b8      	cmp	r0, r7
 800e54e:	d06b      	beq.n	800e628 <HAL_GPIO_DeInit+0x144>
 800e550:	4f41      	ldr	r7, [pc, #260]	; (800e658 <HAL_GPIO_DeInit+0x174>)
 800e552:	42b8      	cmp	r0, r7
 800e554:	d06e      	beq.n	800e634 <HAL_GPIO_DeInit+0x150>
 800e556:	f8df e114 	ldr.w	lr, [pc, #276]	; 800e66c <HAL_GPIO_DeInit+0x188>
 800e55a:	4570      	cmp	r0, lr
 800e55c:	d05f      	beq.n	800e61e <HAL_GPIO_DeInit+0x13a>
 800e55e:	f8df e110 	ldr.w	lr, [pc, #272]	; 800e670 <HAL_GPIO_DeInit+0x18c>
 800e562:	4570      	cmp	r0, lr
 800e564:	d06b      	beq.n	800e63e <HAL_GPIO_DeInit+0x15a>
 800e566:	f04f 0e0a 	mov.w	lr, #10
 800e56a:	fa0e f404 	lsl.w	r4, lr, r4
 800e56e:	e000      	b.n	800e572 <HAL_GPIO_DeInit+0x8e>
 800e570:	2400      	movs	r4, #0
 800e572:	9f01      	ldr	r7, [sp, #4]
 800e574:	42a7      	cmp	r7, r4
 800e576:	d119      	bne.n	800e5ac <HAL_GPIO_DeInit+0xc8>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800e578:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800e57c:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800e580:	ea27 070c 	bic.w	r7, r7, ip
 800e584:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800e588:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
 800e58c:	ea27 070c 	bic.w	r7, r7, ip
 800e590:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800e594:	6827      	ldr	r7, [r4, #0]
 800e596:	ea27 070c 	bic.w	r7, r7, ip
 800e59a:	6027      	str	r7, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800e59c:	6867      	ldr	r7, [r4, #4]
 800e59e:	ea27 070c 	bic.w	r7, r7, ip
 800e5a2:	6067      	str	r7, [r4, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800e5a4:	68ac      	ldr	r4, [r5, #8]
 800e5a6:	ea24 0406 	bic.w	r4, r4, r6
 800e5aa:	60ac      	str	r4, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800e5ac:	005d      	lsls	r5, r3, #1
 800e5ae:	2403      	movs	r4, #3

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800e5b0:	f003 0607 	and.w	r6, r3, #7
 800e5b4:	270f      	movs	r7, #15
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800e5b6:	40ac      	lsls	r4, r5
 800e5b8:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800e5ba:	00b6      	lsls	r6, r6, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800e5bc:	4325      	orrs	r5, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800e5be:	40b7      	lsls	r7, r6
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800e5c0:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800e5c2:	08dd      	lsrs	r5, r3, #3
 800e5c4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800e5c8:	6a2e      	ldr	r6, [r5, #32]
 800e5ca:	ea26 0607 	bic.w	r6, r6, r7
 800e5ce:	622e      	str	r6, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e5d0:	68c5      	ldr	r5, [r0, #12]
 800e5d2:	ea25 0504 	bic.w	r5, r5, r4
 800e5d6:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800e5d8:	6845      	ldr	r5, [r0, #4]
 800e5da:	ea25 0202 	bic.w	r2, r5, r2
 800e5de:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e5e0:	6882      	ldr	r2, [r0, #8]
 800e5e2:	ea22 0204 	bic.w	r2, r2, r4
 800e5e6:	6082      	str	r2, [r0, #8]
    }

    position++;
 800e5e8:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 800e5ea:	fa31 f203 	lsrs.w	r2, r1, r3
 800e5ee:	d188      	bne.n	800e502 <HAL_GPIO_DeInit+0x1e>
  }
}
 800e5f0:	b003      	add	sp, #12
 800e5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800e5f6:	f04f 0e02 	mov.w	lr, #2
 800e5fa:	fa0e f404 	lsl.w	r4, lr, r4
 800e5fe:	e7b8      	b.n	800e572 <HAL_GPIO_DeInit+0x8e>
 800e600:	f04f 0e05 	mov.w	lr, #5
 800e604:	fa0e f404 	lsl.w	r4, lr, r4
 800e608:	e7b3      	b.n	800e572 <HAL_GPIO_DeInit+0x8e>
 800e60a:	f04f 0e03 	mov.w	lr, #3
 800e60e:	fa0e f404 	lsl.w	r4, lr, r4
 800e612:	e7ae      	b.n	800e572 <HAL_GPIO_DeInit+0x8e>
 800e614:	f04f 0e04 	mov.w	lr, #4
 800e618:	fa0e f404 	lsl.w	r4, lr, r4
 800e61c:	e7a9      	b.n	800e572 <HAL_GPIO_DeInit+0x8e>
 800e61e:	f04f 0e08 	mov.w	lr, #8
 800e622:	fa0e f404 	lsl.w	r4, lr, r4
 800e626:	e7a4      	b.n	800e572 <HAL_GPIO_DeInit+0x8e>
 800e628:	f04f 0e06 	mov.w	lr, #6
 800e62c:	fa0e f404 	lsl.w	r4, lr, r4
 800e630:	e79f      	b.n	800e572 <HAL_GPIO_DeInit+0x8e>
 800e632:	4770      	bx	lr
 800e634:	f04f 0e07 	mov.w	lr, #7
 800e638:	fa0e f404 	lsl.w	r4, lr, r4
 800e63c:	e799      	b.n	800e572 <HAL_GPIO_DeInit+0x8e>
 800e63e:	f04f 0e09 	mov.w	lr, #9
 800e642:	fa0e f404 	lsl.w	r4, lr, r4
 800e646:	e794      	b.n	800e572 <HAL_GPIO_DeInit+0x8e>
 800e648:	58020c00 	.word	0x58020c00
 800e64c:	58021000 	.word	0x58021000
 800e650:	58021400 	.word	0x58021400
 800e654:	58021800 	.word	0x58021800
 800e658:	58021c00 	.word	0x58021c00
 800e65c:	58000400 	.word	0x58000400
 800e660:	58020000 	.word	0x58020000
 800e664:	58020400 	.word	0x58020400
 800e668:	58020800 	.word	0x58020800
 800e66c:	58022000 	.word	0x58022000
 800e670:	58022400 	.word	0x58022400

0800e674 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800e674:	6903      	ldr	r3, [r0, #16]
 800e676:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800e678:	bf14      	ite	ne
 800e67a:	2001      	movne	r0, #1
 800e67c:	2000      	moveq	r0, #0
 800e67e:	4770      	bx	lr

0800e680 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800e680:	b902      	cbnz	r2, 800e684 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800e682:	0409      	lsls	r1, r1, #16
 800e684:	6181      	str	r1, [r0, #24]
  }
}
 800e686:	4770      	bx	lr

0800e688 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800e688:	6943      	ldr	r3, [r0, #20]
 800e68a:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800e68e:	bf08      	it	eq
 800e690:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 800e692:	6181      	str	r1, [r0, #24]
  }
}
 800e694:	4770      	bx	lr
 800e696:	bf00      	nop

0800e698 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e69a:	4605      	mov	r5, r0
 800e69c:	460e      	mov	r6, r1
 800e69e:	4617      	mov	r7, r2
 800e6a0:	1c70      	adds	r0, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e6a2:	682c      	ldr	r4, [r5, #0]
 800e6a4:	d12c      	bne.n	800e700 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 800e6a6:	69a3      	ldr	r3, [r4, #24]
 800e6a8:	0799      	lsls	r1, r3, #30
 800e6aa:	d427      	bmi.n	800e6fc <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e6ac:	69a3      	ldr	r3, [r4, #24]
 800e6ae:	06da      	lsls	r2, r3, #27
 800e6b0:	d5f9      	bpl.n	800e6a6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e6b2:	69a3      	ldr	r3, [r4, #24]
 800e6b4:	069a      	lsls	r2, r3, #26
 800e6b6:	d5fc      	bpl.n	800e6b2 <I2C_WaitOnTXISFlagUntilTimeout+0x1a>

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e6b8:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e6ba:	2210      	movs	r2, #16
 800e6bc:	61e2      	str	r2, [r4, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e6be:	61e3      	str	r3, [r4, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e6c0:	69a3      	ldr	r3, [r4, #24]
 800e6c2:	079f      	lsls	r7, r3, #30
 800e6c4:	d501      	bpl.n	800e6ca <I2C_WaitOnTXISFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	62a3      	str	r3, [r4, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e6ca:	69a3      	ldr	r3, [r4, #24]
 800e6cc:	07de      	lsls	r6, r3, #31
 800e6ce:	d403      	bmi.n	800e6d8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e6d0:	69a3      	ldr	r3, [r4, #24]
 800e6d2:	f043 0301 	orr.w	r3, r3, #1
 800e6d6:	61a3      	str	r3, [r4, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e6d8:	6863      	ldr	r3, [r4, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e6da:	2200      	movs	r2, #0
    I2C_RESET_CR2(hi2c);
 800e6dc:	481b      	ldr	r0, [pc, #108]	; (800e74c <I2C_WaitOnTXISFlagUntilTimeout+0xb4>)
    hi2c->State = HAL_I2C_STATE_READY;
 800e6de:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800e6e0:	4003      	ands	r3, r0
      return HAL_ERROR;
 800e6e2:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800e6e4:	6063      	str	r3, [r4, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e6e6:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e6e8:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e6ec:	f043 0304 	orr.w	r3, r3, #4
 800e6f0:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800e6f2:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e6f6:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800e6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 800e6fc:	2000      	movs	r0, #0
}
 800e6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e700:	69a3      	ldr	r3, [r4, #24]
 800e702:	079b      	lsls	r3, r3, #30
 800e704:	d4fa      	bmi.n	800e6fc <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e706:	69a3      	ldr	r3, [r4, #24]
 800e708:	06d9      	lsls	r1, r3, #27
 800e70a:	d41b      	bmi.n	800e744 <I2C_WaitOnTXISFlagUntilTimeout+0xac>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e70c:	f7fd f8b6 	bl	800b87c <HAL_GetTick>
 800e710:	1bc0      	subs	r0, r0, r7
 800e712:	42b0      	cmp	r0, r6
 800e714:	d801      	bhi.n	800e71a <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 800e716:	2e00      	cmp	r6, #0
 800e718:	d1c2      	bne.n	800e6a0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e71a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e71c:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e71e:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800e720:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e722:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800e724:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e728:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e72a:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e72e:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800e732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e734:	f7fd f8a2 	bl	800b87c <HAL_GetTick>
 800e738:	1bc0      	subs	r0, r0, r7
 800e73a:	4286      	cmp	r6, r0
 800e73c:	d3ed      	bcc.n	800e71a <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 800e73e:	2e00      	cmp	r6, #0
 800e740:	d0eb      	beq.n	800e71a <I2C_WaitOnTXISFlagUntilTimeout+0x82>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e742:	682c      	ldr	r4, [r5, #0]
 800e744:	69a3      	ldr	r3, [r4, #24]
 800e746:	069b      	lsls	r3, r3, #26
 800e748:	d5f4      	bpl.n	800e734 <I2C_WaitOnTXISFlagUntilTimeout+0x9c>
 800e74a:	e7b5      	b.n	800e6b8 <I2C_WaitOnTXISFlagUntilTimeout+0x20>
 800e74c:	fe00e800 	.word	0xfe00e800

0800e750 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800e750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e752:	4605      	mov	r5, r0
 800e754:	460e      	mov	r6, r1
 800e756:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e758:	682c      	ldr	r4, [r5, #0]
 800e75a:	69a3      	ldr	r3, [r4, #24]
 800e75c:	069b      	lsls	r3, r3, #26
 800e75e:	d449      	bmi.n	800e7f4 <I2C_WaitOnSTOPFlagUntilTimeout+0xa4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e760:	69a3      	ldr	r3, [r4, #24]
 800e762:	06da      	lsls	r2, r3, #27
 800e764:	d526      	bpl.n	800e7b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
 800e766:	1c73      	adds	r3, r6, #1
 800e768:	d138      	bne.n	800e7dc <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e76a:	69a3      	ldr	r3, [r4, #24]
 800e76c:	069e      	lsls	r6, r3, #26
 800e76e:	d5fc      	bpl.n	800e76a <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e770:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e772:	2210      	movs	r2, #16
 800e774:	61e2      	str	r2, [r4, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e776:	61e3      	str	r3, [r4, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e778:	69a3      	ldr	r3, [r4, #24]
 800e77a:	0799      	lsls	r1, r3, #30
 800e77c:	d501      	bpl.n	800e782 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 800e77e:	2300      	movs	r3, #0
 800e780:	62a3      	str	r3, [r4, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e782:	69a3      	ldr	r3, [r4, #24]
 800e784:	07da      	lsls	r2, r3, #31
 800e786:	d403      	bmi.n	800e790 <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e788:	69a3      	ldr	r3, [r4, #24]
 800e78a:	f043 0301 	orr.w	r3, r3, #1
 800e78e:	61a3      	str	r3, [r4, #24]
    I2C_RESET_CR2(hi2c);
 800e790:	6863      	ldr	r3, [r4, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e792:	2200      	movs	r2, #0
    I2C_RESET_CR2(hi2c);
 800e794:	4818      	ldr	r0, [pc, #96]	; (800e7f8 <I2C_WaitOnSTOPFlagUntilTimeout+0xa8>)
    hi2c->State = HAL_I2C_STATE_READY;
 800e796:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800e798:	4003      	ands	r3, r0
      return HAL_ERROR;
 800e79a:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800e79c:	6063      	str	r3, [r4, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e79e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800e7a0:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e7a4:	f043 0304 	orr.w	r3, r3, #4
 800e7a8:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800e7aa:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e7ae:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800e7b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e7b4:	f7fd f862 	bl	800b87c <HAL_GetTick>
 800e7b8:	1bc0      	subs	r0, r0, r7
 800e7ba:	42b0      	cmp	r0, r6
 800e7bc:	d801      	bhi.n	800e7c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 800e7be:	2e00      	cmp	r6, #0
 800e7c0:	d1ca      	bne.n	800e758 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e7c2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e7c4:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e7c6:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800e7c8:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e7ca:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800e7cc:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e7d0:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e7d2:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e7d6:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800e7da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e7dc:	69a3      	ldr	r3, [r4, #24]
 800e7de:	0698      	lsls	r0, r3, #26
 800e7e0:	d4c6      	bmi.n	800e770 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e7e2:	f7fd f84b 	bl	800b87c <HAL_GetTick>
 800e7e6:	1bc0      	subs	r0, r0, r7
 800e7e8:	4286      	cmp	r6, r0
 800e7ea:	d3ea      	bcc.n	800e7c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 800e7ec:	2e00      	cmp	r6, #0
 800e7ee:	d0e8      	beq.n	800e7c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e7f0:	682c      	ldr	r4, [r5, #0]
 800e7f2:	e7b8      	b.n	800e766 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800e7f4:	2000      	movs	r0, #0
}
 800e7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7f8:	fe00e800 	.word	0xfe00e800

0800e7fc <HAL_I2C_MspInit>:
}
 800e7fc:	4770      	bx	lr
 800e7fe:	bf00      	nop

0800e800 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800e800:	2800      	cmp	r0, #0
 800e802:	d04e      	beq.n	800e8a2 <HAL_I2C_Init+0xa2>
{
 800e804:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e806:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800e80a:	4604      	mov	r4, r0
 800e80c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800e810:	2b00      	cmp	r3, #0
 800e812:	d041      	beq.n	800e898 <HAL_I2C_Init+0x98>
  __HAL_I2C_DISABLE(hi2c);
 800e814:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800e816:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e818:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800e81a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800e81e:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e820:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e824:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800e826:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e82a:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 800e82c:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e82e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e830:	689a      	ldr	r2, [r3, #8]
 800e832:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e836:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e838:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e83a:	d029      	beq.n	800e890 <HAL_I2C_Init+0x90>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e83c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e840:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e842:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e844:	d102      	bne.n	800e84c <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800e846:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e84a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e84c:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
 800e84e:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e852:	4915      	ldr	r1, [pc, #84]	; (800e8a8 <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800e854:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e856:	4301      	orrs	r1, r0
 800e858:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e85a:	68d9      	ldr	r1, [r3, #12]
 800e85c:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800e860:	60d9      	str	r1, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800e862:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
 800e866:	4302      	orrs	r2, r0
 800e868:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e86c:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800e870:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e872:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e874:	4301      	orrs	r1, r0
  return HAL_OK;
 800e876:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e878:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800e87a:	6819      	ldr	r1, [r3, #0]
 800e87c:	f041 0101 	orr.w	r1, r1, #1
 800e880:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e882:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e884:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e888:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e88a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800e88e:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e890:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e894:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e896:	e7d9      	b.n	800e84c <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 800e898:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800e89c:	f7ff ffae 	bl	800e7fc <HAL_I2C_MspInit>
 800e8a0:	e7b8      	b.n	800e814 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 800e8a2:	2001      	movs	r0, #1
}
 800e8a4:	4770      	bx	lr
 800e8a6:	bf00      	nop
 800e8a8:	02008000 	.word	0x02008000

0800e8ac <HAL_I2C_MspDeInit>:
 800e8ac:	4770      	bx	lr
 800e8ae:	bf00      	nop

0800e8b0 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 800e8b0:	b1b0      	cbz	r0, 800e8e0 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
 800e8b2:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800e8b4:	2324      	movs	r3, #36	; 0x24
{
 800e8b6:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 800e8b8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800e8bc:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
 800e8be:	6813      	ldr	r3, [r2, #0]
 800e8c0:	f023 0301 	bic.w	r3, r3, #1
 800e8c4:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800e8c6:	f7ff fff1 	bl	800e8ac <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
 800e8ce:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
 800e8d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 800e8d4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
 800e8d8:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e8da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 800e8de:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800e8e0:	2001      	movs	r0, #1
}
 800e8e2:	4770      	bx	lr

0800e8e4 <HAL_I2C_Mem_Write>:
{
 800e8e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8e8:	469a      	mov	sl, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800e8ea:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800e8ee:	f8bd b02c 	ldrh.w	fp, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 800e8f2:	2b20      	cmp	r3, #32
{
 800e8f4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
 800e8f8:	f040 80a8 	bne.w	800ea4c <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 800e8fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8fe:	4604      	mov	r4, r0
 800e900:	2b00      	cmp	r3, #0
 800e902:	f000 809d 	beq.w	800ea40 <HAL_I2C_Mem_Write+0x15c>
 800e906:	f1bb 0f00 	cmp.w	fp, #0
 800e90a:	f000 8099 	beq.w	800ea40 <HAL_I2C_Mem_Write+0x15c>
    __HAL_LOCK(hi2c);
 800e90e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800e912:	2b01      	cmp	r3, #1
 800e914:	f000 809a 	beq.w	800ea4c <HAL_I2C_Mem_Write+0x168>
 800e918:	2301      	movs	r3, #1
 800e91a:	460f      	mov	r7, r1
 800e91c:	4691      	mov	r9, r2
 800e91e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800e922:	f7fc ffab 	bl	800b87c <HAL_GetTick>
 800e926:	4606      	mov	r6, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 800e928:	e005      	b.n	800e936 <HAL_I2C_Mem_Write+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e92a:	f7fc ffa7 	bl	800b87c <HAL_GetTick>
 800e92e:	1b80      	subs	r0, r0, r6
 800e930:	2819      	cmp	r0, #25
 800e932:	f200 80a9 	bhi.w	800ea88 <HAL_I2C_Mem_Write+0x1a4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e936:	6823      	ldr	r3, [r4, #0]
 800e938:	699d      	ldr	r5, [r3, #24]
 800e93a:	f415 4500 	ands.w	r5, r5, #32768	; 0x8000
 800e93e:	d1f4      	bne.n	800e92a <HAL_I2C_Mem_Write+0x46>
    hi2c->pBuffPtr  = pData;
 800e940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e942:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800e946:	4977      	ldr	r1, [pc, #476]	; (800eb24 <HAL_I2C_Mem_Write+0x240>)
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e948:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800e94a:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e94c:	2221      	movs	r2, #33	; 0x21
    hi2c->XferISR   = NULL;
 800e94e:	6365      	str	r5, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e950:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e954:	2240      	movs	r2, #64	; 0x40
 800e956:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e95a:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800e95c:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e960:	685a      	ldr	r2, [r3, #4]
 800e962:	400a      	ands	r2, r1
 800e964:	fa5f f18a 	uxtb.w	r1, sl
 800e968:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800e96c:	496e      	ldr	r1, [pc, #440]	; (800eb28 <HAL_I2C_Mem_Write+0x244>)
 800e96e:	433a      	orrs	r2, r7
 800e970:	4311      	orrs	r1, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e972:	4632      	mov	r2, r6
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e974:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e976:	4641      	mov	r1, r8
 800e978:	f7ff fe8e 	bl	800e698 <I2C_WaitOnTXISFlagUntilTimeout>
 800e97c:	2800      	cmp	r0, #0
 800e97e:	d171      	bne.n	800ea64 <HAL_I2C_Mem_Write+0x180>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e980:	f1ba 0f01 	cmp.w	sl, #1
 800e984:	d00a      	beq.n	800e99c <HAL_I2C_Mem_Write+0xb8>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e986:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800e98a:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e98c:	4641      	mov	r1, r8
 800e98e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e990:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e992:	4632      	mov	r2, r6
 800e994:	f7ff fe80 	bl	800e698 <I2C_WaitOnTXISFlagUntilTimeout>
 800e998:	2800      	cmp	r0, #0
 800e99a:	d163      	bne.n	800ea64 <HAL_I2C_Mem_Write+0x180>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e99c:	fa5f f389 	uxtb.w	r3, r9
 800e9a0:	6822      	ldr	r2, [r4, #0]
 800e9a2:	6293      	str	r3, [r2, #40]	; 0x28
 800e9a4:	f1b8 3fff 	cmp.w	r8, #4294967295
 800e9a8:	f040 8089 	bne.w	800eabe <HAL_I2C_Mem_Write+0x1da>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e9ac:	6993      	ldr	r3, [r2, #24]
 800e9ae:	0618      	lsls	r0, r3, #24
 800e9b0:	d5fc      	bpl.n	800e9ac <HAL_I2C_Mem_Write+0xc8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e9b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800e9b4:	b29b      	uxth	r3, r3
 800e9b6:	2bff      	cmp	r3, #255	; 0xff
 800e9b8:	f240 8091 	bls.w	800eade <HAL_I2C_Mem_Write+0x1fa>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e9bc:	6853      	ldr	r3, [r2, #4]
 800e9be:	495b      	ldr	r1, [pc, #364]	; (800eb2c <HAL_I2C_Mem_Write+0x248>)
 800e9c0:	400b      	ands	r3, r1
 800e9c2:	495b      	ldr	r1, [pc, #364]	; (800eb30 <HAL_I2C_Mem_Write+0x24c>)
 800e9c4:	433b      	orrs	r3, r7
 800e9c6:	4319      	orrs	r1, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e9c8:	23ff      	movs	r3, #255	; 0xff
 800e9ca:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e9cc:	6051      	str	r1, [r2, #4]
 800e9ce:	4d57      	ldr	r5, [pc, #348]	; (800eb2c <HAL_I2C_Mem_Write+0x248>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e9d0:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e9d4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800eb30 <HAL_I2C_Mem_Write+0x24c>
 800e9d8:	e004      	b.n	800e9e4 <HAL_I2C_Mem_Write+0x100>
    while (hi2c->XferCount > 0U);
 800e9da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800e9dc:	b29b      	uxth	r3, r3
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	f000 808b 	beq.w	800eafa <HAL_I2C_Mem_Write+0x216>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e9e4:	4632      	mov	r2, r6
 800e9e6:	4641      	mov	r1, r8
 800e9e8:	4620      	mov	r0, r4
 800e9ea:	f7ff fe55 	bl	800e698 <I2C_WaitOnTXISFlagUntilTimeout>
 800e9ee:	2800      	cmp	r0, #0
 800e9f0:	d173      	bne.n	800eada <HAL_I2C_Mem_Write+0x1f6>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e9f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e9f4:	6821      	ldr	r1, [r4, #0]
 800e9f6:	f812 0b01 	ldrb.w	r0, [r2], #1
      hi2c->XferSize--;
 800e9fa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e9fc:	6288      	str	r0, [r1, #40]	; 0x28
      hi2c->pBuffPtr++;
 800e9fe:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800ea00:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800ea02:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800ea04:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800ea06:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 800ea08:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800ea0a:	b292      	uxth	r2, r2
 800ea0c:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ea0e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800ea10:	b292      	uxth	r2, r2
 800ea12:	2a00      	cmp	r2, #0
 800ea14:	d0e1      	beq.n	800e9da <HAL_I2C_Mem_Write+0xf6>
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d1df      	bne.n	800e9da <HAL_I2C_Mem_Write+0xf6>
 800ea1a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800ea1e:	d126      	bne.n	800ea6e <HAL_I2C_Mem_Write+0x18a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ea20:	698b      	ldr	r3, [r1, #24]
 800ea22:	061a      	lsls	r2, r3, #24
 800ea24:	d5fc      	bpl.n	800ea20 <HAL_I2C_Mem_Write+0x13c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ea26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800ea28:	b29b      	uxth	r3, r3
 800ea2a:	2bff      	cmp	r3, #255	; 0xff
 800ea2c:	d93a      	bls.n	800eaa4 <HAL_I2C_Mem_Write+0x1c0>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800ea2e:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ea30:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800ea34:	402b      	ands	r3, r5
 800ea36:	433b      	orrs	r3, r7
 800ea38:	ea43 0309 	orr.w	r3, r3, r9
 800ea3c:	604b      	str	r3, [r1, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800ea3e:	e7cc      	b.n	800e9da <HAL_I2C_Mem_Write+0xf6>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ea40:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 800ea44:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ea46:	6463      	str	r3, [r4, #68]	; 0x44
}
 800ea48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 800ea4c:	2002      	movs	r0, #2
}
 800ea4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ea52:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ea54:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ea56:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ea58:	430b      	orrs	r3, r1
 800ea5a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ea5c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ea60:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800ea64:	2300      	movs	r3, #0
      return HAL_ERROR;
 800ea66:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 800ea68:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800ea6c:	e7ec      	b.n	800ea48 <HAL_I2C_Mem_Write+0x164>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ea6e:	698b      	ldr	r3, [r1, #24]
 800ea70:	061b      	lsls	r3, r3, #24
 800ea72:	d4d8      	bmi.n	800ea26 <HAL_I2C_Mem_Write+0x142>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea74:	f7fc ff02 	bl	800b87c <HAL_GetTick>
 800ea78:	1b80      	subs	r0, r0, r6
 800ea7a:	4580      	cmp	r8, r0
 800ea7c:	d304      	bcc.n	800ea88 <HAL_I2C_Mem_Write+0x1a4>
 800ea7e:	f1b8 0f00 	cmp.w	r8, #0
 800ea82:	d001      	beq.n	800ea88 <HAL_I2C_Mem_Write+0x1a4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ea84:	6821      	ldr	r1, [r4, #0]
 800ea86:	e7c8      	b.n	800ea1a <HAL_I2C_Mem_Write+0x136>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ea88:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ea8a:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ea8c:	2200      	movs	r2, #0
          return HAL_ERROR;
 800ea8e:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ea90:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800ea92:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ea96:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ea98:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ea9c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800eaa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          hi2c->XferSize = hi2c->XferCount;
 800eaa4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800eaa6:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800eaa8:	b2da      	uxtb	r2, r3
          hi2c->XferSize = hi2c->XferCount;
 800eaaa:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800eaac:	684b      	ldr	r3, [r1, #4]
 800eaae:	402b      	ands	r3, r5
 800eab0:	433b      	orrs	r3, r7
 800eab2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eab6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800eaba:	604b      	str	r3, [r1, #4]
}
 800eabc:	e78d      	b.n	800e9da <HAL_I2C_Mem_Write+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800eabe:	6993      	ldr	r3, [r2, #24]
 800eac0:	0619      	lsls	r1, r3, #24
 800eac2:	f53f af76 	bmi.w	800e9b2 <HAL_I2C_Mem_Write+0xce>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eac6:	f7fc fed9 	bl	800b87c <HAL_GetTick>
 800eaca:	1b80      	subs	r0, r0, r6
 800eacc:	4580      	cmp	r8, r0
 800eace:	d3c0      	bcc.n	800ea52 <HAL_I2C_Mem_Write+0x16e>
 800ead0:	f1b8 0f00 	cmp.w	r8, #0
 800ead4:	d0bd      	beq.n	800ea52 <HAL_I2C_Mem_Write+0x16e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ead6:	6822      	ldr	r2, [r4, #0]
 800ead8:	e764      	b.n	800e9a4 <HAL_I2C_Mem_Write+0xc0>
        return HAL_ERROR;
 800eada:	2001      	movs	r0, #1
 800eadc:	e7b4      	b.n	800ea48 <HAL_I2C_Mem_Write+0x164>
      hi2c->XferSize = hi2c->XferCount;
 800eade:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800eae0:	4812      	ldr	r0, [pc, #72]	; (800eb2c <HAL_I2C_Mem_Write+0x248>)
      hi2c->XferSize = hi2c->XferCount;
 800eae2:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800eae4:	b2d9      	uxtb	r1, r3
      hi2c->XferSize = hi2c->XferCount;
 800eae6:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800eae8:	6853      	ldr	r3, [r2, #4]
 800eaea:	4003      	ands	r3, r0
 800eaec:	433b      	orrs	r3, r7
 800eaee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800eaf2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800eaf6:	6053      	str	r3, [r2, #4]
}
 800eaf8:	e769      	b.n	800e9ce <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800eafa:	4632      	mov	r2, r6
 800eafc:	4641      	mov	r1, r8
 800eafe:	4620      	mov	r0, r4
 800eb00:	f7ff fe26 	bl	800e750 <I2C_WaitOnSTOPFlagUntilTimeout>
 800eb04:	2800      	cmp	r0, #0
 800eb06:	d1e8      	bne.n	800eada <HAL_I2C_Mem_Write+0x1f6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800eb08:	6823      	ldr	r3, [r4, #0]
 800eb0a:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800eb0c:	4d09      	ldr	r5, [pc, #36]	; (800eb34 <HAL_I2C_Mem_Write+0x250>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800eb0e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800eb10:	685a      	ldr	r2, [r3, #4]
 800eb12:	402a      	ands	r2, r5
 800eb14:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800eb16:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800eb1a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800eb1e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800eb22:	e791      	b.n	800ea48 <HAL_I2C_Mem_Write+0x164>
 800eb24:	fc009800 	.word	0xfc009800
 800eb28:	81002000 	.word	0x81002000
 800eb2c:	fc009c00 	.word	0xfc009c00
 800eb30:	01ff0000 	.word	0x01ff0000
 800eb34:	fe00e800 	.word	0xfe00e800

0800eb38 <HAL_I2C_Mem_Read>:
{
 800eb38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb3c:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800eb3e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800eb42:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 800eb46:	2b20      	cmp	r3, #32
{
 800eb48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
 800eb4a:	f040 80c0 	bne.w	800ecce <HAL_I2C_Mem_Read+0x196>
    if ((pData == NULL) || (Size == 0U))
 800eb4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb50:	4683      	mov	fp, r0
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	f000 80b4 	beq.w	800ecc0 <HAL_I2C_Mem_Read+0x188>
 800eb58:	f1b9 0f00 	cmp.w	r9, #0
 800eb5c:	f000 80b0 	beq.w	800ecc0 <HAL_I2C_Mem_Read+0x188>
    __HAL_LOCK(hi2c);
 800eb60:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800eb64:	2b01      	cmp	r3, #1
 800eb66:	f000 80b2 	beq.w	800ecce <HAL_I2C_Mem_Read+0x196>
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	460f      	mov	r7, r1
 800eb6e:	4690      	mov	r8, r2
 800eb70:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800eb74:	f7fc fe82 	bl	800b87c <HAL_GetTick>
 800eb78:	4606      	mov	r6, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 800eb7a:	e005      	b.n	800eb88 <HAL_I2C_Mem_Read+0x50>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eb7c:	f7fc fe7e 	bl	800b87c <HAL_GetTick>
 800eb80:	1b80      	subs	r0, r0, r6
 800eb82:	2819      	cmp	r0, #25
 800eb84:	f200 808c 	bhi.w	800eca0 <HAL_I2C_Mem_Read+0x168>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800eb88:	f8db 3000 	ldr.w	r3, [fp]
 800eb8c:	6998      	ldr	r0, [r3, #24]
 800eb8e:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 800eb92:	d1f3      	bne.n	800eb7c <HAL_I2C_Mem_Read+0x44>
    hi2c->pBuffPtr  = pData;
 800eb94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800eb96:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800eb9a:	4989      	ldr	r1, [pc, #548]	; (800edc0 <HAL_I2C_Mem_Read+0x288>)
    hi2c->pBuffPtr  = pData;
 800eb9c:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800eba0:	2222      	movs	r2, #34	; 0x22
    hi2c->XferISR   = NULL;
 800eba2:	f8cb 0034 	str.w	r0, [fp, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800eba6:	f88b 2041 	strb.w	r2, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ebaa:	2240      	movs	r2, #64	; 0x40
 800ebac:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ebb0:	f8cb 0044 	str.w	r0, [fp, #68]	; 0x44
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ebb4:	4658      	mov	r0, fp
    hi2c->XferCount = Size;
 800ebb6:	f8ab 902a 	strh.w	r9, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800ebba:	685a      	ldr	r2, [r3, #4]
 800ebbc:	400a      	ands	r2, r1
 800ebbe:	b2e1      	uxtb	r1, r4
 800ebc0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800ebc4:	497f      	ldr	r1, [pc, #508]	; (800edc4 <HAL_I2C_Mem_Read+0x28c>)
 800ebc6:	433a      	orrs	r2, r7
 800ebc8:	4311      	orrs	r1, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ebca:	4632      	mov	r2, r6
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800ebcc:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ebce:	4629      	mov	r1, r5
 800ebd0:	f7ff fd62 	bl	800e698 <I2C_WaitOnTXISFlagUntilTimeout>
 800ebd4:	2800      	cmp	r0, #0
 800ebd6:	f040 8088 	bne.w	800ecea <HAL_I2C_Mem_Read+0x1b2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ebda:	2c01      	cmp	r4, #1
 800ebdc:	d00b      	beq.n	800ebf6 <HAL_I2C_Mem_Read+0xbe>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ebde:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800ebe2:	f8db 3000 	ldr.w	r3, [fp]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ebe6:	4629      	mov	r1, r5
 800ebe8:	4658      	mov	r0, fp
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ebea:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ebec:	4632      	mov	r2, r6
 800ebee:	f7ff fd53 	bl	800e698 <I2C_WaitOnTXISFlagUntilTimeout>
 800ebf2:	2800      	cmp	r0, #0
 800ebf4:	d179      	bne.n	800ecea <HAL_I2C_Mem_Read+0x1b2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ebf6:	fa5f f388 	uxtb.w	r3, r8
 800ebfa:	f8db 4000 	ldr.w	r4, [fp]
 800ebfe:	62a3      	str	r3, [r4, #40]	; 0x28
 800ec00:	1c6a      	adds	r2, r5, #1
 800ec02:	f040 80a7 	bne.w	800ed54 <HAL_I2C_Mem_Read+0x21c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ec06:	69a3      	ldr	r3, [r4, #24]
 800ec08:	065b      	lsls	r3, r3, #25
 800ec0a:	d5fc      	bpl.n	800ec06 <HAL_I2C_Mem_Read+0xce>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ec0c:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 800ec10:	b29b      	uxth	r3, r3
 800ec12:	2bff      	cmp	r3, #255	; 0xff
 800ec14:	f240 80ac 	bls.w	800ed70 <HAL_I2C_Mem_Read+0x238>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800ec18:	6863      	ldr	r3, [r4, #4]
 800ec1a:	4a69      	ldr	r2, [pc, #420]	; (800edc0 <HAL_I2C_Mem_Read+0x288>)
 800ec1c:	4013      	ands	r3, r2
 800ec1e:	4a6a      	ldr	r2, [pc, #424]	; (800edc8 <HAL_I2C_Mem_Read+0x290>)
 800ec20:	433b      	orrs	r3, r7
 800ec22:	431a      	orrs	r2, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ec24:	23ff      	movs	r3, #255	; 0xff
 800ec26:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800ec2a:	6062      	str	r2, [r4, #4]
 800ec2c:	1c69      	adds	r1, r5, #1
 800ec2e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800edd4 <HAL_I2C_Mem_Read+0x29c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ec32:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800ec36:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 800edd8 <HAL_I2C_Mem_Read+0x2a0>
 800ec3a:	d127      	bne.n	800ec8c <HAL_I2C_Mem_Read+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ec3c:	69a3      	ldr	r3, [r4, #24]
 800ec3e:	075a      	lsls	r2, r3, #29
 800ec40:	d5fc      	bpl.n	800ec3c <HAL_I2C_Mem_Read+0x104>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ec42:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ec44:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 800ec48:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800ec4a:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
      hi2c->XferCount--;
 800ec4e:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800ec52:	3301      	adds	r3, #1
      hi2c->XferCount--;
 800ec54:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800ec56:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
      hi2c->XferSize--;
 800ec5a:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
      hi2c->XferCount--;
 800ec5e:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800ec60:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800ec62:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ec66:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
 800ec6a:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ec6c:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800ec6e:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ec72:	b90b      	cbnz	r3, 800ec78 <HAL_I2C_Mem_Read+0x140>
 800ec74:	2a00      	cmp	r2, #0
 800ec76:	d147      	bne.n	800ed08 <HAL_I2C_Mem_Read+0x1d0>
    while (hi2c->XferCount > 0U);
 800ec78:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 800ec7c:	b29b      	uxth	r3, r3
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	f000 8086 	beq.w	800ed90 <HAL_I2C_Mem_Read+0x258>
 800ec84:	1c69      	adds	r1, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ec86:	f8db 4000 	ldr.w	r4, [fp]
 800ec8a:	d0d7      	beq.n	800ec3c <HAL_I2C_Mem_Read+0x104>
 800ec8c:	69a3      	ldr	r3, [r4, #24]
 800ec8e:	075b      	lsls	r3, r3, #29
 800ec90:	d4d7      	bmi.n	800ec42 <HAL_I2C_Mem_Read+0x10a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ec92:	f7fc fdf3 	bl	800b87c <HAL_GetTick>
 800ec96:	1b80      	subs	r0, r0, r6
 800ec98:	4285      	cmp	r5, r0
 800ec9a:	d301      	bcc.n	800eca0 <HAL_I2C_Mem_Read+0x168>
 800ec9c:	2d00      	cmp	r5, #0
 800ec9e:	d1f1      	bne.n	800ec84 <HAL_I2C_Mem_Read+0x14c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800eca0:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800eca4:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800eca6:	2200      	movs	r2, #0
          return HAL_ERROR;
 800eca8:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ecaa:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800ecac:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ecb0:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ecb4:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ecb8:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
 800ecbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ecc0:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 800ecc4:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ecc6:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
}
 800ecca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 800ecce:	2002      	movs	r0, #2
}
 800ecd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ecd4:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ecd8:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ecda:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ecdc:	430b      	orrs	r3, r1
 800ecde:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ece2:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ece6:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800ecea:	2300      	movs	r3, #0
      return HAL_ERROR;
 800ecec:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 800ecee:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
      return HAL_ERROR;
 800ecf2:	e7ea      	b.n	800ecca <HAL_I2C_Mem_Read+0x192>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ecf4:	6993      	ldr	r3, [r2, #24]
 800ecf6:	061b      	lsls	r3, r3, #24
 800ecf8:	d40d      	bmi.n	800ed16 <HAL_I2C_Mem_Read+0x1de>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ecfa:	f7fc fdbf 	bl	800b87c <HAL_GetTick>
 800ecfe:	1b80      	subs	r0, r0, r6
 800ed00:	4285      	cmp	r5, r0
 800ed02:	d3cd      	bcc.n	800eca0 <HAL_I2C_Mem_Read+0x168>
 800ed04:	2d00      	cmp	r5, #0
 800ed06:	d0cb      	beq.n	800eca0 <HAL_I2C_Mem_Read+0x168>
 800ed08:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ed0a:	f8db 2000 	ldr.w	r2, [fp]
 800ed0e:	d1f1      	bne.n	800ecf4 <HAL_I2C_Mem_Read+0x1bc>
 800ed10:	6993      	ldr	r3, [r2, #24]
 800ed12:	0619      	lsls	r1, r3, #24
 800ed14:	d5fc      	bpl.n	800ed10 <HAL_I2C_Mem_Read+0x1d8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ed16:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 800ed1a:	b29b      	uxth	r3, r3
 800ed1c:	2bff      	cmp	r3, #255	; 0xff
 800ed1e:	d909      	bls.n	800ed34 <HAL_I2C_Mem_Read+0x1fc>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800ed20:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ed22:	f8ab a028 	strh.w	sl, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800ed26:	ea03 0308 	and.w	r3, r3, r8
 800ed2a:	433b      	orrs	r3, r7
 800ed2c:	ea43 0309 	orr.w	r3, r3, r9
 800ed30:	6053      	str	r3, [r2, #4]
}
 800ed32:	e7a1      	b.n	800ec78 <HAL_I2C_Mem_Read+0x140>
          hi2c->XferSize = hi2c->XferCount;
 800ed34:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 800ed38:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800ed3a:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
 800ed3c:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800ed40:	6853      	ldr	r3, [r2, #4]
 800ed42:	ea03 0308 	and.w	r3, r3, r8
 800ed46:	433b      	orrs	r3, r7
 800ed48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800ed4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ed50:	6053      	str	r3, [r2, #4]
}
 800ed52:	e791      	b.n	800ec78 <HAL_I2C_Mem_Read+0x140>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ed54:	69a3      	ldr	r3, [r4, #24]
 800ed56:	0658      	lsls	r0, r3, #25
 800ed58:	f53f af58 	bmi.w	800ec0c <HAL_I2C_Mem_Read+0xd4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ed5c:	f7fc fd8e 	bl	800b87c <HAL_GetTick>
 800ed60:	1b80      	subs	r0, r0, r6
 800ed62:	4285      	cmp	r5, r0
 800ed64:	d3b6      	bcc.n	800ecd4 <HAL_I2C_Mem_Read+0x19c>
 800ed66:	2d00      	cmp	r5, #0
 800ed68:	d0b4      	beq.n	800ecd4 <HAL_I2C_Mem_Read+0x19c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ed6a:	f8db 4000 	ldr.w	r4, [fp]
 800ed6e:	e747      	b.n	800ec00 <HAL_I2C_Mem_Read+0xc8>
      hi2c->XferSize = hi2c->XferCount;
 800ed70:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800ed74:	4912      	ldr	r1, [pc, #72]	; (800edc0 <HAL_I2C_Mem_Read+0x288>)
      hi2c->XferSize = hi2c->XferCount;
 800ed76:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800ed78:	b2da      	uxtb	r2, r3
      hi2c->XferSize = hi2c->XferCount;
 800ed7a:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800ed7e:	6863      	ldr	r3, [r4, #4]
 800ed80:	400b      	ands	r3, r1
 800ed82:	433b      	orrs	r3, r7
 800ed84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ed88:	4a10      	ldr	r2, [pc, #64]	; (800edcc <HAL_I2C_Mem_Read+0x294>)
 800ed8a:	431a      	orrs	r2, r3
 800ed8c:	6062      	str	r2, [r4, #4]
}
 800ed8e:	e74d      	b.n	800ec2c <HAL_I2C_Mem_Read+0xf4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ed90:	4632      	mov	r2, r6
 800ed92:	4629      	mov	r1, r5
 800ed94:	4658      	mov	r0, fp
 800ed96:	f7ff fcdb 	bl	800e750 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ed9a:	b970      	cbnz	r0, 800edba <HAL_I2C_Mem_Read+0x282>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ed9c:	f8db 3000 	ldr.w	r3, [fp]
 800eda0:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800eda2:	4c0b      	ldr	r4, [pc, #44]	; (800edd0 <HAL_I2C_Mem_Read+0x298>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800eda4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800eda6:	685a      	ldr	r2, [r3, #4]
 800eda8:	4022      	ands	r2, r4
 800edaa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800edac:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800edb0:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800edb4:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
 800edb8:	e787      	b.n	800ecca <HAL_I2C_Mem_Read+0x192>
      return HAL_ERROR;
 800edba:	2001      	movs	r0, #1
 800edbc:	e785      	b.n	800ecca <HAL_I2C_Mem_Read+0x192>
 800edbe:	bf00      	nop
 800edc0:	fc009800 	.word	0xfc009800
 800edc4:	80002000 	.word	0x80002000
 800edc8:	81ff2400 	.word	0x81ff2400
 800edcc:	82002400 	.word	0x82002400
 800edd0:	fe00e800 	.word	0xfe00e800
 800edd4:	fc009c00 	.word	0xfc009c00
 800edd8:	01ff0000 	.word	0x01ff0000

0800eddc <HAL_I2C_GetState>:
  return hi2c->State;
 800eddc:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 800ede0:	4770      	bx	lr
 800ede2:	bf00      	nop

0800ede4 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800ede4:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 800ede6:	4770      	bx	lr

0800ede8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ede8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800edec:	2a20      	cmp	r2, #32
 800edee:	d123      	bne.n	800ee38 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800edf0:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800edf4:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800edf8:	4603      	mov	r3, r0
 800edfa:	2a01      	cmp	r2, #1
 800edfc:	d01c      	beq.n	800ee38 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800edfe:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800ee00:	2024      	movs	r0, #36	; 0x24
{
 800ee02:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 800ee04:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ee08:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
 800ee0c:	6810      	ldr	r0, [r2, #0]
 800ee0e:	f020 0001 	bic.w	r0, r0, #1
 800ee12:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ee14:	6810      	ldr	r0, [r2, #0]
 800ee16:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 800ee1a:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800ee1c:	6810      	ldr	r0, [r2, #0]
 800ee1e:	4301      	orrs	r1, r0

    return HAL_OK;
 800ee20:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
 800ee22:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800ee24:	6811      	ldr	r1, [r2, #0]
 800ee26:	f041 0101 	orr.w	r1, r1, #1
 800ee2a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800ee2c:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800ee30:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800ee34:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 800ee38:	2002      	movs	r0, #2
}
 800ee3a:	4770      	bx	lr

0800ee3c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ee3c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800ee40:	2a20      	cmp	r2, #32
 800ee42:	d122      	bne.n	800ee8a <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 800ee44:	4603      	mov	r3, r0
{
 800ee46:	b500      	push	{lr}
 800ee48:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ee4c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800ee50:	2a01      	cmp	r2, #1
 800ee52:	d01c      	beq.n	800ee8e <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ee54:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800ee56:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ee58:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800ee5c:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800ee60:	6810      	ldr	r0, [r2, #0]
 800ee62:	f020 0001 	bic.w	r0, r0, #1
 800ee66:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 800ee68:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800ee6a:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 800ee6e:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
 800ee72:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
 800ee74:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800ee76:	6811      	ldr	r1, [r2, #0]
 800ee78:	f041 0101 	orr.w	r1, r1, #1
 800ee7c:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800ee7e:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800ee82:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800ee86:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 800ee8a:	2002      	movs	r0, #2
}
 800ee8c:	4770      	bx	lr
    return HAL_BUSY;
 800ee8e:	2002      	movs	r0, #2
}
 800ee90:	f85d fb04 	ldr.w	pc, [sp], #4

0800ee94 <HAL_LTDC_MspInit>:
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800ee94:	4770      	bx	lr
 800ee96:	bf00      	nop

0800ee98 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 800ee98:	2800      	cmp	r0, #0
 800ee9a:	d067      	beq.n	800ef6c <HAL_LTDC_Init+0xd4>
{
 800ee9c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800ee9e:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800eea2:	4604      	mov	r4, r0
 800eea4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d05a      	beq.n	800ef62 <HAL_LTDC_Init+0xca>
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800eeac:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800eeae:	2102      	movs	r1, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800eeb0:	e9d4 3200 	ldrd	r3, r2, [r4]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800eeb4:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800eeb8:	4302      	orrs	r2, r0
 800eeba:	68e1      	ldr	r1, [r4, #12]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800eebc:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800eebe:	430a      	orrs	r2, r1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800eec0:	6921      	ldr	r1, [r4, #16]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800eec2:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800eec6:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800eec8:	4929      	ldr	r1, [pc, #164]	; (800ef70 <HAL_LTDC_Init+0xd8>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800eeca:	6198      	str	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800eecc:	6998      	ldr	r0, [r3, #24]
 800eece:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800eed0:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800eed2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800eed4:	689a      	ldr	r2, [r3, #8]
 800eed6:	400a      	ands	r2, r1
 800eed8:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800eeda:	689a      	ldr	r2, [r3, #8]
 800eedc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800eee0:	69a0      	ldr	r0, [r4, #24]
 800eee2:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800eee4:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800eee6:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800eee8:	68da      	ldr	r2, [r3, #12]
 800eeea:	400a      	ands	r2, r1
 800eeec:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800eeee:	68da      	ldr	r2, [r3, #12]
 800eef0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800eef4:	6a20      	ldr	r0, [r4, #32]
 800eef6:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800eef8:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800eefa:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800eefc:	691a      	ldr	r2, [r3, #16]
 800eefe:	400a      	ands	r2, r1
 800ef00:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800ef02:	691a      	ldr	r2, [r3, #16]
 800ef04:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800ef08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800ef0a:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.TotalWidth << 16U);
 800ef0c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800ef0e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800ef10:	695a      	ldr	r2, [r3, #20]
 800ef12:	400a      	ands	r2, r1
 800ef14:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800ef16:	695a      	ldr	r2, [r3, #20]
 800ef18:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ef1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800ef1e:	430a      	orrs	r2, r1
 800ef20:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800ef22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800ef24:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800ef28:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800ef2c:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800ef30:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800ef32:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800ef34:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800ef38:	432a      	orrs	r2, r5
 800ef3a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800ef3e:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800ef40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800ef44:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800ef46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef48:	f042 0206 	orr.w	r2, r2, #6
 800ef4c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800ef4e:	699a      	ldr	r2, [r3, #24]
 800ef50:	f042 0201 	orr.w	r2, r2, #1
 800ef54:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800ef56:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800ef58:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800ef5c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800ef60:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800ef62:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800ef66:	f7ff ff95 	bl	800ee94 <HAL_LTDC_MspInit>
 800ef6a:	e79f      	b.n	800eeac <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 800ef6c:	2001      	movs	r0, #1
}
 800ef6e:	4770      	bx	lr
 800ef70:	f000f800 	.word	0xf000f800

0800ef74 <HAL_LTDC_ErrorCallback>:
 800ef74:	4770      	bx	lr
 800ef76:	bf00      	nop

0800ef78 <HAL_LTDC_LineEventCallback>:
 800ef78:	4770      	bx	lr
 800ef7a:	bf00      	nop

0800ef7c <HAL_LTDC_IRQHandler>:
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800ef7c:	6803      	ldr	r3, [r0, #0]
{
 800ef7e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800ef80:	6b9d      	ldr	r5, [r3, #56]	; 0x38
{
 800ef82:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800ef84:	6b5e      	ldr	r6, [r3, #52]	; 0x34

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800ef86:	076a      	lsls	r2, r5, #29
 800ef88:	d501      	bpl.n	800ef8e <HAL_LTDC_IRQHandler+0x12>
 800ef8a:	0771      	lsls	r1, r6, #29
 800ef8c:	d41d      	bmi.n	800efca <HAL_LTDC_IRQHandler+0x4e>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800ef8e:	07aa      	lsls	r2, r5, #30
 800ef90:	d501      	bpl.n	800ef96 <HAL_LTDC_IRQHandler+0x1a>
 800ef92:	07b3      	lsls	r3, r6, #30
 800ef94:	d42d      	bmi.n	800eff2 <HAL_LTDC_IRQHandler+0x76>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800ef96:	07e8      	lsls	r0, r5, #31
 800ef98:	d501      	bpl.n	800ef9e <HAL_LTDC_IRQHandler+0x22>
 800ef9a:	07f1      	lsls	r1, r6, #31
 800ef9c:	d440      	bmi.n	800f020 <HAL_LTDC_IRQHandler+0xa4>
    HAL_LTDC_LineEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800ef9e:	072a      	lsls	r2, r5, #28
 800efa0:	d501      	bpl.n	800efa6 <HAL_LTDC_IRQHandler+0x2a>
 800efa2:	0733      	lsls	r3, r6, #28
 800efa4:	d400      	bmi.n	800efa8 <HAL_LTDC_IRQHandler+0x2c>
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800efa6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800efa8:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800efaa:	2008      	movs	r0, #8
    hltdc->State = HAL_LTDC_STATE_READY;
 800efac:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
 800efae:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800efb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800efb2:	f022 0208 	bic.w	r2, r2, #8
 800efb6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800efb8:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ReloadEventCallback(hltdc);
 800efba:	4620      	mov	r0, r4
    hltdc->State = HAL_LTDC_STATE_READY;
 800efbc:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800efc0:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800efc4:	f7f2 fd02 	bl	80019cc <HAL_LTDC_ReloadEventCallback>
}
 800efc8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800efca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800efcc:	f022 0204 	bic.w	r2, r2, #4
 800efd0:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800efd2:	2204      	movs	r2, #4
 800efd4:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800efd6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800efda:	f043 0301 	orr.w	r3, r3, #1
 800efde:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800efe2:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800efe4:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800efe8:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800efec:	f7ff ffc2 	bl	800ef74 <HAL_LTDC_ErrorCallback>
 800eff0:	e7cd      	b.n	800ef8e <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800eff2:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800eff4:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800eff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eff8:	f022 0202 	bic.w	r2, r2, #2
 800effc:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800effe:	2202      	movs	r2, #2
 800f000:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800f002:	2204      	movs	r2, #4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800f004:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800f008:	f043 0302 	orr.w	r3, r3, #2
 800f00c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800f010:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800f012:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800f016:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800f01a:	f7ff ffab 	bl	800ef74 <HAL_LTDC_ErrorCallback>
 800f01e:	e7ba      	b.n	800ef96 <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800f020:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800f022:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800f024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f026:	f022 0201 	bic.w	r2, r2, #1
 800f02a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800f02c:	2201      	movs	r2, #1
 800f02e:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 800f030:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800f032:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800f036:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800f03a:	f7ff ff9d 	bl	800ef78 <HAL_LTDC_LineEventCallback>
 800f03e:	e7ae      	b.n	800ef9e <HAL_LTDC_IRQHandler+0x22>

0800f040 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800f040:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800f044:	2b01      	cmp	r3, #1
 800f046:	f000 80c0 	beq.w	800f1ca <HAL_LTDC_ConfigLayer+0x18a>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800f04a:	2302      	movs	r3, #2
{
 800f04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800f050:	f04f 0e34 	mov.w	lr, #52	; 0x34
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800f054:	f8d0 9000 	ldr.w	r9, [r0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800f058:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
{
 800f05c:	b083      	sub	sp, #12
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800f05e:	fb0e 0e02 	mla	lr, lr, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800f062:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800f064:	f8d9 300c 	ldr.w	r3, [r9, #12]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800f068:	460c      	mov	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800f06a:	f102 0684 	add.w	r6, r2, #132	; 0x84
 800f06e:	460d      	mov	r5, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800f070:	f3c3 4b0b 	ubfx	fp, r3, #16, #12
 800f074:	4680      	mov	r8, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800f076:	eb09 0c06 	add.w	ip, r9, r6
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800f07a:	f10e 0e38 	add.w	lr, lr, #56	; 0x38
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800f07e:	f8df a160 	ldr.w	sl, [pc, #352]	; 800f1e0 <HAL_LTDC_ConfigLayer+0x1a0>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800f082:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800f086:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800f08a:	9301      	str	r3, [sp, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800f08c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f08e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800f094:	686f      	ldr	r7, [r5, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800f096:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f09a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f09c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f0a0:	6823      	ldr	r3, [r4, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800f0a2:	44bb      	add	fp, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800f0a4:	f8ce 3000 	str.w	r3, [lr]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800f0a8:	9b01      	ldr	r3, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800f0aa:	682a      	ldr	r2, [r5, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800f0ac:	f8cc 3004 	str.w	r3, [ip, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800f0b0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800f0b4:	1c51      	adds	r1, r2, #1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800f0b6:	68e8      	ldr	r0, [r5, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800f0b8:	f3c3 430b 	ubfx	r3, r3, #16, #12
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800f0bc:	f8d5 e018 	ldr.w	lr, [r5, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800f0c0:	440b      	add	r3, r1
 800f0c2:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
 800f0c6:	f8cc 3004 	str.w	r3, [ip, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800f0ca:	f8d9 100c 	ldr.w	r1, [r9, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800f0ce:	f8dc 3008 	ldr.w	r3, [ip, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800f0d2:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800f0d6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800f0da:	4401      	add	r1, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800f0dc:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800f0e0:	68ab      	ldr	r3, [r5, #8]
 800f0e2:	f8d9 000c 	ldr.w	r0, [r9, #12]
 800f0e6:	3301      	adds	r3, #1
 800f0e8:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800f0ec:	4403      	add	r3, r0
 800f0ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800f0f2:	6929      	ldr	r1, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800f0f4:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800f0f8:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800f0fc:	f023 0307 	bic.w	r3, r3, #7
 800f100:	f8cc 3010 	str.w	r3, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800f104:	f8cc 1010 	str.w	r1, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800f108:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800f10c:	2300      	movs	r3, #0
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800f10e:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800f112:	f895 4031 	ldrb.w	r4, [r5, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800f116:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800f11a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800f11e:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 800f122:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800f126:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f12a:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800f12e:	f8dc 3014 	ldr.w	r3, [ip, #20]
 800f132:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f136:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800f13a:	696b      	ldr	r3, [r5, #20]
 800f13c:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800f140:	f8dc 001c 	ldr.w	r0, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800f144:	69eb      	ldr	r3, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800f146:	ea00 0a0a 	and.w	sl, r0, sl
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800f14a:	6a28      	ldr	r0, [r5, #32]
 800f14c:	4303      	orrs	r3, r0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800f14e:	f8cc a01c 	str.w	sl, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800f152:	f8cc 301c 	str.w	r3, [ip, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800f156:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
 800f15a:	2300      	movs	r3, #0
 800f15c:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800f160:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f162:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800f166:	bb59      	cbnz	r1, 800f1c0 <HAL_LTDC_ConfigLayer+0x180>
  {
    tmp = 4U;
 800f168:	2304      	movs	r3, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800f16a:	1abf      	subs	r7, r7, r2
 800f16c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800f16e:	fb03 f707 	mul.w	r7, r3, r7
 800f172:	fb02 f303 	mul.w	r3, r2, r3
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800f176:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800f178:	3707      	adds	r7, #7
 800f17a:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800f17e:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
 800f182:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800f186:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800f18a:	f8cc 702c 	str.w	r7, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800f18e:	4b12      	ldr	r3, [pc, #72]	; (800f1d8 <HAL_LTDC_ConfigLayer+0x198>)
 800f190:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
 800f194:	400b      	ands	r3, r1
 800f196:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800f19a:	f8cc 2030 	str.w	r2, [ip, #48]	; 0x30
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800f19e:	2201      	movs	r2, #1

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800f1a0:	f859 3006 	ldr.w	r3, [r9, r6]
 800f1a4:	4313      	orrs	r3, r2
 800f1a6:	f849 3006 	str.w	r3, [r9, r6]
  __HAL_UNLOCK(hltdc);
 800f1aa:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800f1ac:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
  return HAL_OK;
 800f1b0:	4618      	mov	r0, r3
  hltdc->State  = HAL_LTDC_STATE_READY;
 800f1b2:	f888 20a1 	strb.w	r2, [r8, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800f1b6:	f888 30a0 	strb.w	r3, [r8, #160]	; 0xa0
}
 800f1ba:	b003      	add	sp, #12
 800f1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800f1c0:	3901      	subs	r1, #1
 800f1c2:	2906      	cmp	r1, #6
 800f1c4:	d903      	bls.n	800f1ce <HAL_LTDC_ConfigLayer+0x18e>
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800f1c6:	2301      	movs	r3, #1
 800f1c8:	e7cf      	b.n	800f16a <HAL_LTDC_ConfigLayer+0x12a>
  __HAL_LOCK(hltdc);
 800f1ca:	2002      	movs	r0, #2
}
 800f1cc:	4770      	bx	lr
 800f1ce:	4b03      	ldr	r3, [pc, #12]	; (800f1dc <HAL_LTDC_ConfigLayer+0x19c>)
 800f1d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f1d4:	e7c9      	b.n	800f16a <HAL_LTDC_ConfigLayer+0x12a>
 800f1d6:	bf00      	nop
 800f1d8:	fffff800 	.word	0xfffff800
 800f1dc:	08099310 	.word	0x08099310
 800f1e0:	fffff8f8 	.word	0xfffff8f8

0800f1e4 <HAL_LTDC_Reload>:
  __HAL_LOCK(hltdc);
 800f1e4:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
 800f1e8:	2a01      	cmp	r2, #1
 800f1ea:	d015      	beq.n	800f218 <HAL_LTDC_Reload+0x34>
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 800f1ec:	6802      	ldr	r2, [r0, #0]
 800f1ee:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800f1f0:	2002      	movs	r0, #2
  __HAL_UNLOCK(hltdc);
 800f1f2:	f04f 0c00 	mov.w	ip, #0
{
 800f1f6:	b500      	push	{lr}
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800f1f8:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  hltdc->State = HAL_LTDC_STATE_READY;
 800f1fc:	f04f 0e01 	mov.w	lr, #1
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 800f200:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800f202:	f040 0008 	orr.w	r0, r0, #8
 800f206:	6350      	str	r0, [r2, #52]	; 0x34
  return HAL_OK;
 800f208:	4660      	mov	r0, ip
  hltdc->Instance->SRCR = ReloadType;
 800f20a:	6251      	str	r1, [r2, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800f20c:	f883 e0a1 	strb.w	lr, [r3, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800f210:	f883 c0a0 	strb.w	ip, [r3, #160]	; 0xa0
}
 800f214:	f85d fb04 	ldr.w	pc, [sp], #4
  __HAL_LOCK(hltdc);
 800f218:	2002      	movs	r0, #2
}
 800f21a:	4770      	bx	lr

0800f21c <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800f21c:	b538      	push	{r3, r4, r5, lr}
 800f21e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800f220:	f7fc fb2c 	bl	800b87c <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800f224:	2c00      	cmp	r4, #0
 800f226:	d05a      	beq.n	800f2de <HAL_MDMA_Init+0xc2>

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800f228:	6823      	ldr	r3, [r4, #0]
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800f22a:	2202      	movs	r2, #2
  __HAL_UNLOCK(hmdma);
 800f22c:	2100      	movs	r1, #0
 800f22e:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800f230:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 800f234:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 800f238:	68da      	ldr	r2, [r3, #12]
 800f23a:	f022 0201 	bic.w	r2, r2, #1
 800f23e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800f240:	e005      	b.n	800f24e <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800f242:	f7fc fb1b 	bl	800b87c <HAL_GetTick>
 800f246:	1b43      	subs	r3, r0, r5
 800f248:	2b05      	cmp	r3, #5
 800f24a:	d841      	bhi.n	800f2d0 <HAL_MDMA_Init+0xb4>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800f24c:	6823      	ldr	r3, [r4, #0]
 800f24e:	68da      	ldr	r2, [r3, #12]
 800f250:	07d2      	lsls	r2, r2, #31
 800f252:	d4f6      	bmi.n	800f242 <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800f254:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
 800f258:	69e0      	ldr	r0, [r4, #28]
 800f25a:	432a      	orrs	r2, r5
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800f25c:	68e1      	ldr	r1, [r4, #12]
 800f25e:	6925      	ldr	r5, [r4, #16]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800f260:	4302      	orrs	r2, r0
 800f262:	6a20      	ldr	r0, [r4, #32]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800f264:	4329      	orrs	r1, r5
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800f266:	4302      	orrs	r2, r0
 800f268:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f26a:	4302      	orrs	r2, r0
 800f26c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f26e:	4302      	orrs	r2, r0
 800f270:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f272:	4302      	orrs	r2, r0
 800f274:	68a0      	ldr	r0, [r4, #8]
 800f276:	4302      	orrs	r2, r0
 800f278:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800f27a:	3801      	subs	r0, #1
 800f27c:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800f280:	6860      	ldr	r0, [r4, #4]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800f282:	60d9      	str	r1, [r3, #12]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800f284:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800f288:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800f28a:	d103      	bne.n	800f294 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800f28c:	691a      	ldr	r2, [r3, #16]
 800f28e:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800f292:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800f294:	2100      	movs	r1, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800f296:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f298:	428a      	cmp	r2, r1
  hmdma->Instance->CBNDTR = 0;
 800f29a:	6159      	str	r1, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800f29c:	db30      	blt.n	800f300 <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800f29e:	b292      	uxth	r2, r2
 800f2a0:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800f2a2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800f2a4:	2a00      	cmp	r2, #0
 800f2a6:	db1c      	blt.n	800f2e2 <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800f2a8:	6a19      	ldr	r1, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800f2aa:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800f2ae:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800f2b2:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800f2b4:	d021      	beq.n	800f2fa <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800f2b6:	b2c0      	uxtb	r0, r0
 800f2b8:	6298      	str	r0, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800f2ba:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 800f2bc:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 800f2be:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 800f2c0:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800f2c2:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800f2c4:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800f2c6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800f2ca:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 800f2ce:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800f2d0:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800f2d2:	2303      	movs	r3, #3
      return HAL_ERROR;
 800f2d4:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800f2d6:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800f2d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800f2dc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800f2de:	2001      	movs	r0, #1
}
 800f2e0:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800f2e2:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800f2e4:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800f2e6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800f2ea:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 800f2ee:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800f2f0:	6a19      	ldr	r1, [r3, #32]
 800f2f2:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800f2f6:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800f2f8:	d1dd      	bne.n	800f2b6 <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	629a      	str	r2, [r3, #40]	; 0x28
 800f2fe:	e7dc      	b.n	800f2ba <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800f300:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800f302:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800f304:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800f308:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800f30a:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800f30c:	621a      	str	r2, [r3, #32]
 800f30e:	e7c8      	b.n	800f2a2 <HAL_MDMA_Init+0x86>

0800f310 <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
 800f310:	2800      	cmp	r0, #0
 800f312:	d06f      	beq.n	800f3f4 <HAL_MDMA_Start_IT+0xe4>
 800f314:	4684      	mov	ip, r0
  __HAL_LOCK(hmdma);
 800f316:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 800f31a:	2801      	cmp	r0, #1
 800f31c:	d072      	beq.n	800f404 <HAL_MDMA_Start_IT+0xf4>
 800f31e:	2001      	movs	r0, #1
 800f320:	f88c 003c 	strb.w	r0, [ip, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800f324:	f89c 003d 	ldrb.w	r0, [ip, #61]	; 0x3d
 800f328:	2801      	cmp	r0, #1
 800f32a:	d004      	beq.n	800f336 <HAL_MDMA_Start_IT+0x26>
    __HAL_UNLOCK(hmdma);
 800f32c:	2300      	movs	r3, #0
    return HAL_BUSY;
 800f32e:	2002      	movs	r0, #2
    __HAL_UNLOCK(hmdma);
 800f330:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
    return HAL_BUSY;
 800f334:	4770      	bx	lr
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800f336:	2002      	movs	r0, #2
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800f338:	f3c3 0310 	ubfx	r3, r3, #0, #17
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800f33c:	f011 4f5f 	tst.w	r1, #3741319168	; 0xdf000000
{
 800f340:	b530      	push	{r4, r5, lr}
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800f342:	9d03      	ldr	r5, [sp, #12]
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800f344:	f88c 003d 	strb.w	r0, [ip, #61]	; 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800f348:	f04f 0000 	mov.w	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 800f34c:	f8dc 4000 	ldr.w	r4, [ip]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800f350:	f105 3eff 	add.w	lr, r5, #4294967295
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800f354:	f8cc 0068 	str.w	r0, [ip, #104]	; 0x68
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800f358:	f5a0 3000 	sub.w	r0, r0, #131072	; 0x20000
    __HAL_MDMA_DISABLE(hmdma);
 800f35c:	68e5      	ldr	r5, [r4, #12]
 800f35e:	f025 0501 	bic.w	r5, r5, #1
 800f362:	60e5      	str	r5, [r4, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800f364:	6965      	ldr	r5, [r4, #20]
 800f366:	ea00 0005 	and.w	r0, r0, r5
 800f36a:	ea40 0003 	orr.w	r0, r0, r3
 800f36e:	6160      	str	r0, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800f370:	6963      	ldr	r3, [r4, #20]
 800f372:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f376:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 800f37a:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800f37c:	f04f 031f 	mov.w	r3, #31
 800f380:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 800f382:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 800f384:	61a1      	str	r1, [r4, #24]
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800f386:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f388:	bf0c      	ite	eq
 800f38a:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800f38e:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800f392:	f012 4f5f 	tst.w	r2, #3741319168	; 0xdf000000
    if(hmdma->XferBlockCpltCallback != NULL)
 800f396:	f8dc 204c 	ldr.w	r2, [ip, #76]	; 0x4c
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800f39a:	62a3      	str	r3, [r4, #40]	; 0x28
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800f39c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f39e:	bf0c      	ite	eq
 800f3a0:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800f3a4:	f423 3300 	bicne.w	r3, r3, #131072	; 0x20000
 800f3a8:	62a3      	str	r3, [r4, #40]	; 0x28
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800f3aa:	f8dc 305c 	ldr.w	r3, [ip, #92]	; 0x5c
 800f3ae:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800f3b0:	68e3      	ldr	r3, [r4, #12]
 800f3b2:	f043 0306 	orr.w	r3, r3, #6
 800f3b6:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 800f3b8:	b11a      	cbz	r2, 800f3c2 <HAL_MDMA_Start_IT+0xb2>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800f3ba:	68e3      	ldr	r3, [r4, #12]
 800f3bc:	f043 0310 	orr.w	r3, r3, #16
 800f3c0:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800f3c2:	f8dc 3050 	ldr.w	r3, [ip, #80]	; 0x50
 800f3c6:	b11b      	cbz	r3, 800f3d0 <HAL_MDMA_Start_IT+0xc0>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800f3c8:	68e3      	ldr	r3, [r4, #12]
 800f3ca:	f043 0308 	orr.w	r3, r3, #8
 800f3ce:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 800f3d0:	f8dc 3048 	ldr.w	r3, [ip, #72]	; 0x48
 800f3d4:	b11b      	cbz	r3, 800f3de <HAL_MDMA_Start_IT+0xce>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800f3d6:	68e3      	ldr	r3, [r4, #12]
 800f3d8:	f043 0320 	orr.w	r3, r3, #32
 800f3dc:	60e3      	str	r3, [r4, #12]
    __HAL_MDMA_ENABLE(hmdma);
 800f3de:	68e3      	ldr	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800f3e0:	f8dc 2004 	ldr.w	r2, [ip, #4]
    __HAL_MDMA_ENABLE(hmdma);
 800f3e4:	f043 0301 	orr.w	r3, r3, #1
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800f3e8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
    __HAL_MDMA_ENABLE(hmdma);
 800f3ec:	60e3      	str	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800f3ee:	d003      	beq.n	800f3f8 <HAL_MDMA_Start_IT+0xe8>
  return HAL_OK;
 800f3f0:	2000      	movs	r0, #0
}
 800f3f2:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800f3f4:	2001      	movs	r0, #1
 800f3f6:	4770      	bx	lr
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800f3f8:	68e3      	ldr	r3, [r4, #12]
  return HAL_OK;
 800f3fa:	2000      	movs	r0, #0
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800f3fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f400:	60e3      	str	r3, [r4, #12]
}
 800f402:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hmdma);
 800f404:	2002      	movs	r0, #2
}
 800f406:	4770      	bx	lr

0800f408 <HAL_MDMA_IRQHandler>:
{
 800f408:	b530      	push	{r4, r5, lr}
  __IO uint32_t count = 0;
 800f40a:	2300      	movs	r3, #0
{
 800f40c:	b083      	sub	sp, #12
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800f40e:	f04f 45a4 	mov.w	r5, #1375731712	; 0x52000000
{
 800f412:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 800f414:	9301      	str	r3, [sp, #4]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800f416:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800f418:	4b57      	ldr	r3, [pc, #348]	; (800f578 <HAL_MDMA_IRQHandler+0x170>)
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800f41a:	6828      	ldr	r0, [r5, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800f41c:	4a57      	ldr	r2, [pc, #348]	; (800f57c <HAL_MDMA_IRQHandler+0x174>)
  uint32_t timeout = SystemCoreClock / 9600U;
 800f41e:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800f420:	6823      	ldr	r3, [r4, #0]
 800f422:	441a      	add	r2, r3
 800f424:	f3c2 1284 	ubfx	r2, r2, #6, #5
 800f428:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800f42c:	4202      	tst	r2, r0
 800f42e:	f000 80a0 	beq.w	800f572 <HAL_MDMA_IRQHandler+0x16a>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800f432:	681a      	ldr	r2, [r3, #0]
 800f434:	07d1      	lsls	r1, r2, #31
 800f436:	d529      	bpl.n	800f48c <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800f438:	68da      	ldr	r2, [r3, #12]
 800f43a:	0792      	lsls	r2, r2, #30
 800f43c:	d526      	bpl.n	800f48c <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800f43e:	68da      	ldr	r2, [r3, #12]
 800f440:	f022 0202 	bic.w	r2, r2, #2
 800f444:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 800f446:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800f448:	6ea1      	ldr	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 800f44a:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800f44c:	bf54      	ite	pl
 800f44e:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800f452:	f041 0102 	orrmi.w	r1, r1, #2
 800f456:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800f458:	0591      	lsls	r1, r2, #22
 800f45a:	d503      	bpl.n	800f464 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800f45c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800f45e:	f041 0104 	orr.w	r1, r1, #4
 800f462:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800f464:	05d0      	lsls	r0, r2, #23
 800f466:	d503      	bpl.n	800f470 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800f468:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800f46a:	f041 0108 	orr.w	r1, r1, #8
 800f46e:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800f470:	0551      	lsls	r1, r2, #21
 800f472:	d503      	bpl.n	800f47c <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800f474:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800f476:	f041 0110 	orr.w	r1, r1, #16
 800f47a:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800f47c:	0510      	lsls	r0, r2, #20
 800f47e:	d503      	bpl.n	800f488 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800f480:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800f482:	f042 0220 	orr.w	r2, r2, #32
 800f486:	66a2      	str	r2, [r4, #104]	; 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800f488:	2201      	movs	r2, #1
 800f48a:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800f48c:	681a      	ldr	r2, [r3, #0]
 800f48e:	06d1      	lsls	r1, r2, #27
 800f490:	d509      	bpl.n	800f4a6 <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800f492:	68da      	ldr	r2, [r3, #12]
 800f494:	0692      	lsls	r2, r2, #26
 800f496:	d506      	bpl.n	800f4a6 <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800f498:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
 800f49a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800f49c:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 800f49e:	b112      	cbz	r2, 800f4a6 <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
 800f4a0:	4620      	mov	r0, r4
 800f4a2:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800f4a4:	6823      	ldr	r3, [r4, #0]
 800f4a6:	681a      	ldr	r2, [r3, #0]
 800f4a8:	0710      	lsls	r0, r2, #28
 800f4aa:	d509      	bpl.n	800f4c0 <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800f4ac:	68da      	ldr	r2, [r3, #12]
 800f4ae:	06d1      	lsls	r1, r2, #27
 800f4b0:	d506      	bpl.n	800f4c0 <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800f4b2:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
 800f4b4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800f4b6:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 800f4b8:	b112      	cbz	r2, 800f4c0 <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
 800f4ba:	4620      	mov	r0, r4
 800f4bc:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800f4be:	6823      	ldr	r3, [r4, #0]
 800f4c0:	681a      	ldr	r2, [r3, #0]
 800f4c2:	0752      	lsls	r2, r2, #29
 800f4c4:	d509      	bpl.n	800f4da <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800f4c6:	68da      	ldr	r2, [r3, #12]
 800f4c8:	0710      	lsls	r0, r2, #28
 800f4ca:	d506      	bpl.n	800f4da <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800f4cc:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800f4ce:	6d22      	ldr	r2, [r4, #80]	; 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800f4d0:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800f4d2:	b112      	cbz	r2, 800f4da <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800f4d4:	4620      	mov	r0, r4
 800f4d6:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800f4d8:	6823      	ldr	r3, [r4, #0]
 800f4da:	681a      	ldr	r2, [r3, #0]
 800f4dc:	0791      	lsls	r1, r2, #30
 800f4de:	d516      	bpl.n	800f50e <HAL_MDMA_IRQHandler+0x106>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800f4e0:	68da      	ldr	r2, [r3, #12]
 800f4e2:	0752      	lsls	r2, r2, #29
 800f4e4:	d513      	bpl.n	800f50e <HAL_MDMA_IRQHandler+0x106>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800f4e6:	68da      	ldr	r2, [r3, #12]
 800f4e8:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 800f4ec:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800f4ee:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800f4f2:	2a04      	cmp	r2, #4
 800f4f4:	d034      	beq.n	800f560 <HAL_MDMA_IRQHandler+0x158>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800f4f6:	2202      	movs	r2, #2
      __HAL_UNLOCK(hmdma);
 800f4f8:	2100      	movs	r1, #0
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800f4fa:	605a      	str	r2, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 800f4fc:	2201      	movs	r2, #1
      if(hmdma->XferCpltCallback != NULL)
 800f4fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hmdma);
 800f500:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 800f504:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if(hmdma->XferCpltCallback != NULL)
 800f508:	b10b      	cbz	r3, 800f50e <HAL_MDMA_IRQHandler+0x106>
        hmdma->XferCpltCallback(hmdma);
 800f50a:	4620      	mov	r0, r4
 800f50c:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800f50e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800f510:	2b00      	cmp	r3, #0
 800f512:	d02e      	beq.n	800f572 <HAL_MDMA_IRQHandler+0x16a>
    __HAL_MDMA_DISABLE(hmdma);
 800f514:	6821      	ldr	r1, [r4, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800f516:	2004      	movs	r0, #4
  uint32_t timeout = SystemCoreClock / 9600U;
 800f518:	4b19      	ldr	r3, [pc, #100]	; (800f580 <HAL_MDMA_IRQHandler+0x178>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800f51a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  uint32_t timeout = SystemCoreClock / 9600U;
 800f51e:	fba3 3205 	umull	r3, r2, r3, r5
    __HAL_MDMA_DISABLE(hmdma);
 800f522:	68cb      	ldr	r3, [r1, #12]
 800f524:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800f528:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
 800f52a:	60cb      	str	r3, [r1, #12]
 800f52c:	e002      	b.n	800f534 <HAL_MDMA_IRQHandler+0x12c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800f52e:	68cb      	ldr	r3, [r1, #12]
 800f530:	07d8      	lsls	r0, r3, #31
 800f532:	d504      	bpl.n	800f53e <HAL_MDMA_IRQHandler+0x136>
      if (++count > timeout)
 800f534:	9b01      	ldr	r3, [sp, #4]
 800f536:	3301      	adds	r3, #1
 800f538:	4293      	cmp	r3, r2
 800f53a:	9301      	str	r3, [sp, #4]
 800f53c:	d9f7      	bls.n	800f52e <HAL_MDMA_IRQHandler+0x126>
    __HAL_UNLOCK(hmdma);
 800f53e:	2300      	movs	r3, #0
 800f540:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800f544:	68cb      	ldr	r3, [r1, #12]
 800f546:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800f548:	bf4c      	ite	mi
 800f54a:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 800f54c:	2301      	movpl	r3, #1
 800f54e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hmdma->XferErrorCallback != NULL)
 800f552:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f554:	b16b      	cbz	r3, 800f572 <HAL_MDMA_IRQHandler+0x16a>
      hmdma->XferErrorCallback(hmdma);
 800f556:	4620      	mov	r0, r4
}
 800f558:	b003      	add	sp, #12
 800f55a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 800f55e:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
 800f560:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
 800f562:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
 800f564:	6da3      	ldr	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hmdma);
 800f566:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 800f56a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if(hmdma->XferAbortCallback != NULL)
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d1f1      	bne.n	800f556 <HAL_MDMA_IRQHandler+0x14e>
}
 800f572:	b003      	add	sp, #12
 800f574:	bd30      	pop	{r4, r5, pc}
 800f576:	bf00      	nop
 800f578:	20007634 	.word	0x20007634
 800f57c:	adffffc0 	.word	0xadffffc0
 800f580:	1b4e81b5 	.word	0x1b4e81b5

0800f584 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800f584:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800f586:	4c1c      	ldr	r4, [pc, #112]	; (800f5f8 <HAL_PWREx_ConfigSupply+0x74>)
{
 800f588:	4605      	mov	r5, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800f58a:	68e3      	ldr	r3, [r4, #12]
 800f58c:	f003 0307 	and.w	r3, r3, #7
 800f590:	2b06      	cmp	r3, #6
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800f592:	68e3      	ldr	r3, [r4, #12]
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800f594:	d005      	beq.n	800f5a2 <HAL_PWREx_ConfigSupply+0x1e>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800f596:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800f59a:	1a18      	subs	r0, r3, r0
 800f59c:	bf18      	it	ne
 800f59e:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800f5a0:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800f5a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800f5a6:	4303      	orrs	r3, r0
 800f5a8:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 800f5aa:	f7fc f967 	bl	800b87c <HAL_GetTick>
 800f5ae:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800f5b0:	e005      	b.n	800f5be <HAL_PWREx_ConfigSupply+0x3a>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800f5b2:	f7fc f963 	bl	800b87c <HAL_GetTick>
 800f5b6:	1b83      	subs	r3, r0, r6
 800f5b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f5bc:	d81a      	bhi.n	800f5f4 <HAL_PWREx_ConfigSupply+0x70>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800f5be:	6863      	ldr	r3, [r4, #4]
 800f5c0:	049a      	lsls	r2, r3, #18
 800f5c2:	d5f6      	bpl.n	800f5b2 <HAL_PWREx_ConfigSupply+0x2e>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800f5c4:	f1a5 031d 	sub.w	r3, r5, #29
 800f5c8:	2b01      	cmp	r3, #1
 800f5ca:	d904      	bls.n	800f5d6 <HAL_PWREx_ConfigSupply+0x52>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 800f5cc:	3d2d      	subs	r5, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800f5ce:	2d01      	cmp	r5, #1
 800f5d0:	d901      	bls.n	800f5d6 <HAL_PWREx_ConfigSupply+0x52>
  return HAL_OK;
 800f5d2:	2000      	movs	r0, #0
}
 800f5d4:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 800f5d6:	f7fc f951 	bl	800b87c <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800f5da:	4d07      	ldr	r5, [pc, #28]	; (800f5f8 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 800f5dc:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800f5de:	e005      	b.n	800f5ec <HAL_PWREx_ConfigSupply+0x68>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800f5e0:	f7fc f94c 	bl	800b87c <HAL_GetTick>
 800f5e4:	1b00      	subs	r0, r0, r4
 800f5e6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800f5ea:	d803      	bhi.n	800f5f4 <HAL_PWREx_ConfigSupply+0x70>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800f5ec:	68eb      	ldr	r3, [r5, #12]
 800f5ee:	03db      	lsls	r3, r3, #15
 800f5f0:	d5f6      	bpl.n	800f5e0 <HAL_PWREx_ConfigSupply+0x5c>
 800f5f2:	e7ee      	b.n	800f5d2 <HAL_PWREx_ConfigSupply+0x4e>
      return HAL_ERROR;
 800f5f4:	2001      	movs	r0, #1
}
 800f5f6:	bd70      	pop	{r4, r5, r6, pc}
 800f5f8:	58024800 	.word	0x58024800

0800f5fc <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f5fc:	4b3c      	ldr	r3, [pc, #240]	; (800f6f0 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800f5fe:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800f602:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800f604:	6add      	ldr	r5, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 800f606:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800f60a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800f60c:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 800f610:	d038      	beq.n	800f684 <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800f612:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800f616:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f61a:	f002 0203 	and.w	r2, r2, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800f61e:	fb05 f101 	mul.w	r1, r5, r1
 800f622:	2a01      	cmp	r2, #1
 800f624:	ee07 1a90 	vmov	s15, r1
 800f628:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 800f62c:	d002      	beq.n	800f634 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 800f62e:	2a02      	cmp	r2, #2
 800f630:	d050      	beq.n	800f6d4 <HAL_RCC_GetSysClockFreq.part.0+0xd8>
 800f632:	b34a      	cbz	r2, 800f688 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f634:	ee07 0a90 	vmov	s15, r0
 800f638:	ed9f 5a2e 	vldr	s10, [pc, #184]	; 800f6f4 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800f63c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f642:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800f646:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800f6f8 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 800f64a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f64e:	ee07 3a90 	vmov	s15, r3
 800f652:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800f656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f65a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800f65e:	eee7 7a06 	vfma.f32	s15, s14, s12
 800f662:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800f666:	4b22      	ldr	r3, [pc, #136]	; (800f6f0 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
 800f668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f66a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800f66e:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800f670:	ee07 3a90 	vmov	s15, r3
 800f674:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f67c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f680:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800f684:	bc30      	pop	{r4, r5}
 800f686:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f688:	681a      	ldr	r2, [r3, #0]
 800f68a:	0692      	lsls	r2, r2, #26
 800f68c:	d529      	bpl.n	800f6e2 <HAL_RCC_GetSysClockFreq.part.0+0xe6>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f68e:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f690:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f694:	4a19      	ldr	r2, [pc, #100]	; (800f6fc <HAL_RCC_GetSysClockFreq.part.0+0x100>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f69a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f69c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f6a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f6a4:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800f6f8 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 800f6a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f6ac:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f6ae:	ee06 3a10 	vmov	s12, r3
 800f6b2:	ee05 2a90 	vmov	s11, r2
 800f6b6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800f6ba:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800f6be:	ee36 6a26 	vadd.f32	s12, s12, s13
 800f6c2:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800f6c6:	eef0 7a46 	vmov.f32	s15, s12
 800f6ca:	eee7 7a05 	vfma.f32	s15, s14, s10
 800f6ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f6d2:	e7c8      	b.n	800f666 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f6d4:	ee07 0a90 	vmov	s15, r0
 800f6d8:	ed9f 5a09 	vldr	s10, [pc, #36]	; 800f700 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 800f6dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f6e0:	e7ae      	b.n	800f640 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f6e2:	ee07 0a90 	vmov	s15, r0
 800f6e6:	ed9f 5a07 	vldr	s10, [pc, #28]	; 800f704 <HAL_RCC_GetSysClockFreq.part.0+0x108>
 800f6ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f6ee:	e7a7      	b.n	800f640 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800f6f0:	58024400 	.word	0x58024400
 800f6f4:	4a742400 	.word	0x4a742400
 800f6f8:	39000000 	.word	0x39000000
 800f6fc:	03d09000 	.word	0x03d09000
 800f700:	4bbebc20 	.word	0x4bbebc20
 800f704:	4c742400 	.word	0x4c742400

0800f708 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800f708:	2800      	cmp	r0, #0
 800f70a:	f000 81eb 	beq.w	800fae4 <HAL_RCC_OscConfig+0x3dc>
{
 800f70e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f710:	6803      	ldr	r3, [r0, #0]
 800f712:	4604      	mov	r4, r0
 800f714:	07d9      	lsls	r1, r3, #31
 800f716:	d530      	bpl.n	800f77a <HAL_RCC_OscConfig+0x72>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f718:	49a0      	ldr	r1, [pc, #640]	; (800f99c <HAL_RCC_OscConfig+0x294>)
 800f71a:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f71c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f71e:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800f722:	2a10      	cmp	r2, #16
 800f724:	f000 8127 	beq.w	800f976 <HAL_RCC_OscConfig+0x26e>
 800f728:	2a18      	cmp	r2, #24
 800f72a:	f000 811f 	beq.w	800f96c <HAL_RCC_OscConfig+0x264>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f72e:	6863      	ldr	r3, [r4, #4]
 800f730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f734:	f000 8161 	beq.w	800f9fa <HAL_RCC_OscConfig+0x2f2>
 800f738:	2b00      	cmp	r3, #0
 800f73a:	f000 8179 	beq.w	800fa30 <HAL_RCC_OscConfig+0x328>
 800f73e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f742:	4b96      	ldr	r3, [pc, #600]	; (800f99c <HAL_RCC_OscConfig+0x294>)
 800f744:	681a      	ldr	r2, [r3, #0]
 800f746:	f000 826c 	beq.w	800fc22 <HAL_RCC_OscConfig+0x51a>
 800f74a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800f74e:	601a      	str	r2, [r3, #0]
 800f750:	681a      	ldr	r2, [r3, #0]
 800f752:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f756:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800f758:	f7fc f890 	bl	800b87c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f75c:	4e8f      	ldr	r6, [pc, #572]	; (800f99c <HAL_RCC_OscConfig+0x294>)
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f75e:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800f762:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f764:	e005      	b.n	800f772 <HAL_RCC_OscConfig+0x6a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f766:	f7fc f889 	bl	800b87c <HAL_GetTick>
 800f76a:	1b40      	subs	r0, r0, r5
 800f76c:	42b8      	cmp	r0, r7
 800f76e:	f200 815d 	bhi.w	800fa2c <HAL_RCC_OscConfig+0x324>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f772:	6833      	ldr	r3, [r6, #0]
 800f774:	039b      	lsls	r3, r3, #14
 800f776:	d5f6      	bpl.n	800f766 <HAL_RCC_OscConfig+0x5e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f778:	6823      	ldr	r3, [r4, #0]
 800f77a:	0799      	lsls	r1, r3, #30
 800f77c:	d521      	bpl.n	800f7c2 <HAL_RCC_OscConfig+0xba>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f77e:	4a87      	ldr	r2, [pc, #540]	; (800f99c <HAL_RCC_OscConfig+0x294>)
 800f780:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f782:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800f784:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800f788:	f040 80a4 	bne.w	800f8d4 <HAL_RCC_OscConfig+0x1cc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f78c:	4b83      	ldr	r3, [pc, #524]	; (800f99c <HAL_RCC_OscConfig+0x294>)
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	075b      	lsls	r3, r3, #29
 800f792:	d503      	bpl.n	800f79c <HAL_RCC_OscConfig+0x94>
 800f794:	68e3      	ldr	r3, [r4, #12]
 800f796:	2b00      	cmp	r3, #0
 800f798:	f000 80e6 	beq.w	800f968 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f79c:	f7fc f886 	bl	800b8ac <HAL_GetREVID>
 800f7a0:	f241 0303 	movw	r3, #4099	; 0x1003
 800f7a4:	4298      	cmp	r0, r3
 800f7a6:	f200 817e 	bhi.w	800faa6 <HAL_RCC_OscConfig+0x39e>
 800f7aa:	6922      	ldr	r2, [r4, #16]
 800f7ac:	2a40      	cmp	r2, #64	; 0x40
 800f7ae:	f000 8240 	beq.w	800fc32 <HAL_RCC_OscConfig+0x52a>
 800f7b2:	497a      	ldr	r1, [pc, #488]	; (800f99c <HAL_RCC_OscConfig+0x294>)
 800f7b4:	684b      	ldr	r3, [r1, #4]
 800f7b6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800f7ba:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800f7be:	604b      	str	r3, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800f7c0:	6823      	ldr	r3, [r4, #0]
 800f7c2:	06d9      	lsls	r1, r3, #27
 800f7c4:	d453      	bmi.n	800f86e <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f7c6:	071d      	lsls	r5, r3, #28
 800f7c8:	d516      	bpl.n	800f7f8 <HAL_RCC_OscConfig+0xf0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800f7ca:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800f7cc:	4d73      	ldr	r5, [pc, #460]	; (800f99c <HAL_RCC_OscConfig+0x294>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	f000 80ae 	beq.w	800f930 <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_LSI_ENABLE();
 800f7d4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800f7d6:	f043 0301 	orr.w	r3, r3, #1
 800f7da:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800f7dc:	f7fc f84e 	bl	800b87c <HAL_GetTick>
 800f7e0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800f7e2:	e005      	b.n	800f7f0 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f7e4:	f7fc f84a 	bl	800b87c <HAL_GetTick>
 800f7e8:	1b80      	subs	r0, r0, r6
 800f7ea:	2802      	cmp	r0, #2
 800f7ec:	f200 811e 	bhi.w	800fa2c <HAL_RCC_OscConfig+0x324>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800f7f0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800f7f2:	0798      	lsls	r0, r3, #30
 800f7f4:	d5f6      	bpl.n	800f7e4 <HAL_RCC_OscConfig+0xdc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800f7f6:	6823      	ldr	r3, [r4, #0]
 800f7f8:	069a      	lsls	r2, r3, #26
 800f7fa:	d516      	bpl.n	800f82a <HAL_RCC_OscConfig+0x122>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800f7fc:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 800f7fe:	4d67      	ldr	r5, [pc, #412]	; (800f99c <HAL_RCC_OscConfig+0x294>)
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800f800:	2b00      	cmp	r3, #0
 800f802:	f000 812d 	beq.w	800fa60 <HAL_RCC_OscConfig+0x358>
      __HAL_RCC_HSI48_ENABLE();
 800f806:	682b      	ldr	r3, [r5, #0]
 800f808:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f80c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800f80e:	f7fc f835 	bl	800b87c <HAL_GetTick>
 800f812:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800f814:	e005      	b.n	800f822 <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800f816:	f7fc f831 	bl	800b87c <HAL_GetTick>
 800f81a:	1b80      	subs	r0, r0, r6
 800f81c:	2802      	cmp	r0, #2
 800f81e:	f200 8105 	bhi.w	800fa2c <HAL_RCC_OscConfig+0x324>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800f822:	682b      	ldr	r3, [r5, #0]
 800f824:	049f      	lsls	r7, r3, #18
 800f826:	d5f6      	bpl.n	800f816 <HAL_RCC_OscConfig+0x10e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f828:	6823      	ldr	r3, [r4, #0]
 800f82a:	0759      	lsls	r1, r3, #29
 800f82c:	f100 80ad 	bmi.w	800f98a <HAL_RCC_OscConfig+0x282>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f830:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f832:	b1d0      	cbz	r0, 800f86a <HAL_RCC_OscConfig+0x162>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800f834:	4d59      	ldr	r5, [pc, #356]	; (800f99c <HAL_RCC_OscConfig+0x294>)
 800f836:	692b      	ldr	r3, [r5, #16]
 800f838:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f83c:	2b18      	cmp	r3, #24
 800f83e:	f000 81c2 	beq.w	800fbc6 <HAL_RCC_OscConfig+0x4be>
        __HAL_RCC_PLL_DISABLE();
 800f842:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f844:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800f846:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f84a:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f84c:	f000 8156 	beq.w	800fafc <HAL_RCC_OscConfig+0x3f4>
        tickstart = HAL_GetTick();
 800f850:	f7fc f814 	bl	800b87c <HAL_GetTick>
 800f854:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f856:	e005      	b.n	800f864 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f858:	f7fc f810 	bl	800b87c <HAL_GetTick>
 800f85c:	1b00      	subs	r0, r0, r4
 800f85e:	2802      	cmp	r0, #2
 800f860:	f200 80e4 	bhi.w	800fa2c <HAL_RCC_OscConfig+0x324>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f864:	682b      	ldr	r3, [r5, #0]
 800f866:	019b      	lsls	r3, r3, #6
 800f868:	d4f6      	bmi.n	800f858 <HAL_RCC_OscConfig+0x150>
  return HAL_OK;
 800f86a:	2000      	movs	r0, #0
}
 800f86c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f86e:	4a4b      	ldr	r2, [pc, #300]	; (800f99c <HAL_RCC_OscConfig+0x294>)
 800f870:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f872:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f874:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800f878:	2b08      	cmp	r3, #8
 800f87a:	d06e      	beq.n	800f95a <HAL_RCC_OscConfig+0x252>
 800f87c:	2b18      	cmp	r3, #24
 800f87e:	d068      	beq.n	800f952 <HAL_RCC_OscConfig+0x24a>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800f880:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800f882:	4d46      	ldr	r5, [pc, #280]	; (800f99c <HAL_RCC_OscConfig+0x294>)
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800f884:	2b00      	cmp	r3, #0
 800f886:	f000 80fc 	beq.w	800fa82 <HAL_RCC_OscConfig+0x37a>
        __HAL_RCC_CSI_ENABLE();
 800f88a:	682b      	ldr	r3, [r5, #0]
 800f88c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f890:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800f892:	f7fb fff3 	bl	800b87c <HAL_GetTick>
 800f896:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f898:	e005      	b.n	800f8a6 <HAL_RCC_OscConfig+0x19e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800f89a:	f7fb ffef 	bl	800b87c <HAL_GetTick>
 800f89e:	1b80      	subs	r0, r0, r6
 800f8a0:	2802      	cmp	r0, #2
 800f8a2:	f200 80c3 	bhi.w	800fa2c <HAL_RCC_OscConfig+0x324>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f8a6:	682b      	ldr	r3, [r5, #0]
 800f8a8:	05db      	lsls	r3, r3, #23
 800f8aa:	d5f6      	bpl.n	800f89a <HAL_RCC_OscConfig+0x192>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f8ac:	f7fb fffe 	bl	800b8ac <HAL_GetREVID>
 800f8b0:	f241 0303 	movw	r3, #4099	; 0x1003
 800f8b4:	4298      	cmp	r0, r3
 800f8b6:	f200 81e5 	bhi.w	800fc84 <HAL_RCC_OscConfig+0x57c>
 800f8ba:	6a22      	ldr	r2, [r4, #32]
 800f8bc:	686b      	ldr	r3, [r5, #4]
 800f8be:	2a20      	cmp	r2, #32
 800f8c0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800f8c4:	bf0c      	ite	eq
 800f8c6:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800f8ca:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800f8ce:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f8d0:	6823      	ldr	r3, [r4, #0]
 800f8d2:	e778      	b.n	800f7c6 <HAL_RCC_OscConfig+0xbe>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800f8d4:	2b18      	cmp	r3, #24
 800f8d6:	f000 8101 	beq.w	800fadc <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f8da:	4d30      	ldr	r5, [pc, #192]	; (800f99c <HAL_RCC_OscConfig+0x294>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800f8dc:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f8de:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800f8e0:	2a00      	cmp	r2, #0
 800f8e2:	f000 80ea 	beq.w	800faba <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f8e6:	f023 0319 	bic.w	r3, r3, #25
 800f8ea:	4313      	orrs	r3, r2
 800f8ec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800f8ee:	f7fb ffc5 	bl	800b87c <HAL_GetTick>
 800f8f2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f8f4:	e005      	b.n	800f902 <HAL_RCC_OscConfig+0x1fa>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f8f6:	f7fb ffc1 	bl	800b87c <HAL_GetTick>
 800f8fa:	1b80      	subs	r0, r0, r6
 800f8fc:	2802      	cmp	r0, #2
 800f8fe:	f200 8095 	bhi.w	800fa2c <HAL_RCC_OscConfig+0x324>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f902:	682b      	ldr	r3, [r5, #0]
 800f904:	075f      	lsls	r7, r3, #29
 800f906:	d5f6      	bpl.n	800f8f6 <HAL_RCC_OscConfig+0x1ee>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f908:	f7fb ffd0 	bl	800b8ac <HAL_GetREVID>
 800f90c:	f241 0303 	movw	r3, #4099	; 0x1003
 800f910:	4298      	cmp	r0, r3
 800f912:	f200 81c0 	bhi.w	800fc96 <HAL_RCC_OscConfig+0x58e>
 800f916:	6922      	ldr	r2, [r4, #16]
 800f918:	686b      	ldr	r3, [r5, #4]
 800f91a:	2a40      	cmp	r2, #64	; 0x40
 800f91c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800f920:	bf0c      	ite	eq
 800f922:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800f926:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800f92a:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800f92c:	6823      	ldr	r3, [r4, #0]
 800f92e:	e748      	b.n	800f7c2 <HAL_RCC_OscConfig+0xba>
      __HAL_RCC_LSI_DISABLE();
 800f930:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800f932:	f023 0301 	bic.w	r3, r3, #1
 800f936:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800f938:	f7fb ffa0 	bl	800b87c <HAL_GetTick>
 800f93c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800f93e:	e004      	b.n	800f94a <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f940:	f7fb ff9c 	bl	800b87c <HAL_GetTick>
 800f944:	1b80      	subs	r0, r0, r6
 800f946:	2802      	cmp	r0, #2
 800f948:	d870      	bhi.n	800fa2c <HAL_RCC_OscConfig+0x324>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800f94a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800f94c:	0799      	lsls	r1, r3, #30
 800f94e:	d4f7      	bmi.n	800f940 <HAL_RCC_OscConfig+0x238>
 800f950:	e751      	b.n	800f7f6 <HAL_RCC_OscConfig+0xee>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800f952:	f002 0203 	and.w	r2, r2, #3
 800f956:	2a01      	cmp	r2, #1
 800f958:	d192      	bne.n	800f880 <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f95a:	4b10      	ldr	r3, [pc, #64]	; (800f99c <HAL_RCC_OscConfig+0x294>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	05da      	lsls	r2, r3, #23
 800f960:	d551      	bpl.n	800fa06 <HAL_RCC_OscConfig+0x2fe>
 800f962:	69e3      	ldr	r3, [r4, #28]
 800f964:	2b80      	cmp	r3, #128	; 0x80
 800f966:	d04e      	beq.n	800fa06 <HAL_RCC_OscConfig+0x2fe>
        return HAL_ERROR;
 800f968:	2001      	movs	r0, #1
}
 800f96a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800f96c:	f001 0103 	and.w	r1, r1, #3
 800f970:	2902      	cmp	r1, #2
 800f972:	f47f aedc 	bne.w	800f72e <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f976:	4a09      	ldr	r2, [pc, #36]	; (800f99c <HAL_RCC_OscConfig+0x294>)
 800f978:	6812      	ldr	r2, [r2, #0]
 800f97a:	0392      	lsls	r2, r2, #14
 800f97c:	f57f aefd 	bpl.w	800f77a <HAL_RCC_OscConfig+0x72>
 800f980:	6862      	ldr	r2, [r4, #4]
 800f982:	2a00      	cmp	r2, #0
 800f984:	f47f aef9 	bne.w	800f77a <HAL_RCC_OscConfig+0x72>
 800f988:	e7ee      	b.n	800f968 <HAL_RCC_OscConfig+0x260>
    PWR->CR1 |= PWR_CR1_DBP;
 800f98a:	4d05      	ldr	r5, [pc, #20]	; (800f9a0 <HAL_RCC_OscConfig+0x298>)
 800f98c:	682b      	ldr	r3, [r5, #0]
 800f98e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f992:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800f994:	f7fb ff72 	bl	800b87c <HAL_GetTick>
 800f998:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f99a:	e008      	b.n	800f9ae <HAL_RCC_OscConfig+0x2a6>
 800f99c:	58024400 	.word	0x58024400
 800f9a0:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800f9a4:	f7fb ff6a 	bl	800b87c <HAL_GetTick>
 800f9a8:	1b80      	subs	r0, r0, r6
 800f9aa:	2864      	cmp	r0, #100	; 0x64
 800f9ac:	d83e      	bhi.n	800fa2c <HAL_RCC_OscConfig+0x324>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f9ae:	682b      	ldr	r3, [r5, #0]
 800f9b0:	05da      	lsls	r2, r3, #23
 800f9b2:	d5f7      	bpl.n	800f9a4 <HAL_RCC_OscConfig+0x29c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f9b4:	68a3      	ldr	r3, [r4, #8]
 800f9b6:	2b01      	cmp	r3, #1
 800f9b8:	f000 8176 	beq.w	800fca8 <HAL_RCC_OscConfig+0x5a0>
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	f000 8141 	beq.w	800fc44 <HAL_RCC_OscConfig+0x53c>
 800f9c2:	2b05      	cmp	r3, #5
 800f9c4:	4ba7      	ldr	r3, [pc, #668]	; (800fc64 <HAL_RCC_OscConfig+0x55c>)
 800f9c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f9c8:	f000 817d 	beq.w	800fcc6 <HAL_RCC_OscConfig+0x5be>
 800f9cc:	f022 0201 	bic.w	r2, r2, #1
 800f9d0:	671a      	str	r2, [r3, #112]	; 0x70
 800f9d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f9d4:	f022 0204 	bic.w	r2, r2, #4
 800f9d8:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800f9da:	f7fb ff4f 	bl	800b87c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f9de:	4ea1      	ldr	r6, [pc, #644]	; (800fc64 <HAL_RCC_OscConfig+0x55c>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f9e0:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800f9e4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f9e6:	e004      	b.n	800f9f2 <HAL_RCC_OscConfig+0x2ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f9e8:	f7fb ff48 	bl	800b87c <HAL_GetTick>
 800f9ec:	1b40      	subs	r0, r0, r5
 800f9ee:	42b8      	cmp	r0, r7
 800f9f0:	d81c      	bhi.n	800fa2c <HAL_RCC_OscConfig+0x324>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f9f2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800f9f4:	079b      	lsls	r3, r3, #30
 800f9f6:	d5f7      	bpl.n	800f9e8 <HAL_RCC_OscConfig+0x2e0>
 800f9f8:	e71a      	b.n	800f830 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f9fa:	4a9a      	ldr	r2, [pc, #616]	; (800fc64 <HAL_RCC_OscConfig+0x55c>)
 800f9fc:	6813      	ldr	r3, [r2, #0]
 800f9fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fa02:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fa04:	e6a8      	b.n	800f758 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800fa06:	f7fb ff51 	bl	800b8ac <HAL_GetREVID>
 800fa0a:	f241 0303 	movw	r3, #4099	; 0x1003
 800fa0e:	4298      	cmp	r0, r3
 800fa10:	d86a      	bhi.n	800fae8 <HAL_RCC_OscConfig+0x3e0>
 800fa12:	6a22      	ldr	r2, [r4, #32]
 800fa14:	2a20      	cmp	r2, #32
 800fa16:	f000 814d 	beq.w	800fcb4 <HAL_RCC_OscConfig+0x5ac>
 800fa1a:	4992      	ldr	r1, [pc, #584]	; (800fc64 <HAL_RCC_OscConfig+0x55c>)
 800fa1c:	684b      	ldr	r3, [r1, #4]
 800fa1e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800fa22:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800fa26:	604b      	str	r3, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fa28:	6823      	ldr	r3, [r4, #0]
 800fa2a:	e6cc      	b.n	800f7c6 <HAL_RCC_OscConfig+0xbe>
            return HAL_TIMEOUT;
 800fa2c:	2003      	movs	r0, #3
}
 800fa2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fa30:	4d8c      	ldr	r5, [pc, #560]	; (800fc64 <HAL_RCC_OscConfig+0x55c>)
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fa32:	f241 3788 	movw	r7, #5000	; 0x1388
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fa36:	682b      	ldr	r3, [r5, #0]
 800fa38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fa3c:	602b      	str	r3, [r5, #0]
 800fa3e:	682b      	ldr	r3, [r5, #0]
 800fa40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fa44:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800fa46:	f7fb ff19 	bl	800b87c <HAL_GetTick>
 800fa4a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800fa4c:	e004      	b.n	800fa58 <HAL_RCC_OscConfig+0x350>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fa4e:	f7fb ff15 	bl	800b87c <HAL_GetTick>
 800fa52:	1b80      	subs	r0, r0, r6
 800fa54:	42b8      	cmp	r0, r7
 800fa56:	d8e9      	bhi.n	800fa2c <HAL_RCC_OscConfig+0x324>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800fa58:	682b      	ldr	r3, [r5, #0]
 800fa5a:	0398      	lsls	r0, r3, #14
 800fa5c:	d4f7      	bmi.n	800fa4e <HAL_RCC_OscConfig+0x346>
 800fa5e:	e68b      	b.n	800f778 <HAL_RCC_OscConfig+0x70>
      __HAL_RCC_HSI48_DISABLE();
 800fa60:	682b      	ldr	r3, [r5, #0]
 800fa62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fa66:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800fa68:	f7fb ff08 	bl	800b87c <HAL_GetTick>
 800fa6c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800fa6e:	e004      	b.n	800fa7a <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800fa70:	f7fb ff04 	bl	800b87c <HAL_GetTick>
 800fa74:	1b80      	subs	r0, r0, r6
 800fa76:	2802      	cmp	r0, #2
 800fa78:	d8d8      	bhi.n	800fa2c <HAL_RCC_OscConfig+0x324>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800fa7a:	682b      	ldr	r3, [r5, #0]
 800fa7c:	0498      	lsls	r0, r3, #18
 800fa7e:	d4f7      	bmi.n	800fa70 <HAL_RCC_OscConfig+0x368>
 800fa80:	e6d2      	b.n	800f828 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_DISABLE();
 800fa82:	682b      	ldr	r3, [r5, #0]
 800fa84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fa88:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800fa8a:	f7fb fef7 	bl	800b87c <HAL_GetTick>
 800fa8e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800fa90:	e004      	b.n	800fa9c <HAL_RCC_OscConfig+0x394>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800fa92:	f7fb fef3 	bl	800b87c <HAL_GetTick>
 800fa96:	1b80      	subs	r0, r0, r6
 800fa98:	2802      	cmp	r0, #2
 800fa9a:	d8c7      	bhi.n	800fa2c <HAL_RCC_OscConfig+0x324>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800fa9c:	682b      	ldr	r3, [r5, #0]
 800fa9e:	05df      	lsls	r7, r3, #23
 800faa0:	d4f7      	bmi.n	800fa92 <HAL_RCC_OscConfig+0x38a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800faa2:	6823      	ldr	r3, [r4, #0]
 800faa4:	e68f      	b.n	800f7c6 <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800faa6:	4a6f      	ldr	r2, [pc, #444]	; (800fc64 <HAL_RCC_OscConfig+0x55c>)
 800faa8:	6921      	ldr	r1, [r4, #16]
 800faaa:	6853      	ldr	r3, [r2, #4]
 800faac:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800fab0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800fab4:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800fab6:	6823      	ldr	r3, [r4, #0]
 800fab8:	e683      	b.n	800f7c2 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_DISABLE();
 800faba:	f023 0301 	bic.w	r3, r3, #1
 800fabe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800fac0:	f7fb fedc 	bl	800b87c <HAL_GetTick>
 800fac4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800fac6:	e004      	b.n	800fad2 <HAL_RCC_OscConfig+0x3ca>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fac8:	f7fb fed8 	bl	800b87c <HAL_GetTick>
 800facc:	1b80      	subs	r0, r0, r6
 800face:	2802      	cmp	r0, #2
 800fad0:	d8ac      	bhi.n	800fa2c <HAL_RCC_OscConfig+0x324>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800fad2:	682b      	ldr	r3, [r5, #0]
 800fad4:	0758      	lsls	r0, r3, #29
 800fad6:	d4f7      	bmi.n	800fac8 <HAL_RCC_OscConfig+0x3c0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800fad8:	6823      	ldr	r3, [r4, #0]
 800fada:	e672      	b.n	800f7c2 <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800fadc:	0792      	lsls	r2, r2, #30
 800fade:	f47f aefc 	bne.w	800f8da <HAL_RCC_OscConfig+0x1d2>
 800fae2:	e653      	b.n	800f78c <HAL_RCC_OscConfig+0x84>
    return HAL_ERROR;
 800fae4:	2001      	movs	r0, #1
}
 800fae6:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800fae8:	4a5e      	ldr	r2, [pc, #376]	; (800fc64 <HAL_RCC_OscConfig+0x55c>)
 800faea:	6a21      	ldr	r1, [r4, #32]
 800faec:	68d3      	ldr	r3, [r2, #12]
 800faee:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800faf2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800faf6:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800faf8:	6823      	ldr	r3, [r4, #0]
 800fafa:	e664      	b.n	800f7c6 <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 800fafc:	f7fb febe 	bl	800b87c <HAL_GetTick>
 800fb00:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fb02:	e004      	b.n	800fb0e <HAL_RCC_OscConfig+0x406>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fb04:	f7fb feba 	bl	800b87c <HAL_GetTick>
 800fb08:	1b80      	subs	r0, r0, r6
 800fb0a:	2802      	cmp	r0, #2
 800fb0c:	d88e      	bhi.n	800fa2c <HAL_RCC_OscConfig+0x324>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fb0e:	682b      	ldr	r3, [r5, #0]
 800fb10:	0199      	lsls	r1, r3, #6
 800fb12:	d4f7      	bmi.n	800fb04 <HAL_RCC_OscConfig+0x3fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800fb14:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800fb16:	4b54      	ldr	r3, [pc, #336]	; (800fc68 <HAL_RCC_OscConfig+0x560>)
 800fb18:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800fb1a:	400b      	ands	r3, r1
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800fb1c:	4953      	ldr	r1, [pc, #332]	; (800fc6c <HAL_RCC_OscConfig+0x564>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800fb1e:	4e51      	ldr	r6, [pc, #324]	; (800fc64 <HAL_RCC_OscConfig+0x55c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800fb20:	4313      	orrs	r3, r2
 800fb22:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fb24:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800fb28:	62ab      	str	r3, [r5, #40]	; 0x28
 800fb2a:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800fb2e:	3b01      	subs	r3, #1
 800fb30:	3a01      	subs	r2, #1
 800fb32:	025b      	lsls	r3, r3, #9
 800fb34:	0412      	lsls	r2, r2, #16
 800fb36:	b29b      	uxth	r3, r3
 800fb38:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800fb3c:	4313      	orrs	r3, r2
 800fb3e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fb40:	3a01      	subs	r2, #1
 800fb42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fb46:	4313      	orrs	r3, r2
 800fb48:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800fb4a:	3a01      	subs	r2, #1
 800fb4c:	0612      	lsls	r2, r2, #24
 800fb4e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800fb52:	4313      	orrs	r3, r2
 800fb54:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800fb56:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800fb58:	f023 0301 	bic.w	r3, r3, #1
 800fb5c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800fb5e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800fb60:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fb62:	4011      	ands	r1, r2
 800fb64:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800fb68:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800fb6a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800fb6c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800fb6e:	f023 030c 	bic.w	r3, r3, #12
 800fb72:	4313      	orrs	r3, r2
 800fb74:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800fb76:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800fb78:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800fb7a:	f023 0302 	bic.w	r3, r3, #2
 800fb7e:	4313      	orrs	r3, r2
 800fb80:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800fb82:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800fb84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fb88:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fb8a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800fb8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fb90:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800fb92:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800fb94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800fb98:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800fb9a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800fb9c:	f043 0301 	orr.w	r3, r3, #1
 800fba0:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800fba2:	682b      	ldr	r3, [r5, #0]
 800fba4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fba8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800fbaa:	f7fb fe67 	bl	800b87c <HAL_GetTick>
 800fbae:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800fbb0:	e005      	b.n	800fbbe <HAL_RCC_OscConfig+0x4b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fbb2:	f7fb fe63 	bl	800b87c <HAL_GetTick>
 800fbb6:	1b00      	subs	r0, r0, r4
 800fbb8:	2802      	cmp	r0, #2
 800fbba:	f63f af37 	bhi.w	800fa2c <HAL_RCC_OscConfig+0x324>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800fbbe:	6833      	ldr	r3, [r6, #0]
 800fbc0:	019a      	lsls	r2, r3, #6
 800fbc2:	d5f6      	bpl.n	800fbb2 <HAL_RCC_OscConfig+0x4aa>
 800fbc4:	e651      	b.n	800f86a <HAL_RCC_OscConfig+0x162>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fbc6:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800fbc8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800fbca:	6b2d      	ldr	r5, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fbcc:	f43f ae4e 	beq.w	800f86c <HAL_RCC_OscConfig+0x164>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fbd0:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fbd4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800fbd6:	428b      	cmp	r3, r1
 800fbd8:	f47f aec6 	bne.w	800f968 <HAL_RCC_OscConfig+0x260>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800fbdc:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fbe0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fbe2:	429a      	cmp	r2, r3
 800fbe4:	f47f aec0 	bne.w	800f968 <HAL_RCC_OscConfig+0x260>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800fbe8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fbea:	f3c5 0208 	ubfx	r2, r5, #0, #9
 800fbee:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800fbf0:	429a      	cmp	r2, r3
 800fbf2:	f47f aeb9 	bne.w	800f968 <HAL_RCC_OscConfig+0x260>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800fbf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fbf8:	f3c5 2246 	ubfx	r2, r5, #9, #7
 800fbfc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800fbfe:	429a      	cmp	r2, r3
 800fc00:	f47f aeb2 	bne.w	800f968 <HAL_RCC_OscConfig+0x260>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800fc04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fc06:	f3c5 4206 	ubfx	r2, r5, #16, #7
 800fc0a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800fc0c:	429a      	cmp	r2, r3
 800fc0e:	f47f aeab 	bne.w	800f968 <HAL_RCC_OscConfig+0x260>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800fc12:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800fc14:	f3c5 6506 	ubfx	r5, r5, #24, #7
 800fc18:	3801      	subs	r0, #1
    return HAL_ERROR;
 800fc1a:	1a28      	subs	r0, r5, r0
 800fc1c:	bf18      	it	ne
 800fc1e:	2001      	movne	r0, #1
}
 800fc20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fc22:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800fc26:	601a      	str	r2, [r3, #0]
 800fc28:	681a      	ldr	r2, [r3, #0]
 800fc2a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800fc2e:	601a      	str	r2, [r3, #0]
 800fc30:	e592      	b.n	800f758 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fc32:	4a0c      	ldr	r2, [pc, #48]	; (800fc64 <HAL_RCC_OscConfig+0x55c>)
 800fc34:	6853      	ldr	r3, [r2, #4]
 800fc36:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800fc3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fc3e:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800fc40:	6823      	ldr	r3, [r4, #0]
 800fc42:	e5be      	b.n	800f7c2 <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fc44:	4d07      	ldr	r5, [pc, #28]	; (800fc64 <HAL_RCC_OscConfig+0x55c>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fc46:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fc4a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800fc4c:	f023 0301 	bic.w	r3, r3, #1
 800fc50:	672b      	str	r3, [r5, #112]	; 0x70
 800fc52:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800fc54:	f023 0304 	bic.w	r3, r3, #4
 800fc58:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800fc5a:	f7fb fe0f 	bl	800b87c <HAL_GetTick>
 800fc5e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800fc60:	e00c      	b.n	800fc7c <HAL_RCC_OscConfig+0x574>
 800fc62:	bf00      	nop
 800fc64:	58024400 	.word	0x58024400
 800fc68:	fffffc0c 	.word	0xfffffc0c
 800fc6c:	ffff0007 	.word	0xffff0007
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fc70:	f7fb fe04 	bl	800b87c <HAL_GetTick>
 800fc74:	1b80      	subs	r0, r0, r6
 800fc76:	42b8      	cmp	r0, r7
 800fc78:	f63f aed8 	bhi.w	800fa2c <HAL_RCC_OscConfig+0x324>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800fc7c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800fc7e:	0798      	lsls	r0, r3, #30
 800fc80:	d4f6      	bmi.n	800fc70 <HAL_RCC_OscConfig+0x568>
 800fc82:	e5d5      	b.n	800f830 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800fc84:	68eb      	ldr	r3, [r5, #12]
 800fc86:	6a22      	ldr	r2, [r4, #32]
 800fc88:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800fc8c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fc90:	60eb      	str	r3, [r5, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fc92:	6823      	ldr	r3, [r4, #0]
 800fc94:	e597      	b.n	800f7c6 <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fc96:	686b      	ldr	r3, [r5, #4]
 800fc98:	6922      	ldr	r2, [r4, #16]
 800fc9a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800fc9e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fca2:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800fca4:	6823      	ldr	r3, [r4, #0]
 800fca6:	e58c      	b.n	800f7c2 <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fca8:	4a0b      	ldr	r2, [pc, #44]	; (800fcd8 <HAL_RCC_OscConfig+0x5d0>)
 800fcaa:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800fcac:	f043 0301 	orr.w	r3, r3, #1
 800fcb0:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800fcb2:	e692      	b.n	800f9da <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800fcb4:	4a08      	ldr	r2, [pc, #32]	; (800fcd8 <HAL_RCC_OscConfig+0x5d0>)
 800fcb6:	6853      	ldr	r3, [r2, #4]
 800fcb8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800fcbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fcc0:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fcc2:	6823      	ldr	r3, [r4, #0]
 800fcc4:	e57f      	b.n	800f7c6 <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fcc6:	f042 0204 	orr.w	r2, r2, #4
 800fcca:	671a      	str	r2, [r3, #112]	; 0x70
 800fccc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800fcce:	f042 0201 	orr.w	r2, r2, #1
 800fcd2:	671a      	str	r2, [r3, #112]	; 0x70
 800fcd4:	e681      	b.n	800f9da <HAL_RCC_OscConfig+0x2d2>
 800fcd6:	bf00      	nop
 800fcd8:	58024400 	.word	0x58024400

0800fcdc <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fcdc:	4a48      	ldr	r2, [pc, #288]	; (800fe00 <HAL_RCC_GetSysClockFreq+0x124>)
 800fcde:	6913      	ldr	r3, [r2, #16]
 800fce0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fce4:	2b10      	cmp	r3, #16
 800fce6:	d004      	beq.n	800fcf2 <HAL_RCC_GetSysClockFreq+0x16>
 800fce8:	2b18      	cmp	r3, #24
 800fcea:	d00d      	beq.n	800fd08 <HAL_RCC_GetSysClockFreq+0x2c>
 800fcec:	b11b      	cbz	r3, 800fcf6 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 800fcee:	4845      	ldr	r0, [pc, #276]	; (800fe04 <HAL_RCC_GetSysClockFreq+0x128>)
 800fcf0:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fcf2:	4845      	ldr	r0, [pc, #276]	; (800fe08 <HAL_RCC_GetSysClockFreq+0x12c>)
 800fcf4:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fcf6:	6813      	ldr	r3, [r2, #0]
 800fcf8:	0699      	lsls	r1, r3, #26
 800fcfa:	d54a      	bpl.n	800fd92 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fcfc:	6813      	ldr	r3, [r2, #0]
 800fcfe:	4843      	ldr	r0, [pc, #268]	; (800fe0c <HAL_RCC_GetSysClockFreq+0x130>)
 800fd00:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800fd04:	40d8      	lsrs	r0, r3
 800fd06:	4770      	bx	lr
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fd08:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 800fd0a:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800fd0c:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800fd0e:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    if (pllm != 0U)
 800fd10:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800fd14:	6b51      	ldr	r1, [r2, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800fd16:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 800fd1a:	d038      	beq.n	800fd8e <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800fd1c:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800fd20:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fd24:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800fd28:	fb05 f101 	mul.w	r1, r5, r1
 800fd2c:	2b01      	cmp	r3, #1
 800fd2e:	ee07 1a90 	vmov	s15, r1
 800fd32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      switch (pllsource)
 800fd36:	d002      	beq.n	800fd3e <HAL_RCC_GetSysClockFreq+0x62>
 800fd38:	2b02      	cmp	r3, #2
 800fd3a:	d02c      	beq.n	800fd96 <HAL_RCC_GetSysClockFreq+0xba>
 800fd3c:	b393      	cbz	r3, 800fda4 <HAL_RCC_GetSysClockFreq+0xc8>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fd3e:	ee07 0a90 	vmov	s15, r0
 800fd42:	ed9f 5a33 	vldr	s10, [pc, #204]	; 800fe10 <HAL_RCC_GetSysClockFreq+0x134>
 800fd46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd4a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800fd4c:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800fd50:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800fe14 <HAL_RCC_GetSysClockFreq+0x138>
 800fd54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd58:	ee07 3a90 	vmov	s15, r3
 800fd5c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800fd60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd64:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800fd68:	eee7 7a06 	vfma.f32	s15, s14, s12
 800fd6c:	ee66 6aa7 	vmul.f32	s13, s13, s15
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800fd70:	4b23      	ldr	r3, [pc, #140]	; (800fe00 <HAL_RCC_GetSysClockFreq+0x124>)
 800fd72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd74:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800fd78:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800fd7a:	ee07 3a90 	vmov	s15, r3
 800fd7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fd82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fd86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fd8a:	ee17 0a90 	vmov	r0, s15
}
 800fd8e:	bc30      	pop	{r4, r5}
 800fd90:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800fd92:	481e      	ldr	r0, [pc, #120]	; (800fe0c <HAL_RCC_GetSysClockFreq+0x130>)
}
 800fd94:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fd96:	ee07 0a90 	vmov	s15, r0
 800fd9a:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 800fe18 <HAL_RCC_GetSysClockFreq+0x13c>
 800fd9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fda2:	e7d2      	b.n	800fd4a <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fda4:	6813      	ldr	r3, [r2, #0]
 800fda6:	069b      	lsls	r3, r3, #26
 800fda8:	d522      	bpl.n	800fdf0 <HAL_RCC_GetSysClockFreq+0x114>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fdaa:	6814      	ldr	r4, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fdac:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fdb0:	4916      	ldr	r1, [pc, #88]	; (800fe0c <HAL_RCC_GetSysClockFreq+0x130>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fdb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fdb6:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fdb8:	f3c4 04c1 	ubfx	r4, r4, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fdbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fdc0:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800fe14 <HAL_RCC_GetSysClockFreq+0x138>
 800fdc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fdc8:	40e1      	lsrs	r1, r4
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fdca:	ee06 3a10 	vmov	s12, r3
 800fdce:	ee05 1a90 	vmov	s11, r1
 800fdd2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800fdd6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800fdda:	ee36 6a26 	vadd.f32	s12, s12, s13
 800fdde:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800fde2:	eef0 7a46 	vmov.f32	s15, s12
 800fde6:	eee7 7a05 	vfma.f32	s15, s14, s10
 800fdea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800fdee:	e7bf      	b.n	800fd70 <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fdf0:	ee07 0a90 	vmov	s15, r0
 800fdf4:	ed9f 5a09 	vldr	s10, [pc, #36]	; 800fe1c <HAL_RCC_GetSysClockFreq+0x140>
 800fdf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fdfc:	e7a5      	b.n	800fd4a <HAL_RCC_GetSysClockFreq+0x6e>
 800fdfe:	bf00      	nop
 800fe00:	58024400 	.word	0x58024400
 800fe04:	003d0900 	.word	0x003d0900
 800fe08:	017d7840 	.word	0x017d7840
 800fe0c:	03d09000 	.word	0x03d09000
 800fe10:	4a742400 	.word	0x4a742400
 800fe14:	39000000 	.word	0x39000000
 800fe18:	4bbebc20 	.word	0x4bbebc20
 800fe1c:	4c742400 	.word	0x4c742400

0800fe20 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800fe20:	2800      	cmp	r0, #0
 800fe22:	f000 810c 	beq.w	801003e <HAL_RCC_ClockConfig+0x21e>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800fe26:	4a8c      	ldr	r2, [pc, #560]	; (8010058 <HAL_RCC_ClockConfig+0x238>)
 800fe28:	6813      	ldr	r3, [r2, #0]
 800fe2a:	f003 030f 	and.w	r3, r3, #15
 800fe2e:	428b      	cmp	r3, r1
{
 800fe30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe34:	4604      	mov	r4, r0
 800fe36:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800fe38:	d20c      	bcs.n	800fe54 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fe3a:	6813      	ldr	r3, [r2, #0]
 800fe3c:	f023 030f 	bic.w	r3, r3, #15
 800fe40:	430b      	orrs	r3, r1
 800fe42:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fe44:	6813      	ldr	r3, [r2, #0]
 800fe46:	f003 030f 	and.w	r3, r3, #15
 800fe4a:	428b      	cmp	r3, r1
 800fe4c:	d002      	beq.n	800fe54 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800fe4e:	2001      	movs	r0, #1
}
 800fe50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800fe54:	6823      	ldr	r3, [r4, #0]
 800fe56:	075f      	lsls	r7, r3, #29
 800fe58:	d50b      	bpl.n	800fe72 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800fe5a:	4980      	ldr	r1, [pc, #512]	; (801005c <HAL_RCC_ClockConfig+0x23c>)
 800fe5c:	6920      	ldr	r0, [r4, #16]
 800fe5e:	698a      	ldr	r2, [r1, #24]
 800fe60:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800fe64:	4290      	cmp	r0, r2
 800fe66:	d904      	bls.n	800fe72 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800fe68:	698a      	ldr	r2, [r1, #24]
 800fe6a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800fe6e:	4302      	orrs	r2, r0
 800fe70:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fe72:	071e      	lsls	r6, r3, #28
 800fe74:	d50b      	bpl.n	800fe8e <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800fe76:	4979      	ldr	r1, [pc, #484]	; (801005c <HAL_RCC_ClockConfig+0x23c>)
 800fe78:	6960      	ldr	r0, [r4, #20]
 800fe7a:	69ca      	ldr	r2, [r1, #28]
 800fe7c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800fe80:	4290      	cmp	r0, r2
 800fe82:	d904      	bls.n	800fe8e <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800fe84:	69ca      	ldr	r2, [r1, #28]
 800fe86:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800fe8a:	4302      	orrs	r2, r0
 800fe8c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fe8e:	06d8      	lsls	r0, r3, #27
 800fe90:	d50b      	bpl.n	800feaa <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800fe92:	4972      	ldr	r1, [pc, #456]	; (801005c <HAL_RCC_ClockConfig+0x23c>)
 800fe94:	69a0      	ldr	r0, [r4, #24]
 800fe96:	69ca      	ldr	r2, [r1, #28]
 800fe98:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800fe9c:	4290      	cmp	r0, r2
 800fe9e:	d904      	bls.n	800feaa <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800fea0:	69ca      	ldr	r2, [r1, #28]
 800fea2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800fea6:	4302      	orrs	r2, r0
 800fea8:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800feaa:	0699      	lsls	r1, r3, #26
 800feac:	d50b      	bpl.n	800fec6 <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800feae:	496b      	ldr	r1, [pc, #428]	; (801005c <HAL_RCC_ClockConfig+0x23c>)
 800feb0:	69e0      	ldr	r0, [r4, #28]
 800feb2:	6a0a      	ldr	r2, [r1, #32]
 800feb4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800feb8:	4290      	cmp	r0, r2
 800feba:	d904      	bls.n	800fec6 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800febc:	6a0a      	ldr	r2, [r1, #32]
 800febe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800fec2:	4302      	orrs	r2, r0
 800fec4:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fec6:	079a      	lsls	r2, r3, #30
 800fec8:	f140 80ab 	bpl.w	8010022 <HAL_RCC_ClockConfig+0x202>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800fecc:	4863      	ldr	r0, [pc, #396]	; (801005c <HAL_RCC_ClockConfig+0x23c>)
 800fece:	68e1      	ldr	r1, [r4, #12]
 800fed0:	6982      	ldr	r2, [r0, #24]
 800fed2:	f002 020f 	and.w	r2, r2, #15
 800fed6:	4291      	cmp	r1, r2
 800fed8:	d904      	bls.n	800fee4 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800feda:	6982      	ldr	r2, [r0, #24]
 800fedc:	f022 020f 	bic.w	r2, r2, #15
 800fee0:	430a      	orrs	r2, r1
 800fee2:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fee4:	07d8      	lsls	r0, r3, #31
 800fee6:	d530      	bpl.n	800ff4a <HAL_RCC_ClockConfig+0x12a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800fee8:	4a5c      	ldr	r2, [pc, #368]	; (801005c <HAL_RCC_ClockConfig+0x23c>)
 800feea:	68a1      	ldr	r1, [r4, #8]
 800feec:	6993      	ldr	r3, [r2, #24]
 800feee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800fef2:	430b      	orrs	r3, r1
 800fef4:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fef6:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800fef8:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fefa:	2902      	cmp	r1, #2
 800fefc:	f000 80a1 	beq.w	8010042 <HAL_RCC_ClockConfig+0x222>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ff00:	2903      	cmp	r1, #3
 800ff02:	f000 8098 	beq.w	8010036 <HAL_RCC_ClockConfig+0x216>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ff06:	2901      	cmp	r1, #1
 800ff08:	f000 80a1 	beq.w	801004e <HAL_RCC_ClockConfig+0x22e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ff0c:	0758      	lsls	r0, r3, #29
 800ff0e:	d59e      	bpl.n	800fe4e <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ff10:	4e52      	ldr	r6, [pc, #328]	; (801005c <HAL_RCC_ClockConfig+0x23c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ff12:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ff16:	6933      	ldr	r3, [r6, #16]
 800ff18:	f023 0307 	bic.w	r3, r3, #7
 800ff1c:	430b      	orrs	r3, r1
 800ff1e:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 800ff20:	f7fb fcac 	bl	800b87c <HAL_GetTick>
 800ff24:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ff26:	e005      	b.n	800ff34 <HAL_RCC_ClockConfig+0x114>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ff28:	f7fb fca8 	bl	800b87c <HAL_GetTick>
 800ff2c:	1bc0      	subs	r0, r0, r7
 800ff2e:	4540      	cmp	r0, r8
 800ff30:	f200 808b 	bhi.w	801004a <HAL_RCC_ClockConfig+0x22a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ff34:	6933      	ldr	r3, [r6, #16]
 800ff36:	6862      	ldr	r2, [r4, #4]
 800ff38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ff3c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800ff40:	d1f2      	bne.n	800ff28 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ff42:	6823      	ldr	r3, [r4, #0]
 800ff44:	0799      	lsls	r1, r3, #30
 800ff46:	d506      	bpl.n	800ff56 <HAL_RCC_ClockConfig+0x136>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ff48:	68e1      	ldr	r1, [r4, #12]
 800ff4a:	4844      	ldr	r0, [pc, #272]	; (801005c <HAL_RCC_ClockConfig+0x23c>)
 800ff4c:	6982      	ldr	r2, [r0, #24]
 800ff4e:	f002 020f 	and.w	r2, r2, #15
 800ff52:	428a      	cmp	r2, r1
 800ff54:	d869      	bhi.n	801002a <HAL_RCC_ClockConfig+0x20a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ff56:	4940      	ldr	r1, [pc, #256]	; (8010058 <HAL_RCC_ClockConfig+0x238>)
 800ff58:	680a      	ldr	r2, [r1, #0]
 800ff5a:	f002 020f 	and.w	r2, r2, #15
 800ff5e:	42aa      	cmp	r2, r5
 800ff60:	d90a      	bls.n	800ff78 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ff62:	680a      	ldr	r2, [r1, #0]
 800ff64:	f022 020f 	bic.w	r2, r2, #15
 800ff68:	432a      	orrs	r2, r5
 800ff6a:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ff6c:	680a      	ldr	r2, [r1, #0]
 800ff6e:	f002 020f 	and.w	r2, r2, #15
 800ff72:	42aa      	cmp	r2, r5
 800ff74:	f47f af6b 	bne.w	800fe4e <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ff78:	075a      	lsls	r2, r3, #29
 800ff7a:	d50b      	bpl.n	800ff94 <HAL_RCC_ClockConfig+0x174>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ff7c:	4937      	ldr	r1, [pc, #220]	; (801005c <HAL_RCC_ClockConfig+0x23c>)
 800ff7e:	6920      	ldr	r0, [r4, #16]
 800ff80:	698a      	ldr	r2, [r1, #24]
 800ff82:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800ff86:	4290      	cmp	r0, r2
 800ff88:	d204      	bcs.n	800ff94 <HAL_RCC_ClockConfig+0x174>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ff8a:	698a      	ldr	r2, [r1, #24]
 800ff8c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ff90:	4302      	orrs	r2, r0
 800ff92:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ff94:	071f      	lsls	r7, r3, #28
 800ff96:	d50b      	bpl.n	800ffb0 <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ff98:	4930      	ldr	r1, [pc, #192]	; (801005c <HAL_RCC_ClockConfig+0x23c>)
 800ff9a:	6960      	ldr	r0, [r4, #20]
 800ff9c:	69ca      	ldr	r2, [r1, #28]
 800ff9e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800ffa2:	4290      	cmp	r0, r2
 800ffa4:	d204      	bcs.n	800ffb0 <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ffa6:	69ca      	ldr	r2, [r1, #28]
 800ffa8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ffac:	4302      	orrs	r2, r0
 800ffae:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ffb0:	06de      	lsls	r6, r3, #27
 800ffb2:	d50b      	bpl.n	800ffcc <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ffb4:	4929      	ldr	r1, [pc, #164]	; (801005c <HAL_RCC_ClockConfig+0x23c>)
 800ffb6:	69a0      	ldr	r0, [r4, #24]
 800ffb8:	69ca      	ldr	r2, [r1, #28]
 800ffba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800ffbe:	4290      	cmp	r0, r2
 800ffc0:	d204      	bcs.n	800ffcc <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ffc2:	69ca      	ldr	r2, [r1, #28]
 800ffc4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ffc8:	4302      	orrs	r2, r0
 800ffca:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ffcc:	069d      	lsls	r5, r3, #26
 800ffce:	d50b      	bpl.n	800ffe8 <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ffd0:	4a22      	ldr	r2, [pc, #136]	; (801005c <HAL_RCC_ClockConfig+0x23c>)
 800ffd2:	69e1      	ldr	r1, [r4, #28]
 800ffd4:	6a13      	ldr	r3, [r2, #32]
 800ffd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ffda:	4299      	cmp	r1, r3
 800ffdc:	d204      	bcs.n	800ffe8 <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800ffde:	6a13      	ldr	r3, [r2, #32]
 800ffe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ffe4:	430b      	orrs	r3, r1
 800ffe6:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ffe8:	f7ff fe78 	bl	800fcdc <HAL_RCC_GetSysClockFreq>
 800ffec:	4a1b      	ldr	r2, [pc, #108]	; (801005c <HAL_RCC_ClockConfig+0x23c>)
 800ffee:	4603      	mov	r3, r0
 800fff0:	481b      	ldr	r0, [pc, #108]	; (8010060 <HAL_RCC_ClockConfig+0x240>)
 800fff2:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fff4:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800fff6:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800fffa:	4d1a      	ldr	r5, [pc, #104]	; (8010064 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fffc:	f002 020f 	and.w	r2, r2, #15
 8010000:	4c19      	ldr	r4, [pc, #100]	; (8010068 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8010002:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010004:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8010006:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 801000a:	4818      	ldr	r0, [pc, #96]	; (801006c <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801000c:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8010010:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick (uwTickPrio);
 8010012:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8010014:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010016:	40d3      	lsrs	r3, r2
 8010018:	6023      	str	r3, [r4, #0]
}
 801001a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 801001e:	f7fb bbcb 	b.w	800b7b8 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010022:	07da      	lsls	r2, r3, #31
 8010024:	f53f af60 	bmi.w	800fee8 <HAL_RCC_ClockConfig+0xc8>
 8010028:	e795      	b.n	800ff56 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801002a:	6982      	ldr	r2, [r0, #24]
 801002c:	f022 020f 	bic.w	r2, r2, #15
 8010030:	430a      	orrs	r2, r1
 8010032:	6182      	str	r2, [r0, #24]
 8010034:	e78f      	b.n	800ff56 <HAL_RCC_ClockConfig+0x136>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010036:	019f      	lsls	r7, r3, #6
 8010038:	f53f af6a 	bmi.w	800ff10 <HAL_RCC_ClockConfig+0xf0>
 801003c:	e707      	b.n	800fe4e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 801003e:	2001      	movs	r0, #1
}
 8010040:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010042:	039b      	lsls	r3, r3, #14
 8010044:	f53f af64 	bmi.w	800ff10 <HAL_RCC_ClockConfig+0xf0>
 8010048:	e701      	b.n	800fe4e <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 801004a:	2003      	movs	r0, #3
 801004c:	e700      	b.n	800fe50 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801004e:	05de      	lsls	r6, r3, #23
 8010050:	f53f af5e 	bmi.w	800ff10 <HAL_RCC_ClockConfig+0xf0>
 8010054:	e6fb      	b.n	800fe4e <HAL_RCC_ClockConfig+0x2e>
 8010056:	bf00      	nop
 8010058:	52002000 	.word	0x52002000
 801005c:	58024400 	.word	0x58024400
 8010060:	08098978 	.word	0x08098978
 8010064:	20007634 	.word	0x20007634
 8010068:	20007638 	.word	0x20007638
 801006c:	20007714 	.word	0x20007714

08010070 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010070:	4a18      	ldr	r2, [pc, #96]	; (80100d4 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010072:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010074:	6913      	ldr	r3, [r2, #16]
 8010076:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801007a:	2b10      	cmp	r3, #16
 801007c:	d01a      	beq.n	80100b4 <HAL_RCC_GetHCLKFreq+0x44>
 801007e:	2b18      	cmp	r3, #24
 8010080:	d023      	beq.n	80100ca <HAL_RCC_GetHCLKFreq+0x5a>
 8010082:	b1cb      	cbz	r3, 80100b8 <HAL_RCC_GetHCLKFreq+0x48>
    sysclockfreq = CSI_VALUE;
 8010084:	4814      	ldr	r0, [pc, #80]	; (80100d8 <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8010086:	4b13      	ldr	r3, [pc, #76]	; (80100d4 <HAL_RCC_GetHCLKFreq+0x64>)
 8010088:	4914      	ldr	r1, [pc, #80]	; (80100dc <HAL_RCC_GetHCLKFreq+0x6c>)
 801008a:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801008c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801008e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010092:	4c13      	ldr	r4, [pc, #76]	; (80100e0 <HAL_RCC_GetHCLKFreq+0x70>)
 8010094:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8010098:	4d12      	ldr	r5, [pc, #72]	; (80100e4 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801009a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801009c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801009e:	f002 021f 	and.w	r2, r2, #31
 80100a2:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80100a6:	f003 001f 	and.w	r0, r3, #31
 80100aa:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 80100ae:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80100b0:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80100b2:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80100b4:	480c      	ldr	r0, [pc, #48]	; (80100e8 <HAL_RCC_GetHCLKFreq+0x78>)
 80100b6:	e7e6      	b.n	8010086 <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80100b8:	6813      	ldr	r3, [r2, #0]
 80100ba:	069b      	lsls	r3, r3, #26
 80100bc:	d508      	bpl.n	80100d0 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80100be:	6813      	ldr	r3, [r2, #0]
 80100c0:	480a      	ldr	r0, [pc, #40]	; (80100ec <HAL_RCC_GetHCLKFreq+0x7c>)
 80100c2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80100c6:	40d8      	lsrs	r0, r3
 80100c8:	e7dd      	b.n	8010086 <HAL_RCC_GetHCLKFreq+0x16>
 80100ca:	f7ff fa97 	bl	800f5fc <HAL_RCC_GetSysClockFreq.part.0>
 80100ce:	e7da      	b.n	8010086 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80100d0:	4806      	ldr	r0, [pc, #24]	; (80100ec <HAL_RCC_GetHCLKFreq+0x7c>)
 80100d2:	e7d8      	b.n	8010086 <HAL_RCC_GetHCLKFreq+0x16>
 80100d4:	58024400 	.word	0x58024400
 80100d8:	003d0900 	.word	0x003d0900
 80100dc:	08098978 	.word	0x08098978
 80100e0:	20007638 	.word	0x20007638
 80100e4:	20007634 	.word	0x20007634
 80100e8:	017d7840 	.word	0x017d7840
 80100ec:	03d09000 	.word	0x03d09000

080100f0 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80100f0:	4a1c      	ldr	r2, [pc, #112]	; (8010164 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80100f2:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80100f4:	6913      	ldr	r3, [r2, #16]
 80100f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80100fa:	2b10      	cmp	r3, #16
 80100fc:	d021      	beq.n	8010142 <HAL_RCC_GetPCLK1Freq+0x52>
 80100fe:	2b18      	cmp	r3, #24
 8010100:	d02a      	beq.n	8010158 <HAL_RCC_GetPCLK1Freq+0x68>
 8010102:	b303      	cbz	r3, 8010146 <HAL_RCC_GetPCLK1Freq+0x56>
    sysclockfreq = CSI_VALUE;
 8010104:	4818      	ldr	r0, [pc, #96]	; (8010168 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8010106:	4a17      	ldr	r2, [pc, #92]	; (8010164 <HAL_RCC_GetPCLK1Freq+0x74>)
 8010108:	4918      	ldr	r1, [pc, #96]	; (801016c <HAL_RCC_GetPCLK1Freq+0x7c>)
 801010a:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801010c:	4c18      	ldr	r4, [pc, #96]	; (8010170 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801010e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 8010112:	4d18      	ldr	r5, [pc, #96]	; (8010174 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8010114:	5ccb      	ldrb	r3, [r1, r3]
 8010116:	f003 031f 	and.w	r3, r3, #31
 801011a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801011c:	6993      	ldr	r3, [r2, #24]
 801011e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
 8010122:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010124:	5ccb      	ldrb	r3, [r1, r3]
 8010126:	f003 031f 	and.w	r3, r3, #31
 801012a:	fa20 f303 	lsr.w	r3, r0, r3
 801012e:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8010130:	69d2      	ldr	r2, [r2, #28]
 8010132:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8010136:	5c88      	ldrb	r0, [r1, r2]
 8010138:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801013c:	fa23 f000 	lsr.w	r0, r3, r0
 8010140:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010142:	480d      	ldr	r0, [pc, #52]	; (8010178 <HAL_RCC_GetPCLK1Freq+0x88>)
 8010144:	e7df      	b.n	8010106 <HAL_RCC_GetPCLK1Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010146:	6813      	ldr	r3, [r2, #0]
 8010148:	069b      	lsls	r3, r3, #26
 801014a:	d508      	bpl.n	801015e <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801014c:	6813      	ldr	r3, [r2, #0]
 801014e:	480b      	ldr	r0, [pc, #44]	; (801017c <HAL_RCC_GetPCLK1Freq+0x8c>)
 8010150:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8010154:	40d8      	lsrs	r0, r3
 8010156:	e7d6      	b.n	8010106 <HAL_RCC_GetPCLK1Freq+0x16>
 8010158:	f7ff fa50 	bl	800f5fc <HAL_RCC_GetSysClockFreq.part.0>
 801015c:	e7d3      	b.n	8010106 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801015e:	4807      	ldr	r0, [pc, #28]	; (801017c <HAL_RCC_GetPCLK1Freq+0x8c>)
 8010160:	e7d1      	b.n	8010106 <HAL_RCC_GetPCLK1Freq+0x16>
 8010162:	bf00      	nop
 8010164:	58024400 	.word	0x58024400
 8010168:	003d0900 	.word	0x003d0900
 801016c:	08098978 	.word	0x08098978
 8010170:	20007638 	.word	0x20007638
 8010174:	20007634 	.word	0x20007634
 8010178:	017d7840 	.word	0x017d7840
 801017c:	03d09000 	.word	0x03d09000

08010180 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010180:	4a1c      	ldr	r2, [pc, #112]	; (80101f4 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010182:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010184:	6913      	ldr	r3, [r2, #16]
 8010186:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801018a:	2b10      	cmp	r3, #16
 801018c:	d021      	beq.n	80101d2 <HAL_RCC_GetPCLK2Freq+0x52>
 801018e:	2b18      	cmp	r3, #24
 8010190:	d02a      	beq.n	80101e8 <HAL_RCC_GetPCLK2Freq+0x68>
 8010192:	b303      	cbz	r3, 80101d6 <HAL_RCC_GetPCLK2Freq+0x56>
    sysclockfreq = CSI_VALUE;
 8010194:	4818      	ldr	r0, [pc, #96]	; (80101f8 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8010196:	4a17      	ldr	r2, [pc, #92]	; (80101f4 <HAL_RCC_GetPCLK2Freq+0x74>)
 8010198:	4918      	ldr	r1, [pc, #96]	; (80101fc <HAL_RCC_GetPCLK2Freq+0x7c>)
 801019a:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801019c:	4c18      	ldr	r4, [pc, #96]	; (8010200 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801019e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 80101a2:	4d18      	ldr	r5, [pc, #96]	; (8010204 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80101a4:	5ccb      	ldrb	r3, [r1, r3]
 80101a6:	f003 031f 	and.w	r3, r3, #31
 80101aa:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80101ac:	6993      	ldr	r3, [r2, #24]
 80101ae:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
 80101b2:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80101b4:	5ccb      	ldrb	r3, [r1, r3]
 80101b6:	f003 031f 	and.w	r3, r3, #31
 80101ba:	fa20 f303 	lsr.w	r3, r0, r3
 80101be:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80101c0:	69d2      	ldr	r2, [r2, #28]
 80101c2:	f3c2 2202 	ubfx	r2, r2, #8, #3
 80101c6:	5c88      	ldrb	r0, [r1, r2]
 80101c8:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80101cc:	fa23 f000 	lsr.w	r0, r3, r0
 80101d0:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80101d2:	480d      	ldr	r0, [pc, #52]	; (8010208 <HAL_RCC_GetPCLK2Freq+0x88>)
 80101d4:	e7df      	b.n	8010196 <HAL_RCC_GetPCLK2Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80101d6:	6813      	ldr	r3, [r2, #0]
 80101d8:	069b      	lsls	r3, r3, #26
 80101da:	d508      	bpl.n	80101ee <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80101dc:	6813      	ldr	r3, [r2, #0]
 80101de:	480b      	ldr	r0, [pc, #44]	; (801020c <HAL_RCC_GetPCLK2Freq+0x8c>)
 80101e0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80101e4:	40d8      	lsrs	r0, r3
 80101e6:	e7d6      	b.n	8010196 <HAL_RCC_GetPCLK2Freq+0x16>
 80101e8:	f7ff fa08 	bl	800f5fc <HAL_RCC_GetSysClockFreq.part.0>
 80101ec:	e7d3      	b.n	8010196 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80101ee:	4807      	ldr	r0, [pc, #28]	; (801020c <HAL_RCC_GetPCLK2Freq+0x8c>)
 80101f0:	e7d1      	b.n	8010196 <HAL_RCC_GetPCLK2Freq+0x16>
 80101f2:	bf00      	nop
 80101f4:	58024400 	.word	0x58024400
 80101f8:	003d0900 	.word	0x003d0900
 80101fc:	08098978 	.word	0x08098978
 8010200:	20007638 	.word	0x20007638
 8010204:	20007634 	.word	0x20007634
 8010208:	017d7840 	.word	0x017d7840
 801020c:	03d09000 	.word	0x03d09000

08010210 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8010210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010212:	4c3a      	ldr	r4, [pc, #232]	; (80102fc <RCCEx_PLL2_Config+0xec>)
 8010214:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010216:	f003 0303 	and.w	r3, r3, #3
 801021a:	2b03      	cmp	r3, #3
 801021c:	d067      	beq.n	80102ee <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801021e:	6823      	ldr	r3, [r4, #0]
 8010220:	4606      	mov	r6, r0
 8010222:	460f      	mov	r7, r1
 8010224:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010228:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801022a:	f7fb fb27 	bl	800b87c <HAL_GetTick>
 801022e:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010230:	e004      	b.n	801023c <RCCEx_PLL2_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8010232:	f7fb fb23 	bl	800b87c <HAL_GetTick>
 8010236:	1b43      	subs	r3, r0, r5
 8010238:	2b02      	cmp	r3, #2
 801023a:	d856      	bhi.n	80102ea <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801023c:	6823      	ldr	r3, [r4, #0]
 801023e:	011a      	lsls	r2, r3, #4
 8010240:	d4f7      	bmi.n	8010232 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8010242:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010244:	6832      	ldr	r2, [r6, #0]
 8010246:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 801024a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 801024e:	62a3      	str	r3, [r4, #40]	; 0x28
 8010250:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8010254:	3b01      	subs	r3, #1
 8010256:	3a01      	subs	r2, #1
 8010258:	025b      	lsls	r3, r3, #9
 801025a:	0412      	lsls	r2, r2, #16
 801025c:	b29b      	uxth	r3, r3
 801025e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8010262:	4313      	orrs	r3, r2
 8010264:	6872      	ldr	r2, [r6, #4]
 8010266:	3a01      	subs	r2, #1
 8010268:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801026c:	4313      	orrs	r3, r2
 801026e:	6932      	ldr	r2, [r6, #16]
 8010270:	3a01      	subs	r2, #1
 8010272:	0612      	lsls	r2, r2, #24
 8010274:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8010278:	4313      	orrs	r3, r2
 801027a:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801027c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801027e:	6972      	ldr	r2, [r6, #20]
 8010280:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010284:	4313      	orrs	r3, r2
 8010286:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8010288:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801028a:	69b3      	ldr	r3, [r6, #24]
 801028c:	f022 0220 	bic.w	r2, r2, #32
 8010290:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8010292:	4b1b      	ldr	r3, [pc, #108]	; (8010300 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8010294:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8010296:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010298:	f022 0210 	bic.w	r2, r2, #16
 801029c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801029e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80102a0:	69f2      	ldr	r2, [r6, #28]
 80102a2:	400b      	ands	r3, r1
 80102a4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80102a8:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80102aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80102ac:	f043 0310 	orr.w	r3, r3, #16
 80102b0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80102b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80102b4:	b1ef      	cbz	r7, 80102f2 <RCCEx_PLL2_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80102b6:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80102b8:	bf0c      	ite	eq
 80102ba:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80102be:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 80102c2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80102c4:	4c0d      	ldr	r4, [pc, #52]	; (80102fc <RCCEx_PLL2_Config+0xec>)
 80102c6:	6823      	ldr	r3, [r4, #0]
 80102c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80102cc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80102ce:	f7fb fad5 	bl	800b87c <HAL_GetTick>
 80102d2:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80102d4:	e004      	b.n	80102e0 <RCCEx_PLL2_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80102d6:	f7fb fad1 	bl	800b87c <HAL_GetTick>
 80102da:	1b40      	subs	r0, r0, r5
 80102dc:	2802      	cmp	r0, #2
 80102de:	d804      	bhi.n	80102ea <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80102e0:	6823      	ldr	r3, [r4, #0]
 80102e2:	011b      	lsls	r3, r3, #4
 80102e4:	d5f7      	bpl.n	80102d6 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 80102e6:	2000      	movs	r0, #0
}
 80102e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80102ea:	2003      	movs	r0, #3
}
 80102ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80102ee:	2001      	movs	r0, #1
}
 80102f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80102f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80102f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80102f8:	e7e4      	b.n	80102c4 <RCCEx_PLL2_Config+0xb4>
 80102fa:	bf00      	nop
 80102fc:	58024400 	.word	0x58024400
 8010300:	ffff0007 	.word	0xffff0007

08010304 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8010304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010306:	4c3a      	ldr	r4, [pc, #232]	; (80103f0 <RCCEx_PLL3_Config+0xec>)
 8010308:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801030a:	f003 0303 	and.w	r3, r3, #3
 801030e:	2b03      	cmp	r3, #3
 8010310:	d067      	beq.n	80103e2 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8010312:	6823      	ldr	r3, [r4, #0]
 8010314:	4606      	mov	r6, r0
 8010316:	460f      	mov	r7, r1
 8010318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801031c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801031e:	f7fb faad 	bl	800b87c <HAL_GetTick>
 8010322:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010324:	e004      	b.n	8010330 <RCCEx_PLL3_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8010326:	f7fb faa9 	bl	800b87c <HAL_GetTick>
 801032a:	1b43      	subs	r3, r0, r5
 801032c:	2b02      	cmp	r3, #2
 801032e:	d856      	bhi.n	80103de <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010330:	6823      	ldr	r3, [r4, #0]
 8010332:	009a      	lsls	r2, r3, #2
 8010334:	d4f7      	bmi.n	8010326 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8010336:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010338:	6832      	ldr	r2, [r6, #0]
 801033a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 801033e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8010342:	62a3      	str	r3, [r4, #40]	; 0x28
 8010344:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8010348:	3b01      	subs	r3, #1
 801034a:	3a01      	subs	r2, #1
 801034c:	025b      	lsls	r3, r3, #9
 801034e:	0412      	lsls	r2, r2, #16
 8010350:	b29b      	uxth	r3, r3
 8010352:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8010356:	4313      	orrs	r3, r2
 8010358:	6872      	ldr	r2, [r6, #4]
 801035a:	3a01      	subs	r2, #1
 801035c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010360:	4313      	orrs	r3, r2
 8010362:	6932      	ldr	r2, [r6, #16]
 8010364:	3a01      	subs	r2, #1
 8010366:	0612      	lsls	r2, r2, #24
 8010368:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 801036c:	4313      	orrs	r3, r2
 801036e:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8010370:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010372:	6972      	ldr	r2, [r6, #20]
 8010374:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8010378:	4313      	orrs	r3, r2
 801037a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801037c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801037e:	69b3      	ldr	r3, [r6, #24]
 8010380:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8010384:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8010386:	4b1b      	ldr	r3, [pc, #108]	; (80103f4 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8010388:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 801038a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801038c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010390:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8010392:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8010394:	69f2      	ldr	r2, [r6, #28]
 8010396:	400b      	ands	r3, r1
 8010398:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801039c:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801039e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80103a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80103a4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80103a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80103a8:	b1ef      	cbz	r7, 80103e6 <RCCEx_PLL3_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80103aa:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80103ac:	bf0c      	ite	eq
 80103ae:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80103b2:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80103b6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80103b8:	4c0d      	ldr	r4, [pc, #52]	; (80103f0 <RCCEx_PLL3_Config+0xec>)
 80103ba:	6823      	ldr	r3, [r4, #0]
 80103bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80103c0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80103c2:	f7fb fa5b 	bl	800b87c <HAL_GetTick>
 80103c6:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80103c8:	e004      	b.n	80103d4 <RCCEx_PLL3_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80103ca:	f7fb fa57 	bl	800b87c <HAL_GetTick>
 80103ce:	1b40      	subs	r0, r0, r5
 80103d0:	2802      	cmp	r0, #2
 80103d2:	d804      	bhi.n	80103de <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80103d4:	6823      	ldr	r3, [r4, #0]
 80103d6:	009b      	lsls	r3, r3, #2
 80103d8:	d5f7      	bpl.n	80103ca <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 80103da:	2000      	movs	r0, #0
}
 80103dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80103de:	2003      	movs	r0, #3
}
 80103e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80103e2:	2001      	movs	r0, #1
}
 80103e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80103e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80103ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80103ec:	e7e4      	b.n	80103b8 <RCCEx_PLL3_Config+0xb4>
 80103ee:	bf00      	nop
 80103f0:	58024400 	.word	0x58024400
 80103f4:	ffff0007 	.word	0xffff0007

080103f8 <HAL_RCCEx_PeriphCLKConfig>:
{
 80103f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80103fc:	6803      	ldr	r3, [r0, #0]
{
 80103fe:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8010400:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8010404:	d01c      	beq.n	8010440 <HAL_RCCEx_PeriphCLKConfig+0x48>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8010406:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8010408:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 801040c:	f000 84e8 	beq.w	8010de0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8010410:	d823      	bhi.n	801045a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8010412:	2a00      	cmp	r2, #0
 8010414:	f000 83f2 	beq.w	8010bfc <HAL_RCCEx_PeriphCLKConfig+0x804>
 8010418:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 801041c:	d120      	bne.n	8010460 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801041e:	2102      	movs	r1, #2
 8010420:	3004      	adds	r0, #4
 8010422:	f7ff fef5 	bl	8010210 <RCCEx_PLL2_Config>
 8010426:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8010428:	2e00      	cmp	r6, #0
 801042a:	f040 84b5 	bne.w	8010d98 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801042e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8010430:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8010432:	48a7      	ldr	r0, [pc, #668]	; (80106d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8010434:	2600      	movs	r6, #0
 8010436:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8010438:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 801043c:	430a      	orrs	r2, r1
 801043e:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8010440:	05da      	lsls	r2, r3, #23
 8010442:	d511      	bpl.n	8010468 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8010444:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8010446:	2a04      	cmp	r2, #4
 8010448:	f200 852b 	bhi.w	8010ea2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 801044c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8010450:	049d04c1 	.word	0x049d04c1
 8010454:	030804b0 	.word	0x030804b0
 8010458:	0308      	.short	0x0308
    switch(PeriphClkInit->SpdifrxClockSelection)
 801045a:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 801045e:	d0e8      	beq.n	8010432 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8010460:	05da      	lsls	r2, r3, #23
    switch(PeriphClkInit->SpdifrxClockSelection)
 8010462:	f04f 0601 	mov.w	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8010466:	d4ed      	bmi.n	8010444 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8010468:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801046a:	059f      	lsls	r7, r3, #22
 801046c:	d51b      	bpl.n	80104a6 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai23ClockSelection)
 801046e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8010470:	2a80      	cmp	r2, #128	; 0x80
 8010472:	f000 84c7 	beq.w	8010e04 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8010476:	f200 80fa 	bhi.w	801066e <HAL_RCCEx_PeriphCLKConfig+0x276>
 801047a:	2a00      	cmp	r2, #0
 801047c:	f000 83ca 	beq.w	8010c14 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 8010480:	2a40      	cmp	r2, #64	; 0x40
 8010482:	f040 80fb 	bne.w	801067c <HAL_RCCEx_PeriphCLKConfig+0x284>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010486:	2100      	movs	r1, #0
 8010488:	1d20      	adds	r0, r4, #4
 801048a:	f7ff fec1 	bl	8010210 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801048e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010490:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8010492:	2d00      	cmp	r5, #0
 8010494:	f040 8398 	bne.w	8010bc8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8010498:	498d      	ldr	r1, [pc, #564]	; (80106d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 801049a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 801049c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 801049e:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 80104a2:	4302      	orrs	r2, r0
 80104a4:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80104a6:	0558      	lsls	r0, r3, #21
 80104a8:	d51f      	bpl.n	80104ea <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4AClockSelection)
 80104aa:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 80104ae:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80104b2:	f000 849e 	beq.w	8010df2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80104b6:	f200 80e4 	bhi.w	8010682 <HAL_RCCEx_PeriphCLKConfig+0x28a>
 80104ba:	2a00      	cmp	r2, #0
 80104bc:	f000 83a4 	beq.w	8010c08 <HAL_RCCEx_PeriphCLKConfig+0x810>
 80104c0:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80104c4:	f040 80e5 	bne.w	8010692 <HAL_RCCEx_PeriphCLKConfig+0x29a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80104c8:	2100      	movs	r1, #0
 80104ca:	1d20      	adds	r0, r4, #4
 80104cc:	f7ff fea0 	bl	8010210 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80104d0:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80104d2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80104d4:	2d00      	cmp	r5, #0
 80104d6:	f040 8379 	bne.w	8010bcc <HAL_RCCEx_PeriphCLKConfig+0x7d4>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80104da:	497d      	ldr	r1, [pc, #500]	; (80106d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80104dc:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 80104e0:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80104e2:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 80104e6:	4302      	orrs	r2, r0
 80104e8:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80104ea:	0519      	lsls	r1, r3, #20
 80104ec:	d51f      	bpl.n	801052e <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->Sai4BClockSelection)
 80104ee:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 80104f2:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 80104f6:	f000 8452 	beq.w	8010d9e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 80104fa:	f200 80cd 	bhi.w	8010698 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 80104fe:	2a00      	cmp	r2, #0
 8010500:	f000 838e 	beq.w	8010c20 <HAL_RCCEx_PeriphCLKConfig+0x828>
 8010504:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8010508:	f040 80ce 	bne.w	80106a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801050c:	2100      	movs	r1, #0
 801050e:	1d20      	adds	r0, r4, #4
 8010510:	f7ff fe7e 	bl	8010210 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8010514:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010516:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8010518:	2d00      	cmp	r5, #0
 801051a:	f040 835d 	bne.w	8010bd8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801051e:	496c      	ldr	r1, [pc, #432]	; (80106d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8010520:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8010524:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8010526:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 801052a:	4302      	orrs	r2, r0
 801052c:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801052e:	019a      	lsls	r2, r3, #6
 8010530:	d518      	bpl.n	8010564 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->QspiClockSelection)
 8010532:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8010534:	2a20      	cmp	r2, #32
 8010536:	f000 83f8 	beq.w	8010d2a <HAL_RCCEx_PeriphCLKConfig+0x932>
 801053a:	f200 80b8 	bhi.w	80106ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 801053e:	b13a      	cbz	r2, 8010550 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8010540:	2a10      	cmp	r2, #16
 8010542:	f040 80b7 	bne.w	80106b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010546:	4962      	ldr	r1, [pc, #392]	; (80106d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8010548:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801054a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801054e:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8010550:	2d00      	cmp	r5, #0
 8010552:	f040 8383 	bne.w	8010c5c <HAL_RCCEx_PeriphCLKConfig+0x864>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8010556:	495e      	ldr	r1, [pc, #376]	; (80106d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8010558:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801055a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 801055c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8010560:	4302      	orrs	r2, r0
 8010562:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8010564:	04df      	lsls	r7, r3, #19
 8010566:	d51d      	bpl.n	80105a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi123ClockSelection)
 8010568:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801056a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 801056e:	f000 8427 	beq.w	8010dc0 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
 8010572:	f200 80a2 	bhi.w	80106ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8010576:	2a00      	cmp	r2, #0
 8010578:	f000 8358 	beq.w	8010c2c <HAL_RCCEx_PeriphCLKConfig+0x834>
 801057c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8010580:	f040 80a3 	bne.w	80106ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010584:	2100      	movs	r1, #0
 8010586:	1d20      	adds	r0, r4, #4
 8010588:	f7ff fe42 	bl	8010210 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801058c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801058e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8010590:	2d00      	cmp	r5, #0
 8010592:	f040 831d 	bne.w	8010bd0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8010596:	494e      	ldr	r1, [pc, #312]	; (80106d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8010598:	6e20      	ldr	r0, [r4, #96]	; 0x60
 801059a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 801059c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80105a0:	4302      	orrs	r2, r0
 80105a2:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80105a4:	0498      	lsls	r0, r3, #18
 80105a6:	d51b      	bpl.n	80105e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi45ClockSelection)
 80105a8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80105aa:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80105ae:	f000 839f 	beq.w	8010cf0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 80105b2:	f200 808f 	bhi.w	80106d4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80105b6:	b14a      	cbz	r2, 80105cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80105b8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80105bc:	f040 8094 	bne.w	80106e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80105c0:	2101      	movs	r1, #1
 80105c2:	1d20      	adds	r0, r4, #4
 80105c4:	f7ff fe24 	bl	8010210 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80105c8:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80105ca:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80105cc:	2d00      	cmp	r5, #0
 80105ce:	f040 8347 	bne.w	8010c60 <HAL_RCCEx_PeriphCLKConfig+0x868>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80105d2:	493f      	ldr	r1, [pc, #252]	; (80106d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80105d4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80105d6:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80105d8:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80105dc:	4302      	orrs	r2, r0
 80105de:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80105e0:	0459      	lsls	r1, r3, #17
 80105e2:	d51c      	bpl.n	801061e <HAL_RCCEx_PeriphCLKConfig+0x226>
    switch(PeriphClkInit->Spi6ClockSelection)
 80105e4:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80105e8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80105ec:	f000 838a 	beq.w	8010d04 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 80105f0:	d87d      	bhi.n	80106ee <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 80105f2:	b14a      	cbz	r2, 8010608 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80105f4:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80105f8:	f040 8081 	bne.w	80106fe <HAL_RCCEx_PeriphCLKConfig+0x306>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80105fc:	2101      	movs	r1, #1
 80105fe:	1d20      	adds	r0, r4, #4
 8010600:	f7ff fe06 	bl	8010210 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8010604:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010606:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8010608:	2d00      	cmp	r5, #0
 801060a:	f040 8323 	bne.w	8010c54 <HAL_RCCEx_PeriphCLKConfig+0x85c>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801060e:	4930      	ldr	r1, [pc, #192]	; (80106d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8010610:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8010614:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8010616:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 801061a:	4302      	orrs	r2, r0
 801061c:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 801061e:	015a      	lsls	r2, r3, #5
 8010620:	d509      	bpl.n	8010636 <HAL_RCCEx_PeriphCLKConfig+0x23e>
    switch(PeriphClkInit->DsiClockSelection)
 8010622:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8010624:	2a00      	cmp	r2, #0
 8010626:	f000 8267 	beq.w	8010af8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 801062a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801062e:	f000 825d 	beq.w	8010aec <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8010632:	2601      	movs	r6, #1
 8010634:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8010636:	041f      	lsls	r7, r3, #16
 8010638:	d50d      	bpl.n	8010656 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    switch(PeriphClkInit->FdcanClockSelection)
 801063a:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801063c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8010640:	f000 837c 	beq.w	8010d3c <HAL_RCCEx_PeriphCLKConfig+0x944>
 8010644:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8010648:	f000 823f 	beq.w	8010aca <HAL_RCCEx_PeriphCLKConfig+0x6d2>
 801064c:	2a00      	cmp	r2, #0
 801064e:	f000 8242 	beq.w	8010ad6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
 8010652:	2601      	movs	r6, #1
 8010654:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8010656:	01d8      	lsls	r0, r3, #7
 8010658:	d563      	bpl.n	8010722 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch(PeriphClkInit->FmcClockSelection)
 801065a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801065c:	2a03      	cmp	r2, #3
 801065e:	f200 8423 	bhi.w	8010ea8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8010662:	e8df f012 	tbh	[pc, r2, lsl #1]
 8010666:	0054      	.short	0x0054
 8010668:	0359004f 	.word	0x0359004f
 801066c:	0054      	.short	0x0054
    switch(PeriphClkInit->Sai23ClockSelection)
 801066e:	2ac0      	cmp	r2, #192	; 0xc0
 8010670:	f43f af0f 	beq.w	8010492 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8010674:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8010678:	f43f af0b 	beq.w	8010492 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 801067c:	2601      	movs	r6, #1
 801067e:	4635      	mov	r5, r6
 8010680:	e711      	b.n	80104a6 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai4AClockSelection)
 8010682:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8010686:	f43f af25 	beq.w	80104d4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 801068a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 801068e:	f43f af21 	beq.w	80104d4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8010692:	2601      	movs	r6, #1
 8010694:	4635      	mov	r5, r6
 8010696:	e728      	b.n	80104ea <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4BClockSelection)
 8010698:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 801069c:	f43f af3c 	beq.w	8010518 <HAL_RCCEx_PeriphCLKConfig+0x120>
 80106a0:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 80106a4:	f43f af38 	beq.w	8010518 <HAL_RCCEx_PeriphCLKConfig+0x120>
 80106a8:	2601      	movs	r6, #1
 80106aa:	4635      	mov	r5, r6
 80106ac:	e73f      	b.n	801052e <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->QspiClockSelection)
 80106ae:	2a30      	cmp	r2, #48	; 0x30
 80106b0:	f43f af4e 	beq.w	8010550 <HAL_RCCEx_PeriphCLKConfig+0x158>
 80106b4:	2601      	movs	r6, #1
 80106b6:	4635      	mov	r5, r6
 80106b8:	e754      	b.n	8010564 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Spi123ClockSelection)
 80106ba:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80106be:	f43f af67 	beq.w	8010590 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80106c2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80106c6:	f43f af63 	beq.w	8010590 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80106ca:	2601      	movs	r6, #1
 80106cc:	4635      	mov	r5, r6
 80106ce:	e769      	b.n	80105a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 80106d0:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi45ClockSelection)
 80106d4:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80106d8:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80106dc:	f43f af76 	beq.w	80105cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80106e0:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80106e4:	f43f af72 	beq.w	80105cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80106e8:	2601      	movs	r6, #1
 80106ea:	4635      	mov	r5, r6
 80106ec:	e778      	b.n	80105e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi6ClockSelection)
 80106ee:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80106f2:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80106f6:	d087      	beq.n	8010608 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80106f8:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80106fc:	d084      	beq.n	8010608 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80106fe:	2601      	movs	r6, #1
 8010700:	4635      	mov	r5, r6
 8010702:	e78c      	b.n	801061e <HAL_RCCEx_PeriphCLKConfig+0x226>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010704:	4938      	ldr	r1, [pc, #224]	; (80107e8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8010706:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010708:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801070c:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 801070e:	2d00      	cmp	r5, #0
 8010710:	f040 82a2 	bne.w	8010c58 <HAL_RCCEx_PeriphCLKConfig+0x860>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8010714:	4934      	ldr	r1, [pc, #208]	; (80107e8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8010716:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8010718:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 801071a:	f022 0203 	bic.w	r2, r2, #3
 801071e:	4302      	orrs	r2, r0
 8010720:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010722:	0259      	lsls	r1, r3, #9
 8010724:	f100 820f 	bmi.w	8010b46 <HAL_RCCEx_PeriphCLKConfig+0x74e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8010728:	07df      	lsls	r7, r3, #31
 801072a:	d52f      	bpl.n	801078c <HAL_RCCEx_PeriphCLKConfig+0x394>
    switch(PeriphClkInit->Usart16ClockSelection)
 801072c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 801072e:	2a28      	cmp	r2, #40	; 0x28
 8010730:	d82a      	bhi.n	8010788 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8010732:	e8df f012 	tbh	[pc, r2, lsl #1]
 8010736:	01f2      	.short	0x01f2
 8010738:	00290029 	.word	0x00290029
 801073c:	00290029 	.word	0x00290029
 8010740:	00290029 	.word	0x00290029
 8010744:	01ec0029 	.word	0x01ec0029
 8010748:	00290029 	.word	0x00290029
 801074c:	00290029 	.word	0x00290029
 8010750:	00290029 	.word	0x00290029
 8010754:	03860029 	.word	0x03860029
 8010758:	00290029 	.word	0x00290029
 801075c:	00290029 	.word	0x00290029
 8010760:	00290029 	.word	0x00290029
 8010764:	01f20029 	.word	0x01f20029
 8010768:	00290029 	.word	0x00290029
 801076c:	00290029 	.word	0x00290029
 8010770:	00290029 	.word	0x00290029
 8010774:	01f20029 	.word	0x01f20029
 8010778:	00290029 	.word	0x00290029
 801077c:	00290029 	.word	0x00290029
 8010780:	00290029 	.word	0x00290029
 8010784:	01f20029 	.word	0x01f20029
 8010788:	2601      	movs	r6, #1
 801078a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801078c:	0798      	lsls	r0, r3, #30
 801078e:	d51b      	bpl.n	80107c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8010790:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8010792:	2a05      	cmp	r2, #5
 8010794:	f200 838b 	bhi.w	8010eae <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8010798:	e8df f012 	tbh	[pc, r2, lsl #1]
 801079c:	0006000c 	.word	0x0006000c
 80107a0:	000c0348 	.word	0x000c0348
 80107a4:	000c000c 	.word	0x000c000c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80107a8:	2101      	movs	r1, #1
 80107aa:	1d20      	adds	r0, r4, #4
 80107ac:	f7ff fd30 	bl	8010210 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80107b0:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80107b2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80107b4:	2d00      	cmp	r5, #0
 80107b6:	f040 824b 	bne.w	8010c50 <HAL_RCCEx_PeriphCLKConfig+0x858>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80107ba:	490b      	ldr	r1, [pc, #44]	; (80107e8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80107bc:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80107be:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80107c0:	f022 0207 	bic.w	r2, r2, #7
 80107c4:	4302      	orrs	r2, r0
 80107c6:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80107c8:	0759      	lsls	r1, r3, #29
 80107ca:	d520      	bpl.n	801080e <HAL_RCCEx_PeriphCLKConfig+0x416>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80107cc:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 80107d0:	2a05      	cmp	r2, #5
 80107d2:	f200 836f 	bhi.w	8010eb4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 80107d6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80107da:	000f      	.short	0x000f
 80107dc:	031e0009 	.word	0x031e0009
 80107e0:	000f000f 	.word	0x000f000f
 80107e4:	000f      	.short	0x000f
 80107e6:	bf00      	nop
 80107e8:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80107ec:	2101      	movs	r1, #1
 80107ee:	1d20      	adds	r0, r4, #4
 80107f0:	f7ff fd0e 	bl	8010210 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80107f4:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80107f6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80107f8:	2d00      	cmp	r5, #0
 80107fa:	f040 8227 	bne.w	8010c4c <HAL_RCCEx_PeriphCLKConfig+0x854>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80107fe:	49a8      	ldr	r1, [pc, #672]	; (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 8010800:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8010804:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8010806:	f022 0207 	bic.w	r2, r2, #7
 801080a:	4302      	orrs	r2, r0
 801080c:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801080e:	069a      	lsls	r2, r3, #26
 8010810:	d51d      	bpl.n	801084e <HAL_RCCEx_PeriphCLKConfig+0x456>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8010812:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8010816:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 801081a:	f000 825f 	beq.w	8010cdc <HAL_RCCEx_PeriphCLKConfig+0x8e4>
 801081e:	f200 80dc 	bhi.w	80109da <HAL_RCCEx_PeriphCLKConfig+0x5e2>
 8010822:	b14a      	cbz	r2, 8010838 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8010824:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8010828:	f040 80e1 	bne.w	80109ee <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801082c:	2100      	movs	r1, #0
 801082e:	1d20      	adds	r0, r4, #4
 8010830:	f7ff fcee 	bl	8010210 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8010834:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010836:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8010838:	2d00      	cmp	r5, #0
 801083a:	f040 8201 	bne.w	8010c40 <HAL_RCCEx_PeriphCLKConfig+0x848>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801083e:	4998      	ldr	r1, [pc, #608]	; (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 8010840:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8010844:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8010846:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 801084a:	4302      	orrs	r2, r0
 801084c:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801084e:	065f      	lsls	r7, r3, #25
 8010850:	d51d      	bpl.n	801088e <HAL_RCCEx_PeriphCLKConfig+0x496>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8010852:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8010856:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 801085a:	f000 822b 	beq.w	8010cb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 801085e:	f200 80c9 	bhi.w	80109f4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8010862:	b14a      	cbz	r2, 8010878 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8010864:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8010868:	f040 80ce 	bne.w	8010a08 <HAL_RCCEx_PeriphCLKConfig+0x610>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801086c:	2100      	movs	r1, #0
 801086e:	1d20      	adds	r0, r4, #4
 8010870:	f7ff fcce 	bl	8010210 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8010874:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010876:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8010878:	2d00      	cmp	r5, #0
 801087a:	f040 81df 	bne.w	8010c3c <HAL_RCCEx_PeriphCLKConfig+0x844>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801087e:	4988      	ldr	r1, [pc, #544]	; (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 8010880:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8010884:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8010886:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 801088a:	4302      	orrs	r2, r0
 801088c:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801088e:	0618      	lsls	r0, r3, #24
 8010890:	d51d      	bpl.n	80108ce <HAL_RCCEx_PeriphCLKConfig+0x4d6>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8010892:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8010896:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 801089a:	f000 8215 	beq.w	8010cc8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 801089e:	f200 80b6 	bhi.w	8010a0e <HAL_RCCEx_PeriphCLKConfig+0x616>
 80108a2:	b14a      	cbz	r2, 80108b8 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 80108a4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80108a8:	f040 80bb 	bne.w	8010a22 <HAL_RCCEx_PeriphCLKConfig+0x62a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80108ac:	2100      	movs	r1, #0
 80108ae:	1d20      	adds	r0, r4, #4
 80108b0:	f7ff fcae 	bl	8010210 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80108b4:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80108b6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80108b8:	2d00      	cmp	r5, #0
 80108ba:	f040 81c3 	bne.w	8010c44 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80108be:	4978      	ldr	r1, [pc, #480]	; (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 80108c0:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 80108c4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80108c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80108ca:	4302      	orrs	r2, r0
 80108cc:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80108ce:	0719      	lsls	r1, r3, #28
 80108d0:	d50b      	bpl.n	80108ea <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80108d2:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80108d6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80108da:	f000 8249 	beq.w	8010d70 <HAL_RCCEx_PeriphCLKConfig+0x978>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80108de:	4870      	ldr	r0, [pc, #448]	; (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 80108e0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80108e2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80108e6:	430a      	orrs	r2, r1
 80108e8:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80108ea:	06da      	lsls	r2, r3, #27
 80108ec:	d50b      	bpl.n	8010906 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80108ee:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80108f2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80108f6:	f000 8229 	beq.w	8010d4c <HAL_RCCEx_PeriphCLKConfig+0x954>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80108fa:	4869      	ldr	r0, [pc, #420]	; (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 80108fc:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80108fe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8010902:	430a      	orrs	r2, r1
 8010904:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010906:	031f      	lsls	r7, r3, #12
 8010908:	d50e      	bpl.n	8010928 <HAL_RCCEx_PeriphCLKConfig+0x530>
    switch(PeriphClkInit->AdcClockSelection)
 801090a:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 801090e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8010912:	f000 80c7 	beq.w	8010aa4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8010916:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 801091a:	f000 80ca 	beq.w	8010ab2 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 801091e:	2900      	cmp	r1, #0
 8010920:	f000 81c0 	beq.w	8010ca4 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8010924:	2601      	movs	r6, #1
 8010926:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8010928:	0358      	lsls	r0, r3, #13
 801092a:	d50f      	bpl.n	801094c <HAL_RCCEx_PeriphCLKConfig+0x554>
    switch(PeriphClkInit->UsbClockSelection)
 801092c:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8010930:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8010934:	f000 80a0 	beq.w	8010a78 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8010938:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 801093c:	f000 80a3 	beq.w	8010a86 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8010940:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8010944:	f000 81a6 	beq.w	8010c94 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8010948:	2601      	movs	r6, #1
 801094a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801094c:	03d9      	lsls	r1, r3, #15
 801094e:	d509      	bpl.n	8010964 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch(PeriphClkInit->SdmmcClockSelection)
 8010950:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8010952:	2a00      	cmp	r2, #0
 8010954:	f000 8195 	beq.w	8010c82 <HAL_RCCEx_PeriphCLKConfig+0x88a>
 8010958:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801095c:	f000 813e 	beq.w	8010bdc <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8010960:	2601      	movs	r6, #1
 8010962:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8010964:	009a      	lsls	r2, r3, #2
 8010966:	f100 80e3 	bmi.w	8010b30 <HAL_RCCEx_PeriphCLKConfig+0x738>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801096a:	039f      	lsls	r7, r3, #14
 801096c:	d45c      	bmi.n	8010a28 <HAL_RCCEx_PeriphCLKConfig+0x630>
    return HAL_OK;
 801096e:	1e30      	subs	r0, r6, #0
 8010970:	bf18      	it	ne
 8010972:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010974:	02de      	lsls	r6, r3, #11
 8010976:	d506      	bpl.n	8010986 <HAL_RCCEx_PeriphCLKConfig+0x58e>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8010978:	4949      	ldr	r1, [pc, #292]	; (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 801097a:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801097c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 801097e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8010982:	432a      	orrs	r2, r5
 8010984:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8010986:	00dd      	lsls	r5, r3, #3
 8010988:	d507      	bpl.n	801099a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801098a:	4945      	ldr	r1, [pc, #276]	; (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 801098c:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8010990:	690a      	ldr	r2, [r1, #16]
 8010992:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8010996:	432a      	orrs	r2, r5
 8010998:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801099a:	0299      	lsls	r1, r3, #10
 801099c:	d506      	bpl.n	80109ac <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801099e:	4940      	ldr	r1, [pc, #256]	; (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 80109a0:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80109a2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80109a4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80109a8:	432a      	orrs	r2, r5
 80109aa:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80109ac:	005a      	lsls	r2, r3, #1
 80109ae:	d509      	bpl.n	80109c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80109b0:	4a3b      	ldr	r2, [pc, #236]	; (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 80109b2:	6911      	ldr	r1, [r2, #16]
 80109b4:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80109b8:	6111      	str	r1, [r2, #16]
 80109ba:	6911      	ldr	r1, [r2, #16]
 80109bc:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 80109c0:	4329      	orrs	r1, r5
 80109c2:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	da06      	bge.n	80109d6 <HAL_RCCEx_PeriphCLKConfig+0x5de>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80109c8:	4a35      	ldr	r2, [pc, #212]	; (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 80109ca:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80109cc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80109ce:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80109d2:	430b      	orrs	r3, r1
 80109d4:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80109d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Lptim1ClockSelection)
 80109da:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80109de:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80109e2:	f43f af29 	beq.w	8010838 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80109e6:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80109ea:	f43f af25 	beq.w	8010838 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80109ee:	2601      	movs	r6, #1
 80109f0:	4635      	mov	r5, r6
 80109f2:	e72c      	b.n	801084e <HAL_RCCEx_PeriphCLKConfig+0x456>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80109f4:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 80109f8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80109fc:	f43f af3c 	beq.w	8010878 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8010a00:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8010a04:	f43f af38 	beq.w	8010878 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8010a08:	2601      	movs	r6, #1
 8010a0a:	4635      	mov	r5, r6
 8010a0c:	e73f      	b.n	801088e <HAL_RCCEx_PeriphCLKConfig+0x496>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8010a0e:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8010a12:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8010a16:	f43f af4f 	beq.w	80108b8 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 8010a1a:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8010a1e:	f43f af4b 	beq.w	80108b8 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 8010a22:	2601      	movs	r6, #1
 8010a24:	4635      	mov	r5, r6
 8010a26:	e752      	b.n	80108ce <HAL_RCCEx_PeriphCLKConfig+0x4d6>
    switch(PeriphClkInit->RngClockSelection)
 8010a28:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8010a2c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8010a30:	f000 811c 	beq.w	8010c6c <HAL_RCCEx_PeriphCLKConfig+0x874>
 8010a34:	d906      	bls.n	8010a44 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8010a36:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 8010a3a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8010a3e:	d003      	beq.n	8010a48 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8010a40:	2001      	movs	r0, #1
 8010a42:	e797      	b.n	8010974 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8010a44:	2a00      	cmp	r2, #0
 8010a46:	d1fb      	bne.n	8010a40 <HAL_RCCEx_PeriphCLKConfig+0x648>
    if(ret == HAL_OK)
 8010a48:	2d00      	cmp	r5, #0
 8010a4a:	d1f9      	bne.n	8010a40 <HAL_RCCEx_PeriphCLKConfig+0x648>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010a4c:	4d14      	ldr	r5, [pc, #80]	; (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
    return HAL_OK;
 8010a4e:	1e30      	subs	r0, r6, #0
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010a50:	6d69      	ldr	r1, [r5, #84]	; 0x54
    return HAL_OK;
 8010a52:	bf18      	it	ne
 8010a54:	2001      	movne	r0, #1
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010a56:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8010a5a:	430a      	orrs	r2, r1
 8010a5c:	656a      	str	r2, [r5, #84]	; 0x54
 8010a5e:	e789      	b.n	8010974 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8010a60:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8010a62:	2d00      	cmp	r5, #0
 8010a64:	f040 80b6 	bne.w	8010bd4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010a68:	490d      	ldr	r1, [pc, #52]	; (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 8010a6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a6c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8010a6e:	f022 0207 	bic.w	r2, r2, #7
 8010a72:	4302      	orrs	r2, r0
 8010a74:	650a      	str	r2, [r1, #80]	; 0x50
 8010a76:	e4f8      	b.n	801046a <HAL_RCCEx_PeriphCLKConfig+0x72>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8010a78:	2101      	movs	r1, #1
 8010a7a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010a7e:	f7ff fc41 	bl	8010304 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8010a82:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8010a84:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8010a86:	2d00      	cmp	r5, #0
 8010a88:	f040 80d6 	bne.w	8010c38 <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010a8c:	4904      	ldr	r1, [pc, #16]	; (8010aa0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 8010a8e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8010a92:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8010a94:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8010a98:	4302      	orrs	r2, r0
 8010a9a:	654a      	str	r2, [r1, #84]	; 0x54
 8010a9c:	e756      	b.n	801094c <HAL_RCCEx_PeriphCLKConfig+0x554>
 8010a9e:	bf00      	nop
 8010aa0:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010aa4:	2102      	movs	r1, #2
 8010aa6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010aaa:	f7ff fc2b 	bl	8010304 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8010aae:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010ab0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8010ab2:	2d00      	cmp	r5, #0
 8010ab4:	f040 80d8 	bne.w	8010c68 <HAL_RCCEx_PeriphCLKConfig+0x870>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010ab8:	49ab      	ldr	r1, [pc, #684]	; (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8010aba:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8010abe:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8010ac0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8010ac4:	4302      	orrs	r2, r0
 8010ac6:	658a      	str	r2, [r1, #88]	; 0x58
 8010ac8:	e72e      	b.n	8010928 <HAL_RCCEx_PeriphCLKConfig+0x530>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010aca:	2101      	movs	r1, #1
 8010acc:	1d20      	adds	r0, r4, #4
 8010ace:	f7ff fb9f 	bl	8010210 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8010ad2:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010ad4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8010ad6:	2d00      	cmp	r5, #0
 8010ad8:	f040 80c4 	bne.w	8010c64 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8010adc:	49a2      	ldr	r1, [pc, #648]	; (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8010ade:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8010ae0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8010ae2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010ae6:	4302      	orrs	r2, r0
 8010ae8:	650a      	str	r2, [r1, #80]	; 0x50
 8010aea:	e5b4      	b.n	8010656 <HAL_RCCEx_PeriphCLKConfig+0x25e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010aec:	2101      	movs	r1, #1
 8010aee:	1d20      	adds	r0, r4, #4
 8010af0:	f7ff fb8e 	bl	8010210 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8010af4:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010af6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8010af8:	2d00      	cmp	r5, #0
 8010afa:	f040 80c0 	bne.w	8010c7e <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8010afe:	499a      	ldr	r1, [pc, #616]	; (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8010b00:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8010b02:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8010b04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010b08:	4302      	orrs	r2, r0
 8010b0a:	64ca      	str	r2, [r1, #76]	; 0x4c
 8010b0c:	e593      	b.n	8010636 <HAL_RCCEx_PeriphCLKConfig+0x23e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010b0e:	2101      	movs	r1, #1
 8010b10:	1d20      	adds	r0, r4, #4
 8010b12:	f7ff fb7d 	bl	8010210 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8010b16:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010b18:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8010b1a:	2d00      	cmp	r5, #0
 8010b1c:	f040 8094 	bne.w	8010c48 <HAL_RCCEx_PeriphCLKConfig+0x850>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8010b20:	4991      	ldr	r1, [pc, #580]	; (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8010b22:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8010b24:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8010b26:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8010b2a:	4302      	orrs	r2, r0
 8010b2c:	654a      	str	r2, [r1, #84]	; 0x54
 8010b2e:	e62d      	b.n	801078c <HAL_RCCEx_PeriphCLKConfig+0x394>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8010b30:	2102      	movs	r1, #2
 8010b32:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010b36:	f7ff fbe5 	bl	8010304 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8010b3a:	6823      	ldr	r3, [r4, #0]
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8010b3c:	2800      	cmp	r0, #0
 8010b3e:	f43f af14 	beq.w	801096a <HAL_RCCEx_PeriphCLKConfig+0x572>
      status=HAL_ERROR;
 8010b42:	2601      	movs	r6, #1
 8010b44:	e711      	b.n	801096a <HAL_RCCEx_PeriphCLKConfig+0x572>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010b46:	4f89      	ldr	r7, [pc, #548]	; (8010d6c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010b4e:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8010b50:	f7fa fe94 	bl	800b87c <HAL_GetTick>
 8010b54:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010b56:	e006      	b.n	8010b66 <HAL_RCCEx_PeriphCLKConfig+0x76e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010b58:	f7fa fe90 	bl	800b87c <HAL_GetTick>
 8010b5c:	eba0 0008 	sub.w	r0, r0, r8
 8010b60:	2864      	cmp	r0, #100	; 0x64
 8010b62:	f200 8179 	bhi.w	8010e58 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010b66:	683b      	ldr	r3, [r7, #0]
 8010b68:	05da      	lsls	r2, r3, #23
 8010b6a:	d5f5      	bpl.n	8010b58 <HAL_RCCEx_PeriphCLKConfig+0x760>
    if(ret == HAL_OK)
 8010b6c:	2d00      	cmp	r5, #0
 8010b6e:	f040 8195 	bne.w	8010e9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8010b72:	4a7d      	ldr	r2, [pc, #500]	; (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8010b74:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8010b78:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8010b7a:	4059      	eors	r1, r3
 8010b7c:	f411 7f40 	tst.w	r1, #768	; 0x300
 8010b80:	d00b      	beq.n	8010b9a <HAL_RCCEx_PeriphCLKConfig+0x7a2>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010b82:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8010b84:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010b86:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8010b8a:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8010b8e:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010b90:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8010b92:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8010b96:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8010b98:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8010b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b9e:	f000 815f 	beq.w	8010e60 <HAL_RCCEx_PeriphCLKConfig+0xa68>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010ba2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8010ba6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8010baa:	f000 816d 	beq.w	8010e88 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8010bae:	496e      	ldr	r1, [pc, #440]	; (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8010bb0:	690a      	ldr	r2, [r1, #16]
 8010bb2:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8010bb6:	610a      	str	r2, [r1, #16]
 8010bb8:	4a6b      	ldr	r2, [pc, #428]	; (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8010bba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010bbe:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8010bc0:	430b      	orrs	r3, r1
 8010bc2:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8010bc4:	6823      	ldr	r3, [r4, #0]
 8010bc6:	e5af      	b.n	8010728 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8010bc8:	462e      	mov	r6, r5
 8010bca:	e46c      	b.n	80104a6 <HAL_RCCEx_PeriphCLKConfig+0xae>
 8010bcc:	462e      	mov	r6, r5
 8010bce:	e48c      	b.n	80104ea <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8010bd0:	462e      	mov	r6, r5
 8010bd2:	e4e7      	b.n	80105a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8010bd4:	462e      	mov	r6, r5
 8010bd6:	e448      	b.n	801046a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8010bd8:	462e      	mov	r6, r5
 8010bda:	e4a8      	b.n	801052e <HAL_RCCEx_PeriphCLKConfig+0x136>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8010bdc:	2102      	movs	r1, #2
 8010bde:	1d20      	adds	r0, r4, #4
 8010be0:	f7ff fb16 	bl	8010210 <RCCEx_PLL2_Config>
 8010be4:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8010be6:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8010be8:	2d00      	cmp	r5, #0
 8010bea:	d151      	bne.n	8010c90 <HAL_RCCEx_PeriphCLKConfig+0x898>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8010bec:	495e      	ldr	r1, [pc, #376]	; (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8010bee:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8010bf0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8010bf2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8010bf6:	4302      	orrs	r2, r0
 8010bf8:	64ca      	str	r2, [r1, #76]	; 0x4c
 8010bfa:	e6b3      	b.n	8010964 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010bfc:	485a      	ldr	r0, [pc, #360]	; (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8010bfe:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8010c00:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8010c04:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8010c06:	e414      	b.n	8010432 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010c08:	4957      	ldr	r1, [pc, #348]	; (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8010c0a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010c0c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8010c10:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8010c12:	e45f      	b.n	80104d4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010c14:	4954      	ldr	r1, [pc, #336]	; (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8010c16:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010c18:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8010c1c:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8010c1e:	e438      	b.n	8010492 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010c20:	4951      	ldr	r1, [pc, #324]	; (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8010c22:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010c24:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8010c28:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8010c2a:	e475      	b.n	8010518 <HAL_RCCEx_PeriphCLKConfig+0x120>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010c2c:	494e      	ldr	r1, [pc, #312]	; (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8010c2e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010c30:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8010c34:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8010c36:	e4ab      	b.n	8010590 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8010c38:	462e      	mov	r6, r5
 8010c3a:	e687      	b.n	801094c <HAL_RCCEx_PeriphCLKConfig+0x554>
 8010c3c:	462e      	mov	r6, r5
 8010c3e:	e626      	b.n	801088e <HAL_RCCEx_PeriphCLKConfig+0x496>
 8010c40:	462e      	mov	r6, r5
 8010c42:	e604      	b.n	801084e <HAL_RCCEx_PeriphCLKConfig+0x456>
 8010c44:	462e      	mov	r6, r5
 8010c46:	e642      	b.n	80108ce <HAL_RCCEx_PeriphCLKConfig+0x4d6>
 8010c48:	462e      	mov	r6, r5
 8010c4a:	e59f      	b.n	801078c <HAL_RCCEx_PeriphCLKConfig+0x394>
 8010c4c:	462e      	mov	r6, r5
 8010c4e:	e5de      	b.n	801080e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8010c50:	462e      	mov	r6, r5
 8010c52:	e5b9      	b.n	80107c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8010c54:	462e      	mov	r6, r5
 8010c56:	e4e2      	b.n	801061e <HAL_RCCEx_PeriphCLKConfig+0x226>
 8010c58:	462e      	mov	r6, r5
 8010c5a:	e562      	b.n	8010722 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8010c5c:	462e      	mov	r6, r5
 8010c5e:	e481      	b.n	8010564 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8010c60:	462e      	mov	r6, r5
 8010c62:	e4bd      	b.n	80105e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8010c64:	462e      	mov	r6, r5
 8010c66:	e4f6      	b.n	8010656 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8010c68:	462e      	mov	r6, r5
 8010c6a:	e65d      	b.n	8010928 <HAL_RCCEx_PeriphCLKConfig+0x530>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010c6c:	483e      	ldr	r0, [pc, #248]	; (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8010c6e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8010c70:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8010c74:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8010c76:	2d00      	cmp	r5, #0
 8010c78:	f47f aee2 	bne.w	8010a40 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8010c7c:	e6e6      	b.n	8010a4c <HAL_RCCEx_PeriphCLKConfig+0x654>
 8010c7e:	462e      	mov	r6, r5
 8010c80:	e4d9      	b.n	8010636 <HAL_RCCEx_PeriphCLKConfig+0x23e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010c82:	4939      	ldr	r1, [pc, #228]	; (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8010c84:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010c86:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8010c8a:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8010c8c:	2d00      	cmp	r5, #0
 8010c8e:	d0ad      	beq.n	8010bec <HAL_RCCEx_PeriphCLKConfig+0x7f4>
 8010c90:	462e      	mov	r6, r5
 8010c92:	e667      	b.n	8010964 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010c94:	4934      	ldr	r1, [pc, #208]	; (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8010c96:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010c98:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8010c9c:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8010c9e:	2d00      	cmp	r5, #0
 8010ca0:	d1ca      	bne.n	8010c38 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8010ca2:	e6f3      	b.n	8010a8c <HAL_RCCEx_PeriphCLKConfig+0x694>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010ca4:	1d20      	adds	r0, r4, #4
 8010ca6:	f7ff fab3 	bl	8010210 <RCCEx_PLL2_Config>
 8010caa:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8010cac:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8010cae:	2d00      	cmp	r5, #0
 8010cb0:	d1da      	bne.n	8010c68 <HAL_RCCEx_PeriphCLKConfig+0x870>
 8010cb2:	e701      	b.n	8010ab8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010cb4:	2102      	movs	r1, #2
 8010cb6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010cba:	f7ff fb23 	bl	8010304 <RCCEx_PLL3_Config>
 8010cbe:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8010cc0:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8010cc2:	2d00      	cmp	r5, #0
 8010cc4:	d1ba      	bne.n	8010c3c <HAL_RCCEx_PeriphCLKConfig+0x844>
 8010cc6:	e5da      	b.n	801087e <HAL_RCCEx_PeriphCLKConfig+0x486>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010cc8:	2102      	movs	r1, #2
 8010cca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010cce:	f7ff fb19 	bl	8010304 <RCCEx_PLL3_Config>
 8010cd2:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8010cd4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8010cd6:	2d00      	cmp	r5, #0
 8010cd8:	d1b4      	bne.n	8010c44 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8010cda:	e5f0      	b.n	80108be <HAL_RCCEx_PeriphCLKConfig+0x4c6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010cdc:	2102      	movs	r1, #2
 8010cde:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010ce2:	f7ff fb0f 	bl	8010304 <RCCEx_PLL3_Config>
 8010ce6:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8010ce8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8010cea:	2d00      	cmp	r5, #0
 8010cec:	d1a8      	bne.n	8010c40 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8010cee:	e5a6      	b.n	801083e <HAL_RCCEx_PeriphCLKConfig+0x446>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8010cf0:	2101      	movs	r1, #1
 8010cf2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010cf6:	f7ff fb05 	bl	8010304 <RCCEx_PLL3_Config>
 8010cfa:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8010cfc:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8010cfe:	2d00      	cmp	r5, #0
 8010d00:	d1ae      	bne.n	8010c60 <HAL_RCCEx_PeriphCLKConfig+0x868>
 8010d02:	e466      	b.n	80105d2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8010d04:	2101      	movs	r1, #1
 8010d06:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010d0a:	f7ff fafb 	bl	8010304 <RCCEx_PLL3_Config>
 8010d0e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8010d10:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8010d12:	2d00      	cmp	r5, #0
 8010d14:	d19e      	bne.n	8010c54 <HAL_RCCEx_PeriphCLKConfig+0x85c>
 8010d16:	e47a      	b.n	801060e <HAL_RCCEx_PeriphCLKConfig+0x216>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8010d18:	2102      	movs	r1, #2
 8010d1a:	1d20      	adds	r0, r4, #4
 8010d1c:	f7ff fa78 	bl	8010210 <RCCEx_PLL2_Config>
 8010d20:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010d22:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8010d24:	2d00      	cmp	r5, #0
 8010d26:	d197      	bne.n	8010c58 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8010d28:	e4f4      	b.n	8010714 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8010d2a:	2102      	movs	r1, #2
 8010d2c:	1d20      	adds	r0, r4, #4
 8010d2e:	f7ff fa6f 	bl	8010210 <RCCEx_PLL2_Config>
 8010d32:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8010d34:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8010d36:	2d00      	cmp	r5, #0
 8010d38:	d190      	bne.n	8010c5c <HAL_RCCEx_PeriphCLKConfig+0x864>
 8010d3a:	e40c      	b.n	8010556 <HAL_RCCEx_PeriphCLKConfig+0x15e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010d3c:	490a      	ldr	r1, [pc, #40]	; (8010d68 <HAL_RCCEx_PeriphCLKConfig+0x970>)
 8010d3e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010d40:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8010d44:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8010d46:	2d00      	cmp	r5, #0
 8010d48:	d18c      	bne.n	8010c64 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 8010d4a:	e6c7      	b.n	8010adc <HAL_RCCEx_PeriphCLKConfig+0x6e4>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8010d4c:	2102      	movs	r1, #2
 8010d4e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010d52:	f7ff fad7 	bl	8010304 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8010d56:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010d5a:	6823      	ldr	r3, [r4, #0]
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8010d5c:	2800      	cmp	r0, #0
 8010d5e:	f43f adcc 	beq.w	80108fa <HAL_RCCEx_PeriphCLKConfig+0x502>
        status = HAL_ERROR;
 8010d62:	2601      	movs	r6, #1
 8010d64:	e5c9      	b.n	80108fa <HAL_RCCEx_PeriphCLKConfig+0x502>
 8010d66:	bf00      	nop
 8010d68:	58024400 	.word	0x58024400
 8010d6c:	58024800 	.word	0x58024800
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8010d70:	2102      	movs	r1, #2
 8010d72:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010d76:	f7ff fac5 	bl	8010304 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8010d7a:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8010d7e:	6823      	ldr	r3, [r4, #0]
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8010d80:	2800      	cmp	r0, #0
 8010d82:	f43f adac 	beq.w	80108de <HAL_RCCEx_PeriphCLKConfig+0x4e6>
          status = HAL_ERROR;
 8010d86:	2601      	movs	r6, #1
 8010d88:	e5a9      	b.n	80108de <HAL_RCCEx_PeriphCLKConfig+0x4e6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010d8a:	2100      	movs	r1, #0
 8010d8c:	1d20      	adds	r0, r4, #4
 8010d8e:	f7ff fa3f 	bl	8010210 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8010d92:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010d94:	4605      	mov	r5, r0
      break;
 8010d96:	e664      	b.n	8010a62 <HAL_RCCEx_PeriphCLKConfig+0x66a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8010d98:	6823      	ldr	r3, [r4, #0]
 8010d9a:	f7ff bb51 	b.w	8010440 <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010d9e:	2100      	movs	r1, #0
 8010da0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010da4:	f7ff faae 	bl	8010304 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8010da8:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010daa:	4605      	mov	r5, r0
      break;
 8010dac:	f7ff bbb4 	b.w	8010518 <HAL_RCCEx_PeriphCLKConfig+0x120>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8010db0:	2100      	movs	r1, #0
 8010db2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010db6:	f7ff faa5 	bl	8010304 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8010dba:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8010dbc:	4605      	mov	r5, r0
      break;
 8010dbe:	e650      	b.n	8010a62 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8010dc0:	2100      	movs	r1, #0
 8010dc2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010dc6:	f7ff fa9d 	bl	8010304 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8010dca:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8010dcc:	4605      	mov	r5, r0
      break;
 8010dce:	f7ff bbdf 	b.w	8010590 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010dd2:	493a      	ldr	r1, [pc, #232]	; (8010ebc <HAL_RCCEx_PeriphCLKConfig+0xac4>)
      break;
 8010dd4:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010dd6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010dd8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8010ddc:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8010dde:	e640      	b.n	8010a62 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010de0:	2102      	movs	r1, #2
 8010de2:	3024      	adds	r0, #36	; 0x24
 8010de4:	f7ff fa8e 	bl	8010304 <RCCEx_PLL3_Config>
 8010de8:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8010dea:	2e00      	cmp	r6, #0
 8010dec:	f43f ab1f 	beq.w	801042e <HAL_RCCEx_PeriphCLKConfig+0x36>
 8010df0:	e7d2      	b.n	8010d98 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8010df2:	2100      	movs	r1, #0
 8010df4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010df8:	f7ff fa84 	bl	8010304 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8010dfc:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8010dfe:	4605      	mov	r5, r0
      break;
 8010e00:	f7ff bb68 	b.w	80104d4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8010e04:	2100      	movs	r1, #0
 8010e06:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010e0a:	f7ff fa7b 	bl	8010304 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8010e0e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8010e10:	4605      	mov	r5, r0
      break;
 8010e12:	f7ff bb3e 	b.w	8010492 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8010e16:	2101      	movs	r1, #1
 8010e18:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010e1c:	f7ff fa72 	bl	8010304 <RCCEx_PLL3_Config>
 8010e20:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8010e22:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8010e24:	2d00      	cmp	r5, #0
 8010e26:	f47f af11 	bne.w	8010c4c <HAL_RCCEx_PeriphCLKConfig+0x854>
 8010e2a:	e4e8      	b.n	80107fe <HAL_RCCEx_PeriphCLKConfig+0x406>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8010e2c:	2101      	movs	r1, #1
 8010e2e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010e32:	f7ff fa67 	bl	8010304 <RCCEx_PLL3_Config>
 8010e36:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010e38:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8010e3a:	2d00      	cmp	r5, #0
 8010e3c:	f47f af08 	bne.w	8010c50 <HAL_RCCEx_PeriphCLKConfig+0x858>
 8010e40:	e4bb      	b.n	80107ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8010e42:	2101      	movs	r1, #1
 8010e44:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010e48:	f7ff fa5c 	bl	8010304 <RCCEx_PLL3_Config>
 8010e4c:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8010e4e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8010e50:	2d00      	cmp	r5, #0
 8010e52:	f47f aef9 	bne.w	8010c48 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8010e56:	e663      	b.n	8010b20 <HAL_RCCEx_PeriphCLKConfig+0x728>
        status = ret;
 8010e58:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8010e5a:	6823      	ldr	r3, [r4, #0]
 8010e5c:	4635      	mov	r5, r6
 8010e5e:	e463      	b.n	8010728 <HAL_RCCEx_PeriphCLKConfig+0x330>
        tickstart = HAL_GetTick();
 8010e60:	f7fa fd0c 	bl	800b87c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010e64:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8010ebc <HAL_RCCEx_PeriphCLKConfig+0xac4>
        tickstart = HAL_GetTick();
 8010e68:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010e6a:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010e6e:	e004      	b.n	8010e7a <HAL_RCCEx_PeriphCLKConfig+0xa82>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010e70:	f7fa fd04 	bl	800b87c <HAL_GetTick>
 8010e74:	1bc0      	subs	r0, r0, r7
 8010e76:	4548      	cmp	r0, r9
 8010e78:	d8ee      	bhi.n	8010e58 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010e7a:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8010e7e:	079b      	lsls	r3, r3, #30
 8010e80:	d5f6      	bpl.n	8010e70 <HAL_RCCEx_PeriphCLKConfig+0xa78>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010e82:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8010e86:	e68c      	b.n	8010ba2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8010e88:	480c      	ldr	r0, [pc, #48]	; (8010ebc <HAL_RCCEx_PeriphCLKConfig+0xac4>)
 8010e8a:	4a0d      	ldr	r2, [pc, #52]	; (8010ec0 <HAL_RCCEx_PeriphCLKConfig+0xac8>)
 8010e8c:	6901      	ldr	r1, [r0, #16]
 8010e8e:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8010e92:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8010e96:	430a      	orrs	r2, r1
 8010e98:	6102      	str	r2, [r0, #16]
 8010e9a:	e68d      	b.n	8010bb8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8010e9c:	6823      	ldr	r3, [r4, #0]
 8010e9e:	462e      	mov	r6, r5
 8010ea0:	e442      	b.n	8010728 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch(PeriphClkInit->Sai1ClockSelection)
 8010ea2:	2601      	movs	r6, #1
 8010ea4:	f7ff bae0 	b.w	8010468 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->FmcClockSelection)
 8010ea8:	2601      	movs	r6, #1
 8010eaa:	4635      	mov	r5, r6
 8010eac:	e439      	b.n	8010722 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8010eae:	2601      	movs	r6, #1
 8010eb0:	4635      	mov	r5, r6
 8010eb2:	e489      	b.n	80107c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8010eb4:	2601      	movs	r6, #1
 8010eb6:	4635      	mov	r5, r6
 8010eb8:	e4a9      	b.n	801080e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8010eba:	bf00      	nop
 8010ebc:	58024400 	.word	0x58024400
 8010ec0:	00ffffcf 	.word	0x00ffffcf

08010ec4 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8010ec4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010ec6:	f7ff f8d3 	bl	8010070 <HAL_RCC_GetHCLKFreq>
 8010eca:	4b05      	ldr	r3, [pc, #20]	; (8010ee0 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8010ecc:	4a05      	ldr	r2, [pc, #20]	; (8010ee4 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8010ece:	6a1b      	ldr	r3, [r3, #32]
 8010ed0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8010ed4:	5cd3      	ldrb	r3, [r2, r3]
 8010ed6:	f003 031f 	and.w	r3, r3, #31
}
 8010eda:	40d8      	lsrs	r0, r3
 8010edc:	bd08      	pop	{r3, pc}
 8010ede:	bf00      	nop
 8010ee0:	58024400 	.word	0x58024400
 8010ee4:	08098978 	.word	0x08098978

08010ee8 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010ee8:	4a50      	ldr	r2, [pc, #320]	; (801102c <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
{
 8010eea:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010eec:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8010eee:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8010ef0:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 8010ef2:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8010ef6:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8010efa:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8010efc:	d05d      	beq.n	8010fba <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8010efe:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8010f02:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010f06:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8010f0a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8010f0e:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8010f10:	ee07 4a90 	vmov	s15, r4
 8010f14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8010f18:	d003      	beq.n	8010f22 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8010f1a:	2902      	cmp	r1, #2
 8010f1c:	d078      	beq.n	8011010 <HAL_RCCEx_GetPLL2ClockFreq+0x128>
 8010f1e:	2900      	cmp	r1, #0
 8010f20:	d050      	beq.n	8010fc4 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010f22:	ee07 3a90 	vmov	s15, r3
 8010f26:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8011030 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8010f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f2e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8010f30:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8010f34:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8011034 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8010f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f3c:	ee07 3a90 	vmov	s15, r3
 8010f40:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8010f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f48:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8010f4c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8010f50:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8010f54:	4a35      	ldr	r2, [pc, #212]	; (801102c <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
 8010f56:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8010f5a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8010f5c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8010f60:	ee07 3a90 	vmov	s15, r3
 8010f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8010f68:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8010f6a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f72:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8010f76:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8010f7a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8010f7c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8010f80:	ee07 3a90 	vmov	s15, r3
 8010f84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f88:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010f8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f90:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8010f94:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8010f98:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8010f9a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8010f9e:	ee07 3a10 	vmov	s14, r3
 8010fa2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010fa6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010faa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010fae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010fb2:	ee17 3a90 	vmov	r3, s15
 8010fb6:	6083      	str	r3, [r0, #8]
}
 8010fb8:	4770      	bx	lr
 8010fba:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8010fbc:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8010fc0:	6083      	str	r3, [r0, #8]
}
 8010fc2:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010fc4:	6811      	ldr	r1, [r2, #0]
 8010fc6:	0689      	lsls	r1, r1, #26
 8010fc8:	d529      	bpl.n	801101e <HAL_RCCEx_GetPLL2ClockFreq+0x136>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010fca:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010fcc:	ee07 3a90 	vmov	s15, r3
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010fd0:	4919      	ldr	r1, [pc, #100]	; (8011038 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010fd6:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010fd8:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010fe0:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8011034 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8010fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010fe8:	40d1      	lsrs	r1, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010fea:	ee06 3a10 	vmov	s12, r3
 8010fee:	ee05 1a90 	vmov	s11, r1
 8010ff2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8010ff6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8010ffa:	ee36 6a26 	vadd.f32	s12, s12, s13
 8010ffe:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8011002:	eef0 7a46 	vmov.f32	s15, s12
 8011006:	eee7 7a05 	vfma.f32	s15, s14, s10
 801100a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801100e:	e7a1      	b.n	8010f54 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8011010:	ee07 3a90 	vmov	s15, r3
 8011014:	ed9f 5a09 	vldr	s10, [pc, #36]	; 801103c <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8011018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801101c:	e787      	b.n	8010f2e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801101e:	ee07 3a90 	vmov	s15, r3
 8011022:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8011040 <HAL_RCCEx_GetPLL2ClockFreq+0x158>
 8011026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801102a:	e780      	b.n	8010f2e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 801102c:	58024400 	.word	0x58024400
 8011030:	4a742400 	.word	0x4a742400
 8011034:	39000000 	.word	0x39000000
 8011038:	03d09000 	.word	0x03d09000
 801103c:	4bbebc20 	.word	0x4bbebc20
 8011040:	4c742400 	.word	0x4c742400

08011044 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011044:	4a50      	ldr	r2, [pc, #320]	; (8011188 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
{
 8011046:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011048:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 801104a:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801104c:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 801104e:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8011052:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8011056:	6c54      	ldr	r4, [r2, #68]	; 0x44
  if (pll3m != 0U)
 8011058:	d05d      	beq.n	8011116 <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 801105a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801105e:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011062:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8011066:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 801106a:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 801106c:	ee07 4a90 	vmov	s15, r4
 8011070:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8011074:	d003      	beq.n	801107e <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 8011076:	2902      	cmp	r1, #2
 8011078:	d078      	beq.n	801116c <HAL_RCCEx_GetPLL3ClockFreq+0x128>
 801107a:	2900      	cmp	r1, #0
 801107c:	d050      	beq.n	8011120 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801107e:	ee07 3a90 	vmov	s15, r3
 8011082:	ed9f 5a42 	vldr	s10, [pc, #264]	; 801118c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8011086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801108a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801108c:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8011090:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8011190 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8011094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011098:	ee07 3a90 	vmov	s15, r3
 801109c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80110a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80110a4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80110a8:	eee7 7a06 	vfma.f32	s15, s14, s12
 80110ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80110b0:	4a35      	ldr	r2, [pc, #212]	; (8011188 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
 80110b2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80110b6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80110b8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80110bc:	ee07 3a90 	vmov	s15, r3
 80110c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80110c4:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80110c6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80110ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80110ce:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80110d2:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80110d6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80110d8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80110dc:	ee07 3a90 	vmov	s15, r3
 80110e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80110e4:	ee77 7a86 	vadd.f32	s15, s15, s12
 80110e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80110ec:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80110f0:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80110f4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80110f6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80110fa:	ee07 3a10 	vmov	s14, r3
 80110fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011102:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801110a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801110e:	ee17 3a90 	vmov	r3, s15
 8011112:	6083      	str	r3, [r0, #8]
}
 8011114:	4770      	bx	lr
 8011116:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8011118:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 801111c:	6083      	str	r3, [r0, #8]
}
 801111e:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011120:	6811      	ldr	r1, [r2, #0]
 8011122:	0689      	lsls	r1, r1, #26
 8011124:	d529      	bpl.n	801117a <HAL_RCCEx_GetPLL3ClockFreq+0x136>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8011126:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8011128:	ee07 3a90 	vmov	s15, r3
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801112c:	4919      	ldr	r1, [pc, #100]	; (8011194 <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801112e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011132:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8011134:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8011138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801113c:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8011190 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8011140:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8011144:	40d1      	lsrs	r1, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8011146:	ee06 3a10 	vmov	s12, r3
 801114a:	ee05 1a90 	vmov	s11, r1
 801114e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8011152:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8011156:	ee36 6a26 	vadd.f32	s12, s12, s13
 801115a:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 801115e:	eef0 7a46 	vmov.f32	s15, s12
 8011162:	eee7 7a05 	vfma.f32	s15, s14, s10
 8011166:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801116a:	e7a1      	b.n	80110b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801116c:	ee07 3a90 	vmov	s15, r3
 8011170:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8011198 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8011174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011178:	e787      	b.n	801108a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801117a:	ee07 3a90 	vmov	s15, r3
 801117e:	ed9f 5a07 	vldr	s10, [pc, #28]	; 801119c <HAL_RCCEx_GetPLL3ClockFreq+0x158>
 8011182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011186:	e780      	b.n	801108a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8011188:	58024400 	.word	0x58024400
 801118c:	4a742400 	.word	0x4a742400
 8011190:	39000000 	.word	0x39000000
 8011194:	03d09000 	.word	0x03d09000
 8011198:	4bbebc20 	.word	0x4bbebc20
 801119c:	4c742400 	.word	0x4c742400

080111a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80111a0:	4a50      	ldr	r2, [pc, #320]	; (80112e4 <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
{
 80111a2:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80111a4:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80111a6:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80111a8:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll1m != 0U)
 80111aa:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80111ae:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80111b2:	6b54      	ldr	r4, [r2, #52]	; 0x34
  if (pll1m != 0U)
 80111b4:	d05d      	beq.n	8011272 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80111b6:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80111ba:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80111be:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80111c2:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 80111c6:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80111c8:	ee07 4a90 	vmov	s15, r4
 80111cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 80111d0:	d003      	beq.n	80111da <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
 80111d2:	2902      	cmp	r1, #2
 80111d4:	d078      	beq.n	80112c8 <HAL_RCCEx_GetPLL1ClockFreq+0x128>
 80111d6:	2900      	cmp	r1, #0
 80111d8:	d050      	beq.n	801127c <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80111da:	ee07 3a90 	vmov	s15, r3
 80111de:	ed9f 5a42 	vldr	s10, [pc, #264]	; 80112e8 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 80111e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80111e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80111e8:	eec5 6a27 	vdiv.f32	s13, s10, s15
 80111ec:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 80112ec <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80111f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111f4:	ee07 3a90 	vmov	s15, r3
 80111f8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80111fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011200:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8011204:	eee7 7a06 	vfma.f32	s15, s14, s12
 8011208:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 801120c:	4a35      	ldr	r2, [pc, #212]	; (80112e4 <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
 801120e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8011212:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011214:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8011218:	ee07 3a90 	vmov	s15, r3
 801121c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8011220:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8011222:	ee77 7a86 	vadd.f32	s15, s15, s12
 8011226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801122a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 801122e:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8011232:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011234:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8011238:	ee07 3a90 	vmov	s15, r3
 801123c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011240:	ee77 7a86 	vadd.f32	s15, s15, s12
 8011244:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011248:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 801124c:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8011250:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011252:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8011256:	ee07 3a10 	vmov	s14, r3
 801125a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801125e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011262:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801126a:	ee17 3a90 	vmov	r3, s15
 801126e:	6083      	str	r3, [r0, #8]
}
 8011270:	4770      	bx	lr
 8011272:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8011274:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8011278:	6083      	str	r3, [r0, #8]
}
 801127a:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801127c:	6811      	ldr	r1, [r2, #0]
 801127e:	0689      	lsls	r1, r1, #26
 8011280:	d529      	bpl.n	80112d6 <HAL_RCCEx_GetPLL1ClockFreq+0x136>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8011282:	6814      	ldr	r4, [r2, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011284:	ee07 3a90 	vmov	s15, r3
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8011288:	4919      	ldr	r1, [pc, #100]	; (80112f0 <HAL_RCCEx_GetPLL1ClockFreq+0x150>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801128a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801128e:	6b13      	ldr	r3, [r2, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8011290:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011298:	ed9f 5a14 	vldr	s10, [pc, #80]	; 80112ec <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 801129c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80112a0:	40d1      	lsrs	r1, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80112a2:	ee06 3a10 	vmov	s12, r3
 80112a6:	ee05 1a90 	vmov	s11, r1
 80112aa:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80112ae:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80112b2:	ee36 6a26 	vadd.f32	s12, s12, s13
 80112b6:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 80112ba:	eef0 7a46 	vmov.f32	s15, s12
 80112be:	eee7 7a05 	vfma.f32	s15, s14, s10
 80112c2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80112c6:	e7a1      	b.n	801120c <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80112c8:	ee07 3a90 	vmov	s15, r3
 80112cc:	ed9f 5a09 	vldr	s10, [pc, #36]	; 80112f4 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 80112d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80112d4:	e787      	b.n	80111e6 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80112d6:	ee07 3a90 	vmov	s15, r3
 80112da:	ed9f 5a07 	vldr	s10, [pc, #28]	; 80112f8 <HAL_RCCEx_GetPLL1ClockFreq+0x158>
 80112de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80112e2:	e780      	b.n	80111e6 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 80112e4:	58024400 	.word	0x58024400
 80112e8:	4a742400 	.word	0x4a742400
 80112ec:	39000000 	.word	0x39000000
 80112f0:	03d09000 	.word	0x03d09000
 80112f4:	4bbebc20 	.word	0x4bbebc20
 80112f8:	4c742400 	.word	0x4c742400

080112fc <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80112fc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8011300:	b500      	push	{lr}
 8011302:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8011304:	d050      	beq.n	80113a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8011306:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 801130a:	d019      	beq.n	8011340 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 801130c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8011310:	f000 808a 	beq.w	8011428 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8011314:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8011318:	d05a      	beq.n	80113d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801131a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 801131e:	d034      	beq.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8011320:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8011324:	f000 80b1 	beq.w	801148a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8011328:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801132c:	f000 80be 	beq.w	80114ac <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8011330:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8011334:	f000 8096 	beq.w	8011464 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      frequency = 0;
 8011338:	2000      	movs	r0, #0
}
 801133a:	b005      	add	sp, #20
 801133c:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8011340:	4a70      	ldr	r2, [pc, #448]	; (8011504 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8011342:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8011344:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8011348:	2b80      	cmp	r3, #128	; 0x80
 801134a:	d059      	beq.n	8011400 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 801134c:	d912      	bls.n	8011374 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 801134e:	2bc0      	cmp	r3, #192	; 0xc0
 8011350:	d026      	beq.n	80113a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8011352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011356:	d1ef      	bne.n	8011338 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8011358:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 801135a:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 801135e:	d05b      	beq.n	8011418 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8011360:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011364:	f000 80a0 	beq.w	80114a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
            frequency = HSE_VALUE;
 8011368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801136c:	4866      	ldr	r0, [pc, #408]	; (8011508 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 801136e:	bf18      	it	ne
 8011370:	2000      	movne	r0, #0
 8011372:	e7e2      	b.n	801133a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      switch (saiclocksource)
 8011374:	2b00      	cmp	r3, #0
 8011376:	d03c      	beq.n	80113f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8011378:	2b40      	cmp	r3, #64	; 0x40
 801137a:	d1dd      	bne.n	8011338 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801137c:	a801      	add	r0, sp, #4
 801137e:	f7ff fdb3 	bl	8010ee8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011382:	9801      	ldr	r0, [sp, #4]
}
 8011384:	b005      	add	sp, #20
 8011386:	f85d fb04 	ldr.w	pc, [sp], #4
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 801138a:	4a5e      	ldr	r2, [pc, #376]	; (8011504 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 801138c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 801138e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8011392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011396:	d033      	beq.n	8011400 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8011398:	d929      	bls.n	80113ee <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 801139a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801139e:	d158      	bne.n	8011452 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
          frequency = EXTERNAL_CLOCK_VALUE;
 80113a0:	485a      	ldr	r0, [pc, #360]	; (801150c <HAL_RCCEx_GetPeriphCLKFreq+0x210>)
}
 80113a2:	b005      	add	sp, #20
 80113a4:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80113a8:	4b56      	ldr	r3, [pc, #344]	; (8011504 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 80113aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80113ac:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 80113b0:	2b04      	cmp	r3, #4
 80113b2:	d8c1      	bhi.n	8011338 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80113b4:	a201      	add	r2, pc, #4	; (adr r2, 80113bc <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80113b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113ba:	bf00      	nop
 80113bc:	080113f3 	.word	0x080113f3
 80113c0:	0801137d 	.word	0x0801137d
 80113c4:	08011401 	.word	0x08011401
 80113c8:	080113a1 	.word	0x080113a1
 80113cc:	0801140f 	.word	0x0801140f
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80113d0:	4a4c      	ldr	r2, [pc, #304]	; (8011504 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 80113d2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80113d4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 80113d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80113dc:	d010      	beq.n	8011400 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80113de:	d91d      	bls.n	801141c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80113e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80113e4:	d0dc      	beq.n	80113a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 80113e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80113ea:	d0b5      	beq.n	8011358 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 80113ec:	e7a4      	b.n	8011338 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (srcclk)
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d134      	bne.n	801145c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80113f2:	a801      	add	r0, sp, #4
 80113f4:	f7ff fed4 	bl	80111a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80113f8:	9802      	ldr	r0, [sp, #8]
}
 80113fa:	b005      	add	sp, #20
 80113fc:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011400:	a801      	add	r0, sp, #4
 8011402:	f7ff fe1f 	bl	8011044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8011406:	9801      	ldr	r0, [sp, #4]
}
 8011408:	b005      	add	sp, #20
 801140a:	f85d fb04 	ldr.w	pc, [sp], #4
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 801140e:	4b3d      	ldr	r3, [pc, #244]	; (8011504 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8011410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8011412:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8011416:	d1a3      	bne.n	8011360 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = HSI_VALUE;
 8011418:	483d      	ldr	r0, [pc, #244]	; (8011510 <HAL_RCCEx_GetPeriphCLKFreq+0x214>)
 801141a:	e78e      	b.n	801133a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      switch (saiclocksource)
 801141c:	2b00      	cmp	r3, #0
 801141e:	d0e8      	beq.n	80113f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8011420:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011424:	d0aa      	beq.n	801137c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 8011426:	e787      	b.n	8011338 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8011428:	4a36      	ldr	r2, [pc, #216]	; (8011504 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 801142a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 801142c:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8011430:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011434:	d0e4      	beq.n	8011400 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8011436:	d805      	bhi.n	8011444 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8011438:	2b00      	cmp	r3, #0
 801143a:	d0da      	beq.n	80113f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 801143c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011440:	d09c      	beq.n	801137c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 8011442:	e779      	b.n	8011338 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8011444:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8011448:	d0aa      	beq.n	80113a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 801144a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801144e:	d083      	beq.n	8011358 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8011450:	e772      	b.n	8011338 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (srcclk)
 8011452:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011456:	f43f af7f 	beq.w	8011358 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 801145a:	e76d      	b.n	8011338 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 801145c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011460:	d08c      	beq.n	801137c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 8011462:	e769      	b.n	8011338 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8011464:	4b27      	ldr	r3, [pc, #156]	; (8011504 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8011466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011468:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 801146c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011470:	d0d2      	beq.n	8011418 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 8011472:	d824      	bhi.n	80114be <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8011474:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011478:	d03e      	beq.n	80114f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 801147a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801147e:	d127      	bne.n	80114d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011480:	a801      	add	r0, sp, #4
 8011482:	f7ff fddf 	bl	8011044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8011486:	9802      	ldr	r0, [sp, #8]
          break;
 8011488:	e757      	b.n	801133a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 801148a:	4a1e      	ldr	r2, [pc, #120]	; (8011504 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 801148c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 801148e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8011492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011496:	d02a      	beq.n	80114ee <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8011498:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801149c:	f43f af5c 	beq.w	8011358 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	f47f af49 	bne.w	8011338 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80114a6:	e769      	b.n	801137c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
      switch (srcclk)
 80114a8:	481a      	ldr	r0, [pc, #104]	; (8011514 <HAL_RCCEx_GetPeriphCLKFreq+0x218>)
 80114aa:	e746      	b.n	801133a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80114ac:	4b15      	ldr	r3, [pc, #84]	; (8011504 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 80114ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 80114b0:	03db      	lsls	r3, r3, #15
 80114b2:	d59e      	bpl.n	80113f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80114b4:	a801      	add	r0, sp, #4
 80114b6:	f7ff fd17 	bl	8010ee8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80114ba:	9803      	ldr	r0, [sp, #12]
          break;
 80114bc:	e73d      	b.n	801133a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      switch (srcclk)
 80114be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80114c2:	d0f1      	beq.n	80114a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          frequency = HSE_VALUE;
 80114c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80114c8:	480f      	ldr	r0, [pc, #60]	; (8011508 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 80114ca:	bf18      	it	ne
 80114cc:	2000      	movne	r0, #0
 80114ce:	e734      	b.n	801133a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      switch (srcclk)
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	f47f af31 	bne.w	8011338 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80114d6:	f7fe fdcb 	bl	8010070 <HAL_RCC_GetHCLKFreq>
 80114da:	4b0a      	ldr	r3, [pc, #40]	; (8011504 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 80114dc:	4a0e      	ldr	r2, [pc, #56]	; (8011518 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>)
 80114de:	6a1b      	ldr	r3, [r3, #32]
 80114e0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80114e4:	5cd3      	ldrb	r3, [r2, r3]
 80114e6:	f003 031f 	and.w	r3, r3, #31
 80114ea:	40d8      	lsrs	r0, r3
          break;
 80114ec:	e725      	b.n	801133a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80114ee:	a801      	add	r0, sp, #4
 80114f0:	f7ff fda8 	bl	8011044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80114f4:	9803      	ldr	r0, [sp, #12]
          break;
 80114f6:	e720      	b.n	801133a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80114f8:	a801      	add	r0, sp, #4
 80114fa:	f7ff fcf5 	bl	8010ee8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80114fe:	9802      	ldr	r0, [sp, #8]
          break;
 8011500:	e71b      	b.n	801133a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8011502:	bf00      	nop
 8011504:	58024400 	.word	0x58024400
 8011508:	017d7840 	.word	0x017d7840
 801150c:	00bb8000 	.word	0x00bb8000
 8011510:	03d09000 	.word	0x03d09000
 8011514:	003d0900 	.word	0x003d0900
 8011518:	08098978 	.word	0x08098978

0801151c <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 801151c:	2800      	cmp	r0, #0
 801151e:	d036      	beq.n	801158e <HAL_RNG_Init+0x72>
{
 8011520:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8011522:	7a43      	ldrb	r3, [r0, #9]
 8011524:	4604      	mov	r4, r0
 8011526:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801152a:	b333      	cbz	r3, 801157a <HAL_RNG_Init+0x5e>
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 801152c:	6823      	ldr	r3, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 801152e:	2202      	movs	r2, #2
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8011530:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
 8011532:	7262      	strb	r2, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8011534:	681a      	ldr	r2, [r3, #0]
 8011536:	f022 0220 	bic.w	r2, r2, #32
 801153a:	430a      	orrs	r2, r1
 801153c:	601a      	str	r2, [r3, #0]
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 801153e:	681a      	ldr	r2, [r3, #0]
 8011540:	f042 0204 	orr.w	r2, r2, #4
 8011544:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8011546:	685b      	ldr	r3, [r3, #4]
 8011548:	065b      	lsls	r3, r3, #25
 801154a:	d503      	bpl.n	8011554 <HAL_RNG_Init+0x38>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 801154c:	2304      	movs	r3, #4
    return HAL_ERROR;
 801154e:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 8011550:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 8011552:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 8011554:	f7fa f992 	bl	800b87c <HAL_GetTick>
 8011558:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 801155a:	e004      	b.n	8011566 <HAL_RNG_Init+0x4a>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801155c:	f7fa f98e 	bl	800b87c <HAL_GetTick>
 8011560:	1b43      	subs	r3, r0, r5
 8011562:	2b02      	cmp	r3, #2
 8011564:	d80d      	bhi.n	8011582 <HAL_RNG_Init+0x66>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8011566:	6823      	ldr	r3, [r4, #0]
 8011568:	685b      	ldr	r3, [r3, #4]
 801156a:	f013 0304 	ands.w	r3, r3, #4
 801156e:	d1f5      	bne.n	801155c <HAL_RNG_Init+0x40>
  hrng->State = HAL_RNG_STATE_READY;
 8011570:	2201      	movs	r2, #1
  return HAL_OK;
 8011572:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 8011574:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8011576:	60e3      	str	r3, [r4, #12]
}
 8011578:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 801157a:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 801157c:	f7f5 fb6e 	bl	8006c5c <HAL_RNG_MspInit>
 8011580:	e7d4      	b.n	801152c <HAL_RNG_Init+0x10>
      hrng->State = HAL_RNG_STATE_ERROR;
 8011582:	2204      	movs	r2, #4
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8011584:	2302      	movs	r3, #2
      return HAL_ERROR;
 8011586:	2001      	movs	r0, #1
      hrng->State = HAL_RNG_STATE_ERROR;
 8011588:	7262      	strb	r2, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801158a:	60e3      	str	r3, [r4, #12]
}
 801158c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 801158e:	2001      	movs	r0, #1
}
 8011590:	4770      	bx	lr
 8011592:	bf00      	nop

08011594 <HAL_RNG_DeInit>:
#if defined(RNG_CR_CONDRST)
  uint32_t tickstart;

#endif /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8011594:	b1b0      	cbz	r0, 80115c4 <HAL_RNG_DeInit+0x30>
    }
  }

#else
  /* Clear Clock Error Detection bit */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CED);
 8011596:	6803      	ldr	r3, [r0, #0]
 8011598:	681a      	ldr	r2, [r3, #0]
 801159a:	f022 0220 	bic.w	r2, r2, #32
{
 801159e:	b510      	push	{r4, lr}
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CED);
 80115a0:	601a      	str	r2, [r3, #0]
 80115a2:	4604      	mov	r4, r0
#endif /* RNG_CR_CONDRST */
  /* Disable the RNG Peripheral */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 80115a4:	681a      	ldr	r2, [r3, #0]
 80115a6:	f022 020c 	bic.w	r2, r2, #12
 80115aa:	601a      	str	r2, [r3, #0]

  /* Clear RNG interrupt status flags */
  CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
 80115ac:	685a      	ldr	r2, [r3, #4]
 80115ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80115b2:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  hrng->MspDeInitCallback(hrng);
#else
  /* DeInit the low level hardware */
  HAL_RNG_MspDeInit(hrng);
 80115b4:	f7f5 fb70 	bl	8006c98 <HAL_RNG_MspDeInit>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Update the RNG state */
  hrng->State = HAL_RNG_STATE_RESET;
 80115b8:	2300      	movs	r3, #0
 80115ba:	7263      	strb	r3, [r4, #9]

  /* Release Lock */
  __HAL_UNLOCK(hrng);

  /* Return the function status */
  return HAL_OK;
 80115bc:	4618      	mov	r0, r3
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80115be:	60e3      	str	r3, [r4, #12]
  __HAL_UNLOCK(hrng);
 80115c0:	7223      	strb	r3, [r4, #8]
}
 80115c2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80115c4:	2001      	movs	r0, #1
}
 80115c6:	4770      	bx	lr

080115c8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80115c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 80115cc:	7a03      	ldrb	r3, [r0, #8]
 80115ce:	2b01      	cmp	r3, #1
 80115d0:	d028      	beq.n	8011624 <HAL_RNG_GenerateRandomNumber+0x5c>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80115d2:	7a43      	ldrb	r3, [r0, #9]
  __HAL_LOCK(hrng);
 80115d4:	2201      	movs	r2, #1
 80115d6:	4604      	mov	r4, r0
  if (hrng->State == HAL_RNG_STATE_READY)
 80115d8:	4293      	cmp	r3, r2
 80115da:	fa5f f883 	uxtb.w	r8, r3
  __HAL_LOCK(hrng);
 80115de:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 80115e0:	d007      	beq.n	80115f2 <HAL_RNG_GenerateRandomNumber+0x2a>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80115e2:	2304      	movs	r3, #4
    status = HAL_ERROR;
 80115e4:	4690      	mov	r8, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80115e6:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80115e8:	2300      	movs	r3, #0
 80115ea:	7223      	strb	r3, [r4, #8]

  return status;
}
 80115ec:	4640      	mov	r0, r8
 80115ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 80115f2:	2302      	movs	r3, #2
 80115f4:	460e      	mov	r6, r1
 80115f6:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 80115f8:	f7fa f940 	bl	800b87c <HAL_GetTick>
 80115fc:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80115fe:	e004      	b.n	801160a <HAL_RNG_GenerateRandomNumber+0x42>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8011600:	f7fa f93c 	bl	800b87c <HAL_GetTick>
 8011604:	1bc0      	subs	r0, r0, r7
 8011606:	2802      	cmp	r0, #2
 8011608:	d811      	bhi.n	801162e <HAL_RNG_GenerateRandomNumber+0x66>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801160a:	6822      	ldr	r2, [r4, #0]
 801160c:	6855      	ldr	r5, [r2, #4]
 801160e:	f015 0501 	ands.w	r5, r5, #1
 8011612:	d0f5      	beq.n	8011600 <HAL_RNG_GenerateRandomNumber+0x38>
    hrng->RandomNumber = hrng->Instance->DR;
 8011614:	6893      	ldr	r3, [r2, #8]
    hrng->State = HAL_RNG_STATE_READY;
 8011616:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 8011618:	f04f 0800 	mov.w	r8, #0
    hrng->RandomNumber = hrng->Instance->DR;
 801161c:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 801161e:	6033      	str	r3, [r6, #0]
    hrng->State = HAL_RNG_STATE_READY;
 8011620:	7262      	strb	r2, [r4, #9]
 8011622:	e7e1      	b.n	80115e8 <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
 8011624:	f04f 0802 	mov.w	r8, #2
}
 8011628:	4640      	mov	r0, r8
 801162a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hrng->State = HAL_RNG_STATE_READY;
 801162e:	2201      	movs	r2, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8011630:	2302      	movs	r3, #2
        __HAL_UNLOCK(hrng);
 8011632:	7225      	strb	r5, [r4, #8]
        hrng->State = HAL_RNG_STATE_READY;
 8011634:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8011636:	60e3      	str	r3, [r4, #12]
        return HAL_ERROR;
 8011638:	e7d8      	b.n	80115ec <HAL_RNG_GenerateRandomNumber+0x24>
 801163a:	bf00      	nop

0801163c <SD_HighSpeed>:
  *         of PLL to have SDMMCCK clock between 50 and 120 MHz
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SD_HighSpeed(SD_HandleTypeDef *hsd)
{
 801163c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 8011640:	2540      	movs	r5, #64	; 0x40
{
 8011642:	b096      	sub	sp, #88	; 0x58
 8011644:	4604      	mov	r4, r0
  uint32_t SD_hs[16]  = {0};
 8011646:	2100      	movs	r1, #0
 8011648:	462a      	mov	r2, r5
 801164a:	a806      	add	r0, sp, #24
 801164c:	f014 ff99 	bl	8026582 <memset>
  uint32_t count, loop = 0 ;
  uint32_t Timeout = HAL_GetTick();
 8011650:	f7fa f914 	bl	800b87c <HAL_GetTick>

  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 8011654:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8011656:	b13b      	cbz	r3, 8011668 <SD_HighSpeed+0x2c>
  {
     /* Standard Speed Card <= 12.5Mhz  */
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
  }

  if(hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8011658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801165c:	d00a      	beq.n	8011674 <SD_HighSpeed+0x38>
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 801165e:	2600      	movs	r6, #0
    }

  }

  return errorstate;
}
 8011660:	4630      	mov	r0, r6
 8011662:	b016      	add	sp, #88	; 0x58
 8011664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8011668:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
}
 801166c:	4630      	mov	r0, r6
 801166e:	b016      	add	sp, #88	; 0x58
 8011670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->Instance->DCTRL = 0;
 8011674:	2300      	movs	r3, #0
 8011676:	4607      	mov	r7, r0
 8011678:	6820      	ldr	r0, [r4, #0]
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 801167a:	4629      	mov	r1, r5
    hsd->Instance->DCTRL = 0;
 801167c:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 801167e:	f002 fbeb 	bl	8013e58 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_SD_ERROR_NONE)
 8011682:	4606      	mov	r6, r0
 8011684:	2800      	cmp	r0, #0
 8011686:	d1eb      	bne.n	8011660 <SD_HighSpeed+0x24>
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 8011688:	2360      	movs	r3, #96	; 0x60
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 801168a:	f04f 32ff 	mov.w	r2, #4294967295
    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 801168e:	4669      	mov	r1, sp
 8011690:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 8011692:	9302      	str	r3, [sp, #8]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8011694:	2302      	movs	r3, #2
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011696:	9200      	str	r2, [sp, #0]
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8011698:	2200      	movs	r2, #0
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801169a:	9303      	str	r3, [sp, #12]
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801169c:	2301      	movs	r3, #1
    sdmmc_datainitstructure.DataLength    = 64U;
 801169e:	9501      	str	r5, [sp, #4]
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80116a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 80116a4:	f002 fbc2 	bl	8013e2c <SDMMC_ConfigData>
    errorstate = SDMMC_CmdSwitch(hsd->Instance,SDMMC_SDR25_SWITCH_PATTERN);
 80116a8:	4926      	ldr	r1, [pc, #152]	; (8011744 <SD_HighSpeed+0x108>)
 80116aa:	6820      	ldr	r0, [r4, #0]
 80116ac:	f003 fdc8 	bl	8015240 <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 80116b0:	4606      	mov	r6, r0
 80116b2:	2800      	cmp	r0, #0
 80116b4:	d1d4      	bne.n	8011660 <SD_HighSpeed+0x24>
  uint32_t count, loop = 0 ;
 80116b6:	4681      	mov	r9, r0
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 80116b8:	f240 5a2a 	movw	sl, #1322	; 0x52a
 80116bc:	e004      	b.n	80116c8 <SD_HighSpeed+0x8c>
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 80116be:	f7fa f8dd 	bl	800b87c <HAL_GetTick>
 80116c2:	1bc0      	subs	r0, r0, r7
 80116c4:	3001      	adds	r0, #1
 80116c6:	d02a      	beq.n	801171e <SD_HighSpeed+0xe2>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 80116c8:	6820      	ldr	r0, [r4, #0]
 80116ca:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80116cc:	ea12 0f0a 	tst.w	r2, sl
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80116d0:	6b42      	ldr	r2, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 80116d2:	d112      	bne.n	80116fa <SD_HighSpeed+0xbe>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80116d4:	0415      	lsls	r5, r2, #16
 80116d6:	d5f2      	bpl.n	80116be <SD_HighSpeed+0x82>
 80116d8:	ab06      	add	r3, sp, #24
 80116da:	eb03 1549 	add.w	r5, r3, r9, lsl #5
 80116de:	ab0e      	add	r3, sp, #56	; 0x38
 80116e0:	eb03 1849 	add.w	r8, r3, r9, lsl #5
 80116e4:	e000      	b.n	80116e8 <SD_HighSpeed+0xac>
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 80116e6:	6820      	ldr	r0, [r4, #0]
 80116e8:	f002 fb7e 	bl	8013de8 <SDMMC_ReadFIFO>
 80116ec:	f845 0b04 	str.w	r0, [r5], #4
        for (count = 0U; count < 8U; count++)
 80116f0:	4545      	cmp	r5, r8
 80116f2:	d1f8      	bne.n	80116e6 <SD_HighSpeed+0xaa>
        loop ++;
 80116f4:	f109 0901 	add.w	r9, r9, #1
 80116f8:	e7e1      	b.n	80116be <SD_HighSpeed+0x82>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80116fa:	0711      	lsls	r1, r2, #28
 80116fc:	d416      	bmi.n	801172c <SD_HighSpeed+0xf0>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80116fe:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8011700:	0792      	lsls	r2, r2, #30
 8011702:	d416      	bmi.n	8011732 <SD_HighSpeed+0xf6>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8011704:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8011706:	0693      	lsls	r3, r2, #26
 8011708:	d417      	bmi.n	801173a <SD_HighSpeed+0xfe>
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 801170a:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801170e:	490e      	ldr	r1, [pc, #56]	; (8011748 <SD_HighSpeed+0x10c>)
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8011710:	f082 0202 	eor.w	r2, r2, #2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011714:	6381      	str	r1, [r0, #56]	; 0x38
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8011716:	f3c2 0240 	ubfx	r2, r2, #1, #1
 801171a:	0716      	lsls	r6, r2, #28
 801171c:	e7a0      	b.n	8011660 <SD_HighSpeed+0x24>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 801171e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 8011722:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8011724:	63a6      	str	r6, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8011726:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_SD_ERROR_TIMEOUT;
 801172a:	e799      	b.n	8011660 <SD_HighSpeed+0x24>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 801172c:	2208      	movs	r2, #8
 801172e:	6382      	str	r2, [r0, #56]	; 0x38
      return errorstate;
 8011730:	e796      	b.n	8011660 <SD_HighSpeed+0x24>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8011732:	2202      	movs	r2, #2
      return errorstate;
 8011734:	4616      	mov	r6, r2
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8011736:	6382      	str	r2, [r0, #56]	; 0x38
      return errorstate;
 8011738:	e792      	b.n	8011660 <SD_HighSpeed+0x24>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 801173a:	2220      	movs	r2, #32
      return errorstate;
 801173c:	4616      	mov	r6, r2
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 801173e:	6382      	str	r2, [r0, #56]	; 0x38
      return errorstate;
 8011740:	e78e      	b.n	8011660 <SD_HighSpeed+0x24>
 8011742:	bf00      	nop
 8011744:	80ffff01 	.word	0x80ffff01
 8011748:	18000f3a 	.word	0x18000f3a

0801174c <SD_FindSCR.constprop.0>:
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 801174c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011750:	4605      	mov	r5, r0
 8011752:	b086      	sub	sp, #24
 8011754:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8011756:	f7fa f891 	bl	800b87c <HAL_GetTick>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 801175a:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 801175c:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 801175e:	6828      	ldr	r0, [r5, #0]
 8011760:	f002 fb7a 	bl	8013e58 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011764:	4604      	mov	r4, r0
 8011766:	b118      	cbz	r0, 8011770 <SD_FindSCR.constprop.0+0x24>
}
 8011768:	4620      	mov	r0, r4
 801176a:	b006      	add	sp, #24
 801176c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8011770:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8011772:	6828      	ldr	r0, [r5, #0]
 8011774:	0409      	lsls	r1, r1, #16
 8011776:	f003 f8ef 	bl	8014958 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 801177a:	4604      	mov	r4, r0
 801177c:	2800      	cmp	r0, #0
 801177e:	d1f3      	bne.n	8011768 <SD_FindSCR.constprop.0+0x1c>
  config.DataLength    = 8U;
 8011780:	f04f 32ff 	mov.w	r2, #4294967295
 8011784:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8011786:	4669      	mov	r1, sp
 8011788:	6828      	ldr	r0, [r5, #0]
  config.DataLength    = 8U;
 801178a:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801178e:	2230      	movs	r2, #48	; 0x30
 8011790:	2302      	movs	r3, #2
 8011792:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8011796:	2200      	movs	r2, #0
 8011798:	2301      	movs	r3, #1
 801179a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 801179e:	f002 fb45 	bl	8013e2c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80117a2:	6828      	ldr	r0, [r5, #0]
 80117a4:	f003 fa70 	bl	8014c88 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80117a8:	4604      	mov	r4, r0
 80117aa:	2800      	cmp	r0, #0
 80117ac:	d1dc      	bne.n	8011768 <SD_FindSCR.constprop.0+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 80117ae:	4682      	mov	sl, r0
 80117b0:	4681      	mov	r9, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80117b2:	f240 582a 	movw	r8, #1322	; 0x52a
 80117b6:	e004      	b.n	80117c2 <SD_FindSCR.constprop.0+0x76>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80117b8:	f7fa f860 	bl	800b87c <HAL_GetTick>
 80117bc:	1b83      	subs	r3, r0, r6
 80117be:	3301      	adds	r3, #1
 80117c0:	d024      	beq.n	801180c <SD_FindSCR.constprop.0+0xc0>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80117c2:	6828      	ldr	r0, [r5, #0]
 80117c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80117c6:	ea13 0f08 	tst.w	r3, r8
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80117ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80117cc:	d10c      	bne.n	80117e8 <SD_FindSCR.constprop.0+0x9c>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80117ce:	0319      	lsls	r1, r3, #12
 80117d0:	d4f2      	bmi.n	80117b8 <SD_FindSCR.constprop.0+0x6c>
 80117d2:	2c00      	cmp	r4, #0
 80117d4:	d1f0      	bne.n	80117b8 <SD_FindSCR.constprop.0+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80117d6:	f002 fb07 	bl	8013de8 <SDMMC_ReadFIFO>
 80117da:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80117dc:	6828      	ldr	r0, [r5, #0]
      index++;
 80117de:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80117e0:	f002 fb02 	bl	8013de8 <SDMMC_ReadFIFO>
 80117e4:	4682      	mov	sl, r0
      index++;
 80117e6:	e7e7      	b.n	80117b8 <SD_FindSCR.constprop.0+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80117e8:	071a      	lsls	r2, r3, #28
 80117ea:	d416      	bmi.n	801181a <SD_FindSCR.constprop.0+0xce>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80117ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80117ee:	079b      	lsls	r3, r3, #30
 80117f0:	d40f      	bmi.n	8011812 <SD_FindSCR.constprop.0+0xc6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80117f2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80117f4:	f014 0420 	ands.w	r4, r4, #32
 80117f8:	d113      	bne.n	8011822 <SD_FindSCR.constprop.0+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80117fa:	fa9a f28a 	rev.w	r2, sl
 80117fe:	fa99 f389 	rev.w	r3, r9
 8011802:	490a      	ldr	r1, [pc, #40]	; (801182c <SD_FindSCR.constprop.0+0xe0>)
 8011804:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8011806:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 801180a:	e7ad      	b.n	8011768 <SD_FindSCR.constprop.0+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 801180c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8011810:	e7aa      	b.n	8011768 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8011812:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8011814:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8011816:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8011818:	e7a6      	b.n	8011768 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 801181a:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
 801181c:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 801181e:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8011820:	e7a2      	b.n	8011768 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8011822:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
 8011824:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8011826:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8011828:	e79e      	b.n	8011768 <SD_FindSCR.constprop.0+0x1c>
 801182a:	bf00      	nop
 801182c:	18000f3a 	.word	0x18000f3a

08011830 <HAL_SD_MspInit>:
 8011830:	4770      	bx	lr
 8011832:	bf00      	nop

08011834 <HAL_SD_MspDeInit>:
 8011834:	4770      	bx	lr
 8011836:	bf00      	nop

08011838 <HAL_SD_ReadBlocks>:
{
 8011838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801183c:	460d      	mov	r5, r1
 801183e:	b087      	sub	sp, #28
 8011840:	4604      	mov	r4, r0
 8011842:	4692      	mov	sl, r2
 8011844:	461f      	mov	r7, r3
 8011846:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 801184a:	f7fa f817 	bl	800b87c <HAL_GetTick>
  if(NULL == pData)
 801184e:	2d00      	cmp	r5, #0
 8011850:	d066      	beq.n	8011920 <HAL_SD_ReadBlocks+0xe8>
  if(hsd->State == HAL_SD_STATE_READY)
 8011852:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8011856:	2b01      	cmp	r3, #1
 8011858:	fa5f f983 	uxtb.w	r9, r3
 801185c:	d150      	bne.n	8011900 <HAL_SD_ReadBlocks+0xc8>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801185e:	eb0a 0307 	add.w	r3, sl, r7
 8011862:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8011864:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8011866:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8011868:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801186a:	d863      	bhi.n	8011934 <HAL_SD_ReadBlocks+0xfc>
    hsd->State = HAL_SD_STATE_BUSY;
 801186c:	2303      	movs	r3, #3
 801186e:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
 8011870:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8011872:	f04f 0b02 	mov.w	fp, #2
    hsd->State = HAL_SD_STATE_BUSY;
 8011876:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801187a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 801187c:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 801187e:	4669      	mov	r1, sp
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8011880:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8011882:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8011886:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801188a:	f04f 33ff 	mov.w	r3, #4294967295
      add *= 512U;
 801188e:	bf18      	it	ne
 8011890:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011894:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8011896:	027b      	lsls	r3, r7, #9
 8011898:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801189a:	2390      	movs	r3, #144	; 0x90
 801189c:	e9cd 3b02 	strd	r3, fp, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80118a0:	f002 fac4 	bl	8013e2c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80118a4:	6820      	ldr	r0, [r4, #0]
    if(NumberOfBlocks > 1U)
 80118a6:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80118a8:	68c3      	ldr	r3, [r0, #12]
 80118aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118ae:	60c3      	str	r3, [r0, #12]
    if(NumberOfBlocks > 1U)
 80118b0:	d930      	bls.n	8011914 <HAL_SD_ReadBlocks+0xdc>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80118b2:	4651      	mov	r1, sl
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80118b4:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80118b8:	f002 fc2a 	bl	8014110 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 80118bc:	2800      	cmp	r0, #0
 80118be:	d141      	bne.n	8011944 <HAL_SD_ReadBlocks+0x10c>
    dataremaining = config.DataLength;
 80118c0:	f8dd b004 	ldr.w	fp, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80118c4:	e004      	b.n	80118d0 <HAL_SD_ReadBlocks+0x98>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80118c6:	f7f9 ffd9 	bl	800b87c <HAL_GetTick>
 80118ca:	1b80      	subs	r0, r0, r6
 80118cc:	4540      	cmp	r0, r8
 80118ce:	d265      	bcs.n	801199c <HAL_SD_ReadBlocks+0x164>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80118d0:	6820      	ldr	r0, [r4, #0]
 80118d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80118d4:	f413 7f95 	tst.w	r3, #298	; 0x12a
 80118d8:	d140      	bne.n	801195c <HAL_SD_ReadBlocks+0x124>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80118da:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80118dc:	041a      	lsls	r2, r3, #16
 80118de:	d5f2      	bpl.n	80118c6 <HAL_SD_ReadBlocks+0x8e>
 80118e0:	f1bb 0f1f 	cmp.w	fp, #31
 80118e4:	d9ef      	bls.n	80118c6 <HAL_SD_ReadBlocks+0x8e>
 80118e6:	f105 0a20 	add.w	sl, r5, #32
 80118ea:	e000      	b.n	80118ee <HAL_SD_ReadBlocks+0xb6>
          data = SDMMC_ReadFIFO(hsd->Instance);
 80118ec:	6820      	ldr	r0, [r4, #0]
 80118ee:	f002 fa7b 	bl	8013de8 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 80118f2:	f845 0b04 	str.w	r0, [r5], #4
        for(count = 0U; count < 8U; count++)
 80118f6:	45aa      	cmp	sl, r5
 80118f8:	d1f8      	bne.n	80118ec <HAL_SD_ReadBlocks+0xb4>
        dataremaining -= 32U;
 80118fa:	f1ab 0b20 	sub.w	fp, fp, #32
 80118fe:	e7e2      	b.n	80118c6 <HAL_SD_ReadBlocks+0x8e>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8011900:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8011902:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8011906:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801190a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 801190c:	4648      	mov	r0, r9
 801190e:	b007      	add	sp, #28
 8011910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8011914:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8011916:	4651      	mov	r1, sl
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8011918:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 801191a:	f002 fb4b 	bl	8013fb4 <SDMMC_CmdReadSingleBlock>
 801191e:	e7cd      	b.n	80118bc <HAL_SD_ReadBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8011920:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8011922:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8011926:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 801192a:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801192c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 801192e:	b007      	add	sp, #28
 8011930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8011934:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
 8011936:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8011938:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801193c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 801193e:	b007      	add	sp, #28
 8011940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011944:	6823      	ldr	r3, [r4, #0]
 8011946:	4a30      	ldr	r2, [pc, #192]	; (8011a08 <HAL_SD_ReadBlocks+0x1d0>)
 8011948:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 801194a:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 801194c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801194e:	4303      	orrs	r3, r0
 8011950:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->Context = SD_CONTEXT_NONE;
 8011952:	2300      	movs	r3, #0
          hsd->State = HAL_SD_STATE_READY;
 8011954:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8011958:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 801195a:	e7d7      	b.n	801190c <HAL_SD_ReadBlocks+0xd4>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 801195c:	68c3      	ldr	r3, [r0, #12]
 801195e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011962:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8011964:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011966:	05db      	lsls	r3, r3, #23
 8011968:	d501      	bpl.n	801196e <HAL_SD_ReadBlocks+0x136>
 801196a:	2f01      	cmp	r7, #1
 801196c:	d825      	bhi.n	80119ba <HAL_SD_ReadBlocks+0x182>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801196e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011970:	f013 0308 	ands.w	r3, r3, #8
 8011974:	d135      	bne.n	80119e2 <HAL_SD_ReadBlocks+0x1aa>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8011976:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8011978:	f012 0202 	ands.w	r2, r2, #2
 801197c:	d126      	bne.n	80119cc <HAL_SD_ReadBlocks+0x194>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 801197e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011980:	f013 0320 	ands.w	r3, r3, #32
 8011984:	d039      	beq.n	80119fa <HAL_SD_ReadBlocks+0x1c2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011986:	4b20      	ldr	r3, [pc, #128]	; (8011a08 <HAL_SD_ReadBlocks+0x1d0>)
      hsd->State = HAL_SD_STATE_READY;
 8011988:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801198a:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 801198c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801198e:	f043 0320 	orr.w	r3, r3, #32
 8011992:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8011994:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8011998:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 801199a:	e7b7      	b.n	801190c <HAL_SD_ReadBlocks+0xd4>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801199c:	6823      	ldr	r3, [r4, #0]
        hsd->State= HAL_SD_STATE_READY;
 801199e:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80119a0:	4819      	ldr	r0, [pc, #100]	; (8011a08 <HAL_SD_ReadBlocks+0x1d0>)
        hsd->Context = SD_CONTEXT_NONE;
 80119a2:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 80119a4:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80119a8:	6398      	str	r0, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80119aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80119ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80119b0:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80119b2:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80119b6:	6322      	str	r2, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 80119b8:	e7a8      	b.n	801190c <HAL_SD_ReadBlocks+0xd4>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80119ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80119bc:	2b03      	cmp	r3, #3
 80119be:	d0d6      	beq.n	801196e <HAL_SD_ReadBlocks+0x136>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80119c0:	f002 fdb0 	bl	8014524 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80119c4:	2800      	cmp	r0, #0
 80119c6:	d1bd      	bne.n	8011944 <HAL_SD_ReadBlocks+0x10c>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80119c8:	6820      	ldr	r0, [r4, #0]
 80119ca:	e7d0      	b.n	801196e <HAL_SD_ReadBlocks+0x136>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80119cc:	4a0e      	ldr	r2, [pc, #56]	; (8011a08 <HAL_SD_ReadBlocks+0x1d0>)
      hsd->State = HAL_SD_STATE_READY;
 80119ce:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80119d0:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80119d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80119d4:	f042 0202 	orr.w	r2, r2, #2
 80119d8:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80119da:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80119de:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80119e0:	e794      	b.n	801190c <HAL_SD_ReadBlocks+0xd4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80119e2:	4b09      	ldr	r3, [pc, #36]	; (8011a08 <HAL_SD_ReadBlocks+0x1d0>)
      hsd->State = HAL_SD_STATE_READY;
 80119e4:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80119e6:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80119e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80119ea:	f043 0308 	orr.w	r3, r3, #8
 80119ee:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->Context = SD_CONTEXT_NONE;
 80119f0:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 80119f2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80119f6:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80119f8:	e788      	b.n	801190c <HAL_SD_ReadBlocks+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80119fa:	4904      	ldr	r1, [pc, #16]	; (8011a0c <HAL_SD_ReadBlocks+0x1d4>)
    hsd->State = HAL_SD_STATE_READY;
 80119fc:	2201      	movs	r2, #1
    return HAL_OK;
 80119fe:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011a00:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8011a02:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 8011a06:	e781      	b.n	801190c <HAL_SD_ReadBlocks+0xd4>
 8011a08:	1fe00fff 	.word	0x1fe00fff
 8011a0c:	18000f3a 	.word	0x18000f3a

08011a10 <HAL_SD_WriteBlocks>:
{
 8011a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a14:	460d      	mov	r5, r1
 8011a16:	b089      	sub	sp, #36	; 0x24
 8011a18:	4604      	mov	r4, r0
 8011a1a:	4692      	mov	sl, r2
 8011a1c:	461f      	mov	r7, r3
 8011a1e:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8011a22:	f7f9 ff2b 	bl	800b87c <HAL_GetTick>
  if(NULL == pData)
 8011a26:	2d00      	cmp	r5, #0
 8011a28:	d065      	beq.n	8011af6 <HAL_SD_WriteBlocks+0xe6>
  if(hsd->State == HAL_SD_STATE_READY)
 8011a2a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8011a2e:	2b01      	cmp	r3, #1
 8011a30:	fa5f f983 	uxtb.w	r9, r3
 8011a34:	d150      	bne.n	8011ad8 <HAL_SD_WriteBlocks+0xc8>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8011a36:	eb0a 0307 	add.w	r3, sl, r7
 8011a3a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8011a3c:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8011a3e:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8011a40:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8011a42:	d862      	bhi.n	8011b0a <HAL_SD_WriteBlocks+0xfa>
    hsd->State = HAL_SD_STATE_BUSY;
 8011a44:	2303      	movs	r3, #3
 8011a46:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
 8011a48:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8011a4a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8011a4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 8011a50:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8011a52:	a902      	add	r1, sp, #8
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8011a54:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8011a56:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8011a5a:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8011a5e:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011a60:	f04f 33ff 	mov.w	r3, #4294967295
      add *= 512U;
 8011a64:	bf18      	it	ne
 8011a66:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011a6a:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8011a6c:	027b      	lsls	r3, r7, #9
 8011a6e:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8011a70:	2390      	movs	r3, #144	; 0x90
 8011a72:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8011a74:	f002 f9da 	bl	8013e2c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8011a78:	6820      	ldr	r0, [r4, #0]
    if(NumberOfBlocks > 1U)
 8011a7a:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8011a7c:	4651      	mov	r1, sl
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8011a7e:	68c3      	ldr	r3, [r0, #12]
 8011a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a84:	60c3      	str	r3, [r0, #12]
    if(NumberOfBlocks > 1U)
 8011a86:	d931      	bls.n	8011aec <HAL_SD_WriteBlocks+0xdc>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8011a88:	2320      	movs	r3, #32
 8011a8a:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8011a8c:	f002 fc9c 	bl	80143c8 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8011a90:	2800      	cmp	r0, #0
 8011a92:	d142      	bne.n	8011b1a <HAL_SD_WriteBlocks+0x10a>
    dataremaining = config.DataLength;
 8011a94:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8011a98:	e004      	b.n	8011aa4 <HAL_SD_WriteBlocks+0x94>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8011a9a:	f7f9 feef 	bl	800b87c <HAL_GetTick>
 8011a9e:	1b80      	subs	r0, r0, r6
 8011aa0:	4540      	cmp	r0, r8
 8011aa2:	d266      	bcs.n	8011b72 <HAL_SD_WriteBlocks+0x162>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8011aa4:	6820      	ldr	r0, [r4, #0]
 8011aa6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011aa8:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 8011aac:	d141      	bne.n	8011b32 <HAL_SD_WriteBlocks+0x122>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8011aae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011ab0:	045a      	lsls	r2, r3, #17
 8011ab2:	d5f2      	bpl.n	8011a9a <HAL_SD_WriteBlocks+0x8a>
 8011ab4:	f1bb 0f1f 	cmp.w	fp, #31
 8011ab8:	d9ef      	bls.n	8011a9a <HAL_SD_WriteBlocks+0x8a>
 8011aba:	f105 0a20 	add.w	sl, r5, #32
 8011abe:	e000      	b.n	8011ac2 <HAL_SD_WriteBlocks+0xb2>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8011ac0:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 8011ac2:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8011ac6:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 8011ac8:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8011aca:	f002 f991 	bl	8013df0 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8011ace:	4555      	cmp	r5, sl
 8011ad0:	d1f6      	bne.n	8011ac0 <HAL_SD_WriteBlocks+0xb0>
        dataremaining -= 32U;
 8011ad2:	f1ab 0b20 	sub.w	fp, fp, #32
 8011ad6:	e7e0      	b.n	8011a9a <HAL_SD_WriteBlocks+0x8a>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8011ad8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8011ada:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8011ade:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011ae2:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8011ae4:	4648      	mov	r0, r9
 8011ae6:	b009      	add	sp, #36	; 0x24
 8011ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8011aec:	2310      	movs	r3, #16
 8011aee:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8011af0:	f002 fbbc 	bl	801426c <SDMMC_CmdWriteSingleBlock>
 8011af4:	e7cc      	b.n	8011a90 <HAL_SD_WriteBlocks+0x80>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8011af6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8011af8:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8011afc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 8011b00:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8011b02:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8011b04:	b009      	add	sp, #36	; 0x24
 8011b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8011b0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
 8011b0c:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8011b0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011b12:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8011b14:	b009      	add	sp, #36	; 0x24
 8011b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011b1a:	6823      	ldr	r3, [r4, #0]
 8011b1c:	4a2f      	ldr	r2, [pc, #188]	; (8011bdc <HAL_SD_WriteBlocks+0x1cc>)
 8011b1e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8011b20:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 8011b22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011b24:	4303      	orrs	r3, r0
 8011b26:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->Context = SD_CONTEXT_NONE;
 8011b28:	2300      	movs	r3, #0
          hsd->State = HAL_SD_STATE_READY;
 8011b2a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8011b2e:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 8011b30:	e7d8      	b.n	8011ae4 <HAL_SD_WriteBlocks+0xd4>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8011b32:	68c3      	ldr	r3, [r0, #12]
 8011b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011b38:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8011b3a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011b3c:	05db      	lsls	r3, r3, #23
 8011b3e:	d501      	bpl.n	8011b44 <HAL_SD_WriteBlocks+0x134>
 8011b40:	2f01      	cmp	r7, #1
 8011b42:	d823      	bhi.n	8011b8c <HAL_SD_WriteBlocks+0x17c>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8011b44:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011b46:	f013 0308 	ands.w	r3, r3, #8
 8011b4a:	d133      	bne.n	8011bb4 <HAL_SD_WriteBlocks+0x1a4>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8011b4c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8011b4e:	f012 0202 	ands.w	r2, r2, #2
 8011b52:	d124      	bne.n	8011b9e <HAL_SD_WriteBlocks+0x18e>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8011b54:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011b56:	f013 0310 	ands.w	r3, r3, #16
 8011b5a:	d037      	beq.n	8011bcc <HAL_SD_WriteBlocks+0x1bc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011b5c:	4b1f      	ldr	r3, [pc, #124]	; (8011bdc <HAL_SD_WriteBlocks+0x1cc>)
      hsd->State = HAL_SD_STATE_READY;
 8011b5e:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011b60:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8011b62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011b64:	f043 0310 	orr.w	r3, r3, #16
 8011b68:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8011b6a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8011b6e:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8011b70:	e7b8      	b.n	8011ae4 <HAL_SD_WriteBlocks+0xd4>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011b72:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 8011b74:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011b76:	4819      	ldr	r0, [pc, #100]	; (8011bdc <HAL_SD_WriteBlocks+0x1cc>)
        hsd->Context = SD_CONTEXT_NONE;
 8011b78:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8011b7a:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011b7e:	6388      	str	r0, [r1, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8011b80:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011b82:	63a1      	str	r1, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8011b84:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8011b88:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8011b8a:	e7ab      	b.n	8011ae4 <HAL_SD_WriteBlocks+0xd4>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8011b8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011b8e:	2b03      	cmp	r3, #3
 8011b90:	d0d8      	beq.n	8011b44 <HAL_SD_WriteBlocks+0x134>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8011b92:	f002 fcc7 	bl	8014524 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8011b96:	2800      	cmp	r0, #0
 8011b98:	d1bf      	bne.n	8011b1a <HAL_SD_WriteBlocks+0x10a>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011b9a:	6820      	ldr	r0, [r4, #0]
 8011b9c:	e7d2      	b.n	8011b44 <HAL_SD_WriteBlocks+0x134>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011b9e:	4a0f      	ldr	r2, [pc, #60]	; (8011bdc <HAL_SD_WriteBlocks+0x1cc>)
      hsd->State = HAL_SD_STATE_READY;
 8011ba0:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011ba2:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8011ba4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011ba6:	f042 0202 	orr.w	r2, r2, #2
 8011baa:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8011bac:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8011bb0:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8011bb2:	e797      	b.n	8011ae4 <HAL_SD_WriteBlocks+0xd4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011bb4:	4b09      	ldr	r3, [pc, #36]	; (8011bdc <HAL_SD_WriteBlocks+0x1cc>)
      hsd->State = HAL_SD_STATE_READY;
 8011bb6:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011bb8:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8011bba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011bbc:	f043 0308 	orr.w	r3, r3, #8
 8011bc0:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->Context = SD_CONTEXT_NONE;
 8011bc2:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 8011bc4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8011bc8:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8011bca:	e78b      	b.n	8011ae4 <HAL_SD_WriteBlocks+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011bcc:	4904      	ldr	r1, [pc, #16]	; (8011be0 <HAL_SD_WriteBlocks+0x1d0>)
    hsd->State = HAL_SD_STATE_READY;
 8011bce:	2201      	movs	r2, #1
    return HAL_OK;
 8011bd0:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011bd2:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8011bd4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 8011bd8:	e784      	b.n	8011ae4 <HAL_SD_WriteBlocks+0xd4>
 8011bda:	bf00      	nop
 8011bdc:	1fe00fff 	.word	0x1fe00fff
 8011be0:	18000f3a 	.word	0x18000f3a

08011be4 <HAL_SD_DeInit>:
  if(hsd == NULL)
 8011be4:	b198      	cbz	r0, 8011c0e <HAL_SD_DeInit+0x2a>
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8011be6:	6983      	ldr	r3, [r0, #24]
  hsd->State = HAL_SD_STATE_BUSY;
 8011be8:	2203      	movs	r2, #3
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8011bea:	2b02      	cmp	r3, #2
{
 8011bec:	b510      	push	{r4, lr}
 8011bee:	4604      	mov	r4, r0
  hsd->State = HAL_SD_STATE_BUSY;
 8011bf0:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8011bf4:	d00d      	beq.n	8011c12 <HAL_SD_DeInit+0x2e>
  (void)SDMMC_PowerState_OFF(hsd->Instance);
 8011bf6:	6820      	ldr	r0, [r4, #0]
 8011bf8:	f002 f908 	bl	8013e0c <SDMMC_PowerState_OFF>
  HAL_SD_MspDeInit(hsd);
 8011bfc:	4620      	mov	r0, r4
 8011bfe:	f7ff fe19 	bl	8011834 <HAL_SD_MspDeInit>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8011c02:	2300      	movs	r3, #0
 8011c04:	63a3      	str	r3, [r4, #56]	; 0x38
  return HAL_OK;
 8011c06:	4618      	mov	r0, r3
  hsd->State = HAL_SD_STATE_RESET;
 8011c08:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8011c0c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8011c0e:	2001      	movs	r0, #1
}
 8011c10:	4770      	bx	lr
    HAL_SD_DriveTransceiver_1_8V_Callback(RESET);
 8011c12:	2000      	movs	r0, #0
 8011c14:	f7f9 fdce 	bl	800b7b4 <HAL_SD_DriveTransceiver_1_8V_Callback>
 8011c18:	e7ed      	b.n	8011bf6 <HAL_SD_DeInit+0x12>
 8011c1a:	bf00      	nop

08011c1c <SD_UltraHighSpeed>:
  *         of PLL to have SDMMCCK clock between 50 and 120 MHz
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SD_UltraHighSpeed(SD_HandleTypeDef *hsd)
{
 8011c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 8011c20:	2640      	movs	r6, #64	; 0x40
{
 8011c22:	b096      	sub	sp, #88	; 0x58
 8011c24:	4604      	mov	r4, r0
  uint32_t SD_hs[16]  = {0};
 8011c26:	2100      	movs	r1, #0
 8011c28:	4632      	mov	r2, r6
 8011c2a:	a806      	add	r0, sp, #24
 8011c2c:	f014 fca9 	bl	8026582 <memset>
  uint32_t count, loop = 0 ;
  uint32_t Timeout = HAL_GetTick();
 8011c30:	f7f9 fe24 	bl	800b87c <HAL_GetTick>

  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 8011c34:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8011c36:	b13b      	cbz	r3, 8011c48 <SD_UltraHighSpeed+0x2c>
  {
     /* Standard Speed Card <= 12.5Mhz  */
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
  }

  if(hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8011c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011c3c:	d00a      	beq.n	8011c54 <SD_UltraHighSpeed+0x38>
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8011c3e:	2500      	movs	r5, #0
#endif /* (DLYB_SDMMC1) || (DLYB_SDMMC2) */
    }
  }

  return errorstate;
}
 8011c40:	4628      	mov	r0, r5
 8011c42:	b016      	add	sp, #88	; 0x58
 8011c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8011c48:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 8011c4c:	4628      	mov	r0, r5
 8011c4e:	b016      	add	sp, #88	; 0x58
 8011c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->Instance->DCTRL = 0;
 8011c54:	2300      	movs	r3, #0
 8011c56:	4607      	mov	r7, r0
 8011c58:	6820      	ldr	r0, [r4, #0]
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8011c5a:	4631      	mov	r1, r6
    hsd->Instance->DCTRL = 0;
 8011c5c:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8011c5e:	f002 f8fb 	bl	8013e58 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_SD_ERROR_NONE)
 8011c62:	4605      	mov	r5, r0
 8011c64:	2800      	cmp	r0, #0
 8011c66:	d1eb      	bne.n	8011c40 <SD_UltraHighSpeed+0x24>
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 8011c68:	2360      	movs	r3, #96	; 0x60
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011c6a:	f04f 32ff 	mov.w	r2, #4294967295
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 8011c6e:	4669      	mov	r1, sp
 8011c70:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 8011c72:	9302      	str	r3, [sp, #8]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8011c74:	2302      	movs	r3, #2
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011c76:	9200      	str	r2, [sp, #0]
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8011c78:	2200      	movs	r2, #0
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8011c7a:	9303      	str	r3, [sp, #12]
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8011c7c:	2301      	movs	r3, #1
    sdmmc_datainitstructure.DataLength    = 64U;
 8011c7e:	9601      	str	r6, [sp, #4]
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8011c80:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 8011c84:	f002 f8d2 	bl	8013e2c <SDMMC_ConfigData>
 8011c88:	bb40      	cbnz	r0, 8011cdc <SD_UltraHighSpeed+0xc0>
    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR104_SWITCH_PATTERN);
 8011c8a:	4933      	ldr	r1, [pc, #204]	; (8011d58 <SD_UltraHighSpeed+0x13c>)
 8011c8c:	6820      	ldr	r0, [r4, #0]
 8011c8e:	f003 fad7 	bl	8015240 <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 8011c92:	4605      	mov	r5, r0
 8011c94:	2800      	cmp	r0, #0
 8011c96:	d1d3      	bne.n	8011c40 <SD_UltraHighSpeed+0x24>
  uint32_t count, loop = 0 ;
 8011c98:	4681      	mov	r9, r0
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8011c9a:	f240 5a2a 	movw	sl, #1322	; 0x52a
 8011c9e:	e004      	b.n	8011caa <SD_UltraHighSpeed+0x8e>
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 8011ca0:	f7f9 fdec 	bl	800b87c <HAL_GetTick>
 8011ca4:	1bc0      	subs	r0, r0, r7
 8011ca6:	3001      	adds	r0, #1
 8011ca8:	d040      	beq.n	8011d2c <SD_UltraHighSpeed+0x110>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8011caa:	6820      	ldr	r0, [r4, #0]
 8011cac:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8011cae:	ea12 0f0a 	tst.w	r2, sl
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8011cb2:	6b42      	ldr	r2, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8011cb4:	d115      	bne.n	8011ce2 <SD_UltraHighSpeed+0xc6>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8011cb6:	0413      	lsls	r3, r2, #16
 8011cb8:	d5f2      	bpl.n	8011ca0 <SD_UltraHighSpeed+0x84>
 8011cba:	ab06      	add	r3, sp, #24
 8011cbc:	eb03 1649 	add.w	r6, r3, r9, lsl #5
 8011cc0:	ab0e      	add	r3, sp, #56	; 0x38
 8011cc2:	eb03 1849 	add.w	r8, r3, r9, lsl #5
 8011cc6:	e000      	b.n	8011cca <SD_UltraHighSpeed+0xae>
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 8011cc8:	6820      	ldr	r0, [r4, #0]
 8011cca:	f002 f88d 	bl	8013de8 <SDMMC_ReadFIFO>
 8011cce:	f846 0b04 	str.w	r0, [r6], #4
        for (count = 0U; count < 8U; count++)
 8011cd2:	4546      	cmp	r6, r8
 8011cd4:	d1f8      	bne.n	8011cc8 <SD_UltraHighSpeed+0xac>
        loop ++;
 8011cd6:	f109 0901 	add.w	r9, r9, #1
 8011cda:	e7e1      	b.n	8011ca0 <SD_UltraHighSpeed+0x84>
      return (HAL_SD_ERROR_GENERAL_UNKNOWN_ERR);
 8011cdc:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8011ce0:	e7ae      	b.n	8011c40 <SD_UltraHighSpeed+0x24>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8011ce2:	0716      	lsls	r6, r2, #28
 8011ce4:	d429      	bmi.n	8011d3a <SD_UltraHighSpeed+0x11e>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8011ce6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8011ce8:	0791      	lsls	r1, r2, #30
 8011cea:	d42c      	bmi.n	8011d46 <SD_UltraHighSpeed+0x12a>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8011cec:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8011cee:	0692      	lsls	r2, r2, #26
 8011cf0:	d42d      	bmi.n	8011d4e <SD_UltraHighSpeed+0x132>
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8011cf2:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011cf6:	4919      	ldr	r1, [pc, #100]	; (8011d5c <SD_UltraHighSpeed+0x140>)
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8011cf8:	0793      	lsls	r3, r2, #30
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011cfa:	6381      	str	r1, [r0, #56]	; 0x38
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8011cfc:	d520      	bpl.n	8011d40 <SD_UltraHighSpeed+0x124>
      HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8011cfe:	2001      	movs	r0, #1
 8011d00:	f7f9 fd58 	bl	800b7b4 <HAL_SD_DriveTransceiver_1_8V_Callback>
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 8011d04:	6822      	ldr	r2, [r4, #0]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8011d06:	4916      	ldr	r1, [pc, #88]	; (8011d60 <SD_UltraHighSpeed+0x144>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 8011d08:	6853      	ldr	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8011d0a:	4c16      	ldr	r4, [pc, #88]	; (8011d64 <SD_UltraHighSpeed+0x148>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 8011d0c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8011d10:	4815      	ldr	r0, [pc, #84]	; (8011d68 <SD_UltraHighSpeed+0x14c>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 8011d12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8011d16:	42a2      	cmp	r2, r4
 8011d18:	bf18      	it	ne
 8011d1a:	4608      	movne	r0, r1
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 8011d1c:	6053      	str	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8011d1e:	f001 fff7 	bl	8013d10 <DelayBlock_Enable>
 8011d22:	3800      	subs	r0, #0
 8011d24:	bf18      	it	ne
 8011d26:	2001      	movne	r0, #1
 8011d28:	0405      	lsls	r5, r0, #16
 8011d2a:	e789      	b.n	8011c40 <SD_UltraHighSpeed+0x24>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8011d2c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 8011d30:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8011d32:	63a5      	str	r5, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8011d34:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_SD_ERROR_TIMEOUT;
 8011d38:	e782      	b.n	8011c40 <SD_UltraHighSpeed+0x24>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8011d3a:	2208      	movs	r2, #8
 8011d3c:	6382      	str	r2, [r0, #56]	; 0x38
      return errorstate;
 8011d3e:	e77f      	b.n	8011c40 <SD_UltraHighSpeed+0x24>
      errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8011d40:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8011d44:	e77c      	b.n	8011c40 <SD_UltraHighSpeed+0x24>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8011d46:	2202      	movs	r2, #2
      return errorstate;
 8011d48:	4615      	mov	r5, r2
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8011d4a:	6382      	str	r2, [r0, #56]	; 0x38
      return errorstate;
 8011d4c:	e778      	b.n	8011c40 <SD_UltraHighSpeed+0x24>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8011d4e:	2220      	movs	r2, #32
      return errorstate;
 8011d50:	4615      	mov	r5, r2
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8011d52:	6382      	str	r2, [r0, #56]	; 0x38
      return errorstate;
 8011d54:	e774      	b.n	8011c40 <SD_UltraHighSpeed+0x24>
 8011d56:	bf00      	nop
 8011d58:	80ff1f03 	.word	0x80ff1f03
 8011d5c:	18000f3a 	.word	0x18000f3a
 8011d60:	48022800 	.word	0x48022800
 8011d64:	52007000 	.word	0x52007000
 8011d68:	52008000 	.word	0x52008000

08011d6c <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8011d6c:	6e02      	ldr	r2, [r0, #96]	; 0x60
{
 8011d6e:	4603      	mov	r3, r0
 8011d70:	b410      	push	{r4}
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8011d72:	f3c2 6083 	ubfx	r0, r2, #26, #4
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8011d76:	0f94      	lsrs	r4, r2, #30
 8011d78:	700c      	strb	r4, [r1, #0]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8011d7a:	f3c2 6401 	ubfx	r4, r2, #24, #2
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8011d7e:	7048      	strb	r0, [r1, #1]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8011d80:	f3c2 4007 	ubfx	r0, r2, #16, #8
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8011d84:	708c      	strb	r4, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8011d86:	70c8      	strb	r0, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8011d88:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8011d8c:	b2d2      	uxtb	r2, r2
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8011d8e:	7108      	strb	r0, [r1, #4]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8011d90:	2000      	movs	r0, #0
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8011d92:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8011d94:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011d96:	0d14      	lsrs	r4, r2, #20
 8011d98:	80cc      	strh	r4, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8011d9a:	f3c2 4403 	ubfx	r4, r2, #16, #4
 8011d9e:	720c      	strb	r4, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8011da0:	f3c2 34c0 	ubfx	r4, r2, #15, #1
 8011da4:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8011da6:	f3c2 3480 	ubfx	r4, r2, #14, #1
 8011daa:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8011dac:	f3c2 3440 	ubfx	r4, r2, #13, #1
 8011db0:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8011db2:	f3c2 3400 	ubfx	r4, r2, #12, #1
 8011db6:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8011db8:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8011dba:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8011dbc:	2800      	cmp	r0, #0
 8011dbe:	d16f      	bne.n	8011ea0 <HAL_SD_GetCardCSD+0x134>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8011dc0:	f640 74fc 	movw	r4, #4092	; 0xffc
 8011dc4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8011dc6:	ea04 0282 	and.w	r2, r4, r2, lsl #2
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8011dca:	f3c0 64c2 	ubfx	r4, r0, #27, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8011dce:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8011dd2:	610a      	str	r2, [r1, #16]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8011dd4:	f3c0 5242 	ubfx	r2, r0, #21, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8011dd8:	750c      	strb	r4, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8011dda:	f3c0 6402 	ubfx	r4, r0, #24, #3
 8011dde:	754c      	strb	r4, [r1, #21]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8011de0:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8011de4:	758a      	strb	r2, [r1, #22]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8011de6:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8011dea:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8011dec:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8011dee:	690c      	ldr	r4, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8011df0:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8011df2:	3401      	adds	r4, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8011df4:	f002 0207 	and.w	r2, r2, #7
 8011df8:	3202      	adds	r2, #2
 8011dfa:	4094      	lsls	r4, r2
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8011dfc:	2201      	movs	r2, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8011dfe:	64dc      	str	r4, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8011e00:	f891 c008 	ldrb.w	ip, [r1, #8]
 8011e04:	f00c 0c0f 	and.w	ip, ip, #15
 8011e08:	fa02 f20c 	lsl.w	r2, r2, ip
 8011e0c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8011e0e:	0a52      	lsrs	r2, r2, #9
 8011e10:	fb04 f202 	mul.w	r2, r4, r2
 8011e14:	655a      	str	r2, [r3, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8011e16:	f3c0 3280 	ubfx	r2, r0, #14, #1
    hsd->SdCard.LogBlockSize = 512U;
 8011e1a:	f44f 7400 	mov.w	r4, #512	; 0x200
 8011e1e:	659c      	str	r4, [r3, #88]	; 0x58
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8011e20:	f3c0 14c6 	ubfx	r4, r0, #7, #7
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8011e24:	764a      	strb	r2, [r1, #25]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8011e26:	f000 027f 	and.w	r2, r0, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8011e2a:	768c      	strb	r4, [r1, #26]
  pCSD->Reserved3 = 0;
 8011e2c:	2000      	movs	r0, #0
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8011e2e:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8011e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e32:	0fdc      	lsrs	r4, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8011e34:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8011e38:	770c      	strb	r4, [r1, #28]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8011e3a:	f3c3 6482 	ubfx	r4, r3, #26, #3
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8011e3e:	774a      	strb	r2, [r1, #29]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8011e40:	f3c3 5283 	ubfx	r2, r3, #22, #4
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8011e44:	778c      	strb	r4, [r1, #30]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8011e46:	f3c3 5440 	ubfx	r4, r3, #21, #1
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8011e4a:	77ca      	strb	r2, [r1, #31]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8011e4c:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8011e50:	f881 4020 	strb.w	r4, [r1, #32]
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8011e54:	f3c3 34c0 	ubfx	r4, r3, #15, #1
  pCSD->Reserved3 = 0;
 8011e58:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8011e5c:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8011e60:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8011e64:	f881 4023 	strb.w	r4, [r1, #35]	; 0x23
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8011e68:	f3c3 3440 	ubfx	r4, r3, #13, #1
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8011e6c:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8011e70:	f3c3 3200 	ubfx	r2, r3, #12, #1
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8011e74:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8011e78:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8011e7c:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8011e80:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8011e84:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8011e88:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8011e8c:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->Reserved4 = 1;
 8011e90:	2201      	movs	r2, #1
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8011e92:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8011e96:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
}
 8011e9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e9e:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8011ea0:	2801      	cmp	r0, #1
 8011ea2:	d10f      	bne.n	8011ec4 <HAL_SD_GetCardCSD+0x158>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8011ea4:	0412      	lsls	r2, r2, #16
 8011ea6:	6e98      	ldr	r0, [r3, #104]	; 0x68
    hsd->SdCard.BlockSize = 512U;
 8011ea8:	f44f 7400 	mov.w	r4, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8011eac:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 8011eb0:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 8011eb4:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8011eb6:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 8011eb8:	651c      	str	r4, [r3, #80]	; 0x50
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8011eba:	3201      	adds	r2, #1
 8011ebc:	0292      	lsls	r2, r2, #10
 8011ebe:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8011ec0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8011ec2:	e7a8      	b.n	8011e16 <HAL_SD_GetCardCSD+0xaa>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011ec4:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 8011ec6:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011ec8:	4805      	ldr	r0, [pc, #20]	; (8011ee0 <HAL_SD_GetCardCSD+0x174>)
 8011eca:	6390      	str	r0, [r2, #56]	; 0x38
    return HAL_ERROR;
 8011ecc:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011ed0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011ed4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8011ed6:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 8011eda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ede:	4770      	bx	lr
 8011ee0:	1fe00fff 	.word	0x1fe00fff

08011ee4 <HAL_SD_InitCard>:
{
 8011ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8011ee8:	2200      	movs	r2, #0
 8011eea:	2300      	movs	r3, #0
{
 8011eec:	b098      	sub	sp, #96	; 0x60
 8011eee:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8011ef0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8011ef4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011ef8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8011efc:	f7ff f9fe 	bl	80112fc <HAL_RCCEx_GetPeriphCLKFreq>
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8011f00:	4ba4      	ldr	r3, [pc, #656]	; (8012194 <HAL_SD_InitCard+0x2b0>)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8011f02:	69a2      	ldr	r2, [r4, #24]
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8011f04:	0a05      	lsrs	r5, r0, #8
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8011f06:	4606      	mov	r6, r0
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8011f08:	6827      	ldr	r7, [r4, #0]
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8011f0a:	fba3 3505 	umull	r3, r5, r3, r5
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8011f0e:	2a02      	cmp	r2, #2
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8011f10:	ea4f 1515 	mov.w	r5, r5, lsr #4
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8011f14:	d103      	bne.n	8011f1e <HAL_SD_InitCard+0x3a>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8011f16:	683b      	ldr	r3, [r7, #0]
 8011f18:	f043 0310 	orr.w	r3, r3, #16
 8011f1c:	603b      	str	r3, [r7, #0]
  (void)SDMMC_Init(hsd->Instance, Init);
 8011f1e:	aa09      	add	r2, sp, #36	; 0x24
 8011f20:	950a      	str	r5, [sp, #40]	; 0x28
 8011f22:	ab06      	add	r3, sp, #24
 8011f24:	ca07      	ldmia	r2, {r0, r1, r2}
 8011f26:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011f2a:	4638      	mov	r0, r7
 8011f2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011f2e:	f001 ff3f 	bl	8013db0 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8011f32:	6820      	ldr	r0, [r4, #0]
 8011f34:	f001 ff62 	bl	8013dfc <SDMMC_PowerState_ON>
  if(sdmmc_clk != 0U)
 8011f38:	ebb6 0f45 	cmp.w	r6, r5, lsl #1
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8011f3c:	ea4f 0345 	mov.w	r3, r5, lsl #1
  if(sdmmc_clk != 0U)
 8011f40:	d31b      	bcc.n	8011f7a <HAL_SD_InitCard+0x96>
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8011f42:	fbb6 f0f3 	udiv	r0, r6, r3
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8011f46:	4b94      	ldr	r3, [pc, #592]	; (8012198 <HAL_SD_InitCard+0x2b4>)
 8011f48:	fbb3 f0f0 	udiv	r0, r3, r0
 8011f4c:	3001      	adds	r0, #1
 8011f4e:	f7f9 fc9b 	bl	800b888 <HAL_Delay>
  __IO uint32_t count = 0U;
 8011f52:	2300      	movs	r3, #0
 8011f54:	9305      	str	r3, [sp, #20]
  uint32_t tickstart = HAL_GetTick();
 8011f56:	f7f9 fc91 	bl	800b87c <HAL_GetTick>
 8011f5a:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8011f5c:	6820      	ldr	r0, [r4, #0]
 8011f5e:	f002 fc8f 	bl	8014880 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011f62:	4605      	mov	r5, r0
 8011f64:	b168      	cbz	r0, 8011f82 <HAL_SD_InitCard+0x9e>
    hsd->State = HAL_SD_STATE_READY;
 8011f66:	2601      	movs	r6, #1
 8011f68:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8011f6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011f6e:	432b      	orrs	r3, r5
 8011f70:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8011f72:	4630      	mov	r0, r6
 8011f74:	b018      	add	sp, #96	; 0x60
 8011f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_Delay(2U);
 8011f7a:	2002      	movs	r0, #2
 8011f7c:	f7f9 fc84 	bl	800b888 <HAL_Delay>
 8011f80:	e7e7      	b.n	8011f52 <HAL_SD_InitCard+0x6e>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8011f82:	6820      	ldr	r0, [r4, #0]
 8011f84:	f002 fca8 	bl	80148d8 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011f88:	2800      	cmp	r0, #0
 8011f8a:	f040 80c2 	bne.w	8012112 <HAL_SD_InitCard+0x22e>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8011f8e:	2301      	movs	r3, #1
 8011f90:	6423      	str	r3, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8011f92:	2100      	movs	r1, #0
 8011f94:	6820      	ldr	r0, [r4, #0]
 8011f96:	f002 fcdf 	bl	8014958 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8011f9a:	bb10      	cbnz	r0, 8011fe2 <HAL_SD_InitCard+0xfe>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8011f9c:	9b05      	ldr	r3, [sp, #20]
 8011f9e:	f64f 77fe 	movw	r7, #65534	; 0xfffe
 8011fa2:	42bb      	cmp	r3, r7
 8011fa4:	f200 80c5 	bhi.w	8012132 <HAL_SD_InitCard+0x24e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8011fa8:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 80121a0 <HAL_SD_InitCard+0x2bc>
 8011fac:	e00b      	b.n	8011fc6 <HAL_SD_InitCard+0xe2>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011fae:	6820      	ldr	r0, [r4, #0]
 8011fb0:	f001 ff38 	bl	8013e24 <SDMMC_GetResponse>
    count++;
 8011fb4:	9b05      	ldr	r3, [sp, #20]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8011fb6:	2800      	cmp	r0, #0
    count++;
 8011fb8:	f103 0301 	add.w	r3, r3, #1
 8011fbc:	9305      	str	r3, [sp, #20]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8011fbe:	9b05      	ldr	r3, [sp, #20]
 8011fc0:	db12      	blt.n	8011fe8 <HAL_SD_InitCard+0x104>
 8011fc2:	42bb      	cmp	r3, r7
 8011fc4:	d810      	bhi.n	8011fe8 <HAL_SD_InitCard+0x104>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8011fc6:	2100      	movs	r1, #0
 8011fc8:	6820      	ldr	r0, [r4, #0]
 8011fca:	f002 fcc5 	bl	8014958 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8011fce:	4641      	mov	r1, r8
    if(errorstate != HAL_SD_ERROR_NONE)
 8011fd0:	4605      	mov	r5, r0
 8011fd2:	2800      	cmp	r0, #0
 8011fd4:	d1c7      	bne.n	8011f66 <HAL_SD_InitCard+0x82>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8011fd6:	6820      	ldr	r0, [r4, #0]
 8011fd8:	f002 fd6c 	bl	8014ab4 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8011fdc:	4601      	mov	r1, r0
 8011fde:	2800      	cmp	r0, #0
 8011fe0:	d0e5      	beq.n	8011fae <HAL_SD_InitCard+0xca>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011fe2:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8011fe6:	e7be      	b.n	8011f66 <HAL_SD_InitCard+0x82>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8011fe8:	9a05      	ldr	r2, [sp, #20]
 8011fea:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8011fee:	429a      	cmp	r2, r3
 8011ff0:	f200 80a3 	bhi.w	801213a <HAL_SD_InitCard+0x256>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8011ff4:	0045      	lsls	r5, r0, #1
 8011ff6:	d505      	bpl.n	8012004 <HAL_SD_InitCard+0x120>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8011ff8:	69a3      	ldr	r3, [r4, #24]
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8011ffa:	2201      	movs	r2, #1
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8011ffc:	2b02      	cmp	r3, #2
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8011ffe:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8012000:	f000 809e 	beq.w	8012140 <HAL_SD_InitCard+0x25c>
 8012004:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 8012006:	2301      	movs	r3, #1
 8012008:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 801200c:	f001 ff06 	bl	8013e1c <SDMMC_GetPowerState>
 8012010:	b348      	cbz	r0, 8012066 <HAL_SD_InitCard+0x182>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8012012:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012014:	2b03      	cmp	r3, #3
 8012016:	d132      	bne.n	801207e <HAL_SD_InitCard+0x19a>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8012018:	2104      	movs	r1, #4
 801201a:	6820      	ldr	r0, [r4, #0]
 801201c:	f001 ff02 	bl	8013e24 <SDMMC_GetResponse>
 8012020:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8012022:	a90d      	add	r1, sp, #52	; 0x34
 8012024:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8012026:	0d1b      	lsrs	r3, r3, #20
 8012028:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 801202a:	f7ff fe9f 	bl	8011d6c <HAL_SD_GetCardCSD>
 801202e:	4606      	mov	r6, r0
 8012030:	2800      	cmp	r0, #0
 8012032:	d17b      	bne.n	801212c <HAL_SD_InitCard+0x248>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8012034:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8012036:	4603      	mov	r3, r0
 8012038:	6820      	ldr	r0, [r4, #0]
 801203a:	0412      	lsls	r2, r2, #16
 801203c:	f002 fb7a 	bl	8014734 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8012040:	b998      	cbnz	r0, 801206a <HAL_SD_InitCard+0x186>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8012042:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012046:	6820      	ldr	r0, [r4, #0]
 8012048:	f001 ff06 	bl	8013e58 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 801204c:	2800      	cmp	r0, #0
 801204e:	d090      	beq.n	8011f72 <HAL_SD_InitCard+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8012050:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8012052:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8012054:	4951      	ldr	r1, [pc, #324]	; (801219c <HAL_SD_InitCard+0x2b8>)
    return HAL_ERROR;
 8012056:	4616      	mov	r6, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8012058:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 801205a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801205c:	4303      	orrs	r3, r0
 801205e:	63a3      	str	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8012060:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_ERROR;
 8012064:	e785      	b.n	8011f72 <HAL_SD_InitCard+0x8e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8012066:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 801206a:	2601      	movs	r6, #1
 801206c:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8012070:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012072:	4303      	orrs	r3, r0
}
 8012074:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
 8012076:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8012078:	b018      	add	sp, #96	; 0x60
 801207a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 801207e:	6820      	ldr	r0, [r4, #0]
 8012080:	f002 feaa 	bl	8014dd8 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8012084:	2800      	cmp	r0, #0
 8012086:	d1f0      	bne.n	801206a <HAL_SD_InitCard+0x186>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8012088:	4601      	mov	r1, r0
 801208a:	6820      	ldr	r0, [r4, #0]
 801208c:	f001 feca 	bl	8013e24 <SDMMC_GetResponse>
 8012090:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8012092:	2104      	movs	r1, #4
 8012094:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8012096:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8012098:	f001 fec4 	bl	8013e24 <SDMMC_GetResponse>
 801209c:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801209e:	2108      	movs	r1, #8
 80120a0:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80120a2:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80120a4:	f001 febe 	bl	8013e24 <SDMMC_GetResponse>
 80120a8:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80120aa:	210c      	movs	r1, #12
 80120ac:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80120ae:	67a3      	str	r3, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80120b0:	f001 feb8 	bl	8013e24 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80120b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80120b6:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED)
 80120b8:	2b03      	cmp	r3, #3
 80120ba:	d0ad      	beq.n	8012018 <HAL_SD_InitCard+0x134>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80120bc:	f10d 0112 	add.w	r1, sp, #18
 80120c0:	6820      	ldr	r0, [r4, #0]
 80120c2:	f002 ff07 	bl	8014ed4 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80120c6:	2800      	cmp	r0, #0
 80120c8:	d1cf      	bne.n	801206a <HAL_SD_InitCard+0x186>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80120ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80120cc:	2b03      	cmp	r3, #3
 80120ce:	d0a3      	beq.n	8012018 <HAL_SD_InitCard+0x134>
    hsd->SdCard.RelCardAdd = sd_rca;
 80120d0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80120d4:	6820      	ldr	r0, [r4, #0]
 80120d6:	0419      	lsls	r1, r3, #16
    hsd->SdCard.RelCardAdd = sd_rca;
 80120d8:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80120da:	f002 febb 	bl	8014e54 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80120de:	2800      	cmp	r0, #0
 80120e0:	d1c3      	bne.n	801206a <HAL_SD_InitCard+0x186>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80120e2:	4601      	mov	r1, r0
 80120e4:	6820      	ldr	r0, [r4, #0]
 80120e6:	f001 fe9d 	bl	8013e24 <SDMMC_GetResponse>
 80120ea:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80120ec:	2104      	movs	r1, #4
 80120ee:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80120f0:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80120f2:	f001 fe97 	bl	8013e24 <SDMMC_GetResponse>
 80120f6:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80120f8:	2108      	movs	r1, #8
 80120fa:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80120fc:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80120fe:	f001 fe91 	bl	8013e24 <SDMMC_GetResponse>
 8012102:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8012104:	210c      	movs	r1, #12
 8012106:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8012108:	66a3      	str	r3, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 801210a:	f001 fe8b 	bl	8013e24 <SDMMC_GetResponse>
 801210e:	66e0      	str	r0, [r4, #108]	; 0x6c
 8012110:	e782      	b.n	8012018 <HAL_SD_InitCard+0x134>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8012112:	6425      	str	r5, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8012114:	6820      	ldr	r0, [r4, #0]
 8012116:	f002 fbb3 	bl	8014880 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 801211a:	4605      	mov	r5, r0
 801211c:	2800      	cmp	r0, #0
 801211e:	f47f af22 	bne.w	8011f66 <HAL_SD_InitCard+0x82>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8012122:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012124:	2b01      	cmp	r3, #1
 8012126:	f47f af39 	bne.w	8011f9c <HAL_SD_InitCard+0xb8>
 801212a:	e732      	b.n	8011f92 <HAL_SD_InitCard+0xae>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801212c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8012130:	e79b      	b.n	801206a <HAL_SD_InitCard+0x186>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8012132:	9b05      	ldr	r3, [sp, #20]
 8012134:	42bb      	cmp	r3, r7
 8012136:	f67f af65 	bls.w	8012004 <HAL_SD_InitCard+0x120>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 801213a:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 801213e:	e712      	b.n	8011f66 <HAL_SD_InitCard+0x82>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8012140:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8012144:	6820      	ldr	r0, [r4, #0]
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8012146:	f43f af5e 	beq.w	8012006 <HAL_SD_InitCard+0x122>
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 801214a:	6803      	ldr	r3, [r0, #0]
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 801214c:	f44f 7200 	mov.w	r2, #512	; 0x200
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8012150:	f043 0308 	orr.w	r3, r3, #8
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8012154:	65e2      	str	r2, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8012156:	6003      	str	r3, [r0, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8012158:	f003 f920 	bl	801539c <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 801215c:	4605      	mov	r5, r0
 801215e:	b128      	cbz	r0, 801216c <HAL_SD_InitCard+0x288>
 8012160:	e701      	b.n	8011f66 <HAL_SD_InitCard+0x82>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8012162:	f7f9 fb8b 	bl	800b87c <HAL_GetTick>
 8012166:	1b80      	subs	r0, r0, r6
 8012168:	3001      	adds	r0, #1
 801216a:	d030      	beq.n	80121ce <HAL_SD_InitCard+0x2ea>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 801216c:	6823      	ldr	r3, [r4, #0]
 801216e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012170:	0150      	lsls	r0, r2, #5
 8012172:	d5f6      	bpl.n	8012162 <HAL_SD_InitCard+0x27e>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8012174:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8012178:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 801217a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801217c:	02d9      	lsls	r1, r3, #11
 801217e:	f57f af30 	bpl.w	8011fe2 <HAL_SD_InitCard+0xfe>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8012182:	2001      	movs	r0, #1
 8012184:	f7f9 fb16 	bl	800b7b4 <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8012188:	6820      	ldr	r0, [r4, #0]
 801218a:	6803      	ldr	r3, [r0, #0]
 801218c:	f043 0304 	orr.w	r3, r3, #4
 8012190:	6003      	str	r3, [r0, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8012192:	e00d      	b.n	80121b0 <HAL_SD_InitCard+0x2cc>
 8012194:	014f8b59 	.word	0x014f8b59
 8012198:	00012110 	.word	0x00012110
 801219c:	1fe00fff 	.word	0x1fe00fff
 80121a0:	c1100000 	.word	0xc1100000
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80121a4:	f7f9 fb6a 	bl	800b87c <HAL_GetTick>
 80121a8:	1b80      	subs	r0, r0, r6
 80121aa:	3001      	adds	r0, #1
 80121ac:	d00f      	beq.n	80121ce <HAL_SD_InitCard+0x2ea>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80121ae:	6820      	ldr	r0, [r4, #0]
 80121b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80121b2:	019a      	lsls	r2, r3, #6
 80121b4:	d5f6      	bpl.n	80121a4 <HAL_SD_InitCard+0x2c0>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 80121b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80121ba:	6383      	str	r3, [r0, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 80121bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80121be:	02db      	lsls	r3, r3, #11
 80121c0:	d4bb      	bmi.n	801213a <HAL_SD_InitCard+0x256>
          hsd->Instance->POWER = 0x13U;
 80121c2:	2213      	movs	r2, #19
          hsd->Instance->ICR = 0xFFFFFFFFU;
 80121c4:	f04f 33ff 	mov.w	r3, #4294967295
          hsd->Instance->POWER = 0x13U;
 80121c8:	6002      	str	r2, [r0, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 80121ca:	6383      	str	r3, [r0, #56]	; 0x38
  if(errorstate != HAL_SD_ERROR_NONE)
 80121cc:	e71b      	b.n	8012006 <HAL_SD_InitCard+0x122>
            return HAL_SD_ERROR_TIMEOUT;
 80121ce:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80121d2:	e6c8      	b.n	8011f66 <HAL_SD_InitCard+0x82>

080121d4 <HAL_SD_GetCardStatus>:
{
 80121d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80121d8:	4604      	mov	r4, r0
 80121da:	b097      	sub	sp, #92	; 0x5c
 80121dc:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80121de:	f7f9 fb4d 	bl	800b87c <HAL_GetTick>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80121e2:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 80121e4:	4607      	mov	r7, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80121e6:	6820      	ldr	r0, [r4, #0]
 80121e8:	f001 fe1c 	bl	8013e24 <SDMMC_GetResponse>
 80121ec:	0182      	lsls	r2, r0, #6
 80121ee:	d45b      	bmi.n	80122a8 <HAL_SD_GetCardStatus+0xd4>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80121f0:	2140      	movs	r1, #64	; 0x40
 80121f2:	6820      	ldr	r0, [r4, #0]
 80121f4:	f001 fe30 	bl	8013e58 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80121f8:	4603      	mov	r3, r0
 80121fa:	b1e0      	cbz	r0, 8012236 <HAL_SD_GetCardStatus+0x62>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80121fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80121fe:	63a2      	str	r2, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8012200:	6820      	ldr	r0, [r4, #0]
 8012202:	4a5a      	ldr	r2, [pc, #360]	; (801236c <HAL_SD_GetCardStatus+0x198>)
    hsd->State = HAL_SD_STATE_READY;
 8012204:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8012206:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8012208:	460e      	mov	r6, r1
    hsd->ErrorCode |= errorstate;
 801220a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801220c:	4313      	orrs	r3, r2
 801220e:	63a3      	str	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8012210:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8012214:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012218:	f001 fe1e 	bl	8013e58 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 801221c:	b138      	cbz	r0, 801222e <HAL_SD_GetCardStatus+0x5a>
    hsd->State = HAL_SD_STATE_READY;
 801221e:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8012220:	6822      	ldr	r2, [r4, #0]
 8012222:	4952      	ldr	r1, [pc, #328]	; (801236c <HAL_SD_GetCardStatus+0x198>)
    status = HAL_ERROR;
 8012224:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8012226:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8012228:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 801222a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 801222e:	4630      	mov	r0, r6
 8012230:	b017      	add	sp, #92	; 0x5c
 8012232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8012236:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012238:	6820      	ldr	r0, [r4, #0]
 801223a:	0409      	lsls	r1, r1, #16
 801223c:	f002 fb8c 	bl	8014958 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8012240:	4603      	mov	r3, r0
 8012242:	2800      	cmp	r0, #0
 8012244:	d1da      	bne.n	80121fc <HAL_SD_GetCardStatus+0x28>
  config.DataLength    = 64U;
 8012246:	f04f 32ff 	mov.w	r2, #4294967295
 801224a:	2340      	movs	r3, #64	; 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 801224c:	4669      	mov	r1, sp
 801224e:	6820      	ldr	r0, [r4, #0]
  config.DataLength    = 64U;
 8012250:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8012254:	2260      	movs	r2, #96	; 0x60
 8012256:	2302      	movs	r3, #2
 8012258:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801225c:	2301      	movs	r3, #1
 801225e:	2200      	movs	r2, #0
 8012260:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8012264:	f001 fde2 	bl	8013e2c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8012268:	6820      	ldr	r0, [r4, #0]
 801226a:	f002 ff41 	bl	80150f0 <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 801226e:	4603      	mov	r3, r0
 8012270:	2800      	cmp	r0, #0
 8012272:	d1c3      	bne.n	80121fc <HAL_SD_GetCardStatus+0x28>
  uint32_t *pData = pSDstatus;
 8012274:	ae06      	add	r6, sp, #24
 8012276:	e004      	b.n	8012282 <HAL_SD_GetCardStatus+0xae>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8012278:	f7f9 fb00 	bl	800b87c <HAL_GetTick>
 801227c:	1bc0      	subs	r0, r0, r7
 801227e:	3001      	adds	r0, #1
 8012280:	d016      	beq.n	80122b0 <HAL_SD_GetCardStatus+0xdc>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8012282:	6820      	ldr	r0, [r4, #0]
 8012284:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012286:	f413 7f95 	tst.w	r3, #298	; 0x12a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 801228a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 801228c:	d113      	bne.n	80122b6 <HAL_SD_GetCardStatus+0xe2>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 801228e:	041b      	lsls	r3, r3, #16
 8012290:	d5f2      	bpl.n	8012278 <HAL_SD_GetCardStatus+0xa4>
 8012292:	f106 0820 	add.w	r8, r6, #32
 8012296:	e000      	b.n	801229a <HAL_SD_GetCardStatus+0xc6>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8012298:	6820      	ldr	r0, [r4, #0]
 801229a:	f001 fda5 	bl	8013de8 <SDMMC_ReadFIFO>
 801229e:	f846 0b04 	str.w	r0, [r6], #4
      for(count = 0U; count < 8U; count++)
 80122a2:	4546      	cmp	r6, r8
 80122a4:	d1f8      	bne.n	8012298 <HAL_SD_GetCardStatus+0xc4>
 80122a6:	e7e7      	b.n	8012278 <HAL_SD_GetCardStatus+0xa4>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80122a8:	6820      	ldr	r0, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80122aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80122ae:	e7a8      	b.n	8012202 <HAL_SD_GetCardStatus+0x2e>
      return HAL_SD_ERROR_TIMEOUT;
 80122b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80122b4:	e7a4      	b.n	8012200 <HAL_SD_GetCardStatus+0x2c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80122b6:	0719      	lsls	r1, r3, #28
 80122b8:	d451      	bmi.n	801235e <HAL_SD_GetCardStatus+0x18a>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80122ba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80122bc:	079a      	lsls	r2, r3, #30
 80122be:	d450      	bmi.n	8012362 <HAL_SD_GetCardStatus+0x18e>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80122c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80122c2:	069b      	lsls	r3, r3, #26
 80122c4:	d50a      	bpl.n	80122dc <HAL_SD_GetCardStatus+0x108>
 80122c6:	e04e      	b.n	8012366 <HAL_SD_GetCardStatus+0x192>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80122c8:	f001 fd8e 	bl	8013de8 <SDMMC_ReadFIFO>
 80122cc:	f846 0b04 	str.w	r0, [r6], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80122d0:	f7f9 fad4 	bl	800b87c <HAL_GetTick>
 80122d4:	1bc0      	subs	r0, r0, r7
 80122d6:	3001      	adds	r0, #1
 80122d8:	d0ea      	beq.n	80122b0 <HAL_SD_GetCardStatus+0xdc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80122da:	6820      	ldr	r0, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80122dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80122de:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80122e2:	d1f1      	bne.n	80122c8 <HAL_SD_GetCardStatus+0xf4>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80122e4:	9906      	ldr	r1, [sp, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80122e6:	461e      	mov	r6, r3
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80122e8:	4a21      	ldr	r2, [pc, #132]	; (8012370 <HAL_SD_GetCardStatus+0x19c>)
 80122ea:	6382      	str	r2, [r0, #56]	; 0x38
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80122ec:	0a0a      	lsrs	r2, r1, #8
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80122ee:	e9dd c308 	ldrd	ip, r3, [sp, #32]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80122f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80122f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80122fa:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80122fe:	fa5f f883 	uxtb.w	r8, r3
 8012302:	f027 07ff 	bic.w	r7, r7, #255	; 0xff
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8012306:	fa1f f982 	uxth.w	r9, r2
 801230a:	9a07      	ldr	r2, [sp, #28]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 801230c:	ea47 0708 	orr.w	r7, r7, r8
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8012310:	f3c1 1881 	ubfx	r8, r1, #6, #2
 8012314:	fa92 fe82 	rev.w	lr, r2
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8012318:	f3c1 1140 	ubfx	r1, r1, #5, #1
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 801231c:	fa5f f28c 	uxtb.w	r2, ip
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8012320:	f885 8000 	strb.w	r8, [r5]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8012324:	7069      	strb	r1, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8012326:	f8a5 9002 	strh.w	r9, [r5, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 801232a:	f8c5 e004 	str.w	lr, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 801232e:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8012330:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8012334:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8012336:	f3cc 5203 	ubfx	r2, ip, #20, #4
 801233a:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 801233c:	f3c3 2285 	ubfx	r2, r3, #10, #6
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8012340:	81af      	strh	r7, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8012342:	73aa      	strb	r2, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8012344:	f3c3 2201 	ubfx	r2, r3, #8, #2
 8012348:	73ea      	strb	r2, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 801234a:	f3c3 1203 	ubfx	r2, r3, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 801234e:	f003 030f 	and.w	r3, r3, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8012352:	742a      	strb	r2, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8012354:	746b      	strb	r3, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8012356:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 801235a:	74ab      	strb	r3, [r5, #18]
 801235c:	e75a      	b.n	8012214 <HAL_SD_GetCardStatus+0x40>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 801235e:	2308      	movs	r3, #8
 8012360:	e74f      	b.n	8012202 <HAL_SD_GetCardStatus+0x2e>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8012362:	2302      	movs	r3, #2
 8012364:	e74d      	b.n	8012202 <HAL_SD_GetCardStatus+0x2e>
    return HAL_SD_ERROR_RX_OVERRUN;
 8012366:	2320      	movs	r3, #32
 8012368:	e74b      	b.n	8012202 <HAL_SD_GetCardStatus+0x2e>
 801236a:	bf00      	nop
 801236c:	1fe00fff 	.word	0x1fe00fff
 8012370:	18000f3a 	.word	0x18000f3a

08012374 <HAL_SD_GetCardInfo>:
{
 8012374:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8012376:	e9d0 e30f 	ldrd	lr, r3, [r0, #60]	; 0x3c
 801237a:	e9d0 7611 	ldrd	r7, r6, [r0, #68]	; 0x44
 801237e:	e9d0 5413 	ldrd	r5, r4, [r0, #76]	; 0x4c
 8012382:	e9d0 2015 	ldrd	r2, r0, [r0, #84]	; 0x54
 8012386:	e9c1 e300 	strd	lr, r3, [r1]
 801238a:	e9c1 2006 	strd	r2, r0, [r1, #24]
 801238e:	e9c1 7602 	strd	r7, r6, [r1, #8]
}
 8012392:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8012394:	e9c1 5404 	strd	r5, r4, [r1, #16]
}
 8012398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801239a:	bf00      	nop

0801239c <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 801239c:	2203      	movs	r2, #3
  if(hsd->SdCard.CardType != CARD_SECURED)
 801239e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80123a0:	4293      	cmp	r3, r2
{
 80123a2:	b530      	push	{r4, r5, lr}
 80123a4:	4604      	mov	r4, r0
 80123a6:	b08b      	sub	sp, #44	; 0x2c
 80123a8:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 80123aa:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 80123ae:	d025      	beq.n	80123fc <HAL_SD_ConfigWideBusOperation+0x60>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80123b0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80123b4:	d022      	beq.n	80123fc <HAL_SD_ConfigWideBusOperation+0x60>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80123b6:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80123ba:	d065      	beq.n	8012488 <HAL_SD_ConfigWideBusOperation+0xec>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80123bc:	2900      	cmp	r1, #0
 80123be:	d044      	beq.n	801244a <HAL_SD_ConfigWideBusOperation+0xae>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80123c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80123c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80123c6:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80123c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80123ca:	b9f3      	cbnz	r3, 801240a <HAL_SD_ConfigWideBusOperation+0x6e>
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80123cc:	6922      	ldr	r2, [r4, #16]
    Init.BusWide             = WideMode;
 80123ce:	9506      	str	r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80123d0:	9207      	str	r2, [sp, #28]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80123d2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 80123d6:	e9cd 1304 	strd	r1, r3, [sp, #16]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 80123da:	6963      	ldr	r3, [r4, #20]
 80123dc:	2b03      	cmp	r3, #3
 80123de:	d92a      	bls.n	8012436 <HAL_SD_ConfigWideBusOperation+0x9a>
    (void)SDMMC_Init(hsd->Instance, Init);
 80123e0:	aa0a      	add	r2, sp, #40	; 0x28
      Init.ClockDiv = hsd->Init.ClockDiv;
 80123e2:	9308      	str	r3, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 80123e4:	ab04      	add	r3, sp, #16
  HAL_StatusTypeDef status = HAL_OK;
 80123e6:	2500      	movs	r5, #0
    (void)SDMMC_Init(hsd->Instance, Init);
 80123e8:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 80123ec:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80123f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80123f2:	6820      	ldr	r0, [r4, #0]
 80123f4:	f001 fcdc 	bl	8013db0 <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80123f8:	6820      	ldr	r0, [r4, #0]
 80123fa:	e00a      	b.n	8012412 <HAL_SD_ConfigWideBusOperation+0x76>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80123fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80123fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012402:	63a3      	str	r3, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8012404:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012406:	2b00      	cmp	r3, #0
 8012408:	d0e0      	beq.n	80123cc <HAL_SD_ConfigWideBusOperation+0x30>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801240a:	6820      	ldr	r0, [r4, #0]
    status = HAL_ERROR;
 801240c:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801240e:	4b31      	ldr	r3, [pc, #196]	; (80124d4 <HAL_SD_ConfigWideBusOperation+0x138>)
 8012410:	6383      	str	r3, [r0, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8012412:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012416:	f001 fd1f 	bl	8013e58 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 801241a:	b130      	cbz	r0, 801242a <HAL_SD_ConfigWideBusOperation+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801241c:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 801241e:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8012420:	4a2c      	ldr	r2, [pc, #176]	; (80124d4 <HAL_SD_ConfigWideBusOperation+0x138>)
 8012422:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8012424:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012426:	4303      	orrs	r3, r0
 8012428:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 801242a:	2301      	movs	r3, #1
}
 801242c:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 801242e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8012432:	b00b      	add	sp, #44	; 0x2c
 8012434:	bd30      	pop	{r4, r5, pc}
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8012436:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8012438:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 801243c:	d0d0      	beq.n	80123e0 <HAL_SD_ConfigWideBusOperation+0x44>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 801243e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8012442:	bf14      	ite	ne
 8012444:	2304      	movne	r3, #4
 8012446:	2302      	moveq	r3, #2
 8012448:	e7ca      	b.n	80123e0 <HAL_SD_ConfigWideBusOperation+0x44>
  uint32_t scr[2U] = {0UL, 0UL};
 801244a:	2200      	movs	r2, #0
 801244c:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801244e:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 8012450:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8012454:	f001 fce6 	bl	8013e24 <SDMMC_GetResponse>
 8012458:	0182      	lsls	r2, r0, #6
 801245a:	d434      	bmi.n	80124c6 <HAL_SD_ConfigWideBusOperation+0x12a>
  errorstate = SD_FindSCR(hsd, scr);
 801245c:	a904      	add	r1, sp, #16
 801245e:	4620      	mov	r0, r4
 8012460:	f7ff f974 	bl	801174c <SD_FindSCR.constprop.0>
  if(errorstate != HAL_SD_ERROR_NONE)
 8012464:	b960      	cbnz	r0, 8012480 <HAL_SD_ConfigWideBusOperation+0xe4>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8012466:	9b05      	ldr	r3, [sp, #20]
 8012468:	03db      	lsls	r3, r3, #15
 801246a:	d52f      	bpl.n	80124cc <HAL_SD_ConfigWideBusOperation+0x130>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801246c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801246e:	6820      	ldr	r0, [r4, #0]
 8012470:	0409      	lsls	r1, r1, #16
 8012472:	f002 fa71 	bl	8014958 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8012476:	b918      	cbnz	r0, 8012480 <HAL_SD_ConfigWideBusOperation+0xe4>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8012478:	4601      	mov	r1, r0
 801247a:	6820      	ldr	r0, [r4, #0]
 801247c:	f002 fb56 	bl	8014b2c <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8012480:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012482:	4303      	orrs	r3, r0
 8012484:	63a3      	str	r3, [r4, #56]	; 0x38
 8012486:	e7bd      	b.n	8012404 <HAL_SD_ConfigWideBusOperation+0x68>
  uint32_t scr[2U] = {0UL, 0UL};
 8012488:	2200      	movs	r2, #0
 801248a:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801248c:	2100      	movs	r1, #0
 801248e:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 8012490:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8012494:	f001 fcc6 	bl	8013e24 <SDMMC_GetResponse>
 8012498:	0180      	lsls	r0, r0, #6
 801249a:	d414      	bmi.n	80124c6 <HAL_SD_ConfigWideBusOperation+0x12a>
  errorstate = SD_FindSCR(hsd, scr);
 801249c:	a904      	add	r1, sp, #16
 801249e:	4620      	mov	r0, r4
 80124a0:	f7ff f954 	bl	801174c <SD_FindSCR.constprop.0>
  if(errorstate != HAL_SD_ERROR_NONE)
 80124a4:	2800      	cmp	r0, #0
 80124a6:	d1eb      	bne.n	8012480 <HAL_SD_ConfigWideBusOperation+0xe4>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80124a8:	9b05      	ldr	r3, [sp, #20]
 80124aa:	0359      	lsls	r1, r3, #13
 80124ac:	d50e      	bpl.n	80124cc <HAL_SD_ConfigWideBusOperation+0x130>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80124ae:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80124b0:	6820      	ldr	r0, [r4, #0]
 80124b2:	0409      	lsls	r1, r1, #16
 80124b4:	f002 fa50 	bl	8014958 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80124b8:	2800      	cmp	r0, #0
 80124ba:	d1e1      	bne.n	8012480 <HAL_SD_ConfigWideBusOperation+0xe4>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80124bc:	2102      	movs	r1, #2
 80124be:	6820      	ldr	r0, [r4, #0]
 80124c0:	f002 fb34 	bl	8014b2c <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 80124c4:	e7dc      	b.n	8012480 <HAL_SD_ConfigWideBusOperation+0xe4>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80124c6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80124ca:	e7d9      	b.n	8012480 <HAL_SD_ConfigWideBusOperation+0xe4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80124cc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80124d0:	e7d6      	b.n	8012480 <HAL_SD_ConfigWideBusOperation+0xe4>
 80124d2:	bf00      	nop
 80124d4:	1fe00fff 	.word	0x1fe00fff

080124d8 <HAL_SD_Init>:
{
 80124d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124da:	b087      	sub	sp, #28
  if(hsd == NULL)
 80124dc:	b1a0      	cbz	r0, 8012508 <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 80124de:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80124e2:	4604      	mov	r4, r0
 80124e4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80124e8:	b93b      	cbnz	r3, 80124fa <HAL_SD_Init+0x22>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 80124ea:	6983      	ldr	r3, [r0, #24]
    hsd->Lock = HAL_UNLOCKED;
 80124ec:	7702      	strb	r2, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 80124ee:	b90b      	cbnz	r3, 80124f4 <HAL_SD_Init+0x1c>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 80124f0:	2302      	movs	r3, #2
 80124f2:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 80124f4:	4620      	mov	r0, r4
 80124f6:	f7ff f99b 	bl	8011830 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 80124fa:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80124fc:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 80124fe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8012502:	f7ff fcef 	bl	8011ee4 <HAL_SD_InitCard>
 8012506:	b118      	cbz	r0, 8012510 <HAL_SD_Init+0x38>
    return HAL_ERROR;
 8012508:	2601      	movs	r6, #1
}
 801250a:	4630      	mov	r0, r6
 801250c:	b007      	add	sp, #28
 801250e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8012510:	a901      	add	r1, sp, #4
 8012512:	4620      	mov	r0, r4
 8012514:	f7ff fe5e 	bl	80121d4 <HAL_SD_GetCardStatus>
 8012518:	2800      	cmp	r0, #0
 801251a:	d1f5      	bne.n	8012508 <HAL_SD_Init+0x30>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 801251c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 801251e:	f89d 3014 	ldrb.w	r3, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8012522:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 8012524:	f89d 2015 	ldrb.w	r2, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 8012528:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 801252a:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 801252c:	d025      	beq.n	801257a <HAL_SD_Init+0xa2>
 801252e:	4603      	mov	r3, r0
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8012530:	68e1      	ldr	r1, [r4, #12]
 8012532:	4620      	mov	r0, r4
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8012534:	65e3      	str	r3, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8012536:	f7ff ff31 	bl	801239c <HAL_SD_ConfigWideBusOperation>
 801253a:	4606      	mov	r6, r0
 801253c:	2800      	cmp	r0, #0
 801253e:	d1e3      	bne.n	8012508 <HAL_SD_Init+0x30>
  tickstart = HAL_GetTick();
 8012540:	f7f9 f99c 	bl	800b87c <HAL_GetTick>
 8012544:	4607      	mov	r7, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8012546:	e00c      	b.n	8012562 <HAL_SD_Init+0x8a>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8012548:	6820      	ldr	r0, [r4, #0]
 801254a:	4629      	mov	r1, r5
 801254c:	f001 fc6a 	bl	8013e24 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8012550:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8012554:	2804      	cmp	r0, #4
 8012556:	d017      	beq.n	8012588 <HAL_SD_Init+0xb0>
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8012558:	f7f9 f990 	bl	800b87c <HAL_GetTick>
 801255c:	1bc3      	subs	r3, r0, r7
 801255e:	3301      	adds	r3, #1
 8012560:	d018      	beq.n	8012594 <HAL_SD_Init+0xbc>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8012562:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012564:	6820      	ldr	r0, [r4, #0]
 8012566:	0409      	lsls	r1, r1, #16
 8012568:	f002 fd14 	bl	8014f94 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 801256c:	4605      	mov	r5, r0
 801256e:	2800      	cmp	r0, #0
 8012570:	d0ea      	beq.n	8012548 <HAL_SD_Init+0x70>
    hsd->ErrorCode |= errorstate;
 8012572:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012574:	4303      	orrs	r3, r0
 8012576:	63a3      	str	r3, [r4, #56]	; 0x38
  return (HAL_SD_CardStateTypeDef)cardstate;
 8012578:	e7ee      	b.n	8012558 <HAL_SD_Init+0x80>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 801257a:	4313      	orrs	r3, r2
 801257c:	bf0c      	ite	eq
 801257e:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8012582:	f44f 7300 	movne.w	r3, #512	; 0x200
 8012586:	e7d3      	b.n	8012530 <HAL_SD_Init+0x58>
  hsd->State = HAL_SD_STATE_READY;
 8012588:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801258a:	63a5      	str	r5, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 801258c:	6325      	str	r5, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 801258e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8012592:	e7ba      	b.n	801250a <HAL_SD_Init+0x32>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8012594:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State= HAL_SD_STATE_READY;
 8012598:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 801259a:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 801259c:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 801259e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 80125a2:	e7b2      	b.n	801250a <HAL_SD_Init+0x32>

080125a4 <HAL_SD_ConfigSpeedBusOperation>:
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80125a4:	6983      	ldr	r3, [r0, #24]
  hsd->State = HAL_SD_STATE_BUSY;
 80125a6:	2203      	movs	r2, #3
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80125a8:	2b02      	cmp	r3, #2
{
 80125aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125ae:	4604      	mov	r4, r0
 80125b0:	b096      	sub	sp, #88	; 0x58
  hsd->State = HAL_SD_STATE_BUSY;
 80125b2:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80125b6:	d069      	beq.n	801268c <HAL_SD_ConfigSpeedBusOperation+0xe8>
    switch (SpeedMode)
 80125b8:	2901      	cmp	r1, #1
 80125ba:	d027      	beq.n	801260c <HAL_SD_ConfigSpeedBusOperation+0x68>
 80125bc:	2902      	cmp	r1, #2
 80125be:	d006      	beq.n	80125ce <HAL_SD_ConfigSpeedBusOperation+0x2a>
 80125c0:	b1a9      	cbz	r1, 80125ee <HAL_SD_ConfigSpeedBusOperation+0x4a>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80125c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      status = HAL_ERROR;
 80125c4:	2601      	movs	r6, #1
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80125c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80125ca:	63a3      	str	r3, [r4, #56]	; 0x38
      break;
 80125cc:	e01f      	b.n	801260e <HAL_SD_ConfigSpeedBusOperation+0x6a>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 80125ce:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80125d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80125d4:	d015      	beq.n	8012602 <HAL_SD_ConfigSpeedBusOperation+0x5e>
 80125d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80125da:	d012      	beq.n	8012602 <HAL_SD_ConfigSpeedBusOperation+0x5e>
            (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 80125dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80125de:	2b01      	cmp	r3, #1
 80125e0:	d00f      	beq.n	8012602 <HAL_SD_ConfigSpeedBusOperation+0x5e>
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80125e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          status = HAL_ERROR;
 80125e4:	2601      	movs	r6, #1
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80125e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80125ea:	63a3      	str	r3, [r4, #56]	; 0x38
          status = HAL_ERROR;
 80125ec:	e00f      	b.n	801260e <HAL_SD_ConfigSpeedBusOperation+0x6a>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 80125ee:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80125f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80125f4:	d005      	beq.n	8012602 <HAL_SD_ConfigSpeedBusOperation+0x5e>
 80125f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80125fa:	d002      	beq.n	8012602 <HAL_SD_ConfigSpeedBusOperation+0x5e>
            (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 80125fc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80125fe:	2b01      	cmp	r3, #1
 8012600:	d104      	bne.n	801260c <HAL_SD_ConfigSpeedBusOperation+0x68>
          if (SD_HighSpeed(hsd) != HAL_SD_ERROR_NONE)
 8012602:	4620      	mov	r0, r4
 8012604:	f7ff f81a 	bl	801163c <SD_HighSpeed>
 8012608:	2800      	cmp	r0, #0
 801260a:	d1ea      	bne.n	80125e2 <HAL_SD_ConfigSpeedBusOperation+0x3e>
    switch (SpeedMode)
 801260c:	2600      	movs	r6, #0
  tickstart = HAL_GetTick();
 801260e:	f7f9 f935 	bl	800b87c <HAL_GetTick>
 8012612:	4605      	mov	r5, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8012614:	e00b      	b.n	801262e <HAL_SD_ConfigSpeedBusOperation+0x8a>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8012616:	6820      	ldr	r0, [r4, #0]
 8012618:	f001 fc04 	bl	8013e24 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 801261c:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8012620:	2804      	cmp	r0, #4
 8012622:	d01f      	beq.n	8012664 <HAL_SD_ConfigSpeedBusOperation+0xc0>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8012624:	f7f9 f92a 	bl	800b87c <HAL_GetTick>
 8012628:	1b40      	subs	r0, r0, r5
 801262a:	3001      	adds	r0, #1
 801262c:	d00f      	beq.n	801264e <HAL_SD_ConfigSpeedBusOperation+0xaa>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801262e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012630:	6820      	ldr	r0, [r4, #0]
 8012632:	0409      	lsls	r1, r1, #16
 8012634:	f002 fcae 	bl	8014f94 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8012638:	4601      	mov	r1, r0
 801263a:	2800      	cmp	r0, #0
 801263c:	d0eb      	beq.n	8012616 <HAL_SD_ConfigSpeedBusOperation+0x72>
    hsd->ErrorCode |= errorstate;
 801263e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012640:	4303      	orrs	r3, r0
 8012642:	63a3      	str	r3, [r4, #56]	; 0x38
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8012644:	f7f9 f91a 	bl	800b87c <HAL_GetTick>
 8012648:	1b40      	subs	r0, r0, r5
 801264a:	3001      	adds	r0, #1
 801264c:	d1ef      	bne.n	801262e <HAL_SD_ConfigSpeedBusOperation+0x8a>
      return HAL_TIMEOUT;
 801264e:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8012650:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 8012654:	2301      	movs	r3, #1
}
 8012656:	4630      	mov	r0, r6
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8012658:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 801265a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 801265e:	b016      	add	sp, #88	; 0x58
 8012660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8012664:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012668:	6820      	ldr	r0, [r4, #0]
 801266a:	f001 fbf5 	bl	8013e58 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 801266e:	b130      	cbz	r0, 801267e <HAL_SD_ConfigSpeedBusOperation+0xda>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8012670:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 8012672:	2601      	movs	r6, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8012674:	4a74      	ldr	r2, [pc, #464]	; (8012848 <HAL_SD_ConfigSpeedBusOperation+0x2a4>)
 8012676:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8012678:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801267a:	4303      	orrs	r3, r0
 801267c:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 801267e:	2301      	movs	r3, #1
}
 8012680:	4630      	mov	r0, r6
  hsd->State = HAL_SD_STATE_READY;
 8012682:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8012686:	b016      	add	sp, #88	; 0x58
 8012688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch (SpeedMode)
 801268c:	2904      	cmp	r1, #4
 801268e:	d898      	bhi.n	80125c2 <HAL_SD_ConfigSpeedBusOperation+0x1e>
 8012690:	a301      	add	r3, pc, #4	; (adr r3, 8012698 <HAL_SD_ConfigSpeedBusOperation+0xf4>)
 8012692:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8012696:	bf00      	nop
 8012698:	08012715 	.word	0x08012715
 801269c:	0801260d 	.word	0x0801260d
 80126a0:	080125cf 	.word	0x080125cf
 80126a4:	080126e7 	.word	0x080126e7
 80126a8:	080126ad 	.word	0x080126ad
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 80126ac:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80126ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80126b2:	d002      	beq.n	80126ba <HAL_SD_ConfigSpeedBusOperation+0x116>
 80126b4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80126b6:	2b01      	cmp	r3, #1
 80126b8:	d193      	bne.n	80125e2 <HAL_SD_ConfigSpeedBusOperation+0x3e>
  */
static uint32_t SD_DDR_Mode(SD_HandleTypeDef *hsd)
{
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 80126ba:	2540      	movs	r5, #64	; 0x40
 80126bc:	2100      	movs	r1, #0
 80126be:	a806      	add	r0, sp, #24
 80126c0:	462a      	mov	r2, r5
 80126c2:	f013 ff5e 	bl	8026582 <memset>
  uint32_t count, loop = 0 ;
  uint32_t Timeout = HAL_GetTick();
 80126c6:	f7f9 f8d9 	bl	800b87c <HAL_GetTick>

  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 80126ca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  uint32_t Timeout = HAL_GetTick();
 80126cc:	4607      	mov	r7, r0
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d05e      	beq.n	8012790 <HAL_SD_ConfigSpeedBusOperation+0x1ec>
  {
     /* Standard Speed Card <= 12.5Mhz  */
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
  }

  if(hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80126d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80126d6:	d062      	beq.n	801279e <HAL_SD_ConfigSpeedBusOperation+0x1fa>
  HAL_StatusTypeDef status = HAL_OK;
 80126d8:	2600      	movs	r6, #0
 80126da:	6823      	ldr	r3, [r4, #0]
          hsd->Instance->CLKCR |=  SDMMC_CLKCR_BUSSPEED | SDMMC_CLKCR_DDR;
 80126dc:	685a      	ldr	r2, [r3, #4]
 80126de:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 80126e2:	605a      	str	r2, [r3, #4]
 80126e4:	e793      	b.n	801260e <HAL_SD_ConfigSpeedBusOperation+0x6a>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 80126e6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80126e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80126ec:	d003      	beq.n	80126f6 <HAL_SD_ConfigSpeedBusOperation+0x152>
 80126ee:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80126f0:	2b01      	cmp	r3, #1
 80126f2:	f47f af76 	bne.w	80125e2 <HAL_SD_ConfigSpeedBusOperation+0x3e>
          if (SD_UltraHighSpeed(hsd) != HAL_SD_ERROR_NONE)
 80126f6:	4620      	mov	r0, r4
 80126f8:	f7ff fa90 	bl	8011c1c <SD_UltraHighSpeed>
 80126fc:	b310      	cbz	r0, 8012744 <HAL_SD_ConfigSpeedBusOperation+0x1a0>
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80126fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            status = HAL_ERROR;
 8012700:	2601      	movs	r6, #1
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8012702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012706:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->Instance->CLKCR |= SDMMC_CLKCR_BUSSPEED;
 8012708:	6822      	ldr	r2, [r4, #0]
 801270a:	6853      	ldr	r3, [r2, #4]
 801270c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012710:	6053      	str	r3, [r2, #4]
 8012712:	e77c      	b.n	801260e <HAL_SD_ConfigSpeedBusOperation+0x6a>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8012714:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8012716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801271a:	d007      	beq.n	801272c <HAL_SD_ConfigSpeedBusOperation+0x188>
 801271c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801271e:	2a01      	cmp	r2, #1
 8012720:	d004      	beq.n	801272c <HAL_SD_ConfigSpeedBusOperation+0x188>
        else if (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED)
 8012722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012726:	f47f af71 	bne.w	801260c <HAL_SD_ConfigSpeedBusOperation+0x68>
 801272a:	e76a      	b.n	8012602 <HAL_SD_ConfigSpeedBusOperation+0x5e>
          hsd->Instance->CLKCR |= SDMMC_CLKCR_BUSSPEED;
 801272c:	6822      	ldr	r2, [r4, #0]
          if (SD_UltraHighSpeed(hsd) != HAL_SD_ERROR_NONE)
 801272e:	4620      	mov	r0, r4
          hsd->Instance->CLKCR |= SDMMC_CLKCR_BUSSPEED;
 8012730:	6853      	ldr	r3, [r2, #4]
 8012732:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012736:	6053      	str	r3, [r2, #4]
          if (SD_UltraHighSpeed(hsd) != HAL_SD_ERROR_NONE)
 8012738:	f7ff fa70 	bl	8011c1c <SD_UltraHighSpeed>
 801273c:	2800      	cmp	r0, #0
 801273e:	f43f af65 	beq.w	801260c <HAL_SD_ConfigSpeedBusOperation+0x68>
 8012742:	e75e      	b.n	8012602 <HAL_SD_ConfigSpeedBusOperation+0x5e>
  HAL_StatusTypeDef status = HAL_OK;
 8012744:	4606      	mov	r6, r0
 8012746:	e7df      	b.n	8012708 <HAL_SD_ConfigSpeedBusOperation+0x164>
        hsd->State= HAL_SD_STATE_READY;
        return HAL_SD_ERROR_TIMEOUT;
      }
    }

    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8012748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801274a:	0715      	lsls	r5, r2, #28
 801274c:	d478      	bmi.n	8012840 <HAL_SD_ConfigSpeedBusOperation+0x29c>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);

      return errorstate;
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801274e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012750:	0790      	lsls	r0, r2, #30
 8012752:	d472      	bmi.n	801283a <HAL_SD_ConfigSpeedBusOperation+0x296>

      errorstate = SDMMC_ERROR_DATA_CRC_FAIL;

      return errorstate;
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8012754:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012756:	0691      	lsls	r1, r2, #26
 8012758:	d46c      	bmi.n	8012834 <HAL_SD_ConfigSpeedBusOperation+0x290>

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);

    /* Test if the switch mode  is ok */
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 801275a:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801275e:	493b      	ldr	r1, [pc, #236]	; (801284c <HAL_SD_ConfigSpeedBusOperation+0x2a8>)
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8012760:	0792      	lsls	r2, r2, #30
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8012762:	6399      	str	r1, [r3, #56]	; 0x38
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8012764:	d515      	bpl.n	8012792 <HAL_SD_ConfigSpeedBusOperation+0x1ee>
    else
    {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
      hsd->DriveTransceiver_1_8V_Callback(SET);
#else
      HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8012766:	2001      	movs	r0, #1
 8012768:	f7f9 f824 	bl	800b7b4 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
#if defined (DLYB_SDMMC1) || defined (DLYB_SDMMC2)
      /* Enable DelayBlock Peripheral */
      /* SDMMC_CKin feedback clock selected as receive clock, for DDR50 */
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
 801276c:	6822      	ldr	r2, [r4, #0]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 801276e:	4838      	ldr	r0, [pc, #224]	; (8012850 <HAL_SD_ConfigSpeedBusOperation+0x2ac>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
 8012770:	6853      	ldr	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8012772:	4938      	ldr	r1, [pc, #224]	; (8012854 <HAL_SD_ConfigSpeedBusOperation+0x2b0>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
 8012774:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8012778:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801277c:	6053      	str	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 801277e:	4b36      	ldr	r3, [pc, #216]	; (8012858 <HAL_SD_ConfigSpeedBusOperation+0x2b4>)
 8012780:	4282      	cmp	r2, r0
 8012782:	bf0c      	ite	eq
 8012784:	4608      	moveq	r0, r1
 8012786:	4618      	movne	r0, r3
 8012788:	f001 fac2 	bl	8013d10 <DelayBlock_Enable>
 801278c:	2800      	cmp	r0, #0
 801278e:	d0a3      	beq.n	80126d8 <HAL_SD_ConfigSpeedBusOperation+0x134>
 8012790:	6823      	ldr	r3, [r4, #0]
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8012792:	6ba2      	ldr	r2, [r4, #56]	; 0x38
            status = HAL_ERROR;
 8012794:	2601      	movs	r6, #1
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8012796:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801279a:	63a2      	str	r2, [r4, #56]	; 0x38
            status = HAL_ERROR;
 801279c:	e79e      	b.n	80126dc <HAL_SD_ConfigSpeedBusOperation+0x138>
    hsd->Instance->DCTRL = 0;
 801279e:	6820      	ldr	r0, [r4, #0]
 80127a0:	2300      	movs	r3, #0
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80127a2:	4629      	mov	r1, r5
    hsd->Instance->DCTRL = 0;
 80127a4:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80127a6:	f001 fb57 	bl	8013e58 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_SD_ERROR_NONE)
 80127aa:	2800      	cmp	r0, #0
 80127ac:	d1f0      	bne.n	8012790 <HAL_SD_ConfigSpeedBusOperation+0x1ec>
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 80127ae:	2360      	movs	r3, #96	; 0x60
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 80127b0:	f04f 32ff 	mov.w	r2, #4294967295
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 80127b4:	4669      	mov	r1, sp
 80127b6:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 80127b8:	9302      	str	r3, [sp, #8]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80127ba:	2302      	movs	r3, #2
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 80127bc:	9200      	str	r2, [sp, #0]
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80127be:	2200      	movs	r2, #0
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80127c0:	9303      	str	r3, [sp, #12]
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80127c2:	2301      	movs	r3, #1
    sdmmc_datainitstructure.DataLength    = 64U;
 80127c4:	9501      	str	r5, [sp, #4]
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80127c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 80127ca:	f001 fb2f 	bl	8013e2c <SDMMC_ConfigData>
 80127ce:	4606      	mov	r6, r0
 80127d0:	2800      	cmp	r0, #0
 80127d2:	d1dd      	bne.n	8012790 <HAL_SD_ConfigSpeedBusOperation+0x1ec>
    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_DDR50_SWITCH_PATTERN);
 80127d4:	4921      	ldr	r1, [pc, #132]	; (801285c <HAL_SD_ConfigSpeedBusOperation+0x2b8>)
 80127d6:	6820      	ldr	r0, [r4, #0]
 80127d8:	f002 fd32 	bl	8015240 <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 80127dc:	4605      	mov	r5, r0
 80127de:	2800      	cmp	r0, #0
 80127e0:	d1d6      	bne.n	8012790 <HAL_SD_ConfigSpeedBusOperation+0x1ec>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 80127e2:	f240 582a 	movw	r8, #1322	; 0x52a
 80127e6:	e004      	b.n	80127f2 <HAL_SD_ConfigSpeedBusOperation+0x24e>
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 80127e8:	f7f9 f848 	bl	800b87c <HAL_GetTick>
 80127ec:	1bc0      	subs	r0, r0, r7
 80127ee:	3001      	adds	r0, #1
 80127f0:	d018      	beq.n	8012824 <HAL_SD_ConfigSpeedBusOperation+0x280>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 80127f2:	6823      	ldr	r3, [r4, #0]
 80127f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80127f6:	4618      	mov	r0, r3
 80127f8:	ea12 0f08 	tst.w	r2, r8
 80127fc:	d1a4      	bne.n	8012748 <HAL_SD_ConfigSpeedBusOperation+0x1a4>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80127fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012800:	041b      	lsls	r3, r3, #16
 8012802:	d5f1      	bpl.n	80127e8 <HAL_SD_ConfigSpeedBusOperation+0x244>
 8012804:	ab06      	add	r3, sp, #24
 8012806:	eb03 1945 	add.w	r9, r3, r5, lsl #5
 801280a:	ab0e      	add	r3, sp, #56	; 0x38
 801280c:	eb03 1a45 	add.w	sl, r3, r5, lsl #5
 8012810:	e000      	b.n	8012814 <HAL_SD_ConfigSpeedBusOperation+0x270>
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 8012812:	6820      	ldr	r0, [r4, #0]
 8012814:	f001 fae8 	bl	8013de8 <SDMMC_ReadFIFO>
 8012818:	f849 0b04 	str.w	r0, [r9], #4
        for (count = 0U; count < 8U; count++)
 801281c:	45d1      	cmp	r9, sl
 801281e:	d1f8      	bne.n	8012812 <HAL_SD_ConfigSpeedBusOperation+0x26e>
        loop ++;
 8012820:	3501      	adds	r5, #1
 8012822:	e7e1      	b.n	80127e8 <HAL_SD_ConfigSpeedBusOperation+0x244>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8012824:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 8012828:	2201      	movs	r2, #1
 801282a:	6823      	ldr	r3, [r4, #0]
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 801282c:	63a1      	str	r1, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 801282e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        return HAL_SD_ERROR_TIMEOUT;
 8012832:	e7ae      	b.n	8012792 <HAL_SD_ConfigSpeedBusOperation+0x1ee>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8012834:	2220      	movs	r2, #32
 8012836:	639a      	str	r2, [r3, #56]	; 0x38
      return errorstate;
 8012838:	e7ab      	b.n	8012792 <HAL_SD_ConfigSpeedBusOperation+0x1ee>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 801283a:	2202      	movs	r2, #2
 801283c:	639a      	str	r2, [r3, #56]	; 0x38
      return errorstate;
 801283e:	e7a8      	b.n	8012792 <HAL_SD_ConfigSpeedBusOperation+0x1ee>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8012840:	2208      	movs	r2, #8
 8012842:	639a      	str	r2, [r3, #56]	; 0x38
      return errorstate;
 8012844:	e74a      	b.n	80126dc <HAL_SD_ConfigSpeedBusOperation+0x138>
 8012846:	bf00      	nop
 8012848:	1fe00fff 	.word	0x1fe00fff
 801284c:	18000f3a 	.word	0x18000f3a
 8012850:	52007000 	.word	0x52007000
 8012854:	52008000 	.word	0x52008000
 8012858:	48022800 	.word	0x48022800
 801285c:	80ffff04 	.word	0x80ffff04

08012860 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8012860:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 8012862:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8012864:	0409      	lsls	r1, r1, #16
{
 8012866:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8012868:	6800      	ldr	r0, [r0, #0]
 801286a:	f002 fb93 	bl	8014f94 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 801286e:	4601      	mov	r1, r0
 8012870:	b120      	cbz	r0, 801287c <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 8012872:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012874:	2000      	movs	r0, #0
 8012876:	430b      	orrs	r3, r1
 8012878:	63a3      	str	r3, [r4, #56]	; 0x38
}
 801287a:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801287c:	6820      	ldr	r0, [r4, #0]
 801287e:	f001 fad1 	bl	8013e24 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8012882:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8012886:	bd10      	pop	{r4, pc}

08012888 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012888:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801288a:	4a1b      	ldr	r2, [pc, #108]	; (80128f8 <TIM_OC1_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801288c:	f023 0301 	bic.w	r3, r3, #1
{
 8012890:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012892:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8012894:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8012896:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8012898:	6985      	ldr	r5, [r0, #24]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801289a:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801289e:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 80128a0:	680d      	ldr	r5, [r1, #0]
 80128a2:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80128a4:	688d      	ldr	r5, [r1, #8]
 80128a6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80128a8:	4d14      	ldr	r5, [pc, #80]	; (80128fc <TIM_OC1_SetConfig+0x74>)
 80128aa:	42a8      	cmp	r0, r5
 80128ac:	d00e      	beq.n	80128cc <TIM_OC1_SetConfig+0x44>
 80128ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80128b2:	42a8      	cmp	r0, r5
 80128b4:	d00a      	beq.n	80128cc <TIM_OC1_SetConfig+0x44>
 80128b6:	4e12      	ldr	r6, [pc, #72]	; (8012900 <TIM_OC1_SetConfig+0x78>)
 80128b8:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 80128bc:	42a8      	cmp	r0, r5
 80128be:	bf18      	it	ne
 80128c0:	42b0      	cmpne	r0, r6
 80128c2:	d003      	beq.n	80128cc <TIM_OC1_SetConfig+0x44>
 80128c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80128c8:	42a8      	cmp	r0, r5
 80128ca:	d10d      	bne.n	80128e8 <TIM_OC1_SetConfig+0x60>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80128cc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80128ce:	f023 0308 	bic.w	r3, r3, #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80128d2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 80128d6:	432b      	orrs	r3, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80128d8:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpccer &= ~TIM_CCER_CC1NE;
 80128dc:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80128e0:	ea46 0c05 	orr.w	ip, r6, r5
 80128e4:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80128e8:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80128ea:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80128ec:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80128ee:	6341      	str	r1, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80128f0:	6203      	str	r3, [r0, #32]
}
 80128f2:	bc70      	pop	{r4, r5, r6}
 80128f4:	4770      	bx	lr
 80128f6:	bf00      	nop
 80128f8:	fffeff8c 	.word	0xfffeff8c
 80128fc:	40010000 	.word	0x40010000
 8012900:	40014000 	.word	0x40014000

08012904 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012904:	6a03      	ldr	r3, [r0, #32]
 8012906:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 801290a:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801290c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801290e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012910:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012912:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012914:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 8012918:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801291a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 801291e:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012920:	688d      	ldr	r5, [r1, #8]
 8012922:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012926:	4d14      	ldr	r5, [pc, #80]	; (8012978 <TIM_OC3_SetConfig+0x74>)
 8012928:	42a8      	cmp	r0, r5
 801292a:	d00e      	beq.n	801294a <TIM_OC3_SetConfig+0x46>
 801292c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8012930:	42a8      	cmp	r0, r5
 8012932:	d00a      	beq.n	801294a <TIM_OC3_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012934:	4e11      	ldr	r6, [pc, #68]	; (801297c <TIM_OC3_SetConfig+0x78>)
 8012936:	4d12      	ldr	r5, [pc, #72]	; (8012980 <TIM_OC3_SetConfig+0x7c>)
 8012938:	42a8      	cmp	r0, r5
 801293a:	bf18      	it	ne
 801293c:	42b0      	cmpne	r0, r6
 801293e:	d00b      	beq.n	8012958 <TIM_OC3_SetConfig+0x54>
 8012940:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8012944:	42a8      	cmp	r0, r5
 8012946:	d10f      	bne.n	8012968 <TIM_OC3_SetConfig+0x64>
 8012948:	e006      	b.n	8012958 <TIM_OC3_SetConfig+0x54>
    tmpccer &= ~TIM_CCER_CC3NP;
 801294a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801294e:	68cd      	ldr	r5, [r1, #12]
 8012950:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8012954:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8012958:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801295c:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
 8012960:	ea46 0c05 	orr.w	ip, r6, r5
 8012964:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8012968:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 801296a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 801296c:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 801296e:	63c1      	str	r1, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012970:	6203      	str	r3, [r0, #32]
}
 8012972:	bc70      	pop	{r4, r5, r6}
 8012974:	4770      	bx	lr
 8012976:	bf00      	nop
 8012978:	40010000 	.word	0x40010000
 801297c:	40014000 	.word	0x40014000
 8012980:	40014400 	.word	0x40014400

08012984 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8012984:	2800      	cmp	r0, #0
 8012986:	f000 80a5 	beq.w	8012ad4 <HAL_TIM_Base_Init+0x150>
{
 801298a:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 801298c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8012990:	4604      	mov	r4, r0
 8012992:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8012996:	2b00      	cmp	r3, #0
 8012998:	d076      	beq.n	8012a88 <HAL_TIM_Base_Init+0x104>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801299a:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 801299c:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801299e:	494e      	ldr	r1, [pc, #312]	; (8012ad8 <HAL_TIM_Base_Init+0x154>)
 80129a0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 80129a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80129a8:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 80129ac:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80129ae:	fab1 f181 	clz	r1, r1
 80129b2:	ea4f 1151 	mov.w	r1, r1, lsr #5
 80129b6:	d027      	beq.n	8012a08 <HAL_TIM_Base_Init+0x84>
 80129b8:	bb31      	cbnz	r1, 8012a08 <HAL_TIM_Base_Init+0x84>
 80129ba:	4848      	ldr	r0, [pc, #288]	; (8012adc <HAL_TIM_Base_Init+0x158>)
 80129bc:	4d48      	ldr	r5, [pc, #288]	; (8012ae0 <HAL_TIM_Base_Init+0x15c>)
 80129be:	4282      	cmp	r2, r0
 80129c0:	d067      	beq.n	8012a92 <HAL_TIM_Base_Init+0x10e>
 80129c2:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80129c6:	4282      	cmp	r2, r0
 80129c8:	d063      	beq.n	8012a92 <HAL_TIM_Base_Init+0x10e>
 80129ca:	1b55      	subs	r5, r2, r5
 80129cc:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80129d0:	fab5 f585 	clz	r5, r5
 80129d4:	4282      	cmp	r2, r0
 80129d6:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80129da:	d063      	beq.n	8012aa4 <HAL_TIM_Base_Init+0x120>
 80129dc:	2d00      	cmp	r5, #0
 80129de:	d161      	bne.n	8012aa4 <HAL_TIM_Base_Init+0x120>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80129e0:	4840      	ldr	r0, [pc, #256]	; (8012ae4 <HAL_TIM_Base_Init+0x160>)
 80129e2:	4941      	ldr	r1, [pc, #260]	; (8012ae8 <HAL_TIM_Base_Init+0x164>)
 80129e4:	428a      	cmp	r2, r1
 80129e6:	bf18      	it	ne
 80129e8:	4282      	cmpne	r2, r0
 80129ea:	d065      	beq.n	8012ab8 <HAL_TIM_Base_Init+0x134>
 80129ec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80129f0:	428a      	cmp	r2, r1
 80129f2:	d061      	beq.n	8012ab8 <HAL_TIM_Base_Init+0x134>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80129f4:	69a0      	ldr	r0, [r4, #24]
 80129f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80129fa:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80129fc:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80129fe:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8012a00:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012a02:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8012a04:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012a06:	e023      	b.n	8012a50 <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012a08:	4d35      	ldr	r5, [pc, #212]	; (8012ae0 <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8012a0e:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012a10:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 8012a12:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012a14:	fab5 f585 	clz	r5, r5
 8012a18:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012a1a:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8012a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012a20:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012a22:	69a0      	ldr	r0, [r4, #24]
 8012a24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012a28:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8012a2a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012a2c:	68e3      	ldr	r3, [r4, #12]
 8012a2e:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8012a30:	6863      	ldr	r3, [r4, #4]
 8012a32:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012a34:	b951      	cbnz	r1, 8012a4c <HAL_TIM_Base_Init+0xc8>
 8012a36:	b94d      	cbnz	r5, 8012a4c <HAL_TIM_Base_Init+0xc8>
 8012a38:	492a      	ldr	r1, [pc, #168]	; (8012ae4 <HAL_TIM_Base_Init+0x160>)
 8012a3a:	4b2b      	ldr	r3, [pc, #172]	; (8012ae8 <HAL_TIM_Base_Init+0x164>)
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	bf18      	it	ne
 8012a40:	428a      	cmpne	r2, r1
 8012a42:	d003      	beq.n	8012a4c <HAL_TIM_Base_Init+0xc8>
 8012a44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012a48:	429a      	cmp	r2, r3
 8012a4a:	d101      	bne.n	8012a50 <HAL_TIM_Base_Init+0xcc>
    TIMx->RCR = Structure->RepetitionCounter;
 8012a4c:	6963      	ldr	r3, [r4, #20]
 8012a4e:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8012a50:	2301      	movs	r3, #1
  return HAL_OK;
 8012a52:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8012a54:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012a56:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012a5a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8012a5e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8012a62:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8012a66:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8012a6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012a6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012a72:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8012a76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012a7a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8012a7e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8012a82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8012a86:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 8012a88:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8012a8c:	f7f4 f9e2 	bl	8006e54 <HAL_TIM_Base_MspInit>
 8012a90:	e783      	b.n	801299a <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012a92:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8012a98:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012a9a:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
 8012a9e:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012aa0:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012aa2:	e7ba      	b.n	8012a1a <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
 8012aa4:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8012aaa:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012aac:	480f      	ldr	r0, [pc, #60]	; (8012aec <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012aae:	4282      	cmp	r2, r0
 8012ab0:	d0b3      	beq.n	8012a1a <HAL_TIM_Base_Init+0x96>
 8012ab2:	2d00      	cmp	r5, #0
 8012ab4:	d1b1      	bne.n	8012a1a <HAL_TIM_Base_Init+0x96>
 8012ab6:	e793      	b.n	80129e0 <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012ab8:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8012aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012abe:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012ac0:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012ac2:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012ac4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012ac8:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8012aca:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8012acc:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012ace:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8012ad0:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012ad2:	e7b1      	b.n	8012a38 <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
 8012ad4:	2001      	movs	r0, #1
}
 8012ad6:	4770      	bx	lr
 8012ad8:	40010000 	.word	0x40010000
 8012adc:	40000400 	.word	0x40000400
 8012ae0:	40010400 	.word	0x40010400
 8012ae4:	40014000 	.word	0x40014000
 8012ae8:	40014400 	.word	0x40014400
 8012aec:	40000c00 	.word	0x40000c00

08012af0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8012af0:	2800      	cmp	r0, #0
 8012af2:	f000 80a5 	beq.w	8012c40 <HAL_TIM_PWM_Init+0x150>
{
 8012af6:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8012af8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8012afc:	4604      	mov	r4, r0
 8012afe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d076      	beq.n	8012bf4 <HAL_TIM_PWM_Init+0x104>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012b06:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8012b08:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012b0a:	494e      	ldr	r1, [pc, #312]	; (8012c44 <HAL_TIM_PWM_Init+0x154>)
 8012b0c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 8012b10:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012b14:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8012b18:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012b1a:	fab1 f181 	clz	r1, r1
 8012b1e:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8012b22:	d027      	beq.n	8012b74 <HAL_TIM_PWM_Init+0x84>
 8012b24:	bb31      	cbnz	r1, 8012b74 <HAL_TIM_PWM_Init+0x84>
 8012b26:	4848      	ldr	r0, [pc, #288]	; (8012c48 <HAL_TIM_PWM_Init+0x158>)
 8012b28:	4d48      	ldr	r5, [pc, #288]	; (8012c4c <HAL_TIM_PWM_Init+0x15c>)
 8012b2a:	4282      	cmp	r2, r0
 8012b2c:	d067      	beq.n	8012bfe <HAL_TIM_PWM_Init+0x10e>
 8012b2e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8012b32:	4282      	cmp	r2, r0
 8012b34:	d063      	beq.n	8012bfe <HAL_TIM_PWM_Init+0x10e>
 8012b36:	1b55      	subs	r5, r2, r5
 8012b38:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8012b3c:	fab5 f585 	clz	r5, r5
 8012b40:	4282      	cmp	r2, r0
 8012b42:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8012b46:	d063      	beq.n	8012c10 <HAL_TIM_PWM_Init+0x120>
 8012b48:	2d00      	cmp	r5, #0
 8012b4a:	d161      	bne.n	8012c10 <HAL_TIM_PWM_Init+0x120>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012b4c:	4840      	ldr	r0, [pc, #256]	; (8012c50 <HAL_TIM_PWM_Init+0x160>)
 8012b4e:	4941      	ldr	r1, [pc, #260]	; (8012c54 <HAL_TIM_PWM_Init+0x164>)
 8012b50:	428a      	cmp	r2, r1
 8012b52:	bf18      	it	ne
 8012b54:	4282      	cmpne	r2, r0
 8012b56:	d065      	beq.n	8012c24 <HAL_TIM_PWM_Init+0x134>
 8012b58:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012b5c:	428a      	cmp	r2, r1
 8012b5e:	d061      	beq.n	8012c24 <HAL_TIM_PWM_Init+0x134>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012b60:	69a0      	ldr	r0, [r4, #24]
 8012b62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012b66:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012b68:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8012b6a:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8012b6c:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012b6e:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8012b70:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012b72:	e023      	b.n	8012bbc <HAL_TIM_PWM_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012b74:	4d35      	ldr	r5, [pc, #212]	; (8012c4c <HAL_TIM_PWM_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8012b7a:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012b7c:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 8012b7e:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012b80:	fab5 f585 	clz	r5, r5
 8012b84:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012b86:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8012b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012b8c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012b8e:	69a0      	ldr	r0, [r4, #24]
 8012b90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012b94:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8012b96:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012b98:	68e3      	ldr	r3, [r4, #12]
 8012b9a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8012b9c:	6863      	ldr	r3, [r4, #4]
 8012b9e:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012ba0:	b951      	cbnz	r1, 8012bb8 <HAL_TIM_PWM_Init+0xc8>
 8012ba2:	b94d      	cbnz	r5, 8012bb8 <HAL_TIM_PWM_Init+0xc8>
 8012ba4:	492a      	ldr	r1, [pc, #168]	; (8012c50 <HAL_TIM_PWM_Init+0x160>)
 8012ba6:	4b2b      	ldr	r3, [pc, #172]	; (8012c54 <HAL_TIM_PWM_Init+0x164>)
 8012ba8:	429a      	cmp	r2, r3
 8012baa:	bf18      	it	ne
 8012bac:	428a      	cmpne	r2, r1
 8012bae:	d003      	beq.n	8012bb8 <HAL_TIM_PWM_Init+0xc8>
 8012bb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012bb4:	429a      	cmp	r2, r3
 8012bb6:	d101      	bne.n	8012bbc <HAL_TIM_PWM_Init+0xcc>
    TIMx->RCR = Structure->RepetitionCounter;
 8012bb8:	6963      	ldr	r3, [r4, #20]
 8012bba:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8012bbc:	2301      	movs	r3, #1
  return HAL_OK;
 8012bbe:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8012bc0:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012bc2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012bc6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8012bca:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8012bce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8012bd2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8012bd6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012bda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012bde:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8012be2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012be6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8012bea:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8012bee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8012bf2:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 8012bf4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8012bf8:	f7f4 f912 	bl	8006e20 <HAL_TIM_PWM_MspInit>
 8012bfc:	e783      	b.n	8012b06 <HAL_TIM_PWM_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012bfe:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8012c04:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012c06:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
 8012c0a:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012c0c:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012c0e:	e7ba      	b.n	8012b86 <HAL_TIM_PWM_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
 8012c10:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8012c16:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012c18:	480f      	ldr	r0, [pc, #60]	; (8012c58 <HAL_TIM_PWM_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012c1a:	4282      	cmp	r2, r0
 8012c1c:	d0b3      	beq.n	8012b86 <HAL_TIM_PWM_Init+0x96>
 8012c1e:	2d00      	cmp	r5, #0
 8012c20:	d1b1      	bne.n	8012b86 <HAL_TIM_PWM_Init+0x96>
 8012c22:	e793      	b.n	8012b4c <HAL_TIM_PWM_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012c24:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8012c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012c2a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012c2c:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012c2e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012c30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012c34:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8012c36:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8012c38:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012c3a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8012c3c:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012c3e:	e7b1      	b.n	8012ba4 <HAL_TIM_PWM_Init+0xb4>
    return HAL_ERROR;
 8012c40:	2001      	movs	r0, #1
}
 8012c42:	4770      	bx	lr
 8012c44:	40010000 	.word	0x40010000
 8012c48:	40000400 	.word	0x40000400
 8012c4c:	40010400 	.word	0x40010400
 8012c50:	40014000 	.word	0x40014000
 8012c54:	40014400 	.word	0x40014400
 8012c58:	40000c00 	.word	0x40000c00

08012c5c <HAL_TIM_PWM_Start>:
 8012c5c:	2910      	cmp	r1, #16
 8012c5e:	d80a      	bhi.n	8012c76 <HAL_TIM_PWM_Start+0x1a>
 8012c60:	e8df f001 	tbb	[pc, r1]
 8012c64:	09090955 	.word	0x09090955
 8012c68:	0909095d 	.word	0x0909095d
 8012c6c:	09090965 	.word	0x09090965
 8012c70:	0909096d 	.word	0x0909096d
 8012c74:	73          	.byte	0x73
 8012c75:	00          	.byte	0x00
 8012c76:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8012c7a:	2b01      	cmp	r3, #1
 8012c7c:	d163      	bne.n	8012d46 <HAL_TIM_PWM_Start+0xea>
 8012c7e:	2910      	cmp	r1, #16
 8012c80:	d80a      	bhi.n	8012c98 <HAL_TIM_PWM_Start+0x3c>
 8012c82:	e8df f001 	tbb	[pc, r1]
 8012c86:	0948      	.short	0x0948
 8012c88:	09500909 	.word	0x09500909
 8012c8c:	09580909 	.word	0x09580909
 8012c90:	09670909 	.word	0x09670909
 8012c94:	0909      	.short	0x0909
 8012c96:	6b          	.byte	0x6b
 8012c97:	00          	.byte	0x00
 8012c98:	2302      	movs	r3, #2
 8012c9a:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8012c9e:	6803      	ldr	r3, [r0, #0]
 8012ca0:	f001 011f 	and.w	r1, r1, #31
 8012ca4:	4a31      	ldr	r2, [pc, #196]	; (8012d6c <HAL_TIM_PWM_Start+0x110>)
 8012ca6:	2001      	movs	r0, #1
 8012ca8:	b430      	push	{r4, r5}
 8012caa:	4d31      	ldr	r5, [pc, #196]	; (8012d70 <HAL_TIM_PWM_Start+0x114>)
 8012cac:	fa00 f101 	lsl.w	r1, r0, r1
 8012cb0:	6a1c      	ldr	r4, [r3, #32]
 8012cb2:	42ab      	cmp	r3, r5
 8012cb4:	bf18      	it	ne
 8012cb6:	4293      	cmpne	r3, r2
 8012cb8:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8012cbc:	ea24 0401 	bic.w	r4, r4, r1
 8012cc0:	482c      	ldr	r0, [pc, #176]	; (8012d74 <HAL_TIM_PWM_Start+0x118>)
 8012cc2:	bf0c      	ite	eq
 8012cc4:	2201      	moveq	r2, #1
 8012cc6:	2200      	movne	r2, #0
 8012cc8:	621c      	str	r4, [r3, #32]
 8012cca:	42ab      	cmp	r3, r5
 8012ccc:	bf08      	it	eq
 8012cce:	f042 0201 	orreq.w	r2, r2, #1
 8012cd2:	6a1c      	ldr	r4, [r3, #32]
 8012cd4:	4283      	cmp	r3, r0
 8012cd6:	bf08      	it	eq
 8012cd8:	f042 0201 	orreq.w	r2, r2, #1
 8012cdc:	4321      	orrs	r1, r4
 8012cde:	6219      	str	r1, [r3, #32]
 8012ce0:	b912      	cbnz	r2, 8012ce8 <HAL_TIM_PWM_Start+0x8c>
 8012ce2:	4a25      	ldr	r2, [pc, #148]	; (8012d78 <HAL_TIM_PWM_Start+0x11c>)
 8012ce4:	4293      	cmp	r3, r2
 8012ce6:	d103      	bne.n	8012cf0 <HAL_TIM_PWM_Start+0x94>
 8012ce8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012cea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012cee:	645a      	str	r2, [r3, #68]	; 0x44
 8012cf0:	6899      	ldr	r1, [r3, #8]
 8012cf2:	4a22      	ldr	r2, [pc, #136]	; (8012d7c <HAL_TIM_PWM_Start+0x120>)
 8012cf4:	400a      	ands	r2, r1
 8012cf6:	2a06      	cmp	r2, #6
 8012cf8:	d034      	beq.n	8012d64 <HAL_TIM_PWM_Start+0x108>
 8012cfa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8012cfe:	d031      	beq.n	8012d64 <HAL_TIM_PWM_Start+0x108>
 8012d00:	681a      	ldr	r2, [r3, #0]
 8012d02:	2000      	movs	r0, #0
 8012d04:	f042 0201 	orr.w	r2, r2, #1
 8012d08:	bc30      	pop	{r4, r5}
 8012d0a:	601a      	str	r2, [r3, #0]
 8012d0c:	4770      	bx	lr
 8012d0e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8012d12:	2b01      	cmp	r3, #1
 8012d14:	d117      	bne.n	8012d46 <HAL_TIM_PWM_Start+0xea>
 8012d16:	2302      	movs	r3, #2
 8012d18:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8012d1c:	e7bf      	b.n	8012c9e <HAL_TIM_PWM_Start+0x42>
 8012d1e:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8012d22:	2b01      	cmp	r3, #1
 8012d24:	d10f      	bne.n	8012d46 <HAL_TIM_PWM_Start+0xea>
 8012d26:	2302      	movs	r3, #2
 8012d28:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8012d2c:	e7b7      	b.n	8012c9e <HAL_TIM_PWM_Start+0x42>
 8012d2e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8012d32:	2b01      	cmp	r3, #1
 8012d34:	d107      	bne.n	8012d46 <HAL_TIM_PWM_Start+0xea>
 8012d36:	2302      	movs	r3, #2
 8012d38:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8012d3c:	e7af      	b.n	8012c9e <HAL_TIM_PWM_Start+0x42>
 8012d3e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8012d42:	2b01      	cmp	r3, #1
 8012d44:	d09b      	beq.n	8012c7e <HAL_TIM_PWM_Start+0x22>
 8012d46:	2001      	movs	r0, #1
 8012d48:	4770      	bx	lr
 8012d4a:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8012d4e:	2b01      	cmp	r3, #1
 8012d50:	d095      	beq.n	8012c7e <HAL_TIM_PWM_Start+0x22>
 8012d52:	e7f8      	b.n	8012d46 <HAL_TIM_PWM_Start+0xea>
 8012d54:	2302      	movs	r3, #2
 8012d56:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8012d5a:	e7a0      	b.n	8012c9e <HAL_TIM_PWM_Start+0x42>
 8012d5c:	2302      	movs	r3, #2
 8012d5e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8012d62:	e79c      	b.n	8012c9e <HAL_TIM_PWM_Start+0x42>
 8012d64:	2000      	movs	r0, #0
 8012d66:	bc30      	pop	{r4, r5}
 8012d68:	4770      	bx	lr
 8012d6a:	bf00      	nop
 8012d6c:	40010000 	.word	0x40010000
 8012d70:	40010400 	.word	0x40010400
 8012d74:	40014400 	.word	0x40014400
 8012d78:	40014800 	.word	0x40014800
 8012d7c:	00010007 	.word	0x00010007

08012d80 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012d80:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012d82:	4a1c      	ldr	r2, [pc, #112]	; (8012df4 <TIM_OC2_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012d84:	f023 0310 	bic.w	r3, r3, #16
{
 8012d88:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012d8a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8012d8c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8012d8e:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8012d90:	6985      	ldr	r5, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8012d92:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012d96:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012d98:	680d      	ldr	r5, [r1, #0]
 8012d9a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012d9e:	688d      	ldr	r5, [r1, #8]
 8012da0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012da4:	4d14      	ldr	r5, [pc, #80]	; (8012df8 <TIM_OC2_SetConfig+0x78>)
 8012da6:	42a8      	cmp	r0, r5
 8012da8:	d00e      	beq.n	8012dc8 <TIM_OC2_SetConfig+0x48>
 8012daa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8012dae:	42a8      	cmp	r0, r5
 8012db0:	d00a      	beq.n	8012dc8 <TIM_OC2_SetConfig+0x48>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012db2:	4e12      	ldr	r6, [pc, #72]	; (8012dfc <TIM_OC2_SetConfig+0x7c>)
 8012db4:	4d12      	ldr	r5, [pc, #72]	; (8012e00 <TIM_OC2_SetConfig+0x80>)
 8012db6:	42a8      	cmp	r0, r5
 8012db8:	bf18      	it	ne
 8012dba:	42b0      	cmpne	r0, r6
 8012dbc:	d00b      	beq.n	8012dd6 <TIM_OC2_SetConfig+0x56>
 8012dbe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8012dc2:	42a8      	cmp	r0, r5
 8012dc4:	d10f      	bne.n	8012de6 <TIM_OC2_SetConfig+0x66>
 8012dc6:	e006      	b.n	8012dd6 <TIM_OC2_SetConfig+0x56>
    tmpccer &= ~TIM_CCER_CC2NP;
 8012dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012dcc:	68cd      	ldr	r5, [r1, #12]
 8012dce:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8012dd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012dd6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012dda:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
 8012dde:	ea46 0c05 	orr.w	ip, r6, r5
 8012de2:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8012de6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8012de8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8012dea:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8012dec:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8012dee:	6203      	str	r3, [r0, #32]
}
 8012df0:	bc70      	pop	{r4, r5, r6}
 8012df2:	4770      	bx	lr
 8012df4:	feff8cff 	.word	0xfeff8cff
 8012df8:	40010000 	.word	0x40010000
 8012dfc:	40014000 	.word	0x40014000
 8012e00:	40014400 	.word	0x40014400

08012e04 <HAL_TIM_PWM_ConfigChannel>:
{
 8012e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8012e06:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8012e0a:	2b01      	cmp	r3, #1
 8012e0c:	f000 8119 	beq.w	8013042 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8012e10:	2301      	movs	r3, #1
 8012e12:	4604      	mov	r4, r0
 8012e14:	460d      	mov	r5, r1
 8012e16:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8012e1a:	2a14      	cmp	r2, #20
 8012e1c:	d851      	bhi.n	8012ec2 <HAL_TIM_PWM_ConfigChannel+0xbe>
 8012e1e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8012e22:	0095      	.short	0x0095
 8012e24:	00500050 	.word	0x00500050
 8012e28:	00a90050 	.word	0x00a90050
 8012e2c:	00500050 	.word	0x00500050
 8012e30:	00be0050 	.word	0x00be0050
 8012e34:	00500050 	.word	0x00500050
 8012e38:	00150050 	.word	0x00150050
 8012e3c:	00500050 	.word	0x00500050
 8012e40:	00d20050 	.word	0x00d20050
 8012e44:	00500050 	.word	0x00500050
 8012e48:	00550050 	.word	0x00550050
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012e4c:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012e4e:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012e50:	6a1a      	ldr	r2, [r3, #32]
 8012e52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8012e56:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8012e58:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8012e5a:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8012e5c:	69d9      	ldr	r1, [r3, #28]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012e5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012e62:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012e66:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012e6a:	68ae      	ldr	r6, [r5, #8]
 8012e6c:	ea42 3206 	orr.w	r2, r2, r6, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012e70:	4e75      	ldr	r6, [pc, #468]	; (8013048 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8012e72:	42b3      	cmp	r3, r6
 8012e74:	d00e      	beq.n	8012e94 <HAL_TIM_PWM_ConfigChannel+0x90>
 8012e76:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8012e7a:	42b3      	cmp	r3, r6
 8012e7c:	d00a      	beq.n	8012e94 <HAL_TIM_PWM_ConfigChannel+0x90>
 8012e7e:	4f73      	ldr	r7, [pc, #460]	; (801304c <HAL_TIM_PWM_ConfigChannel+0x248>)
 8012e80:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8012e84:	42b3      	cmp	r3, r6
 8012e86:	bf18      	it	ne
 8012e88:	42bb      	cmpne	r3, r7
 8012e8a:	d003      	beq.n	8012e94 <HAL_TIM_PWM_ConfigChannel+0x90>
 8012e8c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8012e90:	42b3      	cmp	r3, r6
 8012e92:	d104      	bne.n	8012e9e <HAL_TIM_PWM_ConfigChannel+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012e94:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012e98:	696e      	ldr	r6, [r5, #20]
 8012e9a:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012e9e:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012ea0:	6868      	ldr	r0, [r5, #4]
  TIMx->CCMR2 = tmpccmrx;
 8012ea2:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012ea4:	6929      	ldr	r1, [r5, #16]
  TIMx->CCR4 = OC_Config->Pulse;
 8012ea6:	6418      	str	r0, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012ea8:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012eaa:	69da      	ldr	r2, [r3, #28]
 8012eac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012eb2:	69da      	ldr	r2, [r3, #28]
 8012eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012eb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012eba:	69da      	ldr	r2, [r3, #28]
 8012ebc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8012ec0:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8012ec2:	2300      	movs	r3, #0
  return HAL_OK;
 8012ec4:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8012ec6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8012eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8012ecc:	6803      	ldr	r3, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012ece:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8012ed0:	6a1a      	ldr	r2, [r3, #32]
 8012ed2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8012ed6:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8012ed8:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8012eda:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8012edc:	6d59      	ldr	r1, [r3, #84]	; 0x54

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8012ede:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8012ee2:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012ee6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8012eea:	68ae      	ldr	r6, [r5, #8]
 8012eec:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012ef0:	4e55      	ldr	r6, [pc, #340]	; (8013048 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8012ef2:	42b3      	cmp	r3, r6
 8012ef4:	d00e      	beq.n	8012f14 <HAL_TIM_PWM_ConfigChannel+0x110>
 8012ef6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8012efa:	42b3      	cmp	r3, r6
 8012efc:	d00a      	beq.n	8012f14 <HAL_TIM_PWM_ConfigChannel+0x110>
 8012efe:	4f53      	ldr	r7, [pc, #332]	; (801304c <HAL_TIM_PWM_ConfigChannel+0x248>)
 8012f00:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8012f04:	42b3      	cmp	r3, r6
 8012f06:	bf18      	it	ne
 8012f08:	42bb      	cmpne	r3, r7
 8012f0a:	d003      	beq.n	8012f14 <HAL_TIM_PWM_ConfigChannel+0x110>
 8012f0c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8012f10:	42b3      	cmp	r3, r6
 8012f12:	d104      	bne.n	8012f1e <HAL_TIM_PWM_ConfigChannel+0x11a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8012f14:	f420 3000 	bic.w	r0, r0, #131072	; 0x20000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8012f18:	696e      	ldr	r6, [r5, #20]
 8012f1a:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012f1e:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8012f20:	6868      	ldr	r0, [r5, #4]
  TIMx->CCMR3 = tmpccmrx;
 8012f22:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8012f24:	6929      	ldr	r1, [r5, #16]
  TIMx->CCR6 = OC_Config->Pulse;
 8012f26:	65d8      	str	r0, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012f28:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8012f2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012f2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012f30:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8012f32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012f38:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8012f3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012f3c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8012f40:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8012f42:	2300      	movs	r3, #0
  return HAL_OK;
 8012f44:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8012f46:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return HAL_OK;
 8012f4a:	e7be      	b.n	8012eca <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012f4c:	6800      	ldr	r0, [r0, #0]
 8012f4e:	f7ff fc9b 	bl	8012888 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012f52:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012f54:	6983      	ldr	r3, [r0, #24]
 8012f56:	f043 0308 	orr.w	r3, r3, #8
 8012f5a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012f5c:	6983      	ldr	r3, [r0, #24]
 8012f5e:	f023 0304 	bic.w	r3, r3, #4
 8012f62:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012f64:	6983      	ldr	r3, [r0, #24]
 8012f66:	4313      	orrs	r3, r2
 8012f68:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 8012f6a:	2300      	movs	r3, #0
  return HAL_OK;
 8012f6c:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8012f6e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return HAL_OK;
 8012f72:	e7aa      	b.n	8012eca <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012f74:	6800      	ldr	r0, [r0, #0]
 8012f76:	f7ff ff03 	bl	8012d80 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012f7a:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012f7c:	6983      	ldr	r3, [r0, #24]
 8012f7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012f82:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012f84:	6983      	ldr	r3, [r0, #24]
 8012f86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012f8a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012f8c:	6983      	ldr	r3, [r0, #24]
 8012f8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8012f92:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 8012f94:	2300      	movs	r3, #0
  return HAL_OK;
 8012f96:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8012f98:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return HAL_OK;
 8012f9c:	e795      	b.n	8012eca <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012f9e:	6800      	ldr	r0, [r0, #0]
 8012fa0:	f7ff fcb0 	bl	8012904 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012fa4:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012fa6:	69c3      	ldr	r3, [r0, #28]
 8012fa8:	f043 0308 	orr.w	r3, r3, #8
 8012fac:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012fae:	69c3      	ldr	r3, [r0, #28]
 8012fb0:	f023 0304 	bic.w	r3, r3, #4
 8012fb4:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012fb6:	69c3      	ldr	r3, [r0, #28]
 8012fb8:	4313      	orrs	r3, r2
 8012fba:	61c3      	str	r3, [r0, #28]
  __HAL_UNLOCK(htim);
 8012fbc:	2300      	movs	r3, #0
  return HAL_OK;
 8012fbe:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8012fc0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return HAL_OK;
 8012fc4:	e781      	b.n	8012eca <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8012fc6:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8012fc8:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8012fca:	6a1a      	ldr	r2, [r3, #32]
 8012fcc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8012fd0:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8012fd2:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8012fd4:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8012fd6:	6d59      	ldr	r1, [r3, #84]	; 0x54
  tmpccer &= ~TIM_CCER_CC5P;
 8012fd8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8012fdc:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8012fe0:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8012fe2:	68ae      	ldr	r6, [r5, #8]
 8012fe4:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012fe8:	4e17      	ldr	r6, [pc, #92]	; (8013048 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8012fea:	42b3      	cmp	r3, r6
 8012fec:	d00e      	beq.n	801300c <HAL_TIM_PWM_ConfigChannel+0x208>
 8012fee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8012ff2:	42b3      	cmp	r3, r6
 8012ff4:	d00a      	beq.n	801300c <HAL_TIM_PWM_ConfigChannel+0x208>
 8012ff6:	4f15      	ldr	r7, [pc, #84]	; (801304c <HAL_TIM_PWM_ConfigChannel+0x248>)
 8012ff8:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8012ffc:	42b3      	cmp	r3, r6
 8012ffe:	bf18      	it	ne
 8013000:	42bb      	cmpne	r3, r7
 8013002:	d003      	beq.n	801300c <HAL_TIM_PWM_ConfigChannel+0x208>
 8013004:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8013008:	42b3      	cmp	r3, r6
 801300a:	d104      	bne.n	8013016 <HAL_TIM_PWM_ConfigChannel+0x212>
    tmpcr2 &= ~TIM_CR2_OIS5;
 801300c:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8013010:	696e      	ldr	r6, [r5, #20]
 8013012:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8013016:	6058      	str	r0, [r3, #4]
  TIMx->CCR5 = OC_Config->Pulse;
 8013018:	6868      	ldr	r0, [r5, #4]
  TIMx->CCMR3 = tmpccmrx;
 801301a:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801301c:	6929      	ldr	r1, [r5, #16]
  TIMx->CCR5 = OC_Config->Pulse;
 801301e:	6598      	str	r0, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 8013020:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8013022:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013024:	f042 0208 	orr.w	r2, r2, #8
 8013028:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801302a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801302c:	f022 0204 	bic.w	r2, r2, #4
 8013030:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8013032:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013034:	430a      	orrs	r2, r1
 8013036:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8013038:	2300      	movs	r3, #0
  return HAL_OK;
 801303a:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 801303c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return HAL_OK;
 8013040:	e743      	b.n	8012eca <HAL_TIM_PWM_ConfigChannel+0xc6>
  __HAL_LOCK(htim);
 8013042:	2002      	movs	r0, #2
}
 8013044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013046:	bf00      	nop
 8013048:	40010000 	.word	0x40010000
 801304c:	40014000 	.word	0x40014000

08013050 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013050:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8013054:	2b01      	cmp	r3, #1
 8013056:	d045      	beq.n	80130e4 <HAL_TIMEx_MasterConfigSynchronization+0x94>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013058:	6803      	ldr	r3, [r0, #0]
 801305a:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 801305c:	2002      	movs	r0, #2
{
 801305e:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8013060:	4d21      	ldr	r5, [pc, #132]	; (80130e8 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
  htim->State = HAL_TIM_STATE_BUSY;
 8013062:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8013066:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8013068:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 801306a:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801306c:	d023      	beq.n	80130b6 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 801306e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8013072:	42ab      	cmp	r3, r5
 8013074:	d01f      	beq.n	80130b6 <HAL_TIMEx_MasterConfigSynchronization+0x66>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013076:	4d1d      	ldr	r5, [pc, #116]	; (80130ec <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8013078:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801307c:	42ab      	cmp	r3, r5
 801307e:	bf18      	it	ne
 8013080:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8013084:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8013088:	bf0c      	ite	eq
 801308a:	f04f 0c01 	moveq.w	ip, #1
 801308e:	f04f 0c00 	movne.w	ip, #0
 8013092:	42ab      	cmp	r3, r5
 8013094:	bf08      	it	eq
 8013096:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801309a:	680d      	ldr	r5, [r1, #0]
 801309c:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801309e:	4d14      	ldr	r5, [pc, #80]	; (80130f0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
  htim->Instance->CR2 = tmpcr2;
 80130a0:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80130a2:	42ab      	cmp	r3, r5
 80130a4:	bf14      	ite	ne
 80130a6:	4660      	movne	r0, ip
 80130a8:	f04c 0001 	orreq.w	r0, ip, #1
 80130ac:	b960      	cbnz	r0, 80130c8 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80130ae:	4811      	ldr	r0, [pc, #68]	; (80130f4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80130b0:	4283      	cmp	r3, r0
 80130b2:	d009      	beq.n	80130c8 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80130b4:	e00d      	b.n	80130d2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80130b6:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80130b8:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80130bc:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80130be:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80130c0:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80130c4:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 80130c6:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80130c8:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80130ca:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80130ce:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80130d0:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80130d2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80130d4:	2101      	movs	r1, #1

  return HAL_OK;
 80130d6:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 80130d8:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80130dc:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 80130e0:	bc30      	pop	{r4, r5}
 80130e2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80130e4:	2002      	movs	r0, #2
}
 80130e6:	4770      	bx	lr
 80130e8:	40010000 	.word	0x40010000
 80130ec:	40000400 	.word	0x40000400
 80130f0:	40000c00 	.word	0x40000c00
 80130f4:	40001800 	.word	0x40001800

080130f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80130f8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80130fc:	2b01      	cmp	r3, #1
 80130fe:	d03d      	beq.n	801317c <HAL_TIMEx_ConfigBreakDeadTime+0x84>
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8013100:	4602      	mov	r2, r0
 8013102:	6848      	ldr	r0, [r1, #4]
{
 8013104:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8013106:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 801310a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801310e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8013110:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8013112:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013116:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8013118:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801311a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801311e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8013120:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8013122:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013126:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8013128:	6a88      	ldr	r0, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801312a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801312e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8013130:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8013132:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013136:	4303      	orrs	r3, r0

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8013138:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801313a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 801313e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8013142:	4c0f      	ldr	r4, [pc, #60]	; (8013180 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8013144:	42a0      	cmp	r0, r4
 8013146:	d00b      	beq.n	8013160 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8013148:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 801314c:	42a0      	cmp	r0, r4
 801314e:	d007      	beq.n	8013160 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8013150:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8013152:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8013154:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8013158:	4608      	mov	r0, r1
}
 801315a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801315e:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8013160:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8013162:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8013166:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801316a:	e9d1 4107 	ldrd	r4, r1, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801316e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013172:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8013174:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8013178:	430b      	orrs	r3, r1
 801317a:	e7e9      	b.n	8013150 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 801317c:	2002      	movs	r0, #2
}
 801317e:	4770      	bx	lr
 8013180:	40010000 	.word	0x40010000

08013184 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013186:	f8d0 7080 	ldr.w	r7, [r0, #128]	; 0x80
 801318a:	2f20      	cmp	r7, #32
 801318c:	d144      	bne.n	8013218 <HAL_UART_Transmit_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 801318e:	2900      	cmp	r1, #0
 8013190:	d040      	beq.n	8013214 <HAL_UART_Transmit_DMA+0x90>
 8013192:	fab2 f682 	clz	r6, r2
 8013196:	0976      	lsrs	r6, r6, #5
 8013198:	2a00      	cmp	r2, #0
 801319a:	d03b      	beq.n	8013214 <HAL_UART_Transmit_DMA+0x90>
 801319c:	4604      	mov	r4, r0
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 801319e:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
 80131a2:	2801      	cmp	r0, #1
 80131a4:	d038      	beq.n	8013218 <HAL_UART_Transmit_DMA+0x94>
 80131a6:	2501      	movs	r5, #1
    huart->pTxBuffPtr  = pData;
    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80131a8:	2321      	movs	r3, #33	; 0x21

    if (huart->hdmatx != NULL)
 80131aa:	6f60      	ldr	r0, [r4, #116]	; 0x74
    huart->TxXferCount = Size;
 80131ac:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    huart->pTxBuffPtr  = pData;
 80131b0:	6521      	str	r1, [r4, #80]	; 0x50
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80131b2:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    huart->TxXferSize  = Size;
 80131b6:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
    __HAL_LOCK(huart);
 80131ba:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80131be:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (huart->hdmatx != NULL)
 80131c2:	b1d8      	cbz	r0, 80131fc <HAL_UART_Transmit_DMA+0x78>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80131c4:	f8df c054 	ldr.w	ip, [pc, #84]	; 801321c <HAL_UART_Transmit_DMA+0x98>

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80131c8:	4613      	mov	r3, r2
 80131ca:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80131cc:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80131d0:	f8df c04c 	ldr.w	ip, [pc, #76]	; 8013220 <HAL_UART_Transmit_DMA+0x9c>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80131d4:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferAbortCallback = NULL;
 80131d6:	6506      	str	r6, [r0, #80]	; 0x50
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80131d8:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80131dc:	f8df c044 	ldr.w	ip, [pc, #68]	; 8013224 <HAL_UART_Transmit_DMA+0xa0>
 80131e0:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80131e4:	f7f9 fa88 	bl	800c6f8 <HAL_DMA_Start_IT>
 80131e8:	b140      	cbz	r0, 80131fc <HAL_UART_Transmit_DMA+0x78>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80131ea:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;

        return HAL_ERROR;
 80131ec:	4628      	mov	r0, r5
        __HAL_UNLOCK(huart);
 80131ee:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80131f2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->gState = HAL_UART_STATE_READY;
 80131f6:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
  }
  else
  {
    return HAL_BUSY;
  }
}
 80131fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80131fc:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 80131fe:	2200      	movs	r2, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8013200:	2140      	movs	r1, #64	; 0x40
    return HAL_OK;
 8013202:	4610      	mov	r0, r2
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8013204:	6219      	str	r1, [r3, #32]
    __HAL_UNLOCK(huart);
 8013206:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801320a:	689a      	ldr	r2, [r3, #8]
 801320c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8013210:	609a      	str	r2, [r3, #8]
}
 8013212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8013214:	2001      	movs	r0, #1
}
 8013216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8013218:	2002      	movs	r0, #2
}
 801321a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801321c:	080132d9 	.word	0x080132d9
 8013220:	08013309 	.word	0x08013309
 8013224:	08013361 	.word	0x08013361

08013228 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801322a:	f8d0 7084 	ldr.w	r7, [r0, #132]	; 0x84
 801322e:	2f20      	cmp	r7, #32
 8013230:	d148      	bne.n	80132c4 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8013232:	2900      	cmp	r1, #0
 8013234:	d044      	beq.n	80132c0 <HAL_UART_Receive_DMA+0x98>
 8013236:	fab2 f682 	clz	r6, r2
 801323a:	0976      	lsrs	r6, r6, #5
 801323c:	2a00      	cmp	r2, #0
 801323e:	d03f      	beq.n	80132c0 <HAL_UART_Receive_DMA+0x98>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8013240:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8013244:	4604      	mov	r4, r0
 8013246:	2b01      	cmp	r3, #1
 8013248:	d03c      	beq.n	80132c4 <HAL_UART_Receive_DMA+0x9c>
 801324a:	2501      	movs	r5, #1

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801324c:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801324e:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
    huart->pRxBuffPtr = pData;
 8013252:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferSize = Size;
 8013254:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    __HAL_LOCK(huart);
 8013258:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801325c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8013260:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8013262:	b1e0      	cbz	r0, 801329e <HAL_UART_Receive_DMA+0x76>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8013264:	f8df c060 	ldr.w	ip, [pc, #96]	; 80132c8 <HAL_UART_Receive_DMA+0xa0>

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8013268:	4613      	mov	r3, r2
 801326a:	460a      	mov	r2, r1
 801326c:	6821      	ldr	r1, [r4, #0]
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801326e:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8013272:	f8df c058 	ldr.w	ip, [pc, #88]	; 80132cc <HAL_UART_Receive_DMA+0xa4>
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8013276:	3124      	adds	r1, #36	; 0x24
      huart->hdmarx->XferAbortCallback = NULL;
 8013278:	6506      	str	r6, [r0, #80]	; 0x50
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801327a:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 801327e:	f8df c050 	ldr.w	ip, [pc, #80]	; 80132d0 <HAL_UART_Receive_DMA+0xa8>
 8013282:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8013286:	f7f9 fa37 	bl	800c6f8 <HAL_DMA_Start_IT>
 801328a:	b140      	cbz	r0, 801329e <HAL_UART_Receive_DMA+0x76>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801328c:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;

        return HAL_ERROR;
 801328e:	4628      	mov	r0, r5
        __HAL_UNLOCK(huart);
 8013290:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013294:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->gState = HAL_UART_STATE_READY;
 8013298:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
  }
  else
  {
    return HAL_BUSY;
  }
}
 801329c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801329e:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 80132a0:	2000      	movs	r0, #0
 80132a2:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80132a6:	681a      	ldr	r2, [r3, #0]
 80132a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80132ac:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80132ae:	689a      	ldr	r2, [r3, #8]
 80132b0:	f042 0201 	orr.w	r2, r2, #1
 80132b4:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80132b6:	689a      	ldr	r2, [r3, #8]
 80132b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80132bc:	609a      	str	r2, [r3, #8]
}
 80132be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80132c0:	2001      	movs	r0, #1
}
 80132c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80132c4:	2002      	movs	r0, #2
}
 80132c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132c8:	08013319 	.word	0x08013319
 80132cc:	08013355 	.word	0x08013355
 80132d0:	08013361 	.word	0x08013361

080132d4 <HAL_UART_TxCpltCallback>:
 80132d4:	4770      	bx	lr
 80132d6:	bf00      	nop

080132d8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80132d8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80132da:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80132dc:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80132de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80132e2:	d00c      	beq.n	80132fe <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80132e4:	6803      	ldr	r3, [r0, #0]
    huart->TxXferCount = 0U;
 80132e6:	2200      	movs	r2, #0
 80132e8:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80132ec:	689a      	ldr	r2, [r3, #8]
 80132ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80132f2:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80132f4:	681a      	ldr	r2, [r3, #0]
 80132f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80132fa:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80132fc:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80132fe:	f7ff ffe9 	bl	80132d4 <HAL_UART_TxCpltCallback>
}
 8013302:	bd08      	pop	{r3, pc}

08013304 <HAL_UART_TxHalfCpltCallback>:
 8013304:	4770      	bx	lr
 8013306:	bf00      	nop

08013308 <UART_DMATxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8013308:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 801330a:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 801330c:	f7ff fffa 	bl	8013304 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013310:	bd08      	pop	{r3, pc}
 8013312:	bf00      	nop

08013314 <HAL_UART_RxCpltCallback>:
 8013314:	4770      	bx	lr
 8013316:	bf00      	nop

08013318 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013318:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801331a:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801331c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801331e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013322:	d012      	beq.n	801334a <UART_DMAReceiveCplt+0x32>
  {
    huart->RxXferCount = 0U;

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013324:	6803      	ldr	r3, [r0, #0]
    huart->RxXferCount = 0U;
 8013326:	2200      	movs	r2, #0
    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8013328:	2120      	movs	r1, #32
    huart->RxXferCount = 0U;
 801332a:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801332e:	681a      	ldr	r2, [r3, #0]
 8013330:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8013334:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013336:	689a      	ldr	r2, [r3, #8]
 8013338:	f022 0201 	bic.w	r2, r2, #1
 801333c:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801333e:	689a      	ldr	r2, [r3, #8]
 8013340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013344:	609a      	str	r2, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 8013346:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 801334a:	f7ff ffe3 	bl	8013314 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801334e:	bd08      	pop	{r3, pc}

08013350 <HAL_UART_RxHalfCpltCallback>:
 8013350:	4770      	bx	lr
 8013352:	bf00      	nop

08013354 <UART_DMARxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8013354:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8013356:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8013358:	f7ff fffa 	bl	8013350 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801335c:	bd08      	pop	{r3, pc}
 801335e:	bf00      	nop

08013360 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013360:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8013362:	b538      	push	{r3, r4, r5, lr}

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8013364:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8013366:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801336a:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801336e:	689a      	ldr	r2, [r3, #8]
 8013370:	0615      	lsls	r5, r2, #24
 8013372:	d501      	bpl.n	8013378 <UART_DMAError+0x18>
 8013374:	2c21      	cmp	r4, #33	; 0x21
 8013376:	d01d      	beq.n	80133b4 <UART_DMAError+0x54>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8013378:	689a      	ldr	r2, [r3, #8]
 801337a:	0652      	lsls	r2, r2, #25
 801337c:	d501      	bpl.n	8013382 <UART_DMAError+0x22>
 801337e:	2922      	cmp	r1, #34	; 0x22
 8013380:	d008      	beq.n	8013394 <UART_DMAError+0x34>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013382:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8013386:	f043 0310 	orr.w	r3, r3, #16
 801338a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801338e:	f7f1 fda1 	bl	8004ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013392:	bd38      	pop	{r3, r4, r5, pc}
    huart->RxXferCount = 0U;
 8013394:	2400      	movs	r4, #0
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013396:	4a0f      	ldr	r2, [pc, #60]	; (80133d4 <UART_DMAError+0x74>)
  huart->RxState = HAL_UART_STATE_READY;
 8013398:	2520      	movs	r5, #32
    huart->RxXferCount = 0U;
 801339a:	f8a0 405e 	strh.w	r4, [r0, #94]	; 0x5e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801339e:	6819      	ldr	r1, [r3, #0]
 80133a0:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 80133a4:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80133a6:	6899      	ldr	r1, [r3, #8]
 80133a8:	400a      	ands	r2, r1
 80133aa:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 80133ac:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  huart->RxISR = NULL;
 80133b0:	66c4      	str	r4, [r0, #108]	; 0x6c
}
 80133b2:	e7e6      	b.n	8013382 <UART_DMAError+0x22>
    huart->TxXferCount = 0U;
 80133b4:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 80133b6:	2420      	movs	r4, #32
    huart->TxXferCount = 0U;
 80133b8:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80133bc:	681a      	ldr	r2, [r3, #0]
 80133be:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80133c2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80133c4:	689a      	ldr	r2, [r3, #8]
 80133c6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80133ca:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 80133cc:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
}
 80133d0:	e7d2      	b.n	8013378 <UART_DMAError+0x18>
 80133d2:	bf00      	nop
 80133d4:	effffffe 	.word	0xeffffffe

080133d8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80133d8:	6802      	ldr	r2, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80133da:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80133de:	69d3      	ldr	r3, [r2, #28]
  if (errorflags == 0U)
 80133e0:	ea13 0f0c 	tst.w	r3, ip
{
 80133e4:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80133e6:	6815      	ldr	r5, [r2, #0]
{
 80133e8:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80133ea:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 80133ec:	f000 8092 	beq.w	8013514 <HAL_UART_IRQHandler+0x13c>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80133f0:	4873      	ldr	r0, [pc, #460]	; (80135c0 <HAL_UART_IRQHandler+0x1e8>)
 80133f2:	ea01 0c00 	and.w	ip, r1, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80133f6:	4873      	ldr	r0, [pc, #460]	; (80135c4 <HAL_UART_IRQHandler+0x1ec>)
 80133f8:	4028      	ands	r0, r5
 80133fa:	ea50 000c 	orrs.w	r0, r0, ip
 80133fe:	d11d      	bne.n	801343c <HAL_UART_IRQHandler+0x64>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8013400:	02d8      	lsls	r0, r3, #11
 8013402:	d502      	bpl.n	801340a <HAL_UART_IRQHandler+0x32>
 8013404:	024e      	lsls	r6, r1, #9
 8013406:	f100 80ab 	bmi.w	8013560 <HAL_UART_IRQHandler+0x188>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801340a:	0618      	lsls	r0, r3, #24
 801340c:	d506      	bpl.n	801341c <HAL_UART_IRQHandler+0x44>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801340e:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8013412:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8013416:	4308      	orrs	r0, r1
 8013418:	f040 809a 	bne.w	8013550 <HAL_UART_IRQHandler+0x178>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801341c:	065e      	lsls	r6, r3, #25
 801341e:	d502      	bpl.n	8013426 <HAL_UART_IRQHandler+0x4e>
 8013420:	0668      	lsls	r0, r5, #25
 8013422:	f100 80a9 	bmi.w	8013578 <HAL_UART_IRQHandler+0x1a0>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8013426:	0219      	lsls	r1, r3, #8
 8013428:	d502      	bpl.n	8013430 <HAL_UART_IRQHandler+0x58>
 801342a:	006a      	lsls	r2, r5, #1
 801342c:	f100 80b1 	bmi.w	8013592 <HAL_UART_IRQHandler+0x1ba>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8013430:	01db      	lsls	r3, r3, #7
 8013432:	d502      	bpl.n	801343a <HAL_UART_IRQHandler+0x62>
 8013434:	2d00      	cmp	r5, #0
 8013436:	f2c0 80b8 	blt.w	80135aa <HAL_UART_IRQHandler+0x1d2>
}
 801343a:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801343c:	07de      	lsls	r6, r3, #31
 801343e:	d509      	bpl.n	8013454 <HAL_UART_IRQHandler+0x7c>
 8013440:	05e8      	lsls	r0, r5, #23
 8013442:	d507      	bpl.n	8013454 <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013444:	2001      	movs	r0, #1
 8013446:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013448:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801344c:	f040 0001 	orr.w	r0, r0, #1
 8013450:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013454:	079e      	lsls	r6, r3, #30
 8013456:	d56e      	bpl.n	8013536 <HAL_UART_IRQHandler+0x15e>
 8013458:	07c8      	lsls	r0, r1, #31
 801345a:	d509      	bpl.n	8013470 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801345c:	2002      	movs	r0, #2
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801345e:	075e      	lsls	r6, r3, #29
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013460:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013462:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8013466:	f040 0004 	orr.w	r0, r0, #4
 801346a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801346e:	d466      	bmi.n	801353e <HAL_UART_IRQHandler+0x166>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8013470:	0718      	lsls	r0, r3, #28
 8013472:	d50c      	bpl.n	801348e <HAL_UART_IRQHandler+0xb6>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013474:	f005 0020 	and.w	r0, r5, #32
 8013478:	ea50 000c 	orrs.w	r0, r0, ip
 801347c:	d007      	beq.n	801348e <HAL_UART_IRQHandler+0xb6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801347e:	2008      	movs	r0, #8
 8013480:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013482:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8013486:	f040 0008 	orr.w	r0, r0, #8
 801348a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801348e:	051e      	lsls	r6, r3, #20
 8013490:	d50a      	bpl.n	80134a8 <HAL_UART_IRQHandler+0xd0>
 8013492:	0168      	lsls	r0, r5, #5
 8013494:	d508      	bpl.n	80134a8 <HAL_UART_IRQHandler+0xd0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013496:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801349a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801349c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80134a0:	f040 0020 	orr.w	r0, r0, #32
 80134a4:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80134a8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80134ac:	2800      	cmp	r0, #0
 80134ae:	d0c4      	beq.n	801343a <HAL_UART_IRQHandler+0x62>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80134b0:	069e      	lsls	r6, r3, #26
 80134b2:	d505      	bpl.n	80134c0 <HAL_UART_IRQHandler+0xe8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80134b4:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80134b8:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80134bc:	430d      	orrs	r5, r1
 80134be:	d16d      	bne.n	801359c <HAL_UART_IRQHandler+0x1c4>
      errorcode = huart->ErrorCode;
 80134c0:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80134c4:	6893      	ldr	r3, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80134c6:	f001 0128 	and.w	r1, r1, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80134ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80134ce:	ea53 0501 	orrs.w	r5, r3, r1
 80134d2:	d06f      	beq.n	80135b4 <HAL_UART_IRQHandler+0x1dc>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80134d4:	6811      	ldr	r1, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80134d6:	2020      	movs	r0, #32
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80134d8:	4b3b      	ldr	r3, [pc, #236]	; (80135c8 <HAL_UART_IRQHandler+0x1f0>)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80134da:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 80134de:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80134e0:	6891      	ldr	r1, [r2, #8]
 80134e2:	400b      	ands	r3, r1
  huart->RxISR = NULL;
 80134e4:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80134e6:	6093      	str	r3, [r2, #8]
  huart->RxState = HAL_UART_STATE_READY;
 80134e8:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80134ec:	6893      	ldr	r3, [r2, #8]
  huart->RxISR = NULL;
 80134ee:	66e1      	str	r1, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80134f0:	065d      	lsls	r5, r3, #25
 80134f2:	d53d      	bpl.n	8013570 <HAL_UART_IRQHandler+0x198>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80134f4:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 80134f6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80134f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80134fc:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 80134fe:	2800      	cmp	r0, #0
 8013500:	d036      	beq.n	8013570 <HAL_UART_IRQHandler+0x198>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8013502:	4b32      	ldr	r3, [pc, #200]	; (80135cc <HAL_UART_IRQHandler+0x1f4>)
 8013504:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013506:	f7f9 fc07 	bl	800cd18 <HAL_DMA_Abort_IT>
 801350a:	2800      	cmp	r0, #0
 801350c:	d095      	beq.n	801343a <HAL_UART_IRQHandler+0x62>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801350e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8013510:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8013512:	e00d      	b.n	8013530 <HAL_UART_IRQHandler+0x158>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013514:	069e      	lsls	r6, r3, #26
 8013516:	f57f af73 	bpl.w	8013400 <HAL_UART_IRQHandler+0x28>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801351a:	f005 0c20 	and.w	ip, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801351e:	f001 5e80 	and.w	lr, r1, #268435456	; 0x10000000
 8013522:	ea5c 0c0e 	orrs.w	ip, ip, lr
 8013526:	f43f af6b 	beq.w	8013400 <HAL_UART_IRQHandler+0x28>
      if (huart->RxISR != NULL)
 801352a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801352c:	2b00      	cmp	r3, #0
 801352e:	d084      	beq.n	801343a <HAL_UART_IRQHandler+0x62>
}
 8013530:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013534:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013536:	0758      	lsls	r0, r3, #29
 8013538:	d59a      	bpl.n	8013470 <HAL_UART_IRQHandler+0x98>
 801353a:	07ce      	lsls	r6, r1, #31
 801353c:	d598      	bpl.n	8013470 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801353e:	2004      	movs	r0, #4
 8013540:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013542:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8013546:	f040 0002 	orr.w	r0, r0, #2
 801354a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801354e:	e78f      	b.n	8013470 <HAL_UART_IRQHandler+0x98>
    if (huart->TxISR != NULL)
 8013550:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013552:	2b00      	cmp	r3, #0
 8013554:	f43f af71 	beq.w	801343a <HAL_UART_IRQHandler+0x62>
      huart->TxISR(huart);
 8013558:	4620      	mov	r0, r4
}
 801355a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 801355e:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8013560:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8013564:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8013566:	6213      	str	r3, [r2, #32]
}
 8013568:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 801356c:	f000 bbca 	b.w	8013d04 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 8013570:	4620      	mov	r0, r4
 8013572:	f7f1 fcaf 	bl	8004ed4 <HAL_UART_ErrorCallback>
}
 8013576:	bd70      	pop	{r4, r5, r6, pc}
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013578:	6813      	ldr	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801357a:	2020      	movs	r0, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801357c:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801357e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013582:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8013584:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013588:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 801358a:	6721      	str	r1, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 801358c:	f7ff fea2 	bl	80132d4 <HAL_UART_TxCpltCallback>
}
 8013590:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8013592:	4620      	mov	r0, r4
}
 8013594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8013598:	f000 bbb8 	b.w	8013d0c <HAL_UARTEx_TxFifoEmptyCallback>
        if (huart->RxISR != NULL)
 801359c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d08e      	beq.n	80134c0 <HAL_UART_IRQHandler+0xe8>
          huart->RxISR(huart);
 80135a2:	4620      	mov	r0, r4
 80135a4:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80135a6:	6822      	ldr	r2, [r4, #0]
 80135a8:	e78a      	b.n	80134c0 <HAL_UART_IRQHandler+0xe8>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80135aa:	4620      	mov	r0, r4
}
 80135ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 80135b0:	f000 bbaa 	b.w	8013d08 <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 80135b4:	4620      	mov	r0, r4
 80135b6:	f7f1 fc8d 	bl	8004ed4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80135ba:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
}
 80135be:	bd70      	pop	{r4, r5, r6, pc}
 80135c0:	10000001 	.word	0x10000001
 80135c4:	04000120 	.word	0x04000120
 80135c8:	effffffe 	.word	0xeffffffe
 80135cc:	080135d1 	.word	0x080135d1

080135d0 <UART_DMAAbortOnError>:
{
 80135d0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80135d2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80135d4:	2300      	movs	r3, #0
 80135d6:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80135da:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 80135de:	f7f1 fc79 	bl	8004ed4 <HAL_UART_ErrorCallback>
}
 80135e2:	bd08      	pop	{r3, pc}

080135e4 <HAL_UART_GetState>:
  temp1 = huart->gState;
 80135e4:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  temp2 = huart->RxState;
 80135e8:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
}
 80135ec:	4310      	orrs	r0, r2
 80135ee:	4770      	bx	lr

080135f0 <UART_SetConfig>:
{
 80135f0:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80135f2:	6882      	ldr	r2, [r0, #8]
{
 80135f4:	4604      	mov	r4, r0
 80135f6:	b087      	sub	sp, #28
  if (UART_INSTANCE_LOWPOWER(huart))
 80135f8:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80135fa:	e9d0 1004 	ldrd	r1, r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80135fe:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013600:	430a      	orrs	r2, r1
  tmpreg |= (uint32_t)huart->FifoMode;
 8013602:	6e61      	ldr	r1, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013604:	4302      	orrs	r2, r0
 8013606:	69e0      	ldr	r0, [r4, #28]
 8013608:	4302      	orrs	r2, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 801360a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801360c:	49bc      	ldr	r1, [pc, #752]	; (8013900 <UART_SetConfig+0x310>)
 801360e:	4029      	ands	r1, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013610:	4dbc      	ldr	r5, [pc, #752]	; (8013904 <UART_SetConfig+0x314>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013612:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013614:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013616:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013618:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801361a:	685a      	ldr	r2, [r3, #4]
 801361c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8013620:	ea42 0201 	orr.w	r2, r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013624:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013626:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013628:	f000 80e0 	beq.w	80137ec <UART_SetConfig+0x1fc>
    tmpreg |= huart->Init.OneBitSampling;
 801362c:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801362e:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8013630:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013632:	4ab5      	ldr	r2, [pc, #724]	; (8013908 <UART_SetConfig+0x318>)
 8013634:	402a      	ands	r2, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8013636:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013638:	4311      	orrs	r1, r2
 801363a:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801363c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801363e:	f022 020f 	bic.w	r2, r2, #15
 8013642:	432a      	orrs	r2, r5
 8013644:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013646:	4ab1      	ldr	r2, [pc, #708]	; (801390c <UART_SetConfig+0x31c>)
 8013648:	4293      	cmp	r3, r2
 801364a:	d023      	beq.n	8013694 <UART_SetConfig+0xa4>
 801364c:	4ab0      	ldr	r2, [pc, #704]	; (8013910 <UART_SetConfig+0x320>)
 801364e:	4293      	cmp	r3, r2
 8013650:	d076      	beq.n	8013740 <UART_SetConfig+0x150>
 8013652:	4ab0      	ldr	r2, [pc, #704]	; (8013914 <UART_SetConfig+0x324>)
 8013654:	4293      	cmp	r3, r2
 8013656:	f000 8190 	beq.w	801397a <UART_SetConfig+0x38a>
 801365a:	4aaf      	ldr	r2, [pc, #700]	; (8013918 <UART_SetConfig+0x328>)
 801365c:	4293      	cmp	r3, r2
 801365e:	f000 81e3 	beq.w	8013a28 <UART_SetConfig+0x438>
 8013662:	4aae      	ldr	r2, [pc, #696]	; (801391c <UART_SetConfig+0x32c>)
 8013664:	4293      	cmp	r3, r2
 8013666:	f000 8121 	beq.w	80138ac <UART_SetConfig+0x2bc>
 801366a:	4aad      	ldr	r2, [pc, #692]	; (8013920 <UART_SetConfig+0x330>)
 801366c:	4293      	cmp	r3, r2
 801366e:	f000 81e5 	beq.w	8013a3c <UART_SetConfig+0x44c>
 8013672:	4aac      	ldr	r2, [pc, #688]	; (8013924 <UART_SetConfig+0x334>)
 8013674:	4293      	cmp	r3, r2
 8013676:	f000 8236 	beq.w	8013ae6 <UART_SetConfig+0x4f6>
 801367a:	4aab      	ldr	r2, [pc, #684]	; (8013928 <UART_SetConfig+0x338>)
 801367c:	4293      	cmp	r3, r2
 801367e:	f000 81e9 	beq.w	8013a54 <UART_SetConfig+0x464>
        ret = HAL_ERROR;
 8013682:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
 8013684:	2300      	movs	r3, #0
 8013686:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 801368a:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 801368e:	6723      	str	r3, [r4, #112]	; 0x70
}
 8013690:	b007      	add	sp, #28
 8013692:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013694:	4ba5      	ldr	r3, [pc, #660]	; (801392c <UART_SetConfig+0x33c>)
 8013696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013698:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801369c:	2b28      	cmp	r3, #40	; 0x28
 801369e:	d8f0      	bhi.n	8013682 <UART_SetConfig+0x92>
 80136a0:	4aa3      	ldr	r2, [pc, #652]	; (8013930 <UART_SetConfig+0x340>)
 80136a2:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80136a4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80136a8:	d055      	beq.n	8013756 <UART_SetConfig+0x166>
    switch (clocksource)
 80136aa:	2b20      	cmp	r3, #32
 80136ac:	f200 814a 	bhi.w	8013944 <UART_SetConfig+0x354>
 80136b0:	2b20      	cmp	r3, #32
 80136b2:	d8e6      	bhi.n	8013682 <UART_SetConfig+0x92>
 80136b4:	a201      	add	r2, pc, #4	; (adr r2, 80136bc <UART_SetConfig+0xcc>)
 80136b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136ba:	bf00      	nop
 80136bc:	080138fb 	.word	0x080138fb
 80136c0:	080138f5 	.word	0x080138f5
 80136c4:	08013683 	.word	0x08013683
 80136c8:	08013683 	.word	0x08013683
 80136cc:	080138e5 	.word	0x080138e5
 80136d0:	08013683 	.word	0x08013683
 80136d4:	08013683 	.word	0x08013683
 80136d8:	08013683 	.word	0x08013683
 80136dc:	080138d7 	.word	0x080138d7
 80136e0:	08013683 	.word	0x08013683
 80136e4:	08013683 	.word	0x08013683
 80136e8:	08013683 	.word	0x08013683
 80136ec:	08013683 	.word	0x08013683
 80136f0:	08013683 	.word	0x08013683
 80136f4:	08013683 	.word	0x08013683
 80136f8:	08013683 	.word	0x08013683
 80136fc:	080138c1 	.word	0x080138c1
 8013700:	08013683 	.word	0x08013683
 8013704:	08013683 	.word	0x08013683
 8013708:	08013683 	.word	0x08013683
 801370c:	08013683 	.word	0x08013683
 8013710:	08013683 	.word	0x08013683
 8013714:	08013683 	.word	0x08013683
 8013718:	08013683 	.word	0x08013683
 801371c:	08013683 	.word	0x08013683
 8013720:	08013683 	.word	0x08013683
 8013724:	08013683 	.word	0x08013683
 8013728:	08013683 	.word	0x08013683
 801372c:	08013683 	.word	0x08013683
 8013730:	08013683 	.word	0x08013683
 8013734:	08013683 	.word	0x08013683
 8013738:	08013683 	.word	0x08013683
 801373c:	08013a69 	.word	0x08013a69
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013740:	4b7a      	ldr	r3, [pc, #488]	; (801392c <UART_SetConfig+0x33c>)
 8013742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013744:	f003 0307 	and.w	r3, r3, #7
 8013748:	2b05      	cmp	r3, #5
 801374a:	d89a      	bhi.n	8013682 <UART_SetConfig+0x92>
 801374c:	4a79      	ldr	r2, [pc, #484]	; (8013934 <UART_SetConfig+0x344>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801374e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8013752:	5cd3      	ldrb	r3, [r2, r3]
 8013754:	d1a9      	bne.n	80136aa <UART_SetConfig+0xba>
    switch (clocksource)
 8013756:	2b20      	cmp	r3, #32
 8013758:	f200 8146 	bhi.w	80139e8 <UART_SetConfig+0x3f8>
 801375c:	2b20      	cmp	r3, #32
 801375e:	d890      	bhi.n	8013682 <UART_SetConfig+0x92>
 8013760:	a201      	add	r2, pc, #4	; (adr r2, 8013768 <UART_SetConfig+0x178>)
 8013762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013766:	bf00      	nop
 8013768:	08013ad3 	.word	0x08013ad3
 801376c:	08013acd 	.word	0x08013acd
 8013770:	08013683 	.word	0x08013683
 8013774:	08013683 	.word	0x08013683
 8013778:	08013ad9 	.word	0x08013ad9
 801377c:	08013683 	.word	0x08013683
 8013780:	08013683 	.word	0x08013683
 8013784:	08013683 	.word	0x08013683
 8013788:	08013abb 	.word	0x08013abb
 801378c:	08013683 	.word	0x08013683
 8013790:	08013683 	.word	0x08013683
 8013794:	08013683 	.word	0x08013683
 8013798:	08013683 	.word	0x08013683
 801379c:	08013683 	.word	0x08013683
 80137a0:	08013683 	.word	0x08013683
 80137a4:	08013683 	.word	0x08013683
 80137a8:	08013aa7 	.word	0x08013aa7
 80137ac:	08013683 	.word	0x08013683
 80137b0:	08013683 	.word	0x08013683
 80137b4:	08013683 	.word	0x08013683
 80137b8:	08013683 	.word	0x08013683
 80137bc:	08013683 	.word	0x08013683
 80137c0:	08013683 	.word	0x08013683
 80137c4:	08013683 	.word	0x08013683
 80137c8:	08013683 	.word	0x08013683
 80137cc:	08013683 	.word	0x08013683
 80137d0:	08013683 	.word	0x08013683
 80137d4:	08013683 	.word	0x08013683
 80137d8:	08013683 	.word	0x08013683
 80137dc:	08013683 	.word	0x08013683
 80137e0:	08013683 	.word	0x08013683
 80137e4:	08013683 	.word	0x08013683
 80137e8:	08013ae3 	.word	0x08013ae3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80137ec:	6898      	ldr	r0, [r3, #8]
 80137ee:	4a46      	ldr	r2, [pc, #280]	; (8013908 <UART_SetConfig+0x318>)
 80137f0:	4002      	ands	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 80137f2:	484e      	ldr	r0, [pc, #312]	; (801392c <UART_SetConfig+0x33c>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80137f4:	430a      	orrs	r2, r1
 80137f6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80137f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80137fc:	f022 020f 	bic.w	r2, r2, #15
 8013800:	430a      	orrs	r2, r1
 8013802:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013804:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8013806:	f003 0307 	and.w	r3, r3, #7
 801380a:	2b05      	cmp	r3, #5
 801380c:	f63f af39 	bhi.w	8013682 <UART_SetConfig+0x92>
 8013810:	4a49      	ldr	r2, [pc, #292]	; (8013938 <UART_SetConfig+0x348>)
 8013812:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 8013814:	2b20      	cmp	r3, #32
 8013816:	f200 80ba 	bhi.w	801398e <UART_SetConfig+0x39e>
 801381a:	2b01      	cmp	r3, #1
 801381c:	f67f af31 	bls.w	8013682 <UART_SetConfig+0x92>
 8013820:	3b02      	subs	r3, #2
 8013822:	2b1e      	cmp	r3, #30
 8013824:	f63f af2d 	bhi.w	8013682 <UART_SetConfig+0x92>
 8013828:	a201      	add	r2, pc, #4	; (adr r2, 8013830 <UART_SetConfig+0x240>)
 801382a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801382e:	bf00      	nop
 8013830:	08013a9d 	.word	0x08013a9d
 8013834:	08013683 	.word	0x08013683
 8013838:	08013a93 	.word	0x08013a93
 801383c:	08013683 	.word	0x08013683
 8013840:	08013683 	.word	0x08013683
 8013844:	08013683 	.word	0x08013683
 8013848:	08013a81 	.word	0x08013a81
 801384c:	08013683 	.word	0x08013683
 8013850:	08013683 	.word	0x08013683
 8013854:	08013683 	.word	0x08013683
 8013858:	08013683 	.word	0x08013683
 801385c:	08013683 	.word	0x08013683
 8013860:	08013683 	.word	0x08013683
 8013864:	08013683 	.word	0x08013683
 8013868:	08013a6d 	.word	0x08013a6d
 801386c:	08013683 	.word	0x08013683
 8013870:	08013683 	.word	0x08013683
 8013874:	08013683 	.word	0x08013683
 8013878:	08013683 	.word	0x08013683
 801387c:	08013683 	.word	0x08013683
 8013880:	08013683 	.word	0x08013683
 8013884:	08013683 	.word	0x08013683
 8013888:	08013683 	.word	0x08013683
 801388c:	08013683 	.word	0x08013683
 8013890:	08013683 	.word	0x08013683
 8013894:	08013683 	.word	0x08013683
 8013898:	08013683 	.word	0x08013683
 801389c:	08013683 	.word	0x08013683
 80138a0:	08013683 	.word	0x08013683
 80138a4:	08013683 	.word	0x08013683
 80138a8:	08013aa3 	.word	0x08013aa3
  UART_GETCLOCKSOURCE(huart, clocksource);
 80138ac:	4b1f      	ldr	r3, [pc, #124]	; (801392c <UART_SetConfig+0x33c>)
 80138ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80138b0:	f003 0307 	and.w	r3, r3, #7
 80138b4:	2b05      	cmp	r3, #5
 80138b6:	f63f aee4 	bhi.w	8013682 <UART_SetConfig+0x92>
 80138ba:	4a20      	ldr	r2, [pc, #128]	; (801393c <UART_SetConfig+0x34c>)
 80138bc:	5cd3      	ldrb	r3, [r2, r3]
 80138be:	e6f1      	b.n	80136a4 <UART_SetConfig+0xb4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80138c0:	4b1a      	ldr	r3, [pc, #104]	; (801392c <UART_SetConfig+0x33c>)
 80138c2:	681a      	ldr	r2, [r3, #0]
 80138c4:	0692      	lsls	r2, r2, #26
 80138c6:	f140 80c3 	bpl.w	8013a50 <UART_SetConfig+0x460>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	481c      	ldr	r0, [pc, #112]	; (8013940 <UART_SetConfig+0x350>)
 80138ce:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80138d2:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80138d4:	e03b      	b.n	801394e <UART_SetConfig+0x35e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80138d6:	a803      	add	r0, sp, #12
 80138d8:	f7fd fbb4 	bl	8011044 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80138dc:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 80138de:	b938      	cbnz	r0, 80138f0 <UART_SetConfig+0x300>
        ret = HAL_ERROR;
 80138e0:	2000      	movs	r0, #0
 80138e2:	e6cf      	b.n	8013684 <UART_SetConfig+0x94>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80138e4:	4668      	mov	r0, sp
 80138e6:	f7fd faff 	bl	8010ee8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80138ea:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 80138ec:	2800      	cmp	r0, #0
 80138ee:	d0f7      	beq.n	80138e0 <UART_SetConfig+0x2f0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80138f0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80138f2:	e02c      	b.n	801394e <UART_SetConfig+0x35e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80138f4:	f7fc fc44 	bl	8010180 <HAL_RCC_GetPCLK2Freq>
        break;
 80138f8:	e7f1      	b.n	80138de <UART_SetConfig+0x2ee>
        pclk = HAL_RCC_GetPCLK1Freq();
 80138fa:	f7fc fbf9 	bl	80100f0 <HAL_RCC_GetPCLK1Freq>
        break;
 80138fe:	e7ee      	b.n	80138de <UART_SetConfig+0x2ee>
 8013900:	cfff69f3 	.word	0xcfff69f3
 8013904:	58000c00 	.word	0x58000c00
 8013908:	11fff4ff 	.word	0x11fff4ff
 801390c:	40011000 	.word	0x40011000
 8013910:	40004400 	.word	0x40004400
 8013914:	40004800 	.word	0x40004800
 8013918:	40004c00 	.word	0x40004c00
 801391c:	40005000 	.word	0x40005000
 8013920:	40011400 	.word	0x40011400
 8013924:	40007800 	.word	0x40007800
 8013928:	40007c00 	.word	0x40007c00
 801392c:	58024400 	.word	0x58024400
 8013930:	0809932c 	.word	0x0809932c
 8013934:	08099358 	.word	0x08099358
 8013938:	08099360 	.word	0x08099360
 801393c:	08099358 	.word	0x08099358
 8013940:	03d09000 	.word	0x03d09000
    switch (clocksource)
 8013944:	2b40      	cmp	r3, #64	; 0x40
 8013946:	f47f ae9c 	bne.w	8013682 <UART_SetConfig+0x92>
 801394a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801394e:	4b6d      	ldr	r3, [pc, #436]	; (8013b04 <UART_SetConfig+0x514>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013950:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013954:	6862      	ldr	r2, [r4, #4]
 8013956:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 801395a:	fbb0 f3f3 	udiv	r3, r0, r3
 801395e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8013962:	fbb3 f3f2 	udiv	r3, r3, r2
 8013966:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013968:	f1a3 0210 	sub.w	r2, r3, #16
 801396c:	428a      	cmp	r2, r1
 801396e:	f63f ae88 	bhi.w	8013682 <UART_SetConfig+0x92>
        huart->Instance->BRR = usartdiv;
 8013972:	6822      	ldr	r2, [r4, #0]
 8013974:	2000      	movs	r0, #0
 8013976:	60d3      	str	r3, [r2, #12]
 8013978:	e684      	b.n	8013684 <UART_SetConfig+0x94>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801397a:	4b63      	ldr	r3, [pc, #396]	; (8013b08 <UART_SetConfig+0x518>)
 801397c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801397e:	f003 0307 	and.w	r3, r3, #7
 8013982:	2b05      	cmp	r3, #5
 8013984:	f63f ae7d 	bhi.w	8013682 <UART_SetConfig+0x92>
 8013988:	4a60      	ldr	r2, [pc, #384]	; (8013b0c <UART_SetConfig+0x51c>)
 801398a:	5cd3      	ldrb	r3, [r2, r3]
 801398c:	e68a      	b.n	80136a4 <UART_SetConfig+0xb4>
    switch (clocksource)
 801398e:	2b40      	cmp	r3, #64	; 0x40
 8013990:	f47f ae77 	bne.w	8013682 <UART_SetConfig+0x92>
 8013994:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8013998:	4b5a      	ldr	r3, [pc, #360]	; (8013b04 <UART_SetConfig+0x514>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801399a:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801399c:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80139a0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80139a4:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80139a8:	4299      	cmp	r1, r3
 80139aa:	f63f ae6a 	bhi.w	8013682 <UART_SetConfig+0x92>
 80139ae:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80139b2:	f63f ae66 	bhi.w	8013682 <UART_SetConfig+0x92>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80139b6:	2300      	movs	r3, #0
 80139b8:	4619      	mov	r1, r3
 80139ba:	f7ec fcf9 	bl	80003b0 <__aeabi_uldivmod>
 80139be:	462a      	mov	r2, r5
 80139c0:	0209      	lsls	r1, r1, #8
 80139c2:	0203      	lsls	r3, r0, #8
 80139c4:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80139c8:	0868      	lsrs	r0, r5, #1
 80139ca:	1818      	adds	r0, r3, r0
 80139cc:	f04f 0300 	mov.w	r3, #0
 80139d0:	f141 0100 	adc.w	r1, r1, #0
 80139d4:	f7ec fcec 	bl	80003b0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80139d8:	4a4d      	ldr	r2, [pc, #308]	; (8013b10 <UART_SetConfig+0x520>)
 80139da:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80139de:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80139e0:	4291      	cmp	r1, r2
 80139e2:	f63f ae4e 	bhi.w	8013682 <UART_SetConfig+0x92>
 80139e6:	e7c4      	b.n	8013972 <UART_SetConfig+0x382>
    switch (clocksource)
 80139e8:	2b40      	cmp	r3, #64	; 0x40
 80139ea:	f47f ae4a 	bne.w	8013682 <UART_SetConfig+0x92>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80139ee:	4b45      	ldr	r3, [pc, #276]	; (8013b04 <UART_SetConfig+0x514>)
 80139f0:	6862      	ldr	r2, [r4, #4]
 80139f2:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 80139f6:	0853      	lsrs	r3, r2, #1
 80139f8:	fbb0 f0f1 	udiv	r0, r0, r1
 80139fc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013a00:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013a04:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a08:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013a0a:	f1a2 0010 	sub.w	r0, r2, #16
 8013a0e:	4288      	cmp	r0, r1
 8013a10:	f63f ae37 	bhi.w	8013682 <UART_SetConfig+0x92>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013a14:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013a18:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 8013a1c:	6821      	ldr	r1, [r4, #0]
 8013a1e:	2000      	movs	r0, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013a20:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8013a22:	4313      	orrs	r3, r2
 8013a24:	60cb      	str	r3, [r1, #12]
 8013a26:	e62d      	b.n	8013684 <UART_SetConfig+0x94>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013a28:	4b37      	ldr	r3, [pc, #220]	; (8013b08 <UART_SetConfig+0x518>)
 8013a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a2c:	f003 0307 	and.w	r3, r3, #7
 8013a30:	2b05      	cmp	r3, #5
 8013a32:	f63f ae26 	bhi.w	8013682 <UART_SetConfig+0x92>
 8013a36:	4a37      	ldr	r2, [pc, #220]	; (8013b14 <UART_SetConfig+0x524>)
 8013a38:	5cd3      	ldrb	r3, [r2, r3]
 8013a3a:	e633      	b.n	80136a4 <UART_SetConfig+0xb4>
 8013a3c:	4b32      	ldr	r3, [pc, #200]	; (8013b08 <UART_SetConfig+0x518>)
 8013a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013a44:	2b28      	cmp	r3, #40	; 0x28
 8013a46:	f63f ae1c 	bhi.w	8013682 <UART_SetConfig+0x92>
 8013a4a:	4a33      	ldr	r2, [pc, #204]	; (8013b18 <UART_SetConfig+0x528>)
 8013a4c:	5cd3      	ldrb	r3, [r2, r3]
 8013a4e:	e629      	b.n	80136a4 <UART_SetConfig+0xb4>
          pclk = (uint32_t) HSI_VALUE;
 8013a50:	4832      	ldr	r0, [pc, #200]	; (8013b1c <UART_SetConfig+0x52c>)
 8013a52:	e77c      	b.n	801394e <UART_SetConfig+0x35e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013a54:	4b2c      	ldr	r3, [pc, #176]	; (8013b08 <UART_SetConfig+0x518>)
 8013a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a58:	f003 0307 	and.w	r3, r3, #7
 8013a5c:	2b05      	cmp	r3, #5
 8013a5e:	f63f ae10 	bhi.w	8013682 <UART_SetConfig+0x92>
 8013a62:	4a2f      	ldr	r2, [pc, #188]	; (8013b20 <UART_SetConfig+0x530>)
 8013a64:	5cd3      	ldrb	r3, [r2, r3]
 8013a66:	e61d      	b.n	80136a4 <UART_SetConfig+0xb4>
        pclk = (uint32_t) CSI_VALUE;
 8013a68:	482e      	ldr	r0, [pc, #184]	; (8013b24 <UART_SetConfig+0x534>)
 8013a6a:	e770      	b.n	801394e <UART_SetConfig+0x35e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013a6c:	4b26      	ldr	r3, [pc, #152]	; (8013b08 <UART_SetConfig+0x518>)
 8013a6e:	681a      	ldr	r2, [r3, #0]
 8013a70:	0690      	lsls	r0, r2, #26
 8013a72:	d542      	bpl.n	8013afa <UART_SetConfig+0x50a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	4829      	ldr	r0, [pc, #164]	; (8013b1c <UART_SetConfig+0x52c>)
 8013a78:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8013a7c:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8013a7e:	e78b      	b.n	8013998 <UART_SetConfig+0x3a8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013a80:	a803      	add	r0, sp, #12
 8013a82:	f7fd fadf 	bl	8011044 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013a86:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8013a88:	2800      	cmp	r0, #0
 8013a8a:	f43f af29 	beq.w	80138e0 <UART_SetConfig+0x2f0>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8013a8e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013a90:	e782      	b.n	8013998 <UART_SetConfig+0x3a8>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013a92:	4668      	mov	r0, sp
 8013a94:	f7fd fa28 	bl	8010ee8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013a98:	9801      	ldr	r0, [sp, #4]
        break;
 8013a9a:	e7f5      	b.n	8013a88 <UART_SetConfig+0x498>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8013a9c:	f7fd fa12 	bl	8010ec4 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 8013aa0:	e7f2      	b.n	8013a88 <UART_SetConfig+0x498>
        pclk = (uint32_t) CSI_VALUE;
 8013aa2:	4820      	ldr	r0, [pc, #128]	; (8013b24 <UART_SetConfig+0x534>)
 8013aa4:	e778      	b.n	8013998 <UART_SetConfig+0x3a8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013aa6:	4b18      	ldr	r3, [pc, #96]	; (8013b08 <UART_SetConfig+0x518>)
 8013aa8:	681a      	ldr	r2, [r3, #0]
 8013aaa:	0691      	lsls	r1, r2, #26
 8013aac:	d527      	bpl.n	8013afe <UART_SetConfig+0x50e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	481a      	ldr	r0, [pc, #104]	; (8013b1c <UART_SetConfig+0x52c>)
 8013ab2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8013ab6:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8013ab8:	e799      	b.n	80139ee <UART_SetConfig+0x3fe>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013aba:	a803      	add	r0, sp, #12
 8013abc:	f7fd fac2 	bl	8011044 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013ac0:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8013ac2:	2800      	cmp	r0, #0
 8013ac4:	f43f af0c 	beq.w	80138e0 <UART_SetConfig+0x2f0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013ac8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013aca:	e790      	b.n	80139ee <UART_SetConfig+0x3fe>
        pclk = HAL_RCC_GetPCLK2Freq();
 8013acc:	f7fc fb58 	bl	8010180 <HAL_RCC_GetPCLK2Freq>
        break;
 8013ad0:	e7f7      	b.n	8013ac2 <UART_SetConfig+0x4d2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8013ad2:	f7fc fb0d 	bl	80100f0 <HAL_RCC_GetPCLK1Freq>
        break;
 8013ad6:	e7f4      	b.n	8013ac2 <UART_SetConfig+0x4d2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013ad8:	4668      	mov	r0, sp
 8013ada:	f7fd fa05 	bl	8010ee8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013ade:	9801      	ldr	r0, [sp, #4]
        break;
 8013ae0:	e7ef      	b.n	8013ac2 <UART_SetConfig+0x4d2>
        pclk = (uint32_t) CSI_VALUE;
 8013ae2:	4810      	ldr	r0, [pc, #64]	; (8013b24 <UART_SetConfig+0x534>)
 8013ae4:	e783      	b.n	80139ee <UART_SetConfig+0x3fe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013ae6:	4b08      	ldr	r3, [pc, #32]	; (8013b08 <UART_SetConfig+0x518>)
 8013ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013aea:	f003 0307 	and.w	r3, r3, #7
 8013aee:	2b05      	cmp	r3, #5
 8013af0:	f63f adc7 	bhi.w	8013682 <UART_SetConfig+0x92>
 8013af4:	4a0c      	ldr	r2, [pc, #48]	; (8013b28 <UART_SetConfig+0x538>)
 8013af6:	5cd3      	ldrb	r3, [r2, r3]
 8013af8:	e5d4      	b.n	80136a4 <UART_SetConfig+0xb4>
          pclk = (uint32_t) HSI_VALUE;
 8013afa:	4808      	ldr	r0, [pc, #32]	; (8013b1c <UART_SetConfig+0x52c>)
 8013afc:	e74c      	b.n	8013998 <UART_SetConfig+0x3a8>
          pclk = (uint32_t) HSI_VALUE;
 8013afe:	4807      	ldr	r0, [pc, #28]	; (8013b1c <UART_SetConfig+0x52c>)
 8013b00:	e775      	b.n	80139ee <UART_SetConfig+0x3fe>
 8013b02:	bf00      	nop
 8013b04:	08099368 	.word	0x08099368
 8013b08:	58024400 	.word	0x58024400
 8013b0c:	08099358 	.word	0x08099358
 8013b10:	000ffcff 	.word	0x000ffcff
 8013b14:	08099358 	.word	0x08099358
 8013b18:	0809932c 	.word	0x0809932c
 8013b1c:	03d09000 	.word	0x03d09000
 8013b20:	08099358 	.word	0x08099358
 8013b24:	003d0900 	.word	0x003d0900
 8013b28:	08099358 	.word	0x08099358

08013b2c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013b2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013b2e:	07da      	lsls	r2, r3, #31
{
 8013b30:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013b32:	d506      	bpl.n	8013b42 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013b34:	6801      	ldr	r1, [r0, #0]
 8013b36:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8013b38:	684a      	ldr	r2, [r1, #4]
 8013b3a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8013b3e:	4322      	orrs	r2, r4
 8013b40:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013b42:	079c      	lsls	r4, r3, #30
 8013b44:	d506      	bpl.n	8013b54 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013b46:	6801      	ldr	r1, [r0, #0]
 8013b48:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8013b4a:	684a      	ldr	r2, [r1, #4]
 8013b4c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8013b50:	4322      	orrs	r2, r4
 8013b52:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013b54:	0759      	lsls	r1, r3, #29
 8013b56:	d506      	bpl.n	8013b66 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013b58:	6801      	ldr	r1, [r0, #0]
 8013b5a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8013b5c:	684a      	ldr	r2, [r1, #4]
 8013b5e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8013b62:	4322      	orrs	r2, r4
 8013b64:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013b66:	071a      	lsls	r2, r3, #28
 8013b68:	d506      	bpl.n	8013b78 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013b6a:	6801      	ldr	r1, [r0, #0]
 8013b6c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8013b6e:	684a      	ldr	r2, [r1, #4]
 8013b70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013b74:	4322      	orrs	r2, r4
 8013b76:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013b78:	06dc      	lsls	r4, r3, #27
 8013b7a:	d506      	bpl.n	8013b8a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013b7c:	6801      	ldr	r1, [r0, #0]
 8013b7e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8013b80:	688a      	ldr	r2, [r1, #8]
 8013b82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8013b86:	4322      	orrs	r2, r4
 8013b88:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013b8a:	0699      	lsls	r1, r3, #26
 8013b8c:	d506      	bpl.n	8013b9c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013b8e:	6801      	ldr	r1, [r0, #0]
 8013b90:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8013b92:	688a      	ldr	r2, [r1, #8]
 8013b94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013b98:	4322      	orrs	r2, r4
 8013b9a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013b9c:	065a      	lsls	r2, r3, #25
 8013b9e:	d50a      	bpl.n	8013bb6 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013ba0:	6801      	ldr	r1, [r0, #0]
 8013ba2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8013ba4:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013ba6:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013baa:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8013bae:	ea42 0204 	orr.w	r2, r2, r4
 8013bb2:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013bb4:	d00b      	beq.n	8013bce <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013bb6:	061b      	lsls	r3, r3, #24
 8013bb8:	d506      	bpl.n	8013bc8 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013bba:	6802      	ldr	r2, [r0, #0]
 8013bbc:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8013bbe:	6853      	ldr	r3, [r2, #4]
 8013bc0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8013bc4:	430b      	orrs	r3, r1
 8013bc6:	6053      	str	r3, [r2, #4]
}
 8013bc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013bcc:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013bce:	684a      	ldr	r2, [r1, #4]
 8013bd0:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8013bd2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8013bd6:	4322      	orrs	r2, r4
 8013bd8:	604a      	str	r2, [r1, #4]
 8013bda:	e7ec      	b.n	8013bb6 <UART_AdvFeatureConfig+0x8a>

08013bdc <UART_CheckIdleState>:
{
 8013bdc:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013bde:	2300      	movs	r3, #0
{
 8013be0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013be2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 8013be6:	f7f7 fe49 	bl	800b87c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013bea:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8013bec:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013bee:	681a      	ldr	r2, [r3, #0]
 8013bf0:	0711      	lsls	r1, r2, #28
 8013bf2:	d40c      	bmi.n	8013c0e <UART_CheckIdleState+0x32>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013bf4:	681a      	ldr	r2, [r3, #0]
 8013bf6:	0752      	lsls	r2, r2, #29
 8013bf8:	d42d      	bmi.n	8013c56 <UART_CheckIdleState+0x7a>
  huart->gState = HAL_UART_STATE_READY;
 8013bfa:	2320      	movs	r3, #32
  return HAL_OK;
 8013bfc:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8013bfe:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8013c02:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8013c06:	2300      	movs	r3, #0
 8013c08:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 8013c0c:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013c0e:	69da      	ldr	r2, [r3, #28]
 8013c10:	0292      	lsls	r2, r2, #10
 8013c12:	d4ef      	bmi.n	8013bf4 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013c14:	f7f7 fe32 	bl	800b87c <HAL_GetTick>
 8013c18:	1b43      	subs	r3, r0, r5
 8013c1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8013c1e:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013c20:	d22a      	bcs.n	8013c78 <UART_CheckIdleState+0x9c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013c22:	681a      	ldr	r2, [r3, #0]
 8013c24:	0750      	lsls	r0, r2, #29
 8013c26:	d5f2      	bpl.n	8013c0e <UART_CheckIdleState+0x32>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013c28:	69da      	ldr	r2, [r3, #28]
 8013c2a:	0511      	lsls	r1, r2, #20
 8013c2c:	d5ef      	bpl.n	8013c0e <UART_CheckIdleState+0x32>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013c2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 8013c32:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8013c34:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013c36:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8013c38:	6819      	ldr	r1, [r3, #0]
 8013c3a:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8013c3e:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013c40:	6899      	ldr	r1, [r3, #8]
 8013c42:	f021 0101 	bic.w	r1, r1, #1
 8013c46:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8013c48:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8013c4c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013c50:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          return HAL_TIMEOUT;
 8013c54:	e7d7      	b.n	8013c06 <UART_CheckIdleState+0x2a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013c56:	69db      	ldr	r3, [r3, #28]
 8013c58:	0258      	lsls	r0, r3, #9
 8013c5a:	d4ce      	bmi.n	8013bfa <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013c5c:	f7f7 fe0e 	bl	800b87c <HAL_GetTick>
 8013c60:	1b43      	subs	r3, r0, r5
 8013c62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8013c66:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013c68:	d206      	bcs.n	8013c78 <UART_CheckIdleState+0x9c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013c6a:	681a      	ldr	r2, [r3, #0]
 8013c6c:	0751      	lsls	r1, r2, #29
 8013c6e:	d5f2      	bpl.n	8013c56 <UART_CheckIdleState+0x7a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013c70:	69da      	ldr	r2, [r3, #28]
 8013c72:	0512      	lsls	r2, r2, #20
 8013c74:	d5ef      	bpl.n	8013c56 <UART_CheckIdleState+0x7a>
 8013c76:	e7da      	b.n	8013c2e <UART_CheckIdleState+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8013c78:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 8013c7a:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 8013c7c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8013c7e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8013c82:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013c84:	689a      	ldr	r2, [r3, #8]
 8013c86:	f022 0201 	bic.w	r2, r2, #1
 8013c8a:	609a      	str	r2, [r3, #8]
          __HAL_UNLOCK(huart);
 8013c8c:	2300      	movs	r3, #0
        huart->gState = HAL_UART_STATE_READY;
 8013c8e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
          __HAL_UNLOCK(huart);
 8013c92:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8013c96:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
}
 8013c9a:	bd38      	pop	{r3, r4, r5, pc}

08013c9c <HAL_UART_Init>:
  if (huart == NULL)
 8013c9c:	b380      	cbz	r0, 8013d00 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8013c9e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 8013ca2:	b510      	push	{r4, lr}
 8013ca4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8013ca6:	b333      	cbz	r3, 8013cf6 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8013ca8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8013caa:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013cac:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8013cae:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 8013cb2:	6813      	ldr	r3, [r2, #0]
 8013cb4:	f023 0301 	bic.w	r3, r3, #1
 8013cb8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013cba:	f7ff fc99 	bl	80135f0 <UART_SetConfig>
 8013cbe:	2801      	cmp	r0, #1
 8013cc0:	d017      	beq.n	8013cf2 <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013cc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013cc4:	b98b      	cbnz	r3, 8013cea <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013cc6:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8013cc8:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013cca:	685a      	ldr	r2, [r3, #4]
 8013ccc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013cd0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013cd2:	689a      	ldr	r2, [r3, #8]
 8013cd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013cd8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8013cda:	681a      	ldr	r2, [r3, #0]
 8013cdc:	f042 0201 	orr.w	r2, r2, #1
}
 8013ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8013ce4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8013ce6:	f7ff bf79 	b.w	8013bdc <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 8013cea:	4620      	mov	r0, r4
 8013cec:	f7ff ff1e 	bl	8013b2c <UART_AdvFeatureConfig>
 8013cf0:	e7e9      	b.n	8013cc6 <HAL_UART_Init+0x2a>
}
 8013cf2:	2001      	movs	r0, #1
 8013cf4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8013cf6:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8013cfa:	f7f2 ffdd 	bl	8006cb8 <HAL_UART_MspInit>
 8013cfe:	e7d3      	b.n	8013ca8 <HAL_UART_Init+0xc>
}
 8013d00:	2001      	movs	r0, #1
 8013d02:	4770      	bx	lr

08013d04 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8013d04:	4770      	bx	lr
 8013d06:	bf00      	nop

08013d08 <HAL_UARTEx_RxFifoFullCallback>:
 8013d08:	4770      	bx	lr
 8013d0a:	bf00      	nop

08013d0c <HAL_UARTEx_TxFifoEmptyCallback>:
 8013d0c:	4770      	bx	lr
 8013d0e:	bf00      	nop

08013d10 <DelayBlock_Enable>:
  * @brief  Enable the Delay Block instance.
  * @param  DLYBx: Pointer to DLYB instance.
  * @retval HAL status
  */
HAL_StatusTypeDef DelayBlock_Enable(DLYB_TypeDef *DLYBx)
{
 8013d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t unit_current;
  uint32_t tuning;
  uint32_t lng_mask;
  uint32_t tickstart;

  DLYBx->CR = DLYB_CR_DEN | DLYB_CR_SEN;
 8013d14:	2303      	movs	r3, #3
{
 8013d16:	b083      	sub	sp, #12
  uint32_t sel = 0U;
 8013d18:	f04f 0900 	mov.w	r9, #0
  DLYBx->CR = DLYB_CR_DEN | DLYB_CR_SEN;
 8013d1c:	f04f 0a01 	mov.w	sl, #1
{
 8013d20:	4604      	mov	r4, r0

  for (sel_current = 0U; sel_current < DLYB_MAX_SELECT; sel_current++)
  {
    /* lng_mask is the mask bit for the LNG field to check the output of the UNITx*/
    lng_mask = DLYB_CFGR_LNG_0 << sel_current;
 8013d22:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
  uint32_t unit = 0U;
 8013d26:	f8cd 9004 	str.w	r9, [sp, #4]
  DLYBx->CR = DLYB_CR_DEN | DLYB_CR_SEN;
 8013d2a:	6003      	str	r3, [r0, #0]
    lng_mask = DLYB_CFGR_LNG_0 << sel_current;
 8013d2c:	f10a 37ff 	add.w	r7, sl, #4294967295
    tuning = 0U;
 8013d30:	f04f 0800 	mov.w	r8, #0
    lng_mask = DLYB_CFGR_LNG_0 << sel_current;
 8013d34:	fa0b f707 	lsl.w	r7, fp, r7
    for (unit_current = 0U; unit_current < DLYB_MAX_UNIT; unit_current++)
 8013d38:	4646      	mov	r6, r8
    {
      /* Set the Delay of the UNIT(s)*/
      DLYBx->CFGR = DLYB_MAX_SELECT | (unit_current << DLYB_CFGR_UNIT_Pos);
 8013d3a:	0233      	lsls	r3, r6, #8
 8013d3c:	f043 030c 	orr.w	r3, r3, #12
 8013d40:	6063      	str	r3, [r4, #4]

      /* Waiting for a LNG valid value */
      tickstart =  HAL_GetTick();
 8013d42:	f7f7 fd9b 	bl	800b87c <HAL_GetTick>
 8013d46:	4605      	mov	r5, r0
      while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8013d48:	e004      	b.n	8013d54 <DelayBlock_Enable+0x44>
      {
        if((HAL_GetTick() - tickstart) >=  DLYB_TIMEOUT)
 8013d4a:	f7f7 fd97 	bl	800b87c <HAL_GetTick>
 8013d4e:	1b40      	subs	r0, r0, r5
 8013d50:	28fe      	cmp	r0, #254	; 0xfe
 8013d52:	d81b      	bhi.n	8013d8c <DelayBlock_Enable+0x7c>
      while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8013d54:	6863      	ldr	r3, [r4, #4]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	daf7      	bge.n	8013d4a <DelayBlock_Enable+0x3a>
          return HAL_TIMEOUT;
        }
      }
      if (tuning == 0U)
      {
        if ((DLYBx->CFGR & lng_mask) != 0U)
 8013d5a:	6863      	ldr	r3, [r4, #4]
      if (tuning == 0U)
 8013d5c:	f1b8 0f00 	cmp.w	r8, #0
 8013d60:	d018      	beq.n	8013d94 <DelayBlock_Enable+0x84>
        }
      }
      else
      {
        /* 1/2 period LOW detected after the HIGH 1/2 period => FULL PERIOD passed*/
        if((DLYBx->CFGR & lng_mask ) == 0U)
 8013d62:	423b      	tst	r3, r7
 8013d64:	d01d      	beq.n	8013da2 <DelayBlock_Enable+0x92>
    for (unit_current = 0U; unit_current < DLYB_MAX_UNIT; unit_current++)
 8013d66:	3601      	adds	r6, #1
 8013d68:	2e80      	cmp	r6, #128	; 0x80
 8013d6a:	d1e6      	bne.n	8013d3a <DelayBlock_Enable+0x2a>
  for (sel_current = 0U; sel_current < DLYB_MAX_SELECT; sel_current++)
 8013d6c:	f10a 0a01 	add.w	sl, sl, #1
 8013d70:	f1ba 0f0d 	cmp.w	sl, #13
 8013d74:	d1da      	bne.n	8013d2c <DelayBlock_Enable+0x1c>
  }

  /* Apply the Tuning settings */
  DLYBx->CR   = 0U;
  DLYBx->CR   = DLYB_CR_DEN | DLYB_CR_SEN;
  DLYBx->CFGR = sel | (unit << DLYB_CFGR_UNIT_Pos);
 8013d76:	9b01      	ldr	r3, [sp, #4]
  DLYBx->CR   = 0U;
 8013d78:	2000      	movs	r0, #0
  DLYBx->CR   = DLYB_CR_DEN | DLYB_CR_SEN;
 8013d7a:	2103      	movs	r1, #3
  DLYBx->CR   = DLYB_CR_DEN;
 8013d7c:	2201      	movs	r2, #1
  DLYBx->CFGR = sel | (unit << DLYB_CFGR_UNIT_Pos);
 8013d7e:	ea49 2303 	orr.w	r3, r9, r3, lsl #8
  DLYBx->CR   = 0U;
 8013d82:	6020      	str	r0, [r4, #0]
  DLYBx->CR   = DLYB_CR_DEN | DLYB_CR_SEN;
 8013d84:	6021      	str	r1, [r4, #0]
  DLYBx->CFGR = sel | (unit << DLYB_CFGR_UNIT_Pos);
 8013d86:	6063      	str	r3, [r4, #4]
  DLYBx->CR   = DLYB_CR_DEN;
 8013d88:	6022      	str	r2, [r4, #0]

  return HAL_OK;
 8013d8a:	e000      	b.n	8013d8e <DelayBlock_Enable+0x7e>
          return HAL_TIMEOUT;
 8013d8c:	2003      	movs	r0, #3
}
 8013d8e:	b003      	add	sp, #12
 8013d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((DLYBx->CFGR & lng_mask) != 0U)
 8013d94:	423b      	tst	r3, r7
 8013d96:	bf14      	ite	ne
 8013d98:	f04f 0801 	movne.w	r8, #1
 8013d9c:	f04f 0800 	moveq.w	r8, #0
 8013da0:	e7e1      	b.n	8013d66 <DelayBlock_Enable+0x56>
          if( unit == 0U )
 8013da2:	9b01      	ldr	r3, [sp, #4]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d1e1      	bne.n	8013d6c <DelayBlock_Enable+0x5c>
            sel  = sel_current + 1U;
 8013da8:	46d1      	mov	r9, sl
 8013daa:	9601      	str	r6, [sp, #4]
 8013dac:	e7de      	b.n	8013d6c <DelayBlock_Enable+0x5c>
 8013dae:	bf00      	nop

08013db0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8013db0:	b084      	sub	sp, #16
 8013db2:	b410      	push	{r4}
 8013db4:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8013db8:	4614      	mov	r4, r2
{
 8013dba:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8013dbe:	460b      	mov	r3, r1
             Init.ClockPowerSave      |\
 8013dc0:	9904      	ldr	r1, [sp, #16]
{
 8013dc2:	4602      	mov	r2, r0
             Init.BusWide             |\
 8013dc4:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           |\
 8013dc6:	4323      	orrs	r3, r4
             Init.HardwareFlowControl |\
             Init.ClockDiv
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8013dc8:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      |\
 8013dca:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8013dcc:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             |\
 8013dce:	4303      	orrs	r3, r0

  return HAL_OK;
}
 8013dd0:	2000      	movs	r0, #0
             Init.HardwareFlowControl |\
 8013dd2:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8013dd4:	4903      	ldr	r1, [pc, #12]	; (8013de4 <SDMMC_Init+0x34>)
 8013dd6:	4021      	ands	r1, r4
}
 8013dd8:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8013ddc:	430b      	orrs	r3, r1
}
 8013dde:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8013de0:	6053      	str	r3, [r2, #4]
}
 8013de2:	4770      	bx	lr
 8013de4:	ffc02c00 	.word	0xffc02c00

08013de8 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8013de8:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8013dec:	4770      	bx	lr
 8013dee:	bf00      	nop

08013df0 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8013df0:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8013df2:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 8013df4:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 8013df6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8013dfa:	4770      	bx	lr

08013dfc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8013dfc:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 8013dfe:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8013e00:	681a      	ldr	r2, [r3, #0]
 8013e02:	f042 0203 	orr.w	r2, r2, #3
 8013e06:	601a      	str	r2, [r3, #0]
}
 8013e08:	4770      	bx	lr
 8013e0a:	bf00      	nop

08013e0c <SDMMC_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_OFF(SDMMC_TypeDef *SDMMCx)
{
 8013e0c:	4603      	mov	r3, r0
  /* Set power state to OFF */
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);

  return HAL_OK;
}
 8013e0e:	2000      	movs	r0, #0
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 8013e10:	681a      	ldr	r2, [r3, #0]
 8013e12:	f022 0203 	bic.w	r2, r2, #3
 8013e16:	601a      	str	r2, [r3, #0]
}
 8013e18:	4770      	bx	lr
 8013e1a:	bf00      	nop

08013e1c <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8013e1c:	6800      	ldr	r0, [r0, #0]
}
 8013e1e:	f000 0003 	and.w	r0, r0, #3
 8013e22:	4770      	bx	lr

08013e24 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8013e24:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 8013e26:	5840      	ldr	r0, [r0, r1]
}
 8013e28:	4770      	bx	lr
 8013e2a:	bf00      	nop

08013e2c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8013e2c:	b430      	push	{r4, r5}

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8013e2e:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
                       Data->TransferDir   |\
 8013e32:	690d      	ldr	r5, [r1, #16]
{
 8013e34:	4602      	mov	r2, r0
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8013e36:	4323      	orrs	r3, r4
  SDMMCx->DTIMER = Data->DataTimeOut;
 8013e38:	6808      	ldr	r0, [r1, #0]
  SDMMCx->DLEN = Data->DataLength;
 8013e3a:	684c      	ldr	r4, [r1, #4]
  SDMMCx->DTIMER = Data->DataTimeOut;
 8013e3c:	6250      	str	r0, [r2, #36]	; 0x24
                       Data->TransferDir   |\
 8013e3e:	432b      	orrs	r3, r5
                       Data->TransferMode  |\
 8013e40:	6948      	ldr	r0, [r1, #20]
  SDMMCx->DLEN = Data->DataLength;
 8013e42:	6294      	str	r4, [r2, #40]	; 0x28
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8013e44:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                       Data->TransferMode  |\
 8013e46:	4303      	orrs	r3, r0

  return HAL_OK;

}
 8013e48:	2000      	movs	r0, #0
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8013e4a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8013e4e:	430b      	orrs	r3, r1
}
 8013e50:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8013e52:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8013e54:	4770      	bx	lr
 8013e56:	bf00      	nop

08013e58 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013e58:	4a50      	ldr	r2, [pc, #320]	; (8013f9c <SDMMC_CmdBlockLength+0x144>)
{
 8013e5a:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013e5c:	4b50      	ldr	r3, [pc, #320]	; (8013fa0 <SDMMC_CmdBlockLength+0x148>)
 8013e5e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8013e60:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013e64:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013e68:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8013e6c:	484d      	ldr	r0, [pc, #308]	; (8013fa4 <SDMMC_CmdBlockLength+0x14c>)
 8013e6e:	f241 1310 	movw	r3, #4368	; 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013e72:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013e74:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013e76:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013e7a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013e7c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013e80:	f8cc 300c 	str.w	r3, [ip, #12]

  do
  {
    if (count-- == 0U)
 8013e84:	1e53      	subs	r3, r2, #1
 8013e86:	b14a      	cbz	r2, 8013e9c <SDMMC_CmdBlockLength+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013e88:	4947      	ldr	r1, [pc, #284]	; (8013fa8 <SDMMC_CmdBlockLength+0x150>)
    sta_reg = SDMMCx->STA;
 8013e8a:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 8013e8e:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013e90:	420a      	tst	r2, r1
 8013e92:	d001      	beq.n	8013e98 <SDMMC_CmdBlockLength+0x40>
 8013e94:	0492      	lsls	r2, r2, #18
 8013e96:	d504      	bpl.n	8013ea2 <SDMMC_CmdBlockLength+0x4a>
    if (count-- == 0U)
 8013e98:	1c58      	adds	r0, r3, #1
 8013e9a:	d1f6      	bne.n	8013e8a <SDMMC_CmdBlockLength+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8013e9c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8013ea0:	4770      	bx	lr
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013ea2:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 8013ea6:	0758      	lsls	r0, r3, #29
 8013ea8:	d445      	bmi.n	8013f36 <SDMMC_CmdBlockLength+0xde>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013eaa:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 8013eae:	f010 0001 	ands.w	r0, r0, #1
 8013eb2:	d137      	bne.n	8013f24 <SDMMC_CmdBlockLength+0xcc>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013eb4:	4b3d      	ldr	r3, [pc, #244]	; (8013fac <SDMMC_CmdBlockLength+0x154>)
 8013eb6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8013eba:	f8dc 3010 	ldr.w	r3, [ip, #16]

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013ebe:	b2db      	uxtb	r3, r3
 8013ec0:	2b10      	cmp	r3, #16
 8013ec2:	d136      	bne.n	8013f32 <SDMMC_CmdBlockLength+0xda>
  return (*(__IO uint32_t *) tmp);
 8013ec4:	f8dc 3014 	ldr.w	r3, [ip, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013ec8:	4839      	ldr	r0, [pc, #228]	; (8013fb0 <SDMMC_CmdBlockLength+0x158>)
 8013eca:	4018      	ands	r0, r3
 8013ecc:	2800      	cmp	r0, #0
 8013ece:	d02f      	beq.n	8013f30 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	db35      	blt.n	8013f40 <SDMMC_CmdBlockLength+0xe8>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013ed4:	0059      	lsls	r1, r3, #1
 8013ed6:	d436      	bmi.n	8013f46 <SDMMC_CmdBlockLength+0xee>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013ed8:	009a      	lsls	r2, r3, #2
 8013eda:	d436      	bmi.n	8013f4a <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8013edc:	00d9      	lsls	r1, r3, #3
 8013ede:	d436      	bmi.n	8013f4e <SDMMC_CmdBlockLength+0xf6>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8013ee0:	011a      	lsls	r2, r3, #4
 8013ee2:	d437      	bmi.n	8013f54 <SDMMC_CmdBlockLength+0xfc>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013ee4:	0159      	lsls	r1, r3, #5
 8013ee6:	d438      	bmi.n	8013f5a <SDMMC_CmdBlockLength+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8013ee8:	01da      	lsls	r2, r3, #7
 8013eea:	d439      	bmi.n	8013f60 <SDMMC_CmdBlockLength+0x108>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8013eec:	0219      	lsls	r1, r3, #8
 8013eee:	d43a      	bmi.n	8013f66 <SDMMC_CmdBlockLength+0x10e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8013ef0:	025a      	lsls	r2, r3, #9
 8013ef2:	d43b      	bmi.n	8013f6c <SDMMC_CmdBlockLength+0x114>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013ef4:	0299      	lsls	r1, r3, #10
 8013ef6:	d445      	bmi.n	8013f84 <SDMMC_CmdBlockLength+0x12c>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8013ef8:	02da      	lsls	r2, r3, #11
 8013efa:	d440      	bmi.n	8013f7e <SDMMC_CmdBlockLength+0x126>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8013efc:	0359      	lsls	r1, r3, #13
 8013efe:	d43b      	bmi.n	8013f78 <SDMMC_CmdBlockLength+0x120>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8013f00:	039a      	lsls	r2, r3, #14
 8013f02:	d436      	bmi.n	8013f72 <SDMMC_CmdBlockLength+0x11a>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013f04:	03d9      	lsls	r1, r3, #15
 8013f06:	d446      	bmi.n	8013f96 <SDMMC_CmdBlockLength+0x13e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8013f08:	041a      	lsls	r2, r3, #16
 8013f0a:	d441      	bmi.n	8013f90 <SDMMC_CmdBlockLength+0x138>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8013f0c:	0459      	lsls	r1, r3, #17
 8013f0e:	d43c      	bmi.n	8013f8a <SDMMC_CmdBlockLength+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8013f10:	049a      	lsls	r2, r3, #18
 8013f12:	d40b      	bmi.n	8013f2c <SDMMC_CmdBlockLength+0xd4>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013f14:	f013 0f08 	tst.w	r3, #8
 8013f18:	bf14      	ite	ne
 8013f1a:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8013f1e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8013f22:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013f24:	2301      	movs	r3, #1
 8013f26:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013f2a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8013f2c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 8013f30:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013f32:	2001      	movs	r0, #1
 8013f34:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013f36:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013f38:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013f3a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013f3e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8013f40:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8013f44:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8013f46:	2040      	movs	r0, #64	; 0x40
 8013f48:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8013f4a:	2080      	movs	r0, #128	; 0x80
 8013f4c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013f4e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8013f52:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013f54:	f44f 7000 	mov.w	r0, #512	; 0x200
 8013f58:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013f5a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013f5e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013f60:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8013f64:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013f66:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8013f6a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013f6c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8013f70:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013f72:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8013f76:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013f78:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8013f7c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8013f7e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8013f82:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013f84:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8013f88:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013f8a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8013f8e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013f90:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8013f94:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013f96:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8013f9a:	4770      	bx	lr
 8013f9c:	20007634 	.word	0x20007634
 8013fa0:	10624dd3 	.word	0x10624dd3
 8013fa4:	fffee0c0 	.word	0xfffee0c0
 8013fa8:	00200045 	.word	0x00200045
 8013fac:	002000c5 	.word	0x002000c5
 8013fb0:	fdffe008 	.word	0xfdffe008

08013fb4 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013fb4:	4a50      	ldr	r2, [pc, #320]	; (80140f8 <SDMMC_CmdReadSingleBlock+0x144>)
{
 8013fb6:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013fb8:	4b50      	ldr	r3, [pc, #320]	; (80140fc <SDMMC_CmdReadSingleBlock+0x148>)
 8013fba:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8013fbc:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013fc0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013fc4:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8013fc8:	484d      	ldr	r0, [pc, #308]	; (8014100 <SDMMC_CmdReadSingleBlock+0x14c>)
 8013fca:	f241 1311 	movw	r3, #4369	; 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013fce:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013fd0:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013fd2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013fd6:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013fd8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013fdc:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8013fe0:	1e53      	subs	r3, r2, #1
 8013fe2:	b14a      	cbz	r2, 8013ff8 <SDMMC_CmdReadSingleBlock+0x44>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013fe4:	4947      	ldr	r1, [pc, #284]	; (8014104 <SDMMC_CmdReadSingleBlock+0x150>)
    sta_reg = SDMMCx->STA;
 8013fe6:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 8013fea:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013fec:	420a      	tst	r2, r1
 8013fee:	d001      	beq.n	8013ff4 <SDMMC_CmdReadSingleBlock+0x40>
 8013ff0:	0492      	lsls	r2, r2, #18
 8013ff2:	d504      	bpl.n	8013ffe <SDMMC_CmdReadSingleBlock+0x4a>
    if (count-- == 0U)
 8013ff4:	1c58      	adds	r0, r3, #1
 8013ff6:	d1f6      	bne.n	8013fe6 <SDMMC_CmdReadSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8013ff8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8013ffc:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013ffe:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 8014002:	0758      	lsls	r0, r3, #29
 8014004:	d445      	bmi.n	8014092 <SDMMC_CmdReadSingleBlock+0xde>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014006:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 801400a:	f010 0001 	ands.w	r0, r0, #1
 801400e:	d137      	bne.n	8014080 <SDMMC_CmdReadSingleBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014010:	4b3d      	ldr	r3, [pc, #244]	; (8014108 <SDMMC_CmdReadSingleBlock+0x154>)
 8014012:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8014016:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801401a:	b2db      	uxtb	r3, r3
 801401c:	2b11      	cmp	r3, #17
 801401e:	d136      	bne.n	801408e <SDMMC_CmdReadSingleBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 8014020:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8014024:	4839      	ldr	r0, [pc, #228]	; (801410c <SDMMC_CmdReadSingleBlock+0x158>)
 8014026:	4018      	ands	r0, r3
 8014028:	2800      	cmp	r0, #0
 801402a:	d02f      	beq.n	801408c <SDMMC_CmdReadSingleBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801402c:	2b00      	cmp	r3, #0
 801402e:	db35      	blt.n	801409c <SDMMC_CmdReadSingleBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8014030:	0059      	lsls	r1, r3, #1
 8014032:	d436      	bmi.n	80140a2 <SDMMC_CmdReadSingleBlock+0xee>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8014034:	009a      	lsls	r2, r3, #2
 8014036:	d436      	bmi.n	80140a6 <SDMMC_CmdReadSingleBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8014038:	00d9      	lsls	r1, r3, #3
 801403a:	d436      	bmi.n	80140aa <SDMMC_CmdReadSingleBlock+0xf6>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801403c:	011a      	lsls	r2, r3, #4
 801403e:	d437      	bmi.n	80140b0 <SDMMC_CmdReadSingleBlock+0xfc>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8014040:	0159      	lsls	r1, r3, #5
 8014042:	d438      	bmi.n	80140b6 <SDMMC_CmdReadSingleBlock+0x102>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8014044:	01da      	lsls	r2, r3, #7
 8014046:	d439      	bmi.n	80140bc <SDMMC_CmdReadSingleBlock+0x108>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8014048:	0219      	lsls	r1, r3, #8
 801404a:	d43a      	bmi.n	80140c2 <SDMMC_CmdReadSingleBlock+0x10e>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801404c:	025a      	lsls	r2, r3, #9
 801404e:	d43b      	bmi.n	80140c8 <SDMMC_CmdReadSingleBlock+0x114>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8014050:	0299      	lsls	r1, r3, #10
 8014052:	d445      	bmi.n	80140e0 <SDMMC_CmdReadSingleBlock+0x12c>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8014054:	02da      	lsls	r2, r3, #11
 8014056:	d440      	bmi.n	80140da <SDMMC_CmdReadSingleBlock+0x126>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8014058:	0359      	lsls	r1, r3, #13
 801405a:	d43b      	bmi.n	80140d4 <SDMMC_CmdReadSingleBlock+0x120>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801405c:	039a      	lsls	r2, r3, #14
 801405e:	d436      	bmi.n	80140ce <SDMMC_CmdReadSingleBlock+0x11a>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8014060:	03d9      	lsls	r1, r3, #15
 8014062:	d446      	bmi.n	80140f2 <SDMMC_CmdReadSingleBlock+0x13e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8014064:	041a      	lsls	r2, r3, #16
 8014066:	d441      	bmi.n	80140ec <SDMMC_CmdReadSingleBlock+0x138>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8014068:	0459      	lsls	r1, r3, #17
 801406a:	d43c      	bmi.n	80140e6 <SDMMC_CmdReadSingleBlock+0x132>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801406c:	049a      	lsls	r2, r3, #18
 801406e:	d40b      	bmi.n	8014088 <SDMMC_CmdReadSingleBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014070:	f013 0f08 	tst.w	r3, #8
 8014074:	bf14      	ite	ne
 8014076:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 801407a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 801407e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014080:	2301      	movs	r3, #1
 8014082:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014086:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8014088:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 801408c:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801408e:	2001      	movs	r0, #1
 8014090:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014092:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014094:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014096:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801409a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801409c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80140a0:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80140a2:	2040      	movs	r0, #64	; 0x40
 80140a4:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80140a6:	2080      	movs	r0, #128	; 0x80
 80140a8:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80140aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80140ae:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80140b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80140b4:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80140b6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80140ba:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80140bc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80140c0:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 80140c2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80140c6:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 80140c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80140cc:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80140ce:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80140d2:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80140d4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80140d8:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 80140da:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80140de:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80140e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80140e4:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80140e6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80140ea:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80140ec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80140f0:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80140f2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80140f6:	4770      	bx	lr
 80140f8:	20007634 	.word	0x20007634
 80140fc:	10624dd3 	.word	0x10624dd3
 8014100:	fffee0c0 	.word	0xfffee0c0
 8014104:	00200045 	.word	0x00200045
 8014108:	002000c5 	.word	0x002000c5
 801410c:	fdffe008 	.word	0xfdffe008

08014110 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014110:	4a50      	ldr	r2, [pc, #320]	; (8014254 <SDMMC_CmdReadMultiBlock+0x144>)
{
 8014112:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014114:	4b50      	ldr	r3, [pc, #320]	; (8014258 <SDMMC_CmdReadMultiBlock+0x148>)
 8014116:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8014118:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801411c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014120:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8014124:	484d      	ldr	r0, [pc, #308]	; (801425c <SDMMC_CmdReadMultiBlock+0x14c>)
 8014126:	f241 1312 	movw	r3, #4370	; 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801412a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801412c:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801412e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014132:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014134:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014138:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 801413c:	1e53      	subs	r3, r2, #1
 801413e:	b14a      	cbz	r2, 8014154 <SDMMC_CmdReadMultiBlock+0x44>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8014140:	4947      	ldr	r1, [pc, #284]	; (8014260 <SDMMC_CmdReadMultiBlock+0x150>)
    sta_reg = SDMMCx->STA;
 8014142:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 8014146:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8014148:	420a      	tst	r2, r1
 801414a:	d001      	beq.n	8014150 <SDMMC_CmdReadMultiBlock+0x40>
 801414c:	0492      	lsls	r2, r2, #18
 801414e:	d504      	bpl.n	801415a <SDMMC_CmdReadMultiBlock+0x4a>
    if (count-- == 0U)
 8014150:	1c58      	adds	r0, r3, #1
 8014152:	d1f6      	bne.n	8014142 <SDMMC_CmdReadMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8014154:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8014158:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801415a:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 801415e:	0758      	lsls	r0, r3, #29
 8014160:	d445      	bmi.n	80141ee <SDMMC_CmdReadMultiBlock+0xde>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014162:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 8014166:	f010 0001 	ands.w	r0, r0, #1
 801416a:	d137      	bne.n	80141dc <SDMMC_CmdReadMultiBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801416c:	4b3d      	ldr	r3, [pc, #244]	; (8014264 <SDMMC_CmdReadMultiBlock+0x154>)
 801416e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8014172:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8014176:	b2db      	uxtb	r3, r3
 8014178:	2b12      	cmp	r3, #18
 801417a:	d136      	bne.n	80141ea <SDMMC_CmdReadMultiBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 801417c:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8014180:	4839      	ldr	r0, [pc, #228]	; (8014268 <SDMMC_CmdReadMultiBlock+0x158>)
 8014182:	4018      	ands	r0, r3
 8014184:	2800      	cmp	r0, #0
 8014186:	d02f      	beq.n	80141e8 <SDMMC_CmdReadMultiBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8014188:	2b00      	cmp	r3, #0
 801418a:	db35      	blt.n	80141f8 <SDMMC_CmdReadMultiBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801418c:	0059      	lsls	r1, r3, #1
 801418e:	d436      	bmi.n	80141fe <SDMMC_CmdReadMultiBlock+0xee>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8014190:	009a      	lsls	r2, r3, #2
 8014192:	d436      	bmi.n	8014202 <SDMMC_CmdReadMultiBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8014194:	00d9      	lsls	r1, r3, #3
 8014196:	d436      	bmi.n	8014206 <SDMMC_CmdReadMultiBlock+0xf6>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8014198:	011a      	lsls	r2, r3, #4
 801419a:	d437      	bmi.n	801420c <SDMMC_CmdReadMultiBlock+0xfc>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801419c:	0159      	lsls	r1, r3, #5
 801419e:	d438      	bmi.n	8014212 <SDMMC_CmdReadMultiBlock+0x102>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80141a0:	01da      	lsls	r2, r3, #7
 80141a2:	d439      	bmi.n	8014218 <SDMMC_CmdReadMultiBlock+0x108>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80141a4:	0219      	lsls	r1, r3, #8
 80141a6:	d43a      	bmi.n	801421e <SDMMC_CmdReadMultiBlock+0x10e>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80141a8:	025a      	lsls	r2, r3, #9
 80141aa:	d43b      	bmi.n	8014224 <SDMMC_CmdReadMultiBlock+0x114>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80141ac:	0299      	lsls	r1, r3, #10
 80141ae:	d445      	bmi.n	801423c <SDMMC_CmdReadMultiBlock+0x12c>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80141b0:	02da      	lsls	r2, r3, #11
 80141b2:	d440      	bmi.n	8014236 <SDMMC_CmdReadMultiBlock+0x126>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80141b4:	0359      	lsls	r1, r3, #13
 80141b6:	d43b      	bmi.n	8014230 <SDMMC_CmdReadMultiBlock+0x120>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80141b8:	039a      	lsls	r2, r3, #14
 80141ba:	d436      	bmi.n	801422a <SDMMC_CmdReadMultiBlock+0x11a>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80141bc:	03d9      	lsls	r1, r3, #15
 80141be:	d446      	bmi.n	801424e <SDMMC_CmdReadMultiBlock+0x13e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80141c0:	041a      	lsls	r2, r3, #16
 80141c2:	d441      	bmi.n	8014248 <SDMMC_CmdReadMultiBlock+0x138>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80141c4:	0459      	lsls	r1, r3, #17
 80141c6:	d43c      	bmi.n	8014242 <SDMMC_CmdReadMultiBlock+0x132>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80141c8:	049a      	lsls	r2, r3, #18
 80141ca:	d40b      	bmi.n	80141e4 <SDMMC_CmdReadMultiBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80141cc:	f013 0f08 	tst.w	r3, #8
 80141d0:	bf14      	ite	ne
 80141d2:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 80141d6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80141da:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80141dc:	2301      	movs	r3, #1
 80141de:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80141e2:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 80141e4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 80141e8:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80141ea:	2001      	movs	r0, #1
 80141ec:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80141ee:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80141f0:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80141f2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80141f6:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80141f8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80141fc:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80141fe:	2040      	movs	r0, #64	; 0x40
 8014200:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8014202:	2080      	movs	r0, #128	; 0x80
 8014204:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8014206:	f44f 7080 	mov.w	r0, #256	; 0x100
 801420a:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801420c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8014210:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8014212:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014216:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8014218:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801421c:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 801421e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8014222:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014224:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8014228:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801422a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 801422e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8014230:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8014234:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8014236:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 801423a:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801423c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8014240:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8014242:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8014246:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8014248:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801424c:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801424e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8014252:	4770      	bx	lr
 8014254:	20007634 	.word	0x20007634
 8014258:	10624dd3 	.word	0x10624dd3
 801425c:	fffee0c0 	.word	0xfffee0c0
 8014260:	00200045 	.word	0x00200045
 8014264:	002000c5 	.word	0x002000c5
 8014268:	fdffe008 	.word	0xfdffe008

0801426c <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801426c:	4a50      	ldr	r2, [pc, #320]	; (80143b0 <SDMMC_CmdWriteSingleBlock+0x144>)
{
 801426e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014270:	4b50      	ldr	r3, [pc, #320]	; (80143b4 <SDMMC_CmdWriteSingleBlock+0x148>)
 8014272:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8014274:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014278:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801427c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8014280:	484d      	ldr	r0, [pc, #308]	; (80143b8 <SDMMC_CmdWriteSingleBlock+0x14c>)
 8014282:	f241 1318 	movw	r3, #4376	; 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014286:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014288:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801428a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801428e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014290:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014294:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8014298:	1e53      	subs	r3, r2, #1
 801429a:	b14a      	cbz	r2, 80142b0 <SDMMC_CmdWriteSingleBlock+0x44>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801429c:	4947      	ldr	r1, [pc, #284]	; (80143bc <SDMMC_CmdWriteSingleBlock+0x150>)
    sta_reg = SDMMCx->STA;
 801429e:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 80142a2:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80142a4:	420a      	tst	r2, r1
 80142a6:	d001      	beq.n	80142ac <SDMMC_CmdWriteSingleBlock+0x40>
 80142a8:	0492      	lsls	r2, r2, #18
 80142aa:	d504      	bpl.n	80142b6 <SDMMC_CmdWriteSingleBlock+0x4a>
    if (count-- == 0U)
 80142ac:	1c58      	adds	r0, r3, #1
 80142ae:	d1f6      	bne.n	801429e <SDMMC_CmdWriteSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 80142b0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80142b4:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80142b6:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 80142ba:	0758      	lsls	r0, r3, #29
 80142bc:	d445      	bmi.n	801434a <SDMMC_CmdWriteSingleBlock+0xde>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80142be:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 80142c2:	f010 0001 	ands.w	r0, r0, #1
 80142c6:	d137      	bne.n	8014338 <SDMMC_CmdWriteSingleBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80142c8:	4b3d      	ldr	r3, [pc, #244]	; (80143c0 <SDMMC_CmdWriteSingleBlock+0x154>)
 80142ca:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80142ce:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80142d2:	b2db      	uxtb	r3, r3
 80142d4:	2b18      	cmp	r3, #24
 80142d6:	d136      	bne.n	8014346 <SDMMC_CmdWriteSingleBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 80142d8:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80142dc:	4839      	ldr	r0, [pc, #228]	; (80143c4 <SDMMC_CmdWriteSingleBlock+0x158>)
 80142de:	4018      	ands	r0, r3
 80142e0:	2800      	cmp	r0, #0
 80142e2:	d02f      	beq.n	8014344 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	db35      	blt.n	8014354 <SDMMC_CmdWriteSingleBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80142e8:	0059      	lsls	r1, r3, #1
 80142ea:	d436      	bmi.n	801435a <SDMMC_CmdWriteSingleBlock+0xee>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80142ec:	009a      	lsls	r2, r3, #2
 80142ee:	d436      	bmi.n	801435e <SDMMC_CmdWriteSingleBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80142f0:	00d9      	lsls	r1, r3, #3
 80142f2:	d436      	bmi.n	8014362 <SDMMC_CmdWriteSingleBlock+0xf6>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80142f4:	011a      	lsls	r2, r3, #4
 80142f6:	d437      	bmi.n	8014368 <SDMMC_CmdWriteSingleBlock+0xfc>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80142f8:	0159      	lsls	r1, r3, #5
 80142fa:	d438      	bmi.n	801436e <SDMMC_CmdWriteSingleBlock+0x102>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80142fc:	01da      	lsls	r2, r3, #7
 80142fe:	d439      	bmi.n	8014374 <SDMMC_CmdWriteSingleBlock+0x108>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8014300:	0219      	lsls	r1, r3, #8
 8014302:	d43a      	bmi.n	801437a <SDMMC_CmdWriteSingleBlock+0x10e>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8014304:	025a      	lsls	r2, r3, #9
 8014306:	d43b      	bmi.n	8014380 <SDMMC_CmdWriteSingleBlock+0x114>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8014308:	0299      	lsls	r1, r3, #10
 801430a:	d445      	bmi.n	8014398 <SDMMC_CmdWriteSingleBlock+0x12c>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801430c:	02da      	lsls	r2, r3, #11
 801430e:	d440      	bmi.n	8014392 <SDMMC_CmdWriteSingleBlock+0x126>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8014310:	0359      	lsls	r1, r3, #13
 8014312:	d43b      	bmi.n	801438c <SDMMC_CmdWriteSingleBlock+0x120>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8014314:	039a      	lsls	r2, r3, #14
 8014316:	d436      	bmi.n	8014386 <SDMMC_CmdWriteSingleBlock+0x11a>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8014318:	03d9      	lsls	r1, r3, #15
 801431a:	d446      	bmi.n	80143aa <SDMMC_CmdWriteSingleBlock+0x13e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801431c:	041a      	lsls	r2, r3, #16
 801431e:	d441      	bmi.n	80143a4 <SDMMC_CmdWriteSingleBlock+0x138>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8014320:	0459      	lsls	r1, r3, #17
 8014322:	d43c      	bmi.n	801439e <SDMMC_CmdWriteSingleBlock+0x132>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8014324:	049a      	lsls	r2, r3, #18
 8014326:	d40b      	bmi.n	8014340 <SDMMC_CmdWriteSingleBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014328:	f013 0f08 	tst.w	r3, #8
 801432c:	bf14      	ite	ne
 801432e:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8014332:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8014336:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014338:	2301      	movs	r3, #1
 801433a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801433e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8014340:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 8014344:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014346:	2001      	movs	r0, #1
 8014348:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801434a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801434c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801434e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014352:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8014354:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8014358:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801435a:	2040      	movs	r0, #64	; 0x40
 801435c:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801435e:	2080      	movs	r0, #128	; 0x80
 8014360:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8014362:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014366:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8014368:	f44f 7000 	mov.w	r0, #512	; 0x200
 801436c:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801436e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014372:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8014374:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8014378:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 801437a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801437e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014380:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8014384:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8014386:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 801438a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801438c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8014390:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8014392:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8014396:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8014398:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801439c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801439e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80143a2:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80143a4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80143a8:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80143aa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80143ae:	4770      	bx	lr
 80143b0:	20007634 	.word	0x20007634
 80143b4:	10624dd3 	.word	0x10624dd3
 80143b8:	fffee0c0 	.word	0xfffee0c0
 80143bc:	00200045 	.word	0x00200045
 80143c0:	002000c5 	.word	0x002000c5
 80143c4:	fdffe008 	.word	0xfdffe008

080143c8 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80143c8:	4a50      	ldr	r2, [pc, #320]	; (801450c <SDMMC_CmdWriteMultiBlock+0x144>)
{
 80143ca:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80143cc:	4b50      	ldr	r3, [pc, #320]	; (8014510 <SDMMC_CmdWriteMultiBlock+0x148>)
 80143ce:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 80143d0:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80143d4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80143d8:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80143dc:	484d      	ldr	r0, [pc, #308]	; (8014514 <SDMMC_CmdWriteMultiBlock+0x14c>)
 80143de:	f241 1319 	movw	r3, #4377	; 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80143e2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80143e4:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80143e6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80143ea:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80143ec:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80143f0:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 80143f4:	1e53      	subs	r3, r2, #1
 80143f6:	b14a      	cbz	r2, 801440c <SDMMC_CmdWriteMultiBlock+0x44>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80143f8:	4947      	ldr	r1, [pc, #284]	; (8014518 <SDMMC_CmdWriteMultiBlock+0x150>)
    sta_reg = SDMMCx->STA;
 80143fa:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 80143fe:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8014400:	420a      	tst	r2, r1
 8014402:	d001      	beq.n	8014408 <SDMMC_CmdWriteMultiBlock+0x40>
 8014404:	0492      	lsls	r2, r2, #18
 8014406:	d504      	bpl.n	8014412 <SDMMC_CmdWriteMultiBlock+0x4a>
    if (count-- == 0U)
 8014408:	1c58      	adds	r0, r3, #1
 801440a:	d1f6      	bne.n	80143fa <SDMMC_CmdWriteMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 801440c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8014410:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014412:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 8014416:	0758      	lsls	r0, r3, #29
 8014418:	d445      	bmi.n	80144a6 <SDMMC_CmdWriteMultiBlock+0xde>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801441a:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 801441e:	f010 0001 	ands.w	r0, r0, #1
 8014422:	d137      	bne.n	8014494 <SDMMC_CmdWriteMultiBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014424:	4b3d      	ldr	r3, [pc, #244]	; (801451c <SDMMC_CmdWriteMultiBlock+0x154>)
 8014426:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 801442a:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801442e:	b2db      	uxtb	r3, r3
 8014430:	2b19      	cmp	r3, #25
 8014432:	d136      	bne.n	80144a2 <SDMMC_CmdWriteMultiBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 8014434:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8014438:	4839      	ldr	r0, [pc, #228]	; (8014520 <SDMMC_CmdWriteMultiBlock+0x158>)
 801443a:	4018      	ands	r0, r3
 801443c:	2800      	cmp	r0, #0
 801443e:	d02f      	beq.n	80144a0 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8014440:	2b00      	cmp	r3, #0
 8014442:	db35      	blt.n	80144b0 <SDMMC_CmdWriteMultiBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8014444:	0059      	lsls	r1, r3, #1
 8014446:	d436      	bmi.n	80144b6 <SDMMC_CmdWriteMultiBlock+0xee>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8014448:	009a      	lsls	r2, r3, #2
 801444a:	d436      	bmi.n	80144ba <SDMMC_CmdWriteMultiBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801444c:	00d9      	lsls	r1, r3, #3
 801444e:	d436      	bmi.n	80144be <SDMMC_CmdWriteMultiBlock+0xf6>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8014450:	011a      	lsls	r2, r3, #4
 8014452:	d437      	bmi.n	80144c4 <SDMMC_CmdWriteMultiBlock+0xfc>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8014454:	0159      	lsls	r1, r3, #5
 8014456:	d438      	bmi.n	80144ca <SDMMC_CmdWriteMultiBlock+0x102>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8014458:	01da      	lsls	r2, r3, #7
 801445a:	d439      	bmi.n	80144d0 <SDMMC_CmdWriteMultiBlock+0x108>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801445c:	0219      	lsls	r1, r3, #8
 801445e:	d43a      	bmi.n	80144d6 <SDMMC_CmdWriteMultiBlock+0x10e>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8014460:	025a      	lsls	r2, r3, #9
 8014462:	d43b      	bmi.n	80144dc <SDMMC_CmdWriteMultiBlock+0x114>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8014464:	0299      	lsls	r1, r3, #10
 8014466:	d445      	bmi.n	80144f4 <SDMMC_CmdWriteMultiBlock+0x12c>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8014468:	02da      	lsls	r2, r3, #11
 801446a:	d440      	bmi.n	80144ee <SDMMC_CmdWriteMultiBlock+0x126>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801446c:	0359      	lsls	r1, r3, #13
 801446e:	d43b      	bmi.n	80144e8 <SDMMC_CmdWriteMultiBlock+0x120>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8014470:	039a      	lsls	r2, r3, #14
 8014472:	d436      	bmi.n	80144e2 <SDMMC_CmdWriteMultiBlock+0x11a>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8014474:	03d9      	lsls	r1, r3, #15
 8014476:	d446      	bmi.n	8014506 <SDMMC_CmdWriteMultiBlock+0x13e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8014478:	041a      	lsls	r2, r3, #16
 801447a:	d441      	bmi.n	8014500 <SDMMC_CmdWriteMultiBlock+0x138>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801447c:	0459      	lsls	r1, r3, #17
 801447e:	d43c      	bmi.n	80144fa <SDMMC_CmdWriteMultiBlock+0x132>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8014480:	049a      	lsls	r2, r3, #18
 8014482:	d40b      	bmi.n	801449c <SDMMC_CmdWriteMultiBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014484:	f013 0f08 	tst.w	r3, #8
 8014488:	bf14      	ite	ne
 801448a:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 801448e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8014492:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014494:	2301      	movs	r3, #1
 8014496:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801449a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 801449c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 80144a0:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80144a2:	2001      	movs	r0, #1
 80144a4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80144a6:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80144a8:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80144aa:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80144ae:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80144b0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80144b4:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80144b6:	2040      	movs	r0, #64	; 0x40
 80144b8:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80144ba:	2080      	movs	r0, #128	; 0x80
 80144bc:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80144be:	f44f 7080 	mov.w	r0, #256	; 0x100
 80144c2:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80144c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80144c8:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80144ca:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80144ce:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80144d0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80144d4:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 80144d6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80144da:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 80144dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80144e0:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80144e2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80144e6:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80144e8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80144ec:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 80144ee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80144f2:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80144f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80144f8:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80144fa:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80144fe:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8014500:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8014504:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8014506:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 801450a:	4770      	bx	lr
 801450c:	20007634 	.word	0x20007634
 8014510:	10624dd3 	.word	0x10624dd3
 8014514:	fffee0c0 	.word	0xfffee0c0
 8014518:	00200045 	.word	0x00200045
 801451c:	002000c5 	.word	0x002000c5
 8014520:	fdffe008 	.word	0xfdffe008

08014524 <SDMMC_CmdStopTransfer>:
{
 8014524:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014526:	4b7c      	ldr	r3, [pc, #496]	; (8014718 <SDMMC_CmdStopTransfer+0x1f4>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8014528:	68c0      	ldr	r0, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801452a:	681a      	ldr	r2, [r3, #0]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 801452c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014530:	4b7a      	ldr	r3, [pc, #488]	; (801471c <SDMMC_CmdStopTransfer+0x1f8>)
{
 8014532:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014534:	4c7a      	ldr	r4, [pc, #488]	; (8014720 <SDMMC_CmdStopTransfer+0x1fc>)
  SDMMCx->ARG = Command->Argument;
 8014536:	2500      	movs	r5, #0
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8014538:	60c8      	str	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801453a:	fba4 4202 	umull	r4, r2, r4, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 801453e:	68c8      	ldr	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014540:	4c78      	ldr	r4, [pc, #480]	; (8014724 <SDMMC_CmdStopTransfer+0x200>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8014542:	f020 0040 	bic.w	r0, r0, #64	; 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014546:	0a52      	lsrs	r2, r2, #9
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8014548:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801454a:	f241 100c 	movw	r0, #4364	; 0x110c
  SDMMCx->ARG = Command->Argument;
 801454e:	608d      	str	r5, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014550:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014554:	68cc      	ldr	r4, [r1, #12]
 8014556:	4023      	ands	r3, r4
 8014558:	4318      	orrs	r0, r3
 801455a:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
 801455c:	b14a      	cbz	r2, 8014572 <SDMMC_CmdStopTransfer+0x4e>
 801455e:	1e53      	subs	r3, r2, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8014560:	4871      	ldr	r0, [pc, #452]	; (8014728 <SDMMC_CmdStopTransfer+0x204>)
    sta_reg = SDMMCx->STA;
 8014562:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 8014564:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8014566:	4202      	tst	r2, r0
 8014568:	d001      	beq.n	801456e <SDMMC_CmdStopTransfer+0x4a>
 801456a:	0492      	lsls	r2, r2, #18
 801456c:	d509      	bpl.n	8014582 <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
 801456e:	1c5c      	adds	r4, r3, #1
 8014570:	d1f7      	bne.n	8014562 <SDMMC_CmdStopTransfer+0x3e>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8014572:	68cb      	ldr	r3, [r1, #12]
 8014574:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8014578:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801457c:	60cb      	str	r3, [r1, #12]
}
 801457e:	bc30      	pop	{r4, r5}
 8014580:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014582:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8014584:	075b      	lsls	r3, r3, #29
 8014586:	d452      	bmi.n	801462e <SDMMC_CmdStopTransfer+0x10a>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014588:	6b48      	ldr	r0, [r1, #52]	; 0x34
 801458a:	f010 0001 	ands.w	r0, r0, #1
 801458e:	d13b      	bne.n	8014608 <SDMMC_CmdStopTransfer+0xe4>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014590:	4b66      	ldr	r3, [pc, #408]	; (801472c <SDMMC_CmdStopTransfer+0x208>)
 8014592:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8014594:	690b      	ldr	r3, [r1, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8014596:	b2db      	uxtb	r3, r3
 8014598:	2b0c      	cmp	r3, #12
 801459a:	d142      	bne.n	8014622 <SDMMC_CmdStopTransfer+0xfe>
  return (*(__IO uint32_t *) tmp);
 801459c:	694b      	ldr	r3, [r1, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801459e:	4a64      	ldr	r2, [pc, #400]	; (8014730 <SDMMC_CmdStopTransfer+0x20c>)
 80145a0:	401a      	ands	r2, r3
 80145a2:	2a00      	cmp	r2, #0
 80145a4:	d037      	beq.n	8014616 <SDMMC_CmdStopTransfer+0xf2>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	db35      	blt.n	8014616 <SDMMC_CmdStopTransfer+0xf2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80145aa:	005d      	lsls	r5, r3, #1
 80145ac:	d446      	bmi.n	801463c <SDMMC_CmdStopTransfer+0x118>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80145ae:	009c      	lsls	r4, r3, #2
 80145b0:	d44a      	bmi.n	8014648 <SDMMC_CmdStopTransfer+0x124>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80145b2:	00d8      	lsls	r0, r3, #3
 80145b4:	d44e      	bmi.n	8014654 <SDMMC_CmdStopTransfer+0x130>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80145b6:	011a      	lsls	r2, r3, #4
 80145b8:	d453      	bmi.n	8014662 <SDMMC_CmdStopTransfer+0x13e>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80145ba:	015d      	lsls	r5, r3, #5
 80145bc:	d458      	bmi.n	8014670 <SDMMC_CmdStopTransfer+0x14c>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80145be:	01dc      	lsls	r4, r3, #7
 80145c0:	d464      	bmi.n	801468c <SDMMC_CmdStopTransfer+0x168>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80145c2:	0218      	lsls	r0, r3, #8
 80145c4:	d45b      	bmi.n	801467e <SDMMC_CmdStopTransfer+0x15a>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80145c6:	025a      	lsls	r2, r3, #9
 80145c8:	d46e      	bmi.n	80146a8 <SDMMC_CmdStopTransfer+0x184>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80145ca:	029d      	lsls	r5, r3, #10
 80145cc:	d465      	bmi.n	801469a <SDMMC_CmdStopTransfer+0x176>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80145ce:	02dc      	lsls	r4, r3, #11
 80145d0:	d47f      	bmi.n	80146d2 <SDMMC_CmdStopTransfer+0x1ae>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80145d2:	0358      	lsls	r0, r3, #13
 80145d4:	d476      	bmi.n	80146c4 <SDMMC_CmdStopTransfer+0x1a0>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80145d6:	039a      	lsls	r2, r3, #14
 80145d8:	d46d      	bmi.n	80146b6 <SDMMC_CmdStopTransfer+0x192>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80145da:	03dd      	lsls	r5, r3, #15
 80145dc:	f100 8095 	bmi.w	801470a <SDMMC_CmdStopTransfer+0x1e6>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80145e0:	041c      	lsls	r4, r3, #16
 80145e2:	f100 8084 	bmi.w	80146ee <SDMMC_CmdStopTransfer+0x1ca>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80145e6:	0458      	lsls	r0, r3, #17
 80145e8:	d47a      	bmi.n	80146e0 <SDMMC_CmdStopTransfer+0x1bc>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80145ea:	049a      	lsls	r2, r3, #18
 80145ec:	f100 8086 	bmi.w	80146fc <SDMMC_CmdStopTransfer+0x1d8>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80145f0:	f013 0f08 	tst.w	r3, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80145f4:	68cb      	ldr	r3, [r1, #12]
 80145f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80145fa:	bf14      	ite	ne
 80145fc:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014600:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8014604:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8014606:	e7ba      	b.n	801457e <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014608:	2301      	movs	r3, #1
 801460a:	638b      	str	r3, [r1, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801460c:	68cb      	ldr	r3, [r1, #12]
 801460e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014612:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8014614:	e7b3      	b.n	801457e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8014616:	68cb      	ldr	r3, [r1, #12]
 8014618:	f023 0380 	bic.w	r3, r3, #128	; 0x80
}
 801461c:	bc30      	pop	{r4, r5}
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801461e:	60cb      	str	r3, [r1, #12]
}
 8014620:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8014622:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014624:	2001      	movs	r0, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8014626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801462a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801462c:	e7a7      	b.n	801457e <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801462e:	2004      	movs	r0, #4
 8014630:	6388      	str	r0, [r1, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8014632:	68cb      	ldr	r3, [r1, #12]
 8014634:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014638:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801463a:	e7a0      	b.n	801457e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801463c:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801463e:	2040      	movs	r0, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8014640:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014644:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8014646:	e79a      	b.n	801457e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8014648:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801464a:	2080      	movs	r0, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801464c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014650:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8014652:	e794      	b.n	801457e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8014654:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8014656:	f44f 7080 	mov.w	r0, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801465a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801465e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8014660:	e78d      	b.n	801457e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8014662:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8014664:	f44f 7000 	mov.w	r0, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8014668:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801466c:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801466e:	e786      	b.n	801457e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8014670:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8014672:	f44f 6080 	mov.w	r0, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8014676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801467a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801467c:	e77f      	b.n	801457e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801467e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014680:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8014684:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014688:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801468a:	e778      	b.n	801457e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801468c:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801468e:	f44f 6000 	mov.w	r0, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8014692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014696:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8014698:	e771      	b.n	801457e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801469a:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801469c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80146a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80146a4:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80146a6:	e76a      	b.n	801457e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80146a8:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
 80146aa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80146ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80146b2:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80146b4:	e763      	b.n	801457e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80146b6:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80146b8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80146bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80146c0:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80146c2:	e75c      	b.n	801457e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80146c4:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80146c6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80146ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80146ce:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80146d0:	e755      	b.n	801457e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80146d2:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CC_ERR;
 80146d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80146d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80146dc:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80146de:	e74e      	b.n	801457e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80146e0:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80146e2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80146e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80146ea:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80146ec:	e747      	b.n	801457e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80146ee:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80146f0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80146f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80146f8:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80146fa:	e740      	b.n	801457e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80146fc:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_RESET;
 80146fe:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8014702:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014706:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8014708:	e739      	b.n	801457e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801470a:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801470c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8014710:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014714:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8014716:	e732      	b.n	801457e <SDMMC_CmdStopTransfer+0x5a>
 8014718:	20007634 	.word	0x20007634
 801471c:	fffee0c0 	.word	0xfffee0c0
 8014720:	10624dd3 	.word	0x10624dd3
 8014724:	05f5e100 	.word	0x05f5e100
 8014728:	00200045 	.word	0x00200045
 801472c:	002000c5 	.word	0x002000c5
 8014730:	fdffe008 	.word	0xfdffe008

08014734 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014734:	4b4c      	ldr	r3, [pc, #304]	; (8014868 <SDMMC_CmdSelDesel+0x134>)
{
 8014736:	4601      	mov	r1, r0
 8014738:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	4d4b      	ldr	r5, [pc, #300]	; (801486c <SDMMC_CmdSelDesel+0x138>)
  SDMMCx->ARG = Command->Argument;
 801473e:	6082      	str	r2, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014740:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014744:	4c4a      	ldr	r4, [pc, #296]	; (8014870 <SDMMC_CmdSelDesel+0x13c>)
 8014746:	68c5      	ldr	r5, [r0, #12]
 8014748:	f241 1007 	movw	r0, #4359	; 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801474c:	0a5a      	lsrs	r2, r3, #9
 801474e:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014752:	402c      	ands	r4, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014754:	fb03 f202 	mul.w	r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014758:	4320      	orrs	r0, r4
 801475a:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
 801475c:	b14a      	cbz	r2, 8014772 <SDMMC_CmdSelDesel+0x3e>
 801475e:	1e53      	subs	r3, r2, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8014760:	4844      	ldr	r0, [pc, #272]	; (8014874 <SDMMC_CmdSelDesel+0x140>)
    sta_reg = SDMMCx->STA;
 8014762:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 8014764:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8014766:	4202      	tst	r2, r0
 8014768:	d001      	beq.n	801476e <SDMMC_CmdSelDesel+0x3a>
 801476a:	0492      	lsls	r2, r2, #18
 801476c:	d505      	bpl.n	801477a <SDMMC_CmdSelDesel+0x46>
    if (count-- == 0U)
 801476e:	1c5c      	adds	r4, r3, #1
 8014770:	d1f7      	bne.n	8014762 <SDMMC_CmdSelDesel+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8014772:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8014776:	bc30      	pop	{r4, r5}
 8014778:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801477a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801477c:	075b      	lsls	r3, r3, #29
 801477e:	d43d      	bmi.n	80147fc <SDMMC_CmdSelDesel+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014780:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8014782:	f010 0001 	ands.w	r0, r0, #1
 8014786:	d134      	bne.n	80147f2 <SDMMC_CmdSelDesel+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014788:	4b3b      	ldr	r3, [pc, #236]	; (8014878 <SDMMC_CmdSelDesel+0x144>)
 801478a:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 801478c:	690b      	ldr	r3, [r1, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801478e:	b2db      	uxtb	r3, r3
 8014790:	2b07      	cmp	r3, #7
 8014792:	d131      	bne.n	80147f8 <SDMMC_CmdSelDesel+0xc4>
  return (*(__IO uint32_t *) tmp);
 8014794:	694b      	ldr	r3, [r1, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8014796:	4839      	ldr	r0, [pc, #228]	; (801487c <SDMMC_CmdSelDesel+0x148>)
 8014798:	4018      	ands	r0, r3
 801479a:	2800      	cmp	r0, #0
 801479c:	d0eb      	beq.n	8014776 <SDMMC_CmdSelDesel+0x42>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801479e:	2b00      	cmp	r3, #0
 80147a0:	db30      	blt.n	8014804 <SDMMC_CmdSelDesel+0xd0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80147a2:	005d      	lsls	r5, r3, #1
 80147a4:	d431      	bmi.n	801480a <SDMMC_CmdSelDesel+0xd6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80147a6:	009c      	lsls	r4, r3, #2
 80147a8:	d431      	bmi.n	801480e <SDMMC_CmdSelDesel+0xda>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80147aa:	00d9      	lsls	r1, r3, #3
 80147ac:	d431      	bmi.n	8014812 <SDMMC_CmdSelDesel+0xde>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80147ae:	011a      	lsls	r2, r3, #4
 80147b0:	d432      	bmi.n	8014818 <SDMMC_CmdSelDesel+0xe4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80147b2:	015d      	lsls	r5, r3, #5
 80147b4:	d433      	bmi.n	801481e <SDMMC_CmdSelDesel+0xea>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80147b6:	01dc      	lsls	r4, r3, #7
 80147b8:	d434      	bmi.n	8014824 <SDMMC_CmdSelDesel+0xf0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80147ba:	0219      	lsls	r1, r3, #8
 80147bc:	d435      	bmi.n	801482a <SDMMC_CmdSelDesel+0xf6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80147be:	025a      	lsls	r2, r3, #9
 80147c0:	d436      	bmi.n	8014830 <SDMMC_CmdSelDesel+0xfc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80147c2:	029d      	lsls	r5, r3, #10
 80147c4:	d440      	bmi.n	8014848 <SDMMC_CmdSelDesel+0x114>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80147c6:	02dc      	lsls	r4, r3, #11
 80147c8:	d43b      	bmi.n	8014842 <SDMMC_CmdSelDesel+0x10e>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80147ca:	0359      	lsls	r1, r3, #13
 80147cc:	d436      	bmi.n	801483c <SDMMC_CmdSelDesel+0x108>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80147ce:	039a      	lsls	r2, r3, #14
 80147d0:	d431      	bmi.n	8014836 <SDMMC_CmdSelDesel+0x102>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80147d2:	03dd      	lsls	r5, r3, #15
 80147d4:	d444      	bmi.n	8014860 <SDMMC_CmdSelDesel+0x12c>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80147d6:	041c      	lsls	r4, r3, #16
 80147d8:	d43f      	bmi.n	801485a <SDMMC_CmdSelDesel+0x126>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80147da:	0459      	lsls	r1, r3, #17
 80147dc:	d43a      	bmi.n	8014854 <SDMMC_CmdSelDesel+0x120>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80147de:	049a      	lsls	r2, r3, #18
 80147e0:	d435      	bmi.n	801484e <SDMMC_CmdSelDesel+0x11a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80147e2:	f013 0f08 	tst.w	r3, #8
 80147e6:	bf14      	ite	ne
 80147e8:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 80147ec:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80147f0:	e7c1      	b.n	8014776 <SDMMC_CmdSelDesel+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80147f2:	2301      	movs	r3, #1
 80147f4:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80147f6:	e7be      	b.n	8014776 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80147f8:	2001      	movs	r0, #1
 80147fa:	e7bc      	b.n	8014776 <SDMMC_CmdSelDesel+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80147fc:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80147fe:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014800:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014802:	e7b8      	b.n	8014776 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8014804:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8014808:	e7b5      	b.n	8014776 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801480a:	2040      	movs	r0, #64	; 0x40
 801480c:	e7b3      	b.n	8014776 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801480e:	2080      	movs	r0, #128	; 0x80
 8014810:	e7b1      	b.n	8014776 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8014812:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014816:	e7ae      	b.n	8014776 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8014818:	f44f 7000 	mov.w	r0, #512	; 0x200
 801481c:	e7ab      	b.n	8014776 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801481e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014822:	e7a8      	b.n	8014776 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8014824:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8014828:	e7a5      	b.n	8014776 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 801482a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801482e:	e7a2      	b.n	8014776 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014830:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8014834:	e79f      	b.n	8014776 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8014836:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 801483a:	e79c      	b.n	8014776 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801483c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8014840:	e799      	b.n	8014776 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_CC_ERR;
 8014842:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8014846:	e796      	b.n	8014776 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8014848:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801484c:	e793      	b.n	8014776 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 801484e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8014852:	e790      	b.n	8014776 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8014854:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8014858:	e78d      	b.n	8014776 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801485a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801485e:	e78a      	b.n	8014776 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8014860:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8014864:	e787      	b.n	8014776 <SDMMC_CmdSelDesel+0x42>
 8014866:	bf00      	nop
 8014868:	20007634 	.word	0x20007634
 801486c:	10624dd3 	.word	0x10624dd3
 8014870:	fffee0c0 	.word	0xfffee0c0
 8014874:	00200045 	.word	0x00200045
 8014878:	002000c5 	.word	0x002000c5
 801487c:	fdffe008 	.word	0xfdffe008

08014880 <SDMMC_CmdGoIdleState>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014880:	4b11      	ldr	r3, [pc, #68]	; (80148c8 <SDMMC_CmdGoIdleState+0x48>)
{
 8014882:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014884:	4a11      	ldr	r2, [pc, #68]	; (80148cc <SDMMC_CmdGoIdleState+0x4c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014886:	681b      	ldr	r3, [r3, #0]
{
 8014888:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801488a:	4c11      	ldr	r4, [pc, #68]	; (80148d0 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 801488c:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801488e:	fba4 4303 	umull	r4, r3, r4, r3
  SDMMCx->ARG = Command->Argument;
 8014892:	6085      	str	r5, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014894:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014896:	0a5b      	lsrs	r3, r3, #9
 8014898:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801489c:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801489e:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80148a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80148a6:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80148a8:	e002      	b.n	80148b0 <SDMMC_CmdGoIdleState+0x30>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80148aa:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80148ac:	0612      	lsls	r2, r2, #24
 80148ae:	d405      	bmi.n	80148bc <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 80148b0:	3b01      	subs	r3, #1
 80148b2:	d2fa      	bcs.n	80148aa <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80148b4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80148b8:	bc30      	pop	{r4, r5}
 80148ba:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80148bc:	4b05      	ldr	r3, [pc, #20]	; (80148d4 <SDMMC_CmdGoIdleState+0x54>)
  return SDMMC_ERROR_NONE;
 80148be:	2000      	movs	r0, #0
}
 80148c0:	bc30      	pop	{r4, r5}
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80148c2:	638b      	str	r3, [r1, #56]	; 0x38
}
 80148c4:	4770      	bx	lr
 80148c6:	bf00      	nop
 80148c8:	20007634 	.word	0x20007634
 80148cc:	fffee0c0 	.word	0xfffee0c0
 80148d0:	10624dd3 	.word	0x10624dd3
 80148d4:	002000c5 	.word	0x002000c5

080148d8 <SDMMC_CmdOperCond>:
{
 80148d8:	4601      	mov	r1, r0
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80148da:	4a1c      	ldr	r2, [pc, #112]	; (801494c <SDMMC_CmdOperCond+0x74>)
 80148dc:	4b1c      	ldr	r3, [pc, #112]	; (8014950 <SDMMC_CmdOperCond+0x78>)
 80148de:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80148e0:	481c      	ldr	r0, [pc, #112]	; (8014954 <SDMMC_CmdOperCond+0x7c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80148e2:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80148e6:	f241 1308 	movw	r3, #4360	; 0x1108
{
 80148ea:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 80148ec:	f44f 74d5 	mov.w	r4, #426	; 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80148f0:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 80148f2:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80148f4:	68cc      	ldr	r4, [r1, #12]
 80148f6:	4020      	ands	r0, r4
 80148f8:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80148fa:	f241 3088 	movw	r0, #5000	; 0x1388
 80148fe:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014902:	60cb      	str	r3, [r1, #12]

  do
  {
    if (count-- == 0U)
 8014904:	b14a      	cbz	r2, 801491a <SDMMC_CmdOperCond+0x42>
 8014906:	1e53      	subs	r3, r2, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8014908:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 801490a:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801490c:	f012 0f45 	tst.w	r2, #69	; 0x45
 8014910:	d001      	beq.n	8014916 <SDMMC_CmdOperCond+0x3e>
 8014912:	0490      	lsls	r0, r2, #18
 8014914:	d506      	bpl.n	8014924 <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
 8014916:	1c5c      	adds	r4, r3, #1
 8014918:	d1f6      	bne.n	8014908 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 801491a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 801491e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014922:	4770      	bx	lr
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014924:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8014926:	075a      	lsls	r2, r3, #29
 8014928:	d40c      	bmi.n	8014944 <SDMMC_CmdOperCond+0x6c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801492a:	6b48      	ldr	r0, [r1, #52]	; 0x34
 801492c:	f010 0001 	ands.w	r0, r0, #1
 8014930:	d105      	bne.n	801493e <SDMMC_CmdOperCond+0x66>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8014932:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8014934:	065b      	lsls	r3, r3, #25
 8014936:	d5f2      	bpl.n	801491e <SDMMC_CmdOperCond+0x46>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8014938:	2340      	movs	r3, #64	; 0x40
 801493a:	638b      	str	r3, [r1, #56]	; 0x38
 801493c:	e7ef      	b.n	801491e <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801493e:	2301      	movs	r3, #1
 8014940:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014942:	e7ec      	b.n	801491e <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014944:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014946:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014948:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801494a:	e7e8      	b.n	801491e <SDMMC_CmdOperCond+0x46>
 801494c:	20007634 	.word	0x20007634
 8014950:	10624dd3 	.word	0x10624dd3
 8014954:	fffee0c0 	.word	0xfffee0c0

08014958 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014958:	4a50      	ldr	r2, [pc, #320]	; (8014a9c <SDMMC_CmdAppCommand+0x144>)
{
 801495a:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801495c:	4b50      	ldr	r3, [pc, #320]	; (8014aa0 <SDMMC_CmdAppCommand+0x148>)
 801495e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8014960:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014964:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014968:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801496c:	484d      	ldr	r0, [pc, #308]	; (8014aa4 <SDMMC_CmdAppCommand+0x14c>)
 801496e:	f241 1337 	movw	r3, #4407	; 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014972:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014974:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014976:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801497a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801497c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014980:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8014984:	1e53      	subs	r3, r2, #1
 8014986:	b14a      	cbz	r2, 801499c <SDMMC_CmdAppCommand+0x44>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8014988:	4947      	ldr	r1, [pc, #284]	; (8014aa8 <SDMMC_CmdAppCommand+0x150>)
    sta_reg = SDMMCx->STA;
 801498a:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 801498e:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8014990:	420a      	tst	r2, r1
 8014992:	d001      	beq.n	8014998 <SDMMC_CmdAppCommand+0x40>
 8014994:	0492      	lsls	r2, r2, #18
 8014996:	d504      	bpl.n	80149a2 <SDMMC_CmdAppCommand+0x4a>
    if (count-- == 0U)
 8014998:	1c58      	adds	r0, r3, #1
 801499a:	d1f6      	bne.n	801498a <SDMMC_CmdAppCommand+0x32>
      return SDMMC_ERROR_TIMEOUT;
 801499c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80149a0:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80149a2:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 80149a6:	0758      	lsls	r0, r3, #29
 80149a8:	d445      	bmi.n	8014a36 <SDMMC_CmdAppCommand+0xde>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80149aa:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 80149ae:	f010 0001 	ands.w	r0, r0, #1
 80149b2:	d137      	bne.n	8014a24 <SDMMC_CmdAppCommand+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80149b4:	4b3d      	ldr	r3, [pc, #244]	; (8014aac <SDMMC_CmdAppCommand+0x154>)
 80149b6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80149ba:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80149be:	b2db      	uxtb	r3, r3
 80149c0:	2b37      	cmp	r3, #55	; 0x37
 80149c2:	d136      	bne.n	8014a32 <SDMMC_CmdAppCommand+0xda>
  return (*(__IO uint32_t *) tmp);
 80149c4:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80149c8:	4839      	ldr	r0, [pc, #228]	; (8014ab0 <SDMMC_CmdAppCommand+0x158>)
 80149ca:	4018      	ands	r0, r3
 80149cc:	2800      	cmp	r0, #0
 80149ce:	d02f      	beq.n	8014a30 <SDMMC_CmdAppCommand+0xd8>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	db35      	blt.n	8014a40 <SDMMC_CmdAppCommand+0xe8>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80149d4:	0059      	lsls	r1, r3, #1
 80149d6:	d436      	bmi.n	8014a46 <SDMMC_CmdAppCommand+0xee>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80149d8:	009a      	lsls	r2, r3, #2
 80149da:	d436      	bmi.n	8014a4a <SDMMC_CmdAppCommand+0xf2>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80149dc:	00d9      	lsls	r1, r3, #3
 80149de:	d436      	bmi.n	8014a4e <SDMMC_CmdAppCommand+0xf6>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80149e0:	011a      	lsls	r2, r3, #4
 80149e2:	d437      	bmi.n	8014a54 <SDMMC_CmdAppCommand+0xfc>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80149e4:	0159      	lsls	r1, r3, #5
 80149e6:	d438      	bmi.n	8014a5a <SDMMC_CmdAppCommand+0x102>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80149e8:	01da      	lsls	r2, r3, #7
 80149ea:	d439      	bmi.n	8014a60 <SDMMC_CmdAppCommand+0x108>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80149ec:	0219      	lsls	r1, r3, #8
 80149ee:	d43a      	bmi.n	8014a66 <SDMMC_CmdAppCommand+0x10e>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80149f0:	025a      	lsls	r2, r3, #9
 80149f2:	d43b      	bmi.n	8014a6c <SDMMC_CmdAppCommand+0x114>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80149f4:	0299      	lsls	r1, r3, #10
 80149f6:	d445      	bmi.n	8014a84 <SDMMC_CmdAppCommand+0x12c>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80149f8:	02da      	lsls	r2, r3, #11
 80149fa:	d440      	bmi.n	8014a7e <SDMMC_CmdAppCommand+0x126>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80149fc:	0359      	lsls	r1, r3, #13
 80149fe:	d43b      	bmi.n	8014a78 <SDMMC_CmdAppCommand+0x120>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8014a00:	039a      	lsls	r2, r3, #14
 8014a02:	d436      	bmi.n	8014a72 <SDMMC_CmdAppCommand+0x11a>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8014a04:	03d9      	lsls	r1, r3, #15
 8014a06:	d446      	bmi.n	8014a96 <SDMMC_CmdAppCommand+0x13e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8014a08:	041a      	lsls	r2, r3, #16
 8014a0a:	d441      	bmi.n	8014a90 <SDMMC_CmdAppCommand+0x138>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8014a0c:	0459      	lsls	r1, r3, #17
 8014a0e:	d43c      	bmi.n	8014a8a <SDMMC_CmdAppCommand+0x132>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8014a10:	049a      	lsls	r2, r3, #18
 8014a12:	d40b      	bmi.n	8014a2c <SDMMC_CmdAppCommand+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014a14:	f013 0f08 	tst.w	r3, #8
 8014a18:	bf14      	ite	ne
 8014a1a:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8014a1e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8014a22:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014a24:	2301      	movs	r3, #1
 8014a26:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014a2a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8014a2c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 8014a30:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014a32:	2001      	movs	r0, #1
 8014a34:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014a36:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014a38:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014a3a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014a3e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8014a40:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8014a44:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8014a46:	2040      	movs	r0, #64	; 0x40
 8014a48:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8014a4a:	2080      	movs	r0, #128	; 0x80
 8014a4c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8014a4e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014a52:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8014a54:	f44f 7000 	mov.w	r0, #512	; 0x200
 8014a58:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8014a5a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014a5e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8014a60:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8014a64:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014a66:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8014a6a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014a6c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8014a70:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8014a72:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8014a76:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8014a78:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8014a7c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8014a7e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8014a82:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8014a84:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8014a88:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8014a8a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8014a8e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8014a90:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8014a94:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8014a96:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8014a9a:	4770      	bx	lr
 8014a9c:	20007634 	.word	0x20007634
 8014aa0:	10624dd3 	.word	0x10624dd3
 8014aa4:	fffee0c0 	.word	0xfffee0c0
 8014aa8:	00200045 	.word	0x00200045
 8014aac:	002000c5 	.word	0x002000c5
 8014ab0:	fdffe008 	.word	0xfdffe008

08014ab4 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014ab4:	4a19      	ldr	r2, [pc, #100]	; (8014b1c <SDMMC_CmdAppOperCommand+0x68>)
{
 8014ab6:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014ab8:	4b19      	ldr	r3, [pc, #100]	; (8014b20 <SDMMC_CmdAppOperCommand+0x6c>)
 8014aba:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8014abc:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014ac0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014ac4:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8014ac8:	4816      	ldr	r0, [pc, #88]	; (8014b24 <SDMMC_CmdAppOperCommand+0x70>)
 8014aca:	f241 1329 	movw	r3, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014ace:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014ad0:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014ad2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014ad6:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014ad8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014adc:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8014ae0:	1e53      	subs	r3, r2, #1
 8014ae2:	b14a      	cbz	r2, 8014af8 <SDMMC_CmdAppOperCommand+0x44>
    sta_reg = SDMMCx->STA;
 8014ae4:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 8014ae8:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014aea:	f012 0f45 	tst.w	r2, #69	; 0x45
 8014aee:	d001      	beq.n	8014af4 <SDMMC_CmdAppOperCommand+0x40>
 8014af0:	0492      	lsls	r2, r2, #18
 8014af2:	d504      	bpl.n	8014afe <SDMMC_CmdAppOperCommand+0x4a>
    if (count-- == 0U)
 8014af4:	1c59      	adds	r1, r3, #1
 8014af6:	d1f5      	bne.n	8014ae4 <SDMMC_CmdAppOperCommand+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8014af8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8014afc:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014afe:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 8014b02:	f010 0004 	ands.w	r0, r0, #4
 8014b06:	d103      	bne.n	8014b10 <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014b08:	4b07      	ldr	r3, [pc, #28]	; (8014b28 <SDMMC_CmdAppOperCommand+0x74>)
 8014b0a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8014b0e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014b10:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014b12:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014b14:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014b18:	4770      	bx	lr
 8014b1a:	bf00      	nop
 8014b1c:	20007634 	.word	0x20007634
 8014b20:	10624dd3 	.word	0x10624dd3
 8014b24:	fffee0c0 	.word	0xfffee0c0
 8014b28:	002000c5 	.word	0x002000c5

08014b2c <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014b2c:	4a50      	ldr	r2, [pc, #320]	; (8014c70 <SDMMC_CmdBusWidth+0x144>)
{
 8014b2e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014b30:	4b50      	ldr	r3, [pc, #320]	; (8014c74 <SDMMC_CmdBusWidth+0x148>)
 8014b32:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8014b34:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014b38:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014b3c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8014b40:	484d      	ldr	r0, [pc, #308]	; (8014c78 <SDMMC_CmdBusWidth+0x14c>)
 8014b42:	f241 1306 	movw	r3, #4358	; 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014b46:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014b48:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014b4a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014b4e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014b50:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014b54:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8014b58:	1e53      	subs	r3, r2, #1
 8014b5a:	b14a      	cbz	r2, 8014b70 <SDMMC_CmdBusWidth+0x44>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8014b5c:	4947      	ldr	r1, [pc, #284]	; (8014c7c <SDMMC_CmdBusWidth+0x150>)
    sta_reg = SDMMCx->STA;
 8014b5e:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 8014b62:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8014b64:	420a      	tst	r2, r1
 8014b66:	d001      	beq.n	8014b6c <SDMMC_CmdBusWidth+0x40>
 8014b68:	0492      	lsls	r2, r2, #18
 8014b6a:	d504      	bpl.n	8014b76 <SDMMC_CmdBusWidth+0x4a>
    if (count-- == 0U)
 8014b6c:	1c58      	adds	r0, r3, #1
 8014b6e:	d1f6      	bne.n	8014b5e <SDMMC_CmdBusWidth+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8014b70:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8014b74:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014b76:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 8014b7a:	0758      	lsls	r0, r3, #29
 8014b7c:	d445      	bmi.n	8014c0a <SDMMC_CmdBusWidth+0xde>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014b7e:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 8014b82:	f010 0001 	ands.w	r0, r0, #1
 8014b86:	d137      	bne.n	8014bf8 <SDMMC_CmdBusWidth+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014b88:	4b3d      	ldr	r3, [pc, #244]	; (8014c80 <SDMMC_CmdBusWidth+0x154>)
 8014b8a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8014b8e:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8014b92:	b2db      	uxtb	r3, r3
 8014b94:	2b06      	cmp	r3, #6
 8014b96:	d136      	bne.n	8014c06 <SDMMC_CmdBusWidth+0xda>
  return (*(__IO uint32_t *) tmp);
 8014b98:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8014b9c:	4839      	ldr	r0, [pc, #228]	; (8014c84 <SDMMC_CmdBusWidth+0x158>)
 8014b9e:	4018      	ands	r0, r3
 8014ba0:	2800      	cmp	r0, #0
 8014ba2:	d02f      	beq.n	8014c04 <SDMMC_CmdBusWidth+0xd8>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	db35      	blt.n	8014c14 <SDMMC_CmdBusWidth+0xe8>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8014ba8:	0059      	lsls	r1, r3, #1
 8014baa:	d436      	bmi.n	8014c1a <SDMMC_CmdBusWidth+0xee>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8014bac:	009a      	lsls	r2, r3, #2
 8014bae:	d436      	bmi.n	8014c1e <SDMMC_CmdBusWidth+0xf2>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8014bb0:	00d9      	lsls	r1, r3, #3
 8014bb2:	d436      	bmi.n	8014c22 <SDMMC_CmdBusWidth+0xf6>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8014bb4:	011a      	lsls	r2, r3, #4
 8014bb6:	d437      	bmi.n	8014c28 <SDMMC_CmdBusWidth+0xfc>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8014bb8:	0159      	lsls	r1, r3, #5
 8014bba:	d438      	bmi.n	8014c2e <SDMMC_CmdBusWidth+0x102>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8014bbc:	01da      	lsls	r2, r3, #7
 8014bbe:	d439      	bmi.n	8014c34 <SDMMC_CmdBusWidth+0x108>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8014bc0:	0219      	lsls	r1, r3, #8
 8014bc2:	d43a      	bmi.n	8014c3a <SDMMC_CmdBusWidth+0x10e>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8014bc4:	025a      	lsls	r2, r3, #9
 8014bc6:	d43b      	bmi.n	8014c40 <SDMMC_CmdBusWidth+0x114>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8014bc8:	0299      	lsls	r1, r3, #10
 8014bca:	d445      	bmi.n	8014c58 <SDMMC_CmdBusWidth+0x12c>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8014bcc:	02da      	lsls	r2, r3, #11
 8014bce:	d440      	bmi.n	8014c52 <SDMMC_CmdBusWidth+0x126>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8014bd0:	0359      	lsls	r1, r3, #13
 8014bd2:	d43b      	bmi.n	8014c4c <SDMMC_CmdBusWidth+0x120>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8014bd4:	039a      	lsls	r2, r3, #14
 8014bd6:	d436      	bmi.n	8014c46 <SDMMC_CmdBusWidth+0x11a>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8014bd8:	03d9      	lsls	r1, r3, #15
 8014bda:	d446      	bmi.n	8014c6a <SDMMC_CmdBusWidth+0x13e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8014bdc:	041a      	lsls	r2, r3, #16
 8014bde:	d441      	bmi.n	8014c64 <SDMMC_CmdBusWidth+0x138>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8014be0:	0459      	lsls	r1, r3, #17
 8014be2:	d43c      	bmi.n	8014c5e <SDMMC_CmdBusWidth+0x132>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8014be4:	049a      	lsls	r2, r3, #18
 8014be6:	d40b      	bmi.n	8014c00 <SDMMC_CmdBusWidth+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014be8:	f013 0f08 	tst.w	r3, #8
 8014bec:	bf14      	ite	ne
 8014bee:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8014bf2:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8014bf6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014bf8:	2301      	movs	r3, #1
 8014bfa:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014bfe:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8014c00:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 8014c04:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014c06:	2001      	movs	r0, #1
 8014c08:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014c0a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014c0c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014c0e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014c12:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8014c14:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8014c18:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8014c1a:	2040      	movs	r0, #64	; 0x40
 8014c1c:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8014c1e:	2080      	movs	r0, #128	; 0x80
 8014c20:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8014c22:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014c26:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8014c28:	f44f 7000 	mov.w	r0, #512	; 0x200
 8014c2c:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8014c2e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014c32:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8014c34:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8014c38:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014c3a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8014c3e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014c40:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8014c44:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8014c46:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8014c4a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8014c4c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8014c50:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8014c52:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8014c56:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8014c58:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8014c5c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8014c5e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8014c62:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8014c64:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8014c68:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8014c6a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8014c6e:	4770      	bx	lr
 8014c70:	20007634 	.word	0x20007634
 8014c74:	10624dd3 	.word	0x10624dd3
 8014c78:	fffee0c0 	.word	0xfffee0c0
 8014c7c:	00200045 	.word	0x00200045
 8014c80:	002000c5 	.word	0x002000c5
 8014c84:	fdffe008 	.word	0xfdffe008

08014c88 <SDMMC_CmdSendSCR>:
{
 8014c88:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014c8a:	4a4d      	ldr	r2, [pc, #308]	; (8014dc0 <SDMMC_CmdSendSCR+0x138>)
 8014c8c:	4b4d      	ldr	r3, [pc, #308]	; (8014dc4 <SDMMC_CmdSendSCR+0x13c>)
 8014c8e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014c90:	484d      	ldr	r0, [pc, #308]	; (8014dc8 <SDMMC_CmdSendSCR+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014c92:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014c96:	f241 1333 	movw	r3, #4403	; 0x1133
{
 8014c9a:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8014c9c:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014c9e:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 8014ca0:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014ca2:	68cc      	ldr	r4, [r1, #12]
 8014ca4:	4020      	ands	r0, r4
 8014ca6:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014ca8:	f241 3088 	movw	r0, #5000	; 0x1388
 8014cac:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014cb0:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 8014cb2:	b14a      	cbz	r2, 8014cc8 <SDMMC_CmdSendSCR+0x40>
 8014cb4:	1e53      	subs	r3, r2, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8014cb6:	4845      	ldr	r0, [pc, #276]	; (8014dcc <SDMMC_CmdSendSCR+0x144>)
    sta_reg = SDMMCx->STA;
 8014cb8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 8014cba:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8014cbc:	4202      	tst	r2, r0
 8014cbe:	d001      	beq.n	8014cc4 <SDMMC_CmdSendSCR+0x3c>
 8014cc0:	0494      	lsls	r4, r2, #18
 8014cc2:	d506      	bpl.n	8014cd2 <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
 8014cc4:	1c5a      	adds	r2, r3, #1
 8014cc6:	d1f7      	bne.n	8014cb8 <SDMMC_CmdSendSCR+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8014cc8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8014ccc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014cd0:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014cd2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8014cd4:	0758      	lsls	r0, r3, #29
 8014cd6:	d43d      	bmi.n	8014d54 <SDMMC_CmdSendSCR+0xcc>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014cd8:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8014cda:	f010 0001 	ands.w	r0, r0, #1
 8014cde:	d134      	bne.n	8014d4a <SDMMC_CmdSendSCR+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014ce0:	4b3b      	ldr	r3, [pc, #236]	; (8014dd0 <SDMMC_CmdSendSCR+0x148>)
 8014ce2:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8014ce4:	690b      	ldr	r3, [r1, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8014ce6:	b2db      	uxtb	r3, r3
 8014ce8:	2b33      	cmp	r3, #51	; 0x33
 8014cea:	d131      	bne.n	8014d50 <SDMMC_CmdSendSCR+0xc8>
  return (*(__IO uint32_t *) tmp);
 8014cec:	694b      	ldr	r3, [r1, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8014cee:	4839      	ldr	r0, [pc, #228]	; (8014dd4 <SDMMC_CmdSendSCR+0x14c>)
 8014cf0:	4018      	ands	r0, r3
 8014cf2:	2800      	cmp	r0, #0
 8014cf4:	d0ea      	beq.n	8014ccc <SDMMC_CmdSendSCR+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	db30      	blt.n	8014d5c <SDMMC_CmdSendSCR+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8014cfa:	005a      	lsls	r2, r3, #1
 8014cfc:	d431      	bmi.n	8014d62 <SDMMC_CmdSendSCR+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8014cfe:	009c      	lsls	r4, r3, #2
 8014d00:	d431      	bmi.n	8014d66 <SDMMC_CmdSendSCR+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8014d02:	00d9      	lsls	r1, r3, #3
 8014d04:	d431      	bmi.n	8014d6a <SDMMC_CmdSendSCR+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8014d06:	011a      	lsls	r2, r3, #4
 8014d08:	d432      	bmi.n	8014d70 <SDMMC_CmdSendSCR+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8014d0a:	015c      	lsls	r4, r3, #5
 8014d0c:	d433      	bmi.n	8014d76 <SDMMC_CmdSendSCR+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8014d0e:	01d9      	lsls	r1, r3, #7
 8014d10:	d434      	bmi.n	8014d7c <SDMMC_CmdSendSCR+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8014d12:	021a      	lsls	r2, r3, #8
 8014d14:	d435      	bmi.n	8014d82 <SDMMC_CmdSendSCR+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8014d16:	025c      	lsls	r4, r3, #9
 8014d18:	d436      	bmi.n	8014d88 <SDMMC_CmdSendSCR+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8014d1a:	0299      	lsls	r1, r3, #10
 8014d1c:	d440      	bmi.n	8014da0 <SDMMC_CmdSendSCR+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8014d1e:	02da      	lsls	r2, r3, #11
 8014d20:	d43b      	bmi.n	8014d9a <SDMMC_CmdSendSCR+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8014d22:	035c      	lsls	r4, r3, #13
 8014d24:	d436      	bmi.n	8014d94 <SDMMC_CmdSendSCR+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8014d26:	0399      	lsls	r1, r3, #14
 8014d28:	d431      	bmi.n	8014d8e <SDMMC_CmdSendSCR+0x106>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8014d2a:	03da      	lsls	r2, r3, #15
 8014d2c:	d444      	bmi.n	8014db8 <SDMMC_CmdSendSCR+0x130>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8014d2e:	041c      	lsls	r4, r3, #16
 8014d30:	d43f      	bmi.n	8014db2 <SDMMC_CmdSendSCR+0x12a>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8014d32:	0459      	lsls	r1, r3, #17
 8014d34:	d43a      	bmi.n	8014dac <SDMMC_CmdSendSCR+0x124>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8014d36:	049a      	lsls	r2, r3, #18
 8014d38:	d435      	bmi.n	8014da6 <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014d3a:	f013 0f08 	tst.w	r3, #8
 8014d3e:	bf14      	ite	ne
 8014d40:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8014d44:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8014d48:	e7c0      	b.n	8014ccc <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014d4a:	2301      	movs	r3, #1
 8014d4c:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014d4e:	e7bd      	b.n	8014ccc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014d50:	2001      	movs	r0, #1
 8014d52:	e7bb      	b.n	8014ccc <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014d54:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014d56:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014d58:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014d5a:	e7b7      	b.n	8014ccc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8014d5c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8014d60:	e7b4      	b.n	8014ccc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8014d62:	2040      	movs	r0, #64	; 0x40
 8014d64:	e7b2      	b.n	8014ccc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8014d66:	2080      	movs	r0, #128	; 0x80
 8014d68:	e7b0      	b.n	8014ccc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8014d6a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014d6e:	e7ad      	b.n	8014ccc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8014d70:	f44f 7000 	mov.w	r0, #512	; 0x200
 8014d74:	e7aa      	b.n	8014ccc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8014d76:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014d7a:	e7a7      	b.n	8014ccc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8014d7c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8014d80:	e7a4      	b.n	8014ccc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014d82:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8014d86:	e7a1      	b.n	8014ccc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014d88:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8014d8c:	e79e      	b.n	8014ccc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8014d8e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8014d92:	e79b      	b.n	8014ccc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8014d94:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8014d98:	e798      	b.n	8014ccc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CC_ERR;
 8014d9a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8014d9e:	e795      	b.n	8014ccc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8014da0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8014da4:	e792      	b.n	8014ccc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 8014da6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8014daa:	e78f      	b.n	8014ccc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8014dac:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8014db0:	e78c      	b.n	8014ccc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8014db2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8014db6:	e789      	b.n	8014ccc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8014db8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8014dbc:	e786      	b.n	8014ccc <SDMMC_CmdSendSCR+0x44>
 8014dbe:	bf00      	nop
 8014dc0:	20007634 	.word	0x20007634
 8014dc4:	10624dd3 	.word	0x10624dd3
 8014dc8:	fffee0c0 	.word	0xfffee0c0
 8014dcc:	00200045 	.word	0x00200045
 8014dd0:	002000c5 	.word	0x002000c5
 8014dd4:	fdffe008 	.word	0xfdffe008

08014dd8 <SDMMC_CmdSendCID>:
{
 8014dd8:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014dda:	4a1a      	ldr	r2, [pc, #104]	; (8014e44 <SDMMC_CmdSendCID+0x6c>)
 8014ddc:	4b1a      	ldr	r3, [pc, #104]	; (8014e48 <SDMMC_CmdSendCID+0x70>)
 8014dde:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014de0:	481a      	ldr	r0, [pc, #104]	; (8014e4c <SDMMC_CmdSendCID+0x74>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014de2:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014de6:	f241 3302 	movw	r3, #4866	; 0x1302
{
 8014dea:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8014dec:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014dee:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 8014df0:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014df2:	68cc      	ldr	r4, [r1, #12]
 8014df4:	4020      	ands	r0, r4
 8014df6:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014df8:	f241 3088 	movw	r0, #5000	; 0x1388
 8014dfc:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014e00:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 8014e02:	b14a      	cbz	r2, 8014e18 <SDMMC_CmdSendCID+0x40>
 8014e04:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 8014e06:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 8014e08:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014e0a:	f012 0f45 	tst.w	r2, #69	; 0x45
 8014e0e:	d001      	beq.n	8014e14 <SDMMC_CmdSendCID+0x3c>
 8014e10:	0492      	lsls	r2, r2, #18
 8014e12:	d506      	bpl.n	8014e22 <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
 8014e14:	1c58      	adds	r0, r3, #1
 8014e16:	d1f6      	bne.n	8014e06 <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8014e18:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8014e1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e20:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014e22:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8014e24:	075b      	lsls	r3, r3, #29
 8014e26:	d409      	bmi.n	8014e3c <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014e28:	6b48      	ldr	r0, [r1, #52]	; 0x34
}
 8014e2a:	f85d 4b04 	ldr.w	r4, [sp], #4
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014e2e:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014e32:	bf14      	ite	ne
 8014e34:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014e36:	4b06      	ldreq	r3, [pc, #24]	; (8014e50 <SDMMC_CmdSendCID+0x78>)
 8014e38:	638b      	str	r3, [r1, #56]	; 0x38
}
 8014e3a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014e3c:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014e3e:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014e40:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014e42:	e7eb      	b.n	8014e1c <SDMMC_CmdSendCID+0x44>
 8014e44:	20007634 	.word	0x20007634
 8014e48:	10624dd3 	.word	0x10624dd3
 8014e4c:	fffee0c0 	.word	0xfffee0c0
 8014e50:	002000c5 	.word	0x002000c5

08014e54 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014e54:	4a1b      	ldr	r2, [pc, #108]	; (8014ec4 <SDMMC_CmdSendCSD+0x70>)
{
 8014e56:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014e58:	4b1b      	ldr	r3, [pc, #108]	; (8014ec8 <SDMMC_CmdSendCSD+0x74>)
 8014e5a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8014e5c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014e60:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014e64:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8014e68:	4818      	ldr	r0, [pc, #96]	; (8014ecc <SDMMC_CmdSendCSD+0x78>)
 8014e6a:	f241 3309 	movw	r3, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014e6e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014e70:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014e72:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014e76:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014e78:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014e7c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8014e80:	1e53      	subs	r3, r2, #1
 8014e82:	b14a      	cbz	r2, 8014e98 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
 8014e84:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 8014e88:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014e8a:	f012 0f45 	tst.w	r2, #69	; 0x45
 8014e8e:	d001      	beq.n	8014e94 <SDMMC_CmdSendCSD+0x40>
 8014e90:	0492      	lsls	r2, r2, #18
 8014e92:	d504      	bpl.n	8014e9e <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
 8014e94:	1c59      	adds	r1, r3, #1
 8014e96:	d1f5      	bne.n	8014e84 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8014e98:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8014e9c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014e9e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 8014ea2:	075b      	lsls	r3, r3, #29
 8014ea4:	d409      	bmi.n	8014eba <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014ea6:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 8014eaa:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014eae:	bf14      	ite	ne
 8014eb0:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014eb2:	4b07      	ldreq	r3, [pc, #28]	; (8014ed0 <SDMMC_CmdSendCSD+0x7c>)
 8014eb4:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8014eb8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014eba:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014ebc:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014ebe:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014ec2:	4770      	bx	lr
 8014ec4:	20007634 	.word	0x20007634
 8014ec8:	10624dd3 	.word	0x10624dd3
 8014ecc:	fffee0c0 	.word	0xfffee0c0
 8014ed0:	002000c5 	.word	0x002000c5

08014ed4 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 8014ed4:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014ed6:	4a2b      	ldr	r2, [pc, #172]	; (8014f84 <SDMMC_CmdSetRelAdd+0xb0>)
{
 8014ed8:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014eda:	6812      	ldr	r2, [r2, #0]
{
 8014edc:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8014ede:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014ee0:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014ee2:	4829      	ldr	r0, [pc, #164]	; (8014f88 <SDMMC_CmdSetRelAdd+0xb4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014ee4:	4c29      	ldr	r4, [pc, #164]	; (8014f8c <SDMMC_CmdSetRelAdd+0xb8>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014ee6:	fba0 0202 	umull	r0, r2, r0, r2
 8014eea:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014eee:	401c      	ands	r4, r3
 8014ef0:	f241 1303 	movw	r3, #4355	; 0x1103
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014ef4:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014ef6:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014ef8:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014efc:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8014f00:	b152      	cbz	r2, 8014f18 <SDMMC_CmdSetRelAdd+0x44>
 8014f02:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 8014f04:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 8014f08:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014f0a:	f012 0f45 	tst.w	r2, #69	; 0x45
 8014f0e:	d001      	beq.n	8014f14 <SDMMC_CmdSetRelAdd+0x40>
 8014f10:	0494      	lsls	r4, r2, #18
 8014f12:	d506      	bpl.n	8014f22 <SDMMC_CmdSetRelAdd+0x4e>
    if (count-- == 0U)
 8014f14:	1c5a      	adds	r2, r3, #1
 8014f16:	d1f5      	bne.n	8014f04 <SDMMC_CmdSetRelAdd+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8014f18:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8014f1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f20:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014f22:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 8014f26:	0758      	lsls	r0, r3, #29
 8014f28:	d421      	bmi.n	8014f6e <SDMMC_CmdSetRelAdd+0x9a>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014f2a:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 8014f2e:	f010 0001 	ands.w	r0, r0, #1
 8014f32:	d116      	bne.n	8014f62 <SDMMC_CmdSetRelAdd+0x8e>
  return (uint8_t)(SDMMCx->RESPCMD);
 8014f34:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8014f38:	b2db      	uxtb	r3, r3
 8014f3a:	2b03      	cmp	r3, #3
 8014f3c:	d115      	bne.n	8014f6a <SDMMC_CmdSetRelAdd+0x96>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014f3e:	4b14      	ldr	r3, [pc, #80]	; (8014f90 <SDMMC_CmdSetRelAdd+0xbc>)
 8014f40:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8014f44:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8014f48:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8014f4c:	d017      	beq.n	8014f7e <SDMMC_CmdSetRelAdd+0xaa>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8014f4e:	045a      	lsls	r2, r3, #17
 8014f50:	d412      	bmi.n	8014f78 <SDMMC_CmdSetRelAdd+0xa4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014f52:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8014f56:	bf14      	ite	ne
 8014f58:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8014f5c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8014f60:	e7dc      	b.n	8014f1c <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014f62:	2301      	movs	r3, #1
 8014f64:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014f68:	e7d8      	b.n	8014f1c <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014f6a:	2001      	movs	r0, #1
 8014f6c:	e7d6      	b.n	8014f1c <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014f6e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014f70:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014f72:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014f76:	e7d1      	b.n	8014f1c <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014f78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8014f7c:	e7ce      	b.n	8014f1c <SDMMC_CmdSetRelAdd+0x48>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8014f7e:	0c1b      	lsrs	r3, r3, #16
 8014f80:	800b      	strh	r3, [r1, #0]
    return SDMMC_ERROR_NONE;
 8014f82:	e7cb      	b.n	8014f1c <SDMMC_CmdSetRelAdd+0x48>
 8014f84:	20007634 	.word	0x20007634
 8014f88:	10624dd3 	.word	0x10624dd3
 8014f8c:	fffee0c0 	.word	0xfffee0c0
 8014f90:	002000c5 	.word	0x002000c5

08014f94 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014f94:	4a50      	ldr	r2, [pc, #320]	; (80150d8 <SDMMC_CmdSendStatus+0x144>)
{
 8014f96:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014f98:	4b50      	ldr	r3, [pc, #320]	; (80150dc <SDMMC_CmdSendStatus+0x148>)
 8014f9a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8014f9c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014fa0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014fa4:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8014fa8:	484d      	ldr	r0, [pc, #308]	; (80150e0 <SDMMC_CmdSendStatus+0x14c>)
 8014faa:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014fae:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014fb0:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014fb2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014fb6:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014fb8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014fbc:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8014fc0:	1e53      	subs	r3, r2, #1
 8014fc2:	b14a      	cbz	r2, 8014fd8 <SDMMC_CmdSendStatus+0x44>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8014fc4:	4947      	ldr	r1, [pc, #284]	; (80150e4 <SDMMC_CmdSendStatus+0x150>)
    sta_reg = SDMMCx->STA;
 8014fc6:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 8014fca:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8014fcc:	420a      	tst	r2, r1
 8014fce:	d001      	beq.n	8014fd4 <SDMMC_CmdSendStatus+0x40>
 8014fd0:	0492      	lsls	r2, r2, #18
 8014fd2:	d504      	bpl.n	8014fde <SDMMC_CmdSendStatus+0x4a>
    if (count-- == 0U)
 8014fd4:	1c58      	adds	r0, r3, #1
 8014fd6:	d1f6      	bne.n	8014fc6 <SDMMC_CmdSendStatus+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8014fd8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8014fdc:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014fde:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 8014fe2:	0758      	lsls	r0, r3, #29
 8014fe4:	d445      	bmi.n	8015072 <SDMMC_CmdSendStatus+0xde>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014fe6:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 8014fea:	f010 0001 	ands.w	r0, r0, #1
 8014fee:	d137      	bne.n	8015060 <SDMMC_CmdSendStatus+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014ff0:	4b3d      	ldr	r3, [pc, #244]	; (80150e8 <SDMMC_CmdSendStatus+0x154>)
 8014ff2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8014ff6:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8014ffa:	b2db      	uxtb	r3, r3
 8014ffc:	2b0d      	cmp	r3, #13
 8014ffe:	d136      	bne.n	801506e <SDMMC_CmdSendStatus+0xda>
  return (*(__IO uint32_t *) tmp);
 8015000:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8015004:	4839      	ldr	r0, [pc, #228]	; (80150ec <SDMMC_CmdSendStatus+0x158>)
 8015006:	4018      	ands	r0, r3
 8015008:	2800      	cmp	r0, #0
 801500a:	d02f      	beq.n	801506c <SDMMC_CmdSendStatus+0xd8>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801500c:	2b00      	cmp	r3, #0
 801500e:	db35      	blt.n	801507c <SDMMC_CmdSendStatus+0xe8>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8015010:	0059      	lsls	r1, r3, #1
 8015012:	d436      	bmi.n	8015082 <SDMMC_CmdSendStatus+0xee>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8015014:	009a      	lsls	r2, r3, #2
 8015016:	d436      	bmi.n	8015086 <SDMMC_CmdSendStatus+0xf2>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8015018:	00d9      	lsls	r1, r3, #3
 801501a:	d436      	bmi.n	801508a <SDMMC_CmdSendStatus+0xf6>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801501c:	011a      	lsls	r2, r3, #4
 801501e:	d437      	bmi.n	8015090 <SDMMC_CmdSendStatus+0xfc>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8015020:	0159      	lsls	r1, r3, #5
 8015022:	d438      	bmi.n	8015096 <SDMMC_CmdSendStatus+0x102>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8015024:	01da      	lsls	r2, r3, #7
 8015026:	d439      	bmi.n	801509c <SDMMC_CmdSendStatus+0x108>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8015028:	0219      	lsls	r1, r3, #8
 801502a:	d43a      	bmi.n	80150a2 <SDMMC_CmdSendStatus+0x10e>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801502c:	025a      	lsls	r2, r3, #9
 801502e:	d43b      	bmi.n	80150a8 <SDMMC_CmdSendStatus+0x114>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8015030:	0299      	lsls	r1, r3, #10
 8015032:	d445      	bmi.n	80150c0 <SDMMC_CmdSendStatus+0x12c>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8015034:	02da      	lsls	r2, r3, #11
 8015036:	d440      	bmi.n	80150ba <SDMMC_CmdSendStatus+0x126>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8015038:	0359      	lsls	r1, r3, #13
 801503a:	d43b      	bmi.n	80150b4 <SDMMC_CmdSendStatus+0x120>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801503c:	039a      	lsls	r2, r3, #14
 801503e:	d436      	bmi.n	80150ae <SDMMC_CmdSendStatus+0x11a>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8015040:	03d9      	lsls	r1, r3, #15
 8015042:	d446      	bmi.n	80150d2 <SDMMC_CmdSendStatus+0x13e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8015044:	041a      	lsls	r2, r3, #16
 8015046:	d441      	bmi.n	80150cc <SDMMC_CmdSendStatus+0x138>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8015048:	0459      	lsls	r1, r3, #17
 801504a:	d43c      	bmi.n	80150c6 <SDMMC_CmdSendStatus+0x132>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801504c:	049a      	lsls	r2, r3, #18
 801504e:	d40b      	bmi.n	8015068 <SDMMC_CmdSendStatus+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8015050:	f013 0f08 	tst.w	r3, #8
 8015054:	bf14      	ite	ne
 8015056:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 801505a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 801505e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8015060:	2301      	movs	r3, #1
 8015062:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8015066:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8015068:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 801506c:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801506e:	2001      	movs	r0, #1
 8015070:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8015072:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8015074:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8015076:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801507a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801507c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8015080:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8015082:	2040      	movs	r0, #64	; 0x40
 8015084:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8015086:	2080      	movs	r0, #128	; 0x80
 8015088:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801508a:	f44f 7080 	mov.w	r0, #256	; 0x100
 801508e:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8015090:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015094:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8015096:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801509a:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801509c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80150a0:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 80150a2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80150a6:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 80150a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80150ac:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80150ae:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80150b2:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80150b4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80150b8:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 80150ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80150be:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80150c0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80150c4:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80150c6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80150ca:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80150cc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80150d0:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80150d2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80150d6:	4770      	bx	lr
 80150d8:	20007634 	.word	0x20007634
 80150dc:	10624dd3 	.word	0x10624dd3
 80150e0:	fffee0c0 	.word	0xfffee0c0
 80150e4:	00200045 	.word	0x00200045
 80150e8:	002000c5 	.word	0x002000c5
 80150ec:	fdffe008 	.word	0xfdffe008

080150f0 <SDMMC_CmdStatusRegister>:
{
 80150f0:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80150f2:	4a4d      	ldr	r2, [pc, #308]	; (8015228 <SDMMC_CmdStatusRegister+0x138>)
 80150f4:	4b4d      	ldr	r3, [pc, #308]	; (801522c <SDMMC_CmdStatusRegister+0x13c>)
 80150f6:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80150f8:	484d      	ldr	r0, [pc, #308]	; (8015230 <SDMMC_CmdStatusRegister+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80150fa:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80150fe:	f241 130d 	movw	r3, #4365	; 0x110d
{
 8015102:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8015104:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8015106:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 8015108:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801510a:	68cc      	ldr	r4, [r1, #12]
 801510c:	4020      	ands	r0, r4
 801510e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8015110:	f241 3088 	movw	r0, #5000	; 0x1388
 8015114:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8015118:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 801511a:	b14a      	cbz	r2, 8015130 <SDMMC_CmdStatusRegister+0x40>
 801511c:	1e53      	subs	r3, r2, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801511e:	4845      	ldr	r0, [pc, #276]	; (8015234 <SDMMC_CmdStatusRegister+0x144>)
    sta_reg = SDMMCx->STA;
 8015120:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 8015122:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8015124:	4202      	tst	r2, r0
 8015126:	d001      	beq.n	801512c <SDMMC_CmdStatusRegister+0x3c>
 8015128:	0494      	lsls	r4, r2, #18
 801512a:	d506      	bpl.n	801513a <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
 801512c:	1c5a      	adds	r2, r3, #1
 801512e:	d1f7      	bne.n	8015120 <SDMMC_CmdStatusRegister+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8015130:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8015134:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015138:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801513a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801513c:	0758      	lsls	r0, r3, #29
 801513e:	d43d      	bmi.n	80151bc <SDMMC_CmdStatusRegister+0xcc>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8015140:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8015142:	f010 0001 	ands.w	r0, r0, #1
 8015146:	d134      	bne.n	80151b2 <SDMMC_CmdStatusRegister+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8015148:	4b3b      	ldr	r3, [pc, #236]	; (8015238 <SDMMC_CmdStatusRegister+0x148>)
 801514a:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 801514c:	690b      	ldr	r3, [r1, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801514e:	b2db      	uxtb	r3, r3
 8015150:	2b0d      	cmp	r3, #13
 8015152:	d131      	bne.n	80151b8 <SDMMC_CmdStatusRegister+0xc8>
  return (*(__IO uint32_t *) tmp);
 8015154:	694b      	ldr	r3, [r1, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8015156:	4839      	ldr	r0, [pc, #228]	; (801523c <SDMMC_CmdStatusRegister+0x14c>)
 8015158:	4018      	ands	r0, r3
 801515a:	2800      	cmp	r0, #0
 801515c:	d0ea      	beq.n	8015134 <SDMMC_CmdStatusRegister+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801515e:	2b00      	cmp	r3, #0
 8015160:	db30      	blt.n	80151c4 <SDMMC_CmdStatusRegister+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8015162:	005a      	lsls	r2, r3, #1
 8015164:	d431      	bmi.n	80151ca <SDMMC_CmdStatusRegister+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8015166:	009c      	lsls	r4, r3, #2
 8015168:	d431      	bmi.n	80151ce <SDMMC_CmdStatusRegister+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801516a:	00d9      	lsls	r1, r3, #3
 801516c:	d431      	bmi.n	80151d2 <SDMMC_CmdStatusRegister+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801516e:	011a      	lsls	r2, r3, #4
 8015170:	d432      	bmi.n	80151d8 <SDMMC_CmdStatusRegister+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8015172:	015c      	lsls	r4, r3, #5
 8015174:	d433      	bmi.n	80151de <SDMMC_CmdStatusRegister+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8015176:	01d9      	lsls	r1, r3, #7
 8015178:	d434      	bmi.n	80151e4 <SDMMC_CmdStatusRegister+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801517a:	021a      	lsls	r2, r3, #8
 801517c:	d435      	bmi.n	80151ea <SDMMC_CmdStatusRegister+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801517e:	025c      	lsls	r4, r3, #9
 8015180:	d436      	bmi.n	80151f0 <SDMMC_CmdStatusRegister+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8015182:	0299      	lsls	r1, r3, #10
 8015184:	d440      	bmi.n	8015208 <SDMMC_CmdStatusRegister+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8015186:	02da      	lsls	r2, r3, #11
 8015188:	d43b      	bmi.n	8015202 <SDMMC_CmdStatusRegister+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801518a:	035c      	lsls	r4, r3, #13
 801518c:	d436      	bmi.n	80151fc <SDMMC_CmdStatusRegister+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801518e:	0399      	lsls	r1, r3, #14
 8015190:	d431      	bmi.n	80151f6 <SDMMC_CmdStatusRegister+0x106>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8015192:	03da      	lsls	r2, r3, #15
 8015194:	d444      	bmi.n	8015220 <SDMMC_CmdStatusRegister+0x130>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8015196:	041c      	lsls	r4, r3, #16
 8015198:	d43f      	bmi.n	801521a <SDMMC_CmdStatusRegister+0x12a>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801519a:	0459      	lsls	r1, r3, #17
 801519c:	d43a      	bmi.n	8015214 <SDMMC_CmdStatusRegister+0x124>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801519e:	049a      	lsls	r2, r3, #18
 80151a0:	d435      	bmi.n	801520e <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80151a2:	f013 0f08 	tst.w	r3, #8
 80151a6:	bf14      	ite	ne
 80151a8:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 80151ac:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80151b0:	e7c0      	b.n	8015134 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80151b2:	2301      	movs	r3, #1
 80151b4:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80151b6:	e7bd      	b.n	8015134 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80151b8:	2001      	movs	r0, #1
 80151ba:	e7bb      	b.n	8015134 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80151bc:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80151be:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80151c0:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80151c2:	e7b7      	b.n	8015134 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80151c4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80151c8:	e7b4      	b.n	8015134 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80151ca:	2040      	movs	r0, #64	; 0x40
 80151cc:	e7b2      	b.n	8015134 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80151ce:	2080      	movs	r0, #128	; 0x80
 80151d0:	e7b0      	b.n	8015134 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80151d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80151d6:	e7ad      	b.n	8015134 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80151d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80151dc:	e7aa      	b.n	8015134 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80151de:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80151e2:	e7a7      	b.n	8015134 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80151e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80151e8:	e7a4      	b.n	8015134 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80151ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80151ee:	e7a1      	b.n	8015134 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80151f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80151f4:	e79e      	b.n	8015134 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80151f6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80151fa:	e79b      	b.n	8015134 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80151fc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8015200:	e798      	b.n	8015134 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CC_ERR;
 8015202:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8015206:	e795      	b.n	8015134 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8015208:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801520c:	e792      	b.n	8015134 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 801520e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8015212:	e78f      	b.n	8015134 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8015214:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8015218:	e78c      	b.n	8015134 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801521a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801521e:	e789      	b.n	8015134 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8015220:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8015224:	e786      	b.n	8015134 <SDMMC_CmdStatusRegister+0x44>
 8015226:	bf00      	nop
 8015228:	20007634 	.word	0x20007634
 801522c:	10624dd3 	.word	0x10624dd3
 8015230:	fffee0c0 	.word	0xfffee0c0
 8015234:	00200045 	.word	0x00200045
 8015238:	002000c5 	.word	0x002000c5
 801523c:	fdffe008 	.word	0xfdffe008

08015240 <SDMMC_CmdSwitch>:
 8015240:	4a50      	ldr	r2, [pc, #320]	; (8015384 <SDMMC_CmdSwitch+0x144>)
 8015242:	4684      	mov	ip, r0
 8015244:	4b50      	ldr	r3, [pc, #320]	; (8015388 <SDMMC_CmdSwitch+0x148>)
 8015246:	6812      	ldr	r2, [r2, #0]
 8015248:	f8cc 1008 	str.w	r1, [ip, #8]
 801524c:	fba3 3202 	umull	r3, r2, r3, r2
 8015250:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8015254:	484d      	ldr	r0, [pc, #308]	; (801538c <SDMMC_CmdSwitch+0x14c>)
 8015256:	f241 1306 	movw	r3, #4358	; 0x1106
 801525a:	0a52      	lsrs	r2, r2, #9
 801525c:	4008      	ands	r0, r1
 801525e:	f241 3188 	movw	r1, #5000	; 0x1388
 8015262:	4303      	orrs	r3, r0
 8015264:	fb01 f202 	mul.w	r2, r1, r2
 8015268:	f8cc 300c 	str.w	r3, [ip, #12]
 801526c:	1e53      	subs	r3, r2, #1
 801526e:	b14a      	cbz	r2, 8015284 <SDMMC_CmdSwitch+0x44>
 8015270:	4947      	ldr	r1, [pc, #284]	; (8015390 <SDMMC_CmdSwitch+0x150>)
 8015272:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
 8015276:	3b01      	subs	r3, #1
 8015278:	420a      	tst	r2, r1
 801527a:	d001      	beq.n	8015280 <SDMMC_CmdSwitch+0x40>
 801527c:	0492      	lsls	r2, r2, #18
 801527e:	d504      	bpl.n	801528a <SDMMC_CmdSwitch+0x4a>
 8015280:	1c58      	adds	r0, r3, #1
 8015282:	d1f6      	bne.n	8015272 <SDMMC_CmdSwitch+0x32>
 8015284:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8015288:	4770      	bx	lr
 801528a:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 801528e:	0758      	lsls	r0, r3, #29
 8015290:	d445      	bmi.n	801531e <SDMMC_CmdSwitch+0xde>
 8015292:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 8015296:	f010 0001 	ands.w	r0, r0, #1
 801529a:	d137      	bne.n	801530c <SDMMC_CmdSwitch+0xcc>
 801529c:	4b3d      	ldr	r3, [pc, #244]	; (8015394 <SDMMC_CmdSwitch+0x154>)
 801529e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 80152a2:	f8dc 3010 	ldr.w	r3, [ip, #16]
 80152a6:	b2db      	uxtb	r3, r3
 80152a8:	2b06      	cmp	r3, #6
 80152aa:	d136      	bne.n	801531a <SDMMC_CmdSwitch+0xda>
 80152ac:	f8dc 3014 	ldr.w	r3, [ip, #20]
 80152b0:	4839      	ldr	r0, [pc, #228]	; (8015398 <SDMMC_CmdSwitch+0x158>)
 80152b2:	4018      	ands	r0, r3
 80152b4:	2800      	cmp	r0, #0
 80152b6:	d02f      	beq.n	8015318 <SDMMC_CmdSwitch+0xd8>
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	db35      	blt.n	8015328 <SDMMC_CmdSwitch+0xe8>
 80152bc:	0059      	lsls	r1, r3, #1
 80152be:	d436      	bmi.n	801532e <SDMMC_CmdSwitch+0xee>
 80152c0:	009a      	lsls	r2, r3, #2
 80152c2:	d436      	bmi.n	8015332 <SDMMC_CmdSwitch+0xf2>
 80152c4:	00d9      	lsls	r1, r3, #3
 80152c6:	d436      	bmi.n	8015336 <SDMMC_CmdSwitch+0xf6>
 80152c8:	011a      	lsls	r2, r3, #4
 80152ca:	d437      	bmi.n	801533c <SDMMC_CmdSwitch+0xfc>
 80152cc:	0159      	lsls	r1, r3, #5
 80152ce:	d438      	bmi.n	8015342 <SDMMC_CmdSwitch+0x102>
 80152d0:	01da      	lsls	r2, r3, #7
 80152d2:	d439      	bmi.n	8015348 <SDMMC_CmdSwitch+0x108>
 80152d4:	0219      	lsls	r1, r3, #8
 80152d6:	d43a      	bmi.n	801534e <SDMMC_CmdSwitch+0x10e>
 80152d8:	025a      	lsls	r2, r3, #9
 80152da:	d43b      	bmi.n	8015354 <SDMMC_CmdSwitch+0x114>
 80152dc:	0299      	lsls	r1, r3, #10
 80152de:	d445      	bmi.n	801536c <SDMMC_CmdSwitch+0x12c>
 80152e0:	02da      	lsls	r2, r3, #11
 80152e2:	d440      	bmi.n	8015366 <SDMMC_CmdSwitch+0x126>
 80152e4:	0359      	lsls	r1, r3, #13
 80152e6:	d43b      	bmi.n	8015360 <SDMMC_CmdSwitch+0x120>
 80152e8:	039a      	lsls	r2, r3, #14
 80152ea:	d436      	bmi.n	801535a <SDMMC_CmdSwitch+0x11a>
 80152ec:	03d9      	lsls	r1, r3, #15
 80152ee:	d446      	bmi.n	801537e <SDMMC_CmdSwitch+0x13e>
 80152f0:	041a      	lsls	r2, r3, #16
 80152f2:	d441      	bmi.n	8015378 <SDMMC_CmdSwitch+0x138>
 80152f4:	0459      	lsls	r1, r3, #17
 80152f6:	d43c      	bmi.n	8015372 <SDMMC_CmdSwitch+0x132>
 80152f8:	049a      	lsls	r2, r3, #18
 80152fa:	d40b      	bmi.n	8015314 <SDMMC_CmdSwitch+0xd4>
 80152fc:	f013 0f08 	tst.w	r3, #8
 8015300:	bf14      	ite	ne
 8015302:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8015306:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 801530a:	4770      	bx	lr
 801530c:	2301      	movs	r3, #1
 801530e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 8015312:	4770      	bx	lr
 8015314:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8015318:	4770      	bx	lr
 801531a:	2001      	movs	r0, #1
 801531c:	4770      	bx	lr
 801531e:	2304      	movs	r3, #4
 8015320:	4618      	mov	r0, r3
 8015322:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 8015326:	4770      	bx	lr
 8015328:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 801532c:	4770      	bx	lr
 801532e:	2040      	movs	r0, #64	; 0x40
 8015330:	4770      	bx	lr
 8015332:	2080      	movs	r0, #128	; 0x80
 8015334:	4770      	bx	lr
 8015336:	f44f 7080 	mov.w	r0, #256	; 0x100
 801533a:	4770      	bx	lr
 801533c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015340:	4770      	bx	lr
 8015342:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8015346:	4770      	bx	lr
 8015348:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801534c:	4770      	bx	lr
 801534e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8015352:	4770      	bx	lr
 8015354:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8015358:	4770      	bx	lr
 801535a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 801535e:	4770      	bx	lr
 8015360:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8015364:	4770      	bx	lr
 8015366:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 801536a:	4770      	bx	lr
 801536c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8015370:	4770      	bx	lr
 8015372:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8015376:	4770      	bx	lr
 8015378:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801537c:	4770      	bx	lr
 801537e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8015382:	4770      	bx	lr
 8015384:	20007634 	.word	0x20007634
 8015388:	10624dd3 	.word	0x10624dd3
 801538c:	fffee0c0 	.word	0xfffee0c0
 8015390:	00200045 	.word	0x00200045
 8015394:	002000c5 	.word	0x002000c5
 8015398:	fdffe008 	.word	0xfdffe008

0801539c <SDMMC_CmdVoltageSwitch>:
{
 801539c:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801539e:	4a4d      	ldr	r2, [pc, #308]	; (80154d4 <SDMMC_CmdVoltageSwitch+0x138>)
 80153a0:	4b4d      	ldr	r3, [pc, #308]	; (80154d8 <SDMMC_CmdVoltageSwitch+0x13c>)
 80153a2:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80153a4:	484d      	ldr	r0, [pc, #308]	; (80154dc <SDMMC_CmdVoltageSwitch+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80153a6:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80153aa:	f241 130b 	movw	r3, #4363	; 0x110b
{
 80153ae:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 80153b0:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80153b2:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 80153b4:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80153b6:	68cc      	ldr	r4, [r1, #12]
 80153b8:	4020      	ands	r0, r4
 80153ba:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80153bc:	f241 3088 	movw	r0, #5000	; 0x1388
 80153c0:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80153c4:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 80153c6:	b14a      	cbz	r2, 80153dc <SDMMC_CmdVoltageSwitch+0x40>
 80153c8:	1e53      	subs	r3, r2, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80153ca:	4845      	ldr	r0, [pc, #276]	; (80154e0 <SDMMC_CmdVoltageSwitch+0x144>)
    sta_reg = SDMMCx->STA;
 80153cc:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 80153ce:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80153d0:	4202      	tst	r2, r0
 80153d2:	d001      	beq.n	80153d8 <SDMMC_CmdVoltageSwitch+0x3c>
 80153d4:	0494      	lsls	r4, r2, #18
 80153d6:	d506      	bpl.n	80153e6 <SDMMC_CmdVoltageSwitch+0x4a>
    if (count-- == 0U)
 80153d8:	1c5a      	adds	r2, r3, #1
 80153da:	d1f7      	bne.n	80153cc <SDMMC_CmdVoltageSwitch+0x30>
      return SDMMC_ERROR_TIMEOUT;
 80153dc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80153e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153e4:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80153e6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80153e8:	0758      	lsls	r0, r3, #29
 80153ea:	d43d      	bmi.n	8015468 <SDMMC_CmdVoltageSwitch+0xcc>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80153ec:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80153ee:	f010 0001 	ands.w	r0, r0, #1
 80153f2:	d134      	bne.n	801545e <SDMMC_CmdVoltageSwitch+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80153f4:	4b3b      	ldr	r3, [pc, #236]	; (80154e4 <SDMMC_CmdVoltageSwitch+0x148>)
 80153f6:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80153f8:	690b      	ldr	r3, [r1, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80153fa:	b2db      	uxtb	r3, r3
 80153fc:	2b0b      	cmp	r3, #11
 80153fe:	d131      	bne.n	8015464 <SDMMC_CmdVoltageSwitch+0xc8>
  return (*(__IO uint32_t *) tmp);
 8015400:	694b      	ldr	r3, [r1, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8015402:	4839      	ldr	r0, [pc, #228]	; (80154e8 <SDMMC_CmdVoltageSwitch+0x14c>)
 8015404:	4018      	ands	r0, r3
 8015406:	2800      	cmp	r0, #0
 8015408:	d0ea      	beq.n	80153e0 <SDMMC_CmdVoltageSwitch+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801540a:	2b00      	cmp	r3, #0
 801540c:	db30      	blt.n	8015470 <SDMMC_CmdVoltageSwitch+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801540e:	005a      	lsls	r2, r3, #1
 8015410:	d431      	bmi.n	8015476 <SDMMC_CmdVoltageSwitch+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8015412:	009c      	lsls	r4, r3, #2
 8015414:	d431      	bmi.n	801547a <SDMMC_CmdVoltageSwitch+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8015416:	00d9      	lsls	r1, r3, #3
 8015418:	d431      	bmi.n	801547e <SDMMC_CmdVoltageSwitch+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801541a:	011a      	lsls	r2, r3, #4
 801541c:	d432      	bmi.n	8015484 <SDMMC_CmdVoltageSwitch+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801541e:	015c      	lsls	r4, r3, #5
 8015420:	d433      	bmi.n	801548a <SDMMC_CmdVoltageSwitch+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8015422:	01d9      	lsls	r1, r3, #7
 8015424:	d434      	bmi.n	8015490 <SDMMC_CmdVoltageSwitch+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8015426:	021a      	lsls	r2, r3, #8
 8015428:	d435      	bmi.n	8015496 <SDMMC_CmdVoltageSwitch+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801542a:	025c      	lsls	r4, r3, #9
 801542c:	d436      	bmi.n	801549c <SDMMC_CmdVoltageSwitch+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801542e:	0299      	lsls	r1, r3, #10
 8015430:	d440      	bmi.n	80154b4 <SDMMC_CmdVoltageSwitch+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8015432:	02da      	lsls	r2, r3, #11
 8015434:	d43b      	bmi.n	80154ae <SDMMC_CmdVoltageSwitch+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8015436:	035c      	lsls	r4, r3, #13
 8015438:	d436      	bmi.n	80154a8 <SDMMC_CmdVoltageSwitch+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801543a:	0399      	lsls	r1, r3, #14
 801543c:	d431      	bmi.n	80154a2 <SDMMC_CmdVoltageSwitch+0x106>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801543e:	03da      	lsls	r2, r3, #15
 8015440:	d444      	bmi.n	80154cc <SDMMC_CmdVoltageSwitch+0x130>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8015442:	041c      	lsls	r4, r3, #16
 8015444:	d43f      	bmi.n	80154c6 <SDMMC_CmdVoltageSwitch+0x12a>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8015446:	0459      	lsls	r1, r3, #17
 8015448:	d43a      	bmi.n	80154c0 <SDMMC_CmdVoltageSwitch+0x124>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801544a:	049a      	lsls	r2, r3, #18
 801544c:	d435      	bmi.n	80154ba <SDMMC_CmdVoltageSwitch+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801544e:	f013 0f08 	tst.w	r3, #8
 8015452:	bf14      	ite	ne
 8015454:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8015458:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 801545c:	e7c0      	b.n	80153e0 <SDMMC_CmdVoltageSwitch+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801545e:	2301      	movs	r3, #1
 8015460:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8015462:	e7bd      	b.n	80153e0 <SDMMC_CmdVoltageSwitch+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8015464:	2001      	movs	r0, #1
 8015466:	e7bb      	b.n	80153e0 <SDMMC_CmdVoltageSwitch+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8015468:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801546a:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801546c:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801546e:	e7b7      	b.n	80153e0 <SDMMC_CmdVoltageSwitch+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8015470:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8015474:	e7b4      	b.n	80153e0 <SDMMC_CmdVoltageSwitch+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8015476:	2040      	movs	r0, #64	; 0x40
 8015478:	e7b2      	b.n	80153e0 <SDMMC_CmdVoltageSwitch+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801547a:	2080      	movs	r0, #128	; 0x80
 801547c:	e7b0      	b.n	80153e0 <SDMMC_CmdVoltageSwitch+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801547e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8015482:	e7ad      	b.n	80153e0 <SDMMC_CmdVoltageSwitch+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8015484:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015488:	e7aa      	b.n	80153e0 <SDMMC_CmdVoltageSwitch+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801548a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801548e:	e7a7      	b.n	80153e0 <SDMMC_CmdVoltageSwitch+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8015490:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8015494:	e7a4      	b.n	80153e0 <SDMMC_CmdVoltageSwitch+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8015496:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801549a:	e7a1      	b.n	80153e0 <SDMMC_CmdVoltageSwitch+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 801549c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80154a0:	e79e      	b.n	80153e0 <SDMMC_CmdVoltageSwitch+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80154a2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80154a6:	e79b      	b.n	80153e0 <SDMMC_CmdVoltageSwitch+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80154a8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80154ac:	e798      	b.n	80153e0 <SDMMC_CmdVoltageSwitch+0x44>
    return SDMMC_ERROR_CC_ERR;
 80154ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80154b2:	e795      	b.n	80153e0 <SDMMC_CmdVoltageSwitch+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80154b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80154b8:	e792      	b.n	80153e0 <SDMMC_CmdVoltageSwitch+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 80154ba:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80154be:	e78f      	b.n	80153e0 <SDMMC_CmdVoltageSwitch+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80154c0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80154c4:	e78c      	b.n	80153e0 <SDMMC_CmdVoltageSwitch+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80154c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80154ca:	e789      	b.n	80153e0 <SDMMC_CmdVoltageSwitch+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80154cc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80154d0:	e786      	b.n	80153e0 <SDMMC_CmdVoltageSwitch+0x44>
 80154d2:	bf00      	nop
 80154d4:	20007634 	.word	0x20007634
 80154d8:	10624dd3 	.word	0x10624dd3
 80154dc:	fffee0c0 	.word	0xfffee0c0
 80154e0:	00200045 	.word	0x00200045
 80154e4:	002000c5 	.word	0x002000c5
 80154e8:	fdffe008 	.word	0xfdffe008

080154ec <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80154ec:	287f      	cmp	r0, #127	; 0x7f
 80154ee:	d913      	bls.n	8015518 <ff_convert+0x2c>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 80154f0:	b979      	cbnz	r1, 8015512 <ff_convert+0x26>
 80154f2:	4b0c      	ldr	r3, [pc, #48]	; (8015524 <ff_convert+0x38>)
 80154f4:	e001      	b.n	80154fa <ff_convert+0xe>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80154f6:	2980      	cmp	r1, #128	; 0x80
 80154f8:	d00d      	beq.n	8015516 <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 80154fa:	f833 2b02 	ldrh.w	r2, [r3], #2
 80154fe:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
 8015502:	3101      	adds	r1, #1
				if (chr == Tbl[c]) break;
 8015504:	4282      	cmp	r2, r0
 8015506:	d1f6      	bne.n	80154f6 <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
 8015508:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
 801550c:	fa1f f08c 	uxth.w	r0, ip
 8015510:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8015512:	28ff      	cmp	r0, #255	; 0xff
 8015514:	d901      	bls.n	801551a <ff_convert+0x2e>
 8015516:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8015518:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801551a:	4b02      	ldr	r3, [pc, #8]	; (8015524 <ff_convert+0x38>)
 801551c:	3880      	subs	r0, #128	; 0x80
 801551e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8015522:	4770      	bx	lr
 8015524:	08099380 	.word	0x08099380

08015528 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8015528:	4b23      	ldr	r3, [pc, #140]	; (80155b8 <ff_wtoupper+0x90>)
 801552a:	4a24      	ldr	r2, [pc, #144]	; (80155bc <ff_wtoupper+0x94>)
 801552c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8015530:	bf28      	it	cs
 8015532:	4613      	movcs	r3, r2
{
 8015534:	b510      	push	{r4, lr}
 8015536:	3304      	adds	r3, #4
 8015538:	e00a      	b.n	8015550 <ff_wtoupper+0x28>
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801553a:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 801553e:	fa5f fc82 	uxtb.w	ip, r2
 8015542:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
 8015544:	eb0c 0e01 	add.w	lr, ip, r1
 8015548:	4570      	cmp	r0, lr
 801554a:	db09      	blt.n	8015560 <ff_wtoupper+0x38>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 801554c:	3304      	adds	r3, #4
 801554e:	b182      	cbz	r2, 8015572 <ff_wtoupper+0x4a>
		bc = *p++;								/* Get block base */
 8015550:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
 8015554:	461c      	mov	r4, r3
 8015556:	1e4a      	subs	r2, r1, #1
 8015558:	b292      	uxth	r2, r2
 801555a:	4290      	cmp	r0, r2
 801555c:	d8ed      	bhi.n	801553a <ff_wtoupper+0x12>
	}

	return chr;
}
 801555e:	bd10      	pop	{r4, pc}
			switch (cmd) {
 8015560:	2a08      	cmp	r2, #8
 8015562:	d8fc      	bhi.n	801555e <ff_wtoupper+0x36>
 8015564:	e8df f002 	tbb	[pc, r2]
 8015568:	1916100c 	.word	0x1916100c
 801556c:	25221f1c 	.word	0x25221f1c
 8015570:	08          	.byte	0x08
 8015571:	00          	.byte	0x00
		if (!cmd) p += nc;
 8015572:	eb04 034c 	add.w	r3, r4, ip, lsl #1
 8015576:	e7de      	b.n	8015536 <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8015578:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 801557c:	b280      	uxth	r0, r0
}
 801557e:	bd10      	pop	{r4, pc}
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8015580:	1a41      	subs	r1, r0, r1
 8015582:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
}
 8015586:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8015588:	1a43      	subs	r3, r0, r1
 801558a:	f003 0301 	and.w	r3, r3, #1
 801558e:	1ac3      	subs	r3, r0, r3
 8015590:	b298      	uxth	r0, r3
}
 8015592:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
 8015594:	3810      	subs	r0, #16
 8015596:	b280      	uxth	r0, r0
}
 8015598:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
 801559a:	3820      	subs	r0, #32
 801559c:	b280      	uxth	r0, r0
}
 801559e:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
 80155a0:	3830      	subs	r0, #48	; 0x30
 80155a2:	b280      	uxth	r0, r0
}
 80155a4:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
 80155a6:	381a      	subs	r0, #26
 80155a8:	b280      	uxth	r0, r0
}
 80155aa:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
 80155ac:	3008      	adds	r0, #8
 80155ae:	b280      	uxth	r0, r0
}
 80155b0:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
 80155b2:	3850      	subs	r0, #80	; 0x50
 80155b4:	b280      	uxth	r0, r0
}
 80155b6:	bd10      	pop	{r4, pc}
 80155b8:	08099480 	.word	0x08099480
 80155bc:	08099674 	.word	0x08099674

080155c0 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80155c0:	4b03      	ldr	r3, [pc, #12]	; (80155d0 <disk_status+0x10>)
 80155c2:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80155c6:	4418      	add	r0, r3
 80155c8:	6853      	ldr	r3, [r2, #4]
 80155ca:	7b00      	ldrb	r0, [r0, #12]
 80155cc:	685b      	ldr	r3, [r3, #4]
 80155ce:	4718      	bx	r3
 80155d0:	2000a240 	.word	0x2000a240

080155d4 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 80155d4:	4b07      	ldr	r3, [pc, #28]	; (80155f4 <disk_initialize+0x20>)
 80155d6:	5c1a      	ldrb	r2, [r3, r0]
 80155d8:	b952      	cbnz	r2, 80155f0 <disk_initialize+0x1c>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80155da:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80155de:	1819      	adds	r1, r3, r0
    disk.is_initialized[pdrv] = 1;
 80155e0:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80155e4:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 80155e6:	f803 c000 	strb.w	ip, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80155ea:	7b08      	ldrb	r0, [r1, #12]
 80155ec:	6813      	ldr	r3, [r2, #0]
 80155ee:	4718      	bx	r3
  }
  return stat;
}
 80155f0:	2000      	movs	r0, #0
 80155f2:	4770      	bx	lr
 80155f4:	2000a240 	.word	0x2000a240

080155f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80155f8:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80155fa:	4c06      	ldr	r4, [pc, #24]	; (8015614 <disk_read+0x1c>)
 80155fc:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 8015600:	4420      	add	r0, r4
 8015602:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8015606:	7b00      	ldrb	r0, [r0, #12]
 8015608:	68a4      	ldr	r4, [r4, #8]
 801560a:	46a4      	mov	ip, r4
  return res;
}
 801560c:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8015610:	4760      	bx	ip
 8015612:	bf00      	nop
 8015614:	2000a240 	.word	0x2000a240

08015618 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8015618:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801561a:	4c06      	ldr	r4, [pc, #24]	; (8015634 <disk_write+0x1c>)
 801561c:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 8015620:	4420      	add	r0, r4
 8015622:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8015626:	7b00      	ldrb	r0, [r0, #12]
 8015628:	68e4      	ldr	r4, [r4, #12]
 801562a:	46a4      	mov	ip, r4
  return res;
}
 801562c:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8015630:	4760      	bx	ip
 8015632:	bf00      	nop
 8015634:	2000a240 	.word	0x2000a240

08015638 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8015638:	4b04      	ldr	r3, [pc, #16]	; (801564c <disk_ioctl+0x14>)
 801563a:	eb03 0c00 	add.w	ip, r3, r0
 801563e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015642:	6843      	ldr	r3, [r0, #4]
 8015644:	f89c 000c 	ldrb.w	r0, [ip, #12]
 8015648:	691b      	ldr	r3, [r3, #16]
 801564a:	4718      	bx	r3
 801564c:	2000a240 	.word	0x2000a240

08015650 <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
 8015650:	2000      	movs	r0, #0
 8015652:	4770      	bx	lr

08015654 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8015654:	4a36      	ldr	r2, [pc, #216]	; (8015730 <inc_lock+0xdc>)
{
 8015656:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
 8015658:	6813      	ldr	r3, [r2, #0]
{
 801565a:	468e      	mov	lr, r1
		if (Files[i].fs == dp->obj.fs &&
 801565c:	6801      	ldr	r1, [r0, #0]
 801565e:	4299      	cmp	r1, r3
 8015660:	d029      	beq.n	80156b6 <inc_lock+0x62>
 8015662:	6914      	ldr	r4, [r2, #16]
 8015664:	42a1      	cmp	r1, r4
 8015666:	d030      	beq.n	80156ca <inc_lock+0x76>
 8015668:	6a15      	ldr	r5, [r2, #32]
 801566a:	42a9      	cmp	r1, r5
 801566c:	d037      	beq.n	80156de <inc_lock+0x8a>
 801566e:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
 8015672:	458c      	cmp	ip, r1
 8015674:	d00a      	beq.n	801568c <inc_lock+0x38>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8015676:	2b00      	cmp	r3, #0
 8015678:	d03c      	beq.n	80156f4 <inc_lock+0xa0>
 801567a:	2c00      	cmp	r4, #0
 801567c:	d039      	beq.n	80156f2 <inc_lock+0x9e>
 801567e:	2d00      	cmp	r5, #0
 8015680:	d052      	beq.n	8015728 <inc_lock+0xd4>
 8015682:	f1bc 0f00 	cmp.w	ip, #0
 8015686:	d051      	beq.n	801572c <inc_lock+0xd8>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8015688:	2000      	movs	r0, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 801568a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (Files[i].fs == dp->obj.fs &&
 801568c:	6b56      	ldr	r6, [r2, #52]	; 0x34
 801568e:	6887      	ldr	r7, [r0, #8]
 8015690:	42be      	cmp	r6, r7
 8015692:	d1f0      	bne.n	8015676 <inc_lock+0x22>
			Files[i].clu == dp->obj.sclust &&
 8015694:	6b96      	ldr	r6, [r2, #56]	; 0x38
 8015696:	6947      	ldr	r7, [r0, #20]
 8015698:	42be      	cmp	r6, r7
 801569a:	d1ec      	bne.n	8015676 <inc_lock+0x22>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801569c:	2303      	movs	r3, #3
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801569e:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 80156a2:	0118      	lsls	r0, r3, #4
 80156a4:	f1be 0f00 	cmp.w	lr, #0
 80156a8:	d03a      	beq.n	8015720 <inc_lock+0xcc>
 80156aa:	8989      	ldrh	r1, [r1, #12]
 80156ac:	2900      	cmp	r1, #0
 80156ae:	d1eb      	bne.n	8015688 <inc_lock+0x34>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80156b0:	f44f 7480 	mov.w	r4, #256	; 0x100
 80156b4:	e030      	b.n	8015718 <inc_lock+0xc4>
		if (Files[i].fs == dp->obj.fs &&
 80156b6:	6855      	ldr	r5, [r2, #4]
 80156b8:	6884      	ldr	r4, [r0, #8]
 80156ba:	42a5      	cmp	r5, r4
 80156bc:	d1d1      	bne.n	8015662 <inc_lock+0xe>
			Files[i].clu == dp->obj.sclust &&
 80156be:	6895      	ldr	r5, [r2, #8]
 80156c0:	6944      	ldr	r4, [r0, #20]
 80156c2:	42a5      	cmp	r5, r4
 80156c4:	d1cd      	bne.n	8015662 <inc_lock+0xe>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80156c6:	2300      	movs	r3, #0
 80156c8:	e7e9      	b.n	801569e <inc_lock+0x4a>
		if (Files[i].fs == dp->obj.fs &&
 80156ca:	6957      	ldr	r7, [r2, #20]
 80156cc:	6885      	ldr	r5, [r0, #8]
 80156ce:	42af      	cmp	r7, r5
 80156d0:	d1ca      	bne.n	8015668 <inc_lock+0x14>
			Files[i].clu == dp->obj.sclust &&
 80156d2:	6997      	ldr	r7, [r2, #24]
 80156d4:	6945      	ldr	r5, [r0, #20]
 80156d6:	42af      	cmp	r7, r5
 80156d8:	d1c6      	bne.n	8015668 <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80156da:	2301      	movs	r3, #1
 80156dc:	e7df      	b.n	801569e <inc_lock+0x4a>
		if (Files[i].fs == dp->obj.fs &&
 80156de:	6a57      	ldr	r7, [r2, #36]	; 0x24
 80156e0:	6886      	ldr	r6, [r0, #8]
 80156e2:	42b7      	cmp	r7, r6
 80156e4:	d1c3      	bne.n	801566e <inc_lock+0x1a>
			Files[i].clu == dp->obj.sclust &&
 80156e6:	6a96      	ldr	r6, [r2, #40]	; 0x28
 80156e8:	6947      	ldr	r7, [r0, #20]
 80156ea:	42be      	cmp	r6, r7
 80156ec:	d1bf      	bne.n	801566e <inc_lock+0x1a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80156ee:	2302      	movs	r3, #2
 80156f0:	e7d5      	b.n	801569e <inc_lock+0x4a>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80156f2:	2301      	movs	r3, #1
		Files[i].clu = dp->obj.sclust;
 80156f4:	6887      	ldr	r7, [r0, #8]
		Files[i].fs = dp->obj.fs;
 80156f6:	eb02 1503 	add.w	r5, r2, r3, lsl #4
		Files[i].clu = dp->obj.sclust;
 80156fa:	6946      	ldr	r6, [r0, #20]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80156fc:	f1be 0f00 	cmp.w	lr, #0
		Files[i].fs = dp->obj.fs;
 8015700:	ea4f 1003 	mov.w	r0, r3, lsl #4
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8015704:	bf14      	ite	ne
 8015706:	f44f 7480 	movne.w	r4, #256	; 0x100
 801570a:	2401      	moveq	r4, #1
		Files[i].fs = dp->obj.fs;
 801570c:	5011      	str	r1, [r2, r0]
		Files[i].clu = dp->obj.sclust;
 801570e:	4629      	mov	r1, r5
 8015710:	e9c5 7601 	strd	r7, r6, [r5, #4]
		Files[i].ctr = 0;
 8015714:	2500      	movs	r5, #0
 8015716:	818d      	strh	r5, [r1, #12]
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8015718:	4402      	add	r2, r0
	return i + 1;
 801571a:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801571c:	8194      	strh	r4, [r2, #12]
}
 801571e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8015720:	898c      	ldrh	r4, [r1, #12]
 8015722:	3401      	adds	r4, #1
 8015724:	b2a4      	uxth	r4, r4
 8015726:	e7f7      	b.n	8015718 <inc_lock+0xc4>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8015728:	2302      	movs	r3, #2
 801572a:	e7e3      	b.n	80156f4 <inc_lock+0xa0>
 801572c:	2303      	movs	r3, #3
 801572e:	e7e1      	b.n	80156f4 <inc_lock+0xa0>
 8015730:	2000a1fc 	.word	0x2000a1fc

08015734 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8015734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8015738:	2600      	movs	r6, #0
	FATFS *fs = dp->obj.fs;
 801573a:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 801573e:	758e      	strb	r6, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8015740:	69c3      	ldr	r3, [r0, #28]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d05a      	beq.n	80157fc <get_fileinfo+0xc8>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8015746:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015748:	4607      	mov	r7, r0
 801574a:	460d      	mov	r5, r1
 801574c:	3301      	adds	r3, #1
 801574e:	d01e      	beq.n	801578e <get_fileinfo+0x5a>
			i = j = 0;
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8015750:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015754:	8818      	ldrh	r0, [r3, #0]
 8015756:	2800      	cmp	r0, #0
 8015758:	d061      	beq.n	801581e <get_fileinfo+0xea>
 801575a:	f101 0615 	add.w	r6, r1, #21
 801575e:	2401      	movs	r4, #1
 8015760:	e000      	b.n	8015764 <get_fileinfo+0x30>
 8015762:	461c      	mov	r4, r3
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8015764:	2100      	movs	r1, #0
 8015766:	f7ff fec1 	bl	80154ec <ff_convert>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801576a:	1c63      	adds	r3, r4, #1
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 801576c:	2800      	cmp	r0, #0
 801576e:	d056      	beq.n	801581e <get_fileinfo+0xea>
 8015770:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8015774:	d053      	beq.n	801581e <get_fileinfo+0xea>
				fno->fname[i++] = (TCHAR)w;
 8015776:	f806 0f01 	strb.w	r0, [r6, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801577a:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801577e:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 8015782:	2800      	cmp	r0, #0
 8015784:	d1ed      	bne.n	8015762 <get_fileinfo+0x2e>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8015786:	442c      	add	r4, r5
 8015788:	2300      	movs	r3, #0
 801578a:	75a3      	strb	r3, [r4, #22]
		}
	}

	i = j = 0;
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 801578c:	7dae      	ldrb	r6, [r5, #22]
 801578e:	f8d7 c020 	ldr.w	ip, [r7, #32]
	i = j = 0;
 8015792:	2000      	movs	r0, #0
		c = (TCHAR)dp->dir[i++];
		if (c == ' ') continue;				/* Skip padding spaces */
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
		if (i == 9) {						/* Insert a . if extension is exist */
			if (!lfv) fno->fname[j] = '.';
			fno->altname[j++] = '.';
 8015794:	f04f 082e 	mov.w	r8, #46	; 0x2e
 8015798:	f10c 31ff 	add.w	r1, ip, #4294967295
	i = j = 0;
 801579c:	4602      	mov	r2, r0
		c = (TCHAR)dp->dir[i++];
 801579e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80157a2:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 80157a4:	2b20      	cmp	r3, #32
 80157a6:	d018      	beq.n	80157da <get_fileinfo+0xa6>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80157a8:	2b05      	cmp	r3, #5
 80157aa:	bf08      	it	eq
 80157ac:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 80157ae:	2a09      	cmp	r2, #9
 80157b0:	d026      	beq.n	8015800 <get_fileinfo+0xcc>
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80157b2:	182c      	adds	r4, r5, r0
 80157b4:	7263      	strb	r3, [r4, #9]
		if (!lfv) {
 80157b6:	b97e      	cbnz	r6, 80157d8 <get_fileinfo+0xa4>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80157b8:	f1a3 0741 	sub.w	r7, r3, #65	; 0x41
 80157bc:	2f19      	cmp	r7, #25
 80157be:	d80a      	bhi.n	80157d6 <get_fileinfo+0xa2>
 80157c0:	2a08      	cmp	r2, #8
 80157c2:	f89c e00c 	ldrb.w	lr, [ip, #12]
 80157c6:	bf8c      	ite	hi
 80157c8:	2710      	movhi	r7, #16
 80157ca:	2708      	movls	r7, #8
 80157cc:	ea1e 0f07 	tst.w	lr, r7
 80157d0:	d001      	beq.n	80157d6 <get_fileinfo+0xa2>
				c += 0x20;			/* To lower */
 80157d2:	3320      	adds	r3, #32
 80157d4:	b2db      	uxtb	r3, r3
			}
			fno->fname[j] = c;
 80157d6:	75a3      	strb	r3, [r4, #22]
		}
		j++;
 80157d8:	3001      	adds	r0, #1
	while (i < 11) {		/* Copy name body and extension */
 80157da:	2a0b      	cmp	r2, #11
 80157dc:	d1df      	bne.n	801579e <get_fileinfo+0x6a>
	}
	if (!lfv) {
		fno->fname[j] = 0;
 80157de:	182c      	adds	r4, r5, r0
	if (!lfv) {
 80157e0:	b1b6      	cbz	r6, 8015810 <get_fileinfo+0xdc>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80157e2:	2300      	movs	r3, #0
 80157e4:	7263      	strb	r3, [r4, #9]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80157e6:	f89c 300b 	ldrb.w	r3, [ip, #11]
 80157ea:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[0];
 80157ec:	f8dc 301c 	ldr.w	r3, [ip, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80157f0:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[0];
 80157f2:	f8dc 3016 	ldr.w	r3, [ip, #22]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80157f6:	0c1a      	lsrs	r2, r3, #16
 80157f8:	80eb      	strh	r3, [r5, #6]
 80157fa:	80aa      	strh	r2, [r5, #4]
}
 80157fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
 8015800:	182c      	adds	r4, r5, r0
 8015802:	b90e      	cbnz	r6, 8015808 <get_fileinfo+0xd4>
 8015804:	f884 8016 	strb.w	r8, [r4, #22]
			fno->altname[j++] = '.';
 8015808:	3001      	adds	r0, #1
 801580a:	f884 8009 	strb.w	r8, [r4, #9]
 801580e:	e7d0      	b.n	80157b2 <get_fileinfo+0x7e>
		fno->fname[j] = 0;
 8015810:	75a6      	strb	r6, [r4, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8015812:	f89c 300c 	ldrb.w	r3, [ip, #12]
 8015816:	2b00      	cmp	r3, #0
 8015818:	bf08      	it	eq
 801581a:	462c      	moveq	r4, r5
 801581c:	e7e1      	b.n	80157e2 <get_fileinfo+0xae>
			i = j = 0;
 801581e:	2400      	movs	r4, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 8015820:	2300      	movs	r3, #0
 8015822:	442c      	add	r4, r5
 8015824:	75a3      	strb	r3, [r4, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8015826:	7dae      	ldrb	r6, [r5, #22]
 8015828:	e7b1      	b.n	801578e <get_fileinfo+0x5a>
 801582a:	bf00      	nop

0801582c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801582c:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801582e:	f04f 36ff 	mov.w	r6, #4294967295
 8015832:	2300      	movs	r3, #0
{
 8015834:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015836:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8015838:	70c3      	strb	r3, [r0, #3]
 801583a:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 801583c:	d00c      	beq.n	8015858 <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801583e:	460d      	mov	r5, r1
 8015840:	460a      	mov	r2, r1
 8015842:	2301      	movs	r3, #1
 8015844:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8015848:	7840      	ldrb	r0, [r0, #1]
 801584a:	f7ff fed5 	bl	80155f8 <disk_read>
 801584e:	b110      	cbz	r0, 8015856 <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8015850:	2004      	movs	r0, #4
			fs->winsect = sector;
 8015852:	6326      	str	r6, [r4, #48]	; 0x30
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 8015854:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 8015856:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8015858:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801585c:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
 8015860:	429a      	cmp	r2, r3
 8015862:	d11a      	bne.n	801589a <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8015864:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8015868:	2be9      	cmp	r3, #233	; 0xe9
 801586a:	d007      	beq.n	801587c <check_fs+0x50>
 801586c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801586e:	4a0d      	ldr	r2, [pc, #52]	; (80158a4 <check_fs+0x78>)
 8015870:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8015874:	4293      	cmp	r3, r2
 8015876:	d001      	beq.n	801587c <check_fs+0x50>
	return 2;
 8015878:	2002      	movs	r0, #2
}
 801587a:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 801587c:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8015880:	4a09      	ldr	r2, [pc, #36]	; (80158a8 <check_fs+0x7c>)
 8015882:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8015886:	4293      	cmp	r3, r2
 8015888:	d009      	beq.n	801589e <check_fs+0x72>
	rv = rv << 8 | ptr[0];
 801588a:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801588e:	4b07      	ldr	r3, [pc, #28]	; (80158ac <check_fs+0x80>)
 8015890:	1ac0      	subs	r0, r0, r3
 8015892:	bf18      	it	ne
 8015894:	2001      	movne	r0, #1
 8015896:	0040      	lsls	r0, r0, #1
}
 8015898:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801589a:	2003      	movs	r0, #3
}
 801589c:	bd70      	pop	{r4, r5, r6, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801589e:	2000      	movs	r0, #0
}
 80158a0:	bd70      	pop	{r4, r5, r6, pc}
 80158a2:	bf00      	nop
 80158a4:	009000eb 	.word	0x009000eb
 80158a8:	00544146 	.word	0x00544146
 80158ac:	33544146 	.word	0x33544146

080158b0 <move_window>:
{
 80158b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 80158b2:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
 80158b4:	b083      	sub	sp, #12
	if (sector != fs->winsect) {	/* Window offset changed? */
 80158b6:	428e      	cmp	r6, r1
 80158b8:	d024      	beq.n	8015904 <move_window+0x54>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80158ba:	78c3      	ldrb	r3, [r0, #3]
 80158bc:	460d      	mov	r5, r1
 80158be:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80158c0:	f100 0134 	add.w	r1, r0, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80158c4:	b963      	cbnz	r3, 80158e0 <move_window+0x30>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80158c6:	2301      	movs	r3, #1
 80158c8:	462a      	mov	r2, r5
 80158ca:	7860      	ldrb	r0, [r4, #1]
 80158cc:	f7ff fe94 	bl	80155f8 <disk_read>
 80158d0:	b910      	cbnz	r0, 80158d8 <move_window+0x28>
			fs->winsect = sector;
 80158d2:	6325      	str	r5, [r4, #48]	; 0x30
}
 80158d4:	b003      	add	sp, #12
 80158d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
 80158d8:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80158da:	f04f 35ff 	mov.w	r5, #4294967295
 80158de:	e7f8      	b.n	80158d2 <move_window+0x22>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80158e0:	2301      	movs	r3, #1
 80158e2:	4632      	mov	r2, r6
 80158e4:	7840      	ldrb	r0, [r0, #1]
 80158e6:	9101      	str	r1, [sp, #4]
 80158e8:	f7ff fe96 	bl	8015618 <disk_write>
 80158ec:	b9d0      	cbnz	r0, 8015924 <move_window+0x74>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80158ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80158f0:	69e3      	ldr	r3, [r4, #28]
 80158f2:	1ab2      	subs	r2, r6, r2
 80158f4:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
 80158f6:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80158f8:	429a      	cmp	r2, r3
 80158fa:	d2e4      	bcs.n	80158c6 <move_window+0x16>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80158fc:	78a7      	ldrb	r7, [r4, #2]
 80158fe:	2f01      	cmp	r7, #1
 8015900:	d804      	bhi.n	801590c <move_window+0x5c>
 8015902:	e7e0      	b.n	80158c6 <move_window+0x16>
	FRESULT res = FR_OK;
 8015904:	2000      	movs	r0, #0
}
 8015906:	b003      	add	sp, #12
 8015908:	bdf0      	pop	{r4, r5, r6, r7, pc}
					wsect += fs->fsize;
 801590a:	69e3      	ldr	r3, [r4, #28]
 801590c:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801590e:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8015910:	2301      	movs	r3, #1
 8015912:	7860      	ldrb	r0, [r4, #1]
 8015914:	4632      	mov	r2, r6
 8015916:	9101      	str	r1, [sp, #4]
 8015918:	f7ff fe7e 	bl	8015618 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801591c:	2f01      	cmp	r7, #1
 801591e:	9901      	ldr	r1, [sp, #4]
 8015920:	d1f3      	bne.n	801590a <move_window+0x5a>
 8015922:	e7d0      	b.n	80158c6 <move_window+0x16>
			res = FR_DISK_ERR;
 8015924:	2001      	movs	r0, #1
}
 8015926:	b003      	add	sp, #12
 8015928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801592a:	bf00      	nop

0801592c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801592c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8015930:	2300      	movs	r3, #0
	if (*path) {	/* If the pointer is not a null */
 8015932:	6804      	ldr	r4, [r0, #0]
	*rfs = 0;
 8015934:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 8015936:	b19c      	cbz	r4, 8015960 <find_volume+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8015938:	7825      	ldrb	r5, [r4, #0]
 801593a:	2d1f      	cmp	r5, #31
 801593c:	d914      	bls.n	8015968 <find_volume+0x3c>
 801593e:	2d3a      	cmp	r5, #58	; 0x3a
 8015940:	d012      	beq.n	8015968 <find_volume+0x3c>
 8015942:	46a4      	mov	ip, r4
 8015944:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8015948:	2b1f      	cmp	r3, #31
 801594a:	d90f      	bls.n	801596c <find_volume+0x40>
 801594c:	2b3a      	cmp	r3, #58	; 0x3a
 801594e:	d1f9      	bne.n	8015944 <find_volume+0x18>
			i = *tp++ - '0';
 8015950:	3401      	adds	r4, #1
 8015952:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8015956:	45a4      	cmp	ip, r4
 8015958:	d102      	bne.n	8015960 <find_volume+0x34>
 801595a:	2e01      	cmp	r6, #1
 801595c:	f240 80fd 	bls.w	8015b5a <find_volume+0x22e>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 8015960:	250b      	movs	r5, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 8015962:	4628      	mov	r0, r5
 8015964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8015968:	462b      	mov	r3, r5
 801596a:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801596c:	2b3a      	cmp	r3, #58	; 0x3a
 801596e:	d0ef      	beq.n	8015950 <find_volume+0x24>
		vol = 0;		/* Drive 0 */
 8015970:	2600      	movs	r6, #0
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8015972:	4baa      	ldr	r3, [pc, #680]	; (8015c1c <find_volume+0x2f0>)
 8015974:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8015978:	2c00      	cmp	r4, #0
 801597a:	f000 80d0 	beq.w	8015b1e <find_volume+0x1f2>
	*rfs = fs;							/* Return pointer to the file system object */
 801597e:	600c      	str	r4, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8015980:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8015984:	7823      	ldrb	r3, [r4, #0]
 8015986:	b17b      	cbz	r3, 80159a8 <find_volume+0x7c>
		stat = disk_status(fs->drv);
 8015988:	7860      	ldrb	r0, [r4, #1]
 801598a:	f7ff fe19 	bl	80155c0 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801598e:	07c1      	lsls	r1, r0, #31
 8015990:	d40a      	bmi.n	80159a8 <find_volume+0x7c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8015992:	2d00      	cmp	r5, #0
 8015994:	f000 80b2 	beq.w	8015afc <find_volume+0x1d0>
 8015998:	f010 0504 	ands.w	r5, r0, #4
 801599c:	f000 80ae 	beq.w	8015afc <find_volume+0x1d0>
				return FR_WRITE_PROTECTED;
 80159a0:	250a      	movs	r5, #10
}
 80159a2:	4628      	mov	r0, r5
 80159a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80159a8:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 80159aa:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80159ac:	7060      	strb	r0, [r4, #1]
	fs->fs_type = 0;					/* Clear the file system object */
 80159ae:	7023      	strb	r3, [r4, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80159b0:	f7ff fe10 	bl	80155d4 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80159b4:	07c2      	lsls	r2, r0, #31
 80159b6:	f100 80a4 	bmi.w	8015b02 <find_volume+0x1d6>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80159ba:	b10d      	cbz	r5, 80159c0 <find_volume+0x94>
 80159bc:	0743      	lsls	r3, r0, #29
 80159be:	d4ef      	bmi.n	80159a0 <find_volume+0x74>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80159c0:	2100      	movs	r1, #0
 80159c2:	4620      	mov	r0, r4
 80159c4:	f7ff ff32 	bl	801582c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80159c8:	2802      	cmp	r0, #2
 80159ca:	d07c      	beq.n	8015ac6 <find_volume+0x19a>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80159cc:	2804      	cmp	r0, #4
 80159ce:	f000 80a4 	beq.w	8015b1a <find_volume+0x1ee>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80159d2:	2801      	cmp	r0, #1
 80159d4:	f200 8091 	bhi.w	8015afa <find_volume+0x1ce>
	bsect = 0;
 80159d8:	2500      	movs	r5, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80159da:	f8b4 303f 	ldrh.w	r3, [r4, #63]	; 0x3f
 80159de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80159e2:	f040 808a 	bne.w	8015afa <find_volume+0x1ce>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80159e6:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80159ea:	b902      	cbnz	r2, 80159ee <find_volume+0xc2>
	rv = rv << 8 | ptr[0];
 80159ec:	6da2      	ldr	r2, [r4, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80159ee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
		fs->fsize = fasize;
 80159f2:	61e2      	str	r2, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80159f4:	1e59      	subs	r1, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80159f6:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80159f8:	2901      	cmp	r1, #1
 80159fa:	d87e      	bhi.n	8015afa <find_volume+0x1ce>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80159fc:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8015a00:	b288      	uxth	r0, r1
 8015a02:	8160      	strh	r0, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8015a04:	2800      	cmp	r0, #0
 8015a06:	d078      	beq.n	8015afa <find_volume+0x1ce>
 8015a08:	1e48      	subs	r0, r1, #1
 8015a0a:	4208      	tst	r0, r1
 8015a0c:	d175      	bne.n	8015afa <find_volume+0x1ce>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8015a0e:	f8b4 c045 	ldrh.w	ip, [r4, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8015a12:	f01c 0f0f 	tst.w	ip, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8015a16:	f8a4 c008 	strh.w	ip, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8015a1a:	d16e      	bne.n	8015afa <find_volume+0x1ce>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8015a1c:	f8b4 0047 	ldrh.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8015a20:	b900      	cbnz	r0, 8015a24 <find_volume+0xf8>
	rv = rv << 8 | ptr[0];
 8015a22:	6d60      	ldr	r0, [r4, #84]	; 0x54
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8015a24:	f8b4 7042 	ldrh.w	r7, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8015a28:	2f00      	cmp	r7, #0
 8015a2a:	d066      	beq.n	8015afa <find_volume+0x1ce>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8015a2c:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8015a30:	eb07 161c 	add.w	r6, r7, ip, lsr #4
 8015a34:	441e      	add	r6, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8015a36:	42b0      	cmp	r0, r6
 8015a38:	d35f      	bcc.n	8015afa <find_volume+0x1ce>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8015a3a:	eba0 0e06 	sub.w	lr, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8015a3e:	458e      	cmp	lr, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8015a40:	fbbe f0f1 	udiv	r0, lr, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8015a44:	d359      	bcc.n	8015afa <find_volume+0x1ce>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8015a46:	f64f 71f5 	movw	r1, #65525	; 0xfff5
 8015a4a:	4288      	cmp	r0, r1
 8015a4c:	f200 8089 	bhi.w	8015b62 <find_volume+0x236>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8015a50:	f640 71f5 	movw	r1, #4085	; 0xff5
 8015a54:	4288      	cmp	r0, r1
 8015a56:	f200 80aa 	bhi.w	8015bae <find_volume+0x282>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8015a5a:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8015a5c:	442f      	add	r7, r5
		fs->database = bsect + sysect;					/* Data start sector */
 8015a5e:	442e      	add	r6, r5
		fs->volbase = bsect;							/* Volume start sector */
 8015a60:	6225      	str	r5, [r4, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8015a62:	61a0      	str	r0, [r4, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 8015a64:	62e6      	str	r6, [r4, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8015a66:	6267      	str	r7, [r4, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8015a68:	f1bc 0f00 	cmp.w	ip, #0
 8015a6c:	d045      	beq.n	8015afa <find_volume+0x1ce>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8015a6e:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8015a72:	f000 0001 	and.w	r0, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8015a76:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8015a78:	eb00 0151 	add.w	r1, r0, r1, lsr #1
 8015a7c:	2001      	movs	r0, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8015a7e:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8015a82:	62a3      	str	r3, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8015a84:	ebb2 2f51 	cmp.w	r2, r1, lsr #9
 8015a88:	d337      	bcc.n	8015afa <find_volume+0x1ce>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8015a8a:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 8015a8e:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8015a90:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
 8015a94:	7122      	strb	r2, [r4, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 8015a96:	4962      	ldr	r1, [pc, #392]	; (8015c20 <find_volume+0x2f4>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 8015a98:	4b62      	ldr	r3, [pc, #392]	; (8015c24 <find_volume+0x2f8>)
	fs->id = ++Fsid;		/* File system mount ID */
 8015a9a:	880a      	ldrh	r2, [r1, #0]
	fs->fs_type = fmt;		/* FAT sub-type */
 8015a9c:	7020      	strb	r0, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8015a9e:	3201      	adds	r2, #1
		if (Files[i].fs == fs) Files[i].fs = 0;
 8015aa0:	6818      	ldr	r0, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8015aa2:	b292      	uxth	r2, r2
		if (Files[i].fs == fs) Files[i].fs = 0;
 8015aa4:	4284      	cmp	r4, r0
	fs->id = ++Fsid;		/* File system mount ID */
 8015aa6:	800a      	strh	r2, [r1, #0]
 8015aa8:	80e2      	strh	r2, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8015aaa:	f000 8091 	beq.w	8015bd0 <find_volume+0x2a4>
 8015aae:	691a      	ldr	r2, [r3, #16]
 8015ab0:	4294      	cmp	r4, r2
 8015ab2:	f000 808a 	beq.w	8015bca <find_volume+0x29e>
 8015ab6:	6a1a      	ldr	r2, [r3, #32]
 8015ab8:	4294      	cmp	r4, r2
 8015aba:	d075      	beq.n	8015ba8 <find_volume+0x27c>
 8015abc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015abe:	4294      	cmp	r4, r2
 8015ac0:	d06f      	beq.n	8015ba2 <find_volume+0x276>
	return FR_OK;
 8015ac2:	2500      	movs	r5, #0
 8015ac4:	e01a      	b.n	8015afc <find_volume+0x1d0>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8015ac6:	f894 61f6 	ldrb.w	r6, [r4, #502]	; 0x1f6
 8015aca:	b10e      	cbz	r6, 8015ad0 <find_volume+0x1a4>
	rv = rv << 8 | ptr[0];
 8015acc:	f8d4 61fa 	ldr.w	r6, [r4, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8015ad0:	f894 5206 	ldrb.w	r5, [r4, #518]	; 0x206
 8015ad4:	b10d      	cbz	r5, 8015ada <find_volume+0x1ae>
	rv = rv << 8 | ptr[0];
 8015ad6:	f8d4 520a 	ldr.w	r5, [r4, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8015ada:	f894 3216 	ldrb.w	r3, [r4, #534]	; 0x216
 8015ade:	b303      	cbz	r3, 8015b22 <find_volume+0x1f6>
	rv = rv << 8 | ptr[0];
 8015ae0:	f8d4 821a 	ldr.w	r8, [r4, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8015ae4:	f894 7226 	ldrb.w	r7, [r4, #550]	; 0x226
 8015ae8:	b10f      	cbz	r7, 8015aee <find_volume+0x1c2>
	rv = rv << 8 | ptr[0];
 8015aea:	f8d4 722a 	ldr.w	r7, [r4, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8015aee:	b9d6      	cbnz	r6, 8015b26 <find_volume+0x1fa>
 8015af0:	bb0d      	cbnz	r5, 8015b36 <find_volume+0x20a>
 8015af2:	f1b8 0f00 	cmp.w	r8, #0
 8015af6:	d128      	bne.n	8015b4a <find_volume+0x21e>
 8015af8:	b93f      	cbnz	r7, 8015b0a <find_volume+0x1de>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8015afa:	250d      	movs	r5, #13
}
 8015afc:	4628      	mov	r0, r5
 8015afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8015b02:	2503      	movs	r5, #3
}
 8015b04:	4628      	mov	r0, r5
 8015b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8015b0a:	4639      	mov	r1, r7
 8015b0c:	4620      	mov	r0, r4
 8015b0e:	f7ff fe8d 	bl	801582c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8015b12:	2801      	cmp	r0, #1
 8015b14:	d95f      	bls.n	8015bd6 <find_volume+0x2aa>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8015b16:	2804      	cmp	r0, #4
 8015b18:	d1ef      	bne.n	8015afa <find_volume+0x1ce>
 8015b1a:	2501      	movs	r5, #1
 8015b1c:	e7ee      	b.n	8015afc <find_volume+0x1d0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8015b1e:	250c      	movs	r5, #12
 8015b20:	e7ec      	b.n	8015afc <find_volume+0x1d0>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8015b22:	4698      	mov	r8, r3
 8015b24:	e7de      	b.n	8015ae4 <find_volume+0x1b8>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8015b26:	4631      	mov	r1, r6
 8015b28:	4620      	mov	r0, r4
 8015b2a:	f7ff fe7f 	bl	801582c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8015b2e:	2801      	cmp	r0, #1
 8015b30:	d8de      	bhi.n	8015af0 <find_volume+0x1c4>
 8015b32:	4635      	mov	r5, r6
 8015b34:	e751      	b.n	80159da <find_volume+0xae>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8015b36:	4629      	mov	r1, r5
 8015b38:	4620      	mov	r0, r4
 8015b3a:	f7ff fe77 	bl	801582c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8015b3e:	2801      	cmp	r0, #1
 8015b40:	f67f af4b 	bls.w	80159da <find_volume+0xae>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8015b44:	f1b8 0f00 	cmp.w	r8, #0
 8015b48:	d0d6      	beq.n	8015af8 <find_volume+0x1cc>
 8015b4a:	4641      	mov	r1, r8
 8015b4c:	4620      	mov	r0, r4
 8015b4e:	f7ff fe6d 	bl	801582c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8015b52:	2801      	cmp	r0, #1
 8015b54:	d8d0      	bhi.n	8015af8 <find_volume+0x1cc>
 8015b56:	4645      	mov	r5, r8
 8015b58:	e73f      	b.n	80159da <find_volume+0xae>
					*path = ++tt;
 8015b5a:	f10c 0301 	add.w	r3, ip, #1
 8015b5e:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 8015b60:	e707      	b.n	8015972 <find_volume+0x46>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8015b62:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8015b66:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8015b68:	442f      	add	r7, r5
		fs->database = bsect + sysect;					/* Data start sector */
 8015b6a:	442e      	add	r6, r5
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8015b6c:	ea5c 0303 	orrs.w	r3, ip, r3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8015b70:	61a0      	str	r0, [r4, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8015b72:	6267      	str	r7, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8015b74:	62e6      	str	r6, [r4, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
 8015b76:	6225      	str	r5, [r4, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8015b78:	d1bf      	bne.n	8015afa <find_volume+0x1ce>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8015b7a:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[0];
 8015b7c:	6e21      	ldr	r1, [r4, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8015b7e:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8015b82:	62a1      	str	r1, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8015b84:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
 8015b88:	d3b7      	bcc.n	8015afa <find_volume+0x1ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8015b8a:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8015b8e:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 8015b92:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8015b94:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
 8015b96:	7121      	strb	r1, [r4, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8015b98:	e9c4 3304 	strd	r3, r3, [r4, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8015b9c:	d01d      	beq.n	8015bda <find_volume+0x2ae>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8015b9e:	2003      	movs	r0, #3
 8015ba0:	e779      	b.n	8015a96 <find_volume+0x16a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8015ba2:	2200      	movs	r2, #0
 8015ba4:	631a      	str	r2, [r3, #48]	; 0x30
 8015ba6:	e78c      	b.n	8015ac2 <find_volume+0x196>
 8015ba8:	2200      	movs	r2, #0
 8015baa:	621a      	str	r2, [r3, #32]
 8015bac:	e786      	b.n	8015abc <find_volume+0x190>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8015bae:	1c81      	adds	r1, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8015bb0:	442f      	add	r7, r5
		fs->database = bsect + sysect;					/* Data start sector */
 8015bb2:	442e      	add	r6, r5
		fs->volbase = bsect;							/* Volume start sector */
 8015bb4:	6225      	str	r5, [r4, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8015bb6:	61a1      	str	r1, [r4, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 8015bb8:	62e6      	str	r6, [r4, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8015bba:	6267      	str	r7, [r4, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8015bbc:	f1bc 0f00 	cmp.w	ip, #0
 8015bc0:	d09b      	beq.n	8015afa <find_volume+0x1ce>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8015bc2:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8015bc4:	0049      	lsls	r1, r1, #1
 8015bc6:	2002      	movs	r0, #2
 8015bc8:	e759      	b.n	8015a7e <find_volume+0x152>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8015bca:	2200      	movs	r2, #0
 8015bcc:	611a      	str	r2, [r3, #16]
 8015bce:	e772      	b.n	8015ab6 <find_volume+0x18a>
 8015bd0:	2200      	movs	r2, #0
 8015bd2:	601a      	str	r2, [r3, #0]
 8015bd4:	e76b      	b.n	8015aae <find_volume+0x182>
 8015bd6:	463d      	mov	r5, r7
 8015bd8:	e6ff      	b.n	80159da <find_volume+0xae>
			&& move_window(fs, bsect + 1) == FR_OK)
 8015bda:	1c69      	adds	r1, r5, #1
 8015bdc:	4620      	mov	r0, r4
 8015bde:	f7ff fe67 	bl	80158b0 <move_window>
 8015be2:	2800      	cmp	r0, #0
 8015be4:	d1db      	bne.n	8015b9e <find_volume+0x272>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8015be6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8015bea:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
			fs->fsi_flag = 0;
 8015bee:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8015bf0:	429a      	cmp	r2, r3
 8015bf2:	d1d4      	bne.n	8015b9e <find_volume+0x272>
	rv = rv << 8 | ptr[0];
 8015bf4:	6b62      	ldr	r2, [r4, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8015bf6:	4b0c      	ldr	r3, [pc, #48]	; (8015c28 <find_volume+0x2fc>)
 8015bf8:	429a      	cmp	r2, r3
 8015bfa:	d1d0      	bne.n	8015b9e <find_volume+0x272>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8015bfc:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
 8015c00:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8015c04:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015c08:	3320      	adds	r3, #32
 8015c0a:	429a      	cmp	r2, r3
 8015c0c:	d1c7      	bne.n	8015b9e <find_volume+0x272>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8015c0e:	2003      	movs	r0, #3
 8015c10:	e9d4 3287 	ldrd	r3, r2, [r4, #540]	; 0x21c
 8015c14:	e9c4 2304 	strd	r2, r3, [r4, #16]
 8015c18:	e73d      	b.n	8015a96 <find_volume+0x16a>
 8015c1a:	bf00      	nop
 8015c1c:	2000a1f4 	.word	0x2000a1f4
 8015c20:	2000a23c 	.word	0x2000a23c
 8015c24:	2000a1fc 	.word	0x2000a1fc
 8015c28:	41615252 	.word	0x41615252

08015c2c <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8015c2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		switch (fs->fs_type) {
 8015c30:	7806      	ldrb	r6, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8015c32:	4604      	mov	r4, r0
 8015c34:	460d      	mov	r5, r1
 8015c36:	4690      	mov	r8, r2
		switch (fs->fs_type) {
 8015c38:	2e02      	cmp	r6, #2
 8015c3a:	d007      	beq.n	8015c4c <put_fat.part.0+0x20>
 8015c3c:	2e03      	cmp	r6, #3
 8015c3e:	d041      	beq.n	8015cc4 <put_fat.part.0+0x98>
 8015c40:	2e01      	cmp	r6, #1
 8015c42:	d01b      	beq.n	8015c7c <put_fat.part.0+0x50>
 8015c44:	2702      	movs	r7, #2
}
 8015c46:	4638      	mov	r0, r7
 8015c48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8015c4c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8015c4e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8015c52:	f7ff fe2d 	bl	80158b0 <move_window>
			if (res != FR_OK) break;
 8015c56:	4607      	mov	r7, r0
 8015c58:	2800      	cmp	r0, #0
 8015c5a:	d1f4      	bne.n	8015c46 <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8015c5c:	006d      	lsls	r5, r5, #1
 8015c5e:	f104 0334 	add.w	r3, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8015c62:	f3c8 2207 	ubfx	r2, r8, #8, #8
			fs->wflag = 1;
 8015c66:	2101      	movs	r1, #1
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8015c68:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
}
 8015c6c:	4638      	mov	r0, r7
	*ptr++ = (BYTE)val; val >>= 8;
 8015c6e:	f803 8005 	strb.w	r8, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8015c72:	442b      	add	r3, r5
	*ptr++ = (BYTE)val;
 8015c74:	705a      	strb	r2, [r3, #1]
			fs->wflag = 1;
 8015c76:	70e1      	strb	r1, [r4, #3]
}
 8015c78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015c7c:	6a41      	ldr	r1, [r0, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 8015c7e:	eb05 0955 	add.w	r9, r5, r5, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015c82:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 8015c86:	f7ff fe13 	bl	80158b0 <move_window>
			if (res != FR_OK) break;
 8015c8a:	4607      	mov	r7, r0
 8015c8c:	2800      	cmp	r0, #0
 8015c8e:	d1da      	bne.n	8015c46 <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8015c90:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
 8015c92:	f109 0b01 	add.w	fp, r9, #1
 8015c96:	f104 0a34 	add.w	sl, r4, #52	; 0x34
 8015c9a:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8015c9e:	d52a      	bpl.n	8015cf6 <put_fat.part.0+0xca>
 8015ca0:	f81a 3009 	ldrb.w	r3, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015ca4:	4620      	mov	r0, r4
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8015ca6:	f003 030f 	and.w	r3, r3, #15
 8015caa:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
 8015cae:	f80a 3009 	strb.w	r3, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015cb2:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 8015cb4:	70e6      	strb	r6, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015cb6:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 8015cba:	f7ff fdf9 	bl	80158b0 <move_window>
			if (res != FR_OK) break;
 8015cbe:	b3a0      	cbz	r0, 8015d2a <put_fat.part.0+0xfe>
 8015cc0:	4607      	mov	r7, r0
	return res;
 8015cc2:	e7c0      	b.n	8015c46 <put_fat.part.0+0x1a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8015cc4:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8015cc6:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 8015cca:	f7ff fdf1 	bl	80158b0 <move_window>
			if (res != FR_OK) break;
 8015cce:	4607      	mov	r7, r0
 8015cd0:	2800      	cmp	r0, #0
 8015cd2:	d1b8      	bne.n	8015c46 <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8015cd4:	00ad      	lsls	r5, r5, #2
 8015cd6:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8015cda:	f028 4270 	bic.w	r2, r8, #4026531840	; 0xf0000000
			fs->wflag = 1;
 8015cde:	2001      	movs	r0, #1
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8015ce0:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8015ce4:	594b      	ldr	r3, [r1, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8015ce6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8015cea:	4313      	orrs	r3, r2
	*ptr++ = (BYTE)val; val >>= 8;
 8015cec:	514b      	str	r3, [r1, r5]
			fs->wflag = 1;
 8015cee:	70e0      	strb	r0, [r4, #3]
}
 8015cf0:	4638      	mov	r0, r7
 8015cf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8015cf6:	f80a 8009 	strb.w	r8, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015cfa:	4620      	mov	r0, r4
 8015cfc:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 8015cfe:	70e6      	strb	r6, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015d00:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 8015d04:	f7ff fdd4 	bl	80158b0 <move_window>
			if (res != FR_OK) break;
 8015d08:	2800      	cmp	r0, #0
 8015d0a:	d1d9      	bne.n	8015cc0 <put_fat.part.0+0x94>
			p = fs->win + bc % SS(fs);
 8015d0c:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8015d10:	f3c8 2203 	ubfx	r2, r8, #8, #4
 8015d14:	f81a 300b 	ldrb.w	r3, [sl, fp]
			p = fs->win + bc % SS(fs);
 8015d18:	44da      	add	sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8015d1a:	f023 030f 	bic.w	r3, r3, #15
 8015d1e:	4313      	orrs	r3, r2
			fs->wflag = 1;
 8015d20:	2201      	movs	r2, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8015d22:	f88a 3000 	strb.w	r3, [sl]
			fs->wflag = 1;
 8015d26:	70e2      	strb	r2, [r4, #3]
			break;
 8015d28:	e78d      	b.n	8015c46 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 8015d2a:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8015d2e:	f3c8 1307 	ubfx	r3, r8, #4, #8
			p = fs->win + bc % SS(fs);
 8015d32:	44da      	add	sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8015d34:	e7f4      	b.n	8015d20 <put_fat.part.0+0xf4>
 8015d36:	bf00      	nop

08015d38 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8015d38:	2901      	cmp	r1, #1
 8015d3a:	d90e      	bls.n	8015d5a <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8015d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8015d3e:	6983      	ldr	r3, [r0, #24]
 8015d40:	460c      	mov	r4, r1
 8015d42:	4605      	mov	r5, r0
 8015d44:	4299      	cmp	r1, r3
 8015d46:	d206      	bcs.n	8015d56 <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 8015d48:	7803      	ldrb	r3, [r0, #0]
 8015d4a:	2b02      	cmp	r3, #2
 8015d4c:	d021      	beq.n	8015d92 <get_fat.isra.0+0x5a>
 8015d4e:	2b03      	cmp	r3, #3
 8015d50:	d010      	beq.n	8015d74 <get_fat.isra.0+0x3c>
 8015d52:	2b01      	cmp	r3, #1
 8015d54:	d003      	beq.n	8015d5e <get_fat.isra.0+0x26>
 8015d56:	2001      	movs	r0, #1
}
 8015d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 8015d5a:	2001      	movs	r0, #1
}
 8015d5c:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015d5e:	6a41      	ldr	r1, [r0, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 8015d60:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015d64:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8015d68:	f7ff fda2 	bl	80158b0 <move_window>
 8015d6c:	b1f0      	cbz	r0, 8015dac <get_fat.isra.0+0x74>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8015d6e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8015d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015d74:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8015d76:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8015d7a:	f7ff fd99 	bl	80158b0 <move_window>
 8015d7e:	2800      	cmp	r0, #0
 8015d80:	d1f5      	bne.n	8015d6e <get_fat.isra.0+0x36>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8015d82:	00a4      	lsls	r4, r4, #2
 8015d84:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8015d88:	4425      	add	r5, r4
 8015d8a:	6b68      	ldr	r0, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8015d8c:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 8015d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015d92:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8015d94:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8015d98:	f7ff fd8a 	bl	80158b0 <move_window>
 8015d9c:	2800      	cmp	r0, #0
 8015d9e:	d1e6      	bne.n	8015d6e <get_fat.isra.0+0x36>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8015da0:	0063      	lsls	r3, r4, #1
 8015da2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8015da6:	442b      	add	r3, r5
 8015da8:	8e98      	ldrh	r0, [r3, #52]	; 0x34
}
 8015daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8015dac:	f3c7 0308 	ubfx	r3, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015db0:	6a69      	ldr	r1, [r5, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 8015db2:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015db4:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 8015db6:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015db8:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8015dbc:	f893 6034 	ldrb.w	r6, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015dc0:	f7ff fd76 	bl	80158b0 <move_window>
 8015dc4:	2800      	cmp	r0, #0
 8015dc6:	d1d2      	bne.n	8015d6e <get_fat.isra.0+0x36>
			wc |= fs->win[bc % SS(fs)] << 8;
 8015dc8:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8015dcc:	442f      	add	r7, r5
 8015dce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8015dd2:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8015dd6:	07e3      	lsls	r3, r4, #31
 8015dd8:	bf4c      	ite	mi
 8015dda:	0900      	lsrmi	r0, r0, #4
 8015ddc:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 8015de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015de2:	bf00      	nop

08015de4 <dir_read.constprop.0>:
FRESULT dir_read (
 8015de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
 8015de8:	f8d0 b01c 	ldr.w	fp, [r0, #28]
FRESULT dir_read (
 8015dec:	b083      	sub	sp, #12
 8015dee:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8015df0:	6807      	ldr	r7, [r0, #0]
	while (dp->sect) {
 8015df2:	f1bb 0f00 	cmp.w	fp, #0
 8015df6:	d060      	beq.n	8015eba <dir_read.constprop.0+0xd6>
	BYTE ord = 0xFF, sum = 0xFF;
 8015df8:	f04f 0aff 	mov.w	sl, #255	; 0xff
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015dfc:	f107 0934 	add.w	r9, r7, #52	; 0x34
	BYTE ord = 0xFF, sum = 0xFF;
 8015e00:	46d0      	mov	r8, sl
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015e02:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8015e04:	455d      	cmp	r5, fp
 8015e06:	d014      	beq.n	8015e32 <dir_read.constprop.0+0x4e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015e08:	78fb      	ldrb	r3, [r7, #3]
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d16d      	bne.n	8015eea <dir_read.constprop.0+0x106>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8015e0e:	2301      	movs	r3, #1
 8015e10:	465a      	mov	r2, fp
 8015e12:	4649      	mov	r1, r9
 8015e14:	7878      	ldrb	r0, [r7, #1]
 8015e16:	f7ff fbef 	bl	80155f8 <disk_read>
 8015e1a:	b140      	cbz	r0, 8015e2e <dir_read.constprop.0+0x4a>
			fs->winsect = sector;
 8015e1c:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8015e20:	2001      	movs	r0, #1
			fs->winsect = sector;
 8015e22:	633b      	str	r3, [r7, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8015e24:	2300      	movs	r3, #0
 8015e26:	61e3      	str	r3, [r4, #28]
}
 8015e28:	b003      	add	sp, #12
 8015e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8015e2e:	f8c7 b030 	str.w	fp, [r7, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8015e32:	6a21      	ldr	r1, [r4, #32]
 8015e34:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
 8015e36:	2a00      	cmp	r2, #0
 8015e38:	d03f      	beq.n	8015eba <dir_read.constprop.0+0xd6>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8015e3a:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8015e3c:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8015e3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015e42:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8015e44:	d005      	beq.n	8015e52 <dir_read.constprop.0+0x6e>
 8015e46:	2a2e      	cmp	r2, #46	; 0x2e
 8015e48:	d003      	beq.n	8015e52 <dir_read.constprop.0+0x6e>
 8015e4a:	f023 0020 	bic.w	r0, r3, #32
 8015e4e:	2808      	cmp	r0, #8
 8015e50:	d13a      	bne.n	8015ec8 <dir_read.constprop.0+0xe4>
						dp->blk_ofs = dp->dptr;
 8015e52:	6965      	ldr	r5, [r4, #20]
				ord = 0xFF;
 8015e54:	f04f 08ff 	mov.w	r8, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8015e58:	3520      	adds	r5, #32
	FATFS *fs = dp->obj.fs;
 8015e5a:	6826      	ldr	r6, [r4, #0]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8015e5c:	f8d4 b01c 	ldr.w	fp, [r4, #28]
 8015e60:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8015e64:	d229      	bcs.n	8015eba <dir_read.constprop.0+0xd6>
 8015e66:	f1bb 0f00 	cmp.w	fp, #0
 8015e6a:	d026      	beq.n	8015eba <dir_read.constprop.0+0xd6>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8015e6c:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8015e70:	bb2b      	cbnz	r3, 8015ebe <dir_read.constprop.0+0xda>
		dp->sect++;				/* Next sector */
 8015e72:	f10b 0b01 	add.w	fp, fp, #1
		if (!dp->clust) {		/* Static table */
 8015e76:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8015e78:	f8c4 b01c 	str.w	fp, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8015e7c:	b969      	cbnz	r1, 8015e9a <dir_read.constprop.0+0xb6>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8015e7e:	8933      	ldrh	r3, [r6, #8]
 8015e80:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8015e84:	d919      	bls.n	8015eba <dir_read.constprop.0+0xd6>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8015e86:	3634      	adds	r6, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8015e88:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8015e8a:	6226      	str	r6, [r4, #32]
	while (dp->sect) {
 8015e8c:	f1bb 0f00 	cmp.w	fp, #0
 8015e90:	d1b7      	bne.n	8015e02 <dir_read.constprop.0+0x1e>
		res = move_window(fs, dp->sect);
 8015e92:	2000      	movs	r0, #0
}
 8015e94:	b003      	add	sp, #12
 8015e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8015e9a:	8973      	ldrh	r3, [r6, #10]
 8015e9c:	3b01      	subs	r3, #1
 8015e9e:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 8015ea2:	d1f0      	bne.n	8015e86 <dir_read.constprop.0+0xa2>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8015ea4:	4630      	mov	r0, r6
 8015ea6:	9301      	str	r3, [sp, #4]
 8015ea8:	f7ff ff46 	bl	8015d38 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015eac:	2801      	cmp	r0, #1
 8015eae:	d94c      	bls.n	8015f4a <dir_read.constprop.0+0x166>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8015eb0:	1c43      	adds	r3, r0, #1
 8015eb2:	d021      	beq.n	8015ef8 <dir_read.constprop.0+0x114>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8015eb4:	69b2      	ldr	r2, [r6, #24]
 8015eb6:	4290      	cmp	r0, r2
 8015eb8:	d33a      	bcc.n	8015f30 <dir_read.constprop.0+0x14c>
	FRESULT res = FR_NO_FILE;
 8015eba:	2004      	movs	r0, #4
 8015ebc:	e7b2      	b.n	8015e24 <dir_read.constprop.0+0x40>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8015ebe:	3634      	adds	r6, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8015ec0:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8015ec2:	441e      	add	r6, r3
 8015ec4:	6226      	str	r6, [r4, #32]
	while (dp->sect) {
 8015ec6:	e79c      	b.n	8015e02 <dir_read.constprop.0+0x1e>
				if (a == AM_LFN) {			/* An LFN entry is found */
 8015ec8:	2b0f      	cmp	r3, #15
 8015eca:	f040 80a7 	bne.w	801601c <dir_read.constprop.0+0x238>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8015ece:	0650      	lsls	r0, r2, #25
						dp->blk_ofs = dp->dptr;
 8015ed0:	6965      	ldr	r5, [r4, #20]
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8015ed2:	d513      	bpl.n	8015efc <dir_read.constprop.0+0x118>
						c &= (BYTE)~LLEF; ord = c;
 8015ed4:	f002 08bf 	and.w	r8, r2, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 8015ed8:	f891 a00d 	ldrb.w	sl, [r1, #13]
						dp->blk_ofs = dp->dptr;
 8015edc:	6325      	str	r5, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8015ede:	7b4b      	ldrb	r3, [r1, #13]
 8015ee0:	4553      	cmp	r3, sl
 8015ee2:	d034      	beq.n	8015f4e <dir_read.constprop.0+0x16a>
 8015ee4:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8015ee8:	e7b6      	b.n	8015e58 <dir_read.constprop.0+0x74>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015eea:	2301      	movs	r3, #1
 8015eec:	462a      	mov	r2, r5
 8015eee:	4649      	mov	r1, r9
 8015ef0:	7878      	ldrb	r0, [r7, #1]
 8015ef2:	f7ff fb91 	bl	8015618 <disk_write>
 8015ef6:	b120      	cbz	r0, 8015f02 <dir_read.constprop.0+0x11e>
	FRESULT res = FR_NO_FILE;
 8015ef8:	2001      	movs	r0, #1
 8015efa:	e793      	b.n	8015e24 <dir_read.constprop.0+0x40>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8015efc:	4542      	cmp	r2, r8
 8015efe:	d1f1      	bne.n	8015ee4 <dir_read.constprop.0+0x100>
 8015f00:	e7ed      	b.n	8015ede <dir_read.constprop.0+0xfa>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
 8015f04:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015f06:	1aea      	subs	r2, r5, r3
 8015f08:	69fb      	ldr	r3, [r7, #28]
 8015f0a:	429a      	cmp	r2, r3
 8015f0c:	f4bf af7f 	bcs.w	8015e0e <dir_read.constprop.0+0x2a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015f10:	78be      	ldrb	r6, [r7, #2]
 8015f12:	2e01      	cmp	r6, #1
 8015f14:	d801      	bhi.n	8015f1a <dir_read.constprop.0+0x136>
 8015f16:	e77a      	b.n	8015e0e <dir_read.constprop.0+0x2a>
					wsect += fs->fsize;
 8015f18:	69fb      	ldr	r3, [r7, #28]
 8015f1a:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015f1c:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8015f1e:	2301      	movs	r3, #1
 8015f20:	4649      	mov	r1, r9
 8015f22:	462a      	mov	r2, r5
 8015f24:	7878      	ldrb	r0, [r7, #1]
 8015f26:	f7ff fb77 	bl	8015618 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015f2a:	2e01      	cmp	r6, #1
 8015f2c:	d1f4      	bne.n	8015f18 <dir_read.constprop.0+0x134>
 8015f2e:	e76e      	b.n	8015e0e <dir_read.constprop.0+0x2a>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015f30:	3a02      	subs	r2, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 8015f32:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 8015f34:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015f36:	9b01      	ldr	r3, [sp, #4]
 8015f38:	4290      	cmp	r0, r2
 8015f3a:	d26a      	bcs.n	8016012 <dir_read.constprop.0+0x22e>
	return clst * fs->csize + fs->database;
 8015f3c:	8972      	ldrh	r2, [r6, #10]
 8015f3e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8015f40:	fb00 3b02 	mla	fp, r0, r2, r3
				dp->sect = clust2sect(fs, clst);
 8015f44:	f8c4 b01c 	str.w	fp, [r4, #28]
 8015f48:	e79d      	b.n	8015e86 <dir_read.constprop.0+0xa2>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015f4a:	2002      	movs	r0, #2
 8015f4c:	e76a      	b.n	8015e24 <dir_read.constprop.0+0x40>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8015f4e:	8b4b      	ldrh	r3, [r1, #26]
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d1c7      	bne.n	8015ee4 <dir_read.constprop.0+0x100>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8015f54:	780b      	ldrb	r3, [r1, #0]
 8015f56:	f8b1 0001 	ldrh.w	r0, [r1, #1]
 8015f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015f5e:	3b01      	subs	r3, #1
 8015f60:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8015f64:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8015f68:	2bfe      	cmp	r3, #254	; 0xfe
 8015f6a:	d8bb      	bhi.n	8015ee4 <dir_read.constprop.0+0x100>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8015f6c:	68fe      	ldr	r6, [r7, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
 8015f6e:	1c5a      	adds	r2, r3, #1
 8015f70:	f826 0013 	strh.w	r0, [r6, r3, lsl #1]
 8015f74:	f8b1 c003 	ldrh.w	ip, [r1, #3]
		if (wc) {
 8015f78:	2800      	cmp	r0, #0
 8015f7a:	d158      	bne.n	801602e <dir_read.constprop.0+0x24a>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8015f7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015f80:	459c      	cmp	ip, r3
 8015f82:	d1af      	bne.n	8015ee4 <dir_read.constprop.0+0x100>
	rv = ptr[1];
 8015f84:	f8b1 b005 	ldrh.w	fp, [r1, #5]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8015f88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015f8c:	459b      	cmp	fp, r3
 8015f8e:	d1a9      	bne.n	8015ee4 <dir_read.constprop.0+0x100>
	rv = ptr[1];
 8015f90:	f8b1 e007 	ldrh.w	lr, [r1, #7]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8015f94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015f98:	459e      	cmp	lr, r3
 8015f9a:	d1a3      	bne.n	8015ee4 <dir_read.constprop.0+0x100>
	rv = ptr[1];
 8015f9c:	f8b1 c009 	ldrh.w	ip, [r1, #9]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8015fa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015fa4:	459c      	cmp	ip, r3
 8015fa6:	d19d      	bne.n	8015ee4 <dir_read.constprop.0+0x100>
	rv = ptr[1];
 8015fa8:	f8b1 e00e 	ldrh.w	lr, [r1, #14]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8015fac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015fb0:	459e      	cmp	lr, r3
 8015fb2:	d197      	bne.n	8015ee4 <dir_read.constprop.0+0x100>
	rv = ptr[1];
 8015fb4:	f8b1 b010 	ldrh.w	fp, [r1, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8015fb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015fbc:	459b      	cmp	fp, r3
 8015fbe:	d191      	bne.n	8015ee4 <dir_read.constprop.0+0x100>
	rv = rv << 8 | ptr[0];
 8015fc0:	f8b1 c012 	ldrh.w	ip, [r1, #18]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8015fc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015fc8:	459c      	cmp	ip, r3
 8015fca:	d18b      	bne.n	8015ee4 <dir_read.constprop.0+0x100>
	rv = ptr[1];
 8015fcc:	f8b1 e014 	ldrh.w	lr, [r1, #20]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8015fd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015fd4:	459e      	cmp	lr, r3
 8015fd6:	d185      	bne.n	8015ee4 <dir_read.constprop.0+0x100>
	rv = ptr[1];
 8015fd8:	f8b1 c016 	ldrh.w	ip, [r1, #22]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8015fdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015fe0:	459c      	cmp	ip, r3
 8015fe2:	f47f af7f 	bne.w	8015ee4 <dir_read.constprop.0+0x100>
	rv = ptr[1];
 8015fe6:	f8b1 e018 	ldrh.w	lr, [r1, #24]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8015fea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015fee:	459e      	cmp	lr, r3
 8015ff0:	f47f af78 	bne.w	8015ee4 <dir_read.constprop.0+0x100>
	rv = ptr[1];
 8015ff4:	f8b1 c01c 	ldrh.w	ip, [r1, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8015ff8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015ffc:	459c      	cmp	ip, r3
 8015ffe:	f47f af71 	bne.w	8015ee4 <dir_read.constprop.0+0x100>
	rv = ptr[1];
 8016002:	f8b1 e01e 	ldrh.w	lr, [r1, #30]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8016006:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801600a:	459e      	cmp	lr, r3
 801600c:	f000 8096 	beq.w	801613c <dir_read.constprop.0+0x358>
 8016010:	e768      	b.n	8015ee4 <dir_read.constprop.0+0x100>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8016012:	3634      	adds	r6, #52	; 0x34
				dp->sect = clust2sect(fs, clst);
 8016014:	61e3      	str	r3, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
 8016016:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8016018:	6226      	str	r6, [r4, #32]
	while (dp->sect) {
 801601a:	e73a      	b.n	8015e92 <dir_read.constprop.0+0xae>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801601c:	f1b8 0f00 	cmp.w	r8, #0
 8016020:	f000 8099 	beq.w	8016156 <dir_read.constprop.0+0x372>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8016024:	f04f 33ff 	mov.w	r3, #4294967295
		res = move_window(fs, dp->sect);
 8016028:	2000      	movs	r0, #0
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801602a:	6323      	str	r3, [r4, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801602c:	e6fc      	b.n	8015e28 <dir_read.constprop.0+0x44>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801602e:	2aff      	cmp	r2, #255	; 0xff
 8016030:	f000 80db 	beq.w	80161ea <dir_read.constprop.0+0x406>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8016034:	f826 c012 	strh.w	ip, [r6, r2, lsl #1]
 8016038:	0050      	lsls	r0, r2, #1
 801603a:	f8b1 b005 	ldrh.w	fp, [r1, #5]
 801603e:	1c9a      	adds	r2, r3, #2
		if (wc) {
 8016040:	f1bc 0f00 	cmp.w	ip, #0
 8016044:	d0a0      	beq.n	8015f88 <dir_read.constprop.0+0x1a4>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8016046:	2aff      	cmp	r2, #255	; 0xff
 8016048:	f000 80cf 	beq.w	80161ea <dir_read.constprop.0+0x406>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801604c:	4430      	add	r0, r6
 801604e:	1cda      	adds	r2, r3, #3
 8016050:	f8a0 b002 	strh.w	fp, [r0, #2]
 8016054:	f8b1 e007 	ldrh.w	lr, [r1, #7]
		if (wc) {
 8016058:	f1bb 0f00 	cmp.w	fp, #0
 801605c:	d09a      	beq.n	8015f94 <dir_read.constprop.0+0x1b0>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801605e:	2aff      	cmp	r2, #255	; 0xff
 8016060:	f000 80c3 	beq.w	80161ea <dir_read.constprop.0+0x406>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8016064:	f8a0 e004 	strh.w	lr, [r0, #4]
 8016068:	1d1a      	adds	r2, r3, #4
	rv = ptr[1];
 801606a:	f8b1 c009 	ldrh.w	ip, [r1, #9]
		if (wc) {
 801606e:	f1be 0f00 	cmp.w	lr, #0
 8016072:	d095      	beq.n	8015fa0 <dir_read.constprop.0+0x1bc>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8016074:	2aff      	cmp	r2, #255	; 0xff
 8016076:	f000 80b8 	beq.w	80161ea <dir_read.constprop.0+0x406>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801607a:	f8a0 c006 	strh.w	ip, [r0, #6]
 801607e:	1d5a      	adds	r2, r3, #5
	rv = ptr[1];
 8016080:	f8b1 e00e 	ldrh.w	lr, [r1, #14]
		if (wc) {
 8016084:	f1bc 0f00 	cmp.w	ip, #0
 8016088:	d090      	beq.n	8015fac <dir_read.constprop.0+0x1c8>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801608a:	2aff      	cmp	r2, #255	; 0xff
 801608c:	f000 80ad 	beq.w	80161ea <dir_read.constprop.0+0x406>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8016090:	f8a0 e008 	strh.w	lr, [r0, #8]
 8016094:	1d9a      	adds	r2, r3, #6
	rv = ptr[1];
 8016096:	f8b1 b010 	ldrh.w	fp, [r1, #16]
		if (wc) {
 801609a:	f1be 0f00 	cmp.w	lr, #0
 801609e:	d08b      	beq.n	8015fb8 <dir_read.constprop.0+0x1d4>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80160a0:	2aff      	cmp	r2, #255	; 0xff
 80160a2:	f000 80a2 	beq.w	80161ea <dir_read.constprop.0+0x406>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80160a6:	f8a0 b00a 	strh.w	fp, [r0, #10]
 80160aa:	1dda      	adds	r2, r3, #7
	rv = ptr[1];
 80160ac:	f8b1 c012 	ldrh.w	ip, [r1, #18]
		if (wc) {
 80160b0:	f1bb 0f00 	cmp.w	fp, #0
 80160b4:	d086      	beq.n	8015fc4 <dir_read.constprop.0+0x1e0>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80160b6:	2aff      	cmp	r2, #255	; 0xff
 80160b8:	f000 8097 	beq.w	80161ea <dir_read.constprop.0+0x406>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80160bc:	f8a0 c00c 	strh.w	ip, [r0, #12]
 80160c0:	f103 0208 	add.w	r2, r3, #8
	rv = ptr[1];
 80160c4:	f8b1 e014 	ldrh.w	lr, [r1, #20]
		if (wc) {
 80160c8:	f1bc 0f00 	cmp.w	ip, #0
 80160cc:	d080      	beq.n	8015fd0 <dir_read.constprop.0+0x1ec>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80160ce:	2aff      	cmp	r2, #255	; 0xff
 80160d0:	f000 808b 	beq.w	80161ea <dir_read.constprop.0+0x406>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80160d4:	f8a0 e00e 	strh.w	lr, [r0, #14]
 80160d8:	f103 0209 	add.w	r2, r3, #9
	rv = ptr[1];
 80160dc:	f8b1 c016 	ldrh.w	ip, [r1, #22]
		if (wc) {
 80160e0:	f1be 0f00 	cmp.w	lr, #0
 80160e4:	f43f af7a 	beq.w	8015fdc <dir_read.constprop.0+0x1f8>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80160e8:	2aff      	cmp	r2, #255	; 0xff
 80160ea:	d07e      	beq.n	80161ea <dir_read.constprop.0+0x406>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80160ec:	f8a0 c010 	strh.w	ip, [r0, #16]
 80160f0:	f103 020a 	add.w	r2, r3, #10
	rv = ptr[1];
 80160f4:	f8b1 e018 	ldrh.w	lr, [r1, #24]
		if (wc) {
 80160f8:	f1bc 0f00 	cmp.w	ip, #0
 80160fc:	f43f af75 	beq.w	8015fea <dir_read.constprop.0+0x206>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8016100:	2aff      	cmp	r2, #255	; 0xff
 8016102:	d072      	beq.n	80161ea <dir_read.constprop.0+0x406>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8016104:	f8a0 e012 	strh.w	lr, [r0, #18]
 8016108:	f103 020b 	add.w	r2, r3, #11
	rv = ptr[1];
 801610c:	f8b1 c01c 	ldrh.w	ip, [r1, #28]
		if (wc) {
 8016110:	f1be 0f00 	cmp.w	lr, #0
 8016114:	f43f af70 	beq.w	8015ff8 <dir_read.constprop.0+0x214>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8016118:	2aff      	cmp	r2, #255	; 0xff
 801611a:	d066      	beq.n	80161ea <dir_read.constprop.0+0x406>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801611c:	f8a0 c014 	strh.w	ip, [r0, #20]
 8016120:	f103 020c 	add.w	r2, r3, #12
	rv = ptr[1];
 8016124:	f8b1 e01e 	ldrh.w	lr, [r1, #30]
		if (wc) {
 8016128:	f1bc 0f00 	cmp.w	ip, #0
 801612c:	f43f af6b 	beq.w	8016006 <dir_read.constprop.0+0x222>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8016130:	2aff      	cmp	r2, #255	; 0xff
 8016132:	d05a      	beq.n	80161ea <dir_read.constprop.0+0x406>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8016134:	f103 020d 	add.w	r2, r3, #13
 8016138:	f8a0 e016 	strh.w	lr, [r0, #22]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801613c:	780b      	ldrb	r3, [r1, #0]
 801613e:	0659      	lsls	r1, r3, #25
 8016140:	d504      	bpl.n	801614c <dir_read.constprop.0+0x368>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8016142:	2aff      	cmp	r2, #255	; 0xff
 8016144:	d051      	beq.n	80161ea <dir_read.constprop.0+0x406>
		lfnbuf[i] = 0;
 8016146:	2300      	movs	r3, #0
 8016148:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801614c:	f108 38ff 	add.w	r8, r8, #4294967295
 8016150:	fa5f f888 	uxtb.w	r8, r8
 8016154:	e680      	b.n	8015e58 <dir_read.constprop.0+0x74>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8016156:	780b      	ldrb	r3, [r1, #0]
 8016158:	01da      	lsls	r2, r3, #7
 801615a:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 801615e:	784b      	ldrb	r3, [r1, #1]
 8016160:	441a      	add	r2, r3
 8016162:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8016166:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801616a:	788a      	ldrb	r2, [r1, #2]
 801616c:	fa52 f383 	uxtab	r3, r2, r3
 8016170:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8016174:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8016178:	78cb      	ldrb	r3, [r1, #3]
 801617a:	fa53 f282 	uxtab	r2, r3, r2
 801617e:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8016182:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8016186:	790a      	ldrb	r2, [r1, #4]
 8016188:	fa52 f383 	uxtab	r3, r2, r3
 801618c:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8016190:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8016194:	794b      	ldrb	r3, [r1, #5]
 8016196:	fa53 f282 	uxtab	r2, r3, r2
 801619a:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801619e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80161a2:	798a      	ldrb	r2, [r1, #6]
 80161a4:	fa52 f383 	uxtab	r3, r2, r3
 80161a8:	f3c3 0246 	ubfx	r2, r3, #1, #7
 80161ac:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 80161b0:	79cb      	ldrb	r3, [r1, #7]
 80161b2:	fa53 f282 	uxtab	r2, r3, r2
 80161b6:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80161ba:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80161be:	7a0a      	ldrb	r2, [r1, #8]
 80161c0:	fa52 f383 	uxtab	r3, r2, r3
 80161c4:	f3c3 0246 	ubfx	r2, r3, #1, #7
 80161c8:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 80161cc:	7a4b      	ldrb	r3, [r1, #9]
 80161ce:	7a89      	ldrb	r1, [r1, #10]
 80161d0:	fa53 f282 	uxtab	r2, r3, r2
 80161d4:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80161d8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80161dc:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80161e0:	b2db      	uxtb	r3, r3
 80161e2:	4553      	cmp	r3, sl
 80161e4:	f47f af1e 	bne.w	8016024 <dir_read.constprop.0+0x240>
 80161e8:	e653      	b.n	8015e92 <dir_read.constprop.0+0xae>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80161ea:	4690      	mov	r8, r2
 80161ec:	e634      	b.n	8015e58 <dir_read.constprop.0+0x74>
 80161ee:	bf00      	nop

080161f0 <sync_fs>:
{
 80161f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80161f2:	78c3      	ldrb	r3, [r0, #3]
{
 80161f4:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80161f6:	b95b      	cbnz	r3, 8016210 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80161f8:	7823      	ldrb	r3, [r4, #0]
 80161fa:	2b03      	cmp	r3, #3
 80161fc:	d029      	beq.n	8016252 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80161fe:	2200      	movs	r2, #0
 8016200:	7860      	ldrb	r0, [r4, #1]
 8016202:	4611      	mov	r1, r2
 8016204:	f7ff fa18 	bl	8015638 <disk_ioctl>
			res = FR_DISK_ERR;
 8016208:	3800      	subs	r0, #0
 801620a:	bf18      	it	ne
 801620c:	2001      	movne	r0, #1
}
 801620e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 8016210:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8016212:	f100 0734 	add.w	r7, r0, #52	; 0x34
 8016216:	2301      	movs	r3, #1
 8016218:	7840      	ldrb	r0, [r0, #1]
 801621a:	462a      	mov	r2, r5
 801621c:	4639      	mov	r1, r7
 801621e:	f7ff f9fb 	bl	8015618 <disk_write>
 8016222:	2800      	cmp	r0, #0
 8016224:	d13e      	bne.n	80162a4 <sync_fs+0xb4>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8016226:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8016228:	69e3      	ldr	r3, [r4, #28]
 801622a:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 801622c:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801622e:	429a      	cmp	r2, r3
 8016230:	d2e2      	bcs.n	80161f8 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016232:	78a6      	ldrb	r6, [r4, #2]
 8016234:	2e01      	cmp	r6, #1
 8016236:	d801      	bhi.n	801623c <sync_fs+0x4c>
 8016238:	e7de      	b.n	80161f8 <sync_fs+0x8>
					wsect += fs->fsize;
 801623a:	69e3      	ldr	r3, [r4, #28]
 801623c:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801623e:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8016240:	2301      	movs	r3, #1
 8016242:	4639      	mov	r1, r7
 8016244:	462a      	mov	r2, r5
 8016246:	7860      	ldrb	r0, [r4, #1]
 8016248:	f7ff f9e6 	bl	8015618 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801624c:	2e01      	cmp	r6, #1
 801624e:	d1f4      	bne.n	801623a <sync_fs+0x4a>
 8016250:	e7d2      	b.n	80161f8 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8016252:	7925      	ldrb	r5, [r4, #4]
 8016254:	2d01      	cmp	r5, #1
 8016256:	d1d2      	bne.n	80161fe <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 8016258:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
 801625c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016260:	2100      	movs	r1, #0
 8016262:	4630      	mov	r0, r6
 8016264:	f010 f98d 	bl	8026582 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 8016268:	480f      	ldr	r0, [pc, #60]	; (80162a8 <sync_fs+0xb8>)
	*ptr++ = (BYTE)val; val >>= 8;
 801626a:	f64a 2355 	movw	r3, #43605	; 0xaa55
	*ptr++ = (BYTE)val; val >>= 8;
 801626e:	6360      	str	r0, [r4, #52]	; 0x34
 8016270:	f100 50ff 	add.w	r0, r0, #534773760	; 0x1fe00000
	*ptr++ = (BYTE)val; val >>= 8;
 8016274:	f8a4 3232 	strh.w	r3, [r4, #562]	; 0x232
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8016278:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 801627a:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
 801627e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 8016282:	3020      	adds	r0, #32
 8016284:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
			fs->winsect = fs->volbase + 1;
 8016288:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 801628a:	f8c4 1220 	str.w	r1, [r4, #544]	; 0x220
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801628e:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
 8016290:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8016292:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8016296:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8016298:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801629a:	f7ff f9bd 	bl	8015618 <disk_write>
			fs->fsi_flag = 0;
 801629e:	2300      	movs	r3, #0
 80162a0:	7123      	strb	r3, [r4, #4]
 80162a2:	e7ac      	b.n	80161fe <sync_fs+0xe>
			res = FR_DISK_ERR;
 80162a4:	2001      	movs	r0, #1
}
 80162a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80162a8:	41615252 	.word	0x41615252

080162ac <create_chain>:
{
 80162ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162b0:	4681      	mov	r9, r0
	if (clst == 0) {	/* Create a new chain */
 80162b2:	460f      	mov	r7, r1
	FATFS *fs = obj->fs;
 80162b4:	f8d0 8000 	ldr.w	r8, [r0]
	if (clst == 0) {	/* Create a new chain */
 80162b8:	2900      	cmp	r1, #0
 80162ba:	f040 80a7 	bne.w	801640c <create_chain+0x160>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80162be:	f8d8 6010 	ldr.w	r6, [r8, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80162c2:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80162c6:	b9c6      	cbnz	r6, 80162fa <create_chain+0x4e>
 80162c8:	2601      	movs	r6, #1
 80162ca:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 80162cc:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80162ce:	429c      	cmp	r4, r3
 80162d0:	d317      	bcc.n	8016302 <create_chain+0x56>
				if (ncl > scl) return 0;	/* No free cluster */
 80162d2:	2e01      	cmp	r6, #1
 80162d4:	f000 8096 	beq.w	8016404 <create_chain+0x158>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80162d8:	f8d9 5000 	ldr.w	r5, [r9]
				ncl = 2;
 80162dc:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80162de:	69ab      	ldr	r3, [r5, #24]
 80162e0:	42a3      	cmp	r3, r4
 80162e2:	d906      	bls.n	80162f2 <create_chain+0x46>
		switch (fs->fs_type) {
 80162e4:	782b      	ldrb	r3, [r5, #0]
 80162e6:	2b02      	cmp	r3, #2
 80162e8:	d07e      	beq.n	80163e8 <create_chain+0x13c>
 80162ea:	2b03      	cmp	r3, #3
 80162ec:	d064      	beq.n	80163b8 <create_chain+0x10c>
 80162ee:	2b01      	cmp	r3, #1
 80162f0:	d00c      	beq.n	801630c <create_chain+0x60>
 80162f2:	2401      	movs	r4, #1
}
 80162f4:	4620      	mov	r0, r4
 80162f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80162fa:	42b3      	cmp	r3, r6
 80162fc:	bf98      	it	ls
 80162fe:	2601      	movls	r6, #1
 8016300:	e7e3      	b.n	80162ca <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8016302:	2c01      	cmp	r4, #1
 8016304:	f8d9 5000 	ldr.w	r5, [r9]
 8016308:	d9f3      	bls.n	80162f2 <create_chain+0x46>
 801630a:	e7e8      	b.n	80162de <create_chain+0x32>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801630c:	6a69      	ldr	r1, [r5, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 801630e:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016312:	4628      	mov	r0, r5
 8016314:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 8016318:	f7ff faca 	bl	80158b0 <move_window>
 801631c:	2800      	cmp	r0, #0
 801631e:	d146      	bne.n	80163ae <create_chain+0x102>
			wc = fs->win[bc++ % SS(fs)];
 8016320:	f3cb 0308 	ubfx	r3, fp, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016324:	6a69      	ldr	r1, [r5, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 8016326:	f10b 0b01 	add.w	fp, fp, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801632a:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 801632c:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801632e:	eb01 215b 	add.w	r1, r1, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8016332:	f893 a034 	ldrb.w	sl, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016336:	f7ff fabb 	bl	80158b0 <move_window>
 801633a:	bbc0      	cbnz	r0, 80163ae <create_chain+0x102>
			wc |= fs->win[bc % SS(fs)] << 8;
 801633c:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8016340:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8016342:	44ab      	add	fp, r5
 8016344:	f89b 3034 	ldrb.w	r3, [fp, #52]	; 0x34
 8016348:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801634c:	bf4c      	ite	mi
 801634e:	091b      	lsrmi	r3, r3, #4
 8016350:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
 8016354:	2b00      	cmp	r3, #0
 8016356:	d140      	bne.n	80163da <create_chain+0x12e>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8016358:	f8d8 3018 	ldr.w	r3, [r8, #24]
 801635c:	42a3      	cmp	r3, r4
 801635e:	d9c8      	bls.n	80162f2 <create_chain+0x46>
 8016360:	f04f 32ff 	mov.w	r2, #4294967295
 8016364:	4621      	mov	r1, r4
 8016366:	4640      	mov	r0, r8
 8016368:	f7ff fc60 	bl	8015c2c <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 801636c:	b958      	cbnz	r0, 8016386 <create_chain+0xda>
 801636e:	b157      	cbz	r7, 8016386 <create_chain+0xda>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8016370:	2f01      	cmp	r7, #1
 8016372:	d0be      	beq.n	80162f2 <create_chain+0x46>
 8016374:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8016378:	429f      	cmp	r7, r3
 801637a:	d2ba      	bcs.n	80162f2 <create_chain+0x46>
 801637c:	4622      	mov	r2, r4
 801637e:	4639      	mov	r1, r7
 8016380:	4640      	mov	r0, r8
 8016382:	f7ff fc53 	bl	8015c2c <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8016386:	b980      	cbnz	r0, 80163aa <create_chain+0xfe>
		fs->last_clst = ncl;
 8016388:	f8c8 4010 	str.w	r4, [r8, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801638c:	e9d8 2305 	ldrd	r2, r3, [r8, #20]
 8016390:	3b02      	subs	r3, #2
 8016392:	429a      	cmp	r2, r3
 8016394:	d802      	bhi.n	801639c <create_chain+0xf0>
 8016396:	3a01      	subs	r2, #1
 8016398:	f8c8 2014 	str.w	r2, [r8, #20]
		fs->fsi_flag |= 1;
 801639c:	f898 3004 	ldrb.w	r3, [r8, #4]
 80163a0:	f043 0301 	orr.w	r3, r3, #1
 80163a4:	f888 3004 	strb.w	r3, [r8, #4]
 80163a8:	e7a4      	b.n	80162f4 <create_chain+0x48>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80163aa:	2801      	cmp	r0, #1
 80163ac:	d1a1      	bne.n	80162f2 <create_chain+0x46>
 80163ae:	f04f 34ff 	mov.w	r4, #4294967295
}
 80163b2:	4620      	mov	r0, r4
 80163b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80163b8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80163ba:	4628      	mov	r0, r5
 80163bc:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80163c0:	f7ff fa76 	bl	80158b0 <move_window>
 80163c4:	2800      	cmp	r0, #0
 80163c6:	d1f2      	bne.n	80163ae <create_chain+0x102>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80163c8:	00a3      	lsls	r3, r4, #2
 80163ca:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 80163ce:	441d      	add	r5, r3
 80163d0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80163d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d0be      	beq.n	8016358 <create_chain+0xac>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80163da:	2b01      	cmp	r3, #1
 80163dc:	d089      	beq.n	80162f2 <create_chain+0x46>
			if (ncl == scl) return 0;		/* No free cluster */
 80163de:	42a6      	cmp	r6, r4
 80163e0:	d010      	beq.n	8016404 <create_chain+0x158>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80163e2:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80163e6:	e771      	b.n	80162cc <create_chain+0x20>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80163e8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80163ea:	4628      	mov	r0, r5
 80163ec:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80163f0:	f7ff fa5e 	bl	80158b0 <move_window>
 80163f4:	2800      	cmp	r0, #0
 80163f6:	d1da      	bne.n	80163ae <create_chain+0x102>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80163f8:	0063      	lsls	r3, r4, #1
 80163fa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80163fe:	442b      	add	r3, r5
 8016400:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
			break;
 8016402:	e7a7      	b.n	8016354 <create_chain+0xa8>
				if (ncl > scl) return 0;	/* No free cluster */
 8016404:	2400      	movs	r4, #0
}
 8016406:	4620      	mov	r0, r4
 8016408:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801640c:	4640      	mov	r0, r8
 801640e:	f7ff fc93 	bl	8015d38 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8016412:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8016414:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8016416:	f67f af6c 	bls.w	80162f2 <create_chain+0x46>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801641a:	1c41      	adds	r1, r0, #1
 801641c:	d0c7      	beq.n	80163ae <create_chain+0x102>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801641e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8016422:	4283      	cmp	r3, r0
 8016424:	f63f af66 	bhi.w	80162f4 <create_chain+0x48>
 8016428:	463e      	mov	r6, r7
 801642a:	e74e      	b.n	80162ca <create_chain+0x1e>

0801642c <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801642c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
 8016430:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = dp->obj.fs;
 8016434:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8016438:	d24e      	bcs.n	80164d8 <dir_sdi+0xac>
 801643a:	06ca      	lsls	r2, r1, #27
 801643c:	460c      	mov	r4, r1
 801643e:	d14b      	bne.n	80164d8 <dir_sdi+0xac>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8016440:	6885      	ldr	r5, [r0, #8]
 8016442:	4606      	mov	r6, r0
	dp->dptr = ofs;				/* Set current offset */
 8016444:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8016446:	2d00      	cmp	r5, #0
 8016448:	d049      	beq.n	80164de <dir_sdi+0xb2>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801644a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 801644e:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8016452:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8016456:	f0c0 8084 	bcc.w	8016562 <dir_sdi+0x136>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801645a:	2d01      	cmp	r5, #1
 801645c:	d03c      	beq.n	80164d8 <dir_sdi+0xac>
 801645e:	4647      	mov	r7, r8
 8016460:	e037      	b.n	80164d2 <dir_sdi+0xa6>
		switch (fs->fs_type) {
 8016462:	783b      	ldrb	r3, [r7, #0]
 8016464:	2b02      	cmp	r3, #2
 8016466:	d06e      	beq.n	8016546 <dir_sdi+0x11a>
 8016468:	2b03      	cmp	r3, #3
 801646a:	d05c      	beq.n	8016526 <dir_sdi+0xfa>
 801646c:	2b01      	cmp	r3, #1
 801646e:	d133      	bne.n	80164d8 <dir_sdi+0xac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016470:	6a79      	ldr	r1, [r7, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 8016472:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016476:	4638      	mov	r0, r7
 8016478:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 801647c:	f7ff fa18 	bl	80158b0 <move_window>
 8016480:	2800      	cmp	r0, #0
 8016482:	d14d      	bne.n	8016520 <dir_sdi+0xf4>
			wc = fs->win[bc++ % SS(fs)];
 8016484:	f3ca 0308 	ubfx	r3, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016488:	6a79      	ldr	r1, [r7, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 801648a:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801648e:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
 8016490:	443b      	add	r3, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016492:	eb01 215a 	add.w	r1, r1, sl, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8016496:	f893 b034 	ldrb.w	fp, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801649a:	f7ff fa09 	bl	80158b0 <move_window>
 801649e:	2800      	cmp	r0, #0
 80164a0:	d13e      	bne.n	8016520 <dir_sdi+0xf4>
			wc |= fs->win[bc % SS(fs)] << 8;
 80164a2:	f3ca 0a08 	ubfx	sl, sl, #0, #9
 80164a6:	44ba      	add	sl, r7
 80164a8:	f89a 3034 	ldrb.w	r3, [sl, #52]	; 0x34
 80164ac:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80164b0:	07eb      	lsls	r3, r5, #31
 80164b2:	bf4c      	ite	mi
 80164b4:	ea4f 151b 	movmi.w	r5, fp, lsr #4
 80164b8:	f3cb 050b 	ubfxpl	r5, fp, #0, #12
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80164bc:	2d01      	cmp	r5, #1
 80164be:	d90b      	bls.n	80164d8 <dir_sdi+0xac>
 80164c0:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80164c4:	42ab      	cmp	r3, r5
 80164c6:	d907      	bls.n	80164d8 <dir_sdi+0xac>
			ofs -= csz;
 80164c8:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
 80164cc:	45a1      	cmp	r9, r4
 80164ce:	d84a      	bhi.n	8016566 <dir_sdi+0x13a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80164d0:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80164d2:	69bb      	ldr	r3, [r7, #24]
 80164d4:	42ab      	cmp	r3, r5
 80164d6:	d8c4      	bhi.n	8016462 <dir_sdi+0x36>
		switch (fs->fs_type) {
 80164d8:	2002      	movs	r0, #2
}
 80164da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80164de:	f898 3000 	ldrb.w	r3, [r8]
 80164e2:	2b02      	cmp	r3, #2
 80164e4:	d816      	bhi.n	8016514 <dir_sdi+0xe8>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80164e6:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80164ea:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 80164ee:	d9f3      	bls.n	80164d8 <dir_sdi+0xac>
		dp->sect = fs->dirbase;
 80164f0:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	dp->clust = clst;					/* Current cluster# */
 80164f4:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d0ed      	beq.n	80164d8 <dir_sdi+0xac>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80164fc:	f108 0834 	add.w	r8, r8, #52	; 0x34
 8016500:	f3c4 0108 	ubfx	r1, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8016504:	eb03 2354 	add.w	r3, r3, r4, lsr #9
	return FR_OK;
 8016508:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801650a:	4441      	add	r1, r8
 801650c:	e9c6 3107 	strd	r3, r1, [r6, #28]
}
 8016510:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		clst = fs->dirbase;
 8016514:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8016518:	2b00      	cmp	r3, #0
 801651a:	d0e4      	beq.n	80164e6 <dir_sdi+0xba>
 801651c:	461d      	mov	r5, r3
 801651e:	e794      	b.n	801644a <dir_sdi+0x1e>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8016520:	2001      	movs	r0, #1
}
 8016522:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016526:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016528:	4638      	mov	r0, r7
 801652a:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 801652e:	f7ff f9bf 	bl	80158b0 <move_window>
 8016532:	2800      	cmp	r0, #0
 8016534:	d1f4      	bne.n	8016520 <dir_sdi+0xf4>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8016536:	00ab      	lsls	r3, r5, #2
 8016538:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 801653c:	443b      	add	r3, r7
 801653e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8016540:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
 8016544:	e7ba      	b.n	80164bc <dir_sdi+0x90>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016546:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016548:	4638      	mov	r0, r7
 801654a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801654e:	f7ff f9af 	bl	80158b0 <move_window>
 8016552:	2800      	cmp	r0, #0
 8016554:	d1e4      	bne.n	8016520 <dir_sdi+0xf4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8016556:	006b      	lsls	r3, r5, #1
 8016558:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801655c:	443b      	add	r3, r7
 801655e:	8e9d      	ldrh	r5, [r3, #52]	; 0x34
			break;
 8016560:	e7ac      	b.n	80164bc <dir_sdi+0x90>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016562:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8016566:	3b02      	subs	r3, #2
	clst -= 2;
 8016568:	1eaa      	subs	r2, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801656a:	429a      	cmp	r2, r3
 801656c:	d206      	bcs.n	801657c <dir_sdi+0x150>
	return clst * fs->csize + fs->database;
 801656e:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 8016572:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8016576:	fb02 3301 	mla	r3, r2, r1, r3
 801657a:	e7bb      	b.n	80164f4 <dir_sdi+0xc8>
		dp->sect = fs->dirbase;
 801657c:	2300      	movs	r3, #0
 801657e:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8016582:	e7a9      	b.n	80164d8 <dir_sdi+0xac>

08016584 <dir_find>:
{
 8016584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8016588:	2100      	movs	r1, #0
{
 801658a:	b085      	sub	sp, #20
 801658c:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 801658e:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8016592:	f7ff ff4b 	bl	801642c <dir_sdi>
	if (res != FR_OK) return res;
 8016596:	4607      	mov	r7, r0
 8016598:	b9e8      	cbnz	r0, 80165d6 <dir_find+0x52>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801659a:	f04f 09ff 	mov.w	r9, #255	; 0xff
 801659e:	f04f 33ff 	mov.w	r3, #4294967295
		res = move_window(fs, dp->sect);
 80165a2:	69e6      	ldr	r6, [r4, #28]
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80165a4:	464f      	mov	r7, r9
 80165a6:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 80165a8:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
 80165ac:	42b5      	cmp	r5, r6
 80165ae:	d018      	beq.n	80165e2 <dir_find+0x5e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80165b0:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80165b4:	f108 0134 	add.w	r1, r8, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	f040 8085 	bne.w	80166c8 <dir_find+0x144>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80165be:	2301      	movs	r3, #1
 80165c0:	4632      	mov	r2, r6
 80165c2:	f898 0001 	ldrb.w	r0, [r8, #1]
 80165c6:	f7ff f817 	bl	80155f8 <disk_read>
 80165ca:	b140      	cbz	r0, 80165de <dir_find+0x5a>
			fs->winsect = sector;
 80165cc:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 80165d0:	2701      	movs	r7, #1
			fs->winsect = sector;
 80165d2:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
 80165d6:	4638      	mov	r0, r7
 80165d8:	b005      	add	sp, #20
 80165da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 80165de:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];
 80165e2:	6a25      	ldr	r5, [r4, #32]
 80165e4:	782e      	ldrb	r6, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80165e6:	b346      	cbz	r6, 801663a <dir_find+0xb6>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80165e8:	7aeb      	ldrb	r3, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80165ea:	2ee5      	cmp	r6, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80165ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80165f0:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80165f2:	d004      	beq.n	80165fe <dir_find+0x7a>
 80165f4:	071b      	lsls	r3, r3, #28
 80165f6:	d525      	bpl.n	8016644 <dir_find+0xc0>
 80165f8:	2a0f      	cmp	r2, #15
 80165fa:	f000 8092 	beq.w	8016722 <dir_find+0x19e>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80165fe:	f04f 33ff 	mov.w	r3, #4294967295
 8016602:	27ff      	movs	r7, #255	; 0xff
 8016604:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8016606:	6965      	ldr	r5, [r4, #20]
	FATFS *fs = dp->obj.fs;
 8016608:	6823      	ldr	r3, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801660a:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801660c:	69e6      	ldr	r6, [r4, #28]
 801660e:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8016612:	d212      	bcs.n	801663a <dir_find+0xb6>
 8016614:	b18e      	cbz	r6, 801663a <dir_find+0xb6>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8016616:	f3c5 0208 	ubfx	r2, r5, #0, #9
 801661a:	b94a      	cbnz	r2, 8016630 <dir_find+0xac>
		dp->sect++;				/* Next sector */
 801661c:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
 801661e:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8016620:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8016622:	2900      	cmp	r1, #0
 8016624:	d15c      	bne.n	80166e0 <dir_find+0x15c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8016626:	8919      	ldrh	r1, [r3, #8]
 8016628:	ebb1 1f55 	cmp.w	r1, r5, lsr #5
 801662c:	f240 8139 	bls.w	80168a2 <dir_find+0x31e>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8016630:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8016632:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8016634:	4413      	add	r3, r2
 8016636:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
 8016638:	e7b6      	b.n	80165a8 <dir_find+0x24>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801663a:	2704      	movs	r7, #4
}
 801663c:	4638      	mov	r0, r7
 801663e:	b005      	add	sp, #20
 8016640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 8016644:	2a0f      	cmp	r2, #15
 8016646:	d06c      	beq.n	8016722 <dir_find+0x19e>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8016648:	2f00      	cmp	r7, #0
 801664a:	f000 80d8 	beq.w	80167fe <dir_find+0x27a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801664e:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
 8016652:	f017 0701 	ands.w	r7, r7, #1
 8016656:	d1d2      	bne.n	80165fe <dir_find+0x7a>
	} while (--cnt && r == 0);
 8016658:	782a      	ldrb	r2, [r5, #0]
 801665a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 801665e:	429a      	cmp	r2, r3
 8016660:	d1cd      	bne.n	80165fe <dir_find+0x7a>
 8016662:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8016666:	786b      	ldrb	r3, [r5, #1]
 8016668:	429a      	cmp	r2, r3
 801666a:	d1c8      	bne.n	80165fe <dir_find+0x7a>
 801666c:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8016670:	78ab      	ldrb	r3, [r5, #2]
 8016672:	429a      	cmp	r2, r3
 8016674:	d1c3      	bne.n	80165fe <dir_find+0x7a>
 8016676:	78ea      	ldrb	r2, [r5, #3]
 8016678:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 801667c:	429a      	cmp	r2, r3
 801667e:	d1be      	bne.n	80165fe <dir_find+0x7a>
 8016680:	792a      	ldrb	r2, [r5, #4]
 8016682:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8016686:	429a      	cmp	r2, r3
 8016688:	d1b9      	bne.n	80165fe <dir_find+0x7a>
 801668a:	796a      	ldrb	r2, [r5, #5]
 801668c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8016690:	429a      	cmp	r2, r3
 8016692:	d1b4      	bne.n	80165fe <dir_find+0x7a>
 8016694:	79aa      	ldrb	r2, [r5, #6]
 8016696:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 801669a:	429a      	cmp	r2, r3
 801669c:	d1af      	bne.n	80165fe <dir_find+0x7a>
 801669e:	79ea      	ldrb	r2, [r5, #7]
 80166a0:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 80166a4:	429a      	cmp	r2, r3
 80166a6:	d1aa      	bne.n	80165fe <dir_find+0x7a>
 80166a8:	7a2a      	ldrb	r2, [r5, #8]
 80166aa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80166ae:	429a      	cmp	r2, r3
 80166b0:	d1a5      	bne.n	80165fe <dir_find+0x7a>
 80166b2:	7a6a      	ldrb	r2, [r5, #9]
 80166b4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80166b8:	429a      	cmp	r2, r3
 80166ba:	d1a0      	bne.n	80165fe <dir_find+0x7a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80166bc:	7aaa      	ldrb	r2, [r5, #10]
 80166be:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80166c2:	429a      	cmp	r2, r3
 80166c4:	d19b      	bne.n	80165fe <dir_find+0x7a>
 80166c6:	e786      	b.n	80165d6 <dir_find+0x52>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80166c8:	2301      	movs	r3, #1
 80166ca:	462a      	mov	r2, r5
 80166cc:	f898 0001 	ldrb.w	r0, [r8, #1]
 80166d0:	9100      	str	r1, [sp, #0]
 80166d2:	f7fe ffa1 	bl	8015618 <disk_write>
 80166d6:	9900      	ldr	r1, [sp, #0]
 80166d8:	2800      	cmp	r0, #0
 80166da:	d06d      	beq.n	80167b8 <dir_find+0x234>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80166dc:	2701      	movs	r7, #1
 80166de:	e77a      	b.n	80165d6 <dir_find+0x52>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80166e0:	8958      	ldrh	r0, [r3, #10]
 80166e2:	3801      	subs	r0, #1
 80166e4:	ea10 2055 	ands.w	r0, r0, r5, lsr #9
 80166e8:	d1a2      	bne.n	8016630 <dir_find+0xac>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80166ea:	4618      	mov	r0, r3
 80166ec:	9201      	str	r2, [sp, #4]
 80166ee:	9300      	str	r3, [sp, #0]
 80166f0:	f7ff fb22 	bl	8015d38 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80166f4:	2801      	cmp	r0, #1
 80166f6:	f240 80d8 	bls.w	80168aa <dir_find+0x326>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80166fa:	1c43      	adds	r3, r0, #1
 80166fc:	d0ee      	beq.n	80166dc <dir_find+0x158>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80166fe:	9b00      	ldr	r3, [sp, #0]
 8016700:	6999      	ldr	r1, [r3, #24]
 8016702:	4288      	cmp	r0, r1
 8016704:	f080 80cd 	bcs.w	80168a2 <dir_find+0x31e>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016708:	3902      	subs	r1, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 801670a:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 801670c:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801670e:	9a01      	ldr	r2, [sp, #4]
 8016710:	4288      	cmp	r0, r1
 8016712:	f080 80cc 	bcs.w	80168ae <dir_find+0x32a>
	return clst * fs->csize + fs->database;
 8016716:	8959      	ldrh	r1, [r3, #10]
 8016718:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 801671a:	fb00 6601 	mla	r6, r0, r1, r6
				dp->sect = clust2sect(fs, clst);
 801671e:	61e6      	str	r6, [r4, #28]
 8016720:	e786      	b.n	8016630 <dir_find+0xac>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8016722:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8016726:	0658      	lsls	r0, r3, #25
 8016728:	f53f af6d 	bmi.w	8016606 <dir_find+0x82>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801672c:	0671      	lsls	r1, r6, #25
 801672e:	f140 80b3 	bpl.w	8016898 <dir_find+0x314>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8016732:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8016734:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 8016738:	f895 900d 	ldrb.w	r9, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801673c:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801673e:	7b6b      	ldrb	r3, [r5, #13]
 8016740:	454b      	cmp	r3, r9
 8016742:	f040 80ac 	bne.w	801689e <dir_find+0x31a>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8016746:	8b6b      	ldrh	r3, [r5, #26]
 8016748:	2b00      	cmp	r3, #0
 801674a:	f040 80a8 	bne.w	801689e <dir_find+0x31a>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801674e:	782f      	ldrb	r7, [r5, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8016750:	2101      	movs	r1, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8016752:	f8d8 200c 	ldr.w	r2, [r8, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8016756:	f007 073f 	and.w	r7, r7, #63	; 0x3f
 801675a:	f8df a17c 	ldr.w	sl, [pc, #380]	; 80168d8 <dir_find+0x354>
 801675e:	9602      	str	r6, [sp, #8]
 8016760:	462e      	mov	r6, r5
 8016762:	3f01      	subs	r7, #1
 8016764:	f10a 0b0d 	add.w	fp, sl, #13
 8016768:	4615      	mov	r5, r2
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801676a:	9203      	str	r2, [sp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801676c:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8016770:	f8cd 8000 	str.w	r8, [sp]
 8016774:	9401      	str	r4, [sp, #4]
 8016776:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801677a:	e010      	b.n	801679e <dir_find+0x21a>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801677c:	2ffe      	cmp	r7, #254	; 0xfe
 801677e:	4620      	mov	r0, r4
 8016780:	d816      	bhi.n	80167b0 <dir_find+0x22c>
 8016782:	f7fe fed1 	bl	8015528 <ff_wtoupper>
 8016786:	4680      	mov	r8, r0
 8016788:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
 801678c:	3701      	adds	r7, #1
 801678e:	f7fe fecb 	bl	8015528 <ff_wtoupper>
 8016792:	4580      	cmp	r8, r0
 8016794:	4621      	mov	r1, r4
 8016796:	d10b      	bne.n	80167b0 <dir_find+0x22c>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8016798:	45d3      	cmp	fp, sl
 801679a:	f000 808a 	beq.w	80168b2 <dir_find+0x32e>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801679e:	f81a 3b01 	ldrb.w	r3, [sl], #1
 80167a2:	5af4      	ldrh	r4, [r6, r3]
		if (wc) {
 80167a4:	2900      	cmp	r1, #0
 80167a6:	d1e9      	bne.n	801677c <dir_find+0x1f8>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80167a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80167ac:	429c      	cmp	r4, r3
 80167ae:	d0f3      	beq.n	8016798 <dir_find+0x214>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80167b0:	e9dd 8400 	ldrd	r8, r4, [sp]
 80167b4:	27ff      	movs	r7, #255	; 0xff
 80167b6:	e726      	b.n	8016606 <dir_find+0x82>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80167b8:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
 80167bc:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80167c0:	1aea      	subs	r2, r5, r3
 80167c2:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80167c6:	429a      	cmp	r2, r3
 80167c8:	f4bf aef9 	bcs.w	80165be <dir_find+0x3a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80167cc:	f898 a002 	ldrb.w	sl, [r8, #2]
 80167d0:	f1ba 0f01 	cmp.w	sl, #1
 80167d4:	f67f aef3 	bls.w	80165be <dir_find+0x3a>
 80167d8:	468b      	mov	fp, r1
 80167da:	e001      	b.n	80167e0 <dir_find+0x25c>
					wsect += fs->fsize;
 80167dc:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80167e0:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80167e2:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80167e6:	2301      	movs	r3, #1
 80167e8:	4659      	mov	r1, fp
 80167ea:	462a      	mov	r2, r5
 80167ec:	f898 0001 	ldrb.w	r0, [r8, #1]
 80167f0:	f7fe ff12 	bl	8015618 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80167f4:	f1ba 0f01 	cmp.w	sl, #1
 80167f8:	d1f0      	bne.n	80167dc <dir_find+0x258>
 80167fa:	4659      	mov	r1, fp
 80167fc:	e6df      	b.n	80165be <dir_find+0x3a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80167fe:	782a      	ldrb	r2, [r5, #0]
 8016800:	7869      	ldrb	r1, [r5, #1]
 8016802:	01d0      	lsls	r0, r2, #7
 8016804:	78ae      	ldrb	r6, [r5, #2]
 8016806:	78eb      	ldrb	r3, [r5, #3]
 8016808:	ea40 0052 	orr.w	r0, r0, r2, lsr #1
 801680c:	792a      	ldrb	r2, [r5, #4]
 801680e:	f895 a005 	ldrb.w	sl, [r5, #5]
 8016812:	4408      	add	r0, r1
 8016814:	f895 e006 	ldrb.w	lr, [r5, #6]
 8016818:	f895 c007 	ldrb.w	ip, [r5, #7]
 801681c:	f3c0 0146 	ubfx	r1, r0, #1, #7
 8016820:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
 8016824:	7a68      	ldrb	r0, [r5, #9]
 8016826:	fa56 f181 	uxtab	r1, r6, r1
 801682a:	7a2e      	ldrb	r6, [r5, #8]
 801682c:	f3c1 0b46 	ubfx	fp, r1, #1, #7
 8016830:	ea4b 1bc1 	orr.w	fp, fp, r1, lsl #7
 8016834:	7aa9      	ldrb	r1, [r5, #10]
 8016836:	fa53 fb8b 	uxtab	fp, r3, fp
 801683a:	f3cb 0346 	ubfx	r3, fp, #1, #7
 801683e:	ea43 13cb 	orr.w	r3, r3, fp, lsl #7
 8016842:	fa52 f383 	uxtab	r3, r2, r3
 8016846:	f3c3 0246 	ubfx	r2, r3, #1, #7
 801684a:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 801684e:	fa5a f282 	uxtab	r2, sl, r2
 8016852:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8016856:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801685a:	fa5e f383 	uxtab	r3, lr, r3
 801685e:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8016862:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8016866:	fa5c f282 	uxtab	r2, ip, r2
 801686a:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801686e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8016872:	fa56 f383 	uxtab	r3, r6, r3
 8016876:	f3c3 0246 	ubfx	r2, r3, #1, #7
 801687a:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 801687e:	fa50 f282 	uxtab	r2, r0, r2
 8016882:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8016886:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801688a:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801688e:	b2db      	uxtb	r3, r3
 8016890:	4599      	cmp	r9, r3
 8016892:	f47f aedc 	bne.w	801664e <dir_find+0xca>
 8016896:	e69e      	b.n	80165d6 <dir_find+0x52>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8016898:	42b7      	cmp	r7, r6
 801689a:	f43f af50 	beq.w	801673e <dir_find+0x1ba>
 801689e:	27ff      	movs	r7, #255	; 0xff
 80168a0:	e6b1      	b.n	8016606 <dir_find+0x82>
				dp->sect = 0; return FR_NO_FILE;
 80168a2:	2300      	movs	r3, #0
 80168a4:	2704      	movs	r7, #4
 80168a6:	61e3      	str	r3, [r4, #28]
	} while (res == FR_OK);
 80168a8:	e695      	b.n	80165d6 <dir_find+0x52>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80168aa:	2702      	movs	r7, #2
 80168ac:	e693      	b.n	80165d6 <dir_find+0x52>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80168ae:	4616      	mov	r6, r2
 80168b0:	e735      	b.n	801671e <dir_find+0x19a>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80168b2:	4635      	mov	r5, r6
 80168b4:	f8dd 8000 	ldr.w	r8, [sp]
 80168b8:	782b      	ldrb	r3, [r5, #0]
 80168ba:	065a      	lsls	r2, r3, #25
 80168bc:	e9dd 4601 	ldrd	r4, r6, [sp, #4]
 80168c0:	d500      	bpl.n	80168c4 <dir_find+0x340>
 80168c2:	b911      	cbnz	r1, 80168ca <dir_find+0x346>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80168c4:	3e01      	subs	r6, #1
 80168c6:	b2f7      	uxtb	r7, r6
 80168c8:	e69d      	b.n	8016606 <dir_find+0x82>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80168ca:	9b03      	ldr	r3, [sp, #12]
 80168cc:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d0f7      	beq.n	80168c4 <dir_find+0x340>
 80168d4:	e7e3      	b.n	801689e <dir_find+0x31a>
 80168d6:	bf00      	nop
 80168d8:	080997c4 	.word	0x080997c4

080168dc <follow_path>:
{
 80168dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80168e0:	780b      	ldrb	r3, [r1, #0]
{
 80168e2:	b083      	sub	sp, #12
 80168e4:	4688      	mov	r8, r1
 80168e6:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80168e8:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
 80168ea:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80168ee:	d103      	bne.n	80168f8 <follow_path+0x1c>
 80168f0:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 80168f4:	2b2f      	cmp	r3, #47	; 0x2f
 80168f6:	d0fb      	beq.n	80168f0 <follow_path+0x14>
 80168f8:	2b5c      	cmp	r3, #92	; 0x5c
 80168fa:	d0f9      	beq.n	80168f0 <follow_path+0x14>
		obj->sclust = 0;					/* Start from root directory */
 80168fc:	2100      	movs	r1, #0
 80168fe:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8016900:	f898 3000 	ldrb.w	r3, [r8]
 8016904:	2b1f      	cmp	r3, #31
 8016906:	f240 8147 	bls.w	8016b98 <follow_path+0x2bc>
 801690a:	465a      	mov	r2, fp
		if (w < ' ') break;				/* Break if end of the path name */
 801690c:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801690e:	68d5      	ldr	r5, [r2, #12]
		w = p[si++];					/* Get a character */
 8016910:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
 8016912:	d929      	bls.n	8016968 <follow_path+0x8c>
 8016914:	f1a5 0902 	sub.w	r9, r5, #2
 8016918:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
 801691a:	2401      	movs	r4, #1
 801691c:	e008      	b.n	8016930 <follow_path+0x54>
		lfn[di++] = w;					/* Store the Unicode character */
 801691e:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
 8016922:	1c63      	adds	r3, r4, #1
 8016924:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 8016928:	281f      	cmp	r0, #31
 801692a:	f240 80f6 	bls.w	8016b1a <follow_path+0x23e>
		w = p[si++];					/* Get a character */
 801692e:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8016930:	282f      	cmp	r0, #47	; 0x2f
 8016932:	f104 3aff 	add.w	sl, r4, #4294967295
 8016936:	d01d      	beq.n	8016974 <follow_path+0x98>
 8016938:	285c      	cmp	r0, #92	; 0x5c
 801693a:	d01b      	beq.n	8016974 <follow_path+0x98>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801693c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8016940:	d00e      	beq.n	8016960 <follow_path+0x84>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8016942:	2101      	movs	r1, #1
 8016944:	f7fe fdd2 	bl	80154ec <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8016948:	b150      	cbz	r0, 8016960 <follow_path+0x84>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801694a:	287f      	cmp	r0, #127	; 0x7f
 801694c:	d8e7      	bhi.n	801691e <follow_path+0x42>
	while (*str && *str != chr) str++;
 801694e:	2322      	movs	r3, #34	; 0x22
 8016950:	4aa5      	ldr	r2, [pc, #660]	; (8016be8 <follow_path+0x30c>)
 8016952:	e003      	b.n	801695c <follow_path+0x80>
 8016954:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8016958:	2b00      	cmp	r3, #0
 801695a:	d0e0      	beq.n	801691e <follow_path+0x42>
 801695c:	4298      	cmp	r0, r3
 801695e:	d1f9      	bne.n	8016954 <follow_path+0x78>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8016960:	2006      	movs	r0, #6
}
 8016962:	b003      	add	sp, #12
 8016964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
 8016968:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801696a:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
 801696c:	802b      	strh	r3, [r5, #0]
}
 801696e:	b003      	add	sp, #12
 8016970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8016974:	f818 3004 	ldrb.w	r3, [r8, r4]
 8016978:	eb08 0204 	add.w	r2, r8, r4
 801697c:	2b2f      	cmp	r3, #47	; 0x2f
 801697e:	d002      	beq.n	8016986 <follow_path+0xaa>
 8016980:	2b5c      	cmp	r3, #92	; 0x5c
 8016982:	f040 811e 	bne.w	8016bc2 <follow_path+0x2e6>
 8016986:	1c63      	adds	r3, r4, #1
 8016988:	4443      	add	r3, r8
 801698a:	4698      	mov	r8, r3
 801698c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016990:	2a2f      	cmp	r2, #47	; 0x2f
 8016992:	d0fa      	beq.n	801698a <follow_path+0xae>
 8016994:	2a5c      	cmp	r2, #92	; 0x5c
 8016996:	d0f8      	beq.n	801698a <follow_path+0xae>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8016998:	f1ba 0f00 	cmp.w	sl, #0
 801699c:	d0e4      	beq.n	8016968 <follow_path+0x8c>
 801699e:	2603      	movs	r6, #3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80169a0:	2400      	movs	r4, #0
 80169a2:	eb05 024a 	add.w	r2, r5, sl, lsl #1
 80169a6:	e002      	b.n	80169ae <follow_path+0xd2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80169a8:	f1ba 0a01 	subs.w	sl, sl, #1
 80169ac:	d0dc      	beq.n	8016968 <follow_path+0x8c>
		w = lfn[di - 1];
 80169ae:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 80169b2:	2b20      	cmp	r3, #32
 80169b4:	d0f8      	beq.n	80169a8 <follow_path+0xcc>
 80169b6:	2b2e      	cmp	r3, #46	; 0x2e
 80169b8:	d0f6      	beq.n	80169a8 <follow_path+0xcc>
		*d++ = (BYTE)val;
 80169ba:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 80169be:	2100      	movs	r1, #0
		*d++ = (BYTE)val;
 80169c0:	f242 0220 	movw	r2, #8224	; 0x2020
	lfn[di] = 0;						/* LFN is created */
 80169c4:	f825 101a 	strh.w	r1, [r5, sl, lsl #1]
		*d++ = (BYTE)val;
 80169c8:	627b      	str	r3, [r7, #36]	; 0x24
 80169ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80169cc:	2320      	movs	r3, #32
 80169ce:	85ba      	strh	r2, [r7, #44]	; 0x2c
 80169d0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80169d4:	8828      	ldrh	r0, [r5, #0]
 80169d6:	282e      	cmp	r0, #46	; 0x2e
 80169d8:	d002      	beq.n	80169e0 <follow_path+0x104>
 80169da:	4298      	cmp	r0, r3
 80169dc:	f040 80e5 	bne.w	8016baa <follow_path+0x2ce>
 80169e0:	462a      	mov	r2, r5
 80169e2:	2300      	movs	r3, #0
 80169e4:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 80169e8:	461c      	mov	r4, r3
 80169ea:	3301      	adds	r3, #1
 80169ec:	2820      	cmp	r0, #32
 80169ee:	d0f9      	beq.n	80169e4 <follow_path+0x108>
 80169f0:	282e      	cmp	r0, #46	; 0x2e
 80169f2:	d0f7      	beq.n	80169e4 <follow_path+0x108>
		w = lfn[si++];					/* Get an LFN character */
 80169f4:	3402      	adds	r4, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80169f6:	eb05 034a 	add.w	r3, r5, sl, lsl #1
 80169fa:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 80169fe:	2a2e      	cmp	r2, #46	; 0x2e
 8016a00:	d002      	beq.n	8016a08 <follow_path+0x12c>
 8016a02:	f1ba 0a01 	subs.w	sl, sl, #1
 8016a06:	d1f8      	bne.n	80169fa <follow_path+0x11e>
		if (!w) break;					/* Break on end of the LFN */
 8016a08:	b3b0      	cbz	r0, 8016a78 <follow_path+0x19c>
 8016a0a:	2208      	movs	r2, #8
 8016a0c:	4641      	mov	r1, r8
 8016a0e:	2300      	movs	r3, #0
 8016a10:	46b8      	mov	r8, r7
 8016a12:	462f      	mov	r7, r5
 8016a14:	4615      	mov	r5, r2
 8016a16:	4699      	mov	r9, r3
 8016a18:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8016a1a:	2820      	cmp	r0, #32
 8016a1c:	d003      	beq.n	8016a26 <follow_path+0x14a>
 8016a1e:	282e      	cmp	r0, #46	; 0x2e
 8016a20:	d14d      	bne.n	8016abe <follow_path+0x1e2>
 8016a22:	45a2      	cmp	sl, r4
 8016a24:	d04b      	beq.n	8016abe <follow_path+0x1e2>
			cf |= NS_LOSS | NS_LFN; continue;
 8016a26:	f046 0603 	orr.w	r6, r6, #3
 8016a2a:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN character */
 8016a2c:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 8016a30:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
 8016a32:	2800      	cmp	r0, #0
 8016a34:	d1f1      	bne.n	8016a1a <follow_path+0x13e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8016a36:	4647      	mov	r7, r8
 8016a38:	4690      	mov	r8, r2
 8016a3a:	462a      	mov	r2, r5
 8016a3c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8016a40:	29e5      	cmp	r1, #229	; 0xe5
 8016a42:	d102      	bne.n	8016a4a <follow_path+0x16e>
 8016a44:	2105      	movs	r1, #5
 8016a46:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 8016a4a:	2a08      	cmp	r2, #8
 8016a4c:	f000 8093 	beq.w	8016b76 <follow_path+0x29a>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8016a50:	f003 020c 	and.w	r2, r3, #12
 8016a54:	2a0c      	cmp	r2, #12
 8016a56:	d065      	beq.n	8016b24 <follow_path+0x248>
 8016a58:	f003 0303 	and.w	r3, r3, #3
 8016a5c:	2b03      	cmp	r3, #3
 8016a5e:	d061      	beq.n	8016b24 <follow_path+0x248>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8016a60:	07b1      	lsls	r1, r6, #30
 8016a62:	d409      	bmi.n	8016a78 <follow_path+0x19c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8016a64:	2b01      	cmp	r3, #1
 8016a66:	d102      	bne.n	8016a6e <follow_path+0x192>
 8016a68:	f046 0610 	orr.w	r6, r6, #16
 8016a6c:	b2f6      	uxtb	r6, r6
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8016a6e:	2a04      	cmp	r2, #4
 8016a70:	d102      	bne.n	8016a78 <follow_path+0x19c>
 8016a72:	f046 0608 	orr.w	r6, r6, #8
 8016a76:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
 8016a78:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8016a7a:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 8016a7e:	f7ff fd81 	bl	8016584 <dir_find>
			ns = dp->fn[NSFLAG];
 8016a82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8016a86:	2800      	cmp	r0, #0
 8016a88:	d158      	bne.n	8016b3c <follow_path+0x260>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016a8a:	075a      	lsls	r2, r3, #29
 8016a8c:	f53f af69 	bmi.w	8016962 <follow_path+0x86>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8016a90:	79bb      	ldrb	r3, [r7, #6]
 8016a92:	06db      	lsls	r3, r3, #27
 8016a94:	f140 8097 	bpl.w	8016bc6 <follow_path+0x2ea>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8016a98:	697a      	ldr	r2, [r7, #20]
 8016a9a:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
 8016a9e:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8016aa2:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
 8016aa6:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8016aa8:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
 8016aaa:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8016aac:	d102      	bne.n	8016ab4 <follow_path+0x1d8>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8016aae:	8a9b      	ldrh	r3, [r3, #20]
 8016ab0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8016ab4:	60ba      	str	r2, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8016ab6:	683a      	ldr	r2, [r7, #0]
		w = p[si++];					/* Get a character */
 8016ab8:	f898 3000 	ldrb.w	r3, [r8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016abc:	e726      	b.n	801690c <follow_path+0x30>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8016abe:	454d      	cmp	r5, r9
 8016ac0:	d91c      	bls.n	8016afc <follow_path+0x220>
 8016ac2:	ebaa 0104 	sub.w	r1, sl, r4
 8016ac6:	fab1 f181 	clz	r1, r1
 8016aca:	0949      	lsrs	r1, r1, #5
 8016acc:	b9b1      	cbnz	r1, 8016afc <follow_path+0x220>
		if (w >= 0x80) {				/* Non ASCII character */
 8016ace:	287f      	cmp	r0, #127	; 0x7f
 8016ad0:	d83c      	bhi.n	8016b4c <follow_path+0x270>
	while (*str && *str != chr) str++;
 8016ad2:	212b      	movs	r1, #43	; 0x2b
 8016ad4:	f8df c118 	ldr.w	ip, [pc, #280]	; 8016bf0 <follow_path+0x314>
 8016ad8:	e003      	b.n	8016ae2 <follow_path+0x206>
 8016ada:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 8016ade:	2900      	cmp	r1, #0
 8016ae0:	d052      	beq.n	8016b88 <follow_path+0x2ac>
 8016ae2:	4281      	cmp	r1, r0
 8016ae4:	d1f9      	bne.n	8016ada <follow_path+0x1fe>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8016ae6:	f046 0603 	orr.w	r6, r6, #3
 8016aea:	205f      	movs	r0, #95	; 0x5f
 8016aec:	b2f6      	uxtb	r6, r6
		dp->fn[i++] = (BYTE)w;
 8016aee:	eb08 0109 	add.w	r1, r8, r9
 8016af2:	f109 0901 	add.w	r9, r9, #1
 8016af6:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 8016afa:	e797      	b.n	8016a2c <follow_path+0x150>
			if (ni == 11) {				/* Long extension */
 8016afc:	2d0b      	cmp	r5, #11
 8016afe:	d064      	beq.n	8016bca <follow_path+0x2ee>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8016b00:	45a2      	cmp	sl, r4
 8016b02:	d003      	beq.n	8016b0c <follow_path+0x230>
 8016b04:	f046 0603 	orr.w	r6, r6, #3
 8016b08:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
 8016b0a:	d394      	bcc.n	8016a36 <follow_path+0x15a>
			b <<= 2; continue;
 8016b0c:	009b      	lsls	r3, r3, #2
 8016b0e:	4654      	mov	r4, sl
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8016b10:	250b      	movs	r5, #11
 8016b12:	f04f 0908 	mov.w	r9, #8
			b <<= 2; continue;
 8016b16:	b2db      	uxtb	r3, r3
 8016b18:	e788      	b.n	8016a2c <follow_path+0x150>
	*path = &p[si];						/* Return pointer to the next segment */
 8016b1a:	46a2      	mov	sl, r4
 8016b1c:	4498      	add	r8, r3
 8016b1e:	2607      	movs	r6, #7
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8016b20:	2404      	movs	r4, #4
 8016b22:	e73e      	b.n	80169a2 <follow_path+0xc6>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8016b24:	f046 0602 	orr.w	r6, r6, #2
			res = dir_find(dp);				/* Find an object with the segment name */
 8016b28:	4638      	mov	r0, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8016b2a:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8016b2c:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 8016b30:	f7ff fd28 	bl	8016584 <dir_find>
			ns = dp->fn[NSFLAG];
 8016b34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8016b38:	2800      	cmp	r0, #0
 8016b3a:	d0a6      	beq.n	8016a8a <follow_path+0x1ae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8016b3c:	2804      	cmp	r0, #4
 8016b3e:	f47f af10 	bne.w	8016962 <follow_path+0x86>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8016b42:	f013 0f04 	tst.w	r3, #4
 8016b46:	bf08      	it	eq
 8016b48:	2005      	moveq	r0, #5
 8016b4a:	e70a      	b.n	8016962 <follow_path+0x86>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8016b4c:	e9cd 3200 	strd	r3, r2, [sp]
 8016b50:	f7fe fccc 	bl	80154ec <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8016b54:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016b58:	b918      	cbnz	r0, 8016b62 <follow_path+0x286>
			cf |= NS_LFN;				/* Force create LFN entry */
 8016b5a:	f046 0602 	orr.w	r6, r6, #2
 8016b5e:	b2f6      	uxtb	r6, r6
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8016b60:	e7c1      	b.n	8016ae6 <follow_path+0x20a>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8016b62:	4922      	ldr	r1, [pc, #136]	; (8016bec <follow_path+0x310>)
			cf |= NS_LFN;				/* Force create LFN entry */
 8016b64:	f046 0602 	orr.w	r6, r6, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8016b68:	4408      	add	r0, r1
			cf |= NS_LFN;				/* Force create LFN entry */
 8016b6a:	b2f6      	uxtb	r6, r6
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8016b6c:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8016b70:	2800      	cmp	r0, #0
 8016b72:	d0b8      	beq.n	8016ae6 <follow_path+0x20a>
 8016b74:	e7ad      	b.n	8016ad2 <follow_path+0x1f6>
	if (ni == 8) b <<= 2;
 8016b76:	009a      	lsls	r2, r3, #2
 8016b78:	f002 020c 	and.w	r2, r2, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8016b7c:	2a0c      	cmp	r2, #12
 8016b7e:	d0d1      	beq.n	8016b24 <follow_path+0x248>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8016b80:	07b0      	lsls	r0, r6, #30
 8016b82:	f57f af74 	bpl.w	8016a6e <follow_path+0x192>
 8016b86:	e777      	b.n	8016a78 <follow_path+0x19c>
				if (IsUpper(w)) {		/* ASCII large capital */
 8016b88:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8016b8c:	2919      	cmp	r1, #25
 8016b8e:	d80f      	bhi.n	8016bb0 <follow_path+0x2d4>
					b |= 2;
 8016b90:	f043 0302 	orr.w	r3, r3, #2
		dp->fn[i++] = (BYTE)w;
 8016b94:	b2c0      	uxtb	r0, r0
 8016b96:	e7aa      	b.n	8016aee <follow_path+0x212>
		dp->fn[NSFLAG] = NS_NONAME;
 8016b98:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 8016b9a:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 8016b9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 8016ba0:	b003      	add	sp, #12
 8016ba2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 8016ba6:	f7ff bc41 	b.w	801642c <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8016baa:	4626      	mov	r6, r4
 8016bac:	2401      	movs	r4, #1
 8016bae:	e722      	b.n	80169f6 <follow_path+0x11a>
					if (IsLower(w)) {	/* ASCII small capital */
 8016bb0:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 8016bb4:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 8016bb6:	bf9c      	itt	ls
 8016bb8:	3820      	subls	r0, #32
 8016bba:	f043 0301 	orrls.w	r3, r3, #1
		dp->fn[i++] = (BYTE)w;
 8016bbe:	b2c0      	uxtb	r0, r0
 8016bc0:	e795      	b.n	8016aee <follow_path+0x212>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8016bc2:	4690      	mov	r8, r2
 8016bc4:	e6e8      	b.n	8016998 <follow_path+0xbc>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8016bc6:	2005      	movs	r0, #5
 8016bc8:	e6cb      	b.n	8016962 <follow_path+0x86>
				cf |= NS_LOSS | NS_LFN; break;
 8016bca:	4647      	mov	r7, r8
 8016bcc:	4690      	mov	r8, r2
 8016bce:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8016bd2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
				cf |= NS_LOSS | NS_LFN; break;
 8016bd6:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8016bd8:	2ae5      	cmp	r2, #229	; 0xe5
 8016bda:	f47f af39 	bne.w	8016a50 <follow_path+0x174>
 8016bde:	2205      	movs	r2, #5
 8016be0:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 8016be4:	e734      	b.n	8016a50 <follow_path+0x174>
 8016be6:	bf00      	nop
 8016be8:	08099730 	.word	0x08099730
 8016bec:	08099744 	.word	0x08099744
 8016bf0:	0809973c 	.word	0x0809973c

08016bf4 <dir_next>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8016bf4:	69c3      	ldr	r3, [r0, #28]
{
 8016bf6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8016bfa:	6945      	ldr	r5, [r0, #20]
{
 8016bfc:	b085      	sub	sp, #20
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d03c      	beq.n	8016c7c <dir_next+0x88>
 8016c02:	3520      	adds	r5, #32
 8016c04:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8016c08:	d238      	bcs.n	8016c7c <dir_next+0x88>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8016c0a:	f3c5 0808 	ubfx	r8, r5, #0, #9
 8016c0e:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8016c10:	6807      	ldr	r7, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8016c12:	f1b8 0f00 	cmp.w	r8, #0
 8016c16:	d008      	beq.n	8016c2a <dir_next+0x36>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8016c18:	f107 0634 	add.w	r6, r7, #52	; 0x34
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8016c1c:	4446      	add	r6, r8
	return FR_OK;
 8016c1e:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 8016c20:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8016c22:	6226      	str	r6, [r4, #32]
}
 8016c24:	b005      	add	sp, #20
 8016c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->sect++;				/* Next sector */
 8016c2a:	460e      	mov	r6, r1
 8016c2c:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 8016c2e:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 8016c30:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8016c32:	b339      	cbz	r1, 8016c84 <dir_next+0x90>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8016c34:	897b      	ldrh	r3, [r7, #10]
 8016c36:	3b01      	subs	r3, #1
 8016c38:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 8016c3c:	9300      	str	r3, [sp, #0]
 8016c3e:	d1eb      	bne.n	8016c18 <dir_next+0x24>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8016c40:	4638      	mov	r0, r7
 8016c42:	f7ff f879 	bl	8015d38 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8016c46:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8016c48:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8016c4a:	d923      	bls.n	8016c94 <dir_next+0xa0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8016c4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016c50:	d022      	beq.n	8016c98 <dir_next+0xa4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8016c52:	69bb      	ldr	r3, [r7, #24]
 8016c54:	4283      	cmp	r3, r0
 8016c56:	d921      	bls.n	8016c9c <dir_next+0xa8>
	clst -= 2;
 8016c58:	1e82      	subs	r2, r0, #2
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8016c5a:	f107 0634 	add.w	r6, r7, #52	; 0x34
 8016c5e:	4611      	mov	r1, r2
	clst -= 2;
 8016c60:	9201      	str	r2, [sp, #4]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016c62:	3b02      	subs	r3, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 8016c64:	f8c4 9018 	str.w	r9, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016c68:	428b      	cmp	r3, r1
 8016c6a:	d904      	bls.n	8016c76 <dir_next+0x82>
	return clst * fs->csize + fs->database;
 8016c6c:	897a      	ldrh	r2, [r7, #10]
 8016c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c70:	fb01 3302 	mla	r3, r1, r2, r3
 8016c74:	9300      	str	r3, [sp, #0]
				dp->sect = clust2sect(fs, clst);
 8016c76:	9b00      	ldr	r3, [sp, #0]
 8016c78:	61e3      	str	r3, [r4, #28]
 8016c7a:	e7cf      	b.n	8016c1c <dir_next+0x28>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8016c7c:	2004      	movs	r0, #4
}
 8016c7e:	b005      	add	sp, #20
 8016c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8016c84:	893b      	ldrh	r3, [r7, #8]
 8016c86:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8016c8a:	d8c5      	bhi.n	8016c18 <dir_next+0x24>
				dp->sect = 0; return FR_NO_FILE;
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	2004      	movs	r0, #4
 8016c90:	61e3      	str	r3, [r4, #28]
 8016c92:	e7c7      	b.n	8016c24 <dir_next+0x30>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8016c94:	2002      	movs	r0, #2
 8016c96:	e7c5      	b.n	8016c24 <dir_next+0x30>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8016c98:	2001      	movs	r0, #1
 8016c9a:	e7c3      	b.n	8016c24 <dir_next+0x30>
					if (!stretch) {								/* If no stretch, report EOT */
 8016c9c:	2e00      	cmp	r6, #0
 8016c9e:	d0f5      	beq.n	8016c8c <dir_next+0x98>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8016ca0:	69a1      	ldr	r1, [r4, #24]
 8016ca2:	4620      	mov	r0, r4
 8016ca4:	f7ff fb02 	bl	80162ac <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8016ca8:	4681      	mov	r9, r0
 8016caa:	2800      	cmp	r0, #0
 8016cac:	d05c      	beq.n	8016d68 <dir_next+0x174>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8016cae:	2801      	cmp	r0, #1
 8016cb0:	d0f0      	beq.n	8016c94 <dir_next+0xa0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8016cb2:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016cb6:	d0ef      	beq.n	8016c98 <dir_next+0xa4>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8016cb8:	78fb      	ldrb	r3, [r7, #3]
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d156      	bne.n	8016d6c <dir_next+0x178>
 8016cbe:	f107 0b34 	add.w	fp, r7, #52	; 0x34
		*d++ = (BYTE)val;
 8016cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016cc6:	2100      	movs	r1, #0
 8016cc8:	4658      	mov	r0, fp
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8016cca:	465e      	mov	r6, fp
		*d++ = (BYTE)val;
 8016ccc:	f00f fc59 	bl	8026582 <memset>
	clst -= 2;
 8016cd0:	f1a9 0202 	sub.w	r2, r9, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016cd4:	69bb      	ldr	r3, [r7, #24]
	clst -= 2;
 8016cd6:	4611      	mov	r1, r2
 8016cd8:	9201      	str	r2, [sp, #4]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016cda:	1e9a      	subs	r2, r3, #2
 8016cdc:	4291      	cmp	r1, r2
 8016cde:	d268      	bcs.n	8016db2 <dir_next+0x1be>
	return clst * fs->csize + fs->database;
 8016ce0:	4608      	mov	r0, r1
 8016ce2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016ce4:	8979      	ldrh	r1, [r7, #10]
 8016ce6:	fb00 2201 	mla	r2, r0, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8016cea:	633a      	str	r2, [r7, #48]	; 0x30
 8016cec:	2900      	cmp	r1, #0
 8016cee:	d037      	beq.n	8016d60 <dir_next+0x16c>
 8016cf0:	2300      	movs	r3, #0
						fs->wflag = 1;
 8016cf2:	e9cd 6402 	strd	r6, r4, [sp, #8]
 8016cf6:	465e      	mov	r6, fp
 8016cf8:	461c      	mov	r4, r3
 8016cfa:	46ab      	mov	fp, r5
 8016cfc:	4615      	mov	r5, r2
 8016cfe:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8016d02:	462a      	mov	r2, r5
 8016d04:	4631      	mov	r1, r6
 8016d06:	7878      	ldrb	r0, [r7, #1]
						fs->wflag = 1;
 8016d08:	70fb      	strb	r3, [r7, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8016d0a:	2301      	movs	r3, #1
 8016d0c:	f7fe fc84 	bl	8015618 <disk_write>
 8016d10:	2800      	cmp	r0, #0
 8016d12:	d1c1      	bne.n	8016c98 <dir_next+0xa4>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8016d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
 8016d16:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8016d18:	1aea      	subs	r2, r5, r3
 8016d1a:	69fb      	ldr	r3, [r7, #28]
 8016d1c:	429a      	cmp	r2, r3
 8016d1e:	d212      	bcs.n	8016d46 <dir_next+0x152>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016d20:	f897 a002 	ldrb.w	sl, [r7, #2]
 8016d24:	f1ba 0f01 	cmp.w	sl, #1
 8016d28:	d801      	bhi.n	8016d2e <dir_next+0x13a>
 8016d2a:	e00c      	b.n	8016d46 <dir_next+0x152>
					wsect += fs->fsize;
 8016d2c:	69fb      	ldr	r3, [r7, #28]
 8016d2e:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016d30:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8016d34:	2301      	movs	r3, #1
 8016d36:	4631      	mov	r1, r6
 8016d38:	462a      	mov	r2, r5
 8016d3a:	7878      	ldrb	r0, [r7, #1]
 8016d3c:	f7fe fc6c 	bl	8015618 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016d40:	f1ba 0f01 	cmp.w	sl, #1
 8016d44:	d1f2      	bne.n	8016d2c <dir_next+0x138>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8016d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d48:	3401      	adds	r4, #1
 8016d4a:	1c5d      	adds	r5, r3, #1
 8016d4c:	897b      	ldrh	r3, [r7, #10]
 8016d4e:	42a3      	cmp	r3, r4
 8016d50:	633d      	str	r5, [r7, #48]	; 0x30
 8016d52:	d8d4      	bhi.n	8016cfe <dir_next+0x10a>
 8016d54:	462a      	mov	r2, r5
 8016d56:	4621      	mov	r1, r4
 8016d58:	465d      	mov	r5, fp
 8016d5a:	69bb      	ldr	r3, [r7, #24]
 8016d5c:	e9dd 6402 	ldrd	r6, r4, [sp, #8]
					fs->winsect -= n;							/* Restore window offset */
 8016d60:	1a52      	subs	r2, r2, r1
 8016d62:	9901      	ldr	r1, [sp, #4]
 8016d64:	633a      	str	r2, [r7, #48]	; 0x30
 8016d66:	e77c      	b.n	8016c62 <dir_next+0x6e>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8016d68:	2007      	movs	r0, #7
 8016d6a:	e75b      	b.n	8016c24 <dir_next+0x30>
		wsect = fs->winsect;	/* Current sector number */
 8016d6c:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8016d70:	f107 0b34 	add.w	fp, r7, #52	; 0x34
 8016d74:	2301      	movs	r3, #1
 8016d76:	7878      	ldrb	r0, [r7, #1]
 8016d78:	4652      	mov	r2, sl
 8016d7a:	4659      	mov	r1, fp
 8016d7c:	f7fe fc4c 	bl	8015618 <disk_write>
 8016d80:	2800      	cmp	r0, #0
 8016d82:	d189      	bne.n	8016c98 <dir_next+0xa4>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8016d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
 8016d86:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8016d88:	ebaa 0203 	sub.w	r2, sl, r3
 8016d8c:	69fb      	ldr	r3, [r7, #28]
 8016d8e:	429a      	cmp	r2, r3
 8016d90:	d297      	bcs.n	8016cc2 <dir_next+0xce>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016d92:	78be      	ldrb	r6, [r7, #2]
 8016d94:	2e01      	cmp	r6, #1
 8016d96:	d801      	bhi.n	8016d9c <dir_next+0x1a8>
 8016d98:	e793      	b.n	8016cc2 <dir_next+0xce>
 8016d9a:	69fb      	ldr	r3, [r7, #28]
					wsect += fs->fsize;
 8016d9c:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016d9e:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8016da0:	2301      	movs	r3, #1
 8016da2:	4659      	mov	r1, fp
 8016da4:	4652      	mov	r2, sl
 8016da6:	7878      	ldrb	r0, [r7, #1]
 8016da8:	f7fe fc36 	bl	8015618 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016dac:	2e01      	cmp	r6, #1
 8016dae:	d1f4      	bne.n	8016d9a <dir_next+0x1a6>
 8016db0:	e787      	b.n	8016cc2 <dir_next+0xce>
	return clst * fs->csize + fs->database;
 8016db2:	8979      	ldrh	r1, [r7, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016db4:	2200      	movs	r2, #0
 8016db6:	e798      	b.n	8016cea <dir_next+0xf6>

08016db8 <dir_register>:
{
 8016db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8016dbc:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
 8016dc0:	b08b      	sub	sp, #44	; 0x2c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8016dc2:	f013 02a0 	ands.w	r2, r3, #160	; 0xa0
 8016dc6:	9302      	str	r3, [sp, #8]
 8016dc8:	f040 8319 	bne.w	80173fe <dir_register+0x646>
	FATFS *fs = dp->obj.fs;
 8016dcc:	6803      	ldr	r3, [r0, #0]
 8016dce:	4604      	mov	r4, r0
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8016dd0:	f8d3 c00c 	ldr.w	ip, [r3, #12]
	FATFS *fs = dp->obj.fs;
 8016dd4:	9300      	str	r3, [sp, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8016dd6:	f8bc 3000 	ldrh.w	r3, [ip]
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	f000 8478 	beq.w	80176d0 <dir_register+0x918>
 8016de0:	4691      	mov	r9, r2
 8016de2:	4663      	mov	r3, ip
 8016de4:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8016de8:	f109 0901 	add.w	r9, r9, #1
 8016dec:	2a00      	cmp	r2, #0
 8016dee:	d1f9      	bne.n	8016de4 <dir_register+0x2c>
	mem_cpy(sn, dp->fn, 12);
 8016df0:	f104 0624 	add.w	r6, r4, #36	; 0x24
			*d++ = *s++;
 8016df4:	ab0a      	add	r3, sp, #40	; 0x28
 8016df6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8016dfa:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8016dfe:	9b02      	ldr	r3, [sp, #8]
 8016e00:	07dd      	lsls	r5, r3, #31
 8016e02:	f140 8151 	bpl.w	80170a8 <dir_register+0x2f0>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8016e06:	2340      	movs	r3, #64	; 0x40
		for (n = 1; n < 100; n++) {
 8016e08:	2701      	movs	r7, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8016e0a:	f8cd 900c 	str.w	r9, [sp, #12]
 8016e0e:	f04f 0b20 	mov.w	fp, #32
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8016e12:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
			*d++ = *s++;
 8016e16:	460b      	mov	r3, r1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8016e18:	46b9      	mov	r9, r7
			*d++ = *s++;
 8016e1a:	f89d a026 	ldrb.w	sl, [sp, #38]	; 0x26
 8016e1e:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8016e22:	4661      	mov	r1, ip
				if (sr & 0x10000) sr ^= 0x11021;
 8016e24:	4db0      	ldr	r5, [pc, #704]	; (80170e8 <dir_register+0x330>)
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8016e26:	461f      	mov	r7, r3
			*d++ = *s++;
 8016e28:	9001      	str	r0, [sp, #4]
 8016e2a:	9b01      	ldr	r3, [sp, #4]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8016e2c:	f1b9 0f05 	cmp.w	r9, #5
			*d++ = *s++;
 8016e30:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
 8016e34:	f884 a02e 	strb.w	sl, [r4, #46]	; 0x2e
 8016e38:	e9c4 3709 	strd	r3, r7, [r4, #36]	; 0x24
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8016e3c:	f240 8151 	bls.w	80170e2 <dir_register+0x32a>
		while (*lfn) {	/* Create a CRC */
 8016e40:	880a      	ldrh	r2, [r1, #0]
 8016e42:	2a00      	cmp	r2, #0
 8016e44:	f000 814d 	beq.w	80170e2 <dir_register+0x32a>
				sr = (sr << 1) + (wc & 1);
 8016e48:	468c      	mov	ip, r1
 8016e4a:	f002 0101 	and.w	r1, r2, #1
				wc >>= 1;
 8016e4e:	0850      	lsrs	r0, r2, #1
				sr = (sr << 1) + (wc & 1);
 8016e50:	eb01 0149 	add.w	r1, r1, r9, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8016e54:	e009      	b.n	8016e6a <dir_register+0xb2>
				sr = (sr << 1) + (wc & 1);
 8016e56:	f002 0101 	and.w	r1, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8016e5a:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				wc >>= 1;
 8016e5e:	ea4f 0052 	mov.w	r0, r2, lsr #1
				sr = (sr << 1) + (wc & 1);
 8016e62:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8016e66:	bf18      	it	ne
 8016e68:	4069      	eorne	r1, r5
				sr = (sr << 1) + (wc & 1);
 8016e6a:	f000 0e01 	and.w	lr, r0, #1
				wc >>= 1;
 8016e6e:	0893      	lsrs	r3, r2, #2
 8016e70:	08d0      	lsrs	r0, r2, #3
				sr = (sr << 1) + (wc & 1);
 8016e72:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8016e76:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
 8016e78:	f003 0301 	and.w	r3, r3, #1
 8016e7c:	f000 0001 	and.w	r0, r0, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8016e80:	bf48      	it	mi
 8016e82:	ea8e 0e05 	eormi.w	lr, lr, r5
				wc >>= 1;
 8016e86:	0911      	lsrs	r1, r2, #4
				sr = (sr << 1) + (wc & 1);
 8016e88:	eb03 034e 	add.w	r3, r3, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8016e8c:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				sr = (sr << 1) + (wc & 1);
 8016e90:	f001 0101 	and.w	r1, r1, #1
				wc >>= 1;
 8016e94:	ea4f 3ed2 	mov.w	lr, r2, lsr #15
				if (sr & 0x10000) sr ^= 0x11021;
 8016e98:	bf18      	it	ne
 8016e9a:	406b      	eorne	r3, r5
				sr = (sr << 1) + (wc & 1);
 8016e9c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8016ea0:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 8016ea2:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
 8016ea6:	bf48      	it	mi
 8016ea8:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 8016eaa:	f003 0301 	and.w	r3, r3, #1
 8016eae:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8016eb2:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8016eb4:	ea4f 1092 	mov.w	r0, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
 8016eb8:	bf48      	it	mi
 8016eba:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 8016ebc:	f000 0001 	and.w	r0, r0, #1
 8016ec0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8016ec4:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8016ec6:	ea4f 11d2 	mov.w	r1, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
 8016eca:	bf48      	it	mi
 8016ecc:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 8016ece:	f001 0101 	and.w	r1, r1, #1
 8016ed2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8016ed6:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 8016ed8:	ea4f 2312 	mov.w	r3, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
 8016edc:	bf48      	it	mi
 8016ede:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 8016ee0:	f003 0301 	and.w	r3, r3, #1
 8016ee4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8016ee8:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8016eea:	ea4f 2052 	mov.w	r0, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
 8016eee:	bf48      	it	mi
 8016ef0:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 8016ef2:	f000 0001 	and.w	r0, r0, #1
 8016ef6:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8016efa:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8016efc:	ea4f 2192 	mov.w	r1, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
 8016f00:	bf48      	it	mi
 8016f02:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 8016f04:	f001 0101 	and.w	r1, r1, #1
 8016f08:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8016f0c:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 8016f0e:	ea4f 23d2 	mov.w	r3, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
 8016f12:	bf48      	it	mi
 8016f14:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 8016f16:	f003 0301 	and.w	r3, r3, #1
 8016f1a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8016f1e:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8016f20:	ea4f 3012 	mov.w	r0, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
 8016f24:	bf48      	it	mi
 8016f26:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 8016f28:	f000 0001 	and.w	r0, r0, #1
 8016f2c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8016f30:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8016f32:	ea4f 3152 	mov.w	r1, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
 8016f36:	bf48      	it	mi
 8016f38:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 8016f3a:	f001 0101 	and.w	r1, r1, #1
 8016f3e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8016f42:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 8016f44:	ea4f 3392 	mov.w	r3, r2, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
 8016f48:	bf48      	it	mi
 8016f4a:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 8016f4c:	f003 0301 	and.w	r3, r3, #1
 8016f50:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8016f54:	0400      	lsls	r0, r0, #16
 8016f56:	bf48      	it	mi
 8016f58:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 8016f5a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8016f5e:	040a      	lsls	r2, r1, #16
		while (*lfn) {	/* Create a CRC */
 8016f60:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
 8016f64:	bf48      	it	mi
 8016f66:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 8016f68:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8016f6c:	041b      	lsls	r3, r3, #16
 8016f6e:	bf48      	it	mi
 8016f70:	ea8e 0e05 	eormi.w	lr, lr, r5
		while (*lfn) {	/* Create a CRC */
 8016f74:	2a00      	cmp	r2, #0
 8016f76:	f47f af6e 	bne.w	8016e56 <dir_register+0x9e>
		c = (BYTE)((seq % 16) + '0');
 8016f7a:	f00e 010f 	and.w	r1, lr, #15
 8016f7e:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8016f82:	2a39      	cmp	r2, #57	; 0x39
 8016f84:	bf88      	it	hi
 8016f86:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8016f8a:	f1be 0f0f 	cmp.w	lr, #15
		seq /= 16;
 8016f8e:	ea4f 111e 	mov.w	r1, lr, lsr #4
		ns[i--] = c;
 8016f92:	f88d 201b 	strb.w	r2, [sp, #27]
	} while (seq);
 8016f96:	f240 8196 	bls.w	80172c6 <dir_register+0x50e>
		c = (BYTE)((seq % 16) + '0');
 8016f9a:	f001 000f 	and.w	r0, r1, #15
 8016f9e:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 8016fa2:	2a39      	cmp	r2, #57	; 0x39
 8016fa4:	bf88      	it	hi
 8016fa6:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 8016faa:	290f      	cmp	r1, #15
		seq /= 16;
 8016fac:	ea4f 201e 	mov.w	r0, lr, lsr #8
		ns[i--] = c;
 8016fb0:	f88d 201a 	strb.w	r2, [sp, #26]
	} while (seq);
 8016fb4:	f240 818d 	bls.w	80172d2 <dir_register+0x51a>
		c = (BYTE)((seq % 16) + '0');
 8016fb8:	f000 010f 	and.w	r1, r0, #15
 8016fbc:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8016fc0:	2a39      	cmp	r2, #57	; 0x39
 8016fc2:	bf88      	it	hi
 8016fc4:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8016fc8:	280f      	cmp	r0, #15
		seq /= 16;
 8016fca:	ea4f 311e 	mov.w	r1, lr, lsr #12
		ns[i--] = c;
 8016fce:	f88d 2019 	strb.w	r2, [sp, #25]
	} while (seq);
 8016fd2:	f240 818d 	bls.w	80172f0 <dir_register+0x538>
		c = (BYTE)((seq % 16) + '0');
 8016fd6:	f001 000f 	and.w	r0, r1, #15
 8016fda:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 8016fde:	2a39      	cmp	r2, #57	; 0x39
 8016fe0:	bf88      	it	hi
 8016fe2:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 8016fe6:	290f      	cmp	r1, #15
		seq /= 16;
 8016fe8:	ea4f 401e 	mov.w	r0, lr, lsr #16
		ns[i--] = c;
 8016fec:	f88d 2018 	strb.w	r2, [sp, #24]
	} while (seq);
 8016ff0:	f240 8184 	bls.w	80172fc <dir_register+0x544>
		c = (BYTE)((seq % 16) + '0');
 8016ff4:	f000 010f 	and.w	r1, r0, #15
 8016ff8:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8016ffc:	2a39      	cmp	r2, #57	; 0x39
 8016ffe:	bf88      	it	hi
 8017000:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8017004:	280f      	cmp	r0, #15
		seq /= 16;
 8017006:	ea4f 511e 	mov.w	r1, lr, lsr #20
		ns[i--] = c;
 801700a:	f88d 2017 	strb.w	r2, [sp, #23]
	} while (seq);
 801700e:	f240 817b 	bls.w	8017308 <dir_register+0x550>
		c = (BYTE)((seq % 16) + '0');
 8017012:	f001 000f 	and.w	r0, r1, #15
		seq /= 16;
 8017016:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
		c = (BYTE)((seq % 16) + '0');
 801701a:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 801701e:	2a39      	cmp	r2, #57	; 0x39
 8017020:	bf88      	it	hi
 8017022:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 8017026:	290f      	cmp	r1, #15
		ns[i--] = c;
 8017028:	f88d 2016 	strb.w	r2, [sp, #22]
	} while (seq);
 801702c:	f240 8172 	bls.w	8017314 <dir_register+0x55c>
		c = (BYTE)((seq % 16) + '0');
 8017030:	f00e 010f 	and.w	r1, lr, #15
 8017034:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8017038:	2a39      	cmp	r2, #57	; 0x39
 801703a:	bf88      	it	hi
 801703c:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8017040:	f1be 0f0f 	cmp.w	lr, #15
		ns[i--] = c;
 8017044:	f88d 2015 	strb.w	r2, [sp, #21]
	} while (seq);
 8017048:	f240 8149 	bls.w	80172de <dir_register+0x526>
		ns[i--] = c;
 801704c:	f04f 3cff 	mov.w	ip, #4294967295
 8017050:	f104 0123 	add.w	r1, r4, #35	; 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8017054:	2200      	movs	r2, #0
 8017056:	e002      	b.n	801705e <dir_register+0x2a6>
 8017058:	3201      	adds	r2, #1
 801705a:	4562      	cmp	r2, ip
 801705c:	d003      	beq.n	8017066 <dir_register+0x2ae>
 801705e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017062:	2b20      	cmp	r3, #32
 8017064:	d1f8      	bne.n	8017058 <dir_register+0x2a0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8017066:	f1bc 0f07 	cmp.w	ip, #7
 801706a:	d941      	bls.n	80170f0 <dir_register+0x338>
 801706c:	1c50      	adds	r0, r2, #1
 801706e:	f806 b002 	strb.w	fp, [r6, r2]
	} while (j < 8);
 8017072:	2807      	cmp	r0, #7
 8017074:	d809      	bhi.n	801708a <dir_register+0x2d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8017076:	1c42      	adds	r2, r0, #1
 8017078:	2120      	movs	r1, #32
 801707a:	2a08      	cmp	r2, #8
 801707c:	f1c0 0208 	rsb	r2, r0, #8
 8017080:	4430      	add	r0, r6
 8017082:	bf88      	it	hi
 8017084:	2201      	movhi	r2, #1
 8017086:	f00f fa7c 	bl	8026582 <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801708a:	4620      	mov	r0, r4
 801708c:	f7ff fa7a 	bl	8016584 <dir_find>
 8017090:	4601      	mov	r1, r0
			if (res != FR_OK) break;
 8017092:	2800      	cmp	r0, #0
 8017094:	f040 80ab 	bne.w	80171ee <dir_register+0x436>
		for (n = 1; n < 100; n++) {
 8017098:	f109 0901 	add.w	r9, r9, #1
 801709c:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 80170a0:	d01a      	beq.n	80170d8 <dir_register+0x320>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80170a2:	9b00      	ldr	r3, [sp, #0]
 80170a4:	68d9      	ldr	r1, [r3, #12]
 80170a6:	e6c0      	b.n	8016e2a <dir_register+0x72>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80170a8:	f013 0802 	ands.w	r8, r3, #2
 80170ac:	9d00      	ldr	r5, [sp, #0]
 80170ae:	f000 80ab 	beq.w	8017208 <dir_register+0x450>
 80170b2:	4a0e      	ldr	r2, [pc, #56]	; (80170ec <dir_register+0x334>)
 80170b4:	f109 030c 	add.w	r3, r9, #12
	res = dir_sdi(dp, 0);
 80170b8:	2100      	movs	r1, #0
 80170ba:	4620      	mov	r0, r4
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80170bc:	fba2 2303 	umull	r2, r3, r2, r3
 80170c0:	ea4f 0893 	mov.w	r8, r3, lsr #2
	res = dir_sdi(dp, 0);
 80170c4:	f7ff f9b2 	bl	801642c <dir_sdi>
	if (res == FR_OK) {
 80170c8:	4601      	mov	r1, r0
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80170ca:	f108 0b01 	add.w	fp, r8, #1
	if (res == FR_OK) {
 80170ce:	2800      	cmp	r0, #0
 80170d0:	f000 80a4 	beq.w	801721c <dir_register+0x464>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80170d4:	2904      	cmp	r1, #4
 80170d6:	d100      	bne.n	80170da <dir_register+0x322>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80170d8:	2107      	movs	r1, #7
}
 80170da:	4608      	mov	r0, r1
 80170dc:	b00b      	add	sp, #44	; 0x2c
 80170de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170e2:	46ce      	mov	lr, r9
 80170e4:	e749      	b.n	8016f7a <dir_register+0x1c2>
 80170e6:	bf00      	nop
 80170e8:	00011021 	.word	0x00011021
 80170ec:	4ec4ec4f 	.word	0x4ec4ec4f
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80170f0:	f10c 0328 	add.w	r3, ip, #40	; 0x28
 80170f4:	f10c 0c01 	add.w	ip, ip, #1
 80170f8:	eb0d 0103 	add.w	r1, sp, r3
 80170fc:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8017100:	54b1      	strb	r1, [r6, r2]
 8017102:	3201      	adds	r2, #1
	} while (j < 8);
 8017104:	2a07      	cmp	r2, #7
 8017106:	d8c0      	bhi.n	801708a <dir_register+0x2d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8017108:	f1bc 0f08 	cmp.w	ip, #8
 801710c:	f000 80a4 	beq.w	8017258 <dir_register+0x4a0>
 8017110:	f10c 0328 	add.w	r3, ip, #40	; 0x28
	} while (j < 8);
 8017114:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8017116:	f102 0001 	add.w	r0, r2, #1
 801711a:	eb0d 0103 	add.w	r1, sp, r3
 801711e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8017122:	54b1      	strb	r1, [r6, r2]
 8017124:	f10c 0101 	add.w	r1, ip, #1
	} while (j < 8);
 8017128:	d0af      	beq.n	801708a <dir_register+0x2d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801712a:	2908      	cmp	r1, #8
 801712c:	f000 809c 	beq.w	8017268 <dir_register+0x4b0>
 8017130:	f10c 0329 	add.w	r3, ip, #41	; 0x29
	} while (j < 8);
 8017134:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8017136:	eb0d 0103 	add.w	r1, sp, r3
 801713a:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 801713e:	5431      	strb	r1, [r6, r0]
 8017140:	f10c 0102 	add.w	r1, ip, #2
 8017144:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 8017148:	d09f      	beq.n	801708a <dir_register+0x2d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801714a:	2908      	cmp	r1, #8
 801714c:	f000 8094 	beq.w	8017278 <dir_register+0x4c0>
 8017150:	f10c 032a 	add.w	r3, ip, #42	; 0x2a
	} while (j < 8);
 8017154:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8017156:	eb0d 0103 	add.w	r1, sp, r3
 801715a:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 801715e:	5431      	strb	r1, [r6, r0]
 8017160:	f10c 0103 	add.w	r1, ip, #3
 8017164:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 8017168:	d08f      	beq.n	801708a <dir_register+0x2d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801716a:	2908      	cmp	r1, #8
 801716c:	f000 808c 	beq.w	8017288 <dir_register+0x4d0>
 8017170:	f10c 032b 	add.w	r3, ip, #43	; 0x2b
	} while (j < 8);
 8017174:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8017176:	eb0d 0103 	add.w	r1, sp, r3
 801717a:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 801717e:	5431      	strb	r1, [r6, r0]
 8017180:	f10c 0104 	add.w	r1, ip, #4
 8017184:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 8017188:	f43f af7f 	beq.w	801708a <dir_register+0x2d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801718c:	2908      	cmp	r1, #8
 801718e:	f000 8083 	beq.w	8017298 <dir_register+0x4e0>
 8017192:	f10c 032c 	add.w	r3, ip, #44	; 0x2c
	} while (j < 8);
 8017196:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8017198:	eb0d 0103 	add.w	r1, sp, r3
 801719c:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 80171a0:	5431      	strb	r1, [r6, r0]
 80171a2:	f10c 0105 	add.w	r1, ip, #5
 80171a6:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 80171aa:	f43f af6e 	beq.w	801708a <dir_register+0x2d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80171ae:	2908      	cmp	r1, #8
 80171b0:	d07a      	beq.n	80172a8 <dir_register+0x4f0>
 80171b2:	f10c 032d 	add.w	r3, ip, #45	; 0x2d
	} while (j < 8);
 80171b6:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80171b8:	eb0d 0103 	add.w	r1, sp, r3
 80171bc:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 80171c0:	5431      	strb	r1, [r6, r0]
 80171c2:	f102 0106 	add.w	r1, r2, #6
	} while (j < 8);
 80171c6:	f43f af60 	beq.w	801708a <dir_register+0x2d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80171ca:	f1bc 0f01 	cmp.w	ip, #1
 80171ce:	d173      	bne.n	80172b8 <dir_register+0x500>
 80171d0:	f89d 201b 	ldrb.w	r2, [sp, #27]
	} while (j < 8);
 80171d4:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80171d6:	5472      	strb	r2, [r6, r1]
	} while (j < 8);
 80171d8:	f47f af57 	bne.w	801708a <dir_register+0x2d2>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80171dc:	4620      	mov	r0, r4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80171de:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80171e2:	f7ff f9cf 	bl	8016584 <dir_find>
 80171e6:	4601      	mov	r1, r0
			if (res != FR_OK) break;
 80171e8:	2800      	cmp	r0, #0
 80171ea:	f43f af55 	beq.w	8017098 <dir_register+0x2e0>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80171ee:	2804      	cmp	r0, #4
 80171f0:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80171f4:	f47f af71 	bne.w	80170da <dir_register+0x322>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80171f8:	9b02      	ldr	r3, [sp, #8]
	FATFS *fs = dp->obj.fs;
 80171fa:	6825      	ldr	r5, [r4, #0]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80171fc:	f013 0802 	ands.w	r8, r3, #2
		dp->fn[NSFLAG] = sn[NSFLAG];
 8017200:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8017204:	f47f af55 	bne.w	80170b2 <dir_register+0x2fa>
	res = dir_sdi(dp, 0);
 8017208:	2100      	movs	r1, #0
 801720a:	4620      	mov	r0, r4
 801720c:	f7ff f90e 	bl	801642c <dir_sdi>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8017210:	f04f 0b01 	mov.w	fp, #1
	if (res == FR_OK) {
 8017214:	4601      	mov	r1, r0
 8017216:	2800      	cmp	r0, #0
 8017218:	f47f af5c 	bne.w	80170d4 <dir_register+0x31c>
		n = 0;
 801721c:	4607      	mov	r7, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801721e:	f105 0a34 	add.w	sl, r5, #52	; 0x34
 8017222:	f8cd 8004 	str.w	r8, [sp, #4]
			res = move_window(fs, dp->sect);
 8017226:	69e6      	ldr	r6, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8017228:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 801722c:	4546      	cmp	r6, r8
 801722e:	d078      	beq.n	8017322 <dir_register+0x56a>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017230:	78eb      	ldrb	r3, [r5, #3]
 8017232:	2b00      	cmp	r3, #0
 8017234:	f040 80bb 	bne.w	80173ae <dir_register+0x5f6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017238:	2301      	movs	r3, #1
 801723a:	4632      	mov	r2, r6
 801723c:	4651      	mov	r1, sl
 801723e:	7868      	ldrb	r0, [r5, #1]
 8017240:	f7fe f9da 	bl	80155f8 <disk_read>
 8017244:	2800      	cmp	r0, #0
 8017246:	d06b      	beq.n	8017320 <dir_register+0x568>
				res = FR_DISK_ERR;
 8017248:	2101      	movs	r1, #1
			fs->winsect = sector;
 801724a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801724e:	4608      	mov	r0, r1
			fs->winsect = sector;
 8017250:	632b      	str	r3, [r5, #48]	; 0x30
}
 8017252:	b00b      	add	sp, #44	; 0x2c
 8017254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (j < 8);
 8017258:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801725a:	f102 0001 	add.w	r0, r2, #1
 801725e:	f806 b002 	strb.w	fp, [r6, r2]
	} while (j < 8);
 8017262:	f47f af08 	bne.w	8017076 <dir_register+0x2be>
 8017266:	e710      	b.n	801708a <dir_register+0x2d2>
 8017268:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801726a:	f806 b000 	strb.w	fp, [r6, r0]
 801726e:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 8017272:	f47f af00 	bne.w	8017076 <dir_register+0x2be>
 8017276:	e708      	b.n	801708a <dir_register+0x2d2>
 8017278:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801727a:	f806 b000 	strb.w	fp, [r6, r0]
 801727e:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 8017282:	f47f aef8 	bne.w	8017076 <dir_register+0x2be>
 8017286:	e700      	b.n	801708a <dir_register+0x2d2>
 8017288:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801728a:	f806 b000 	strb.w	fp, [r6, r0]
 801728e:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 8017292:	f47f aef0 	bne.w	8017076 <dir_register+0x2be>
 8017296:	e6f8      	b.n	801708a <dir_register+0x2d2>
 8017298:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801729a:	f806 b000 	strb.w	fp, [r6, r0]
 801729e:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 80172a2:	f47f aee8 	bne.w	8017076 <dir_register+0x2be>
 80172a6:	e6f0      	b.n	801708a <dir_register+0x2d2>
 80172a8:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80172aa:	f806 b000 	strb.w	fp, [r6, r0]
 80172ae:	f102 0006 	add.w	r0, r2, #6
	} while (j < 8);
 80172b2:	f47f aee0 	bne.w	8017076 <dir_register+0x2be>
 80172b6:	e6e8      	b.n	801708a <dir_register+0x2d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80172b8:	f806 b001 	strb.w	fp, [r6, r1]
	} while (j < 8);
 80172bc:	2a00      	cmp	r2, #0
 80172be:	f47f aee4 	bne.w	801708a <dir_register+0x2d2>
 80172c2:	2007      	movs	r0, #7
 80172c4:	e6d7      	b.n	8017076 <dir_register+0x2be>
	ns[i] = '~';
 80172c6:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 80172c8:	f04f 0c06 	mov.w	ip, #6
	ns[i] = '~';
 80172cc:	f88d 201a 	strb.w	r2, [sp, #26]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80172d0:	e6be      	b.n	8017050 <dir_register+0x298>
	ns[i] = '~';
 80172d2:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 80172d4:	f04f 0c05 	mov.w	ip, #5
	ns[i] = '~';
 80172d8:	f88d 2019 	strb.w	r2, [sp, #25]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80172dc:	e6b8      	b.n	8017050 <dir_register+0x298>
	ns[i] = '~';
 80172de:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80172e0:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 80172e4:	f88d 2014 	strb.w	r2, [sp, #20]
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80172e8:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 80172ec:	4662      	mov	r2, ip
 80172ee:	e70f      	b.n	8017110 <dir_register+0x358>
	ns[i] = '~';
 80172f0:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 80172f2:	f04f 0c04 	mov.w	ip, #4
	ns[i] = '~';
 80172f6:	f88d 2018 	strb.w	r2, [sp, #24]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80172fa:	e6a9      	b.n	8017050 <dir_register+0x298>
	ns[i] = '~';
 80172fc:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 80172fe:	f04f 0c03 	mov.w	ip, #3
	ns[i] = '~';
 8017302:	f88d 2017 	strb.w	r2, [sp, #23]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8017306:	e6a3      	b.n	8017050 <dir_register+0x298>
	ns[i] = '~';
 8017308:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 801730a:	f04f 0c02 	mov.w	ip, #2
	ns[i] = '~';
 801730e:	f88d 2016 	strb.w	r2, [sp, #22]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8017312:	e69d      	b.n	8017050 <dir_register+0x298>
	ns[i] = '~';
 8017314:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8017316:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 801731a:	f88d 2015 	strb.w	r2, [sp, #21]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801731e:	e697      	b.n	8017050 <dir_register+0x298>
			fs->winsect = sector;
 8017320:	632e      	str	r6, [r5, #48]	; 0x30
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8017322:	6a23      	ldr	r3, [r4, #32]
 8017324:	781b      	ldrb	r3, [r3, #0]
 8017326:	2be5      	cmp	r3, #229	; 0xe5
 8017328:	d00d      	beq.n	8017346 <dir_register+0x58e>
 801732a:	fab3 f283 	clz	r2, r3
 801732e:	0952      	lsrs	r2, r2, #5
 8017330:	b14b      	cbz	r3, 8017346 <dir_register+0x58e>
				n = 0;					/* Not a blank entry. Restart to search */
 8017332:	4617      	mov	r7, r2
			res = dir_next(dp, 1);
 8017334:	2101      	movs	r1, #1
 8017336:	4620      	mov	r0, r4
 8017338:	f7ff fc5c 	bl	8016bf4 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801733c:	2800      	cmp	r0, #0
 801733e:	f43f af72 	beq.w	8017226 <dir_register+0x46e>
 8017342:	4601      	mov	r1, r0
 8017344:	e6c6      	b.n	80170d4 <dir_register+0x31c>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8017346:	3701      	adds	r7, #1
 8017348:	45bb      	cmp	fp, r7
 801734a:	d1f3      	bne.n	8017334 <dir_register+0x57c>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801734c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017350:	f1b8 0f00 	cmp.w	r8, #0
 8017354:	d155      	bne.n	8017402 <dir_register+0x64a>
		res = move_window(fs, dp->sect);
 8017356:	69e1      	ldr	r1, [r4, #28]
 8017358:	9800      	ldr	r0, [sp, #0]
 801735a:	f7fe faa9 	bl	80158b0 <move_window>
		if (res == FR_OK) {
 801735e:	4601      	mov	r1, r0
 8017360:	2800      	cmp	r0, #0
 8017362:	f47f aeba 	bne.w	80170da <dir_register+0x322>
		*d++ = (BYTE)val;
 8017366:	2220      	movs	r2, #32
 8017368:	9001      	str	r0, [sp, #4]
 801736a:	6a20      	ldr	r0, [r4, #32]
 801736c:	f00f f909 	bl	8026582 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8017370:	6a23      	ldr	r3, [r4, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8017372:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8017376:	9901      	ldr	r1, [sp, #4]
 8017378:	1a9a      	subs	r2, r3, r2
 801737a:	2a02      	cmp	r2, #2
 801737c:	f240 81ab 	bls.w	80176d6 <dir_register+0x91e>
			*d++ = *s++;
 8017380:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8017382:	601a      	str	r2, [r3, #0]
 8017384:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8017386:	605a      	str	r2, [r3, #4]
 8017388:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801738c:	721a      	strb	r2, [r3, #8]
 801738e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8017392:	725a      	strb	r2, [r3, #9]
 8017394:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 8017398:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
 801739a:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801739c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 80173a0:	6a20      	ldr	r0, [r4, #32]
 80173a2:	f003 0318 	and.w	r3, r3, #24
 80173a6:	7303      	strb	r3, [r0, #12]
			fs->wflag = 1;
 80173a8:	9b00      	ldr	r3, [sp, #0]
 80173aa:	70da      	strb	r2, [r3, #3]
 80173ac:	e695      	b.n	80170da <dir_register+0x322>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80173ae:	2301      	movs	r3, #1
 80173b0:	4642      	mov	r2, r8
 80173b2:	4651      	mov	r1, sl
 80173b4:	7868      	ldrb	r0, [r5, #1]
 80173b6:	f7fe f92f 	bl	8015618 <disk_write>
 80173ba:	b9d8      	cbnz	r0, 80173f4 <dir_register+0x63c>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80173bc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
			fs->wflag = 0;
 80173be:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80173c0:	eba8 0103 	sub.w	r1, r8, r3
 80173c4:	69eb      	ldr	r3, [r5, #28]
 80173c6:	4299      	cmp	r1, r3
 80173c8:	f4bf af36 	bcs.w	8017238 <dir_register+0x480>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80173cc:	f895 9002 	ldrb.w	r9, [r5, #2]
 80173d0:	f1b9 0f01 	cmp.w	r9, #1
 80173d4:	d801      	bhi.n	80173da <dir_register+0x622>
 80173d6:	e72f      	b.n	8017238 <dir_register+0x480>
					wsect += fs->fsize;
 80173d8:	69eb      	ldr	r3, [r5, #28]
 80173da:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80173dc:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80173e0:	2301      	movs	r3, #1
 80173e2:	4651      	mov	r1, sl
 80173e4:	4642      	mov	r2, r8
 80173e6:	7868      	ldrb	r0, [r5, #1]
 80173e8:	f7fe f916 	bl	8015618 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80173ec:	f1b9 0f01 	cmp.w	r9, #1
 80173f0:	d1f2      	bne.n	80173d8 <dir_register+0x620>
 80173f2:	e721      	b.n	8017238 <dir_register+0x480>
 80173f4:	2101      	movs	r1, #1
}
 80173f6:	4608      	mov	r0, r1
 80173f8:	b00b      	add	sp, #44	; 0x2c
 80173fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80173fe:	2106      	movs	r1, #6
 8017400:	e66b      	b.n	80170da <dir_register+0x322>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8017402:	6961      	ldr	r1, [r4, #20]
 8017404:	4620      	mov	r0, r4
 8017406:	eba1 1148 	sub.w	r1, r1, r8, lsl #5
 801740a:	f7ff f80f 	bl	801642c <dir_sdi>
		if (res == FR_OK) {
 801740e:	4601      	mov	r1, r0
 8017410:	2800      	cmp	r0, #0
 8017412:	f47f ae62 	bne.w	80170da <dir_register+0x322>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8017416:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801741a:	260f      	movs	r6, #15
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801741c:	f64f 77fd 	movw	r7, #65533	; 0xfffd
	*ptr++ = (BYTE)val; val >>= 8;
 8017420:	f64f 79ff 	movw	r9, #65535	; 0xffff
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8017424:	01d3      	lsls	r3, r2, #7
	*ptr++ = (BYTE)val; val >>= 8;
 8017426:	f8dd a000 	ldr.w	sl, [sp]
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801742a:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 801742e:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8017432:	4413      	add	r3, r2
 8017434:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8017438:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 801743c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8017440:	fa53 f282 	uxtab	r2, r3, r2
 8017444:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8017448:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801744c:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8017450:	fa52 f383 	uxtab	r3, r2, r3
 8017454:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8017458:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 801745c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8017460:	fa53 f282 	uxtab	r2, r3, r2
 8017464:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8017468:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801746c:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8017470:	fa52 f383 	uxtab	r3, r2, r3
 8017474:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8017478:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 801747c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8017480:	fa53 f282 	uxtab	r2, r3, r2
 8017484:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8017488:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801748c:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 8017490:	fa52 f383 	uxtab	r3, r2, r3
 8017494:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8017498:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 801749c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80174a0:	fa53 f282 	uxtab	r2, r3, r2
 80174a4:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80174a8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80174ac:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80174b0:	fa52 f383 	uxtab	r3, r2, r3
 80174b4:	f3c3 0546 	ubfx	r5, r3, #1, #7
 80174b8:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
 80174bc:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80174c0:	fa53 f585 	uxtab	r5, r3, r5
 80174c4:	b2ed      	uxtb	r5, r5
	} while (--n);
 80174c6:	e02a      	b.n	801751e <dir_register+0x766>
	*ptr++ = (BYTE)val; val >>= 8;
 80174c8:	f8a3 9003 	strh.w	r9, [r3, #3]
 80174cc:	f8a3 9005 	strh.w	r9, [r3, #5]
 80174d0:	f8a3 9007 	strh.w	r9, [r3, #7]
 80174d4:	f8a3 9009 	strh.w	r9, [r3, #9]
 80174d8:	f8a3 900e 	strh.w	r9, [r3, #14]
 80174dc:	f8a3 9010 	strh.w	r9, [r3, #16]
 80174e0:	f8a3 9012 	strh.w	r9, [r3, #18]
 80174e4:	f8a3 9014 	strh.w	r9, [r3, #20]
 80174e8:	f8a3 9016 	strh.w	r9, [r3, #22]
 80174ec:	f8a3 9018 	strh.w	r9, [r3, #24]
 80174f0:	f8a3 901c 	strh.w	r9, [r3, #28]
 80174f4:	f8a3 901e 	strh.w	r9, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80174f8:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80174fc:	f883 c000 	strb.w	ip, [r3]
				fs->wflag = 1;
 8017500:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 8017502:	2100      	movs	r1, #0
 8017504:	4620      	mov	r0, r4
				fs->wflag = 1;
 8017506:	f88a 3003 	strb.w	r3, [sl, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801750a:	f7ff fb73 	bl	8016bf4 <dir_next>
			} while (res == FR_OK && --nent);
 801750e:	4601      	mov	r1, r0
 8017510:	2800      	cmp	r0, #0
 8017512:	f47f ade2 	bne.w	80170da <dir_register+0x322>
 8017516:	f1b8 0801 	subs.w	r8, r8, #1
 801751a:	f43f af1c 	beq.w	8017356 <dir_register+0x59e>
				res = move_window(fs, dp->sect);
 801751e:	69e1      	ldr	r1, [r4, #28]
 8017520:	4650      	mov	r0, sl
 8017522:	f7fe f9c5 	bl	80158b0 <move_window>
 8017526:	4601      	mov	r1, r0
				if (res != FR_OK) break;
 8017528:	2800      	cmp	r0, #0
 801752a:	f47f add6 	bne.w	80170da <dir_register+0x322>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801752e:	fa5f fc88 	uxtb.w	ip, r8
 8017532:	6a23      	ldr	r3, [r4, #32]
 8017534:	f8da 100c 	ldr.w	r1, [sl, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8017538:	f10c 32ff 	add.w	r2, ip, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 801753c:	8358      	strh	r0, [r3, #26]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801753e:	735d      	strb	r5, [r3, #13]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8017540:	eb02 0042 	add.w	r0, r2, r2, lsl #1
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8017544:	f8a3 600b 	strh.w	r6, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8017548:	eb02 0280 	add.w	r2, r2, r0, lsl #2
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801754c:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
 8017550:	f100 3eff 	add.w	lr, r0, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 8017554:	7058      	strb	r0, [r3, #1]
 8017556:	0a00      	lsrs	r0, r0, #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8017558:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 801755c:	7098      	strb	r0, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801755e:	0050      	lsls	r0, r2, #1
 8017560:	45be      	cmp	lr, r7
 8017562:	d8b1      	bhi.n	80174c8 <dir_register+0x710>
 8017564:	3201      	adds	r2, #1
 8017566:	f831 e012 	ldrh.w	lr, [r1, r2, lsl #1]
 801756a:	0052      	lsls	r2, r2, #1
 801756c:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 8017570:	f883 e003 	strb.w	lr, [r3, #3]
 8017574:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8017578:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 801757c:	f883 e004 	strb.w	lr, [r3, #4]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8017580:	45bb      	cmp	fp, r7
 8017582:	d8a3      	bhi.n	80174cc <dir_register+0x714>
 8017584:	440a      	add	r2, r1
 8017586:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 801758a:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 801758e:	f883 e005 	strb.w	lr, [r3, #5]
 8017592:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8017596:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 801759a:	f883 e006 	strb.w	lr, [r3, #6]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801759e:	45bb      	cmp	fp, r7
 80175a0:	d896      	bhi.n	80174d0 <dir_register+0x718>
 80175a2:	f8b2 e004 	ldrh.w	lr, [r2, #4]
 80175a6:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 80175aa:	f883 e007 	strb.w	lr, [r3, #7]
 80175ae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80175b2:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 80175b6:	f883 e008 	strb.w	lr, [r3, #8]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80175ba:	45bb      	cmp	fp, r7
 80175bc:	d88a      	bhi.n	80174d4 <dir_register+0x71c>
 80175be:	f8b2 e006 	ldrh.w	lr, [r2, #6]
 80175c2:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 80175c6:	f883 e009 	strb.w	lr, [r3, #9]
 80175ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80175ce:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 80175d2:	f883 e00a 	strb.w	lr, [r3, #10]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80175d6:	45bb      	cmp	fp, r7
 80175d8:	f63f af7e 	bhi.w	80174d8 <dir_register+0x720>
 80175dc:	f8b2 e008 	ldrh.w	lr, [r2, #8]
 80175e0:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 80175e4:	f883 e00e 	strb.w	lr, [r3, #14]
 80175e8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80175ec:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 80175f0:	f883 e00f 	strb.w	lr, [r3, #15]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80175f4:	45bb      	cmp	fp, r7
 80175f6:	f63f af71 	bhi.w	80174dc <dir_register+0x724>
 80175fa:	f8b2 e00a 	ldrh.w	lr, [r2, #10]
 80175fe:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 8017602:	f883 e010 	strb.w	lr, [r3, #16]
 8017606:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801760a:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 801760e:	f883 e011 	strb.w	lr, [r3, #17]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8017612:	45bb      	cmp	fp, r7
 8017614:	f63f af64 	bhi.w	80174e0 <dir_register+0x728>
 8017618:	f8b2 e00c 	ldrh.w	lr, [r2, #12]
 801761c:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 8017620:	f883 e012 	strb.w	lr, [r3, #18]
 8017624:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8017628:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 801762c:	f883 e013 	strb.w	lr, [r3, #19]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8017630:	45bb      	cmp	fp, r7
 8017632:	f63f af57 	bhi.w	80174e4 <dir_register+0x72c>
 8017636:	f8b2 e00e 	ldrh.w	lr, [r2, #14]
 801763a:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 801763e:	f883 e014 	strb.w	lr, [r3, #20]
 8017642:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8017646:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 801764a:	f883 e015 	strb.w	lr, [r3, #21]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801764e:	45bb      	cmp	fp, r7
 8017650:	f63f af4a 	bhi.w	80174e8 <dir_register+0x730>
 8017654:	f8b2 e010 	ldrh.w	lr, [r2, #16]
 8017658:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 801765c:	f883 e016 	strb.w	lr, [r3, #22]
 8017660:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8017664:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 8017668:	f883 e017 	strb.w	lr, [r3, #23]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801766c:	45bb      	cmp	fp, r7
 801766e:	f63f af3d 	bhi.w	80174ec <dir_register+0x734>
 8017672:	f8b2 e012 	ldrh.w	lr, [r2, #18]
 8017676:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 801767a:	f883 e018 	strb.w	lr, [r3, #24]
 801767e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8017682:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 8017686:	f883 e019 	strb.w	lr, [r3, #25]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801768a:	45bb      	cmp	fp, r7
 801768c:	f63f af30 	bhi.w	80174f0 <dir_register+0x738>
 8017690:	f8b2 e014 	ldrh.w	lr, [r2, #20]
 8017694:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 8017698:	f883 e01c 	strb.w	lr, [r3, #28]
 801769c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80176a0:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 80176a4:	f883 e01d 	strb.w	lr, [r3, #29]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80176a8:	45bb      	cmp	fp, r7
 80176aa:	f63f af23 	bhi.w	80174f4 <dir_register+0x73c>
 80176ae:	8ad2      	ldrh	r2, [r2, #22]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80176b0:	f102 3eff 	add.w	lr, r2, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 80176b4:	779a      	strb	r2, [r3, #30]
 80176b6:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 80176b8:	77da      	strb	r2, [r3, #31]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80176ba:	fa1f f28e 	uxth.w	r2, lr
 80176be:	42ba      	cmp	r2, r7
 80176c0:	f63f af1a 	bhi.w	80174f8 <dir_register+0x740>
 80176c4:	180a      	adds	r2, r1, r0
 80176c6:	8b52      	ldrh	r2, [r2, #26]
 80176c8:	2a00      	cmp	r2, #0
 80176ca:	f47f af17 	bne.w	80174fc <dir_register+0x744>
 80176ce:	e713      	b.n	80174f8 <dir_register+0x740>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80176d0:	4699      	mov	r9, r3
 80176d2:	f7ff bb8d 	b.w	8016df0 <dir_register+0x38>
			*d++ = *s++;
 80176d6:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80176da:	701a      	strb	r2, [r3, #0]
 80176dc:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 80176e0:	705a      	strb	r2, [r3, #1]
 80176e2:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 80176e6:	709a      	strb	r2, [r3, #2]
 80176e8:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 80176ec:	70da      	strb	r2, [r3, #3]
 80176ee:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80176f2:	711a      	strb	r2, [r3, #4]
 80176f4:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 80176f8:	715a      	strb	r2, [r3, #5]
 80176fa:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 80176fe:	719a      	strb	r2, [r3, #6]
 8017700:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 8017704:	71da      	strb	r2, [r3, #7]
 8017706:	e63f      	b.n	8017388 <dir_register+0x5d0>

08017708 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8017708:	2901      	cmp	r1, #1
{
 801770a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801770e:	460c      	mov	r4, r1
 8017710:	b083      	sub	sp, #12
	FATFS *fs = obj->fs;
 8017712:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8017714:	d914      	bls.n	8017740 <remove_chain+0x38>
 8017716:	69ab      	ldr	r3, [r5, #24]
 8017718:	428b      	cmp	r3, r1
 801771a:	d911      	bls.n	8017740 <remove_chain+0x38>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801771c:	4606      	mov	r6, r0
 801771e:	4611      	mov	r1, r2
 8017720:	b992      	cbnz	r2, 8017748 <remove_chain+0x40>
 8017722:	462f      	mov	r7, r5
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8017724:	f105 0934 	add.w	r9, r5, #52	; 0x34
			fs->wflag = 1;
 8017728:	f04f 0801 	mov.w	r8, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801772c:	429c      	cmp	r4, r3
 801772e:	d207      	bcs.n	8017740 <remove_chain+0x38>
		switch (fs->fs_type) {
 8017730:	783b      	ldrb	r3, [r7, #0]
 8017732:	2b02      	cmp	r3, #2
 8017734:	f000 80a3 	beq.w	801787e <remove_chain+0x176>
 8017738:	2b03      	cmp	r3, #3
 801773a:	d022      	beq.n	8017782 <remove_chain+0x7a>
 801773c:	2b01      	cmp	r3, #1
 801773e:	d011      	beq.n	8017764 <remove_chain+0x5c>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8017740:	2002      	movs	r0, #2
}
 8017742:	b003      	add	sp, #12
 8017744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8017748:	4293      	cmp	r3, r2
 801774a:	d9f9      	bls.n	8017740 <remove_chain+0x38>
 801774c:	2a01      	cmp	r2, #1
 801774e:	d0f7      	beq.n	8017740 <remove_chain+0x38>
 8017750:	f04f 32ff 	mov.w	r2, #4294967295
 8017754:	4628      	mov	r0, r5
 8017756:	f7fe fa69 	bl	8015c2c <put_fat.part.0>
		if (res != FR_OK) return res;
 801775a:	2800      	cmp	r0, #0
 801775c:	d1f1      	bne.n	8017742 <remove_chain+0x3a>
 801775e:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8017760:	69bb      	ldr	r3, [r7, #24]
 8017762:	e7df      	b.n	8017724 <remove_chain+0x1c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017764:	6a79      	ldr	r1, [r7, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 8017766:	eb04 0a54 	add.w	sl, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801776a:	4638      	mov	r0, r7
 801776c:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8017770:	f7fe f89e 	bl	80158b0 <move_window>
 8017774:	2800      	cmp	r0, #0
 8017776:	f000 80a9 	beq.w	80178cc <remove_chain+0x1c4>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801777a:	2001      	movs	r0, #1
}
 801777c:	b003      	add	sp, #12
 801777e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017782:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017784:	4638      	mov	r0, r7
 8017786:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 801778a:	f7fe f891 	bl	80158b0 <move_window>
 801778e:	2800      	cmp	r0, #0
 8017790:	d1f3      	bne.n	801777a <remove_chain+0x72>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8017792:	00a3      	lsls	r3, r4, #2
 8017794:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8017798:	443b      	add	r3, r7
 801779a:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801779e:	f02a 4a70 	bic.w	sl, sl, #4026531840	; 0xf0000000
		if (nxt == 0) break;				/* Empty cluster? */
 80177a2:	f1ba 0f00 	cmp.w	sl, #0
 80177a6:	f000 80af 	beq.w	8017908 <remove_chain+0x200>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80177aa:	f1ba 0f01 	cmp.w	sl, #1
 80177ae:	d0c7      	beq.n	8017740 <remove_chain+0x38>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80177b0:	69ab      	ldr	r3, [r5, #24]
 80177b2:	42a3      	cmp	r3, r4
 80177b4:	d9c4      	bls.n	8017740 <remove_chain+0x38>
		switch (fs->fs_type) {
 80177b6:	782f      	ldrb	r7, [r5, #0]
 80177b8:	2f02      	cmp	r7, #2
 80177ba:	d029      	beq.n	8017810 <remove_chain+0x108>
 80177bc:	2f03      	cmp	r7, #3
 80177be:	d047      	beq.n	8017850 <remove_chain+0x148>
 80177c0:	2f01      	cmp	r7, #1
 80177c2:	d1bd      	bne.n	8017740 <remove_chain+0x38>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80177c4:	6a69      	ldr	r1, [r5, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 80177c6:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80177ca:	4628      	mov	r0, r5
 80177cc:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 80177d0:	f7fe f86e 	bl	80158b0 <move_window>
			if (res != FR_OK) break;
 80177d4:	2800      	cmp	r0, #0
 80177d6:	d1b4      	bne.n	8017742 <remove_chain+0x3a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80177d8:	07e2      	lsls	r2, r4, #31
			p = fs->win + bc++ % SS(fs);
 80177da:	f10b 0301 	add.w	r3, fp, #1
 80177de:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80177e2:	d55c      	bpl.n	801789e <remove_chain+0x196>
 80177e4:	f819 200b 	ldrb.w	r2, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80177e8:	4628      	mov	r0, r5
 80177ea:	9301      	str	r3, [sp, #4]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80177ec:	f002 020f 	and.w	r2, r2, #15
 80177f0:	f809 200b 	strb.w	r2, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80177f4:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
 80177f6:	70ef      	strb	r7, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80177f8:	eb01 2153 	add.w	r1, r1, r3, lsr #9
 80177fc:	f7fe f858 	bl	80158b0 <move_window>
			if (res != FR_OK) break;
 8017800:	9b01      	ldr	r3, [sp, #4]
 8017802:	2800      	cmp	r0, #0
 8017804:	d19d      	bne.n	8017742 <remove_chain+0x3a>
			p = fs->win + bc % SS(fs);
 8017806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801780a:	444b      	add	r3, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801780c:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
 801780e:	e00c      	b.n	801782a <remove_chain+0x122>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8017810:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8017812:	4628      	mov	r0, r5
 8017814:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8017818:	f7fe f84a 	bl	80158b0 <move_window>
			if (res != FR_OK) break;
 801781c:	2800      	cmp	r0, #0
 801781e:	d190      	bne.n	8017742 <remove_chain+0x3a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8017820:	0064      	lsls	r4, r4, #1
 8017822:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 8017826:	442c      	add	r4, r5
 8017828:	86a0      	strh	r0, [r4, #52]	; 0x34
			fs->wflag = 1;
 801782a:	f885 8003 	strb.w	r8, [r5, #3]
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801782e:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 8017832:	1e91      	subs	r1, r2, #2
 8017834:	428b      	cmp	r3, r1
 8017836:	d205      	bcs.n	8017844 <remove_chain+0x13c>
			fs->free_clst++;
 8017838:	3301      	adds	r3, #1
 801783a:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 801783c:	792b      	ldrb	r3, [r5, #4]
 801783e:	f043 0301 	orr.w	r3, r3, #1
 8017842:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8017844:	4552      	cmp	r2, sl
 8017846:	d95f      	bls.n	8017908 <remove_chain+0x200>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8017848:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801784a:	4654      	mov	r4, sl
 801784c:	69bb      	ldr	r3, [r7, #24]
 801784e:	e76d      	b.n	801772c <remove_chain+0x24>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8017850:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8017852:	4628      	mov	r0, r5
 8017854:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8017858:	f7fe f82a 	bl	80158b0 <move_window>
			if (res != FR_OK) break;
 801785c:	2800      	cmp	r0, #0
 801785e:	f47f af70 	bne.w	8017742 <remove_chain+0x3a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8017862:	00a4      	lsls	r4, r4, #2
 8017864:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8017868:	f859 2004 	ldr.w	r2, [r9, r4]
	*ptr++ = (BYTE)val; val >>= 8;
 801786c:	f829 0004 	strh.w	r0, [r9, r4]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8017870:	444c      	add	r4, r9
	*ptr++ = (BYTE)val; val >>= 8;
 8017872:	0e13      	lsrs	r3, r2, #24
 8017874:	70a0      	strb	r0, [r4, #2]
 8017876:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	*ptr++ = (BYTE)val;
 801787a:	70e3      	strb	r3, [r4, #3]
			if (res != FR_OK) return res;
 801787c:	e7d5      	b.n	801782a <remove_chain+0x122>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801787e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017880:	4638      	mov	r0, r7
 8017882:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8017886:	f7fe f813 	bl	80158b0 <move_window>
 801788a:	2800      	cmp	r0, #0
 801788c:	f47f af75 	bne.w	801777a <remove_chain+0x72>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8017890:	0063      	lsls	r3, r4, #1
 8017892:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8017896:	443b      	add	r3, r7
 8017898:	f8b3 a034 	ldrh.w	sl, [r3, #52]	; 0x34
			break;
 801789c:	e781      	b.n	80177a2 <remove_chain+0x9a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801789e:	f809 000b 	strb.w	r0, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80178a2:	4628      	mov	r0, r5
 80178a4:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
 80178a6:	70ef      	strb	r7, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80178a8:	eb01 2153 	add.w	r1, r1, r3, lsr #9
 80178ac:	9301      	str	r3, [sp, #4]
 80178ae:	f7fd ffff 	bl	80158b0 <move_window>
			if (res != FR_OK) break;
 80178b2:	2800      	cmp	r0, #0
 80178b4:	f47f af45 	bne.w	8017742 <remove_chain+0x3a>
			p = fs->win + bc % SS(fs);
 80178b8:	9b01      	ldr	r3, [sp, #4]
 80178ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80178be:	f819 0003 	ldrb.w	r0, [r9, r3]
			p = fs->win + bc % SS(fs);
 80178c2:	444b      	add	r3, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80178c4:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 80178c8:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
 80178ca:	e7ae      	b.n	801782a <remove_chain+0x122>
			wc = fs->win[bc++ % SS(fs)];
 80178cc:	f3ca 0308 	ubfx	r3, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80178d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 80178d2:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80178d6:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
 80178d8:	443b      	add	r3, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80178da:	eb01 215a 	add.w	r1, r1, sl, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 80178de:	f893 b034 	ldrb.w	fp, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80178e2:	f7fd ffe5 	bl	80158b0 <move_window>
 80178e6:	2800      	cmp	r0, #0
 80178e8:	f47f af47 	bne.w	801777a <remove_chain+0x72>
			wc |= fs->win[bc % SS(fs)] << 8;
 80178ec:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80178f0:	07e1      	lsls	r1, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80178f2:	44ba      	add	sl, r7
 80178f4:	f89a 3034 	ldrb.w	r3, [sl, #52]	; 0x34
 80178f8:	ea4b 2a03 	orr.w	sl, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80178fc:	bf4c      	ite	mi
 80178fe:	ea4f 1a1a 	movmi.w	sl, sl, lsr #4
 8017902:	f3ca 0a0b 	ubfxpl	sl, sl, #0, #12
 8017906:	e74c      	b.n	80177a2 <remove_chain+0x9a>
	return FR_OK;
 8017908:	2000      	movs	r0, #0
 801790a:	e71a      	b.n	8017742 <remove_chain+0x3a>

0801790c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801790c:	b510      	push	{r4, lr}
 801790e:	b082      	sub	sp, #8
 8017910:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 8017914:	b1b1      	cbz	r1, 8017944 <f_mount+0x38>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8017916:	f891 c000 	ldrb.w	ip, [r1]
 801791a:	f1bc 0f1f 	cmp.w	ip, #31
 801791e:	d914      	bls.n	801794a <f_mount+0x3e>
 8017920:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
 8017924:	d011      	beq.n	801794a <f_mount+0x3e>
 8017926:	4608      	mov	r0, r1
 8017928:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801792c:	2b1f      	cmp	r3, #31
 801792e:	d90e      	bls.n	801794e <f_mount+0x42>
 8017930:	2b3a      	cmp	r3, #58	; 0x3a
 8017932:	d1f9      	bne.n	8017928 <f_mount+0x1c>
			i = *tp++ - '0';
 8017934:	3101      	adds	r1, #1
 8017936:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801793a:	4288      	cmp	r0, r1
 801793c:	d102      	bne.n	8017944 <f_mount+0x38>
 801793e:	f1bc 0f01 	cmp.w	ip, #1
 8017942:	d908      	bls.n	8017956 <f_mount+0x4a>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 8017944:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8017946:	b002      	add	sp, #8
 8017948:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801794a:	4663      	mov	r3, ip
 801794c:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801794e:	2b3a      	cmp	r3, #58	; 0x3a
 8017950:	d0f0      	beq.n	8017934 <f_mount+0x28>
		vol = 0;		/* Drive 0 */
 8017952:	f04f 0c00 	mov.w	ip, #0
	cfs = FatFs[vol];					/* Pointer to fs object */
 8017956:	4c1d      	ldr	r4, [pc, #116]	; (80179cc <f_mount+0xc0>)
 8017958:	f854 302c 	ldr.w	r3, [r4, ip, lsl #2]
	if (cfs) {
 801795c:	b173      	cbz	r3, 801797c <f_mount+0x70>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801795e:	491c      	ldr	r1, [pc, #112]	; (80179d0 <f_mount+0xc4>)
 8017960:	6808      	ldr	r0, [r1, #0]
 8017962:	4283      	cmp	r3, r0
 8017964:	d021      	beq.n	80179aa <f_mount+0x9e>
 8017966:	6908      	ldr	r0, [r1, #16]
 8017968:	4298      	cmp	r0, r3
 801796a:	d023      	beq.n	80179b4 <f_mount+0xa8>
 801796c:	6a08      	ldr	r0, [r1, #32]
 801796e:	4283      	cmp	r3, r0
 8017970:	d025      	beq.n	80179be <f_mount+0xb2>
 8017972:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8017974:	4298      	cmp	r0, r3
 8017976:	d015      	beq.n	80179a4 <f_mount+0x98>
		cfs->fs_type = 0;				/* Clear old fs object */
 8017978:	2100      	movs	r1, #0
 801797a:	7019      	strb	r1, [r3, #0]
	if (fs) {
 801797c:	9b01      	ldr	r3, [sp, #4]
 801797e:	b163      	cbz	r3, 801799a <f_mount+0x8e>
		fs->fs_type = 0;				/* Clear new fs object */
 8017980:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8017982:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
 8017984:	f844 302c 	str.w	r3, [r4, ip, lsl #2]
		fs->fs_type = 0;				/* Clear new fs object */
 8017988:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801798a:	d1dc      	bne.n	8017946 <f_mount+0x3a>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801798c:	4602      	mov	r2, r0
 801798e:	a901      	add	r1, sp, #4
 8017990:	4668      	mov	r0, sp
 8017992:	f7fd ffcb 	bl	801592c <find_volume>
}
 8017996:	b002      	add	sp, #8
 8017998:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801799a:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 801799c:	f844 302c 	str.w	r3, [r4, ip, lsl #2]
}
 80179a0:	b002      	add	sp, #8
 80179a2:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 80179a4:	2000      	movs	r0, #0
 80179a6:	6308      	str	r0, [r1, #48]	; 0x30
 80179a8:	e7e6      	b.n	8017978 <f_mount+0x6c>
 80179aa:	2000      	movs	r0, #0
 80179ac:	6008      	str	r0, [r1, #0]
 80179ae:	6908      	ldr	r0, [r1, #16]
 80179b0:	4298      	cmp	r0, r3
 80179b2:	d1db      	bne.n	801796c <f_mount+0x60>
 80179b4:	2000      	movs	r0, #0
 80179b6:	6108      	str	r0, [r1, #16]
 80179b8:	6a08      	ldr	r0, [r1, #32]
 80179ba:	4283      	cmp	r3, r0
 80179bc:	d1d9      	bne.n	8017972 <f_mount+0x66>
 80179be:	2000      	movs	r0, #0
 80179c0:	6208      	str	r0, [r1, #32]
 80179c2:	6b08      	ldr	r0, [r1, #48]	; 0x30
 80179c4:	4298      	cmp	r0, r3
 80179c6:	d1d7      	bne.n	8017978 <f_mount+0x6c>
 80179c8:	e7ec      	b.n	80179a4 <f_mount+0x98>
 80179ca:	bf00      	nop
 80179cc:	2000a1f4 	.word	0x2000a1f4
 80179d0:	2000a1fc 	.word	0x2000a1fc

080179d4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80179d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179d8:	b091      	sub	sp, #68	; 0x44
 80179da:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80179dc:	2800      	cmp	r0, #0
 80179de:	f000 80c2 	beq.w	8017b66 <f_open+0x192>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80179e2:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 80179e6:	4616      	mov	r6, r2
 80179e8:	4604      	mov	r4, r0
 80179ea:	a902      	add	r1, sp, #8
 80179ec:	a801      	add	r0, sp, #4
 80179ee:	463a      	mov	r2, r7
 80179f0:	f7fd ff9c 	bl	801592c <find_volume>
	if (res == FR_OK) {
 80179f4:	4605      	mov	r5, r0
 80179f6:	b128      	cbz	r0, 8017a04 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80179f8:	2300      	movs	r3, #0
 80179fa:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 80179fc:	4628      	mov	r0, r5
 80179fe:	b011      	add	sp, #68	; 0x44
 8017a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dj.obj.fs = fs;
 8017a04:	f8dd 9008 	ldr.w	r9, [sp, #8]
		INIT_NAMBUF(fs);
 8017a08:	f44f 7000 	mov.w	r0, #512	; 0x200
		dj.obj.fs = fs;
 8017a0c:	f8cd 900c 	str.w	r9, [sp, #12]
		INIT_NAMBUF(fs);
 8017a10:	f001 fc4c 	bl	80192ac <ff_memalloc>
 8017a14:	4680      	mov	r8, r0
 8017a16:	2800      	cmp	r0, #0
 8017a18:	f000 80aa 	beq.w	8017b70 <f_open+0x19c>
 8017a1c:	f8c9 000c 	str.w	r0, [r9, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8017a20:	a803      	add	r0, sp, #12
 8017a22:	9901      	ldr	r1, [sp, #4]
 8017a24:	f7fe ff5a 	bl	80168dc <follow_path>
		if (res == FR_OK) {
 8017a28:	bba0      	cbnz	r0, 8017a94 <f_open+0xc0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8017a2a:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	f2c0 811c 	blt.w	8017c6c <f_open+0x298>
		if (Files[i].fs) {	/* Existing entry */
 8017a34:	4bb0      	ldr	r3, [pc, #704]	; (8017cf8 <f_open+0x324>)
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8017a36:	f027 0c01 	bic.w	ip, r7, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017a3a:	9a03      	ldr	r2, [sp, #12]
		if (Files[i].fs) {	/* Existing entry */
 8017a3c:	6819      	ldr	r1, [r3, #0]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8017a3e:	4660      	mov	r0, ip
				Files[i].clu == dp->obj.sclust &&
 8017a40:	f8dd e014 	ldr.w	lr, [sp, #20]
				Files[i].ofs == dp->dptr) break;
 8017a44:	f8dd b020 	ldr.w	fp, [sp, #32]
		if (Files[i].fs) {	/* Existing entry */
 8017a48:	2900      	cmp	r1, #0
 8017a4a:	f000 8093 	beq.w	8017b74 <f_open+0x1a0>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017a4e:	4291      	cmp	r1, r2
 8017a50:	f000 8093 	beq.w	8017b7a <f_open+0x1a6>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8017a54:	46aa      	mov	sl, r5
		if (Files[i].fs) {	/* Existing entry */
 8017a56:	6919      	ldr	r1, [r3, #16]
 8017a58:	2900      	cmp	r1, #0
 8017a5a:	f000 811f 	beq.w	8017c9c <f_open+0x2c8>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017a5e:	4291      	cmp	r1, r2
 8017a60:	f000 8136 	beq.w	8017cd0 <f_open+0x2fc>
		if (Files[i].fs) {	/* Existing entry */
 8017a64:	6a19      	ldr	r1, [r3, #32]
 8017a66:	2900      	cmp	r1, #0
 8017a68:	f000 811b 	beq.w	8017ca2 <f_open+0x2ce>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017a6c:	4291      	cmp	r1, r2
 8017a6e:	f000 8139 	beq.w	8017ce4 <f_open+0x310>
		if (Files[i].fs) {	/* Existing entry */
 8017a72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8017a74:	2900      	cmp	r1, #0
 8017a76:	f000 8092 	beq.w	8017b9e <f_open+0x1ca>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017a7a:	4291      	cmp	r1, r2
 8017a7c:	f000 809c 	beq.w	8017bb8 <f_open+0x1e4>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8017a80:	f1ba 0f00 	cmp.w	sl, #0
 8017a84:	f040 808b 	bne.w	8017b9e <f_open+0x1ca>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8017a88:	2012      	movs	r0, #18
		FREE_NAMBUF();
 8017a8a:	4605      	mov	r5, r0
 8017a8c:	4640      	mov	r0, r8
 8017a8e:	f001 fc0f 	bl	80192b0 <ff_memfree>
 8017a92:	e7b1      	b.n	80179f8 <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8017a94:	f016 0f1c 	tst.w	r6, #28
 8017a98:	d0f7      	beq.n	8017a8a <f_open+0xb6>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8017a9a:	2804      	cmp	r0, #4
 8017a9c:	d1f5      	bne.n	8017a8a <f_open+0xb6>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017a9e:	4b96      	ldr	r3, [pc, #600]	; (8017cf8 <f_open+0x324>)
 8017aa0:	681a      	ldr	r2, [r3, #0]
 8017aa2:	b132      	cbz	r2, 8017ab2 <f_open+0xde>
 8017aa4:	691a      	ldr	r2, [r3, #16]
 8017aa6:	b122      	cbz	r2, 8017ab2 <f_open+0xde>
 8017aa8:	6a1a      	ldr	r2, [r3, #32]
 8017aaa:	b112      	cbz	r2, 8017ab2 <f_open+0xde>
 8017aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d1ea      	bne.n	8017a88 <f_open+0xb4>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8017ab2:	a803      	add	r0, sp, #12
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8017ab4:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8017ab8:	f7ff f97e 	bl	8016db8 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8017abc:	2800      	cmp	r0, #0
 8017abe:	d1e4      	bne.n	8017a8a <f_open+0xb6>
				dw = GET_FATTIME();
 8017ac0:	f7fd fdc6 	bl	8015650 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8017ac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 8017ac6:	0a02      	lsrs	r2, r0, #8
 8017ac8:	f8c3 000e 	str.w	r0, [r3, #14]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8017acc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 8017ace:	75da      	strb	r2, [r3, #23]
 8017ad0:	0c02      	lsrs	r2, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8017ad2:	7598      	strb	r0, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8017ad4:	0e00      	lsrs	r0, r0, #24
 8017ad6:	761a      	strb	r2, [r3, #24]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8017ad8:	2220      	movs	r2, #32
	*ptr++ = (BYTE)val;
 8017ada:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8017adc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017ade:	72da      	strb	r2, [r3, #11]
	if (fs->fs_type == FS_FAT32) {
 8017ae0:	f899 2000 	ldrb.w	r2, [r9]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8017ae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	if (fs->fs_type == FS_FAT32) {
 8017ae6:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8017ae8:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8017aea:	d102      	bne.n	8017af2 <f_open+0x11e>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8017aec:	8a9a      	ldrh	r2, [r3, #20]
 8017aee:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 8017af2:	2200      	movs	r2, #0
 8017af4:	835a      	strh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8017af6:	f899 1000 	ldrb.w	r1, [r9]
 8017afa:	2903      	cmp	r1, #3
 8017afc:	d100      	bne.n	8017b00 <f_open+0x12c>
	*ptr++ = (BYTE)val; val >>= 8;
 8017afe:	829a      	strh	r2, [r3, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
 8017b00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 8017b02:	2200      	movs	r2, #0
 8017b04:	61da      	str	r2, [r3, #28]
					fs->wflag = 1;
 8017b06:	2301      	movs	r3, #1
 8017b08:	f889 3003 	strb.w	r3, [r9, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8017b0c:	b196      	cbz	r6, 8017b34 <f_open+0x160>
						dw = fs->winsect;
 8017b0e:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 8017b12:	4631      	mov	r1, r6
 8017b14:	a803      	add	r0, sp, #12
						dw = fs->winsect;
 8017b16:	9300      	str	r3, [sp, #0]
						res = remove_chain(&dj.obj, cl, 0);
 8017b18:	f7ff fdf6 	bl	8017708 <remove_chain>
						if (res == FR_OK) {
 8017b1c:	9b00      	ldr	r3, [sp, #0]
 8017b1e:	2800      	cmp	r0, #0
 8017b20:	d1b3      	bne.n	8017a8a <f_open+0xb6>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8017b22:	3e01      	subs	r6, #1
							res = move_window(fs, dw);
 8017b24:	4619      	mov	r1, r3
 8017b26:	4648      	mov	r0, r9
 8017b28:	f7fd fec2 	bl	80158b0 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8017b2c:	f8c9 6010 	str.w	r6, [r9, #16]
		if (res == FR_OK) {
 8017b30:	2800      	cmp	r0, #0
 8017b32:	d1aa      	bne.n	8017a8a <f_open+0xb6>
				mode |= FA_MODIFIED;
 8017b34:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8017b38:	f027 0001 	bic.w	r0, r7, #1
 8017b3c:	1e01      	subs	r1, r0, #0
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8017b3e:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
			fp->dir_ptr = dj.dir;
 8017b42:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8017b46:	a803      	add	r0, sp, #12
 8017b48:	bf18      	it	ne
 8017b4a:	2101      	movne	r1, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8017b4c:	6263      	str	r3, [r4, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8017b4e:	f8c4 a028 	str.w	sl, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8017b52:	f7fd fd7f 	bl	8015654 <inc_lock>
 8017b56:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8017b58:	2800      	cmp	r0, #0
 8017b5a:	d137      	bne.n	8017bcc <f_open+0x1f8>
		FREE_NAMBUF();
 8017b5c:	4640      	mov	r0, r8
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8017b5e:	2502      	movs	r5, #2
		FREE_NAMBUF();
 8017b60:	f001 fba6 	bl	80192b0 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8017b64:	e748      	b.n	80179f8 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 8017b66:	2509      	movs	r5, #9
}
 8017b68:	4628      	mov	r0, r5
 8017b6a:	b011      	add	sp, #68	; 0x44
 8017b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		INIT_NAMBUF(fs);
 8017b70:	2511      	movs	r5, #17
 8017b72:	e743      	b.n	80179fc <f_open+0x28>
			be = 1;
 8017b74:	f04f 0a01 	mov.w	sl, #1
 8017b78:	e76d      	b.n	8017a56 <f_open+0x82>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017b7a:	6859      	ldr	r1, [r3, #4]
 8017b7c:	4571      	cmp	r1, lr
 8017b7e:	f47f af69 	bne.w	8017a54 <f_open+0x80>
				Files[i].clu == dp->obj.sclust &&
 8017b82:	6899      	ldr	r1, [r3, #8]
 8017b84:	4559      	cmp	r1, fp
 8017b86:	f47f af65 	bne.w	8017a54 <f_open+0x80>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8017b8a:	462a      	mov	r2, r5
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8017b8c:	f1bc 0f00 	cmp.w	ip, #0
 8017b90:	d177      	bne.n	8017c82 <f_open+0x2ae>
 8017b92:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8017b96:	899b      	ldrh	r3, [r3, #12]
 8017b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017b9c:	d071      	beq.n	8017c82 <f_open+0x2ae>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8017b9e:	f016 0f1c 	tst.w	r6, #28
 8017ba2:	d056      	beq.n	8017c52 <f_open+0x27e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8017ba4:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8017ba8:	f013 0f11 	tst.w	r3, #17
 8017bac:	f040 808e 	bne.w	8017ccc <f_open+0x2f8>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8017bb0:	0773      	lsls	r3, r6, #29
 8017bb2:	d568      	bpl.n	8017c86 <f_open+0x2b2>
 8017bb4:	2008      	movs	r0, #8
 8017bb6:	e768      	b.n	8017a8a <f_open+0xb6>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017bba:	4572      	cmp	r2, lr
 8017bbc:	f47f af60 	bne.w	8017a80 <f_open+0xac>
				Files[i].clu == dp->obj.sclust &&
 8017bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017bc2:	455a      	cmp	r2, fp
 8017bc4:	f47f af5c 	bne.w	8017a80 <f_open+0xac>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8017bc8:	2203      	movs	r2, #3
 8017bca:	e7df      	b.n	8017b8c <f_open+0x1b8>
	if (fs->fs_type == FS_FAT32) {
 8017bcc:	f899 3000 	ldrb.w	r3, [r9]
	cl = ld_word(dir + DIR_FstClusLO);
 8017bd0:	f8ba 601a 	ldrh.w	r6, [sl, #26]
	if (fs->fs_type == FS_FAT32) {
 8017bd4:	2b03      	cmp	r3, #3
 8017bd6:	d103      	bne.n	8017be0 <f_open+0x20c>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8017bd8:	f8ba 3014 	ldrh.w	r3, [sl, #20]
 8017bdc:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
			fp->obj.id = fs->id;
 8017be0:	f8b9 3006 	ldrh.w	r3, [r9, #6]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8017be4:	2100      	movs	r1, #0
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8017be6:	60a6      	str	r6, [r4, #8]
		*d++ = (BYTE)val;
 8017be8:	f44f 7200 	mov.w	r2, #512	; 0x200
	rv = rv << 8 | ptr[0];
 8017bec:	f8da b01c 	ldr.w	fp, [sl, #28]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8017bf0:	f104 0a30 	add.w	sl, r4, #48	; 0x30
			fp->flag = mode;		/* Set file access mode */
 8017bf4:	7527      	strb	r7, [r4, #20]
		*d++ = (BYTE)val;
 8017bf6:	4650      	mov	r0, sl
			fp->obj.fs = fs;	 	/* Validate the file object */
 8017bf8:	f8c4 9000 	str.w	r9, [r4]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8017bfc:	f8c4 b00c 	str.w	fp, [r4, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8017c00:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->obj.id = fs->id;
 8017c02:	80a3      	strh	r3, [r4, #4]
			fp->err = 0;			/* Clear error flag */
 8017c04:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8017c06:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8017c08:	61a1      	str	r1, [r4, #24]
		*d++ = (BYTE)val;
 8017c0a:	f00e fcba 	bl	8026582 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8017c0e:	f017 0720 	ands.w	r7, r7, #32
 8017c12:	d02d      	beq.n	8017c70 <f_open+0x29c>
 8017c14:	f1bb 0f00 	cmp.w	fp, #0
 8017c18:	d02f      	beq.n	8017c7a <f_open+0x2a6>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8017c1a:	f8b9 300a 	ldrh.w	r3, [r9, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8017c1e:	f8c4 b018 	str.w	fp, [r4, #24]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8017c22:	ebbb 2f43 	cmp.w	fp, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8017c26:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8017c2a:	d806      	bhi.n	8017c3a <f_open+0x266>
 8017c2c:	e066      	b.n	8017cfc <f_open+0x328>
 8017c2e:	1c43      	adds	r3, r0, #1
 8017c30:	f000 808a 	beq.w	8017d48 <f_open+0x374>
 8017c34:	455f      	cmp	r7, fp
 8017c36:	f080 8087 	bcs.w	8017d48 <f_open+0x374>
					clst = get_fat(&fp->obj, clst);
 8017c3a:	4631      	mov	r1, r6
 8017c3c:	6820      	ldr	r0, [r4, #0]
 8017c3e:	f7fe f87b 	bl	8015d38 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 8017c42:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8017c44:	ebab 0b07 	sub.w	fp, fp, r7
					clst = get_fat(&fp->obj, clst);
 8017c48:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
 8017c4a:	d8f0      	bhi.n	8017c2e <f_open+0x25a>
 8017c4c:	2002      	movs	r0, #2
				fp->clust = clst;
 8017c4e:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8017c50:	e71b      	b.n	8017a8a <f_open+0xb6>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8017c52:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8017c56:	06da      	lsls	r2, r3, #27
 8017c58:	d433      	bmi.n	8017cc2 <f_open+0x2ee>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8017c5a:	07b1      	lsls	r1, r6, #30
 8017c5c:	d517      	bpl.n	8017c8e <f_open+0x2ba>
 8017c5e:	07da      	lsls	r2, r3, #31
 8017c60:	d515      	bpl.n	8017c8e <f_open+0x2ba>
		FREE_NAMBUF();
 8017c62:	4640      	mov	r0, r8
						res = FR_DENIED;
 8017c64:	2507      	movs	r5, #7
		FREE_NAMBUF();
 8017c66:	f001 fb23 	bl	80192b0 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8017c6a:	e6c5      	b.n	80179f8 <f_open+0x24>
				res = FR_INVALID_NAME;
 8017c6c:	2006      	movs	r0, #6
 8017c6e:	e70c      	b.n	8017a8a <f_open+0xb6>
		FREE_NAMBUF();
 8017c70:	4640      	mov	r0, r8
 8017c72:	463d      	mov	r5, r7
 8017c74:	f001 fb1c 	bl	80192b0 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8017c78:	e6c0      	b.n	80179fc <f_open+0x28>
		FREE_NAMBUF();
 8017c7a:	4640      	mov	r0, r8
 8017c7c:	f001 fb18 	bl	80192b0 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8017c80:	e6bc      	b.n	80179fc <f_open+0x28>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8017c82:	2010      	movs	r0, #16
 8017c84:	e701      	b.n	8017a8a <f_open+0xb6>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8017c86:	0736      	lsls	r6, r6, #28
 8017c88:	f57f af58 	bpl.w	8017b3c <f_open+0x168>
 8017c8c:	e718      	b.n	8017ac0 <f_open+0xec>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8017c8e:	f006 0608 	and.w	r6, r6, #8
 8017c92:	2e00      	cmp	r6, #0
 8017c94:	f47f af4e 	bne.w	8017b34 <f_open+0x160>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8017c98:	4660      	mov	r0, ip
 8017c9a:	e74f      	b.n	8017b3c <f_open+0x168>
			be = 1;
 8017c9c:	f04f 0a01 	mov.w	sl, #1
 8017ca0:	e6e0      	b.n	8017a64 <f_open+0x90>
		if (Files[i].fs) {	/* Existing entry */
 8017ca2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8017ca4:	2900      	cmp	r1, #0
 8017ca6:	f43f af7a 	beq.w	8017b9e <f_open+0x1ca>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017caa:	4291      	cmp	r1, r2
 8017cac:	f47f af77 	bne.w	8017b9e <f_open+0x1ca>
 8017cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017cb2:	4596      	cmp	lr, r2
 8017cb4:	f47f af73 	bne.w	8017b9e <f_open+0x1ca>
				Files[i].clu == dp->obj.sclust &&
 8017cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017cba:	4593      	cmp	fp, r2
 8017cbc:	f47f af6f 	bne.w	8017b9e <f_open+0x1ca>
 8017cc0:	e782      	b.n	8017bc8 <f_open+0x1f4>
		FREE_NAMBUF();
 8017cc2:	4640      	mov	r0, r8
					res = FR_NO_FILE;
 8017cc4:	2504      	movs	r5, #4
		FREE_NAMBUF();
 8017cc6:	f001 faf3 	bl	80192b0 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8017cca:	e695      	b.n	80179f8 <f_open+0x24>
					res = FR_DENIED;
 8017ccc:	2007      	movs	r0, #7
 8017cce:	e6dc      	b.n	8017a8a <f_open+0xb6>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017cd0:	6959      	ldr	r1, [r3, #20]
 8017cd2:	4571      	cmp	r1, lr
 8017cd4:	f47f aec6 	bne.w	8017a64 <f_open+0x90>
				Files[i].clu == dp->obj.sclust &&
 8017cd8:	6999      	ldr	r1, [r3, #24]
 8017cda:	458b      	cmp	fp, r1
 8017cdc:	f47f aec2 	bne.w	8017a64 <f_open+0x90>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8017ce0:	2201      	movs	r2, #1
 8017ce2:	e753      	b.n	8017b8c <f_open+0x1b8>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017ce4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8017ce6:	4571      	cmp	r1, lr
 8017ce8:	f47f aec3 	bne.w	8017a72 <f_open+0x9e>
				Files[i].clu == dp->obj.sclust &&
 8017cec:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8017cee:	4559      	cmp	r1, fp
 8017cf0:	f47f aebf 	bne.w	8017a72 <f_open+0x9e>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8017cf4:	2202      	movs	r2, #2
 8017cf6:	e749      	b.n	8017b8c <f_open+0x1b8>
 8017cf8:	2000a1fc 	.word	0x2000a1fc
				fp->clust = clst;
 8017cfc:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8017cfe:	f3cb 0308 	ubfx	r3, fp, #0, #9
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d0b9      	beq.n	8017c7a <f_open+0x2a6>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017d06:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 8017d0a:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017d0c:	3b02      	subs	r3, #2
 8017d0e:	429e      	cmp	r6, r3
 8017d10:	f4bf af24 	bcs.w	8017b5c <f_open+0x188>
	return clst * fs->csize + fs->database;
 8017d14:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 8017d18:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8017d1c:	fb06 3202 	mla	r2, r6, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
 8017d20:	2a00      	cmp	r2, #0
 8017d22:	f43f af1b 	beq.w	8017b5c <f_open+0x188>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8017d26:	eb02 225b 	add.w	r2, r2, fp, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8017d2a:	4651      	mov	r1, sl
 8017d2c:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8017d2e:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8017d30:	f899 0001 	ldrb.w	r0, [r9, #1]
 8017d34:	f7fd fc60 	bl	80155f8 <disk_read>
 8017d38:	4605      	mov	r5, r0
		FREE_NAMBUF();
 8017d3a:	4640      	mov	r0, r8
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8017d3c:	2d00      	cmp	r5, #0
 8017d3e:	d09d      	beq.n	8017c7c <f_open+0x2a8>
 8017d40:	2501      	movs	r5, #1
		FREE_NAMBUF();
 8017d42:	f001 fab5 	bl	80192b0 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8017d46:	e657      	b.n	80179f8 <f_open+0x24>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8017d48:	1c71      	adds	r1, r6, #1
				fp->clust = clst;
 8017d4a:	61e6      	str	r6, [r4, #28]
					if (clst <= 1) res = FR_INT_ERR;
 8017d4c:	bf0c      	ite	eq
 8017d4e:	2001      	moveq	r0, #1
 8017d50:	2000      	movne	r0, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8017d52:	f43f ae9a 	beq.w	8017a8a <f_open+0xb6>
 8017d56:	e7d2      	b.n	8017cfe <f_open+0x32a>

08017d58 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8017d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d5c:	461e      	mov	r6, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8017d5e:	2300      	movs	r3, #0
{
 8017d60:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 8017d62:	6033      	str	r3, [r6, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8017d64:	b150      	cbz	r0, 8017d7c <f_read+0x24>
 8017d66:	6803      	ldr	r3, [r0, #0]
 8017d68:	4604      	mov	r4, r0
 8017d6a:	b13b      	cbz	r3, 8017d7c <f_read+0x24>
 8017d6c:	4691      	mov	r9, r2
 8017d6e:	781a      	ldrb	r2, [r3, #0]
 8017d70:	b122      	cbz	r2, 8017d7c <f_read+0x24>
 8017d72:	460d      	mov	r5, r1
 8017d74:	88da      	ldrh	r2, [r3, #6]
 8017d76:	8881      	ldrh	r1, [r0, #4]
 8017d78:	4291      	cmp	r1, r2
 8017d7a:	d005      	beq.n	8017d88 <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 8017d7c:	f04f 0809 	mov.w	r8, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8017d80:	4640      	mov	r0, r8
 8017d82:	b005      	add	sp, #20
 8017d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8017d88:	7858      	ldrb	r0, [r3, #1]
 8017d8a:	f7fd fc19 	bl	80155c0 <disk_status>
 8017d8e:	07c2      	lsls	r2, r0, #31
 8017d90:	d4f4      	bmi.n	8017d7c <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8017d92:	f894 8015 	ldrb.w	r8, [r4, #21]
 8017d96:	f1b8 0f00 	cmp.w	r8, #0
 8017d9a:	d1f1      	bne.n	8017d80 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8017d9c:	7d23      	ldrb	r3, [r4, #20]
 8017d9e:	f013 0301 	ands.w	r3, r3, #1
 8017da2:	9300      	str	r3, [sp, #0]
 8017da4:	f000 80db 	beq.w	8017f5e <f_read+0x206>
	remain = fp->obj.objsize - fp->fptr;
 8017da8:	69a3      	ldr	r3, [r4, #24]
 8017daa:	68e7      	ldr	r7, [r4, #12]
 8017dac:	1aff      	subs	r7, r7, r3
 8017dae:	454f      	cmp	r7, r9
 8017db0:	bf28      	it	cs
 8017db2:	464f      	movcs	r7, r9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8017db4:	f8d4 9000 	ldr.w	r9, [r4]
	for ( ;  btr;								/* Repeat until all data read */
 8017db8:	2f00      	cmp	r7, #0
 8017dba:	d0e1      	beq.n	8017d80 <f_read+0x28>
 8017dbc:	f104 0231 	add.w	r2, r4, #49	; 0x31
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017dc0:	f104 0a30 	add.w	sl, r4, #48	; 0x30
 8017dc4:	e9cd 2801 	strd	r2, r8, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8017dc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8017dcc:	2a00      	cmp	r2, #0
 8017dce:	d159      	bne.n	8017e84 <f_read+0x12c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8017dd0:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 8017dd4:	0a59      	lsrs	r1, r3, #9
 8017dd6:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8017dd8:	ea12 2253 	ands.w	r2, r2, r3, lsr #9
 8017ddc:	f000 8084 	beq.w	8017ee8 <f_read+0x190>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8017de0:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017de2:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 8017de6:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017de8:	3b02      	subs	r3, #2
 8017dea:	4298      	cmp	r0, r3
 8017dec:	f080 808a 	bcs.w	8017f04 <f_read+0x1ac>
	return clst * fs->csize + fs->database;
 8017df0:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 8017df4:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8017df8:	fb01 3300 	mla	r3, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	f000 8081 	beq.w	8017f04 <f_read+0x1ac>
			if (cc) {							/* Read maximum contiguous sectors directly */
 8017e02:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
 8017e06:	eb02 0b03 	add.w	fp, r2, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
 8017e0a:	d325      	bcc.n	8017e58 <f_read+0x100>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8017e0c:	eb02 2057 	add.w	r0, r2, r7, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8017e10:	ea4f 2857 	mov.w	r8, r7, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8017e14:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017e16:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 8017e1a:	bf88      	it	hi
 8017e1c:	eba1 0802 	subhi.w	r8, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017e20:	465a      	mov	r2, fp
 8017e22:	4629      	mov	r1, r5
 8017e24:	4643      	mov	r3, r8
 8017e26:	f7fd fbe7 	bl	80155f8 <disk_read>
 8017e2a:	2800      	cmp	r0, #0
 8017e2c:	f040 8085 	bne.w	8017f3a <f_read+0x1e2>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8017e30:	f994 2014 	ldrsb.w	r2, [r4, #20]
 8017e34:	2a00      	cmp	r2, #0
 8017e36:	f2c0 80a9 	blt.w	8017f8c <f_read+0x234>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8017e3a:	ea4f 2c48 	mov.w	ip, r8, lsl #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8017e3e:	69a3      	ldr	r3, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
 8017e40:	ebb7 070c 	subs.w	r7, r7, ip
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8017e44:	6832      	ldr	r2, [r6, #0]
 8017e46:	4465      	add	r5, ip
 8017e48:	4463      	add	r3, ip
 8017e4a:	4462      	add	r2, ip
 8017e4c:	61a3      	str	r3, [r4, #24]
 8017e4e:	6032      	str	r2, [r6, #0]
	for ( ;  btr;								/* Repeat until all data read */
 8017e50:	d1ba      	bne.n	8017dc8 <f_read+0x70>
 8017e52:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8017e56:	e793      	b.n	8017d80 <f_read+0x28>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8017e58:	6a22      	ldr	r2, [r4, #32]
 8017e5a:	455a      	cmp	r2, fp
 8017e5c:	d00d      	beq.n	8017e7a <f_read+0x122>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8017e5e:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	f2c0 8085 	blt.w	8017f72 <f_read+0x21a>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8017e68:	2301      	movs	r3, #1
 8017e6a:	465a      	mov	r2, fp
 8017e6c:	4651      	mov	r1, sl
 8017e6e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8017e72:	f7fd fbc1 	bl	80155f8 <disk_read>
 8017e76:	2800      	cmp	r0, #0
 8017e78:	d15f      	bne.n	8017f3a <f_read+0x1e2>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8017e7a:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
 8017e7c:	f8c4 b020 	str.w	fp, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8017e80:	f3c3 0208 	ubfx	r2, r3, #0, #9
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8017e84:	1c51      	adds	r1, r2, #1
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8017e86:	f5c2 7c00 	rsb	ip, r2, #512	; 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8017e8a:	eb0a 0302 	add.w	r3, sl, r2
 8017e8e:	4451      	add	r1, sl
 8017e90:	45bc      	cmp	ip, r7
 8017e92:	eba5 0101 	sub.w	r1, r5, r1
 8017e96:	bf28      	it	cs
 8017e98:	46bc      	movcs	ip, r7
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8017e9a:	2902      	cmp	r1, #2
 8017e9c:	f10c 3bff 	add.w	fp, ip, #4294967295
 8017ea0:	d953      	bls.n	8017f4a <f_read+0x1f2>
 8017ea2:	f1bb 0f05 	cmp.w	fp, #5
 8017ea6:	d950      	bls.n	8017f4a <f_read+0x1f2>
 8017ea8:	f02c 0e03 	bic.w	lr, ip, #3
 8017eac:	461a      	mov	r2, r3
 8017eae:	4629      	mov	r1, r5
 8017eb0:	449e      	add	lr, r3
			*d++ = *s++;
 8017eb2:	f852 0b04 	ldr.w	r0, [r2], #4
 8017eb6:	4572      	cmp	r2, lr
 8017eb8:	f841 0b04 	str.w	r0, [r1], #4
		} while (--cnt);
 8017ebc:	d1f9      	bne.n	8017eb2 <f_read+0x15a>
 8017ebe:	f02c 0203 	bic.w	r2, ip, #3
 8017ec2:	4594      	cmp	ip, r2
 8017ec4:	eb05 0102 	add.w	r1, r5, r2
 8017ec8:	eb03 0002 	add.w	r0, r3, r2
 8017ecc:	d0b7      	beq.n	8017e3e <f_read+0xe6>
			*d++ = *s++;
 8017ece:	5c9b      	ldrb	r3, [r3, r2]
		} while (--cnt);
 8017ed0:	ebbb 0b02 	subs.w	fp, fp, r2
			*d++ = *s++;
 8017ed4:	54ab      	strb	r3, [r5, r2]
		} while (--cnt);
 8017ed6:	d0b2      	beq.n	8017e3e <f_read+0xe6>
			*d++ = *s++;
 8017ed8:	7843      	ldrb	r3, [r0, #1]
		} while (--cnt);
 8017eda:	f1bb 0f01 	cmp.w	fp, #1
			*d++ = *s++;
 8017ede:	704b      	strb	r3, [r1, #1]
		} while (--cnt);
 8017ee0:	d0ad      	beq.n	8017e3e <f_read+0xe6>
			*d++ = *s++;
 8017ee2:	7883      	ldrb	r3, [r0, #2]
 8017ee4:	708b      	strb	r3, [r1, #2]
		} while (--cnt);
 8017ee6:	e7aa      	b.n	8017e3e <f_read+0xe6>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8017ee8:	b99b      	cbnz	r3, 8017f12 <f_read+0x1ba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8017eea:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8017eec:	2801      	cmp	r0, #1
 8017eee:	d909      	bls.n	8017f04 <f_read+0x1ac>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017ef0:	1c43      	adds	r3, r0, #1
 8017ef2:	d022      	beq.n	8017f3a <f_read+0x1e2>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017ef4:	f8d9 3018 	ldr.w	r3, [r9, #24]
				fp->clust = clst;				/* Update current cluster */
 8017ef8:	61e0      	str	r0, [r4, #28]
	clst -= 2;
 8017efa:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017efc:	3b02      	subs	r3, #2
 8017efe:	4298      	cmp	r0, r3
 8017f00:	f4ff af76 	bcc.w	8017df0 <f_read+0x98>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8017f04:	2302      	movs	r3, #2
 8017f06:	4698      	mov	r8, r3
 8017f08:	7563      	strb	r3, [r4, #21]
}
 8017f0a:	4640      	mov	r0, r8
 8017f0c:	b005      	add	sp, #20
 8017f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 8017f12:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8017f14:	b330      	cbz	r0, 8017f64 <f_read+0x20c>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8017f16:	6823      	ldr	r3, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8017f18:	3004      	adds	r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8017f1a:	895b      	ldrh	r3, [r3, #10]
 8017f1c:	fbb1 f3f3 	udiv	r3, r1, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017f20:	6801      	ldr	r1, [r0, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8017f22:	b929      	cbnz	r1, 8017f30 <f_read+0x1d8>
 8017f24:	e7ee      	b.n	8017f04 <f_read+0x1ac>
		cl -= ncl; tbl++;		/* Next fragment */
 8017f26:	1a5b      	subs	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017f28:	f850 1f08 	ldr.w	r1, [r0, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8017f2c:	2900      	cmp	r1, #0
 8017f2e:	d0e9      	beq.n	8017f04 <f_read+0x1ac>
		if (cl < ncl) break;	/* In this fragment? */
 8017f30:	4299      	cmp	r1, r3
 8017f32:	d9f8      	bls.n	8017f26 <f_read+0x1ce>
	return cl + *tbl;	/* Return the cluster number */
 8017f34:	6840      	ldr	r0, [r0, #4]
 8017f36:	4418      	add	r0, r3
 8017f38:	e7d8      	b.n	8017eec <f_read+0x194>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017f3a:	f8dd 8000 	ldr.w	r8, [sp]
 8017f3e:	2301      	movs	r3, #1
}
 8017f40:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017f42:	7563      	strb	r3, [r4, #21]
}
 8017f44:	b005      	add	sp, #20
 8017f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f4a:	1e6a      	subs	r2, r5, #1
 8017f4c:	eb03 000c 	add.w	r0, r3, ip
			*d++ = *s++;
 8017f50:	f813 1b01 	ldrb.w	r1, [r3], #1
		} while (--cnt);
 8017f54:	4283      	cmp	r3, r0
			*d++ = *s++;
 8017f56:	f802 1f01 	strb.w	r1, [r2, #1]!
		} while (--cnt);
 8017f5a:	d1f9      	bne.n	8017f50 <f_read+0x1f8>
 8017f5c:	e76f      	b.n	8017e3e <f_read+0xe6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8017f5e:	f04f 0807 	mov.w	r8, #7
 8017f62:	e70d      	b.n	8017d80 <f_read+0x28>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8017f64:	69e1      	ldr	r1, [r4, #28]
 8017f66:	6820      	ldr	r0, [r4, #0]
 8017f68:	9203      	str	r2, [sp, #12]
 8017f6a:	f7fd fee5 	bl	8015d38 <get_fat.isra.0>
 8017f6e:	9a03      	ldr	r2, [sp, #12]
 8017f70:	e7bc      	b.n	8017eec <f_read+0x194>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017f72:	2301      	movs	r3, #1
 8017f74:	4651      	mov	r1, sl
 8017f76:	f899 0001 	ldrb.w	r0, [r9, #1]
 8017f7a:	f7fd fb4d 	bl	8015618 <disk_write>
 8017f7e:	2800      	cmp	r0, #0
 8017f80:	d1db      	bne.n	8017f3a <f_read+0x1e2>
					fp->flag &= (BYTE)~FA_DIRTY;
 8017f82:	7d23      	ldrb	r3, [r4, #20]
 8017f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017f88:	7523      	strb	r3, [r4, #20]
 8017f8a:	e76d      	b.n	8017e68 <f_read+0x110>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8017f8c:	6a22      	ldr	r2, [r4, #32]
 8017f8e:	eba2 020b 	sub.w	r2, r2, fp
 8017f92:	4542      	cmp	r2, r8
 8017f94:	f4bf af51 	bcs.w	8017e3a <f_read+0xe2>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8017f98:	eb05 2242 	add.w	r2, r5, r2, lsl #9
 8017f9c:	9b01      	ldr	r3, [sp, #4]
 8017f9e:	4651      	mov	r1, sl
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8017fa0:	1ad0      	subs	r0, r2, r3
 8017fa2:	2802      	cmp	r0, #2
 8017fa4:	d908      	bls.n	8017fb8 <f_read+0x260>
 8017fa6:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
 8017faa:	f851 3b04 	ldr.w	r3, [r1], #4
 8017fae:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
 8017fb2:	4562      	cmp	r2, ip
 8017fb4:	d1f9      	bne.n	8017faa <f_read+0x252>
 8017fb6:	e740      	b.n	8017e3a <f_read+0xe2>
 8017fb8:	3a01      	subs	r2, #1
 8017fba:	f504 7c0c 	add.w	ip, r4, #560	; 0x230
			*d++ = *s++;
 8017fbe:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 8017fc2:	458c      	cmp	ip, r1
			*d++ = *s++;
 8017fc4:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
 8017fc8:	d1f9      	bne.n	8017fbe <f_read+0x266>
 8017fca:	e736      	b.n	8017e3a <f_read+0xe2>

08017fcc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8017fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fd0:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8017fd2:	2300      	movs	r3, #0
{
 8017fd4:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
 8017fd6:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8017fd8:	b150      	cbz	r0, 8017ff0 <f_write+0x24>
 8017fda:	6803      	ldr	r3, [r0, #0]
 8017fdc:	4604      	mov	r4, r0
 8017fde:	b13b      	cbz	r3, 8017ff0 <f_write+0x24>
 8017fe0:	4616      	mov	r6, r2
 8017fe2:	781a      	ldrb	r2, [r3, #0]
 8017fe4:	b122      	cbz	r2, 8017ff0 <f_write+0x24>
 8017fe6:	460d      	mov	r5, r1
 8017fe8:	88da      	ldrh	r2, [r3, #6]
 8017fea:	8881      	ldrh	r1, [r0, #4]
 8017fec:	4291      	cmp	r1, r2
 8017fee:	d005      	beq.n	8017ffc <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 8017ff0:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 8017ff4:	4640      	mov	r0, r8
 8017ff6:	b005      	add	sp, #20
 8017ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8017ffc:	7858      	ldrb	r0, [r3, #1]
 8017ffe:	f7fd fadf 	bl	80155c0 <disk_status>
 8018002:	07c0      	lsls	r0, r0, #31
 8018004:	d4f4      	bmi.n	8017ff0 <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8018006:	f894 8015 	ldrb.w	r8, [r4, #21]
 801800a:	f1b8 0f00 	cmp.w	r8, #0
 801800e:	d1f1      	bne.n	8017ff4 <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8018010:	7d22      	ldrb	r2, [r4, #20]
 8018012:	0791      	lsls	r1, r2, #30
 8018014:	f140 80f2 	bpl.w	80181fc <f_write+0x230>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8018018:	69a3      	ldr	r3, [r4, #24]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801801a:	f8d4 9000 	ldr.w	r9, [r4]
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801801e:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8018020:	bf28      	it	cs
 8018022:	43de      	mvncs	r6, r3
	for ( ;  btw;							/* Repeat until all data written */
 8018024:	2e00      	cmp	r6, #0
 8018026:	d065      	beq.n	80180f4 <f_write+0x128>
 8018028:	f504 720c 	add.w	r2, r4, #560	; 0x230
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801802c:	f104 0a30 	add.w	sl, r4, #48	; 0x30
 8018030:	9201      	str	r2, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8018032:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8018036:	2a00      	cmp	r2, #0
 8018038:	d16b      	bne.n	8018112 <f_write+0x146>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801803a:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
 801803e:	0a5a      	lsrs	r2, r3, #9
 8018040:	f10b 3bff 	add.w	fp, fp, #4294967295
			if (csect == 0) {				/* On the cluster boundary? */
 8018044:	ea1b 2b53 	ands.w	fp, fp, r3, lsr #9
 8018048:	d110      	bne.n	801806c <f_write+0xa0>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801804a:	2b00      	cmp	r3, #0
 801804c:	f040 80a1 	bne.w	8018192 <f_write+0x1c6>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8018050:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8018052:	2800      	cmp	r0, #0
 8018054:	f000 80dd 	beq.w	8018212 <f_write+0x246>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8018058:	2801      	cmp	r0, #1
 801805a:	f000 8093 	beq.w	8018184 <f_write+0x1b8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801805e:	1c43      	adds	r3, r0, #1
 8018060:	f000 80bb 	beq.w	80181da <f_write+0x20e>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8018064:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8018066:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8018068:	b903      	cbnz	r3, 801806c <f_write+0xa0>
 801806a:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801806c:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8018070:	2b00      	cmp	r3, #0
 8018072:	f2c0 80a5 	blt.w	80181c0 <f_write+0x1f4>
	clst -= 2;
 8018076:	69e3      	ldr	r3, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8018078:	f8d9 2018 	ldr.w	r2, [r9, #24]
	clst -= 2;
 801807c:	3b02      	subs	r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801807e:	3a02      	subs	r2, #2
 8018080:	4293      	cmp	r3, r2
 8018082:	d27f      	bcs.n	8018184 <f_write+0x1b8>
	return clst * fs->csize + fs->database;
 8018084:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 8018088:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
 801808c:	fb01 2203 	mla	r2, r1, r3, r2
			if (!sect) ABORT(fs, FR_INT_ERR);
 8018090:	2a00      	cmp	r2, #0
 8018092:	d077      	beq.n	8018184 <f_write+0x1b8>
			if (cc) {						/* Write maximum contiguous sectors directly */
 8018094:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 8018098:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
 801809a:	d32f      	bcc.n	80180fc <f_write+0x130>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801809c:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80180a0:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80180a2:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80180a4:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 80180a8:	bf88      	it	hi
 80180aa:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80180ae:	4629      	mov	r1, r5
 80180b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80180b4:	f7fd fab0 	bl	8015618 <disk_write>
 80180b8:	2800      	cmp	r0, #0
 80180ba:	f040 808e 	bne.w	80181da <f_write+0x20e>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80180be:	6a21      	ldr	r1, [r4, #32]
 80180c0:	9a02      	ldr	r2, [sp, #8]
 80180c2:	9b03      	ldr	r3, [sp, #12]
 80180c4:	1a8a      	subs	r2, r1, r2
 80180c6:	429a      	cmp	r2, r3
 80180c8:	f0c0 80b7 	bcc.w	801823a <f_write+0x26e>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80180cc:	eb05 2243 	add.w	r2, r5, r3, lsl #9
 80180d0:	ea4f 2c43 	mov.w	ip, r3, lsl #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80180d4:	69a3      	ldr	r3, [r4, #24]
 80180d6:	4615      	mov	r5, r2
 80180d8:	68e2      	ldr	r2, [r4, #12]
 80180da:	4463      	add	r3, ip
 80180dc:	429a      	cmp	r2, r3
 80180de:	61a3      	str	r3, [r4, #24]
 80180e0:	bf38      	it	cc
 80180e2:	461a      	movcc	r2, r3
	for ( ;  btw;							/* Repeat until all data written */
 80180e4:	ebb6 060c 	subs.w	r6, r6, ip
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80180e8:	60e2      	str	r2, [r4, #12]
 80180ea:	683a      	ldr	r2, [r7, #0]
 80180ec:	4462      	add	r2, ip
 80180ee:	603a      	str	r2, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
 80180f0:	d19f      	bne.n	8018032 <f_write+0x66>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80180f2:	7d22      	ldrb	r2, [r4, #20]
 80180f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80180f8:	7522      	strb	r2, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 80180fa:	e77b      	b.n	8017ff4 <f_write+0x28>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80180fc:	6a23      	ldr	r3, [r4, #32]
 80180fe:	4293      	cmp	r3, r2
				fp->fptr < fp->obj.objsize &&
 8018100:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8018102:	d003      	beq.n	801810c <f_write+0x140>
 8018104:	68e1      	ldr	r1, [r4, #12]
 8018106:	428b      	cmp	r3, r1
 8018108:	f0c0 808b 	bcc.w	8018222 <f_write+0x256>
			fp->sect = sect;
 801810c:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801810e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8018112:	f5c2 7c00 	rsb	ip, r2, #512	; 0x200
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8018116:	eb0a 0302 	add.w	r3, sl, r2
 801811a:	1c6a      	adds	r2, r5, #1
 801811c:	45b4      	cmp	ip, r6
 801811e:	eba3 0202 	sub.w	r2, r3, r2
 8018122:	bf28      	it	cs
 8018124:	46b4      	movcs	ip, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8018126:	2a02      	cmp	r2, #2
 8018128:	f10c 3bff 	add.w	fp, ip, #4294967295
 801812c:	d95c      	bls.n	80181e8 <f_write+0x21c>
 801812e:	f1bb 0f05 	cmp.w	fp, #5
 8018132:	d959      	bls.n	80181e8 <f_write+0x21c>
 8018134:	f02c 0e03 	bic.w	lr, ip, #3
 8018138:	461a      	mov	r2, r3
 801813a:	4629      	mov	r1, r5
 801813c:	449e      	add	lr, r3
			*d++ = *s++;
 801813e:	f851 0b04 	ldr.w	r0, [r1], #4
 8018142:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 8018146:	4572      	cmp	r2, lr
 8018148:	d1f9      	bne.n	801813e <f_write+0x172>
 801814a:	f02c 0103 	bic.w	r1, ip, #3
 801814e:	458c      	cmp	ip, r1
 8018150:	eb03 0001 	add.w	r0, r3, r1
 8018154:	eb05 0201 	add.w	r2, r5, r1
 8018158:	d00f      	beq.n	801817a <f_write+0x1ae>
			*d++ = *s++;
 801815a:	f815 e001 	ldrb.w	lr, [r5, r1]
		} while (--cnt);
 801815e:	ebbb 0b01 	subs.w	fp, fp, r1
			*d++ = *s++;
 8018162:	f803 e001 	strb.w	lr, [r3, r1]
		} while (--cnt);
 8018166:	d006      	beq.n	8018176 <f_write+0x1aa>
			*d++ = *s++;
 8018168:	7853      	ldrb	r3, [r2, #1]
		} while (--cnt);
 801816a:	f1bb 0f01 	cmp.w	fp, #1
			*d++ = *s++;
 801816e:	7043      	strb	r3, [r0, #1]
 8018170:	bf1c      	itt	ne
 8018172:	7893      	ldrbne	r3, [r2, #2]
 8018174:	7083      	strbne	r3, [r0, #2]
		} while (--cnt);
 8018176:	eb05 020c 	add.w	r2, r5, ip
		fp->flag |= FA_DIRTY;
 801817a:	7d23      	ldrb	r3, [r4, #20]
 801817c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018180:	7523      	strb	r3, [r4, #20]
 8018182:	e7a7      	b.n	80180d4 <f_write+0x108>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8018184:	2302      	movs	r3, #2
 8018186:	4698      	mov	r8, r3
 8018188:	7563      	strb	r3, [r4, #21]
}
 801818a:	4640      	mov	r0, r8
 801818c:	b005      	add	sp, #20
 801818e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 8018192:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8018194:	b3a9      	cbz	r1, 8018202 <f_write+0x236>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8018196:	6823      	ldr	r3, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8018198:	3104      	adds	r1, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801819a:	895b      	ldrh	r3, [r3, #10]
 801819c:	fbb2 f3f3 	udiv	r3, r2, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80181a0:	680a      	ldr	r2, [r1, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80181a2:	b92a      	cbnz	r2, 80181b0 <f_write+0x1e4>
 80181a4:	e7a5      	b.n	80180f2 <f_write+0x126>
		cl -= ncl; tbl++;		/* Next fragment */
 80181a6:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80181a8:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 80181ac:	2a00      	cmp	r2, #0
 80181ae:	d0a0      	beq.n	80180f2 <f_write+0x126>
		if (cl < ncl) break;	/* In this fragment? */
 80181b0:	4293      	cmp	r3, r2
 80181b2:	d2f8      	bcs.n	80181a6 <f_write+0x1da>
	return cl + *tbl;	/* Return the cluster number */
 80181b4:	6848      	ldr	r0, [r1, #4]
 80181b6:	4418      	add	r0, r3
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80181b8:	2800      	cmp	r0, #0
 80181ba:	f47f af4d 	bne.w	8018058 <f_write+0x8c>
 80181be:	e798      	b.n	80180f2 <f_write+0x126>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80181c0:	2301      	movs	r3, #1
 80181c2:	6a22      	ldr	r2, [r4, #32]
 80181c4:	4651      	mov	r1, sl
 80181c6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80181ca:	f7fd fa25 	bl	8015618 <disk_write>
 80181ce:	b920      	cbnz	r0, 80181da <f_write+0x20e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80181d0:	7d23      	ldrb	r3, [r4, #20]
 80181d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80181d6:	7523      	strb	r3, [r4, #20]
 80181d8:	e74d      	b.n	8018076 <f_write+0xaa>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80181da:	2301      	movs	r3, #1
 80181dc:	4698      	mov	r8, r3
 80181de:	7563      	strb	r3, [r4, #21]
}
 80181e0:	4640      	mov	r0, r8
 80181e2:	b005      	add	sp, #20
 80181e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181e8:	3b01      	subs	r3, #1
 80181ea:	eb05 020c 	add.w	r2, r5, ip
			*d++ = *s++;
 80181ee:	f815 1b01 	ldrb.w	r1, [r5], #1
		} while (--cnt);
 80181f2:	4295      	cmp	r5, r2
			*d++ = *s++;
 80181f4:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
 80181f8:	d1f9      	bne.n	80181ee <f_write+0x222>
 80181fa:	e7be      	b.n	801817a <f_write+0x1ae>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80181fc:	f04f 0807 	mov.w	r8, #7
 8018200:	e6f8      	b.n	8017ff4 <f_write+0x28>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8018202:	69e1      	ldr	r1, [r4, #28]
 8018204:	4620      	mov	r0, r4
 8018206:	f7fe f851 	bl	80162ac <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801820a:	2800      	cmp	r0, #0
 801820c:	f47f af24 	bne.w	8018058 <f_write+0x8c>
 8018210:	e76f      	b.n	80180f2 <f_write+0x126>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8018212:	4659      	mov	r1, fp
 8018214:	4620      	mov	r0, r4
 8018216:	f7fe f849 	bl	80162ac <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801821a:	2800      	cmp	r0, #0
 801821c:	f47f af1c 	bne.w	8018058 <f_write+0x8c>
 8018220:	e767      	b.n	80180f2 <f_write+0x126>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8018222:	2301      	movs	r3, #1
 8018224:	4651      	mov	r1, sl
 8018226:	f899 0001 	ldrb.w	r0, [r9, #1]
 801822a:	9202      	str	r2, [sp, #8]
 801822c:	f7fd f9e4 	bl	80155f8 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8018230:	2800      	cmp	r0, #0
 8018232:	d1d2      	bne.n	80181da <f_write+0x20e>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8018234:	69a3      	ldr	r3, [r4, #24]
 8018236:	9a02      	ldr	r2, [sp, #8]
 8018238:	e768      	b.n	801810c <f_write+0x140>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801823a:	eb05 2042 	add.w	r0, r5, r2, lsl #9
 801823e:	1c42      	adds	r2, r0, #1
 8018240:	4601      	mov	r1, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8018242:	ebaa 0202 	sub.w	r2, sl, r2
 8018246:	2a02      	cmp	r2, #2
 8018248:	d90d      	bls.n	8018266 <f_write+0x29a>
 801824a:	4652      	mov	r2, sl
 801824c:	f8dd c004 	ldr.w	ip, [sp, #4]
			*d++ = *s++;
 8018250:	f851 0b04 	ldr.w	r0, [r1], #4
 8018254:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 8018258:	4562      	cmp	r2, ip
 801825a:	d1f9      	bne.n	8018250 <f_write+0x284>
					fp->flag &= (BYTE)~FA_DIRTY;
 801825c:	7d22      	ldrb	r2, [r4, #20]
 801825e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8018262:	7522      	strb	r2, [r4, #20]
 8018264:	e732      	b.n	80180cc <f_write+0x100>
 8018266:	f104 022f 	add.w	r2, r4, #47	; 0x2f
 801826a:	f500 7c00 	add.w	ip, r0, #512	; 0x200
			*d++ = *s++;
 801826e:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
 8018272:	458c      	cmp	ip, r1
			*d++ = *s++;
 8018274:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 8018278:	d1f9      	bne.n	801826e <f_write+0x2a2>
 801827a:	e7ef      	b.n	801825c <f_write+0x290>

0801827c <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801827c:	b158      	cbz	r0, 8018296 <f_close+0x1a>
 801827e:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8018280:	b570      	push	{r4, r5, r6, lr}
 8018282:	4604      	mov	r4, r0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8018284:	b12b      	cbz	r3, 8018292 <f_close+0x16>
 8018286:	781a      	ldrb	r2, [r3, #0]
 8018288:	b11a      	cbz	r2, 8018292 <f_close+0x16>
 801828a:	8881      	ldrh	r1, [r0, #4]
 801828c:	88da      	ldrh	r2, [r3, #6]
 801828e:	4291      	cmp	r1, r2
 8018290:	d003      	beq.n	801829a <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 8018292:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8018294:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
 8018296:	2009      	movs	r0, #9
}
 8018298:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801829a:	7858      	ldrb	r0, [r3, #1]
 801829c:	f7fd f990 	bl	80155c0 <disk_status>
 80182a0:	07c1      	lsls	r1, r0, #31
 80182a2:	d4f6      	bmi.n	8018292 <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80182a4:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80182a6:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80182a8:	065a      	lsls	r2, r3, #25
 80182aa:	d52e      	bpl.n	801830a <f_close+0x8e>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80182ac:	061b      	lsls	r3, r3, #24
 80182ae:	d451      	bmi.n	8018354 <f_close+0xd8>
			tm = GET_FATTIME();				/* Modified time */
 80182b0:	f7fd f9ce 	bl	8015650 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 80182b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 80182b6:	4606      	mov	r6, r0
				res = move_window(fs, fp->dir_sect);
 80182b8:	4628      	mov	r0, r5
 80182ba:	f7fd faf9 	bl	80158b0 <move_window>
				if (res == FR_OK) {
 80182be:	2800      	cmp	r0, #0
 80182c0:	d1e8      	bne.n	8018294 <f_close+0x18>
					dir = fp->dir_ptr;
 80182c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80182c4:	7ada      	ldrb	r2, [r3, #11]
 80182c6:	f042 0220 	orr.w	r2, r2, #32
 80182ca:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80182cc:	68a2      	ldr	r2, [r4, #8]
 80182ce:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80182d0:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80182d4:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 80182d6:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 80182d8:	7809      	ldrb	r1, [r1, #0]
 80182da:	2903      	cmp	r1, #3
 80182dc:	d103      	bne.n	80182e6 <f_close+0x6a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80182de:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80182e0:	751a      	strb	r2, [r3, #20]
 80182e2:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 80182e4:	755a      	strb	r2, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 80182e6:	68e1      	ldr	r1, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 80182e8:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 80182ea:	f8c3 6016 	str.w	r6, [r3, #22]
					res = sync_fs(fs);					/* Restore it to the directory */
 80182ee:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
 80182f0:	61d9      	str	r1, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 80182f2:	825a      	strh	r2, [r3, #18]
					fs->wflag = 1;
 80182f4:	2301      	movs	r3, #1
 80182f6:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80182f8:	f7fd ff7a 	bl	80161f0 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 80182fc:	7d23      	ldrb	r3, [r4, #20]
 80182fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018302:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 8018304:	2800      	cmp	r0, #0
 8018306:	d1c5      	bne.n	8018294 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8018308:	6825      	ldr	r5, [r4, #0]
 801830a:	2d00      	cmp	r5, #0
 801830c:	d0c1      	beq.n	8018292 <f_close+0x16>
 801830e:	782b      	ldrb	r3, [r5, #0]
 8018310:	2b00      	cmp	r3, #0
 8018312:	d0be      	beq.n	8018292 <f_close+0x16>
 8018314:	88a2      	ldrh	r2, [r4, #4]
 8018316:	88eb      	ldrh	r3, [r5, #6]
 8018318:	429a      	cmp	r2, r3
 801831a:	d1ba      	bne.n	8018292 <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801831c:	7868      	ldrb	r0, [r5, #1]
 801831e:	f7fd f94f 	bl	80155c0 <disk_status>
 8018322:	f010 0001 	ands.w	r0, r0, #1
 8018326:	d1b4      	bne.n	8018292 <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8018328:	6923      	ldr	r3, [r4, #16]
 801832a:	3b01      	subs	r3, #1
 801832c:	2b03      	cmp	r3, #3
 801832e:	d81e      	bhi.n	801836e <f_close+0xf2>
		n = Files[i].ctr;
 8018330:	4912      	ldr	r1, [pc, #72]	; (801837c <f_close+0x100>)
 8018332:	011d      	lsls	r5, r3, #4
 8018334:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8018338:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801833a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801833e:	d018      	beq.n	8018372 <f_close+0xf6>
		if (n > 0) n--;				/* Decrement read mode open count */
 8018340:	b11a      	cbz	r2, 801834a <f_close+0xce>
 8018342:	3a01      	subs	r2, #1
 8018344:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 8018346:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8018348:	b90a      	cbnz	r2, 801834e <f_close+0xd2>
 801834a:	2300      	movs	r3, #0
 801834c:	514b      	str	r3, [r1, r5]
				fp->obj.fs = 0;			/* Invalidate file object */
 801834e:	2300      	movs	r3, #0
 8018350:	6023      	str	r3, [r4, #0]
}
 8018352:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8018354:	2301      	movs	r3, #1
 8018356:	6a22      	ldr	r2, [r4, #32]
 8018358:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801835c:	7868      	ldrb	r0, [r5, #1]
 801835e:	f7fd f95b 	bl	8015618 <disk_write>
 8018362:	b940      	cbnz	r0, 8018376 <f_close+0xfa>
				fp->flag &= (BYTE)~FA_DIRTY;
 8018364:	7d23      	ldrb	r3, [r4, #20]
 8018366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801836a:	7523      	strb	r3, [r4, #20]
 801836c:	e7a0      	b.n	80182b0 <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
 801836e:	2002      	movs	r0, #2
}
 8018370:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 8018372:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8018374:	e7e9      	b.n	801834a <f_close+0xce>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8018376:	2001      	movs	r0, #1
}
 8018378:	bd70      	pop	{r4, r5, r6, pc}
 801837a:	bf00      	nop
 801837c:	2000a1fc 	.word	0x2000a1fc

08018380 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8018380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018384:	b085      	sub	sp, #20
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8018386:	b148      	cbz	r0, 801839c <f_lseek+0x1c>
 8018388:	6803      	ldr	r3, [r0, #0]
 801838a:	4604      	mov	r4, r0
 801838c:	b133      	cbz	r3, 801839c <f_lseek+0x1c>
 801838e:	781a      	ldrb	r2, [r3, #0]
 8018390:	b122      	cbz	r2, 801839c <f_lseek+0x1c>
 8018392:	460d      	mov	r5, r1
 8018394:	88da      	ldrh	r2, [r3, #6]
 8018396:	8881      	ldrh	r1, [r0, #4]
 8018398:	4291      	cmp	r1, r2
 801839a:	d004      	beq.n	80183a6 <f_lseek+0x26>
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
 801839c:	2709      	movs	r7, #9
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 801839e:	4638      	mov	r0, r7
 80183a0:	b005      	add	sp, #20
 80183a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80183a6:	7858      	ldrb	r0, [r3, #1]
 80183a8:	f7fd f90a 	bl	80155c0 <disk_status>
 80183ac:	07c7      	lsls	r7, r0, #31
 80183ae:	d4f5      	bmi.n	801839c <f_lseek+0x1c>
	if (res == FR_OK) res = (FRESULT)fp->err;
 80183b0:	7d67      	ldrb	r7, [r4, #21]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80183b2:	f8d4 8000 	ldr.w	r8, [r4]
	if (res != FR_OK) LEAVE_FF(fs, res);
 80183b6:	2f00      	cmp	r7, #0
 80183b8:	d1f1      	bne.n	801839e <f_lseek+0x1e>
	if (fp->cltbl) {	/* Fast seek */
 80183ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80183bc:	2a00      	cmp	r2, #0
 80183be:	d04a      	beq.n	8018456 <f_lseek+0xd6>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80183c0:	1c6e      	adds	r6, r5, #1
 80183c2:	f000 8098 	beq.w	80184f6 <f_lseek+0x176>
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80183c6:	68e3      	ldr	r3, [r4, #12]
 80183c8:	4628      	mov	r0, r5
 80183ca:	429d      	cmp	r5, r3
 80183cc:	bf28      	it	cs
 80183ce:	4618      	movcs	r0, r3
			fp->fptr = ofs;				/* Set file pointer */
 80183d0:	61a0      	str	r0, [r4, #24]
			if (ofs) {
 80183d2:	2800      	cmp	r0, #0
 80183d4:	d0e3      	beq.n	801839e <f_lseek+0x1e>
				fp->clust = clmt_clust(fp, ofs - 1);
 80183d6:	1e46      	subs	r6, r0, #1
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80183d8:	f8b8 500a 	ldrh.w	r5, [r8, #10]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80183dc:	6853      	ldr	r3, [r2, #4]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80183de:	3204      	adds	r2, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80183e0:	0a76      	lsrs	r6, r6, #9
 80183e2:	fbb6 f1f5 	udiv	r1, r6, r5
		if (ncl == 0) return 0;	/* End of table? (error) */
 80183e6:	b933      	cbnz	r3, 80183f6 <f_lseek+0x76>
 80183e8:	e0ef      	b.n	80185ca <f_lseek+0x24a>
		cl -= ncl; tbl++;		/* Next fragment */
 80183ea:	1ac9      	subs	r1, r1, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80183ec:	f852 3f08 	ldr.w	r3, [r2, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	f000 80ea 	beq.w	80185ca <f_lseek+0x24a>
		if (cl < ncl) break;	/* In this fragment? */
 80183f6:	4299      	cmp	r1, r3
 80183f8:	d2f7      	bcs.n	80183ea <f_lseek+0x6a>
	return cl + *tbl;	/* Return the cluster number */
 80183fa:	6853      	ldr	r3, [r2, #4]
 80183fc:	440b      	add	r3, r1
	clst -= 2;
 80183fe:	1e99      	subs	r1, r3, #2
				fp->clust = clmt_clust(fp, ofs - 1);
 8018400:	61e3      	str	r3, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8018402:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8018406:	3b02      	subs	r3, #2
 8018408:	428b      	cmp	r3, r1
 801840a:	f240 80a7 	bls.w	801855c <f_lseek+0x1dc>
	return clst * fs->csize + fs->database;
 801840e:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8018412:	fb01 2205 	mla	r2, r1, r5, r2
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8018416:	2a00      	cmp	r2, #0
 8018418:	f000 80a0 	beq.w	801855c <f_lseek+0x1dc>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801841c:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8018420:	2800      	cmp	r0, #0
 8018422:	d0bc      	beq.n	801839e <f_lseek+0x1e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8018424:	3d01      	subs	r5, #1
 8018426:	4035      	ands	r5, r6
 8018428:	4415      	add	r5, r2
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801842a:	6a22      	ldr	r2, [r4, #32]
 801842c:	42aa      	cmp	r2, r5
 801842e:	d0b6      	beq.n	801839e <f_lseek+0x1e>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8018430:	f994 3014 	ldrsb.w	r3, [r4, #20]
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018434:	f104 0130 	add.w	r1, r4, #48	; 0x30
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8018438:	2b00      	cmp	r3, #0
 801843a:	f2c0 8147 	blt.w	80186cc <f_lseek+0x34c>
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801843e:	2301      	movs	r3, #1
 8018440:	f898 0001 	ldrb.w	r0, [r8, #1]
 8018444:	462a      	mov	r2, r5
 8018446:	f7fd f8d7 	bl	80155f8 <disk_read>
 801844a:	4607      	mov	r7, r0
 801844c:	2800      	cmp	r0, #0
 801844e:	f040 8081 	bne.w	8018554 <f_lseek+0x1d4>
					fp->sect = dsc;
 8018452:	6225      	str	r5, [r4, #32]
 8018454:	e7a3      	b.n	801839e <f_lseek+0x1e>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8018456:	68e3      	ldr	r3, [r4, #12]
 8018458:	42ab      	cmp	r3, r5
 801845a:	d204      	bcs.n	8018466 <f_lseek+0xe6>
 801845c:	7d22      	ldrb	r2, [r4, #20]
 801845e:	f012 0f02 	tst.w	r2, #2
 8018462:	bf08      	it	eq
 8018464:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 8018466:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 8018468:	69a3      	ldr	r3, [r4, #24]
		fp->fptr = nsect = 0;
 801846a:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 801846c:	2d00      	cmp	r5, #0
 801846e:	d096      	beq.n	801839e <f_lseek+0x1e>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8018470:	f8b8 900a 	ldrh.w	r9, [r8, #10]
 8018474:	ea4f 2949 	mov.w	r9, r9, lsl #9
			if (ifptr > 0 &&
 8018478:	2b00      	cmp	r3, #0
 801847a:	d035      	beq.n	80184e8 <f_lseek+0x168>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801847c:	3b01      	subs	r3, #1
 801847e:	1e6a      	subs	r2, r5, #1
 8018480:	fbb3 f1f9 	udiv	r1, r3, r9
 8018484:	fbb2 f2f9 	udiv	r2, r2, r9
			if (ifptr > 0 &&
 8018488:	428a      	cmp	r2, r1
 801848a:	d32d      	bcc.n	80184e8 <f_lseek+0x168>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801848c:	f1c9 0200 	rsb	r2, r9, #0
				clst = fp->clust;
 8018490:	69e6      	ldr	r6, [r4, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8018492:	4013      	ands	r3, r2
				ofs -= fp->fptr;
 8018494:	1aed      	subs	r5, r5, r3
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8018496:	61a3      	str	r3, [r4, #24]
			if (clst != 0) {
 8018498:	2e00      	cmp	r6, #0
 801849a:	f000 80c3 	beq.w	8018624 <f_lseek+0x2a4>
				while (ofs > bcs) {						/* Cluster following loop */
 801849e:	454d      	cmp	r5, r9
 80184a0:	f240 8125 	bls.w	80186ee <f_lseek+0x36e>
 80184a4:	4631      	mov	r1, r6
 80184a6:	e012      	b.n	80184ce <f_lseek+0x14e>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80184a8:	f7fd ff00 	bl	80162ac <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 80184ac:	4601      	mov	r1, r0
 80184ae:	2800      	cmp	r0, #0
 80184b0:	f000 80b6 	beq.w	8018620 <f_lseek+0x2a0>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80184b4:	1c4b      	adds	r3, r1, #1
 80184b6:	d04d      	beq.n	8018554 <f_lseek+0x1d4>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80184b8:	2901      	cmp	r1, #1
 80184ba:	d94f      	bls.n	801855c <f_lseek+0x1dc>
 80184bc:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80184c0:	428b      	cmp	r3, r1
 80184c2:	d94b      	bls.n	801855c <f_lseek+0x1dc>
				while (ofs > bcs) {						/* Cluster following loop */
 80184c4:	45a9      	cmp	r9, r5
					fp->clust = clst;
 80184c6:	61e1      	str	r1, [r4, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80184c8:	f080 810f 	bcs.w	80186ea <f_lseek+0x36a>
				fp->fptr += ofs;
 80184cc:	69a3      	ldr	r3, [r4, #24]
					ofs -= bcs; fp->fptr += bcs;
 80184ce:	444b      	add	r3, r9
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80184d0:	4620      	mov	r0, r4
					ofs -= bcs; fp->fptr += bcs;
 80184d2:	eba5 0509 	sub.w	r5, r5, r9
 80184d6:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80184d8:	7d23      	ldrb	r3, [r4, #20]
 80184da:	079a      	lsls	r2, r3, #30
 80184dc:	d4e4      	bmi.n	80184a8 <f_lseek+0x128>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80184de:	6820      	ldr	r0, [r4, #0]
 80184e0:	f7fd fc2a 	bl	8015d38 <get_fat.isra.0>
 80184e4:	4601      	mov	r1, r0
 80184e6:	e7e5      	b.n	80184b4 <f_lseek+0x134>
				clst = fp->obj.sclust;					/* start from the first cluster */
 80184e8:	68a6      	ldr	r6, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80184ea:	2e00      	cmp	r6, #0
 80184ec:	f000 808c 	beq.w	8018608 <f_lseek+0x288>
 80184f0:	2300      	movs	r3, #0
				fp->clust = clst;
 80184f2:	61e6      	str	r6, [r4, #28]
 80184f4:	e7d0      	b.n	8018498 <f_lseek+0x118>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80184f6:	4691      	mov	r9, r2
			cl = fp->obj.sclust;		/* Origin of the chain */
 80184f8:	f8d4 a008 	ldr.w	sl, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80184fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8018500:	9301      	str	r3, [sp, #4]
			if (cl) {
 8018502:	f1ba 0f00 	cmp.w	sl, #0
 8018506:	d056      	beq.n	80185b6 <f_lseek+0x236>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8018508:	2302      	movs	r3, #2
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801850a:	4646      	mov	r6, r8
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801850c:	e9cd 9702 	strd	r9, r7, [sp, #8]
 8018510:	46a1      	mov	r9, r4
 8018512:	9300      	str	r3, [sp, #0]
 8018514:	4655      	mov	r5, sl
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8018516:	2400      	movs	r4, #0
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8018518:	2d01      	cmp	r5, #1
						pcl = cl; ncl++;
 801851a:	f104 0401 	add.w	r4, r4, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801851e:	d902      	bls.n	8018526 <f_lseek+0x1a6>
 8018520:	69b3      	ldr	r3, [r6, #24]
 8018522:	429d      	cmp	r5, r3
 8018524:	d304      	bcc.n	8018530 <f_lseek+0x1b0>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8018526:	2302      	movs	r3, #2
 8018528:	461f      	mov	r7, r3
 801852a:	f889 3015 	strb.w	r3, [r9, #21]
 801852e:	e736      	b.n	801839e <f_lseek+0x1e>
		switch (fs->fs_type) {
 8018530:	7833      	ldrb	r3, [r6, #0]
 8018532:	2b02      	cmp	r3, #2
 8018534:	d031      	beq.n	801859a <f_lseek+0x21a>
 8018536:	2b03      	cmp	r3, #3
 8018538:	d017      	beq.n	801856a <f_lseek+0x1ea>
 801853a:	2b01      	cmp	r3, #1
 801853c:	d1f3      	bne.n	8018526 <f_lseek+0x1a6>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801853e:	6a71      	ldr	r1, [r6, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 8018540:	eb05 0b55 	add.w	fp, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018544:	4630      	mov	r0, r6
 8018546:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 801854a:	f7fd f9b1 	bl	80158b0 <move_window>
 801854e:	2800      	cmp	r0, #0
 8018550:	d03e      	beq.n	80185d0 <f_lseek+0x250>
 8018552:	464c      	mov	r4, r9
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018554:	2301      	movs	r3, #1
 8018556:	461f      	mov	r7, r3
 8018558:	7563      	strb	r3, [r4, #21]
 801855a:	e720      	b.n	801839e <f_lseek+0x1e>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801855c:	2302      	movs	r3, #2
 801855e:	461f      	mov	r7, r3
 8018560:	7563      	strb	r3, [r4, #21]
}
 8018562:	4638      	mov	r0, r7
 8018564:	b005      	add	sp, #20
 8018566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801856a:	6a71      	ldr	r1, [r6, #36]	; 0x24
 801856c:	4630      	mov	r0, r6
 801856e:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 8018572:	f7fd f99d 	bl	80158b0 <move_window>
 8018576:	2800      	cmp	r0, #0
 8018578:	d1eb      	bne.n	8018552 <f_lseek+0x1d2>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801857a:	00ab      	lsls	r3, r5, #2
 801857c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8018580:	4433      	add	r3, r6
 8018582:	6b5f      	ldr	r7, [r3, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8018584:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8018588:	2f01      	cmp	r7, #1
 801858a:	d9cc      	bls.n	8018526 <f_lseek+0x1a6>
					} while (cl == pcl + 1);
 801858c:	3501      	adds	r5, #1
 801858e:	42bd      	cmp	r5, r7
 8018590:	d16b      	bne.n	801866a <f_lseek+0x2ea>
 8018592:	463d      	mov	r5, r7
 8018594:	f8d9 6000 	ldr.w	r6, [r9]
 8018598:	e7be      	b.n	8018518 <f_lseek+0x198>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801859a:	6a71      	ldr	r1, [r6, #36]	; 0x24
 801859c:	4630      	mov	r0, r6
 801859e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80185a2:	f7fd f985 	bl	80158b0 <move_window>
 80185a6:	2800      	cmp	r0, #0
 80185a8:	d1d3      	bne.n	8018552 <f_lseek+0x1d2>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80185aa:	006b      	lsls	r3, r5, #1
 80185ac:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80185b0:	4433      	add	r3, r6
 80185b2:	8e9f      	ldrh	r7, [r3, #52]	; 0x34
			break;
 80185b4:	e7e8      	b.n	8018588 <f_lseek+0x208>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80185b6:	2302      	movs	r3, #2
 80185b8:	9300      	str	r3, [sp, #0]
			*fp->cltbl = ulen;	/* Number of items used */
 80185ba:	6013      	str	r3, [r2, #0]
			if (ulen <= tlen) {
 80185bc:	9a01      	ldr	r2, [sp, #4]
 80185be:	4293      	cmp	r3, r2
 80185c0:	d868      	bhi.n	8018694 <f_lseek+0x314>
				*tbl = 0;		/* Terminate table */
 80185c2:	2300      	movs	r3, #0
 80185c4:	f8c9 3000 	str.w	r3, [r9]
 80185c8:	e6e9      	b.n	801839e <f_lseek+0x1e>
 80185ca:	f06f 0101 	mvn.w	r1, #1
 80185ce:	e717      	b.n	8018400 <f_lseek+0x80>
			wc = fs->win[bc++ % SS(fs)];
 80185d0:	f3cb 0308 	ubfx	r3, fp, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80185d4:	6a71      	ldr	r1, [r6, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 80185d6:	f10b 0b01 	add.w	fp, fp, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80185da:	4630      	mov	r0, r6
			wc = fs->win[bc++ % SS(fs)];
 80185dc:	4433      	add	r3, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80185de:	eb01 215b 	add.w	r1, r1, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 80185e2:	f893 7034 	ldrb.w	r7, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80185e6:	f7fd f963 	bl	80158b0 <move_window>
 80185ea:	2800      	cmp	r0, #0
 80185ec:	d1b1      	bne.n	8018552 <f_lseek+0x1d2>
			wc |= fs->win[bc % SS(fs)] << 8;
 80185ee:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80185f2:	07e8      	lsls	r0, r5, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80185f4:	44b3      	add	fp, r6
 80185f6:	f89b 3034 	ldrb.w	r3, [fp, #52]	; 0x34
 80185fa:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80185fe:	bf4c      	ite	mi
 8018600:	093f      	lsrmi	r7, r7, #4
 8018602:	f3c7 070b 	ubfxpl	r7, r7, #0, #12
 8018606:	e7bf      	b.n	8018588 <f_lseek+0x208>
					clst = create_chain(&fp->obj, 0);
 8018608:	4631      	mov	r1, r6
 801860a:	4620      	mov	r0, r4
 801860c:	f7fd fe4e 	bl	80162ac <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8018610:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 8018612:	4606      	mov	r6, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8018614:	d0a2      	beq.n	801855c <f_lseek+0x1dc>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018616:	1c41      	adds	r1, r0, #1
 8018618:	d09c      	beq.n	8018554 <f_lseek+0x1d4>
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801861a:	69a3      	ldr	r3, [r4, #24]
					fp->obj.sclust = clst;
 801861c:	60a0      	str	r0, [r4, #8]
 801861e:	e768      	b.n	80184f2 <f_lseek+0x172>
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8018620:	4606      	mov	r6, r0
 8018622:	69a3      	ldr	r3, [r4, #24]
 8018624:	68e2      	ldr	r2, [r4, #12]
 8018626:	429a      	cmp	r2, r3
 8018628:	d27f      	bcs.n	801872a <f_lseek+0x3aa>
			fp->flag |= FA_MODIFIED;
 801862a:	7d22      	ldrb	r2, [r4, #20]
			fp->obj.objsize = fp->fptr;
 801862c:	60e3      	str	r3, [r4, #12]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801862e:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->flag |= FA_MODIFIED;
 8018632:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018636:	7522      	strb	r2, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8018638:	2b00      	cmp	r3, #0
 801863a:	f43f aeb0 	beq.w	801839e <f_lseek+0x1e>
 801863e:	6a22      	ldr	r2, [r4, #32]
 8018640:	42b2      	cmp	r2, r6
 8018642:	f43f aeac 	beq.w	801839e <f_lseek+0x1e>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8018646:	f994 3014 	ldrsb.w	r3, [r4, #20]
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801864a:	f104 0130 	add.w	r1, r4, #48	; 0x30
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801864e:	2b00      	cmp	r3, #0
 8018650:	db22      	blt.n	8018698 <f_lseek+0x318>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8018652:	2301      	movs	r3, #1
 8018654:	f898 0001 	ldrb.w	r0, [r8, #1]
 8018658:	4632      	mov	r2, r6
 801865a:	f7fc ffcd 	bl	80155f8 <disk_read>
 801865e:	4607      	mov	r7, r0
 8018660:	2800      	cmp	r0, #0
 8018662:	f47f af77 	bne.w	8018554 <f_lseek+0x1d4>
			fp->sect = nsect;
 8018666:	6226      	str	r6, [r4, #32]
 8018668:	e699      	b.n	801839e <f_lseek+0x1e>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801866a:	9b00      	ldr	r3, [sp, #0]
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801866c:	9a01      	ldr	r2, [sp, #4]
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801866e:	3302      	adds	r3, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8018670:	429a      	cmp	r2, r3
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8018672:	9300      	str	r3, [sp, #0]
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8018674:	d31f      	bcc.n	80186b6 <f_lseek+0x336>
						*tbl++ = ncl; *tbl++ = tcl;
 8018676:	9b02      	ldr	r3, [sp, #8]
 8018678:	4619      	mov	r1, r3
 801867a:	f841 4b08 	str.w	r4, [r1], #8
 801867e:	f8c3 a004 	str.w	sl, [r3, #4]
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8018682:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8018686:	42ba      	cmp	r2, r7
 8018688:	d94b      	bls.n	8018722 <f_lseek+0x3a2>
						*tbl++ = ncl; *tbl++ = tcl;
 801868a:	9102      	str	r1, [sp, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801868c:	46ba      	mov	sl, r7
 801868e:	f8d9 6000 	ldr.w	r6, [r9]
 8018692:	e73f      	b.n	8018514 <f_lseek+0x194>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8018694:	2711      	movs	r7, #17
 8018696:	e682      	b.n	801839e <f_lseek+0x1e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018698:	2301      	movs	r3, #1
 801869a:	f898 0001 	ldrb.w	r0, [r8, #1]
 801869e:	9100      	str	r1, [sp, #0]
 80186a0:	f7fc ffba 	bl	8015618 <disk_write>
 80186a4:	2800      	cmp	r0, #0
 80186a6:	f47f af55 	bne.w	8018554 <f_lseek+0x1d4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80186aa:	7d23      	ldrb	r3, [r4, #20]
 80186ac:	9900      	ldr	r1, [sp, #0]
 80186ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80186b2:	7523      	strb	r3, [r4, #20]
 80186b4:	e7cd      	b.n	8018652 <f_lseek+0x2d2>
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80186b6:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80186ba:	42ba      	cmp	r2, r7
 80186bc:	d8e6      	bhi.n	801868c <f_lseek+0x30c>
 80186be:	464c      	mov	r4, r9
 80186c0:	9f03      	ldr	r7, [sp, #12]
 80186c2:	f8dd 9008 	ldr.w	r9, [sp, #8]
			*fp->cltbl = ulen;	/* Number of items used */
 80186c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80186c8:	9b00      	ldr	r3, [sp, #0]
 80186ca:	e776      	b.n	80185ba <f_lseek+0x23a>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80186cc:	2301      	movs	r3, #1
 80186ce:	f898 0001 	ldrb.w	r0, [r8, #1]
 80186d2:	9100      	str	r1, [sp, #0]
 80186d4:	f7fc ffa0 	bl	8015618 <disk_write>
 80186d8:	2800      	cmp	r0, #0
 80186da:	f47f af3b 	bne.w	8018554 <f_lseek+0x1d4>
						fp->flag &= (BYTE)~FA_DIRTY;
 80186de:	7d23      	ldrb	r3, [r4, #20]
 80186e0:	9900      	ldr	r1, [sp, #0]
 80186e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80186e6:	7523      	strb	r3, [r4, #20]
 80186e8:	e6a9      	b.n	801843e <f_lseek+0xbe>
				fp->fptr += ofs;
 80186ea:	460e      	mov	r6, r1
 80186ec:	69a3      	ldr	r3, [r4, #24]
 80186ee:	442b      	add	r3, r5
				if (ofs % SS(fs)) {
 80186f0:	f3c5 0208 	ubfx	r2, r5, #0, #9
				fp->fptr += ofs;
 80186f4:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 80186f6:	b192      	cbz	r2, 801871e <f_lseek+0x39e>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80186f8:	f8d8 2018 	ldr.w	r2, [r8, #24]
	clst -= 2;
 80186fc:	1eb1      	subs	r1, r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80186fe:	3a02      	subs	r2, #2
 8018700:	4291      	cmp	r1, r2
 8018702:	f4bf af2b 	bcs.w	801855c <f_lseek+0x1dc>
	return clst * fs->csize + fs->database;
 8018706:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801870a:	f8d8 602c 	ldr.w	r6, [r8, #44]	; 0x2c
 801870e:	fb01 6602 	mla	r6, r1, r2, r6
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8018712:	2e00      	cmp	r6, #0
 8018714:	f43f af22 	beq.w	801855c <f_lseek+0x1dc>
					nsect += (DWORD)(ofs / SS(fs));
 8018718:	eb06 2655 	add.w	r6, r6, r5, lsr #9
 801871c:	e782      	b.n	8018624 <f_lseek+0x2a4>
		fp->fptr = nsect = 0;
 801871e:	4616      	mov	r6, r2
 8018720:	e780      	b.n	8018624 <f_lseek+0x2a4>
						*tbl++ = ncl; *tbl++ = tcl;
 8018722:	464c      	mov	r4, r9
 8018724:	9f03      	ldr	r7, [sp, #12]
 8018726:	4689      	mov	r9, r1
 8018728:	e7cd      	b.n	80186c6 <f_lseek+0x346>
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801872a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801872e:	e783      	b.n	8018638 <f_lseek+0x2b8>

08018730 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8018730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018732:	b085      	sub	sp, #20
 8018734:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8018736:	2800      	cmp	r0, #0
 8018738:	d041      	beq.n	80187be <f_opendir+0x8e>

	/* Get logical drive */
	obj = &dp->obj;
 801873a:	4605      	mov	r5, r0
	res = find_volume(&path, &fs, 0);
 801873c:	2200      	movs	r2, #0
 801873e:	a903      	add	r1, sp, #12
 8018740:	a801      	add	r0, sp, #4
 8018742:	f7fd f8f3 	bl	801592c <find_volume>
	if (res == FR_OK) {
 8018746:	4604      	mov	r4, r0
 8018748:	b120      	cbz	r0, 8018754 <f_opendir+0x24>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801874a:	2300      	movs	r3, #0
 801874c:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 801874e:	4620      	mov	r0, r4
 8018750:	b005      	add	sp, #20
 8018752:	bdf0      	pop	{r4, r5, r6, r7, pc}
		obj->fs = fs;
 8018754:	9f03      	ldr	r7, [sp, #12]
		INIT_NAMBUF(fs);
 8018756:	f44f 7000 	mov.w	r0, #512	; 0x200
		obj->fs = fs;
 801875a:	602f      	str	r7, [r5, #0]
		INIT_NAMBUF(fs);
 801875c:	f000 fda6 	bl	80192ac <ff_memalloc>
 8018760:	4606      	mov	r6, r0
 8018762:	b380      	cbz	r0, 80187c6 <f_opendir+0x96>
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8018764:	9901      	ldr	r1, [sp, #4]
 8018766:	4628      	mov	r0, r5
		INIT_NAMBUF(fs);
 8018768:	60fe      	str	r6, [r7, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801876a:	f7fe f8b7 	bl	80168dc <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 801876e:	4604      	mov	r4, r0
 8018770:	b9f0      	cbnz	r0, 80187b0 <f_opendir+0x80>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8018772:	f995 302f 	ldrsb.w	r3, [r5, #47]	; 0x2f
 8018776:	2b00      	cmp	r3, #0
 8018778:	db0b      	blt.n	8018792 <f_opendir+0x62>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801877a:	79ab      	ldrb	r3, [r5, #6]
 801877c:	06db      	lsls	r3, r3, #27
 801877e:	d524      	bpl.n	80187ca <f_opendir+0x9a>
	if (fs->fs_type == FS_FAT32) {
 8018780:	7839      	ldrb	r1, [r7, #0]
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8018782:	6a2a      	ldr	r2, [r5, #32]
	if (fs->fs_type == FS_FAT32) {
 8018784:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8018786:	8b53      	ldrh	r3, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
 8018788:	d102      	bne.n	8018790 <f_opendir+0x60>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801878a:	8a92      	ldrh	r2, [r2, #20]
 801878c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8018790:	60ab      	str	r3, [r5, #8]
				obj->id = fs->id;
 8018792:	88fb      	ldrh	r3, [r7, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8018794:	2100      	movs	r1, #0
 8018796:	4628      	mov	r0, r5
				obj->id = fs->id;
 8018798:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801879a:	f7fd fe47 	bl	801642c <dir_sdi>
				if (res == FR_OK) {
 801879e:	4604      	mov	r4, r0
 80187a0:	b930      	cbnz	r0, 80187b0 <f_opendir+0x80>
					if (obj->sclust) {
 80187a2:	68ab      	ldr	r3, [r5, #8]
 80187a4:	b9b3      	cbnz	r3, 80187d4 <f_opendir+0xa4>
		FREE_NAMBUF();
 80187a6:	4630      	mov	r0, r6
						obj->lockid = 0;	/* Root directory need not to be locked */
 80187a8:	612c      	str	r4, [r5, #16]
		FREE_NAMBUF();
 80187aa:	f000 fd81 	bl	80192b0 <ff_memfree>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80187ae:	e7ce      	b.n	801874e <f_opendir+0x1e>
		FREE_NAMBUF();
 80187b0:	4630      	mov	r0, r6
 80187b2:	f000 fd7d 	bl	80192b0 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80187b6:	2c04      	cmp	r4, #4
 80187b8:	bf08      	it	eq
 80187ba:	2405      	moveq	r4, #5
 80187bc:	e7c5      	b.n	801874a <f_opendir+0x1a>
	if (!dp) return FR_INVALID_OBJECT;
 80187be:	2409      	movs	r4, #9
}
 80187c0:	4620      	mov	r0, r4
 80187c2:	b005      	add	sp, #20
 80187c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		INIT_NAMBUF(fs);
 80187c6:	2411      	movs	r4, #17
 80187c8:	e7c1      	b.n	801874e <f_opendir+0x1e>
		FREE_NAMBUF();
 80187ca:	4630      	mov	r0, r6
					res = FR_NO_PATH;
 80187cc:	2405      	movs	r4, #5
		FREE_NAMBUF();
 80187ce:	f000 fd6f 	bl	80192b0 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80187d2:	e7ba      	b.n	801874a <f_opendir+0x1a>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80187d4:	4601      	mov	r1, r0
 80187d6:	4628      	mov	r0, r5
 80187d8:	f7fc ff3c 	bl	8015654 <inc_lock>
 80187dc:	6128      	str	r0, [r5, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80187de:	b920      	cbnz	r0, 80187ea <f_opendir+0xba>
		FREE_NAMBUF();
 80187e0:	4630      	mov	r0, r6
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80187e2:	2412      	movs	r4, #18
		FREE_NAMBUF();
 80187e4:	f000 fd64 	bl	80192b0 <ff_memfree>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80187e8:	e7af      	b.n	801874a <f_opendir+0x1a>
		FREE_NAMBUF();
 80187ea:	4630      	mov	r0, r6
 80187ec:	f000 fd60 	bl	80192b0 <ff_memfree>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80187f0:	e7ad      	b.n	801874e <f_opendir+0x1e>
 80187f2:	bf00      	nop

080187f4 <f_closedir>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80187f4:	b350      	cbz	r0, 801884c <f_closedir+0x58>
 80187f6:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80187f8:	b510      	push	{r4, lr}
 80187fa:	4604      	mov	r4, r0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80187fc:	b12b      	cbz	r3, 801880a <f_closedir+0x16>
 80187fe:	781a      	ldrb	r2, [r3, #0]
 8018800:	b11a      	cbz	r2, 801880a <f_closedir+0x16>
 8018802:	8881      	ldrh	r1, [r0, #4]
 8018804:	88da      	ldrh	r2, [r3, #6]
 8018806:	4291      	cmp	r1, r2
 8018808:	d001      	beq.n	801880e <f_closedir+0x1a>
	FRESULT res = FR_INVALID_OBJECT;
 801880a:	2009      	movs	r0, #9
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 801880c:	bd10      	pop	{r4, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801880e:	7858      	ldrb	r0, [r3, #1]
 8018810:	f7fc fed6 	bl	80155c0 <disk_status>
 8018814:	f010 0001 	ands.w	r0, r0, #1
 8018818:	d1f7      	bne.n	801880a <f_closedir+0x16>
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801881a:	6923      	ldr	r3, [r4, #16]
 801881c:	b19b      	cbz	r3, 8018846 <f_closedir+0x52>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801881e:	3b01      	subs	r3, #1
 8018820:	2b03      	cmp	r3, #3
 8018822:	d815      	bhi.n	8018850 <f_closedir+0x5c>
		n = Files[i].ctr;
 8018824:	490c      	ldr	r1, [pc, #48]	; (8018858 <f_closedir+0x64>)
 8018826:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 801882a:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 801882e:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8018830:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8018834:	d00e      	beq.n	8018854 <f_closedir+0x60>
		if (n > 0) n--;				/* Decrement read mode open count */
 8018836:	b11a      	cbz	r2, 8018840 <f_closedir+0x4c>
 8018838:	3a01      	subs	r2, #1
 801883a:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 801883c:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801883e:	b912      	cbnz	r2, 8018846 <f_closedir+0x52>
 8018840:	2300      	movs	r3, #0
 8018842:	f841 300c 	str.w	r3, [r1, ip]
			dp->obj.fs = 0;			/* Invalidate directory object */
 8018846:	2300      	movs	r3, #0
 8018848:	6023      	str	r3, [r4, #0]
}
 801884a:	bd10      	pop	{r4, pc}
	FRESULT res = FR_INVALID_OBJECT;
 801884c:	2009      	movs	r0, #9
}
 801884e:	4770      	bx	lr
		res = FR_INT_ERR;			/* Invalid index nunber */
 8018850:	2002      	movs	r0, #2
}
 8018852:	bd10      	pop	{r4, pc}
		Files[i].ctr = n;
 8018854:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8018856:	e7f3      	b.n	8018840 <f_closedir+0x4c>
 8018858:	2000a1fc 	.word	0x2000a1fc

0801885c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801885c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8018860:	b148      	cbz	r0, 8018876 <f_readdir+0x1a>
 8018862:	6803      	ldr	r3, [r0, #0]
 8018864:	4604      	mov	r4, r0
 8018866:	b133      	cbz	r3, 8018876 <f_readdir+0x1a>
 8018868:	781a      	ldrb	r2, [r3, #0]
 801886a:	b122      	cbz	r2, 8018876 <f_readdir+0x1a>
 801886c:	460e      	mov	r6, r1
 801886e:	88da      	ldrh	r2, [r3, #6]
 8018870:	8881      	ldrh	r1, [r0, #4]
 8018872:	4291      	cmp	r1, r2
 8018874:	d003      	beq.n	801887e <f_readdir+0x22>
	FRESULT res = FR_INVALID_OBJECT;
 8018876:	2509      	movs	r5, #9
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 8018878:	4628      	mov	r0, r5
 801887a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801887e:	7858      	ldrb	r0, [r3, #1]
 8018880:	f7fc fe9e 	bl	80155c0 <disk_status>
 8018884:	07c3      	lsls	r3, r0, #31
 8018886:	d4f6      	bmi.n	8018876 <f_readdir+0x1a>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8018888:	6825      	ldr	r5, [r4, #0]
		if (!fno) {
 801888a:	b1fe      	cbz	r6, 80188cc <f_readdir+0x70>
			INIT_NAMBUF(fs);
 801888c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8018890:	f000 fd0c 	bl	80192ac <ff_memalloc>
 8018894:	4607      	mov	r7, r0
 8018896:	b1f8      	cbz	r0, 80188d8 <f_readdir+0x7c>
 8018898:	60ef      	str	r7, [r5, #12]
			res = dir_read(dp, 0);			/* Read an item */
 801889a:	4620      	mov	r0, r4
 801889c:	f7fd faa2 	bl	8015de4 <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
 80188a0:	f010 08fb 	ands.w	r8, r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
 80188a4:	4605      	mov	r5, r0
			if (res == FR_OK) {				/* A valid entry is found */
 80188a6:	d10b      	bne.n	80188c0 <f_readdir+0x64>
				get_fileinfo(dp, fno);		/* Get the object information */
 80188a8:	4631      	mov	r1, r6
 80188aa:	4620      	mov	r0, r4
 80188ac:	f7fc ff42 	bl	8015734 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80188b0:	4641      	mov	r1, r8
 80188b2:	4620      	mov	r0, r4
 80188b4:	f7fe f99e 	bl	8016bf4 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80188b8:	2804      	cmp	r0, #4
				res = dir_next(dp, 0);		/* Increment index for next */
 80188ba:	4605      	mov	r5, r0
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80188bc:	bf08      	it	eq
 80188be:	2500      	moveq	r5, #0
			FREE_NAMBUF();
 80188c0:	4638      	mov	r0, r7
 80188c2:	f000 fcf5 	bl	80192b0 <ff_memfree>
}
 80188c6:	4628      	mov	r0, r5
 80188c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80188cc:	4631      	mov	r1, r6
 80188ce:	4620      	mov	r0, r4
}
 80188d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80188d4:	f7fd bdaa 	b.w	801642c <dir_sdi>
			INIT_NAMBUF(fs);
 80188d8:	2511      	movs	r5, #17
 80188da:	e7cd      	b.n	8018878 <f_readdir+0x1c>

080188dc <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80188dc:	b570      	push	{r4, r5, r6, lr}
 80188de:	b090      	sub	sp, #64	; 0x40
 80188e0:	460d      	mov	r5, r1
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80188e2:	2200      	movs	r2, #0
{
 80188e4:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &dj.obj.fs, 0);
 80188e6:	a903      	add	r1, sp, #12
 80188e8:	a801      	add	r0, sp, #4
 80188ea:	f7fd f81f 	bl	801592c <find_volume>
	if (res == FR_OK) {
 80188ee:	4604      	mov	r4, r0
 80188f0:	b110      	cbz	r0, 80188f8 <f_stat+0x1c>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
}
 80188f2:	4620      	mov	r0, r4
 80188f4:	b010      	add	sp, #64	; 0x40
 80188f6:	bd70      	pop	{r4, r5, r6, pc}
		INIT_NAMBUF(dj.obj.fs);
 80188f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80188fc:	f000 fcd6 	bl	80192ac <ff_memalloc>
 8018900:	4606      	mov	r6, r0
 8018902:	b1b0      	cbz	r0, 8018932 <f_stat+0x56>
 8018904:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8018906:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(dj.obj.fs);
 8018908:	60d8      	str	r0, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 801890a:	a803      	add	r0, sp, #12
 801890c:	f7fd ffe6 	bl	80168dc <follow_path>
		if (res == FR_OK) {				/* Follow completed */
 8018910:	4604      	mov	r4, r0
 8018912:	b940      	cbnz	r0, 8018926 <f_stat+0x4a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8018914:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8018918:	2b00      	cmp	r3, #0
 801891a:	db0c      	blt.n	8018936 <f_stat+0x5a>
				if (fno) get_fileinfo(&dj, fno);
 801891c:	b11d      	cbz	r5, 8018926 <f_stat+0x4a>
 801891e:	4629      	mov	r1, r5
 8018920:	a803      	add	r0, sp, #12
 8018922:	f7fc ff07 	bl	8015734 <get_fileinfo>
		FREE_NAMBUF();
 8018926:	4630      	mov	r0, r6
 8018928:	f000 fcc2 	bl	80192b0 <ff_memfree>
}
 801892c:	4620      	mov	r0, r4
 801892e:	b010      	add	sp, #64	; 0x40
 8018930:	bd70      	pop	{r4, r5, r6, pc}
		INIT_NAMBUF(dj.obj.fs);
 8018932:	2411      	movs	r4, #17
 8018934:	e7dd      	b.n	80188f2 <f_stat+0x16>
				res = FR_INVALID_NAME;
 8018936:	2406      	movs	r4, #6
 8018938:	e7f5      	b.n	8018926 <f_stat+0x4a>
 801893a:	bf00      	nop

0801893c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 801893c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018940:	b097      	sub	sp, #92	; 0x5c
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8018942:	2202      	movs	r2, #2
{
 8018944:	9007      	str	r0, [sp, #28]
	res = find_volume(&path, &fs, FA_WRITE);
 8018946:	a908      	add	r1, sp, #32
 8018948:	a807      	add	r0, sp, #28
 801894a:	f7fc ffef 	bl	801592c <find_volume>
	dj.obj.fs = fs;
 801894e:	9c08      	ldr	r4, [sp, #32]
	if (res == FR_OK) {
 8018950:	4606      	mov	r6, r0
	dj.obj.fs = fs;
 8018952:	9409      	str	r4, [sp, #36]	; 0x24
	if (res == FR_OK) {
 8018954:	b118      	cbz	r0, 801895e <f_mkdir+0x22>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 8018956:	4630      	mov	r0, r6
 8018958:	b017      	add	sp, #92	; 0x5c
 801895a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		INIT_NAMBUF(fs);
 801895e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8018962:	f000 fca3 	bl	80192ac <ff_memalloc>
 8018966:	4605      	mov	r5, r0
 8018968:	b188      	cbz	r0, 801898e <f_mkdir+0x52>
 801896a:	60e0      	str	r0, [r4, #12]
		res = follow_path(&dj, path);			/* Follow the file path */
 801896c:	a809      	add	r0, sp, #36	; 0x24
 801896e:	9907      	ldr	r1, [sp, #28]
 8018970:	f7fd ffb4 	bl	80168dc <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8018974:	b148      	cbz	r0, 801898a <f_mkdir+0x4e>
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8018976:	2804      	cmp	r0, #4
 8018978:	d00b      	beq.n	8018992 <f_mkdir+0x56>
 801897a:	4606      	mov	r6, r0
		FREE_NAMBUF();
 801897c:	4628      	mov	r0, r5
 801897e:	f000 fc97 	bl	80192b0 <ff_memfree>
}
 8018982:	4630      	mov	r0, r6
 8018984:	b017      	add	sp, #92	; 0x5c
 8018986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801898a:	2608      	movs	r6, #8
 801898c:	e7f6      	b.n	801897c <f_mkdir+0x40>
		INIT_NAMBUF(fs);
 801898e:	2611      	movs	r6, #17
 8018990:	e7e1      	b.n	8018956 <f_mkdir+0x1a>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8018992:	4631      	mov	r1, r6
 8018994:	a809      	add	r0, sp, #36	; 0x24
 8018996:	f7fd fc89 	bl	80162ac <create_chain>
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801899a:	8963      	ldrh	r3, [r4, #10]
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801899c:	9000      	str	r0, [sp, #0]
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801899e:	025b      	lsls	r3, r3, #9
 80189a0:	930c      	str	r3, [sp, #48]	; 0x30
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80189a2:	4603      	mov	r3, r0
 80189a4:	2800      	cmp	r0, #0
 80189a6:	f000 80d0 	beq.w	8018b4a <f_mkdir+0x20e>
			if (dcl == 1) res = FR_INT_ERR;
 80189aa:	2801      	cmp	r0, #1
 80189ac:	f000 80d1 	beq.w	8018b52 <f_mkdir+0x216>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80189b0:	3301      	adds	r3, #1
 80189b2:	f000 80e5 	beq.w	8018b80 <f_mkdir+0x244>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80189b6:	78e3      	ldrb	r3, [r4, #3]
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	f040 80e3 	bne.w	8018b84 <f_mkdir+0x248>
			tm = GET_FATTIME();
 80189be:	f7fc fe47 	bl	8015650 <get_fattime>
 80189c2:	f104 0734 	add.w	r7, r4, #52	; 0x34
 80189c6:	4680      	mov	r8, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80189c8:	69a3      	ldr	r3, [r4, #24]
	clst -= 2;
 80189ca:	9a00      	ldr	r2, [sp, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80189cc:	3b02      	subs	r3, #2
	clst -= 2;
 80189ce:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80189d0:	429a      	cmp	r2, r3
 80189d2:	f080 80d2 	bcs.w	8018b7a <f_mkdir+0x23e>
	return clst * fs->csize + fs->database;
 80189d6:	8961      	ldrh	r1, [r4, #10]
 80189d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80189da:	fb02 3b01 	mla	fp, r2, r1, r3
		*d++ = (BYTE)val;
 80189de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80189e2:	2100      	movs	r1, #0
 80189e4:	4638      	mov	r0, r7
 80189e6:	f00d fdcc 	bl	8026582 <memset>
 80189ea:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
	*ptr++ = (BYTE)val; val >>= 8;
 80189ee:	9a00      	ldr	r2, [sp, #0]
		*d++ = (BYTE)val;
 80189f0:	6363      	str	r3, [r4, #52]	; 0x34
 80189f2:	607b      	str	r3, [r7, #4]
 80189f4:	f8c7 3007 	str.w	r3, [r7, #7]
					dir[DIR_Name] = '.';
 80189f8:	232e      	movs	r3, #46	; 0x2e
	*ptr++ = (BYTE)val; val >>= 8;
 80189fa:	f8c4 804a 	str.w	r8, [r4, #74]	; 0x4a
					dir[DIR_Name] = '.';
 80189fe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
					dir[DIR_Attr] = AM_DIR;
 8018a02:	2310      	movs	r3, #16
 8018a04:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
	*ptr++ = (BYTE)val; val >>= 8;
 8018a08:	b2d3      	uxtb	r3, r2
 8018a0a:	9301      	str	r3, [sp, #4]
 8018a0c:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
	*ptr++ = (BYTE)val;
 8018a10:	f3c2 2307 	ubfx	r3, r2, #8, #8
	if (fs->fs_type == FS_FAT32) {
 8018a14:	7822      	ldrb	r2, [r4, #0]
	*ptr++ = (BYTE)val;
 8018a16:	9302      	str	r3, [sp, #8]
 8018a18:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
	*ptr++ = (BYTE)val; val >>= 8;
 8018a1c:	fa5f f388 	uxtb.w	r3, r8
	if (fs->fs_type == FS_FAT32) {
 8018a20:	2a03      	cmp	r2, #3
	*ptr++ = (BYTE)val; val >>= 8;
 8018a22:	9303      	str	r3, [sp, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8018a24:	f3c8 2307 	ubfx	r3, r8, #8, #8
 8018a28:	9304      	str	r3, [sp, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8018a2a:	f3c8 4307 	ubfx	r3, r8, #16, #8
 8018a2e:	9305      	str	r3, [sp, #20]
	*ptr++ = (BYTE)val;
 8018a30:	ea4f 6318 	mov.w	r3, r8, lsr #24
 8018a34:	9306      	str	r3, [sp, #24]
	if (fs->fs_type == FS_FAT32) {
 8018a36:	d106      	bne.n	8018a46 <f_mkdir+0x10a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8018a38:	9b00      	ldr	r3, [sp, #0]
 8018a3a:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8018a3c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8018a40:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
 8018a42:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
			*d++ = *s++;
 8018a46:	6b63      	ldr	r3, [r4, #52]	; 0x34
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8018a48:	2a03      	cmp	r2, #3
			*d++ = *s++;
 8018a4a:	6563      	str	r3, [r4, #84]	; 0x54
 8018a4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018a4e:	65a3      	str	r3, [r4, #88]	; 0x58
 8018a50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018a52:	65e3      	str	r3, [r4, #92]	; 0x5c
 8018a54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018a56:	6623      	str	r3, [r4, #96]	; 0x60
 8018a58:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018a5a:	6663      	str	r3, [r4, #100]	; 0x64
 8018a5c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8018a5e:	66a3      	str	r3, [r4, #104]	; 0x68
 8018a60:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8018a62:	66e3      	str	r3, [r4, #108]	; 0x6c
 8018a64:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8018a66:	6723      	str	r3, [r4, #112]	; 0x70
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8018a68:	f04f 032e 	mov.w	r3, #46	; 0x2e
 8018a6c:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8018a70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8018a72:	d070      	beq.n	8018b56 <f_mkdir+0x21a>
	*ptr++ = (BYTE)val; val >>= 8;
 8018a74:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 8018a78:	f3c3 2307 	ubfx	r3, r3, #8, #8
	*ptr++ = (BYTE)val;
 8018a7c:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8018a80:	f8b4 a00a 	ldrh.w	sl, [r4, #10]
 8018a84:	f1ba 0f00 	cmp.w	sl, #0
 8018a88:	d032      	beq.n	8018af0 <f_mkdir+0x1b4>
				dsc = clust2sect(fs, dcl);
 8018a8a:	46d8      	mov	r8, fp
					fs->winsect = dsc++;
 8018a8c:	4646      	mov	r6, r8
					fs->wflag = 1;
 8018a8e:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8018a92:	4639      	mov	r1, r7
 8018a94:	7860      	ldrb	r0, [r4, #1]
					fs->wflag = 1;
 8018a96:	70e3      	strb	r3, [r4, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8018a98:	4632      	mov	r2, r6
 8018a9a:	2301      	movs	r3, #1
					fs->winsect = dsc++;
 8018a9c:	6326      	str	r6, [r4, #48]	; 0x30
 8018a9e:	f108 0801 	add.w	r8, r8, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8018aa2:	f7fc fdb9 	bl	8015618 <disk_write>
 8018aa6:	2800      	cmp	r0, #0
 8018aa8:	d148      	bne.n	8018b3c <f_mkdir+0x200>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8018aaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
			fs->wflag = 0;
 8018aac:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8018aae:	1af2      	subs	r2, r6, r3
 8018ab0:	69e3      	ldr	r3, [r4, #28]
 8018ab2:	429a      	cmp	r2, r3
 8018ab4:	d212      	bcs.n	8018adc <f_mkdir+0x1a0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018ab6:	f894 9002 	ldrb.w	r9, [r4, #2]
 8018aba:	f1b9 0f01 	cmp.w	r9, #1
 8018abe:	d801      	bhi.n	8018ac4 <f_mkdir+0x188>
 8018ac0:	e00c      	b.n	8018adc <f_mkdir+0x1a0>
					wsect += fs->fsize;
 8018ac2:	69e3      	ldr	r3, [r4, #28]
 8018ac4:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018ac6:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8018aca:	2301      	movs	r3, #1
 8018acc:	4639      	mov	r1, r7
 8018ace:	4632      	mov	r2, r6
 8018ad0:	7860      	ldrb	r0, [r4, #1]
 8018ad2:	f7fc fda1 	bl	8015618 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018ad6:	f1b9 0f01 	cmp.w	r9, #1
 8018ada:	d1f2      	bne.n	8018ac2 <f_mkdir+0x186>
		*d++ = (BYTE)val;
 8018adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018ae0:	2100      	movs	r1, #0
 8018ae2:	4638      	mov	r0, r7
 8018ae4:	f00d fd4d 	bl	8026582 <memset>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8018ae8:	eb0a 030b 	add.w	r3, sl, fp
 8018aec:	4598      	cmp	r8, r3
 8018aee:	d1cd      	bne.n	8018a8c <f_mkdir+0x150>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8018af0:	a809      	add	r0, sp, #36	; 0x24
 8018af2:	f7fe f961 	bl	8016db8 <dir_register>
			if (res == FR_OK) {
 8018af6:	4606      	mov	r6, r0
 8018af8:	bb08      	cbnz	r0, 8018b3e <f_mkdir+0x202>
					dir = dj.dir;
 8018afa:	9b11      	ldr	r3, [sp, #68]	; 0x44
	*ptr++ = (BYTE)val; val >>= 8;
 8018afc:	9a03      	ldr	r2, [sp, #12]
 8018afe:	759a      	strb	r2, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8018b00:	9a04      	ldr	r2, [sp, #16]
 8018b02:	75da      	strb	r2, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8018b04:	9a05      	ldr	r2, [sp, #20]
 8018b06:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 8018b08:	9a06      	ldr	r2, [sp, #24]
 8018b0a:	765a      	strb	r2, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 8018b0c:	9a01      	ldr	r2, [sp, #4]
 8018b0e:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 8018b10:	9a02      	ldr	r2, [sp, #8]
 8018b12:	76da      	strb	r2, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 8018b14:	7822      	ldrb	r2, [r4, #0]
 8018b16:	2a03      	cmp	r2, #3
 8018b18:	d107      	bne.n	8018b2a <f_mkdir+0x1ee>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8018b1a:	9a00      	ldr	r2, [sp, #0]
 8018b1c:	ea4f 4912 	mov.w	r9, r2, lsr #16
	*ptr++ = (BYTE)val; val >>= 8;
 8018b20:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8018b24:	f883 9014 	strb.w	r9, [r3, #20]
	*ptr++ = (BYTE)val;
 8018b28:	755a      	strb	r2, [r3, #21]
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8018b2a:	2110      	movs	r1, #16
					fs->wflag = 1;
 8018b2c:	2201      	movs	r2, #1
					res = sync_fs(fs);
 8018b2e:	4620      	mov	r0, r4
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8018b30:	72d9      	strb	r1, [r3, #11]
					fs->wflag = 1;
 8018b32:	70e2      	strb	r2, [r4, #3]
					res = sync_fs(fs);
 8018b34:	f7fd fb5c 	bl	80161f0 <sync_fs>
 8018b38:	4606      	mov	r6, r0
 8018b3a:	e71f      	b.n	801897c <f_mkdir+0x40>
			res = FR_DISK_ERR;
 8018b3c:	2601      	movs	r6, #1
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8018b3e:	2200      	movs	r2, #0
 8018b40:	9900      	ldr	r1, [sp, #0]
 8018b42:	a809      	add	r0, sp, #36	; 0x24
 8018b44:	f7fe fde0 	bl	8017708 <remove_chain>
 8018b48:	e718      	b.n	801897c <f_mkdir+0x40>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8018b4a:	2607      	movs	r6, #7
			tm = GET_FATTIME();
 8018b4c:	f7fc fd80 	bl	8015650 <get_fattime>
			if (res == FR_OK) {					/* Initialize the new directory table */
 8018b50:	e7f5      	b.n	8018b3e <f_mkdir+0x202>
			if (dcl == 1) res = FR_INT_ERR;
 8018b52:	2602      	movs	r6, #2
 8018b54:	e7fa      	b.n	8018b4c <f_mkdir+0x210>
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8018b56:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8018b58:	429a      	cmp	r2, r3
 8018b5a:	d03d      	beq.n	8018bd8 <f_mkdir+0x29c>
	*ptr++ = (BYTE)val; val >>= 8;
 8018b5c:	f3c3 4607 	ubfx	r6, r3, #16, #8
	*ptr++ = (BYTE)val;
 8018b60:	0e1a      	lsrs	r2, r3, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8018b62:	b2d9      	uxtb	r1, r3
	*ptr++ = (BYTE)val;
 8018b64:	f3c3 2307 	ubfx	r3, r3, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8018b68:	f884 106e 	strb.w	r1, [r4, #110]	; 0x6e
	*ptr++ = (BYTE)val;
 8018b6c:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
	*ptr++ = (BYTE)val; val >>= 8;
 8018b70:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
	*ptr++ = (BYTE)val;
 8018b74:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
}
 8018b78:	e782      	b.n	8018a80 <f_mkdir+0x144>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8018b7a:	f04f 0b00 	mov.w	fp, #0
 8018b7e:	e72e      	b.n	80189de <f_mkdir+0xa2>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8018b80:	2601      	movs	r6, #1
 8018b82:	e7e3      	b.n	8018b4c <f_mkdir+0x210>
		wsect = fs->winsect;	/* Current sector number */
 8018b84:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8018b88:	f104 0734 	add.w	r7, r4, #52	; 0x34
 8018b8c:	2301      	movs	r3, #1
 8018b8e:	7860      	ldrb	r0, [r4, #1]
 8018b90:	4642      	mov	r2, r8
 8018b92:	4639      	mov	r1, r7
 8018b94:	f7fc fd40 	bl	8015618 <disk_write>
 8018b98:	2800      	cmp	r0, #0
 8018b9a:	d1f1      	bne.n	8018b80 <f_mkdir+0x244>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8018b9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
			fs->wflag = 0;
 8018b9e:	70e6      	strb	r6, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8018ba0:	eba8 0203 	sub.w	r2, r8, r3
 8018ba4:	69e3      	ldr	r3, [r4, #28]
 8018ba6:	429a      	cmp	r2, r3
 8018ba8:	d212      	bcs.n	8018bd0 <f_mkdir+0x294>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018baa:	f894 a002 	ldrb.w	sl, [r4, #2]
 8018bae:	f1ba 0f01 	cmp.w	sl, #1
 8018bb2:	d801      	bhi.n	8018bb8 <f_mkdir+0x27c>
 8018bb4:	e00c      	b.n	8018bd0 <f_mkdir+0x294>
 8018bb6:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
 8018bb8:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018bba:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8018bbe:	2301      	movs	r3, #1
 8018bc0:	4639      	mov	r1, r7
 8018bc2:	4642      	mov	r2, r8
 8018bc4:	7860      	ldrb	r0, [r4, #1]
 8018bc6:	f7fc fd27 	bl	8015618 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018bca:	f1ba 0f01 	cmp.w	sl, #1
 8018bce:	d1f2      	bne.n	8018bb6 <f_mkdir+0x27a>
			tm = GET_FATTIME();
 8018bd0:	f7fc fd3e 	bl	8015650 <get_fattime>
 8018bd4:	4680      	mov	r8, r0
			if (res == FR_OK) {					/* Initialize the new directory table */
 8018bd6:	e6f7      	b.n	80189c8 <f_mkdir+0x8c>
 8018bd8:	2300      	movs	r3, #0
 8018bda:	4619      	mov	r1, r3
 8018bdc:	461a      	mov	r2, r3
 8018bde:	e7c3      	b.n	8018b68 <f_mkdir+0x22c>

08018be0 <f_putc>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8018be0:	b171      	cbz	r1, 8018c00 <f_putc+0x20>
 8018be2:	680b      	ldr	r3, [r1, #0]

int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fp		/* Pointer to the file object */
)
{
 8018be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018be8:	460c      	mov	r4, r1
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8018bea:	b12b      	cbz	r3, 8018bf8 <f_putc+0x18>
 8018bec:	781a      	ldrb	r2, [r3, #0]
 8018bee:	b11a      	cbz	r2, 8018bf8 <f_putc+0x18>
 8018bf0:	8889      	ldrh	r1, [r1, #4]
 8018bf2:	88da      	ldrh	r2, [r3, #6]
 8018bf4:	4291      	cmp	r1, r2
 8018bf6:	d006      	beq.n	8018c06 <f_putc+0x26>
	return EOF;
 8018bf8:	f04f 30ff 	mov.w	r0, #4294967295


	putc_init(&pb, fp);
	putc_bfd(&pb, c);	/* Put the character */
	return putc_flush(&pb);
}
 8018bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return EOF;
 8018c00:	f04f 30ff 	mov.w	r0, #4294967295
}
 8018c04:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8018c06:	4605      	mov	r5, r0
 8018c08:	7858      	ldrb	r0, [r3, #1]
 8018c0a:	f7fc fcd9 	bl	80155c0 <disk_status>
 8018c0e:	07c2      	lsls	r2, r0, #31
 8018c10:	d4f2      	bmi.n	8018bf8 <f_putc+0x18>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8018c12:	7d63      	ldrb	r3, [r4, #21]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8018c14:	6826      	ldr	r6, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	d1ee      	bne.n	8018bf8 <f_putc+0x18>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8018c1a:	7d20      	ldrb	r0, [r4, #20]
 8018c1c:	0783      	lsls	r3, r0, #30
 8018c1e:	d5eb      	bpl.n	8018bf8 <f_putc+0x18>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8018c20:	69a1      	ldr	r1, [r4, #24]
 8018c22:	1c4f      	adds	r7, r1, #1
 8018c24:	d042      	beq.n	8018cac <f_putc+0xcc>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8018c26:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d179      	bne.n	8018d22 <f_putc+0x142>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8018c2e:	8972      	ldrh	r2, [r6, #10]
 8018c30:	0a4b      	lsrs	r3, r1, #9
 8018c32:	1e57      	subs	r7, r2, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8018c34:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 8018c38:	d10d      	bne.n	8018c56 <f_putc+0x76>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8018c3a:	2900      	cmp	r1, #0
 8018c3c:	d140      	bne.n	8018cc0 <f_putc+0xe0>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8018c3e:	68a3      	ldr	r3, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	d067      	beq.n	8018d14 <f_putc+0x134>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8018c44:	2b01      	cmp	r3, #1
 8018c46:	d035      	beq.n	8018cb4 <f_putc+0xd4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018c48:	1c5a      	adds	r2, r3, #1
 8018c4a:	d075      	beq.n	8018d38 <f_putc+0x158>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8018c4c:	68a2      	ldr	r2, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8018c4e:	61e3      	str	r3, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8018c50:	b902      	cbnz	r2, 8018c54 <f_putc+0x74>
 8018c52:	60a3      	str	r3, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8018c54:	7d20      	ldrb	r0, [r4, #20]
 8018c56:	0603      	lsls	r3, r0, #24
 8018c58:	d44a      	bmi.n	8018cf0 <f_putc+0x110>
	clst -= 2;
 8018c5a:	69e3      	ldr	r3, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8018c5c:	69b2      	ldr	r2, [r6, #24]
	clst -= 2;
 8018c5e:	3b02      	subs	r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8018c60:	3a02      	subs	r2, #2
 8018c62:	4293      	cmp	r3, r2
 8018c64:	d226      	bcs.n	8018cb4 <f_putc+0xd4>
	return clst * fs->csize + fs->database;
 8018c66:	8971      	ldrh	r1, [r6, #10]
 8018c68:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8018c6a:	fb03 2301 	mla	r3, r3, r1, r2
			if (!sect) ABORT(fs, FR_INT_ERR);
 8018c6e:	b30b      	cbz	r3, 8018cb4 <f_putc+0xd4>
			sect += csect;
 8018c70:	441f      	add	r7, r3
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8018c72:	6a23      	ldr	r3, [r4, #32]
 8018c74:	429f      	cmp	r7, r3
 8018c76:	d048      	beq.n	8018d0a <f_putc+0x12a>
				fp->fptr < fp->obj.objsize &&
 8018c78:	69a3      	ldr	r3, [r4, #24]
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8018c7a:	f104 0830 	add.w	r8, r4, #48	; 0x30
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8018c7e:	68e2      	ldr	r2, [r4, #12]
 8018c80:	4293      	cmp	r3, r2
 8018c82:	d351      	bcc.n	8018d28 <f_putc+0x148>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8018c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->sect = sect;
 8018c88:	6227      	str	r7, [r4, #32]
			*d++ = *s++;
 8018c8a:	f808 5003 	strb.w	r5, [r8, r3]
		&& (UINT)pb->idx == nw) return pb->nchr;
 8018c8e:	2001      	movs	r0, #1
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8018c90:	69a3      	ldr	r3, [r4, #24]
 8018c92:	68e2      	ldr	r2, [r4, #12]
 8018c94:	3301      	adds	r3, #1
		fp->flag |= FA_DIRTY;
 8018c96:	7d21      	ldrb	r1, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8018c98:	429a      	cmp	r2, r3
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8018c9a:	f061 013f 	orn	r1, r1, #63	; 0x3f
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8018c9e:	61a3      	str	r3, [r4, #24]
 8018ca0:	bf38      	it	cc
 8018ca2:	461a      	movcc	r2, r3
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8018ca4:	7521      	strb	r1, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8018ca6:	60e2      	str	r2, [r4, #12]
}
 8018ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8018cac:	f040 0340 	orr.w	r3, r0, #64	; 0x40
 8018cb0:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 8018cb2:	e7a1      	b.n	8018bf8 <f_putc+0x18>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8018cb4:	2302      	movs	r3, #2
	return EOF;
 8018cb6:	f04f 30ff 	mov.w	r0, #4294967295
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8018cba:	7563      	strb	r3, [r4, #21]
}
 8018cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if (fp->cltbl) {
 8018cc0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8018cc2:	b331      	cbz	r1, 8018d12 <f_putc+0x132>
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8018cc4:	3104      	adds	r1, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8018cc6:	fbb3 f3f2 	udiv	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8018cca:	680a      	ldr	r2, [r1, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8018ccc:	b92a      	cbnz	r2, 8018cda <f_putc+0xfa>
 8018cce:	e7ed      	b.n	8018cac <f_putc+0xcc>
		cl -= ncl; tbl++;		/* Next fragment */
 8018cd0:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8018cd2:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8018cd6:	2a00      	cmp	r2, #0
 8018cd8:	d0e8      	beq.n	8018cac <f_putc+0xcc>
		if (cl < ncl) break;	/* In this fragment? */
 8018cda:	429a      	cmp	r2, r3
 8018cdc:	d9f8      	bls.n	8018cd0 <f_putc+0xf0>
	return cl + *tbl;	/* Return the cluster number */
 8018cde:	684a      	ldr	r2, [r1, #4]
 8018ce0:	4413      	add	r3, r2
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d1ae      	bne.n	8018c44 <f_putc+0x64>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8018ce6:	7d23      	ldrb	r3, [r4, #20]
 8018ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018cec:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 8018cee:	e783      	b.n	8018bf8 <f_putc+0x18>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018cf0:	2301      	movs	r3, #1
 8018cf2:	6a22      	ldr	r2, [r4, #32]
 8018cf4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8018cf8:	7870      	ldrb	r0, [r6, #1]
 8018cfa:	f7fc fc8d 	bl	8015618 <disk_write>
 8018cfe:	b9d8      	cbnz	r0, 8018d38 <f_putc+0x158>
				fp->flag &= (BYTE)~FA_DIRTY;
 8018d00:	7d23      	ldrb	r3, [r4, #20]
 8018d02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018d06:	7523      	strb	r3, [r4, #20]
 8018d08:	e7a7      	b.n	8018c5a <f_putc+0x7a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018d0a:	f104 0830 	add.w	r8, r4, #48	; 0x30
				fp->fptr < fp->obj.objsize &&
 8018d0e:	69a3      	ldr	r3, [r4, #24]
 8018d10:	e7b8      	b.n	8018c84 <f_putc+0xa4>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8018d12:	69e1      	ldr	r1, [r4, #28]
 8018d14:	4620      	mov	r0, r4
 8018d16:	f7fd fac9 	bl	80162ac <create_chain>
 8018d1a:	4603      	mov	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8018d1c:	2b00      	cmp	r3, #0
 8018d1e:	d191      	bne.n	8018c44 <f_putc+0x64>
 8018d20:	e7e1      	b.n	8018ce6 <f_putc+0x106>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018d22:	f104 0830 	add.w	r8, r4, #48	; 0x30
 8018d26:	e7b0      	b.n	8018c8a <f_putc+0xaa>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8018d28:	7870      	ldrb	r0, [r6, #1]
 8018d2a:	2301      	movs	r3, #1
 8018d2c:	463a      	mov	r2, r7
 8018d2e:	4641      	mov	r1, r8
 8018d30:	f7fc fc62 	bl	80155f8 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8018d34:	2800      	cmp	r0, #0
 8018d36:	d0ea      	beq.n	8018d0e <f_putc+0x12e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018d38:	2301      	movs	r3, #1
	return EOF;
 8018d3a:	f04f 30ff 	mov.w	r0, #4294967295
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018d3e:	7563      	strb	r3, [r4, #21]
 8018d40:	e75c      	b.n	8018bfc <f_putc+0x1c>
 8018d42:	bf00      	nop

08018d44 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8018d44:	b40e      	push	{r1, r2, r3}
 8018d46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d4a:	b0a0      	sub	sp, #128	; 0x80
	pb->nchr = pb->idx = 0;
 8018d4c:	2100      	movs	r1, #0
{
 8018d4e:	ab29      	add	r3, sp, #164	; 0xa4
	pb->nchr = pb->idx = 0;
 8018d50:	910f      	str	r1, [sp, #60]	; 0x3c
{
 8018d52:	f853 6b04 	ldr.w	r6, [r3], #4
	putc_init(&pb, fp);

	va_start(arp, fmt);

	for (;;) {
		c = *fmt++;
 8018d56:	4634      	mov	r4, r6
	va_start(arp, fmt);
 8018d58:	9303      	str	r3, [sp, #12]
		c = *fmt++;
 8018d5a:	f814 3b01 	ldrb.w	r3, [r4], #1
	pb->fp = fp;
 8018d5e:	e9cd 010d 	strd	r0, r1, [sp, #52]	; 0x34
		if (c == 0) break;			/* End of string */
 8018d62:	b9bb      	cbnz	r3, 8018d94 <f_printf+0x50>
 8018d64:	e26c      	b.n	8019240 <f_printf+0x4fc>
	if (i < 0) return;
 8018d66:	2900      	cmp	r1, #0
 8018d68:	f2c0 81cc 	blt.w	8019104 <f_printf+0x3c0>
	pb->buf[i++] = (BYTE)c;
 8018d6c:	f101 0280 	add.w	r2, r1, #128	; 0x80
 8018d70:	1c4d      	adds	r5, r1, #1
 8018d72:	446a      	add	r2, sp
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8018d74:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8018d76:	f802 3c40 	strb.w	r3, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8018d7a:	f300 81c5 	bgt.w	8019108 <f_printf+0x3c4>
	pb->nchr++;
 8018d7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018d80:	4629      	mov	r1, r5
 8018d82:	4626      	mov	r6, r4
	pb->idx = i;
 8018d84:	950e      	str	r5, [sp, #56]	; 0x38
	pb->nchr++;
 8018d86:	3301      	adds	r3, #1
 8018d88:	930f      	str	r3, [sp, #60]	; 0x3c
		c = *fmt++;
 8018d8a:	4634      	mov	r4, r6
 8018d8c:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (c == 0) break;			/* End of string */
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	d063      	beq.n	8018e5c <f_printf+0x118>
		if (c != '%') {				/* Non escape character */
 8018d94:	2b25      	cmp	r3, #37	; 0x25
 8018d96:	d1e6      	bne.n	8018d66 <f_printf+0x22>
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
		c = *fmt++;
 8018d98:	7873      	ldrb	r3, [r6, #1]
		if (c == '0') {				/* Flag: '0' padding */
 8018d9a:	2b30      	cmp	r3, #48	; 0x30
 8018d9c:	f000 81aa 	beq.w	80190f4 <f_printf+0x3b0>
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
 8018da0:	2b2d      	cmp	r3, #45	; 0x2d
 8018da2:	f000 81bd 	beq.w	8019120 <f_printf+0x3dc>
		c = *fmt++;
 8018da6:	f04f 0b00 	mov.w	fp, #0
 8018daa:	3602      	adds	r6, #2
 8018dac:	2004      	movs	r0, #4
		w = f = 0;
 8018dae:	46da      	mov	sl, fp
				f = 2; c = *fmt++;
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8018db0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8018db4:	2400      	movs	r4, #0
 8018db6:	2a09      	cmp	r2, #9
 8018db8:	d80a      	bhi.n	8018dd0 <f_printf+0x8c>
			w = w * 10 + c - '0';
 8018dba:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8018dbe:	eb03 0444 	add.w	r4, r3, r4, lsl #1
			c = *fmt++;
 8018dc2:	f816 3b01 	ldrb.w	r3, [r6], #1
		while (IsDigit(c)) {		/* Precision */
 8018dc6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
			w = w * 10 + c - '0';
 8018dca:	3c30      	subs	r4, #48	; 0x30
		while (IsDigit(c)) {		/* Precision */
 8018dcc:	2a09      	cmp	r2, #9
 8018dce:	d9f4      	bls.n	8018dba <f_printf+0x76>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8018dd0:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 8018dd4:	2a4c      	cmp	r2, #76	; 0x4c
 8018dd6:	f040 8189 	bne.w	80190ec <f_printf+0x3a8>
			f |= 4; c = *fmt++;
 8018dda:	4682      	mov	sl, r0
 8018ddc:	2704      	movs	r7, #4
 8018dde:	f816 3b01 	ldrb.w	r3, [r6], #1
		}
		if (!c) break;
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d03a      	beq.n	8018e5c <f_printf+0x118>
		d = c;
		if (IsLower(d)) d -= 0x20;
 8018de6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8018dea:	2a19      	cmp	r2, #25
 8018dec:	f200 8180 	bhi.w	80190f0 <f_printf+0x3ac>
 8018df0:	f1a3 0520 	sub.w	r5, r3, #32
 8018df4:	b2ed      	uxtb	r5, r5
		switch (d) {				/* Type is... */
 8018df6:	f1a5 0242 	sub.w	r2, r5, #66	; 0x42
 8018dfa:	2a16      	cmp	r2, #22
 8018dfc:	d818      	bhi.n	8018e30 <f_printf+0xec>
 8018dfe:	e8df f012 	tbh	[pc, r2, lsl #1]
 8018e02:	019e      	.short	0x019e
 8018e04:	00440057 	.word	0x00440057
 8018e08:	00170017 	.word	0x00170017
 8018e0c:	00170017 	.word	0x00170017
 8018e10:	00170017 	.word	0x00170017
 8018e14:	00170017 	.word	0x00170017
 8018e18:	00170017 	.word	0x00170017
 8018e1c:	001700ad 	.word	0x001700ad
 8018e20:	00170017 	.word	0x00170017
 8018e24:	0017005f 	.word	0x0017005f
 8018e28:	00170044 	.word	0x00170044
 8018e2c:	01a00017 	.word	0x01a00017
	if (i < 0) return;
 8018e30:	2900      	cmp	r1, #0
 8018e32:	dbaa      	blt.n	8018d8a <f_printf+0x46>
	pb->buf[i++] = (BYTE)c;
 8018e34:	1c4c      	adds	r4, r1, #1
 8018e36:	f101 0280 	add.w	r2, r1, #128	; 0x80
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8018e3a:	2c3c      	cmp	r4, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8018e3c:	eb0d 0102 	add.w	r1, sp, r2
 8018e40:	f801 3c40 	strb.w	r3, [r1, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8018e44:	f300 81a3 	bgt.w	801918e <f_printf+0x44a>
	pb->nchr++;
 8018e48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018e4a:	4621      	mov	r1, r4
	pb->idx = i;
 8018e4c:	940e      	str	r4, [sp, #56]	; 0x38
		c = *fmt++;
 8018e4e:	4634      	mov	r4, r6
	pb->nchr++;
 8018e50:	3301      	adds	r3, #1
 8018e52:	930f      	str	r3, [sp, #60]	; 0x3c
		c = *fmt++;
 8018e54:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (c == 0) break;			/* End of string */
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d19b      	bne.n	8018d94 <f_printf+0x50>
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8018e5c:	2900      	cmp	r1, #0
 8018e5e:	f2c0 81e1 	blt.w	8019224 <f_printf+0x4e0>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8018e62:	460a      	mov	r2, r1
 8018e64:	ab04      	add	r3, sp, #16
 8018e66:	a910      	add	r1, sp, #64	; 0x40
 8018e68:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018e6a:	f7ff f8af 	bl	8017fcc <f_write>
 8018e6e:	2800      	cmp	r0, #0
 8018e70:	f040 81d8 	bne.w	8019224 <f_printf+0x4e0>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8018e74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018e76:	9b04      	ldr	r3, [sp, #16]
 8018e78:	429a      	cmp	r2, r3
 8018e7a:	f040 81d3 	bne.w	8019224 <f_printf+0x4e0>
 8018e7e:	980f      	ldr	r0, [sp, #60]	; 0x3c
	}

	va_end(arp);

	return putc_flush(&pb);
}
 8018e80:	b020      	add	sp, #128	; 0x80
 8018e82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e86:	b003      	add	sp, #12
 8018e88:	4770      	bx	lr
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8018e8a:	2f00      	cmp	r7, #0
 8018e8c:	f040 815b 	bne.w	8019146 <f_printf+0x402>
 8018e90:	2d44      	cmp	r5, #68	; 0x44
 8018e92:	f040 814c 	bne.w	801912e <f_printf+0x3ea>
 8018e96:	9a03      	ldr	r2, [sp, #12]
		if (d == 'D' && (v & 0x80000000)) {
 8018e98:	2d44      	cmp	r5, #68	; 0x44
 8018e9a:	f04f 000a 	mov.w	r0, #10
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8018e9e:	f102 0704 	add.w	r7, r2, #4
 8018ea2:	9703      	str	r7, [sp, #12]
 8018ea4:	6817      	ldr	r7, [r2, #0]
 8018ea6:	463a      	mov	r2, r7
		if (d == 'D' && (v & 0x80000000)) {
 8018ea8:	d064      	beq.n	8018f74 <f_printf+0x230>
 8018eaa:	2500      	movs	r5, #0
 8018eac:	9501      	str	r5, [sp, #4]
 8018eae:	e06c      	b.n	8018f8a <f_printf+0x246>
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8018eb0:	9b03      	ldr	r3, [sp, #12]
	if (i < 0) return;
 8018eb2:	2900      	cmp	r1, #0
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8018eb4:	f103 0204 	add.w	r2, r3, #4
 8018eb8:	681b      	ldr	r3, [r3, #0]
 8018eba:	9203      	str	r2, [sp, #12]
	if (i < 0) return;
 8018ebc:	daba      	bge.n	8018e34 <f_printf+0xf0>
 8018ebe:	e764      	b.n	8018d8a <f_printf+0x46>
			p = va_arg(arp, TCHAR*);
 8018ec0:	9b03      	ldr	r3, [sp, #12]
 8018ec2:	681d      	ldr	r5, [r3, #0]
 8018ec4:	3304      	adds	r3, #4
			for (j = 0; p[j]; j++) ;
 8018ec6:	782a      	ldrb	r2, [r5, #0]
			p = va_arg(arp, TCHAR*);
 8018ec8:	9303      	str	r3, [sp, #12]
			for (j = 0; p[j]; j++) ;
 8018eca:	2a00      	cmp	r2, #0
 8018ecc:	f000 81b1 	beq.w	8019232 <f_printf+0x4ee>
 8018ed0:	462b      	mov	r3, r5
 8018ed2:	f1c5 0c01 	rsb	ip, r5, #1
 8018ed6:	eb0c 0703 	add.w	r7, ip, r3
 8018eda:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8018ede:	2800      	cmp	r0, #0
 8018ee0:	d1f9      	bne.n	8018ed6 <f_printf+0x192>
			if (!(f & 2)) {
 8018ee2:	f1bb 0f00 	cmp.w	fp, #0
 8018ee6:	f000 815e 	beq.w	80191a6 <f_printf+0x462>
				while (j++ < w) putc_bfd(&pb, ' ');
 8018eea:	f107 0801 	add.w	r8, r7, #1
 8018eee:	3501      	adds	r5, #1
	pb->buf[i++] = (BYTE)c;
 8018ef0:	f101 0380 	add.w	r3, r1, #128	; 0x80
	if (i < 0) return;
 8018ef4:	2900      	cmp	r1, #0
	pb->buf[i++] = (BYTE)c;
 8018ef6:	f101 0901 	add.w	r9, r1, #1
 8018efa:	eb0d 0003 	add.w	r0, sp, r3
			while (*p) putc_bfd(&pb, *p++);
 8018efe:	462b      	mov	r3, r5
	if (i < 0) return;
 8018f00:	f2c0 8123 	blt.w	801914a <f_printf+0x406>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8018f04:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
 8018f08:	4649      	mov	r1, r9
	pb->buf[i++] = (BYTE)c;
 8018f0a:	f800 2c40 	strb.w	r2, [r0, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8018f0e:	f300 8125 	bgt.w	801915c <f_printf+0x418>
	pb->nchr++;
 8018f12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	pb->idx = i;
 8018f14:	910e      	str	r1, [sp, #56]	; 0x38
	pb->nchr++;
 8018f16:	3301      	adds	r3, #1
 8018f18:	930f      	str	r3, [sp, #60]	; 0x3c
			while (*p) putc_bfd(&pb, *p++);
 8018f1a:	f815 2b01 	ldrb.w	r2, [r5], #1
 8018f1e:	2a00      	cmp	r2, #0
 8018f20:	d1e6      	bne.n	8018ef0 <f_printf+0x1ac>
			while (j++ < w) putc_bfd(&pb, ' ');
 8018f22:	42a7      	cmp	r7, r4
 8018f24:	f4bf af31 	bcs.w	8018d8a <f_printf+0x46>
	pb->buf[i++] = (BYTE)c;
 8018f28:	2720      	movs	r7, #32
 8018f2a:	f101 0380 	add.w	r3, r1, #128	; 0x80
	if (i < 0) return;
 8018f2e:	2900      	cmp	r1, #0
	pb->buf[i++] = (BYTE)c;
 8018f30:	f101 0501 	add.w	r5, r1, #1
 8018f34:	446b      	add	r3, sp
	if (i < 0) return;
 8018f36:	f6ff af28 	blt.w	8018d8a <f_printf+0x46>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8018f3a:	2d3c      	cmp	r5, #60	; 0x3c
 8018f3c:	4629      	mov	r1, r5
	pb->buf[i++] = (BYTE)c;
 8018f3e:	f803 7c40 	strb.w	r7, [r3, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8018f42:	f300 8118 	bgt.w	8019176 <f_printf+0x432>
	pb->nchr++;
 8018f46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
			while (j++ < w) putc_bfd(&pb, ' ');
 8018f48:	f108 0201 	add.w	r2, r8, #1
 8018f4c:	4544      	cmp	r4, r8
	pb->idx = i;
 8018f4e:	910e      	str	r1, [sp, #56]	; 0x38
	pb->nchr++;
 8018f50:	f103 0301 	add.w	r3, r3, #1
			while (j++ < w) putc_bfd(&pb, ' ');
 8018f54:	4690      	mov	r8, r2
	pb->nchr++;
 8018f56:	930f      	str	r3, [sp, #60]	; 0x3c
			while (j++ < w) putc_bfd(&pb, ' ');
 8018f58:	d8e7      	bhi.n	8018f2a <f_printf+0x1e6>
 8018f5a:	e716      	b.n	8018d8a <f_printf+0x46>
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8018f5c:	2008      	movs	r0, #8
 8018f5e:	2f00      	cmp	r7, #0
 8018f60:	f000 80e6 	beq.w	8019130 <f_printf+0x3ec>
 8018f64:	9a03      	ldr	r2, [sp, #12]
		if (d == 'D' && (v & 0x80000000)) {
 8018f66:	2d44      	cmp	r5, #68	; 0x44
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8018f68:	f102 0704 	add.w	r7, r2, #4
 8018f6c:	9703      	str	r7, [sp, #12]
 8018f6e:	6817      	ldr	r7, [r2, #0]
 8018f70:	463a      	mov	r2, r7
		if (d == 'D' && (v & 0x80000000)) {
 8018f72:	d19a      	bne.n	8018eaa <f_printf+0x166>
 8018f74:	2f00      	cmp	r7, #0
 8018f76:	da98      	bge.n	8018eaa <f_printf+0x166>
			f |= 8;
 8018f78:	f04a 0508 	orr.w	r5, sl, #8
 8018f7c:	f00a 0b02 	and.w	fp, sl, #2
			v = 0 - v;
 8018f80:	427a      	negs	r2, r7
			f |= 8;
 8018f82:	fa5f fa85 	uxtb.w	sl, r5
 8018f86:	2508      	movs	r5, #8
 8018f88:	9501      	str	r5, [sp, #4]
		i = 0;
 8018f8a:	2b78      	cmp	r3, #120	; 0x78
 8018f8c:	f10d 0c14 	add.w	ip, sp, #20
 8018f90:	f04f 0e00 	mov.w	lr, #0
 8018f94:	bf0c      	ite	eq
 8018f96:	f04f 0927 	moveq.w	r9, #39	; 0x27
 8018f9a:	f04f 0907 	movne.w	r9, #7
 8018f9e:	e000      	b.n	8018fa2 <f_printf+0x25e>
		} while (v && i < sizeof str / sizeof str[0]);
 8018fa0:	46ae      	mov	lr, r5
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8018fa2:	4617      	mov	r7, r2
			str[i++] = d + '0';
 8018fa4:	f10e 0501 	add.w	r5, lr, #1
			d = (TCHAR)(v % r); v /= r;
 8018fa8:	fbb2 f3f0 	udiv	r3, r2, r0
 8018fac:	fb00 2813 	mls	r8, r0, r3, r2
 8018fb0:	461a      	mov	r2, r3
 8018fb2:	fa5f f388 	uxtb.w	r3, r8
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8018fb6:	f1b8 0f09 	cmp.w	r8, #9
 8018fba:	eb09 0803 	add.w	r8, r9, r3
 8018fbe:	bf88      	it	hi
 8018fc0:	fa5f f388 	uxtbhi.w	r3, r8
		} while (v && i < sizeof str / sizeof str[0]);
 8018fc4:	4287      	cmp	r7, r0
			str[i++] = d + '0';
 8018fc6:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8018fca:	f80c 3b01 	strb.w	r3, [ip], #1
		} while (v && i < sizeof str / sizeof str[0]);
 8018fce:	d301      	bcc.n	8018fd4 <f_printf+0x290>
 8018fd0:	2d1f      	cmp	r5, #31
 8018fd2:	d9e5      	bls.n	8018fa0 <f_printf+0x25c>
		if (f & 8) str[i++] = '-';
 8018fd4:	9b01      	ldr	r3, [sp, #4]
 8018fd6:	b13b      	cbz	r3, 8018fe8 <f_printf+0x2a4>
 8018fd8:	f105 0380 	add.w	r3, r5, #128	; 0x80
 8018fdc:	222d      	movs	r2, #45	; 0x2d
 8018fde:	f10e 0502 	add.w	r5, lr, #2
 8018fe2:	446b      	add	r3, sp
 8018fe4:	f803 2c6c 	strb.w	r2, [r3, #-108]
		j = i; d = (f & 1) ? '0' : ' ';
 8018fe8:	f01a 0f01 	tst.w	sl, #1
 8018fec:	bf0c      	ite	eq
 8018fee:	f04f 0820 	moveq.w	r8, #32
 8018ff2:	f04f 0830 	movne.w	r8, #48	; 0x30
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8018ff6:	f1bb 0f00 	cmp.w	fp, #0
 8018ffa:	f040 810f 	bne.w	801921c <f_printf+0x4d8>
 8018ffe:	42a5      	cmp	r5, r4
 8019000:	f105 0a01 	add.w	sl, r5, #1
 8019004:	f080 810c 	bcs.w	8019220 <f_printf+0x4dc>
 8019008:	f104 0901 	add.w	r9, r4, #1
	pb->buf[i++] = (BYTE)c;
 801900c:	f101 0380 	add.w	r3, r1, #128	; 0x80
	if (i < 0) return;
 8019010:	2900      	cmp	r1, #0
	pb->buf[i++] = (BYTE)c;
 8019012:	f101 0701 	add.w	r7, r1, #1
 8019016:	446b      	add	r3, sp
	if (i < 0) return;
 8019018:	db0e      	blt.n	8019038 <f_printf+0x2f4>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801901a:	2f3c      	cmp	r7, #60	; 0x3c
 801901c:	4639      	mov	r1, r7
	pb->buf[i++] = (BYTE)c;
 801901e:	f803 8c40 	strb.w	r8, [r3, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8019022:	dc4c      	bgt.n	80190be <f_printf+0x37a>
	pb->nchr++;
 8019024:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8019026:	f10a 0201 	add.w	r2, sl, #1
 801902a:	4554      	cmp	r4, sl
	pb->idx = i;
 801902c:	910e      	str	r1, [sp, #56]	; 0x38
	pb->nchr++;
 801902e:	f103 0301 	add.w	r3, r3, #1
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8019032:	4692      	mov	sl, r2
	pb->nchr++;
 8019034:	930f      	str	r3, [sp, #60]	; 0x3c
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8019036:	d1e9      	bne.n	801900c <f_printf+0x2c8>
 8019038:	3d01      	subs	r5, #1
 801903a:	ab05      	add	r3, sp, #20
 801903c:	eb03 0a05 	add.w	sl, r3, r5
 8019040:	e00e      	b.n	8019060 <f_printf+0x31c>
	pb->buf[i++] = (BYTE)c;
 8019042:	f89a 2000 	ldrb.w	r2, [sl]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8019046:	2f3c      	cmp	r7, #60	; 0x3c
 8019048:	f10a 3aff 	add.w	sl, sl, #4294967295
	pb->buf[i++] = (BYTE)c;
 801904c:	f803 2c40 	strb.w	r2, [r3, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8019050:	dc29      	bgt.n	80190a6 <f_printf+0x362>
	pb->nchr++;
 8019052:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		} while (i);
 8019054:	4639      	mov	r1, r7
	pb->idx = i;
 8019056:	970e      	str	r7, [sp, #56]	; 0x38
	pb->nchr++;
 8019058:	3301      	adds	r3, #1
 801905a:	930f      	str	r3, [sp, #60]	; 0x3c
		} while (i);
 801905c:	b13d      	cbz	r5, 801906e <f_printf+0x32a>
 801905e:	3d01      	subs	r5, #1
	pb->buf[i++] = (BYTE)c;
 8019060:	f101 0380 	add.w	r3, r1, #128	; 0x80
	if (i < 0) return;
 8019064:	2900      	cmp	r1, #0
	pb->buf[i++] = (BYTE)c;
 8019066:	f101 0701 	add.w	r7, r1, #1
 801906a:	446b      	add	r3, sp
	if (i < 0) return;
 801906c:	dae9      	bge.n	8019042 <f_printf+0x2fe>
		while (j++ < w) putc_bfd(&pb, d);
 801906e:	454c      	cmp	r4, r9
 8019070:	f109 0501 	add.w	r5, r9, #1
 8019074:	f67f ae89 	bls.w	8018d8a <f_printf+0x46>
	pb->buf[i++] = (BYTE)c;
 8019078:	f101 0380 	add.w	r3, r1, #128	; 0x80
	if (i < 0) return;
 801907c:	2900      	cmp	r1, #0
	pb->buf[i++] = (BYTE)c;
 801907e:	f101 0201 	add.w	r2, r1, #1
 8019082:	446b      	add	r3, sp
	if (i < 0) return;
 8019084:	f6ff ae81 	blt.w	8018d8a <f_printf+0x46>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8019088:	293c      	cmp	r1, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 801908a:	f803 8c40 	strb.w	r8, [r3, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801908e:	4611      	mov	r1, r2
 8019090:	d021      	beq.n	80190d6 <f_printf+0x392>
	pb->nchr++;
 8019092:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		while (j++ < w) putc_bfd(&pb, d);
 8019094:	1c6a      	adds	r2, r5, #1
 8019096:	42ac      	cmp	r4, r5
	pb->idx = i;
 8019098:	910e      	str	r1, [sp, #56]	; 0x38
	pb->nchr++;
 801909a:	f103 0301 	add.w	r3, r3, #1
		while (j++ < w) putc_bfd(&pb, d);
 801909e:	4615      	mov	r5, r2
	pb->nchr++;
 80190a0:	930f      	str	r3, [sp, #60]	; 0x3c
		while (j++ < w) putc_bfd(&pb, d);
 80190a2:	d1e9      	bne.n	8019078 <f_printf+0x334>
 80190a4:	e671      	b.n	8018d8a <f_printf+0x46>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80190a6:	463a      	mov	r2, r7
 80190a8:	ab04      	add	r3, sp, #16
 80190aa:	a910      	add	r1, sp, #64	; 0x40
 80190ac:	980d      	ldr	r0, [sp, #52]	; 0x34
 80190ae:	f7fe ff8d 	bl	8017fcc <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80190b2:	9b04      	ldr	r3, [sp, #16]
 80190b4:	1bdf      	subs	r7, r3, r7
 80190b6:	bf18      	it	ne
 80190b8:	f04f 37ff 	movne.w	r7, #4294967295
 80190bc:	e7c9      	b.n	8019052 <f_printf+0x30e>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80190be:	a910      	add	r1, sp, #64	; 0x40
 80190c0:	ab04      	add	r3, sp, #16
 80190c2:	463a      	mov	r2, r7
 80190c4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80190c6:	f7fe ff81 	bl	8017fcc <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80190ca:	9904      	ldr	r1, [sp, #16]
 80190cc:	1bc9      	subs	r1, r1, r7
 80190ce:	bf18      	it	ne
 80190d0:	f04f 31ff 	movne.w	r1, #4294967295
 80190d4:	e7a6      	b.n	8019024 <f_printf+0x2e0>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80190d6:	a910      	add	r1, sp, #64	; 0x40
 80190d8:	ab04      	add	r3, sp, #16
 80190da:	980d      	ldr	r0, [sp, #52]	; 0x34
 80190dc:	f7fe ff76 	bl	8017fcc <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80190e0:	9904      	ldr	r1, [sp, #16]
 80190e2:	393d      	subs	r1, #61	; 0x3d
 80190e4:	bf18      	it	ne
 80190e6:	f04f 31ff 	movne.w	r1, #4294967295
 80190ea:	e7d2      	b.n	8019092 <f_printf+0x34e>
 80190ec:	2700      	movs	r7, #0
 80190ee:	e678      	b.n	8018de2 <f_printf+0x9e>
 80190f0:	461d      	mov	r5, r3
 80190f2:	e680      	b.n	8018df6 <f_printf+0xb2>
			f = 1; c = *fmt++;
 80190f4:	78b3      	ldrb	r3, [r6, #2]
 80190f6:	f04f 0b00 	mov.w	fp, #0
 80190fa:	3603      	adds	r6, #3
 80190fc:	2005      	movs	r0, #5
 80190fe:	f04f 0a01 	mov.w	sl, #1
 8019102:	e655      	b.n	8018db0 <f_printf+0x6c>
	if (i < 0) return;
 8019104:	4626      	mov	r6, r4
 8019106:	e640      	b.n	8018d8a <f_printf+0x46>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8019108:	462a      	mov	r2, r5
 801910a:	ab04      	add	r3, sp, #16
 801910c:	a910      	add	r1, sp, #64	; 0x40
 801910e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8019110:	f7fe ff5c 	bl	8017fcc <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8019114:	9b04      	ldr	r3, [sp, #16]
 8019116:	1b5d      	subs	r5, r3, r5
 8019118:	bf18      	it	ne
 801911a:	f04f 35ff 	movne.w	r5, #4294967295
 801911e:	e62e      	b.n	8018d7e <f_printf+0x3a>
				f = 2; c = *fmt++;
 8019120:	f04f 0b02 	mov.w	fp, #2
 8019124:	78b3      	ldrb	r3, [r6, #2]
 8019126:	2006      	movs	r0, #6
 8019128:	3603      	adds	r6, #3
 801912a:	46da      	mov	sl, fp
 801912c:	e640      	b.n	8018db0 <f_printf+0x6c>
 801912e:	200a      	movs	r0, #10
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8019130:	9a03      	ldr	r2, [sp, #12]
 8019132:	2500      	movs	r5, #0
 8019134:	9501      	str	r5, [sp, #4]
 8019136:	1d15      	adds	r5, r2, #4
 8019138:	6812      	ldr	r2, [r2, #0]
 801913a:	9503      	str	r5, [sp, #12]
 801913c:	e725      	b.n	8018f8a <f_printf+0x246>
		switch (d) {				/* Type is... */
 801913e:	2002      	movs	r0, #2
 8019140:	e70d      	b.n	8018f5e <f_printf+0x21a>
 8019142:	2010      	movs	r0, #16
 8019144:	e70b      	b.n	8018f5e <f_printf+0x21a>
 8019146:	200a      	movs	r0, #10
 8019148:	e70c      	b.n	8018f64 <f_printf+0x220>
			while (*p) putc_bfd(&pb, *p++);
 801914a:	782a      	ldrb	r2, [r5, #0]
 801914c:	2a00      	cmp	r2, #0
 801914e:	f43f aee8 	beq.w	8018f22 <f_printf+0x1de>
 8019152:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8019156:	2a00      	cmp	r2, #0
 8019158:	d1fb      	bne.n	8019152 <f_printf+0x40e>
 801915a:	e6e2      	b.n	8018f22 <f_printf+0x1de>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801915c:	a910      	add	r1, sp, #64	; 0x40
 801915e:	ab04      	add	r3, sp, #16
 8019160:	464a      	mov	r2, r9
 8019162:	980d      	ldr	r0, [sp, #52]	; 0x34
 8019164:	f7fe ff32 	bl	8017fcc <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8019168:	9904      	ldr	r1, [sp, #16]
 801916a:	ebb1 0109 	subs.w	r1, r1, r9
 801916e:	bf18      	it	ne
 8019170:	f04f 31ff 	movne.w	r1, #4294967295
 8019174:	e6cd      	b.n	8018f12 <f_printf+0x1ce>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8019176:	a910      	add	r1, sp, #64	; 0x40
 8019178:	ab04      	add	r3, sp, #16
 801917a:	462a      	mov	r2, r5
 801917c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801917e:	f7fe ff25 	bl	8017fcc <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8019182:	9904      	ldr	r1, [sp, #16]
 8019184:	1b49      	subs	r1, r1, r5
 8019186:	bf18      	it	ne
 8019188:	f04f 31ff 	movne.w	r1, #4294967295
 801918c:	e6db      	b.n	8018f46 <f_printf+0x202>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801918e:	4622      	mov	r2, r4
 8019190:	ab04      	add	r3, sp, #16
 8019192:	a910      	add	r1, sp, #64	; 0x40
 8019194:	980d      	ldr	r0, [sp, #52]	; 0x34
 8019196:	f7fe ff19 	bl	8017fcc <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801919a:	9b04      	ldr	r3, [sp, #16]
 801919c:	1b1c      	subs	r4, r3, r4
 801919e:	bf18      	it	ne
 80191a0:	f04f 34ff 	movne.w	r4, #4294967295
 80191a4:	e650      	b.n	8018e48 <f_printf+0x104>
				while (j++ < w) putc_bfd(&pb, ' ');
 80191a6:	42bc      	cmp	r4, r7
 80191a8:	f107 0901 	add.w	r9, r7, #1
			while (j++ < w) putc_bfd(&pb, ' ');
 80191ac:	f107 0802 	add.w	r8, r7, #2
				while (j++ < w) putc_bfd(&pb, ' ');
 80191b0:	d948      	bls.n	8019244 <f_printf+0x500>
 80191b2:	464f      	mov	r7, r9
	pb->buf[i++] = (BYTE)c;
 80191b4:	f04f 0820 	mov.w	r8, #32
 80191b8:	f101 0380 	add.w	r3, r1, #128	; 0x80
	if (i < 0) return;
 80191bc:	2900      	cmp	r1, #0
	pb->buf[i++] = (BYTE)c;
 80191be:	f101 0a01 	add.w	sl, r1, #1
 80191c2:	446b      	add	r3, sp
	if (i < 0) return;
 80191c4:	db0e      	blt.n	80191e4 <f_printf+0x4a0>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80191c6:	f1ba 0f3c 	cmp.w	sl, #60	; 0x3c
 80191ca:	4651      	mov	r1, sl
	pb->buf[i++] = (BYTE)c;
 80191cc:	f803 8c40 	strb.w	r8, [r3, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80191d0:	dc17      	bgt.n	8019202 <f_printf+0x4be>
	pb->nchr++;
 80191d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
				while (j++ < w) putc_bfd(&pb, ' ');
 80191d4:	1c7a      	adds	r2, r7, #1
 80191d6:	42bc      	cmp	r4, r7
	pb->idx = i;
 80191d8:	910e      	str	r1, [sp, #56]	; 0x38
	pb->nchr++;
 80191da:	f103 0301 	add.w	r3, r3, #1
				while (j++ < w) putc_bfd(&pb, ' ');
 80191de:	4617      	mov	r7, r2
	pb->nchr++;
 80191e0:	930f      	str	r3, [sp, #60]	; 0x3c
				while (j++ < w) putc_bfd(&pb, ' ');
 80191e2:	d8e9      	bhi.n	80191b8 <f_printf+0x474>
 80191e4:	eba4 0709 	sub.w	r7, r4, r9
			while (*p) putc_bfd(&pb, *p++);
 80191e8:	782a      	ldrb	r2, [r5, #0]
				while (j++ < w) putc_bfd(&pb, ' ');
 80191ea:	454c      	cmp	r4, r9
 80191ec:	bf38      	it	cc
 80191ee:	2700      	movcc	r7, #0
 80191f0:	f109 0901 	add.w	r9, r9, #1
 80191f4:	444f      	add	r7, r9
			while (j++ < w) putc_bfd(&pb, ' ');
 80191f6:	f107 0801 	add.w	r8, r7, #1
			while (*p) putc_bfd(&pb, *p++);
 80191fa:	2a00      	cmp	r2, #0
 80191fc:	f47f ae77 	bne.w	8018eee <f_printf+0x1aa>
 8019200:	e68f      	b.n	8018f22 <f_printf+0x1de>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8019202:	a910      	add	r1, sp, #64	; 0x40
 8019204:	ab04      	add	r3, sp, #16
 8019206:	4652      	mov	r2, sl
 8019208:	980d      	ldr	r0, [sp, #52]	; 0x34
 801920a:	f7fe fedf 	bl	8017fcc <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801920e:	9904      	ldr	r1, [sp, #16]
 8019210:	ebb1 010a 	subs.w	r1, r1, sl
 8019214:	bf18      	it	ne
 8019216:	f04f 31ff 	movne.w	r1, #4294967295
 801921a:	e7da      	b.n	80191d2 <f_printf+0x48e>
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 801921c:	46a9      	mov	r9, r5
 801921e:	e70b      	b.n	8019038 <f_printf+0x2f4>
 8019220:	46d1      	mov	r9, sl
 8019222:	e709      	b.n	8019038 <f_printf+0x2f4>
	return EOF;
 8019224:	f04f 30ff 	mov.w	r0, #4294967295
}
 8019228:	b020      	add	sp, #128	; 0x80
 801922a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801922e:	b003      	add	sp, #12
 8019230:	4770      	bx	lr
			if (!(f & 2)) {
 8019232:	f1bb 0f00 	cmp.w	fp, #0
 8019236:	d007      	beq.n	8019248 <f_printf+0x504>
			for (j = 0; p[j]; j++) ;
 8019238:	4617      	mov	r7, r2
			if (!(f & 2)) {
 801923a:	f04f 0801 	mov.w	r8, #1
 801923e:	e670      	b.n	8018f22 <f_printf+0x1de>
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8019240:	4619      	mov	r1, r3
 8019242:	e60e      	b.n	8018e62 <f_printf+0x11e>
				while (j++ < w) putc_bfd(&pb, ' ');
 8019244:	464f      	mov	r7, r9
 8019246:	e652      	b.n	8018eee <f_printf+0x1aa>
 8019248:	2c00      	cmp	r4, #0
 801924a:	f43f ad9e 	beq.w	8018d8a <f_printf+0x46>
 801924e:	f04f 0901 	mov.w	r9, #1
 8019252:	e7ae      	b.n	80191b2 <f_printf+0x46e>

08019254 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8019254:	4b14      	ldr	r3, [pc, #80]	; (80192a8 <FATFS_LinkDriver+0x54>)
 8019256:	7b9a      	ldrb	r2, [r3, #14]
 8019258:	2a01      	cmp	r2, #1
 801925a:	d901      	bls.n	8019260 <FATFS_LinkDriver+0xc>
  uint8_t ret = 1;
 801925c:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
}
 801925e:	4770      	bx	lr
    disk.is_initialized[disk.nbr] = 0;
 8019260:	f893 c00e 	ldrb.w	ip, [r3, #14]
 8019264:	2200      	movs	r2, #0
 8019266:	fa5f fc8c 	uxtb.w	ip, ip
 801926a:	f803 200c 	strb.w	r2, [r3, ip]
    disk.drv[disk.nbr] = drv;
 801926e:	f893 c00e 	ldrb.w	ip, [r3, #14]
 8019272:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8019276:	f8cc 0004 	str.w	r0, [ip, #4]
    disk.lun[disk.nbr] = lun;
 801927a:	f893 c00e 	ldrb.w	ip, [r3, #14]
    DiskNum = disk.nbr++;
 801927e:	7b98      	ldrb	r0, [r3, #14]
    disk.lun[disk.nbr] = lun;
 8019280:	449c      	add	ip, r3
 8019282:	f88c 200c 	strb.w	r2, [ip, #12]
    DiskNum = disk.nbr++;
 8019286:	f100 0c01 	add.w	ip, r0, #1
    path[0] = DiskNum + '0';
 801928a:	3030      	adds	r0, #48	; 0x30
    DiskNum = disk.nbr++;
 801928c:	fa5f fc8c 	uxtb.w	ip, ip
 8019290:	f883 c00e 	strb.w	ip, [r3, #14]
    path[1] = ':';
 8019294:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
    path[2] = '/';
 8019298:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 801929a:	7008      	strb	r0, [r1, #0]
    path[1] = ':';
 801929c:	f881 c001 	strb.w	ip, [r1, #1]
    path[3] = 0;
 80192a0:	4610      	mov	r0, r2
    path[2] = '/';
 80192a2:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 80192a4:	70ca      	strb	r2, [r1, #3]
  return ret;
 80192a6:	4770      	bx	lr
 80192a8:	2000a240 	.word	0x2000a240

080192ac <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 80192ac:	f00c bace 	b.w	802584c <malloc>

080192b0 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 80192b0:	f00c bad4 	b.w	802585c <free>

080192b4 <Init_DataMemoryLayout>:
  AIContext->nn_input_buffer = NULL;
  #else
  AIContext->nn_input_buffer = ai_fp_global_memory + AI_ACTIVATION_BUFFER_SIZE;
  #endif /* AI_NETWORK_INPUTS_IN_ACTIVATIONS */
#elif MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT
  App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer = ai_fp_global_memory;
 80192b4:	4a08      	ldr	r2, [pc, #32]	; (80192d8 <Init_DataMemoryLayout+0x24>)
  AiContext_TypeDef *AIContext = App_Context_Ptr->Ai_ContextPtr;
 80192b6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 80192b8:	f502 3316 	add.w	r3, r2, #153600	; 0x25800
{
 80192bc:	b470      	push	{r4, r5, r6}
  App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer = ai_fp_global_memory;
 80192be:	6a84      	ldr	r4, [r0, #40]	; 0x28
  #endif /* AI_NETWORK_INPUTS_IN_ACTIVATIONS */
  #else /* MEMORY_SCHEME == FULL_EXTERNAL */
  /* Bottom camera_frame_buff buffer and resize_output_buff buffer */
  #define  RESIZE_OUTPUT_BUFFER_OFFSET (CAM_FRAME_BUFFER_SIZE - RESIZE_OUTPUT_BUFFER_SIZE)
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE + RESIZE_OUTPUT_BUFFER_OFFSET;
 80192c0:	f502 2686 	add.w	r6, r2, #274432	; 0x43000
  AIContext->activation_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
  #ifdef AI_NETWORK_INPUTS_IN_ACTIVATIONS
  AIContext->nn_input_buffer = NULL;
 80192c4:	2500      	movs	r5, #0
  App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 80192c6:	e9c4 2300 	strd	r2, r3, [r4]
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 80192ca:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE + RESIZE_OUTPUT_BUFFER_OFFSET;
 80192cc:	6496      	str	r6, [r2, #72]	; 0x48
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 80192ce:	6293      	str	r3, [r2, #40]	; 0x28
  AIContext->nn_input_buffer = NULL;
 80192d0:	e9c1 5301 	strd	r5, r3, [r1, #4]
  #endif /* AI_NETWORK_INPUTS_IN_ACTIVATIONS */
  #endif /* MEMORY_SCHEME == SPLIT_INT_EXT */
#else
  #error "Please check definition of MEMORY_SCHEME define"
#endif /* MEMORY_SCHEME == FULL_INTERNAL_MEM_OPT */
}
 80192d4:	bc70      	pop	{r4, r5, r6}
 80192d6:	4770      	bx	lr
 80192d8:	24000000 	.word	0x24000000

080192dc <Run_Preprocessing>:
    /*********************************************************************************************/
    UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer), CAM_FRAME_BUFFER_SIZE, INVALIDATE);
  }
#endif
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer);
 80192dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 80192de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer);
 80192e2:	6859      	ldr	r1, [r3, #4]
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[0];
  TestRunCtxt_Ptr->src_width_size=CAM_RES_WIDTH;
  TestRunCtxt_Ptr->src_height_size=CAM_RES_HEIGHT;
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB565;
  TestRunCtxt_Ptr->src_size=CAM_FRAME_BUFFER_SIZE;
 80192e4:	f44f 3316 	mov.w	r3, #153600	; 0x25800
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
 80192e8:	6b84      	ldr	r4, [r0, #56]	; 0x38
{
 80192ea:	4605      	mov	r5, r0
  PreprocContext_TypeDef* PreprocCtxt_Ptr=App_Context_Ptr->Preproc_ContextPtr;
 80192ec:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  TestRunCtxt_Ptr->PerformCapture=1;
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_BMP;
  TestRunCtxt_Ptr->rb_swap=0;
 80192ee:	2700      	movs	r7, #0
  TestRunCtxt_Ptr->PerformCapture=1;
 80192f0:	f04f 0901 	mov.w	r9, #1
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB565;
 80192f4:	f04f 0b02 	mov.w	fp, #2
  TestRunCtxt_Ptr->src_size=CAM_FRAME_BUFFER_SIZE;
 80192f8:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
  TestRunCtxt_Ptr->src_width_size=CAM_RES_WIDTH;
 80192fc:	f44f 7aa0 	mov.w	sl, #320	; 0x140
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[0];
 8019300:	4b60      	ldr	r3, [pc, #384]	; (8019484 <Run_Preprocessing+0x1a8>)
  TestRunCtxt_Ptr->src_height_size=CAM_RES_HEIGHT;
 8019302:	f04f 08f0 	mov.w	r8, #240	; 0xf0
{
 8019306:	b083      	sub	sp, #12
  TestRunCtxt_Ptr->src_width_size=CAM_RES_WIDTH;
 8019308:	f8c4 a5d0 	str.w	sl, [r4, #1488]	; 0x5d0
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[0];
 801930c:	f8c4 35cc 	str.w	r3, [r4, #1484]	; 0x5cc
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8019310:	4620      	mov	r0, r4
  TestRunCtxt_Ptr->src_height_size=CAM_RES_HEIGHT;
 8019312:	f8c4 85d4 	str.w	r8, [r4, #1492]	; 0x5d4
  TestRunCtxt_Ptr->PerformCapture=1;
 8019316:	f8c4 95e0 	str.w	r9, [r4, #1504]	; 0x5e0
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_BMP;
 801931a:	f884 95e4 	strb.w	r9, [r4, #1508]	; 0x5e4
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer);
 801931e:	f8c4 15c8 	str.w	r1, [r4, #1480]	; 0x5c8
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB565;
 8019322:	f8c4 b5d8 	str.w	fp, [r4, #1496]	; 0x5d8
  TestRunCtxt_Ptr->rb_swap=0;
 8019326:	f8c4 75e8 	str.w	r7, [r4, #1512]	; 0x5e8
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 801932a:	7829      	ldrb	r1, [r5, #0]
 801932c:	f7ea fe24 	bl	8003f78 <TEST_Run>
  
  tresize_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8019330:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8019332:	f7eb fdf5 	bl	8004f20 <UTILS_GetTimeStamp>
  
  /**********************/
  /****Image resizing****/
  /**********************/
  PreprocCtxt_Ptr->Resize_Src_Img.data=App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
 8019336:	6aab      	ldr	r3, [r5, #40]	; 0x28
  tresize_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8019338:	9000      	str	r0, [sp, #0]
  PreprocCtxt_Ptr->Resize_Src_Img.data=App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
 801933a:	685b      	ldr	r3, [r3, #4]
  PreprocCtxt_Ptr->Resize_Src_Img.w=CAM_RES_WIDTH;
  PreprocCtxt_Ptr->Resize_Src_Img.h=CAM_RES_HEIGHT;
  PreprocCtxt_Ptr->Resize_Src_Img.bpp=IMAGE_BPP_RGB565;
  PreprocCtxt_Ptr->Resize_Dst_Img.data=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data;
 801933c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  PreprocCtxt_Ptr->Resize_Src_Img.h=CAM_RES_HEIGHT;
 801933e:	e9c6 a80b 	strd	sl, r8, [r6, #44]	; 0x2c
  PreprocCtxt_Ptr->Resize_Src_Img.bpp=IMAGE_BPP_RGB565;
 8019342:	e9c6 b30d 	strd	fp, r3, [r6, #52]	; 0x34
  PreprocCtxt_Ptr->Resize_Dst_Img.w=AI_NETWORK_WIDTH;
 8019346:	f04f 0880 	mov.w	r8, #128	; 0x80
  PreprocCtxt_Ptr->Resize_Dst_Img.data=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data;
 801934a:	6c83      	ldr	r3, [r0, #72]	; 0x48
  PreprocCtxt_Ptr->Resize_Dst_Img.h=AI_NETWORK_HEIGHT;
  PreprocCtxt_Ptr->Resize_Dst_Img.bpp=IMAGE_BPP_RGB565;
 801934c:	f8c6 b044 	str.w	fp, [r6, #68]	; 0x44
  PreprocCtxt_Ptr->Resize_Dst_Img.data=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data;
 8019350:	64b3      	str	r3, [r6, #72]	; 0x48
  PreprocCtxt_Ptr->Resize_Dst_Img.h=AI_NETWORK_HEIGHT;
 8019352:	e9c6 880f 	strd	r8, r8, [r6, #60]	; 0x3c
  PREPROC_ImageResize(App_Context_Ptr->Preproc_ContextPtr);
 8019356:	f7e8 fb41 	bl	80019dc <PREPROC_ImageResize>
  
  tresize_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801935a:	6b68      	ldr	r0, [r5, #52]	; 0x34
 801935c:	f7eb fde0 	bl	8004f20 <UTILS_GetTimeStamp>
  
#if PIXEL_FMT_CONV == HW_PFC
  /******************************************************************************************/
  /****Coherency purpose: clean the source buffer area in L1 D-Cache before DMA2D reading****/
  /******************************************************************************************/
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data), RESIZE_OUTPUT_BUFFER_SIZE, CLEAN);
 8019360:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8019362:	465a      	mov	r2, fp
  tresize_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8019364:	4682      	mov	sl, r0
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data), RESIZE_OUTPUT_BUFFER_SIZE, CLEAN);
 8019366:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801936a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801936c:	f7eb fe8e 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
#endif
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data);
 8019370:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8019372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  TestRunCtxt_Ptr->src_width_size=AI_NETWORK_WIDTH;
  TestRunCtxt_Ptr->src_height_size=AI_NETWORK_HEIGHT;
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB565;
  TestRunCtxt_Ptr->src_size=RESIZE_OUTPUT_BUFFER_SIZE;
  TestRunCtxt_Ptr->PerformCapture=0;
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_BMP;
 8019374:	f884 95e4 	strb.w	r9, [r4, #1508]	; 0x5e4
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data);
 8019378:	f8c4 35c8 	str.w	r3, [r4, #1480]	; 0x5c8
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[1];
 801937c:	4b41      	ldr	r3, [pc, #260]	; (8019484 <Run_Preprocessing+0x1a8>)
  TestRunCtxt_Ptr->src_width_size=AI_NETWORK_WIDTH;
 801937e:	f8c4 85d0 	str.w	r8, [r4, #1488]	; 0x5d0
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[1];
 8019382:	3320      	adds	r3, #32
  TestRunCtxt_Ptr->src_height_size=AI_NETWORK_HEIGHT;
 8019384:	f8c4 85d4 	str.w	r8, [r4, #1492]	; 0x5d4
  TestRunCtxt_Ptr->rb_swap=0;
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8019388:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[1];
 801938a:	f8c4 35cc 	str.w	r3, [r4, #1484]	; 0x5cc
  TestRunCtxt_Ptr->src_size=RESIZE_OUTPUT_BUFFER_SIZE;
 801938e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB565;
 8019392:	f8c4 b5d8 	str.w	fp, [r4, #1496]	; 0x5d8
  TestRunCtxt_Ptr->src_size=RESIZE_OUTPUT_BUFFER_SIZE;
 8019396:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
  TestRunCtxt_Ptr->PerformCapture=0;
 801939a:	f8c4 75e0 	str.w	r7, [r4, #1504]	; 0x5e0
  TestRunCtxt_Ptr->rb_swap=0;
 801939e:	f8c4 75e8 	str.w	r7, [r4, #1512]	; 0x5e8
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 80193a2:	7829      	ldrb	r1, [r5, #0]
 80193a4:	f7ea fde8 	bl	8003f78 <TEST_Run>
  
  tpfc_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 80193a8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80193aa:	f7eb fdb9 	bl	8004f20 <UTILS_GetTimeStamp>
 80193ae:	9001      	str	r0, [sp, #4]
  
  /*************************************/
  /****Image Pixel Format Conversion****/
  /*************************************/
  PreprocCtxt_Ptr->Pfc_Src_Img.data=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data;
 80193b0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80193b2:	6c81      	ldr	r1, [r0, #72]	; 0x48
  PreprocCtxt_Ptr->Pfc_Src_Img.w=AI_NETWORK_WIDTH;
  PreprocCtxt_Ptr->Pfc_Src_Img.h=AI_NETWORK_HEIGHT;
  PreprocCtxt_Ptr->Pfc_Src_Img.bpp=IMAGE_BPP_RGB565;
  PreprocCtxt_Ptr->Pfc_Dst_Img.data=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data;
 80193b4:	6a82      	ldr	r2, [r0, #40]	; 0x28
  PreprocCtxt_Ptr->Pfc_Dst_Img.w=AI_NETWORK_WIDTH;
  PreprocCtxt_Ptr->Pfc_Dst_Img.h=AI_NETWORK_HEIGHT;
  PreprocCtxt_Ptr->Dma2dcfg.x=0;
  PreprocCtxt_Ptr->Dma2dcfg.y=0;
  PreprocCtxt_Ptr->Dma2dcfg.rowStride=AI_NETWORK_WIDTH;
  PreprocCtxt_Ptr->red_blue_swap=1;
 80193b6:	f8c6 9008 	str.w	r9, [r6, #8]
  PreprocCtxt_Ptr->Pfc_Dst_Img.data=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data;
 80193ba:	62b2      	str	r2, [r6, #40]	; 0x28
  PreprocCtxt_Ptr->Pfc_Src_Img.data=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data;
 80193bc:	e9c6 b105 	strd	fp, r1, [r6, #20]
  PreprocCtxt_Ptr->Dma2dcfg.rowStride=AI_NETWORK_WIDTH;
 80193c0:	e9c6 7800 	strd	r7, r8, [r6]
  PreprocCtxt_Ptr->Pfc_Src_Img.h=AI_NETWORK_HEIGHT;
 80193c4:	e9c6 8803 	strd	r8, r8, [r6, #12]
  PreprocCtxt_Ptr->Pfc_Dst_Img.h=AI_NETWORK_HEIGHT;
 80193c8:	e9c6 8807 	strd	r8, r8, [r6, #28]
  PREPROC_PixelFormatConversion(App_Context_Ptr->Preproc_ContextPtr);
 80193cc:	f7e8 fb1a 	bl	8001a04 <PREPROC_PixelFormatConversion>
  
  tpfc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 80193d0:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80193d2:	f7eb fda5 	bl	8004f20 <UTILS_GetTimeStamp>
  
#if PIXEL_FMT_CONV == HW_PFC 
  /**************************************************************************************/
  /****Coherency purpose: invalidate the source area in L1 D-Cache before CPU reading****/  
  /**************************************************************************************/
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data), 
 80193d6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  tpfc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 80193d8:	4606      	mov	r6, r0
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data), 
 80193da:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80193de:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80193e0:	464a      	mov	r2, r9
 80193e2:	f7eb fe53 	bl	800508c <UTILS_DCache_Coherency_Maintenance>
                                     PFC_OUTPUT_BUFFER_SIZE, 
                                     INVALIDATE);
#endif
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data);
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[2];
 80193e6:	4b27      	ldr	r3, [pc, #156]	; (8019484 <Run_Preprocessing+0x1a8>)
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data);
 80193e8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[2];
 80193ea:	f103 0240 	add.w	r2, r3, #64	; 0x40
  TestRunCtxt_Ptr->src_width_size=AI_NETWORK_WIDTH;
  TestRunCtxt_Ptr->src_height_size=AI_NETWORK_HEIGHT;
  TestRunCtxt_Ptr->src_bpp=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.bpp;
  TestRunCtxt_Ptr->src_size=PFC_OUTPUT_BUFFER_SIZE;
 80193ee:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data);
 80193f2:	6a88      	ldr	r0, [r1, #40]	; 0x28
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[2];
 80193f4:	f8c4 25cc 	str.w	r2, [r4, #1484]	; 0x5cc
  TestRunCtxt_Ptr->src_bpp=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.bpp;
 80193f8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data);
 80193fa:	f8c4 05c8 	str.w	r0, [r4, #1480]	; 0x5c8
  TestRunCtxt_Ptr->src_size=PFC_OUTPUT_BUFFER_SIZE;
 80193fe:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
  TestRunCtxt_Ptr->src_bpp=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.bpp;
 8019402:	f8c4 25d8 	str.w	r2, [r4, #1496]	; 0x5d8
  TestRunCtxt_Ptr->PerformCapture=0;
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_BMP;
 8019406:	f884 95e4 	strb.w	r9, [r4, #1508]	; 0x5e4
  TestRunCtxt_Ptr->rb_swap=1;
 801940a:	f8c4 95e8 	str.w	r9, [r4, #1512]	; 0x5e8
  TestRunCtxt_Ptr->src_width_size=AI_NETWORK_WIDTH;
 801940e:	f8c4 85d0 	str.w	r8, [r4, #1488]	; 0x5d0
  TestRunCtxt_Ptr->src_height_size=AI_NETWORK_HEIGHT;
 8019412:	f8c4 85d4 	str.w	r8, [r4, #1492]	; 0x5d4
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8019416:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  TestRunCtxt_Ptr->PerformCapture=0;
 8019418:	f8c4 75e0 	str.w	r7, [r4, #1504]	; 0x5e0
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 801941c:	7829      	ldrb	r1, [r5, #0]
 801941e:	f7ea fdab 	bl	8003f78 <TEST_Run>

  tpvc_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8019422:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8019424:	f7eb fd7c 	bl	8004f20 <UTILS_GetTimeStamp>
#ifdef OBJECTDETECT
  AI_PixelValueConversion(App_Context_Ptr->People_ContextPtr,
                                      (void*)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data));
#else
  AI_PixelValueConversion(App_Context_Ptr->Ai_ContextPtr,
                                      (void*)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data));
 8019428:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  tpvc_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801942a:	4681      	mov	r9, r0
  AI_PixelValueConversion(App_Context_Ptr->Ai_ContextPtr,
 801942c:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 801942e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8019430:	f7e7 fb96 	bl	8000b60 <AI_PixelValueConversion>
#endif /* OBJECTDETECT */

  tpvc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8019434:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8019436:	f7eb fd73 	bl	8004f20 <UTILS_GetTimeStamp>
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(NULL);
  TestRunCtxt_Ptr->src_buff_name="";
 801943a:	4a13      	ldr	r2, [pc, #76]	; (8019488 <Run_Preprocessing+0x1ac>)
  TestRunCtxt_Ptr->src_width_size=0;
  TestRunCtxt_Ptr->src_height_size=0;
  TestRunCtxt_Ptr->src_size=0;
  TestRunCtxt_Ptr->PerformCapture=0;
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_RAW;
 801943c:	f884 75e4 	strb.w	r7, [r4, #1508]	; 0x5e4
  tpvc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8019440:	4680      	mov	r8, r0
  TestRunCtxt_Ptr->src_buff_name="";
 8019442:	f8c4 25cc 	str.w	r2, [r4, #1484]	; 0x5cc
  TestRunCtxt_Ptr->rb_swap=0;
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8019446:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  TestRunCtxt_Ptr->src_buff_addr=(void *)(NULL);
 8019448:	f8c4 75c8 	str.w	r7, [r4, #1480]	; 0x5c8
  TestRunCtxt_Ptr->src_width_size=0;
 801944c:	f8c4 75d0 	str.w	r7, [r4, #1488]	; 0x5d0
  TestRunCtxt_Ptr->src_height_size=0;
 8019450:	f8c4 75d4 	str.w	r7, [r4, #1492]	; 0x5d4
  TestRunCtxt_Ptr->src_size=0;
 8019454:	f8c4 75dc 	str.w	r7, [r4, #1500]	; 0x5dc
  TestRunCtxt_Ptr->PerformCapture=0;
 8019458:	f8c4 75e0 	str.w	r7, [r4, #1504]	; 0x5e0
  TestRunCtxt_Ptr->rb_swap=0;
 801945c:	f8c4 75e8 	str.w	r7, [r4, #1512]	; 0x5e8
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8019460:	7829      	ldrb	r1, [r5, #0]
 8019462:	f7ea fd89 	bl	8003f78 <TEST_Run>
  
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PFC]=tpfc_stop-tpfc_start;
 8019466:	9b01      	ldr	r3, [sp, #4]
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_RESIZE]=tresize_stop-tresize_start;
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PVC]=tpvc_stop-tpvc_start;
 8019468:	eba8 0009 	sub.w	r0, r8, r9
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PFC]=tpfc_stop-tpfc_start;
 801946c:	1af6      	subs	r6, r6, r3
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_RESIZE]=tresize_stop-tresize_start;
 801946e:	9b00      	ldr	r3, [sp, #0]
 8019470:	ebaa 0203 	sub.w	r2, sl, r3
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PFC]=tpfc_stop-tpfc_start;
 8019474:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8019476:	609e      	str	r6, [r3, #8]
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_RESIZE]=tresize_stop-tresize_start;
 8019478:	605a      	str	r2, [r3, #4]
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PVC]=tpvc_stop-tpvc_start;
 801947a:	60d8      	str	r0, [r3, #12]
}
 801947c:	b003      	add	sp, #12
 801947e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019482:	bf00      	nop
 8019484:	20000020 	.word	0x20000020
 8019488:	080292c4 	.word	0x080292c4

0801948c <Image_CheckResizeMemoryLayout>:

bool Image_CheckResizeMemoryLayout(image_t *src_img, image_t *dst_img)
{
 801948c:	b570      	push	{r4, r5, r6, lr}
 801948e:	460c      	mov	r4, r1
 8019490:	4606      	mov	r6, r0
  uint32_t src_size = STM32Ipl_ImageDataSize(src_img);
 8019492:	f000 f84b 	bl	801952c <STM32Ipl_ImageDataSize>
 8019496:	4605      	mov	r5, r0
  uint32_t dst_size = STM32Ipl_ImageDataSize(dst_img);
 8019498:	4620      	mov	r0, r4
 801949a:	f000 f847 	bl	801952c <STM32Ipl_ImageDataSize>
  uint32_t src_start = (uint32_t)src_img->data;
  uint32_t dst_start = (uint32_t)dst_img->data;
 801949e:	68e1      	ldr	r1, [r4, #12]
  uint32_t src_end = src_start + src_size - 1;
 80194a0:	68f3      	ldr	r3, [r6, #12]
  uint32_t dst_end = dst_start + dst_size - 1;
 80194a2:	1e4a      	subs	r2, r1, #1
  uint32_t src_end = src_start + src_size - 1;
 80194a4:	3b01      	subs	r3, #1
  uint32_t dst_end = dst_start + dst_size - 1;
 80194a6:	4410      	add	r0, r2
  uint32_t src_end = src_start + src_size - 1;
 80194a8:	442b      	add	r3, r5
  {
    reverse = false; /* ((src_start >= dst_start) || (src_end <= dst_start)) */
  }

  return reverse;
}
 80194aa:	4283      	cmp	r3, r0
 80194ac:	bf98      	it	ls
 80194ae:	4299      	cmpls	r1, r3
 80194b0:	bf34      	ite	cc
 80194b2:	2001      	movcc	r0, #1
 80194b4:	2000      	movcs	r0, #0
 80194b6:	bd70      	pop	{r4, r5, r6, pc}

080194b8 <STM32Ipl_InitLib>:
 * @param memAddr	Address of the memory buffer allocated to STM32IPL for its internal purposes.
 * @param memSize	Size of the memory buffer (bytes).
 * @return			void.
 */
void STM32Ipl_InitLib(void *memAddr, uint32_t memSize)
{
 80194b8:	b508      	push	{r3, lr}
	umm_init(memAddr, memSize);
 80194ba:	f001 fff7 	bl	801b4ac <umm_init>
	fb_init();
}
 80194be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	fb_init();
 80194c2:	f001 bd83 	b.w	801afcc <fb_init>
 80194c6:	bf00      	nop

080194c8 <STM32Ipl_Init>:
 * @param data		Pointer to the pixel data assigned to image.
 * @return			void.
 */
void STM32Ipl_Init(image_t *img, uint32_t width, uint32_t height, image_bpp_t format, void *data)
{
	if (img) {
 80194c8:	b120      	cbz	r0, 80194d4 <STM32Ipl_Init+0xc>
		img->w = width;
		img->h = height;
		img->bpp = format;
 80194ca:	6083      	str	r3, [r0, #8]
		img->data = data;
 80194cc:	9b00      	ldr	r3, [sp, #0]
		img->h = height;
 80194ce:	e9c0 1200 	strd	r1, r2, [r0]
		img->data = data;
 80194d2:	60c3      	str	r3, [r0, #12]
	}
}
 80194d4:	4770      	bx	lr
 80194d6:	bf00      	nop

080194d8 <STM32Ipl_ReleaseData>:
 * @param img	Image.
 * @return		void.
 */
void STM32Ipl_ReleaseData(image_t *img)
{
	if (img) {
 80194d8:	b150      	cbz	r0, 80194f0 <STM32Ipl_ReleaseData+0x18>
{
 80194da:	b510      	push	{r4, lr}
 80194dc:	4604      	mov	r4, r0
		xfree(img->data);
 80194de:	68c0      	ldr	r0, [r0, #12]
 80194e0:	f001 fd72 	bl	801afc8 <xfree>
		img->w = width;
 80194e4:	2300      	movs	r3, #0
		img->h = height;
 80194e6:	e9c4 3300 	strd	r3, r3, [r4]
		img->data = data;
 80194ea:	e9c4 3302 	strd	r3, r3, [r4, #8]
		STM32Ipl_Init(img, 0, 0, (image_bpp_t)0, 0);
	}
}
 80194ee:	bd10      	pop	{r4, pc}
 80194f0:	4770      	bx	lr
 80194f2:	bf00      	nop

080194f4 <STM32Ipl_DataSize>:
 * @param format	Image format.
 * @return			Size of the image data buffer (bytes), 0 in case of wrong/unsupported arguments.
 */
uint32_t STM32Ipl_DataSize(uint32_t width, uint32_t height, image_bpp_t format)
{
	switch ((uint32_t)format) {
 80194f4:	2a04      	cmp	r2, #4
 80194f6:	d816      	bhi.n	8019526 <STM32Ipl_DataSize+0x32>
 80194f8:	e8df f002 	tbb	[pc, r2]
 80194fc:	030c0306 	.word	0x030c0306
 8019500:	10          	.byte	0x10
 8019501:	00          	.byte	0x00
		case IMAGE_BPP_BINARY:
			return ((width + UINT32_T_MASK) >> UINT32_T_SHIFT) * height * sizeof(uint32_t);

		case IMAGE_BPP_GRAYSCALE:
			return width * height * sizeof(uint8_t);
 8019502:	fb01 f000 	mul.w	r0, r1, r0
 8019506:	4770      	bx	lr
			return ((width + UINT32_T_MASK) >> UINT32_T_SHIFT) * height * sizeof(uint32_t);
 8019508:	301f      	adds	r0, #31
 801950a:	0940      	lsrs	r0, r0, #5
 801950c:	fb00 f101 	mul.w	r1, r0, r1
 8019510:	0088      	lsls	r0, r1, #2
 8019512:	4770      	bx	lr

		case IMAGE_BPP_RGB565:
			return width * height * sizeof(uint16_t);
 8019514:	fb00 f101 	mul.w	r1, r0, r1
 8019518:	0048      	lsls	r0, r1, #1
 801951a:	4770      	bx	lr

		case IMAGE_BPP_BAYER:
			return width * height * sizeof(uint8_t);

		case IMAGE_BPP_RGB888:
			return width * height * 3;
 801951c:	fb00 f101 	mul.w	r1, r0, r1
 8019520:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8019524:	4770      	bx	lr
	switch ((uint32_t)format) {
 8019526:	2000      	movs	r0, #0
	}

	return 0;
}
 8019528:	4770      	bx	lr
 801952a:	bf00      	nop

0801952c <STM32Ipl_ImageDataSize>:
 * @param img	Image.
 * @return		Size of the image data buffer (bytes), 0 in case of wrong/unsupported argument.
 */
uint32_t STM32Ipl_ImageDataSize(const image_t *img)
{
	return img ? STM32Ipl_DataSize(img->w, img->h, (image_bpp_t)img->bpp) : 0;
 801952c:	b150      	cbz	r0, 8019544 <STM32Ipl_ImageDataSize+0x18>
	switch ((uint32_t)format) {
 801952e:	7a02      	ldrb	r2, [r0, #8]
	return img ? STM32Ipl_DataSize(img->w, img->h, (image_bpp_t)img->bpp) : 0;
 8019530:	e9d0 3000 	ldrd	r3, r0, [r0]
	switch ((uint32_t)format) {
 8019534:	2a04      	cmp	r2, #4
 8019536:	d804      	bhi.n	8019542 <STM32Ipl_ImageDataSize+0x16>
 8019538:	e8df f002 	tbb	[pc, r2]
 801953c:	050e0508 	.word	0x050e0508
 8019540:	12          	.byte	0x12
 8019541:	00          	.byte	0x00
 8019542:	2000      	movs	r0, #0
}
 8019544:	4770      	bx	lr
			return width * height * sizeof(uint8_t);
 8019546:	fb03 f000 	mul.w	r0, r3, r0
 801954a:	4770      	bx	lr
			return ((width + UINT32_T_MASK) >> UINT32_T_SHIFT) * height * sizeof(uint32_t);
 801954c:	331f      	adds	r3, #31
 801954e:	095b      	lsrs	r3, r3, #5
 8019550:	fb00 f303 	mul.w	r3, r0, r3
 8019554:	0098      	lsls	r0, r3, #2
 8019556:	4770      	bx	lr
			return width * height * sizeof(uint16_t);
 8019558:	fb00 f303 	mul.w	r3, r0, r3
 801955c:	0058      	lsls	r0, r3, #1
 801955e:	4770      	bx	lr
			return width * height * 3;
 8019560:	fb03 f000 	mul.w	r0, r3, r0
 8019564:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019568:	4770      	bx	lr
 801956a:	bf00      	nop

0801956c <STM32Ipl_ImageFormatSupported>:
 */
bool STM32Ipl_ImageFormatSupported(const image_t *img, uint32_t formats)
{
	stm32ipl_if_t format;

	switch (img->bpp) {
 801956c:	6883      	ldr	r3, [r0, #8]
 801956e:	2b04      	cmp	r3, #4
 8019570:	d810      	bhi.n	8019594 <STM32Ipl_ImageFormatSupported+0x28>
 8019572:	e8df f003 	tbb	[pc, r3]
 8019576:	0d03      	.short	0x0d03
 8019578:	0f0b      	.short	0x0f0b
 801957a:	09          	.byte	0x09
 801957b:	00          	.byte	0x00
 801957c:	2301      	movs	r3, #1

		default:
			return false;
	}

	return (format & formats);
 801957e:	4219      	tst	r1, r3
 8019580:	bf14      	ite	ne
 8019582:	2001      	movne	r0, #1
 8019584:	2000      	moveq	r0, #0
 8019586:	4770      	bx	lr
			break;
 8019588:	2308      	movs	r3, #8
 801958a:	e7f8      	b.n	801957e <STM32Ipl_ImageFormatSupported+0x12>
			break;
 801958c:	2304      	movs	r3, #4
 801958e:	e7f6      	b.n	801957e <STM32Ipl_ImageFormatSupported+0x12>
	switch (img->bpp) {
 8019590:	2302      	movs	r3, #2
 8019592:	e7f4      	b.n	801957e <STM32Ipl_ImageFormatSupported+0x12>
 8019594:	2000      	movs	r0, #0
}
 8019596:	4770      	bx	lr

08019598 <STM32Ipl_CopyData>:
 * @param dst   Destination image; if it is not valid, an error is returned.
 * @return		stm32ipl_err_Ok on success, error otherwise.
 */
stm32ipl_err_t STM32Ipl_CopyData(const image_t *src, image_t *dst)
{
	STM32IPL_CHECK_VALID_IMAGE(src)
 8019598:	2800      	cmp	r0, #0
 801959a:	d033      	beq.n	8019604 <STM32Ipl_CopyData+0x6c>
{
 801959c:	b570      	push	{r4, r5, r6, lr}
	STM32IPL_CHECK_VALID_IMAGE(src)
 801959e:	68c5      	ldr	r5, [r0, #12]
	STM32IPL_CHECK_VALID_IMAGE(dst)
 80195a0:	b36d      	cbz	r5, 80195fe <STM32Ipl_CopyData+0x66>
 80195a2:	b361      	cbz	r1, 80195fe <STM32Ipl_CopyData+0x66>
 80195a4:	68cc      	ldr	r4, [r1, #12]
 80195a6:	b354      	cbz	r4, 80195fe <STM32Ipl_CopyData+0x66>
	STM32IPL_CHECK_SAME_SIZE(src, dst)
 80195a8:	680b      	ldr	r3, [r1, #0]
 80195aa:	6802      	ldr	r2, [r0, #0]
 80195ac:	429a      	cmp	r2, r3
 80195ae:	d126      	bne.n	80195fe <STM32Ipl_CopyData+0x66>
 80195b0:	684b      	ldr	r3, [r1, #4]
 80195b2:	6846      	ldr	r6, [r0, #4]
 80195b4:	429e      	cmp	r6, r3
 80195b6:	d122      	bne.n	80195fe <STM32Ipl_CopyData+0x66>
	STM32IPL_CHECK_SAME_FORMAT(src, dst)
 80195b8:	6889      	ldr	r1, [r1, #8]
 80195ba:	6883      	ldr	r3, [r0, #8]
 80195bc:	428b      	cmp	r3, r1
 80195be:	d11e      	bne.n	80195fe <STM32Ipl_CopyData+0x66>
	switch ((uint32_t)format) {
 80195c0:	b2db      	uxtb	r3, r3
 80195c2:	2b04      	cmp	r3, #4
 80195c4:	d821      	bhi.n	801960a <STM32Ipl_CopyData+0x72>
 80195c6:	e8df f003 	tbb	[pc, r3]
 80195ca:	030b      	.short	0x030b
 80195cc:	0311      	.short	0x0311
 80195ce:	15          	.byte	0x15
 80195cf:	00          	.byte	0x00
			return width * height * sizeof(uint8_t);
 80195d0:	fb06 f202 	mul.w	r2, r6, r2

	memcpy(dst->data, src->data, STM32Ipl_ImageDataSize(dst));
 80195d4:	4629      	mov	r1, r5
 80195d6:	4620      	mov	r0, r4
 80195d8:	f00d f86d 	bl	80266b6 <memcpy>

	return stm32ipl_err_Ok;
 80195dc:	2000      	movs	r0, #0
}
 80195de:	bd70      	pop	{r4, r5, r6, pc}
			return ((width + UINT32_T_MASK) >> UINT32_T_SHIFT) * height * sizeof(uint32_t);
 80195e0:	321f      	adds	r2, #31
 80195e2:	0952      	lsrs	r2, r2, #5
 80195e4:	fb06 f202 	mul.w	r2, r6, r2
 80195e8:	0092      	lsls	r2, r2, #2
 80195ea:	e7f3      	b.n	80195d4 <STM32Ipl_CopyData+0x3c>
			return width * height * sizeof(uint16_t);
 80195ec:	fb06 f202 	mul.w	r2, r6, r2
 80195f0:	0052      	lsls	r2, r2, #1
 80195f2:	e7ef      	b.n	80195d4 <STM32Ipl_CopyData+0x3c>
			return width * height * 3;
 80195f4:	fb06 f202 	mul.w	r2, r6, r2
 80195f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80195fc:	e7ea      	b.n	80195d4 <STM32Ipl_CopyData+0x3c>
	STM32IPL_CHECK_VALID_IMAGE(src)
 80195fe:	f06f 0001 	mvn.w	r0, #1
}
 8019602:	bd70      	pop	{r4, r5, r6, pc}
	STM32IPL_CHECK_VALID_IMAGE(src)
 8019604:	f06f 0001 	mvn.w	r0, #1
}
 8019608:	4770      	bx	lr
	switch ((uint32_t)format) {
 801960a:	2200      	movs	r2, #0
 801960c:	e7e2      	b.n	80195d4 <STM32Ipl_CopyData+0x3c>
 801960e:	bf00      	nop

08019610 <writeBmpHeader>:
 * paletteColorUsed	The number of palette items used.
 * return stm32ipl_err_Ok on success, errors otherwise.
 */
static stm32ipl_err_t writeBmpHeader(FIL *fp, uint32_t width, uint32_t height, uint32_t dataOffset, uint32_t lineSize,
		uint32_t bitsPP, uint32_t compression, uint32_t paletteColorUsed)
{
 8019610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019612:	b091      	sub	sp, #68	; 0x44
 8019614:	4616      	mov	r6, r2
 8019616:	4605      	mov	r5, r0
 8019618:	460f      	mov	r7, r1
	uint8_t header[54];
	uint32_t fileSize;
	uint32_t imageSize;
	UINT bytesWritten;

	memset(&header, 0, 54);
 801961a:	2232      	movs	r2, #50	; 0x32
 801961c:	2100      	movs	r1, #0
 801961e:	a803      	add	r0, sp, #12
{
 8019620:	461c      	mov	r4, r3
	memset(&header, 0, 54);
 8019622:	f00c ffae 	bl	8026582 <memset>

	/* biPlanes. */
	header[26] = 1;

	/* biBitCount. */
	header[28] = (uint8_t)((bitsPP & 0XFF));
 8019626:	9b17      	ldr	r3, [sp, #92]	; 0x5c
	header[35] = (uint8_t)((imageSize >> 8) & 0xFF);
	header[36] = (uint8_t)((imageSize >> 16) & 0xFF);
	header[37] = (uint8_t)((imageSize >> 24) & 0xFF);

	/* biXPelsPerMeter. */
	header[38] = (uint8_t)((2835 & 0XFF));
 8019628:	f640 3213 	movw	r2, #2835	; 0xb13
	header[10] = (uint8_t)((dataOffset & 0XFF));
 801962c:	f8ad 4012 	strh.w	r4, [sp, #18]
	header[28] = (uint8_t)((bitsPP & 0XFF));
 8019630:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	header[26] = 1;
 8019634:	2101      	movs	r1, #1
	header[30] = (uint8_t)compression;
 8019636:	9b18      	ldr	r3, [sp, #96]	; 0x60
	header[49] = (uint8_t)((paletteColorUsed >> 24) & 0xFF);

	/* biClrImportant. */
	//header[50] = 0;
	/* Write header */
	res = f_write(fp, header, 14, &bytesWritten);
 8019638:	4628      	mov	r0, r5
	header[38] = (uint8_t)((2835 & 0XFF));
 801963a:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
	header[30] = (uint8_t)compression;
 801963e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	header[46] = (uint8_t)((paletteColorUsed & 0XFF));
 8019642:	9b19      	ldr	r3, [sp, #100]	; 0x64
	header[42] = (uint8_t)((2835 & 0XFF));
 8019644:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
	header[0] = 'B';
 8019648:	f644 5242 	movw	r2, #19778	; 0x4d42
	header[46] = (uint8_t)((paletteColorUsed & 0XFF));
 801964c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
	imageSize = lineSize * height;
 8019650:	9b16      	ldr	r3, [sp, #88]	; 0x58
	header[26] = 1;
 8019652:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
	res = f_write(fp, header, 14, &bytesWritten);
 8019656:	a902      	add	r1, sp, #8
	imageSize = lineSize * height;
 8019658:	fb06 f303 	mul.w	r3, r6, r3
	header[0] = 'B';
 801965c:	f8ad 2008 	strh.w	r2, [sp, #8]
	res = f_write(fp, header, 14, &bytesWritten);
 8019660:	220e      	movs	r2, #14
	fileSize = dataOffset + imageSize;
 8019662:	441c      	add	r4, r3
	header[34] = (uint8_t)((imageSize & 0XFF));
 8019664:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
	res = f_write(fp, header, 14, &bytesWritten);
 8019668:	ab01      	add	r3, sp, #4
	header[18] = (uint8_t)((width & 0XFF));
 801966a:	f8cd 701a 	str.w	r7, [sp, #26]
	header[2] = (uint8_t)((fileSize & 0XFF));
 801966e:	f8cd 400a 	str.w	r4, [sp, #10]
	header[14] = 40;
 8019672:	2428      	movs	r4, #40	; 0x28
	header[18] = (uint8_t)((width & 0XFF));
 8019674:	f8cd 601e 	str.w	r6, [sp, #30]
	header[14] = 40;
 8019678:	f88d 4016 	strb.w	r4, [sp, #22]
	res = f_write(fp, header, 14, &bytesWritten);
 801967c:	f7fe fca6 	bl	8017fcc <f_write>
	if (res != FR_OK || bytesWritten != 14)
 8019680:	b978      	cbnz	r0, 80196a2 <writeBmpHeader+0x92>
 8019682:	9b01      	ldr	r3, [sp, #4]
 8019684:	2b0e      	cmp	r3, #14
 8019686:	d10c      	bne.n	80196a2 <writeBmpHeader+0x92>
		return stm32ipl_err_WritingFile;

	res = f_write(fp, header + 14, 40, &bytesWritten);
 8019688:	ab01      	add	r3, sp, #4
 801968a:	4622      	mov	r2, r4
 801968c:	f10d 0116 	add.w	r1, sp, #22
 8019690:	4628      	mov	r0, r5
 8019692:	f7fe fc9b 	bl	8017fcc <f_write>
	if (res != FR_OK || bytesWritten != 40)
 8019696:	b920      	cbnz	r0, 80196a2 <writeBmpHeader+0x92>
 8019698:	9b01      	ldr	r3, [sp, #4]
 801969a:	42a3      	cmp	r3, r4
 801969c:	d101      	bne.n	80196a2 <writeBmpHeader+0x92>
		return stm32ipl_err_WritingFile;

	return stm32ipl_err_Ok;
}
 801969e:	b011      	add	sp, #68	; 0x44
 80196a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return stm32ipl_err_WritingFile;
 80196a2:	f06f 0008 	mvn.w	r0, #8
 80196a6:	e7fa      	b.n	801969e <writeBmpHeader+0x8e>

080196a8 <saveBmp>:
 * img		Image to be saved.
 * filename	Name of the output file.
 * return	stm32ipl_err_Ok on success, error otherwise.
 */
static stm32ipl_err_t saveBmp(const image_t *img, const char *filename)
{
 80196a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196ac:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
 80196b0:	4605      	mov	r5, r0
	UINT bytesWritten;

	width = img->w;
	height = img->h;

	if (f_open(&fp, (const TCHAR*)filename, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 80196b2:	220a      	movs	r2, #10
 80196b4:	a808      	add	r0, sp, #32
	height = img->h;
 80196b6:	e9d5 8600 	ldrd	r8, r6, [r5]
	if (f_open(&fp, (const TCHAR*)filename, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 80196ba:	f7fe f98b 	bl	80179d4 <f_open>
 80196be:	2800      	cmp	r0, #0
 80196c0:	f040 81a0 	bne.w	8019a04 <saveBmp+0x35c>
		return stm32ipl_err_OpeningFile;

	switch (img->bpp) {
 80196c4:	68ab      	ldr	r3, [r5, #8]
 80196c6:	2b04      	cmp	r3, #4
 80196c8:	f200 815d 	bhi.w	8019986 <saveBmp+0x2de>
 80196cc:	e8df f013 	tbh	[pc, r3, lsl #1]
 80196d0:	00b10047 	.word	0x00b10047
 80196d4:	015b00e8 	.word	0x015b00e8
 80196d8:	0005      	.short	0x0005

			break;
		}

		case IMAGE_BPP_RGB888: {
			uint32_t dataLen = width * 3;
 80196da:	eb08 0948 	add.w	r9, r8, r8, lsl #1
			lineSize = (((width * 24) + 31) / 32) * 4;
			padding = lineSize - dataLen;

			/* Header. */
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40, lineSize, 24, 0, 0)) {
 80196de:	2300      	movs	r3, #0
 80196e0:	4641      	mov	r1, r8
 80196e2:	4632      	mov	r2, r6
			lineSize = (((width * 24) + 31) / 32) * 4;
 80196e4:	ea4f 07c9 	mov.w	r7, r9, lsl #3
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40, lineSize, 24, 0, 0)) {
 80196e8:	a808      	add	r0, sp, #32
			lineSize = (((width * 24) + 31) / 32) * 4;
 80196ea:	371f      	adds	r7, #31
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40, lineSize, 24, 0, 0)) {
 80196ec:	e9cd 3302 	strd	r3, r3, [sp, #8]
			lineSize = (((width * 24) + 31) / 32) * 4;
 80196f0:	097f      	lsrs	r7, r7, #5
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40, lineSize, 24, 0, 0)) {
 80196f2:	2318      	movs	r3, #24
 80196f4:	9301      	str	r3, [sp, #4]
			lineSize = (((width * 24) + 31) / 32) * 4;
 80196f6:	00bb      	lsls	r3, r7, #2
			padding = lineSize - dataLen;
 80196f8:	ebc9 0787 	rsb	r7, r9, r7, lsl #2
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40, lineSize, 24, 0, 0)) {
 80196fc:	9300      	str	r3, [sp, #0]
 80196fe:	2336      	movs	r3, #54	; 0x36
 8019700:	f7ff ff86 	bl	8019610 <writeBmpHeader>
 8019704:	bb10      	cbnz	r0, 801974c <saveBmp+0xa4>
				f_close(&fp);
				return stm32ipl_err_WritingFile;
			}

			for (int32_t i = height - 1; i >= 0; i--) {
 8019706:	3e01      	subs	r6, #1
 8019708:	f100 808e 	bmi.w	8019828 <saveBmp+0x180>
 801970c:	fb09 f806 	mul.w	r8, r9, r6
 8019710:	f10d 0a18 	add.w	sl, sp, #24
				uint8_t *data = img->data + i * dataLen;
 8019714:	68e9      	ldr	r1, [r5, #12]

				/* Image data. */
				res = f_write(&fp, data, dataLen, &bytesWritten);
 8019716:	4653      	mov	r3, sl
 8019718:	464a      	mov	r2, r9
 801971a:	a808      	add	r0, sp, #32
 801971c:	4441      	add	r1, r8
 801971e:	f7fe fc55 	bl	8017fcc <f_write>
				if (res != FR_OK || bytesWritten != dataLen) {
 8019722:	b998      	cbnz	r0, 801974c <saveBmp+0xa4>
 8019724:	f8da 3000 	ldr.w	r3, [sl]
 8019728:	454b      	cmp	r3, r9
 801972a:	d10f      	bne.n	801974c <saveBmp+0xa4>
					f_close(&fp);
					return stm32ipl_err_WritingFile;
				}

				/* Padding. */
				for (uint32_t j = 0; j < padding; j++) {
 801972c:	2f00      	cmp	r7, #0
 801972e:	f000 8133 	beq.w	8019998 <saveBmp+0x2f0>
 8019732:	4604      	mov	r4, r0
 8019734:	e002      	b.n	801973c <saveBmp+0x94>
 8019736:	42a7      	cmp	r7, r4
 8019738:	f000 812e 	beq.w	8019998 <saveBmp+0x2f0>
					if (1 != f_putc(0, &fp)) {
 801973c:	a908      	add	r1, sp, #32
 801973e:	2000      	movs	r0, #0
 8019740:	f7ff fa4e 	bl	8018be0 <f_putc>
 8019744:	2801      	cmp	r0, #1
				for (uint32_t j = 0; j < padding; j++) {
 8019746:	f104 0401 	add.w	r4, r4, #1
					if (1 != f_putc(0, &fp)) {
 801974a:	d0f4      	beq.n	8019736 <saveBmp+0x8e>
				f_close(&fp);
 801974c:	a808      	add	r0, sp, #32
 801974e:	f7fe fd95 	bl	801827c <f_close>
				return stm32ipl_err_WritingFile;
 8019752:	f06f 0008 	mvn.w	r0, #8
	};

	f_close(&fp);

	return stm32ipl_err_Ok;
}
 8019756:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
 801975a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			lineSize = (((width) + 31) / 32) * 4;
 801975e:	f108 031f 	add.w	r3, r8, #31
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 8, lineSize, 1, 0, 2)) {
 8019762:	4641      	mov	r1, r8
 8019764:	4632      	mov	r2, r6
 8019766:	a808      	add	r0, sp, #32
			lineSize = (((width) + 31) / 32) * 4;
 8019768:	ea4f 1853 	mov.w	r8, r3, lsr #5
			uint32_t palette = 0;
 801976c:	2300      	movs	r3, #0
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 8, lineSize, 1, 0, 2)) {
 801976e:	9302      	str	r3, [sp, #8]
			lineSize = (((width) + 31) / 32) * 4;
 8019770:	ea4f 0888 	mov.w	r8, r8, lsl #2
			uint32_t palette = 0;
 8019774:	9307      	str	r3, [sp, #28]
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 8, lineSize, 1, 0, 2)) {
 8019776:	2302      	movs	r3, #2
 8019778:	f8cd 8000 	str.w	r8, [sp]
 801977c:	9303      	str	r3, [sp, #12]
 801977e:	2301      	movs	r3, #1
 8019780:	9301      	str	r3, [sp, #4]
 8019782:	233e      	movs	r3, #62	; 0x3e
 8019784:	f7ff ff44 	bl	8019610 <writeBmpHeader>
 8019788:	2800      	cmp	r0, #0
 801978a:	d1df      	bne.n	801974c <saveBmp+0xa4>
			res = f_write(&fp, &palette, sizeof(palette), &bytesWritten);
 801978c:	f10d 0a18 	add.w	sl, sp, #24
 8019790:	2204      	movs	r2, #4
 8019792:	a907      	add	r1, sp, #28
 8019794:	a808      	add	r0, sp, #32
 8019796:	4653      	mov	r3, sl
 8019798:	f7fe fc18 	bl	8017fcc <f_write>
			if (res != FR_OK || bytesWritten != sizeof(palette)) {
 801979c:	2800      	cmp	r0, #0
 801979e:	d1d5      	bne.n	801974c <saveBmp+0xa4>
 80197a0:	f8da 2000 	ldr.w	r2, [sl]
 80197a4:	2a04      	cmp	r2, #4
 80197a6:	d1d1      	bne.n	801974c <saveBmp+0xa4>
			palette = 0xFFFFFF;
 80197a8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
			res = f_write(&fp, &palette, sizeof(palette), &bytesWritten);
 80197ac:	a907      	add	r1, sp, #28
 80197ae:	a808      	add	r0, sp, #32
			palette = 0xFFFFFF;
 80197b0:	9307      	str	r3, [sp, #28]
			res = f_write(&fp, &palette, sizeof(palette), &bytesWritten);
 80197b2:	4653      	mov	r3, sl
 80197b4:	f7fe fc0a 	bl	8017fcc <f_write>
			if (res != FR_OK || bytesWritten != sizeof(palette)) {
 80197b8:	2800      	cmp	r0, #0
 80197ba:	d1c7      	bne.n	801974c <saveBmp+0xa4>
 80197bc:	f8da 3000 	ldr.w	r3, [sl]
 80197c0:	2b04      	cmp	r3, #4
 80197c2:	d1c3      	bne.n	801974c <saveBmp+0xa4>
			for (int32_t i = height - 1; i >= 0; i--) {
 80197c4:	3e01      	subs	r6, #1
 80197c6:	d42f      	bmi.n	8019828 <saveBmp+0x180>
 80197c8:	fb08 f906 	mul.w	r9, r8, r6
				uint8_t *srcData = img->data + offset;
 80197cc:	68ec      	ldr	r4, [r5, #12]
				for (uint32_t j = 0; j < lineSize; j++) {
 80197ce:	f1b8 0f00 	cmp.w	r8, #0
 80197d2:	d024      	beq.n	801981e <saveBmp+0x176>
 80197d4:	eb04 0708 	add.w	r7, r4, r8
 80197d8:	444c      	add	r4, r9
 80197da:	444f      	add	r7, r9
					uint8_t dstData = reverse8(*(srcData + j));
 80197dc:	f814 2b01 	ldrb.w	r2, [r4], #1
	int size = sizeof(val) * CHAR_BIT - 1;
 80197e0:	2107      	movs	r1, #7
	for (val >>= 1; val; val >>= 1) {
 80197e2:	0853      	lsrs	r3, r2, #1
 80197e4:	d009      	beq.n	80197fa <saveBmp+0x152>
		rev <<= 1;
 80197e6:	0052      	lsls	r2, r2, #1
		rev |= val & 1;
 80197e8:	f003 0001 	and.w	r0, r3, #1
	for (val >>= 1; val; val >>= 1) {
 80197ec:	085b      	lsrs	r3, r3, #1
		size--;
 80197ee:	f101 31ff 	add.w	r1, r1, #4294967295
		rev <<= 1;
 80197f2:	b2d2      	uxtb	r2, r2
		rev |= val & 1;
 80197f4:	ea42 0200 	orr.w	r2, r2, r0
	for (val >>= 1; val; val >>= 1) {
 80197f8:	d1f5      	bne.n	80197e6 <saveBmp+0x13e>
	rev <<= size;
 80197fa:	408a      	lsls	r2, r1
					res = f_write(&fp, &dstData, 1, &bytesWritten);
 80197fc:	4653      	mov	r3, sl
 80197fe:	f10d 0117 	add.w	r1, sp, #23
 8019802:	a808      	add	r0, sp, #32
	rev <<= size;
 8019804:	f88d 2017 	strb.w	r2, [sp, #23]
					res = f_write(&fp, &dstData, 1, &bytesWritten);
 8019808:	2201      	movs	r2, #1
 801980a:	f7fe fbdf 	bl	8017fcc <f_write>
					if (res != FR_OK || bytesWritten != 1) {
 801980e:	2800      	cmp	r0, #0
 8019810:	d19c      	bne.n	801974c <saveBmp+0xa4>
 8019812:	f8da 3000 	ldr.w	r3, [sl]
 8019816:	2b01      	cmp	r3, #1
 8019818:	d198      	bne.n	801974c <saveBmp+0xa4>
				for (uint32_t j = 0; j < lineSize; j++) {
 801981a:	42bc      	cmp	r4, r7
 801981c:	d1de      	bne.n	80197dc <saveBmp+0x134>
			for (int32_t i = height - 1; i >= 0; i--) {
 801981e:	3e01      	subs	r6, #1
 8019820:	eba9 0908 	sub.w	r9, r9, r8
 8019824:	1c77      	adds	r7, r6, #1
 8019826:	d1d1      	bne.n	80197cc <saveBmp+0x124>
	f_close(&fp);
 8019828:	a808      	add	r0, sp, #32
 801982a:	f7fe fd27 	bl	801827c <f_close>
	return stm32ipl_err_Ok;
 801982e:	2000      	movs	r0, #0
 8019830:	e791      	b.n	8019756 <saveBmp+0xae>
			lineSize = (((width * 8) + 31) / 32) * 4;
 8019832:	ea4f 09c8 	mov.w	r9, r8, lsl #3
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 1024, lineSize, 8, 0, 256)) {
 8019836:	2300      	movs	r3, #0
 8019838:	f44f 7480 	mov.w	r4, #256	; 0x100
 801983c:	4632      	mov	r2, r6
			lineSize = (((width * 8) + 31) / 32) * 4;
 801983e:	f109 091f 	add.w	r9, r9, #31
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 1024, lineSize, 8, 0, 256)) {
 8019842:	4641      	mov	r1, r8
 8019844:	a808      	add	r0, sp, #32
			lineSize = (((width * 8) + 31) / 32) * 4;
 8019846:	ea4f 1959 	mov.w	r9, r9, lsr #5
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 1024, lineSize, 8, 0, 256)) {
 801984a:	e9cd 3402 	strd	r3, r4, [sp, #8]
			lineSize = (((width * 8) + 31) / 32) * 4;
 801984e:	ea4f 0989 	mov.w	r9, r9, lsl #2
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 1024, lineSize, 8, 0, 256)) {
 8019852:	2308      	movs	r3, #8
 8019854:	f8cd 9000 	str.w	r9, [sp]
 8019858:	9301      	str	r3, [sp, #4]
 801985a:	f240 4336 	movw	r3, #1078	; 0x436
 801985e:	f7ff fed7 	bl	8019610 <writeBmpHeader>
 8019862:	2800      	cmp	r0, #0
 8019864:	f47f af72 	bne.w	801974c <saveBmp+0xa4>
			for (uint32_t i = 0; i < 256; i++) {
 8019868:	4604      	mov	r4, r0
 801986a:	f10d 0a18 	add.w	sl, sp, #24
 801986e:	e008      	b.n	8019882 <saveBmp+0x1da>
				if (res != FR_OK || bytesWritten != 4) {
 8019870:	f8da 3000 	ldr.w	r3, [sl]
 8019874:	2b04      	cmp	r3, #4
 8019876:	f47f af69 	bne.w	801974c <saveBmp+0xa4>
			for (uint32_t i = 0; i < 256; i++) {
 801987a:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 801987e:	f000 8097 	beq.w	80199b0 <saveBmp+0x308>
				uint32_t value = (i << 16) | (i << 8) | i;
 8019882:	0427      	lsls	r7, r4, #16
				res = f_write(&fp, &value, sizeof(value), &bytesWritten);
 8019884:	4653      	mov	r3, sl
 8019886:	2204      	movs	r2, #4
 8019888:	a907      	add	r1, sp, #28
				uint32_t value = (i << 16) | (i << 8) | i;
 801988a:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
				res = f_write(&fp, &value, sizeof(value), &bytesWritten);
 801988e:	a808      	add	r0, sp, #32
				uint32_t value = (i << 16) | (i << 8) | i;
 8019890:	4327      	orrs	r7, r4
			for (uint32_t i = 0; i < 256; i++) {
 8019892:	3401      	adds	r4, #1
				uint32_t value = (i << 16) | (i << 8) | i;
 8019894:	9707      	str	r7, [sp, #28]
				res = f_write(&fp, &value, sizeof(value), &bytesWritten);
 8019896:	f7fe fb99 	bl	8017fcc <f_write>
				if (res != FR_OK || bytesWritten != 4) {
 801989a:	2800      	cmp	r0, #0
 801989c:	d0e8      	beq.n	8019870 <saveBmp+0x1c8>
 801989e:	e755      	b.n	801974c <saveBmp+0xa4>
			lineSize = (((width * 16) + 31) / 32) * 4;
 80198a0:	ea4f 1708 	mov.w	r7, r8, lsl #4
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40 + 12, lineSize, 16, BI_BITFIELDS, 0)) {
 80198a4:	2303      	movs	r3, #3
 80198a6:	2100      	movs	r1, #0
 80198a8:	4632      	mov	r2, r6
			lineSize = (((width * 16) + 31) / 32) * 4;
 80198aa:	371f      	adds	r7, #31
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40 + 12, lineSize, 16, BI_BITFIELDS, 0)) {
 80198ac:	a808      	add	r0, sp, #32
			uint32_t dataLen = width << 1;
 80198ae:	ea4f 0948 	mov.w	r9, r8, lsl #1
			lineSize = (((width * 16) + 31) / 32) * 4;
 80198b2:	097f      	lsrs	r7, r7, #5
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40 + 12, lineSize, 16, BI_BITFIELDS, 0)) {
 80198b4:	e9cd 3102 	strd	r3, r1, [sp, #8]
			lineSize = (((width * 16) + 31) / 32) * 4;
 80198b8:	00bf      	lsls	r7, r7, #2
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40 + 12, lineSize, 16, BI_BITFIELDS, 0)) {
 80198ba:	2310      	movs	r3, #16
 80198bc:	4641      	mov	r1, r8
 80198be:	9700      	str	r7, [sp, #0]
			padding = lineSize - dataLen;
 80198c0:	eba7 0748 	sub.w	r7, r7, r8, lsl #1
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40 + 12, lineSize, 16, BI_BITFIELDS, 0)) {
 80198c4:	9301      	str	r3, [sp, #4]
 80198c6:	2342      	movs	r3, #66	; 0x42
 80198c8:	f7ff fea2 	bl	8019610 <writeBmpHeader>
 80198cc:	2800      	cmp	r0, #0
 80198ce:	f47f af3d 	bne.w	801974c <saveBmp+0xa4>
			mask = 0xF800;
 80198d2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
			res = f_write(&fp, &mask, 4, &bytesWritten);
 80198d6:	f10d 0a18 	add.w	sl, sp, #24
 80198da:	2204      	movs	r2, #4
 80198dc:	a907      	add	r1, sp, #28
			mask = 0xF800;
 80198de:	9307      	str	r3, [sp, #28]
			res = f_write(&fp, &mask, 4, &bytesWritten);
 80198e0:	a808      	add	r0, sp, #32
 80198e2:	4653      	mov	r3, sl
 80198e4:	f7fe fb72 	bl	8017fcc <f_write>
			if (res != FR_OK || bytesWritten != 4) {
 80198e8:	2800      	cmp	r0, #0
 80198ea:	f47f af2f 	bne.w	801974c <saveBmp+0xa4>
 80198ee:	f8da 2000 	ldr.w	r2, [sl]
 80198f2:	2a04      	cmp	r2, #4
 80198f4:	f47f af2a 	bne.w	801974c <saveBmp+0xa4>
			mask = 0x7E0;
 80198f8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
			res = f_write(&fp, &mask, 4, &bytesWritten);
 80198fc:	a907      	add	r1, sp, #28
 80198fe:	a808      	add	r0, sp, #32
			mask = 0x7E0;
 8019900:	9307      	str	r3, [sp, #28]
			res = f_write(&fp, &mask, 4, &bytesWritten);
 8019902:	4653      	mov	r3, sl
 8019904:	f7fe fb62 	bl	8017fcc <f_write>
			if (res != FR_OK || bytesWritten != 4) {
 8019908:	2800      	cmp	r0, #0
 801990a:	f47f af1f 	bne.w	801974c <saveBmp+0xa4>
 801990e:	f8da 2000 	ldr.w	r2, [sl]
 8019912:	2a04      	cmp	r2, #4
 8019914:	f47f af1a 	bne.w	801974c <saveBmp+0xa4>
			mask = 0x1F;
 8019918:	231f      	movs	r3, #31
			res = f_write(&fp, &mask, 4, &bytesWritten);
 801991a:	a907      	add	r1, sp, #28
 801991c:	a808      	add	r0, sp, #32
			mask = 0x1F;
 801991e:	9307      	str	r3, [sp, #28]
			res = f_write(&fp, &mask, 4, &bytesWritten);
 8019920:	4653      	mov	r3, sl
 8019922:	f7fe fb53 	bl	8017fcc <f_write>
			if (res != FR_OK || bytesWritten != 4) {
 8019926:	2800      	cmp	r0, #0
 8019928:	f47f af10 	bne.w	801974c <saveBmp+0xa4>
 801992c:	f8da 3000 	ldr.w	r3, [sl]
 8019930:	2b04      	cmp	r3, #4
 8019932:	f47f af0b 	bne.w	801974c <saveBmp+0xa4>
			for (int32_t i = height - 1; i >= 0; i--) {
 8019936:	3e01      	subs	r6, #1
 8019938:	f53f af76 	bmi.w	8019828 <saveBmp+0x180>
 801993c:	ebc8 78c8 	rsb	r8, r8, r8, lsl #31
 8019940:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 8019944:	f1cb 0800 	rsb	r8, fp, #0
 8019948:	fb06 f808 	mul.w	r8, r6, r8
				res = f_write(&fp, ((uint16_t*)img->data) + offset, dataLen, &bytesWritten);
 801994c:	68e9      	ldr	r1, [r5, #12]
 801994e:	4653      	mov	r3, sl
 8019950:	464a      	mov	r2, r9
 8019952:	a808      	add	r0, sp, #32
 8019954:	4441      	add	r1, r8
 8019956:	f7fe fb39 	bl	8017fcc <f_write>
				if (res != FR_OK || bytesWritten != dataLen) {
 801995a:	2800      	cmp	r0, #0
 801995c:	f47f aef6 	bne.w	801974c <saveBmp+0xa4>
 8019960:	f8da 3000 	ldr.w	r3, [sl]
 8019964:	454b      	cmp	r3, r9
 8019966:	f47f aef1 	bne.w	801974c <saveBmp+0xa4>
				for (uint32_t j = 0; j < padding; j++) {
 801996a:	b1e7      	cbz	r7, 80199a6 <saveBmp+0x2fe>
 801996c:	4604      	mov	r4, r0
 801996e:	e001      	b.n	8019974 <saveBmp+0x2cc>
 8019970:	42a7      	cmp	r7, r4
 8019972:	d018      	beq.n	80199a6 <saveBmp+0x2fe>
					if (1 != f_putc(0, &fp)) {
 8019974:	a908      	add	r1, sp, #32
 8019976:	2000      	movs	r0, #0
 8019978:	f7ff f932 	bl	8018be0 <f_putc>
 801997c:	2801      	cmp	r0, #1
				for (uint32_t j = 0; j < padding; j++) {
 801997e:	f104 0401 	add.w	r4, r4, #1
					if (1 != f_putc(0, &fp)) {
 8019982:	d0f5      	beq.n	8019970 <saveBmp+0x2c8>
 8019984:	e6e2      	b.n	801974c <saveBmp+0xa4>
			f_close(&fp);
 8019986:	a808      	add	r0, sp, #32
 8019988:	f7fe fc78 	bl	801827c <f_close>
			return stm32ipl_err_InvalidParameter;
 801998c:	f06f 0001 	mvn.w	r0, #1
}
 8019990:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
 8019994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for (int32_t i = height - 1; i >= 0; i--) {
 8019998:	3e01      	subs	r6, #1
 801999a:	eba8 0809 	sub.w	r8, r8, r9
 801999e:	1c73      	adds	r3, r6, #1
 80199a0:	f47f aeb8 	bne.w	8019714 <saveBmp+0x6c>
 80199a4:	e740      	b.n	8019828 <saveBmp+0x180>
			for (int32_t i = height - 1; i >= 0; i--) {
 80199a6:	3e01      	subs	r6, #1
 80199a8:	44d8      	add	r8, fp
 80199aa:	1c72      	adds	r2, r6, #1
 80199ac:	d1ce      	bne.n	801994c <saveBmp+0x2a4>
 80199ae:	e73b      	b.n	8019828 <saveBmp+0x180>
			for (int32_t i = height - 1; i >= 0; i--) {
 80199b0:	3e01      	subs	r6, #1
 80199b2:	f53f af39 	bmi.w	8019828 <saveBmp+0x180>
			padding = lineSize - width;
 80199b6:	eba9 0708 	sub.w	r7, r9, r8
 80199ba:	fb08 f906 	mul.w	r9, r8, r6
				res = f_write(&fp, img->data + offset, width, &bytesWritten);
 80199be:	68e9      	ldr	r1, [r5, #12]
 80199c0:	4653      	mov	r3, sl
 80199c2:	4642      	mov	r2, r8
 80199c4:	a808      	add	r0, sp, #32
 80199c6:	4449      	add	r1, r9
 80199c8:	f7fe fb00 	bl	8017fcc <f_write>
				if (res != FR_OK || bytesWritten != width) {
 80199cc:	2800      	cmp	r0, #0
 80199ce:	f47f aebd 	bne.w	801974c <saveBmp+0xa4>
 80199d2:	f8da 3000 	ldr.w	r3, [sl]
 80199d6:	4543      	cmp	r3, r8
 80199d8:	f47f aeb8 	bne.w	801974c <saveBmp+0xa4>
				for (uint32_t j = 0; j < padding; j++) {
 80199dc:	b167      	cbz	r7, 80199f8 <saveBmp+0x350>
 80199de:	4604      	mov	r4, r0
 80199e0:	e001      	b.n	80199e6 <saveBmp+0x33e>
 80199e2:	42a7      	cmp	r7, r4
 80199e4:	d008      	beq.n	80199f8 <saveBmp+0x350>
					if (1 != f_putc(0, &fp)) {
 80199e6:	a908      	add	r1, sp, #32
 80199e8:	2000      	movs	r0, #0
 80199ea:	f7ff f8f9 	bl	8018be0 <f_putc>
 80199ee:	2801      	cmp	r0, #1
				for (uint32_t j = 0; j < padding; j++) {
 80199f0:	f104 0401 	add.w	r4, r4, #1
					if (1 != f_putc(0, &fp)) {
 80199f4:	d0f5      	beq.n	80199e2 <saveBmp+0x33a>
 80199f6:	e6a9      	b.n	801974c <saveBmp+0xa4>
			for (int32_t i = height - 1; i >= 0; i--) {
 80199f8:	3e01      	subs	r6, #1
 80199fa:	eba9 0908 	sub.w	r9, r9, r8
 80199fe:	1c70      	adds	r0, r6, #1
 8019a00:	d1dd      	bne.n	80199be <saveBmp+0x316>
 8019a02:	e711      	b.n	8019828 <saveBmp+0x180>
		return stm32ipl_err_OpeningFile;
 8019a04:	f06f 0005 	mvn.w	r0, #5
 8019a08:	e6a5      	b.n	8019756 <saveBmp+0xae>
 8019a0a:	bf00      	nop

08019a0c <savePnm>:
 * filename	Name of the output file.
 * format	Format of the PNM file (6 if the input image is RGB565 or RGB888, 5 if it's Grayscale).
 * return	stm32ipl_err_Ok on success, error otherwise.
 */
static stm32ipl_err_t savePnm(const image_t *img, const char *filename, uint8_t format)
{
 8019a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char text[64];
	UINT bytesWritten;
	uint32_t offset;

	width = img->w;
	height = img->h;
 8019a10:	e9d0 4900 	ldrd	r4, r9, [r0]
{
 8019a14:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
 8019a18:	460d      	mov	r5, r1
 8019a1a:	4613      	mov	r3, r2

	/* Write header. */
	size = snprintf(text, sizeof(text), "P%d\n# Created by STM32IPL\n%ld %ld\n255\n", format, width, height);
 8019a1c:	2140      	movs	r1, #64	; 0x40
 8019a1e:	4a56      	ldr	r2, [pc, #344]	; (8019b78 <savePnm+0x16c>)
{
 8019a20:	4606      	mov	r6, r0
	size = snprintf(text, sizeof(text), "P%d\n# Created by STM32IPL\n%ld %ld\n255\n", format, width, height);
 8019a22:	a804      	add	r0, sp, #16
 8019a24:	e9cd 4900 	strd	r4, r9, [sp]
 8019a28:	f00c fcfa 	bl	8026420 <sniprintf>

	if (f_open(&fp, (const TCHAR*)filename, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 8019a2c:	4629      	mov	r1, r5
 8019a2e:	220a      	movs	r2, #10
	size = snprintf(text, sizeof(text), "P%d\n# Created by STM32IPL\n%ld %ld\n255\n", format, width, height);
 8019a30:	4605      	mov	r5, r0
	if (f_open(&fp, (const TCHAR*)filename, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 8019a32:	a814      	add	r0, sp, #80	; 0x50
 8019a34:	f7fd ffce 	bl	80179d4 <f_open>
 8019a38:	2800      	cmp	r0, #0
 8019a3a:	f040 8099 	bne.w	8019b70 <savePnm+0x164>
		return stm32ipl_err_OpeningFile;

	res = f_write(&fp, text, size, &bytesWritten);
 8019a3e:	a904      	add	r1, sp, #16
 8019a40:	462a      	mov	r2, r5
 8019a42:	a814      	add	r0, sp, #80	; 0x50
 8019a44:	ab03      	add	r3, sp, #12
 8019a46:	f7fe fac1 	bl	8017fcc <f_write>
	if (res != FR_OK || bytesWritten != size) {
 8019a4a:	2800      	cmp	r0, #0
 8019a4c:	d147      	bne.n	8019ade <savePnm+0xd2>
 8019a4e:	9b03      	ldr	r3, [sp, #12]
 8019a50:	42ab      	cmp	r3, r5
 8019a52:	d144      	bne.n	8019ade <savePnm+0xd2>
		f_close(&fp);
		return stm32ipl_err_WritingFile;
	}

	switch (img->bpp) {
 8019a54:	68b3      	ldr	r3, [r6, #8]
 8019a56:	2b02      	cmp	r3, #2
 8019a58:	d00c      	beq.n	8019a74 <savePnm+0x68>
 8019a5a:	2b04      	cmp	r3, #4
 8019a5c:	d05d      	beq.n	8019b1a <savePnm+0x10e>
 8019a5e:	2b01      	cmp	r3, #1
 8019a60:	d046      	beq.n	8019af0 <savePnm+0xe4>

			break;
		}

		default: {
			f_close(&fp);
 8019a62:	a814      	add	r0, sp, #80	; 0x50
 8019a64:	f7fe fc0a 	bl	801827c <f_close>
			return stm32ipl_err_UnsupportedFormat;
 8019a68:	f06f 0004 	mvn.w	r0, #4
	}

	f_close(&fp);

	return stm32ipl_err_Ok;
}
 8019a6c:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
 8019a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for (uint32_t i = 0; i < height; i++) {
 8019a74:	f1b9 0f00 	cmp.w	r9, #0
 8019a78:	d047      	beq.n	8019b0a <savePnm+0xfe>
				offset = i * width;
 8019a7a:	4680      	mov	r8, r0
			for (uint32_t i = 0; i < height; i++) {
 8019a7c:	4682      	mov	sl, r0
				for (uint32_t j = 0; j < width; j++) {
 8019a7e:	2c00      	cmp	r4, #0
 8019a80:	d070      	beq.n	8019b64 <savePnm+0x158>
 8019a82:	ea4f 0548 	mov.w	r5, r8, lsl #1
 8019a86:	2700      	movs	r7, #0
 8019a88:	e004      	b.n	8019a94 <savePnm+0x88>
					if (res != FR_OK || bytesWritten != 3) {
 8019a8a:	9b03      	ldr	r3, [sp, #12]
 8019a8c:	2b03      	cmp	r3, #3
 8019a8e:	d126      	bne.n	8019ade <savePnm+0xd2>
				for (uint32_t j = 0; j < width; j++) {
 8019a90:	42bc      	cmp	r4, r7
 8019a92:	d067      	beq.n	8019b64 <savePnm+0x158>
					uint16_t rgb565 = *(((uint16_t*)img->data) + offset + j);
 8019a94:	68f1      	ldr	r1, [r6, #12]
					res = f_write(&fp, &rgb888, 3, &bytesWritten);
 8019a96:	2203      	movs	r2, #3
 8019a98:	ab03      	add	r3, sp, #12
 8019a9a:	a814      	add	r0, sp, #80	; 0x50
					uint16_t rgb565 = *(((uint16_t*)img->data) + offset + j);
 8019a9c:	f831 c005 	ldrh.w	ip, [r1, r5]
					res = f_write(&fp, &rgb888, 3, &bytesWritten);
 8019aa0:	a902      	add	r1, sp, #8
				for (uint32_t j = 0; j < width; j++) {
 8019aa2:	3701      	adds	r7, #1
 8019aa4:	3502      	adds	r5, #2
					rgb888.r = COLOR_RGB565_TO_B8(rgb565);
 8019aa6:	f3cc 0b82 	ubfx	fp, ip, #2, #3
					rgb888.g = COLOR_RGB565_TO_G8(rgb565);
 8019aaa:	fa2c fe02 	lsr.w	lr, ip, r2
					rgb888.r = COLOR_RGB565_TO_B8(rgb565);
 8019aae:	ea4b 0bcc 	orr.w	fp, fp, ip, lsl #3
					rgb888.b = COLOR_RGB565_TO_R8(rgb565);
 8019ab2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
					rgb888.r = COLOR_RGB565_TO_B8(rgb565);
 8019ab6:	f88d b00a 	strb.w	fp, [sp, #10]
					rgb888.g = COLOR_RGB565_TO_G8(rgb565);
 8019aba:	f00e 0bfc 	and.w	fp, lr, #252	; 0xfc
 8019abe:	f3ce 1e81 	ubfx	lr, lr, #6, #2
 8019ac2:	ea4b 0b0e 	orr.w	fp, fp, lr
					rgb888.b = COLOR_RGB565_TO_R8(rgb565);
 8019ac6:	f00c 0ef8 	and.w	lr, ip, #248	; 0xf8
 8019aca:	ea4e 1c5c 	orr.w	ip, lr, ip, lsr #5
					rgb888.g = COLOR_RGB565_TO_G8(rgb565);
 8019ace:	f88d b009 	strb.w	fp, [sp, #9]
					rgb888.b = COLOR_RGB565_TO_R8(rgb565);
 8019ad2:	f88d c008 	strb.w	ip, [sp, #8]
					res = f_write(&fp, &rgb888, 3, &bytesWritten);
 8019ad6:	f7fe fa79 	bl	8017fcc <f_write>
					if (res != FR_OK || bytesWritten != 3) {
 8019ada:	2800      	cmp	r0, #0
 8019adc:	d0d5      	beq.n	8019a8a <savePnm+0x7e>
					f_close(&fp);
 8019ade:	a814      	add	r0, sp, #80	; 0x50
 8019ae0:	f7fe fbcc 	bl	801827c <f_close>
					return stm32ipl_err_WritingFile;
 8019ae4:	f06f 0008 	mvn.w	r0, #8
}
 8019ae8:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
 8019aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			size = width * height;
 8019af0:	fb09 f404 	mul.w	r4, r9, r4
			res = f_write(&fp, img->data, size, &bytesWritten);
 8019af4:	ab03      	add	r3, sp, #12
 8019af6:	68f1      	ldr	r1, [r6, #12]
 8019af8:	a814      	add	r0, sp, #80	; 0x50
 8019afa:	4622      	mov	r2, r4
 8019afc:	f7fe fa66 	bl	8017fcc <f_write>
			if (res != FR_OK || bytesWritten != size) {
 8019b00:	2800      	cmp	r0, #0
 8019b02:	d1ec      	bne.n	8019ade <savePnm+0xd2>
 8019b04:	9b03      	ldr	r3, [sp, #12]
 8019b06:	42a3      	cmp	r3, r4
 8019b08:	d1e9      	bne.n	8019ade <savePnm+0xd2>
	f_close(&fp);
 8019b0a:	a814      	add	r0, sp, #80	; 0x50
 8019b0c:	f7fe fbb6 	bl	801827c <f_close>
	return stm32ipl_err_Ok;
 8019b10:	2000      	movs	r0, #0
}
 8019b12:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
 8019b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			size = width * height;
 8019b1a:	fb09 f404 	mul.w	r4, r9, r4
			uint8_t *data = img->data;
 8019b1e:	68f5      	ldr	r5, [r6, #12]
			for (uint32_t i = 0; i < size; i++) {
 8019b20:	2c00      	cmp	r4, #0
 8019b22:	d0f2      	beq.n	8019b0a <savePnm+0xfe>
 8019b24:	3503      	adds	r5, #3
 8019b26:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019b2a:	442c      	add	r4, r5
 8019b2c:	e004      	b.n	8019b38 <savePnm+0x12c>
				if (res != FR_OK || bytesWritten != 3) {
 8019b2e:	9b03      	ldr	r3, [sp, #12]
 8019b30:	2b03      	cmp	r3, #3
 8019b32:	d1d4      	bne.n	8019ade <savePnm+0xd2>
			for (uint32_t i = 0; i < size; i++) {
 8019b34:	42ac      	cmp	r4, r5
 8019b36:	d0e8      	beq.n	8019b0a <savePnm+0xfe>
				rgb888.r = *data++;
 8019b38:	f815 1c03 	ldrb.w	r1, [r5, #-3]
			for (uint32_t i = 0; i < size; i++) {
 8019b3c:	3503      	adds	r5, #3
				res = f_write(&fp, &rgb888, 3, &bytesWritten);
 8019b3e:	ab03      	add	r3, sp, #12
 8019b40:	2203      	movs	r2, #3
				rgb888.r = *data++;
 8019b42:	f88d 100a 	strb.w	r1, [sp, #10]
				res = f_write(&fp, &rgb888, 3, &bytesWritten);
 8019b46:	a814      	add	r0, sp, #80	; 0x50
				rgb888.g = *data++;
 8019b48:	f815 6c05 	ldrb.w	r6, [r5, #-5]
				res = f_write(&fp, &rgb888, 3, &bytesWritten);
 8019b4c:	a902      	add	r1, sp, #8
				rgb888.g = *data++;
 8019b4e:	f88d 6009 	strb.w	r6, [sp, #9]
				rgb888.b = *data++;
 8019b52:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8019b56:	f88d 6008 	strb.w	r6, [sp, #8]
				res = f_write(&fp, &rgb888, 3, &bytesWritten);
 8019b5a:	f7fe fa37 	bl	8017fcc <f_write>
				if (res != FR_OK || bytesWritten != 3) {
 8019b5e:	2800      	cmp	r0, #0
 8019b60:	d0e5      	beq.n	8019b2e <savePnm+0x122>
 8019b62:	e7bc      	b.n	8019ade <savePnm+0xd2>
			for (uint32_t i = 0; i < height; i++) {
 8019b64:	f10a 0a01 	add.w	sl, sl, #1
 8019b68:	44a0      	add	r8, r4
 8019b6a:	45ca      	cmp	sl, r9
 8019b6c:	d187      	bne.n	8019a7e <savePnm+0x72>
 8019b6e:	e7cc      	b.n	8019b0a <savePnm+0xfe>
		return stm32ipl_err_OpeningFile;
 8019b70:	f06f 0005 	mvn.w	r0, #5
 8019b74:	e77a      	b.n	8019a6c <savePnm+0x60>
 8019b76:	bf00      	nop
 8019b78:	080997d4 	.word	0x080997d4

08019b7c <STM32Ipl_ReadImage>:
{
 8019b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t bytesRead = 0;
 8019b80:	2200      	movs	r2, #0
{
 8019b82:	ed2d 8b02 	vpush	{d8}
 8019b86:	f2ad 6ddc 	subw	sp, sp, #1756	; 0x6dc
	uint32_t bytesRead = 0;
 8019b8a:	921a      	str	r2, [sp, #104]	; 0x68
	const uint8_t bmp[2] = { 0x42, 0x4D }; /* BM */
 8019b8c:	f644 5242 	movw	r2, #19778	; 0x4d42
	if (!img || !filename)
 8019b90:	9003      	str	r0, [sp, #12]
	const uint8_t bmp[2] = { 0x42, 0x4D }; /* BM */
 8019b92:	f8ad 2054 	strh.w	r2, [sp, #84]	; 0x54
	const uint8_t p2[2] = { 0x50, 0x32 }; /* P2 */
 8019b96:	f243 2250 	movw	r2, #12880	; 0x3250
 8019b9a:	f8ad 2058 	strh.w	r2, [sp, #88]	; 0x58
	const uint8_t p3[2] = { 0x50, 0x33 }; /* P3 */
 8019b9e:	f243 3250 	movw	r2, #13136	; 0x3350
 8019ba2:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
	const uint8_t p5[2] = { 0x50, 0x35 }; /* P5 */
 8019ba6:	f243 5250 	movw	r2, #13648	; 0x3550
 8019baa:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
	const uint8_t p6[2] = { 0x50, 0x36 }; /* P6 */
 8019bae:	f243 6250 	movw	r2, #13904	; 0x3650
 8019bb2:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
	if (!img || !filename)
 8019bb6:	2800      	cmp	r0, #0
 8019bb8:	f000 85da 	beq.w	801a770 <STM32Ipl_ReadImage+0xbf4>
 8019bbc:	2900      	cmp	r1, #0
 8019bbe:	f000 85d7 	beq.w	801a770 <STM32Ipl_ReadImage+0xbf4>
	if (f_open(&fp, (const TCHAR*)filename, FA_OPEN_EXISTING | FA_READ) != FR_OK)
 8019bc2:	2201      	movs	r2, #1
 8019bc4:	a82a      	add	r0, sp, #168	; 0xa8
 8019bc6:	f7fd ff05 	bl	80179d4 <f_open>
 8019bca:	2800      	cmp	r0, #0
 8019bcc:	f040 86df 	bne.w	801a98e <STM32Ipl_ReadImage+0xe12>
	if ((f_read(&fp, magic, 2, (UINT*)&bytesRead) != FR_OK) || bytesRead != 2) {
 8019bd0:	ab1a      	add	r3, sp, #104	; 0x68
 8019bd2:	2202      	movs	r2, #2
 8019bd4:	a82a      	add	r0, sp, #168	; 0xa8
 8019bd6:	a914      	add	r1, sp, #80	; 0x50
 8019bd8:	f7fe f8be 	bl	8017d58 <f_read>
 8019bdc:	4604      	mov	r4, r0
 8019bde:	2800      	cmp	r0, #0
 8019be0:	f040 85bf 	bne.w	801a762 <STM32Ipl_ReadImage+0xbe6>
 8019be4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019be6:	2b02      	cmp	r3, #2
 8019be8:	f040 85bb 	bne.w	801a762 <STM32Ipl_ReadImage+0xbe6>
	if (memcmp(bmp, magic, 2) == 0)
 8019bec:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8019bf0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8019bf4:	4293      	cmp	r3, r2
 8019bf6:	d061      	beq.n	8019cbc <STM32Ipl_ReadImage+0x140>
		if ((memcmp(p2, magic, 1) == 0)
 8019bf8:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8019bfc:	2a50      	cmp	r2, #80	; 0x50
 8019bfe:	d00b      	beq.n	8019c18 <STM32Ipl_ReadImage+0x9c>
				res = stm32ipl_err_UnsupportedFormat;
 8019c00:	f06f 0404 	mvn.w	r4, #4
	f_close(&fp);
 8019c04:	a82a      	add	r0, sp, #168	; 0xa8
 8019c06:	f7fe fb39 	bl	801827c <f_close>
}
 8019c0a:	4620      	mov	r0, r4
 8019c0c:	f20d 6ddc 	addw	sp, sp, #1756	; 0x6dc
 8019c10:	ecbd 8b02 	vpop	{d8}
 8019c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				&& ((memcmp(p2, magic, 2) == 0) || (memcmp(p3, magic, 2) == 0) || (memcmp(p5, magic, 2) == 0)
 8019c18:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
 8019c1c:	4293      	cmp	r3, r2
 8019c1e:	d008      	beq.n	8019c32 <STM32Ipl_ReadImage+0xb6>
 8019c20:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8019c24:	4293      	cmp	r3, r2
 8019c26:	d004      	beq.n	8019c32 <STM32Ipl_ReadImage+0xb6>
 8019c28:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
 8019c2c:	4293      	cmp	r3, r2
 8019c2e:	f040 8264 	bne.w	801a0fa <STM32Ipl_ReadImage+0x57e>
	STM32Ipl_Init(img, 0, 0, (image_bpp_t)0, 0);
 8019c32:	2100      	movs	r1, #0
 8019c34:	9803      	ldr	r0, [sp, #12]
 8019c36:	460b      	mov	r3, r1
 8019c38:	460a      	mov	r2, r1
 8019c3a:	9100      	str	r1, [sp, #0]
 8019c3c:	f7ff fc44 	bl	80194c8 <STM32Ipl_Init>
	if (f_lseek(fp, 0) != FR_OK)
 8019c40:	2100      	movs	r1, #0
 8019c42:	a82a      	add	r0, sp, #168	; 0xa8
 8019c44:	f7fe fb9c 	bl	8018380 <f_lseek>
 8019c48:	2800      	cmp	r0, #0
 8019c4a:	f040 81c3 	bne.w	8019fd4 <STM32Ipl_ReadImage+0x458>
	if ((f_read(fp, sector, 2, (UINT*)&bytesRead) != FR_OK) || bytesRead != 2)
 8019c4e:	ac1c      	add	r4, sp, #112	; 0x70
 8019c50:	adb6      	add	r5, sp, #728	; 0x2d8
 8019c52:	2202      	movs	r2, #2
 8019c54:	a82a      	add	r0, sp, #168	; 0xa8
 8019c56:	4623      	mov	r3, r4
 8019c58:	4629      	mov	r1, r5
 8019c5a:	f7fe f87d 	bl	8017d58 <f_read>
 8019c5e:	4680      	mov	r8, r0
 8019c60:	2800      	cmp	r0, #0
 8019c62:	f040 81b4 	bne.w	8019fce <STM32Ipl_ReadImage+0x452>
 8019c66:	6823      	ldr	r3, [r4, #0]
 8019c68:	2b02      	cmp	r3, #2
 8019c6a:	f040 81b0 	bne.w	8019fce <STM32Ipl_ReadImage+0x452>
	number_ppm = sector[1];
 8019c6e:	786b      	ldrb	r3, [r5, #1]
	if ((number_ppm != '2') && (number_ppm != '3') && (number_ppm != '5') && (number_ppm != '6'))
 8019c70:	f1a3 0732 	sub.w	r7, r3, #50	; 0x32
 8019c74:	b2fa      	uxtb	r2, r7
 8019c76:	2a01      	cmp	r2, #1
 8019c78:	d902      	bls.n	8019c80 <STM32Ipl_ReadImage+0x104>
 8019c7a:	3b35      	subs	r3, #53	; 0x35
 8019c7c:	2b01      	cmp	r3, #1
 8019c7e:	d8bf      	bhi.n	8019c00 <STM32Ipl_ReadImage+0x84>
 8019c80:	2600      	movs	r6, #0
		if ((f_read(fp, sector, 1, &bytesRead) != FR_OK) || bytesRead != 1)
 8019c82:	4623      	mov	r3, r4
 8019c84:	2201      	movs	r2, #1
 8019c86:	4629      	mov	r1, r5
 8019c88:	a82a      	add	r0, sp, #168	; 0xa8
 8019c8a:	f7fe f865 	bl	8017d58 <f_read>
 8019c8e:	2800      	cmp	r0, #0
 8019c90:	f040 819d 	bne.w	8019fce <STM32Ipl_ReadImage+0x452>
 8019c94:	6822      	ldr	r2, [r4, #0]
 8019c96:	2a01      	cmp	r2, #1
 8019c98:	f040 8199 	bne.w	8019fce <STM32Ipl_ReadImage+0x452>
		if (mode == EAT_WHITESPACE) {
 8019c9c:	f1b8 0f00 	cmp.w	r8, #0
 8019ca0:	f040 819b 	bne.w	8019fda <STM32Ipl_ReadImage+0x45e>
			if (sector[0] == '#') {
 8019ca4:	7828      	ldrb	r0, [r5, #0]
 8019ca6:	2823      	cmp	r0, #35	; 0x23
 8019ca8:	f000 81a7 	beq.w	8019ffa <STM32Ipl_ReadImage+0x47e>
				if (('0' <= sector[0]) && (sector[0] <= '9')) {
 8019cac:	3830      	subs	r0, #48	; 0x30
 8019cae:	b2c3      	uxtb	r3, r0
 8019cb0:	2b09      	cmp	r3, #9
 8019cb2:	d8e6      	bhi.n	8019c82 <STM32Ipl_ReadImage+0x106>
					number = sector[0] - '0';
 8019cb4:	4606      	mov	r6, r0
					mode = EAT_NUMBER;
 8019cb6:	f04f 0802 	mov.w	r8, #2
 8019cba:	e7e2      	b.n	8019c82 <STM32Ipl_ReadImage+0x106>
	STM32Ipl_Init(img, 0, 0, (image_bpp_t)0, 0);
 8019cbc:	4601      	mov	r1, r0
 8019cbe:	4603      	mov	r3, r0
 8019cc0:	4602      	mov	r2, r0
 8019cc2:	9000      	str	r0, [sp, #0]
 8019cc4:	9803      	ldr	r0, [sp, #12]
 8019cc6:	f7ff fbff 	bl	80194c8 <STM32Ipl_Init>
	if (f_lseek(fp, 0) != FR_OK)
 8019cca:	4621      	mov	r1, r4
 8019ccc:	a82a      	add	r0, sp, #168	; 0xa8
 8019cce:	f7fe fb57 	bl	8018380 <f_lseek>
 8019cd2:	2800      	cmp	r0, #0
 8019cd4:	f040 817e 	bne.w	8019fd4 <STM32Ipl_ReadImage+0x458>
	if ((f_read(fp, header, sizeof(header), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(header))
 8019cd8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
 8019cdc:	ac1c      	add	r4, sp, #112	; 0x70
 8019cde:	2236      	movs	r2, #54	; 0x36
 8019ce0:	a82a      	add	r0, sp, #168	; 0xa8
 8019ce2:	464b      	mov	r3, r9
 8019ce4:	4621      	mov	r1, r4
 8019ce6:	f7fe f837 	bl	8017d58 <f_read>
 8019cea:	2800      	cmp	r0, #0
 8019cec:	f040 816f 	bne.w	8019fce <STM32Ipl_ReadImage+0x452>
 8019cf0:	f8d9 3000 	ldr.w	r3, [r9]
 8019cf4:	2b36      	cmp	r3, #54	; 0x36
 8019cf6:	f040 816a 	bne.w	8019fce <STM32Ipl_ReadImage+0x452>
	infoHeaderSize = pHeader[14] + (pHeader[15] << 8) + (pHeader[16] << 16) + (pHeader[17] << 24);
 8019cfa:	7be2      	ldrb	r2, [r4, #15]
 8019cfc:	7ba3      	ldrb	r3, [r4, #14]
	dataOffset = pHeader[10] + (pHeader[11] << 8) + (pHeader[12] << 16) + (pHeader[13] << 24);
 8019cfe:	7ae1      	ldrb	r1, [r4, #11]
	infoHeaderSize = pHeader[14] + (pHeader[15] << 8) + (pHeader[16] << 16) + (pHeader[17] << 24);
 8019d00:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	dataOffset = pHeader[10] + (pHeader[11] << 8) + (pHeader[12] << 16) + (pHeader[13] << 24);
 8019d04:	7aa2      	ldrb	r2, [r4, #10]
 8019d06:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	infoHeaderSize = pHeader[14] + (pHeader[15] << 8) + (pHeader[16] << 16) + (pHeader[17] << 24);
 8019d0a:	7c21      	ldrb	r1, [r4, #16]
 8019d0c:	eb03 4301 	add.w	r3, r3, r1, lsl #16
	dataOffset = pHeader[10] + (pHeader[11] << 8) + (pHeader[12] << 16) + (pHeader[13] << 24);
 8019d10:	7b21      	ldrb	r1, [r4, #12]
 8019d12:	eb02 4201 	add.w	r2, r2, r1, lsl #16
	infoHeaderSize = pHeader[14] + (pHeader[15] << 8) + (pHeader[16] << 16) + (pHeader[17] << 24);
 8019d16:	7c61      	ldrb	r1, [r4, #17]
 8019d18:	eb03 6301 	add.w	r3, r3, r1, lsl #24
	dataOffset = pHeader[10] + (pHeader[11] << 8) + (pHeader[12] << 16) + (pHeader[13] << 24);
 8019d1c:	7b61      	ldrb	r1, [r4, #13]
	if ((infoHeaderSize != 40) /* BITMAPINFOHEADER */
 8019d1e:	2b34      	cmp	r3, #52	; 0x34
	dataOffset = pHeader[10] + (pHeader[11] << 8) + (pHeader[12] << 16) + (pHeader[13] << 24);
 8019d20:	eb02 6201 	add.w	r2, r2, r1, lsl #24
 8019d24:	9204      	str	r2, [sp, #16]
	if ((infoHeaderSize != 40) /* BITMAPINFOHEADER */
 8019d26:	f023 0210 	bic.w	r2, r3, #16
 8019d2a:	d004      	beq.n	8019d36 <STM32Ipl_ReadImage+0x1ba>
 8019d2c:	2a28      	cmp	r2, #40	; 0x28
 8019d2e:	d002      	beq.n	8019d36 <STM32Ipl_ReadImage+0x1ba>
	&& (infoHeaderSize != 124)) /* BITMAPV5HEADER */
 8019d30:	2a6c      	cmp	r2, #108	; 0x6c
 8019d32:	f47f af65 	bne.w	8019c00 <STM32Ipl_ReadImage+0x84>
	width = pHeader[18] + (pHeader[19] << 8) + (pHeader[20] << 16) + (pHeader[21] << 24);
 8019d36:	7ce3      	ldrb	r3, [r4, #19]
 8019d38:	7ca1      	ldrb	r1, [r4, #18]
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 8019d3a:	7da2      	ldrb	r2, [r4, #22]
	width = pHeader[18] + (pHeader[19] << 8) + (pHeader[20] << 16) + (pHeader[21] << 24);
 8019d3c:	eb01 2103 	add.w	r1, r1, r3, lsl #8
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 8019d40:	7de3      	ldrb	r3, [r4, #23]
	bitCount = pHeader[28] + (pHeader[29] << 8);
 8019d42:	7f60      	ldrb	r0, [r4, #29]
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 8019d44:	eb02 2203 	add.w	r2, r2, r3, lsl #8
	bitCount = pHeader[28] + (pHeader[29] << 8);
 8019d48:	7f23      	ldrb	r3, [r4, #28]
 8019d4a:	eb03 2300 	add.w	r3, r3, r0, lsl #8
	width = pHeader[18] + (pHeader[19] << 8) + (pHeader[20] << 16) + (pHeader[21] << 24);
 8019d4e:	7d20      	ldrb	r0, [r4, #20]
 8019d50:	eb01 4100 	add.w	r1, r1, r0, lsl #16
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 8019d54:	7e20      	ldrb	r0, [r4, #24]
	bitCount = pHeader[28] + (pHeader[29] << 8);
 8019d56:	b29b      	uxth	r3, r3
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 8019d58:	eb02 4200 	add.w	r2, r2, r0, lsl #16
	width = pHeader[18] + (pHeader[19] << 8) + (pHeader[20] << 16) + (pHeader[21] << 24);
 8019d5c:	7d60      	ldrb	r0, [r4, #21]
	if ((bitCount != 1) && (bitCount != 4) && (bitCount != 8) && (bitCount != 16) && (bitCount != 24))
 8019d5e:	2b18      	cmp	r3, #24
	width = pHeader[18] + (pHeader[19] << 8) + (pHeader[20] << 16) + (pHeader[21] << 24);
 8019d60:	eb01 6b00 	add.w	fp, r1, r0, lsl #24
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 8019d64:	7e61      	ldrb	r1, [r4, #25]
 8019d66:	eb02 6201 	add.w	r2, r2, r1, lsl #24
 8019d6a:	9205      	str	r2, [sp, #20]
	if ((bitCount != 1) && (bitCount != 4) && (bitCount != 8) && (bitCount != 16) && (bitCount != 24))
 8019d6c:	f63f af48 	bhi.w	8019c00 <STM32Ipl_ReadImage+0x84>
 8019d70:	4ac6      	ldr	r2, [pc, #792]	; (801a08c <STM32Ipl_ReadImage+0x510>)
 8019d72:	411a      	asrs	r2, r3
 8019d74:	07d2      	lsls	r2, r2, #31
 8019d76:	f53f af43 	bmi.w	8019c00 <STM32Ipl_ReadImage+0x84>
	compression = pHeader[30] + (pHeader[31] << 8) + (pHeader[32] << 16) + (pHeader[33] << 24);
 8019d7a:	7fe1      	ldrb	r1, [r4, #31]
 8019d7c:	7fa2      	ldrb	r2, [r4, #30]
 8019d7e:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8019d82:	f894 1020 	ldrb.w	r1, [r4, #32]
 8019d86:	eb02 4201 	add.w	r2, r2, r1, lsl #16
 8019d8a:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
	if (compression != BI_RGB && compression != BI_BITFIELDS)
 8019d8e:	eb12 6201 	adds.w	r2, r2, r1, lsl #24
 8019d92:	bf14      	ite	ne
 8019d94:	2701      	movne	r7, #1
 8019d96:	2700      	moveq	r7, #0
 8019d98:	2a03      	cmp	r2, #3
 8019d9a:	d002      	beq.n	8019da2 <STM32Ipl_ReadImage+0x226>
 8019d9c:	2f00      	cmp	r7, #0
 8019d9e:	f47f af2f 	bne.w	8019c00 <STM32Ipl_ReadImage+0x84>
	colorUsed = pHeader[46] + (pHeader[47] << 8) + (pHeader[48] << 16) + (pHeader[49] << 24);
 8019da2:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 8019da6:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 8019daa:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8019dae:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8019db2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8019db6:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
	if (colorUsed == 0)
 8019dba:	eb11 6400 	adds.w	r4, r1, r0, lsl #24
 8019dbe:	d101      	bne.n	8019dc4 <STM32Ipl_ReadImage+0x248>
		colorUsed = 1 << bitCount;
 8019dc0:	2401      	movs	r4, #1
 8019dc2:	409c      	lsls	r4, r3
	lineSize = (((width * bitCount) + 31) / 32) * 4;
 8019dc4:	fb03 f00b 	mul.w	r0, r3, fp
 8019dc8:	f110 011f 	adds.w	r1, r0, #31
 8019dcc:	bf48      	it	mi
 8019dce:	f100 013e 	addmi.w	r1, r0, #62	; 0x3e
	if ((compression == BI_BITFIELDS) && (bitCount == 16)) {
 8019dd2:	2a03      	cmp	r2, #3
	lineSize = (((width * bitCount) + 31) / 32) * 4;
 8019dd4:	ea4f 1161 	mov.w	r1, r1, asr #5
 8019dd8:	ea4f 0a81 	mov.w	sl, r1, lsl #2
	if ((compression == BI_BITFIELDS) && (bitCount == 16)) {
 8019ddc:	f040 811e 	bne.w	801a01c <STM32Ipl_ReadImage+0x4a0>
 8019de0:	2b10      	cmp	r3, #16
 8019de2:	f040 811b 	bne.w	801a01c <STM32Ipl_ReadImage+0x4a0>
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 8019de6:	464b      	mov	r3, r9
 8019de8:	2204      	movs	r2, #4
 8019dea:	a82a      	add	r0, sp, #168	; 0xa8
 8019dec:	a9b6      	add	r1, sp, #728	; 0x2d8
 8019dee:	f7fd ffb3 	bl	8017d58 <f_read>
 8019df2:	2800      	cmp	r0, #0
 8019df4:	f040 80eb 	bne.w	8019fce <STM32Ipl_ReadImage+0x452>
 8019df8:	f8d9 2000 	ldr.w	r2, [r9]
 8019dfc:	2a04      	cmp	r2, #4
 8019dfe:	f040 80e6 	bne.w	8019fce <STM32Ipl_ReadImage+0x452>
		rMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 8019e02:	f89d 32d9 	ldrb.w	r3, [sp, #729]	; 0x2d9
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 8019e06:	a9b6      	add	r1, sp, #728	; 0x2d8
		rMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 8019e08:	f89d 62d8 	ldrb.w	r6, [sp, #728]	; 0x2d8
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 8019e0c:	a82a      	add	r0, sp, #168	; 0xa8
		rMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 8019e0e:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 8019e12:	f89d 32da 	ldrb.w	r3, [sp, #730]	; 0x2da
 8019e16:	eb06 4603 	add.w	r6, r6, r3, lsl #16
 8019e1a:	f89d 32db 	ldrb.w	r3, [sp, #731]	; 0x2db
 8019e1e:	eb06 6603 	add.w	r6, r6, r3, lsl #24
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 8019e22:	464b      	mov	r3, r9
 8019e24:	f7fd ff98 	bl	8017d58 <f_read>
 8019e28:	2800      	cmp	r0, #0
 8019e2a:	f040 80d0 	bne.w	8019fce <STM32Ipl_ReadImage+0x452>
 8019e2e:	f8d9 2000 	ldr.w	r2, [r9]
 8019e32:	2a04      	cmp	r2, #4
 8019e34:	f040 80cb 	bne.w	8019fce <STM32Ipl_ReadImage+0x452>
		gMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 8019e38:	f89d 32d9 	ldrb.w	r3, [sp, #729]	; 0x2d9
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 8019e3c:	a9b6      	add	r1, sp, #728	; 0x2d8
		gMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 8019e3e:	f89d 52d8 	ldrb.w	r5, [sp, #728]	; 0x2d8
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 8019e42:	a82a      	add	r0, sp, #168	; 0xa8
		gMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 8019e44:	eb05 2503 	add.w	r5, r5, r3, lsl #8
 8019e48:	f89d 32da 	ldrb.w	r3, [sp, #730]	; 0x2da
 8019e4c:	eb05 4503 	add.w	r5, r5, r3, lsl #16
 8019e50:	f89d 32db 	ldrb.w	r3, [sp, #731]	; 0x2db
 8019e54:	eb05 6503 	add.w	r5, r5, r3, lsl #24
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 8019e58:	464b      	mov	r3, r9
 8019e5a:	f7fd ff7d 	bl	8017d58 <f_read>
 8019e5e:	2800      	cmp	r0, #0
 8019e60:	f040 80b5 	bne.w	8019fce <STM32Ipl_ReadImage+0x452>
 8019e64:	f8d9 3000 	ldr.w	r3, [r9]
 8019e68:	2b04      	cmp	r3, #4
 8019e6a:	f040 80b0 	bne.w	8019fce <STM32Ipl_ReadImage+0x452>
		bMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 8019e6e:	f89d 32d9 	ldrb.w	r3, [sp, #729]	; 0x2d9
 8019e72:	f89d 42d8 	ldrb.w	r4, [sp, #728]	; 0x2d8
 8019e76:	eb04 2403 	add.w	r4, r4, r3, lsl #8
 8019e7a:	f89d 32da 	ldrb.w	r3, [sp, #730]	; 0x2da
 8019e7e:	eb04 4403 	add.w	r4, r4, r3, lsl #16
 8019e82:	f89d 32db 	ldrb.w	r3, [sp, #731]	; 0x2db
 8019e86:	eb04 6403 	add.w	r4, r4, r3, lsl #24
			if (f_lseek(fp, dataOffset) != FR_OK)
 8019e8a:	9904      	ldr	r1, [sp, #16]
 8019e8c:	a82a      	add	r0, sp, #168	; 0xa8
 8019e8e:	f7fe fa77 	bl	8018380 <f_lseek>
 8019e92:	2800      	cmp	r0, #0
 8019e94:	f040 809e 	bne.w	8019fd4 <STM32Ipl_ReadImage+0x458>
			outData = xalloc(width * abs(height) * 2);
 8019e98:	9a05      	ldr	r2, [sp, #20]
 8019e9a:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8019e9e:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8019ea2:	fb03 f00b 	mul.w	r0, r3, fp
 8019ea6:	9308      	str	r3, [sp, #32]
 8019ea8:	0040      	lsls	r0, r0, #1
 8019eaa:	f001 f87f 	bl	801afac <xalloc>
			if (!outData)
 8019eae:	900f      	str	r0, [sp, #60]	; 0x3c
 8019eb0:	2800      	cmp	r0, #0
 8019eb2:	f000 8590 	beq.w	801a9d6 <STM32Ipl_ReadImage+0xe5a>
			lineData = xalloc(lineSize);
 8019eb6:	4650      	mov	r0, sl
 8019eb8:	f001 f878 	bl	801afac <xalloc>
			if (!lineData) {
 8019ebc:	4680      	mov	r8, r0
 8019ebe:	2800      	cmp	r0, #0
 8019ec0:	f000 87b1 	beq.w	801ae26 <STM32Ipl_ReadImage+0x12aa>
			line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8019ec4:	9b05      	ldr	r3, [sp, #20]
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	f340 8565 	ble.w	801a996 <STM32Ipl_ReadImage+0xe1a>
 8019ecc:	3b01      	subs	r3, #1
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8019ece:	9a04      	ldr	r2, [sp, #16]
 8019ed0:	fb0a 2303 	mla	r3, sl, r3, r2
 8019ed4:	4619      	mov	r1, r3
 8019ed6:	9306      	str	r3, [sp, #24]
			if (f_lseek(fp, line) != FR_OK) {
 8019ed8:	a82a      	add	r0, sp, #168	; 0xa8
 8019eda:	f7fe fa51 	bl	8018380 <f_lseek>
 8019ede:	2800      	cmp	r0, #0
 8019ee0:	f040 8796 	bne.w	801ae10 <STM32Ipl_ReadImage+0x1294>
			for (uint32_t i = 0; i < abs(height); i++) {
 8019ee4:	9b08      	ldr	r3, [sp, #32]
 8019ee6:	9313      	str	r3, [sp, #76]	; 0x4c
 8019ee8:	9b05      	ldr	r3, [sp, #20]
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	f000 8752 	beq.w	801ad94 <STM32Ipl_ReadImage+0x1218>
					if (compression && (rMask == RGB565_RED_MASK) && (gMask == RGB565_GREEN_MASK)
 8019ef0:	463b      	mov	r3, r7
							&& (bMask == RGB565_BLUE_MASK))
 8019ef2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
			for (uint32_t i = 0; i < abs(height); i++) {
 8019ef4:	9007      	str	r0, [sp, #28]
					if (compression && (rMask == RGB565_RED_MASK) && (gMask == RGB565_GREEN_MASK)
 8019ef6:	f5b6 4f78 	cmp.w	r6, #63488	; 0xf800
 8019efa:	bf14      	ite	ne
 8019efc:	2300      	movne	r3, #0
 8019efe:	f003 0301 	andeq.w	r3, r3, #1
							&& (bMask == RGB565_BLUE_MASK))
 8019f02:	f5b5 6ffc 	cmp.w	r5, #2016	; 0x7e0
 8019f06:	bf08      	it	eq
 8019f08:	2c1f      	cmpeq	r4, #31
 8019f0a:	bf0c      	ite	eq
 8019f0c:	2201      	moveq	r2, #1
 8019f0e:	2200      	movne	r2, #0
					if (compression && (rMask == RGB565_RED_MASK) && (gMask == RGB565_GREEN_MASK)
 8019f10:	930b      	str	r3, [sp, #44]	; 0x2c
 8019f12:	f02b 0301 	bic.w	r3, fp, #1
							&& (bMask == RGB565_BLUE_MASK))
 8019f16:	920d      	str	r2, [sp, #52]	; 0x34
 8019f18:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8019f1c:	9311      	str	r3, [sp, #68]	; 0x44
 8019f1e:	9212      	str	r2, [sp, #72]	; 0x48
 8019f20:	ea4f 024b 	mov.w	r2, fp, lsl #1
 8019f24:	920c      	str	r2, [sp, #48]	; 0x30
 8019f26:	005a      	lsls	r2, r3, #1
 8019f28:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8019f2c:	9209      	str	r2, [sp, #36]	; 0x24
 8019f2e:	930a      	str	r3, [sp, #40]	; 0x28
 8019f30:	f10b 33ff 	add.w	r3, fp, #4294967295
 8019f34:	930e      	str	r3, [sp, #56]	; 0x38
 8019f36:	f108 0302 	add.w	r3, r8, #2
 8019f3a:	9310      	str	r3, [sp, #64]	; 0x40
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 8019f3c:	4623      	mov	r3, r4
 8019f3e:	465c      	mov	r4, fp
 8019f40:	469b      	mov	fp, r3
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 8019f42:	464b      	mov	r3, r9
 8019f44:	4652      	mov	r2, sl
 8019f46:	4641      	mov	r1, r8
 8019f48:	a82a      	add	r0, sp, #168	; 0xa8
 8019f4a:	f7fd ff05 	bl	8017d58 <f_read>
 8019f4e:	2800      	cmp	r0, #0
 8019f50:	f040 83b6 	bne.w	801a6c0 <STM32Ipl_ReadImage+0xb44>
 8019f54:	f8d9 3000 	ldr.w	r3, [r9]
 8019f58:	459a      	cmp	sl, r3
 8019f5a:	f040 83b1 	bne.w	801a6c0 <STM32Ipl_ReadImage+0xb44>
				for (uint32_t j = 0; j < width; j++) {
 8019f5e:	b1b4      	cbz	r4, 8019f8e <STM32Ipl_ReadImage+0x412>
 8019f60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019f62:	2900      	cmp	r1, #0
 8019f64:	f040 82fb 	bne.w	801a55e <STM32Ipl_ReadImage+0x9e2>
 8019f68:	f1a8 0c02 	sub.w	ip, r8, #2
 8019f6c:	4638      	mov	r0, r7
					uint16_t value = *inPixel;
 8019f6e:	f83c 3f02 	ldrh.w	r3, [ip, #2]!
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 8019f72:	ea46 0205 	orr.w	r2, r6, r5
				for (uint32_t j = 0; j < width; j++) {
 8019f76:	3101      	adds	r1, #1
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 8019f78:	401a      	ands	r2, r3
 8019f7a:	ea03 030b 	and.w	r3, r3, fp
				for (uint32_t j = 0; j < width; j++) {
 8019f7e:	428c      	cmp	r4, r1
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 8019f80:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8019f84:	f820 3b02 	strh.w	r3, [r0], #2
				for (uint32_t j = 0; j < width; j++) {
 8019f88:	d1f1      	bne.n	8019f6e <STM32Ipl_ReadImage+0x3f2>
 8019f8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019f8c:	441f      	add	r7, r3
				if (height > 0) {
 8019f8e:	9b05      	ldr	r3, [sp, #20]
 8019f90:	2b00      	cmp	r3, #0
					line -= lineSize;
 8019f92:	9b06      	ldr	r3, [sp, #24]
				if (height > 0) {
 8019f94:	f340 82fb 	ble.w	801a58e <STM32Ipl_ReadImage+0xa12>
					line -= lineSize;
 8019f98:	eba3 030a 	sub.w	r3, r3, sl
					if (line >= dataOffset) {
 8019f9c:	9a04      	ldr	r2, [sp, #16]
 8019f9e:	429a      	cmp	r2, r3
					line -= lineSize;
 8019fa0:	9306      	str	r3, [sp, #24]
					if (line >= dataOffset) {
 8019fa2:	f240 8313 	bls.w	801a5cc <STM32Ipl_ReadImage+0xa50>
			for (uint32_t i = 0; i < abs(height); i++) {
 8019fa6:	9b07      	ldr	r3, [sp, #28]
 8019fa8:	9a08      	ldr	r2, [sp, #32]
 8019faa:	3301      	adds	r3, #1
 8019fac:	4293      	cmp	r3, r2
 8019fae:	9307      	str	r3, [sp, #28]
 8019fb0:	d1c7      	bne.n	8019f42 <STM32Ipl_ReadImage+0x3c6>
 8019fb2:	46a3      	mov	fp, r4
			xfree(lineData);
 8019fb4:	4640      	mov	r0, r8
	return stm32ipl_err_Ok;
 8019fb6:	2400      	movs	r4, #0
			xfree(lineData);
 8019fb8:	f001 f806 	bl	801afc8 <xfree>
			STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_RGB565, outData);
 8019fbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019fbe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019fc0:	4659      	mov	r1, fp
 8019fc2:	9300      	str	r3, [sp, #0]
 8019fc4:	2302      	movs	r3, #2
 8019fc6:	9803      	ldr	r0, [sp, #12]
 8019fc8:	f7ff fa7e 	bl	80194c8 <STM32Ipl_Init>
			break;
 8019fcc:	e61a      	b.n	8019c04 <STM32Ipl_ReadImage+0x88>
									return stm32ipl_err_ReadingFile;
 8019fce:	f06f 0407 	mvn.w	r4, #7
 8019fd2:	e617      	b.n	8019c04 <STM32Ipl_ReadImage+0x88>
		return stm32ipl_err_SeekingFile;
 8019fd4:	f06f 0409 	mvn.w	r4, #9
 8019fd8:	e614      	b.n	8019c04 <STM32Ipl_ReadImage+0x88>
			if (mode == EAT_COMMENT) {
 8019fda:	f1b8 0f01 	cmp.w	r8, #1
 8019fde:	d00e      	beq.n	8019ffe <STM32Ipl_ReadImage+0x482>
					if (('0' <= sector[0]) && (sector[0] <= '9')) {
 8019fe0:	782b      	ldrb	r3, [r5, #0]
 8019fe2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8019fe6:	b2d1      	uxtb	r1, r2
 8019fe8:	2909      	cmp	r1, #9
 8019fea:	d851      	bhi.n	801a090 <STM32Ipl_ReadImage+0x514>
						number = (number * 10) + sector[0] - '0';
 8019fec:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8019ff0:	f04f 0802 	mov.w	r8, #2
 8019ff4:	eb02 0646 	add.w	r6, r2, r6, lsl #1
	} while (!valid);
 8019ff8:	e643      	b.n	8019c82 <STM32Ipl_ReadImage+0x106>
				mode = EAT_COMMENT;
 8019ffa:	4690      	mov	r8, r2
 8019ffc:	e641      	b.n	8019c82 <STM32Ipl_ReadImage+0x106>
				if ((sector[0] == '\n') || (sector[0] == '\r')) {
 8019ffe:	f895 8000 	ldrb.w	r8, [r5]
 801a002:	f1b8 0f0d 	cmp.w	r8, #13
 801a006:	bf18      	it	ne
 801a008:	f1b8 0f0a 	cmpne.w	r8, #10
 801a00c:	bf0c      	ite	eq
 801a00e:	f04f 0801 	moveq.w	r8, #1
 801a012:	f04f 0800 	movne.w	r8, #0
				mode = EAT_COMMENT;
 801a016:	f088 0801 	eor.w	r8, r8, #1
 801a01a:	e632      	b.n	8019c82 <STM32Ipl_ReadImage+0x106>
	switch (bitCount) {
 801a01c:	3b01      	subs	r3, #1
 801a01e:	2b17      	cmp	r3, #23
 801a020:	f63f adee 	bhi.w	8019c00 <STM32Ipl_ReadImage+0x84>
 801a024:	a201      	add	r2, pc, #4	; (adr r2, 801a02c <STM32Ipl_ReadImage+0x4b0>)
 801a026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a02a:	bf00      	nop
 801a02c:	0801a41f 	.word	0x0801a41f
 801a030:	08019c01 	.word	0x08019c01
 801a034:	08019c01 	.word	0x08019c01
 801a038:	0801a309 	.word	0x0801a309
 801a03c:	08019c01 	.word	0x08019c01
 801a040:	08019c01 	.word	0x08019c01
 801a044:	08019c01 	.word	0x08019c01
 801a048:	0801a1d5 	.word	0x0801a1d5
 801a04c:	08019c01 	.word	0x08019c01
 801a050:	08019c01 	.word	0x08019c01
 801a054:	08019c01 	.word	0x08019c01
 801a058:	08019c01 	.word	0x08019c01
 801a05c:	08019c01 	.word	0x08019c01
 801a060:	08019c01 	.word	0x08019c01
 801a064:	08019c01 	.word	0x08019c01
 801a068:	0801a553 	.word	0x0801a553
 801a06c:	08019c01 	.word	0x08019c01
 801a070:	08019c01 	.word	0x08019c01
 801a074:	08019c01 	.word	0x08019c01
 801a078:	08019c01 	.word	0x08019c01
 801a07c:	08019c01 	.word	0x08019c01
 801a080:	08019c01 	.word	0x08019c01
 801a084:	08019c01 	.word	0x08019c01
 801a088:	0801a10b 	.word	0x0801a10b
 801a08c:	fefefeed 	.word	0xfefefeed
	number = 0;
 801a090:	46b0      	mov	r8, r6
 801a092:	4606      	mov	r6, r0
 801a094:	4682      	mov	sl, r0
 801a096:	461a      	mov	r2, r3
		if (mode == EAT_WHITESPACE) {
 801a098:	b9ae      	cbnz	r6, 801a0c6 <STM32Ipl_ReadImage+0x54a>
			if (sector[0] == '#') {
 801a09a:	2a23      	cmp	r2, #35	; 0x23
 801a09c:	d022      	beq.n	801a0e4 <STM32Ipl_ReadImage+0x568>
				if (('0' <= sector[0]) && (sector[0] <= '9')) {
 801a09e:	3a30      	subs	r2, #48	; 0x30
 801a0a0:	b2d3      	uxtb	r3, r2
 801a0a2:	2b09      	cmp	r3, #9
 801a0a4:	d801      	bhi.n	801a0aa <STM32Ipl_ReadImage+0x52e>
					number = sector[0] - '0';
 801a0a6:	4692      	mov	sl, r2
					mode = EAT_NUMBER;
 801a0a8:	2602      	movs	r6, #2
			if ((f_read(fp, sector, 1, &bytesRead) != FR_OK) || bytesRead != 1)
 801a0aa:	4623      	mov	r3, r4
 801a0ac:	2201      	movs	r2, #1
 801a0ae:	4629      	mov	r1, r5
 801a0b0:	a82a      	add	r0, sp, #168	; 0xa8
 801a0b2:	f7fd fe51 	bl	8017d58 <f_read>
 801a0b6:	2800      	cmp	r0, #0
 801a0b8:	d189      	bne.n	8019fce <STM32Ipl_ReadImage+0x452>
 801a0ba:	6823      	ldr	r3, [r4, #0]
 801a0bc:	2b01      	cmp	r3, #1
 801a0be:	d186      	bne.n	8019fce <STM32Ipl_ReadImage+0x452>
			if (sector[0] == '#') {
 801a0c0:	782a      	ldrb	r2, [r5, #0]
		if (mode == EAT_WHITESPACE) {
 801a0c2:	2e00      	cmp	r6, #0
 801a0c4:	d0e9      	beq.n	801a09a <STM32Ipl_ReadImage+0x51e>
			if (mode == EAT_COMMENT) {
 801a0c6:	2e01      	cmp	r6, #1
 801a0c8:	d00e      	beq.n	801a0e8 <STM32Ipl_ReadImage+0x56c>
					if (('0' <= sector[0]) && (sector[0] <= '9')) {
 801a0ca:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801a0ce:	2b09      	cmp	r3, #9
 801a0d0:	f200 828d 	bhi.w	801a5ee <STM32Ipl_ReadImage+0xa72>
						number = (number * 10) + sector[0] - '0';
 801a0d4:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 801a0d8:	2602      	movs	r6, #2
 801a0da:	eb02 024a 	add.w	r2, r2, sl, lsl #1
 801a0de:	f1a2 0a30 	sub.w	sl, r2, #48	; 0x30
	} while (!valid);
 801a0e2:	e7e2      	b.n	801a0aa <STM32Ipl_ReadImage+0x52e>
				mode = EAT_COMMENT;
 801a0e4:	2601      	movs	r6, #1
 801a0e6:	e7e0      	b.n	801a0aa <STM32Ipl_ReadImage+0x52e>
				if ((sector[0] == '\n') || (sector[0] == '\r')) {
 801a0e8:	2a0d      	cmp	r2, #13
 801a0ea:	bf18      	it	ne
 801a0ec:	2a0a      	cmpne	r2, #10
 801a0ee:	bf0c      	ite	eq
 801a0f0:	2201      	moveq	r2, #1
 801a0f2:	2200      	movne	r2, #0
				mode = EAT_COMMENT;
 801a0f4:	f082 0601 	eor.w	r6, r2, #1
 801a0f8:	e7d7      	b.n	801a0aa <STM32Ipl_ReadImage+0x52e>
						|| (memcmp(p6, magic, 2) == 0)))
 801a0fa:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
 801a0fe:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801a102:	429a      	cmp	r2, r3
 801a104:	f47f ad7c 	bne.w	8019c00 <STM32Ipl_ReadImage+0x84>
 801a108:	e593      	b.n	8019c32 <STM32Ipl_ReadImage+0xb6>
			if (f_lseek(fp, dataOffset) != FR_OK)
 801a10a:	9904      	ldr	r1, [sp, #16]
 801a10c:	a82a      	add	r0, sp, #168	; 0xa8
			uint32_t outLineSize = width * 3;
 801a10e:	eb0b 074b 	add.w	r7, fp, fp, lsl #1
			if (f_lseek(fp, dataOffset) != FR_OK)
 801a112:	f7fe f935 	bl	8018380 <f_lseek>
 801a116:	2800      	cmp	r0, #0
 801a118:	f47f af5c 	bne.w	8019fd4 <STM32Ipl_ReadImage+0x458>
			outData = xalloc(outLineSize * abs(height));
 801a11c:	9a05      	ldr	r2, [sp, #20]
 801a11e:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 801a122:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 801a126:	fb03 f007 	mul.w	r0, r3, r7
 801a12a:	9307      	str	r3, [sp, #28]
 801a12c:	f000 ff3e 	bl	801afac <xalloc>
			if (!outData)
 801a130:	9006      	str	r0, [sp, #24]
 801a132:	2800      	cmp	r0, #0
 801a134:	f000 844f 	beq.w	801a9d6 <STM32Ipl_ReadImage+0xe5a>
			lineData = xalloc(lineSize);
 801a138:	4650      	mov	r0, sl
 801a13a:	f000 ff37 	bl	801afac <xalloc>
			if (!lineData) {
 801a13e:	4605      	mov	r5, r0
 801a140:	2800      	cmp	r0, #0
 801a142:	f000 867b 	beq.w	801ae3c <STM32Ipl_ReadImage+0x12c0>
			line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 801a146:	9b05      	ldr	r3, [sp, #20]
 801a148:	2b00      	cmp	r3, #0
 801a14a:	f340 8429 	ble.w	801a9a0 <STM32Ipl_ReadImage+0xe24>
 801a14e:	1e5e      	subs	r6, r3, #1
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 801a150:	9b04      	ldr	r3, [sp, #16]
 801a152:	fb0a 3606 	mla	r6, sl, r6, r3
			if (f_lseek(fp, line) != FR_OK) {
 801a156:	4631      	mov	r1, r6
 801a158:	a82a      	add	r0, sp, #168	; 0xa8
 801a15a:	f7fe f911 	bl	8018380 <f_lseek>
 801a15e:	bb80      	cbnz	r0, 801a1c2 <STM32Ipl_ReadImage+0x646>
			for (uint32_t i = 0; i < abs(height); i++) {
 801a160:	9b05      	ldr	r3, [sp, #20]
 801a162:	2b00      	cmp	r3, #0
 801a164:	f000 8421 	beq.w	801a9aa <STM32Ipl_ReadImage+0xe2e>
 801a168:	4604      	mov	r4, r0
 801a16a:	f340 8282 	ble.w	801a672 <STM32Ipl_ReadImage+0xaf6>
 801a16e:	f8cd b014 	str.w	fp, [sp, #20]
 801a172:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801a176:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801a17a:	e002      	b.n	801a182 <STM32Ipl_ReadImage+0x606>
 801a17c:	45a3      	cmp	fp, r4
 801a17e:	f000 8412 	beq.w	801a9a6 <STM32Ipl_ReadImage+0xe2a>
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 801a182:	464b      	mov	r3, r9
 801a184:	4652      	mov	r2, sl
 801a186:	4629      	mov	r1, r5
 801a188:	a82a      	add	r0, sp, #168	; 0xa8
					line -= lineSize;
 801a18a:	eba6 060a 	sub.w	r6, r6, sl
			for (uint32_t i = 0; i < abs(height); i++) {
 801a18e:	3401      	adds	r4, #1
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 801a190:	f7fd fde2 	bl	8017d58 <f_read>
 801a194:	2800      	cmp	r0, #0
 801a196:	f040 8289 	bne.w	801a6ac <STM32Ipl_ReadImage+0xb30>
 801a19a:	f8d9 3000 	ldr.w	r3, [r9]
 801a19e:	459a      	cmp	sl, r3
 801a1a0:	f040 8284 	bne.w	801a6ac <STM32Ipl_ReadImage+0xb30>
				memcpy(outPixel, lineData, outLineSize);
 801a1a4:	4640      	mov	r0, r8
 801a1a6:	463a      	mov	r2, r7
 801a1a8:	4629      	mov	r1, r5
				outPixel += outLineSize;
 801a1aa:	44b8      	add	r8, r7
				memcpy(outPixel, lineData, outLineSize);
 801a1ac:	f00c fa83 	bl	80266b6 <memcpy>
					if (line >= dataOffset) {
 801a1b0:	9b04      	ldr	r3, [sp, #16]
 801a1b2:	42b3      	cmp	r3, r6
 801a1b4:	d8e2      	bhi.n	801a17c <STM32Ipl_ReadImage+0x600>
						if (f_lseek(fp, line) != FR_OK) {
 801a1b6:	4631      	mov	r1, r6
 801a1b8:	a82a      	add	r0, sp, #168	; 0xa8
 801a1ba:	f7fe f8e1 	bl	8018380 <f_lseek>
 801a1be:	2800      	cmp	r0, #0
 801a1c0:	d0dc      	beq.n	801a17c <STM32Ipl_ReadImage+0x600>
							xfree(lineData);
 801a1c2:	4628      	mov	r0, r5
							return stm32ipl_err_SeekingFile;
 801a1c4:	f06f 0409 	mvn.w	r4, #9
							xfree(lineData);
 801a1c8:	f000 fefe 	bl	801afc8 <xfree>
							xfree(outData);
 801a1cc:	9806      	ldr	r0, [sp, #24]
 801a1ce:	f000 fefb 	bl	801afc8 <xfree>
							return stm32ipl_err_SeekingFile;
 801a1d2:	e517      	b.n	8019c04 <STM32Ipl_ReadImage+0x88>
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 801a1d4:	9b04      	ldr	r3, [sp, #16]
 801a1d6:	a82a      	add	r0, sp, #168	; 0xa8
			paletteSize = colorUsed * sizeof(uint32_t);
 801a1d8:	00a6      	lsls	r6, r4, #2
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 801a1da:	eba3 0184 	sub.w	r1, r3, r4, lsl #2
 801a1de:	f7fe f8cf 	bl	8018380 <f_lseek>
 801a1e2:	2800      	cmp	r0, #0
 801a1e4:	f47f aef6 	bne.w	8019fd4 <STM32Ipl_ReadImage+0x458>
			if ((f_read(fp, palette, paletteSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != paletteSize)
 801a1e8:	adb6      	add	r5, sp, #728	; 0x2d8
 801a1ea:	464b      	mov	r3, r9
 801a1ec:	4632      	mov	r2, r6
 801a1ee:	a82a      	add	r0, sp, #168	; 0xa8
 801a1f0:	4629      	mov	r1, r5
 801a1f2:	f7fd fdb1 	bl	8017d58 <f_read>
 801a1f6:	2800      	cmp	r0, #0
 801a1f8:	f47f aee9 	bne.w	8019fce <STM32Ipl_ReadImage+0x452>
 801a1fc:	f8d9 3000 	ldr.w	r3, [r9]
 801a200:	429e      	cmp	r6, r3
 801a202:	f47f aee4 	bne.w	8019fce <STM32Ipl_ReadImage+0x452>
	for (uint32_t i = 0; i < colorUsed; i++) {
 801a206:	4602      	mov	r2, r0
 801a208:	4628      	mov	r0, r5
		uint8_t b = palette[i];
 801a20a:	f850 3b04 	ldr.w	r3, [r0], #4
	for (uint32_t i = 0; i < colorUsed; i++) {
 801a20e:	3201      	adds	r2, #1
		uint8_t b = palette[i];
 801a210:	b2de      	uxtb	r6, r3
		if ((b != g) | (b != r))
 801a212:	f3c3 4107 	ubfx	r1, r3, #16, #8
 801a216:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a21a:	42b3      	cmp	r3, r6
 801a21c:	f040 8506 	bne.w	801ac2c <STM32Ipl_ReadImage+0x10b0>
 801a220:	1b89      	subs	r1, r1, r6
 801a222:	bf18      	it	ne
 801a224:	2101      	movne	r1, #1
 801a226:	2900      	cmp	r1, #0
 801a228:	f040 8500 	bne.w	801ac2c <STM32Ipl_ReadImage+0x10b0>
	for (uint32_t i = 0; i < colorUsed; i++) {
 801a22c:	4294      	cmp	r4, r2
 801a22e:	d1ec      	bne.n	801a20a <STM32Ipl_ReadImage+0x68e>
				outData = xalloc(width * abs(height));
 801a230:	9a05      	ldr	r2, [sp, #20]
 801a232:	4688      	mov	r8, r1
 801a234:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 801a238:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 801a23c:	fb03 f00b 	mul.w	r0, r3, fp
 801a240:	9306      	str	r3, [sp, #24]
 801a242:	f000 feb3 	bl	801afac <xalloc>
				if (!outData)
 801a246:	ee08 0a10 	vmov	s16, r0
 801a24a:	2800      	cmp	r0, #0
 801a24c:	f000 83c3 	beq.w	801a9d6 <STM32Ipl_ReadImage+0xe5a>
				lineData = xalloc(lineSize);
 801a250:	4650      	mov	r0, sl
 801a252:	f000 feab 	bl	801afac <xalloc>
				if (!lineData) {
 801a256:	4606      	mov	r6, r0
 801a258:	2800      	cmp	r0, #0
 801a25a:	f000 8588 	beq.w	801ad6e <STM32Ipl_ReadImage+0x11f2>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 801a25e:	9b05      	ldr	r3, [sp, #20]
 801a260:	2b00      	cmp	r3, #0
 801a262:	dd03      	ble.n	801a26c <STM32Ipl_ReadImage+0x6f0>
 801a264:	f103 38ff 	add.w	r8, r3, #4294967295
 801a268:	fb0a f808 	mul.w	r8, sl, r8
 801a26c:	9b04      	ldr	r3, [sp, #16]
				if (f_lseek(fp, line) != FR_OK) {
 801a26e:	a82a      	add	r0, sp, #168	; 0xa8
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 801a270:	eb03 0708 	add.w	r7, r3, r8
				if (f_lseek(fp, line) != FR_OK) {
 801a274:	4639      	mov	r1, r7
 801a276:	f7fe f883 	bl	8018380 <f_lseek>
 801a27a:	2800      	cmp	r0, #0
 801a27c:	f040 8429 	bne.w	801aad2 <STM32Ipl_ReadImage+0xf56>
				for (uint32_t i = 0; i < abs(height); i++) {
 801a280:	9b06      	ldr	r3, [sp, #24]
 801a282:	9307      	str	r3, [sp, #28]
 801a284:	9b05      	ldr	r3, [sp, #20]
 801a286:	2b00      	cmp	r3, #0
 801a288:	f000 85e9 	beq.w	801ae5e <STM32Ipl_ReadImage+0x12e2>
					for (uint32_t j = 0; j < width; j++)
 801a28c:	464b      	mov	r3, r9
				for (uint32_t i = 0; i < abs(height); i++) {
 801a28e:	4680      	mov	r8, r0
					for (uint32_t j = 0; j < width; j++)
 801a290:	46d1      	mov	r9, sl
 801a292:	ee18 4a10 	vmov	r4, s16
 801a296:	469a      	mov	sl, r3
					if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 801a298:	4653      	mov	r3, sl
 801a29a:	464a      	mov	r2, r9
 801a29c:	4631      	mov	r1, r6
 801a29e:	a82a      	add	r0, sp, #168	; 0xa8
 801a2a0:	f7fd fd5a 	bl	8017d58 <f_read>
 801a2a4:	2800      	cmp	r0, #0
 801a2a6:	f040 8583 	bne.w	801adb0 <STM32Ipl_ReadImage+0x1234>
 801a2aa:	f8da 1000 	ldr.w	r1, [sl]
 801a2ae:	4589      	cmp	r9, r1
 801a2b0:	f040 857e 	bne.w	801adb0 <STM32Ipl_ReadImage+0x1234>
					for (uint32_t j = 0; j < width; j++)
 801a2b4:	f1bb 0f00 	cmp.w	fp, #0
 801a2b8:	d00a      	beq.n	801a2d0 <STM32Ipl_ReadImage+0x754>
 801a2ba:	eb04 0c0b 	add.w	ip, r4, fp
 801a2be:	4631      	mov	r1, r6
						*outPixel++ = palette[*ptr++];
 801a2c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a2c4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801a2c8:	f804 3b01 	strb.w	r3, [r4], #1
					for (uint32_t j = 0; j < width; j++)
 801a2cc:	4564      	cmp	r4, ip
 801a2ce:	d1f7      	bne.n	801a2c0 <STM32Ipl_ReadImage+0x744>
					if (height > 0) {
 801a2d0:	9b05      	ldr	r3, [sp, #20]
 801a2d2:	2b00      	cmp	r3, #0
 801a2d4:	f340 837d 	ble.w	801a9d2 <STM32Ipl_ReadImage+0xe56>
						line -= lineSize;
 801a2d8:	eba7 0709 	sub.w	r7, r7, r9
						if (line >= dataOffset) {
 801a2dc:	9b04      	ldr	r3, [sp, #16]
 801a2de:	42bb      	cmp	r3, r7
 801a2e0:	f240 83f0 	bls.w	801aac4 <STM32Ipl_ReadImage+0xf48>
				for (uint32_t i = 0; i < abs(height); i++) {
 801a2e4:	f108 0801 	add.w	r8, r8, #1
 801a2e8:	9b06      	ldr	r3, [sp, #24]
 801a2ea:	4598      	cmp	r8, r3
 801a2ec:	d1d4      	bne.n	801a298 <STM32Ipl_ReadImage+0x71c>
				xfree(lineData);
 801a2ee:	4630      	mov	r0, r6
 801a2f0:	f000 fe6a 	bl	801afc8 <xfree>
				STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_GRAYSCALE, outData);
 801a2f4:	9a07      	ldr	r2, [sp, #28]
 801a2f6:	4659      	mov	r1, fp
 801a2f8:	9803      	ldr	r0, [sp, #12]
 801a2fa:	2301      	movs	r3, #1
 801a2fc:	ed8d 8a00 	vstr	s16, [sp]
 801a300:	f7ff f8e2 	bl	80194c8 <STM32Ipl_Init>
	return stm32ipl_err_Ok;
 801a304:	2400      	movs	r4, #0
			break;
 801a306:	e47d      	b.n	8019c04 <STM32Ipl_ReadImage+0x88>
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 801a308:	9b04      	ldr	r3, [sp, #16]
 801a30a:	a82a      	add	r0, sp, #168	; 0xa8
 801a30c:	eba3 0184 	sub.w	r1, r3, r4, lsl #2
			paletteSize = colorUsed * sizeof(uint32_t);
 801a310:	00a4      	lsls	r4, r4, #2
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 801a312:	f7fe f835 	bl	8018380 <f_lseek>
 801a316:	2800      	cmp	r0, #0
 801a318:	f47f ae5c 	bne.w	8019fd4 <STM32Ipl_ReadImage+0x458>
			if ((f_read(fp, palette, paletteSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != paletteSize)
 801a31c:	adb6      	add	r5, sp, #728	; 0x2d8
 801a31e:	464b      	mov	r3, r9
 801a320:	4622      	mov	r2, r4
 801a322:	a82a      	add	r0, sp, #168	; 0xa8
 801a324:	4629      	mov	r1, r5
 801a326:	f7fd fd17 	bl	8017d58 <f_read>
 801a32a:	2800      	cmp	r0, #0
 801a32c:	f47f ae4f 	bne.w	8019fce <STM32Ipl_ReadImage+0x452>
 801a330:	f8d9 3000 	ldr.w	r3, [r9]
 801a334:	429c      	cmp	r4, r3
 801a336:	f47f ae4a 	bne.w	8019fce <STM32Ipl_ReadImage+0x452>
			outData = xalloc(width * abs(height) * 2);
 801a33a:	9a05      	ldr	r2, [sp, #20]
 801a33c:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 801a340:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 801a344:	fb03 f00b 	mul.w	r0, r3, fp
 801a348:	9308      	str	r3, [sp, #32]
 801a34a:	0040      	lsls	r0, r0, #1
 801a34c:	f000 fe2e 	bl	801afac <xalloc>
			if (!outData)
 801a350:	ee08 0a10 	vmov	s16, r0
 801a354:	2800      	cmp	r0, #0
 801a356:	f000 833e 	beq.w	801a9d6 <STM32Ipl_ReadImage+0xe5a>
			lineData = xalloc(lineSize);
 801a35a:	4650      	mov	r0, sl
 801a35c:	f000 fe26 	bl	801afac <xalloc>
			if (!lineData) {
 801a360:	4680      	mov	r8, r0
 801a362:	2800      	cmp	r0, #0
 801a364:	f000 8503 	beq.w	801ad6e <STM32Ipl_ReadImage+0x11f2>
			line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 801a368:	9b05      	ldr	r3, [sp, #20]
 801a36a:	2b00      	cmp	r3, #0
 801a36c:	f340 84fa 	ble.w	801ad64 <STM32Ipl_ReadImage+0x11e8>
 801a370:	3b01      	subs	r3, #1
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 801a372:	9a04      	ldr	r2, [sp, #16]
 801a374:	fb0a 2303 	mla	r3, sl, r3, r2
 801a378:	4619      	mov	r1, r3
 801a37a:	9306      	str	r3, [sp, #24]
			if (f_lseek(fp, line) != FR_OK) {
 801a37c:	a82a      	add	r0, sp, #168	; 0xa8
 801a37e:	f7fd ffff 	bl	8018380 <f_lseek>
 801a382:	2800      	cmp	r0, #0
 801a384:	f040 8380 	bne.w	801aa88 <STM32Ipl_ReadImage+0xf0c>
			for (uint32_t i = 0; i < abs(height); i++) {
 801a388:	9b08      	ldr	r3, [sp, #32]
 801a38a:	9309      	str	r3, [sp, #36]	; 0x24
 801a38c:	9b05      	ldr	r3, [sp, #20]
 801a38e:	2b00      	cmp	r3, #0
 801a390:	f000 855b 	beq.w	801ae4a <STM32Ipl_ReadImage+0x12ce>
				for (uint32_t j = 0; j < width;) {
 801a394:	ee18 4a10 	vmov	r4, s16
					*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 801a398:	4eb7      	ldr	r6, [pc, #732]	; (801a678 <STM32Ipl_ReadImage+0xafc>)
 801a39a:	465f      	mov	r7, fp
			for (uint32_t i = 0; i < abs(height); i++) {
 801a39c:	9007      	str	r0, [sp, #28]
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 801a39e:	464b      	mov	r3, r9
 801a3a0:	4652      	mov	r2, sl
 801a3a2:	4641      	mov	r1, r8
 801a3a4:	a82a      	add	r0, sp, #168	; 0xa8
 801a3a6:	f7fd fcd7 	bl	8017d58 <f_read>
 801a3aa:	2800      	cmp	r0, #0
 801a3ac:	f040 84e7 	bne.w	801ad7e <STM32Ipl_ReadImage+0x1202>
 801a3b0:	f8d9 3000 	ldr.w	r3, [r9]
 801a3b4:	459a      	cmp	sl, r3
 801a3b6:	f040 84e2 	bne.w	801ad7e <STM32Ipl_ReadImage+0x1202>
				for (uint32_t j = 0; j < width;) {
 801a3ba:	2f00      	cmp	r7, #0
 801a3bc:	f000 818a 	beq.w	801a6d4 <STM32Ipl_ReadImage+0xb58>
 801a3c0:	4603      	mov	r3, r0
 801a3c2:	46c6      	mov	lr, r8
 801a3c4:	e004      	b.n	801a3d0 <STM32Ipl_ReadImage+0x854>
					*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 801a3c6:	3402      	adds	r4, #2
					j++;
 801a3c8:	3302      	adds	r3, #2
				for (uint32_t j = 0; j < width;) {
 801a3ca:	42bb      	cmp	r3, r7
 801a3cc:	f080 8182 	bcs.w	801a6d4 <STM32Ipl_ReadImage+0xb58>
					uint8_t value = (*ptr++);
 801a3d0:	f81e 0b01 	ldrb.w	r0, [lr], #1
					if (j < width) {
 801a3d4:	f103 0c01 	add.w	ip, r3, #1
					uint8_t r = palette[index] >> 16;
 801a3d8:	0902      	lsrs	r2, r0, #4
					if (j < width) {
 801a3da:	4567      	cmp	r7, ip
						r = palette[index] >> 16;
 801a3dc:	f000 000f 	and.w	r0, r0, #15
					uint8_t r = palette[index] >> 16;
 801a3e0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
					*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 801a3e4:	ea06 2b12 	and.w	fp, r6, r2, lsr #8
 801a3e8:	f3c2 01c4 	ubfx	r1, r2, #3, #5
 801a3ec:	ea4f 1252 	mov.w	r2, r2, lsr #5
 801a3f0:	ea41 010b 	orr.w	r1, r1, fp
 801a3f4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a3f8:	ea41 0102 	orr.w	r1, r1, r2
 801a3fc:	8021      	strh	r1, [r4, #0]
					if (j < width) {
 801a3fe:	d9e2      	bls.n	801a3c6 <STM32Ipl_ReadImage+0x84a>
						r = palette[index] >> 16;
 801a400:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
						*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 801a404:	3404      	adds	r4, #4
 801a406:	ea06 2012 	and.w	r0, r6, r2, lsr #8
 801a40a:	f3c2 01c4 	ubfx	r1, r2, #3, #5
 801a40e:	0952      	lsrs	r2, r2, #5
 801a410:	4301      	orrs	r1, r0
 801a412:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a416:	430a      	orrs	r2, r1
 801a418:	f824 2c02 	strh.w	r2, [r4, #-2]
 801a41c:	e7d4      	b.n	801a3c8 <STM32Ipl_ReadImage+0x84c>
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 801a41e:	9b04      	ldr	r3, [sp, #16]
 801a420:	a82a      	add	r0, sp, #168	; 0xa8
 801a422:	eba3 0184 	sub.w	r1, r3, r4, lsl #2
			paletteSize = colorUsed * sizeof(uint32_t);
 801a426:	00a4      	lsls	r4, r4, #2
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 801a428:	f7fd ffaa 	bl	8018380 <f_lseek>
 801a42c:	2800      	cmp	r0, #0
 801a42e:	f47f add1 	bne.w	8019fd4 <STM32Ipl_ReadImage+0x458>
			if ((f_read(fp, palette, paletteSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != paletteSize)
 801a432:	adb6      	add	r5, sp, #728	; 0x2d8
 801a434:	464b      	mov	r3, r9
 801a436:	4622      	mov	r2, r4
 801a438:	a82a      	add	r0, sp, #168	; 0xa8
 801a43a:	4629      	mov	r1, r5
 801a43c:	f7fd fc8c 	bl	8017d58 <f_read>
 801a440:	2800      	cmp	r0, #0
 801a442:	f47f adc4 	bne.w	8019fce <STM32Ipl_ReadImage+0x452>
 801a446:	f8d9 3000 	ldr.w	r3, [r9]
 801a44a:	429c      	cmp	r4, r3
 801a44c:	f47f adbf 	bne.w	8019fce <STM32Ipl_ReadImage+0x452>
			if ((palette[0] == 0x0 && palette[1] == 0xFFFFFF) || (palette[0] == 0xFFFFFF && palette[1] == 0x0)) {
 801a450:	682b      	ldr	r3, [r5, #0]
 801a452:	2b00      	cmp	r3, #0
 801a454:	f040 8348 	bne.w	801aae8 <STM32Ipl_ReadImage+0xf6c>
 801a458:	686a      	ldr	r2, [r5, #4]
 801a45a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a45e:	429a      	cmp	r2, r3
 801a460:	f000 834b 	beq.w	801aafa <STM32Ipl_ReadImage+0xf7e>
				outData = xalloc(width * abs(height) * 2);
 801a464:	9a05      	ldr	r2, [sp, #20]
 801a466:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 801a46a:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 801a46e:	fb03 f00b 	mul.w	r0, r3, fp
 801a472:	9309      	str	r3, [sp, #36]	; 0x24
 801a474:	0040      	lsls	r0, r0, #1
 801a476:	f000 fd99 	bl	801afac <xalloc>
				if (!outData)
 801a47a:	ee08 0a10 	vmov	s16, r0
 801a47e:	2800      	cmp	r0, #0
 801a480:	f000 82a9 	beq.w	801a9d6 <STM32Ipl_ReadImage+0xe5a>
				lineData = xalloc(lineSize);
 801a484:	4650      	mov	r0, sl
 801a486:	f000 fd91 	bl	801afac <xalloc>
				if (!lineData) {
 801a48a:	ee08 0a90 	vmov	s17, r0
 801a48e:	2800      	cmp	r0, #0
 801a490:	f000 846d 	beq.w	801ad6e <STM32Ipl_ReadImage+0x11f2>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 801a494:	9b05      	ldr	r3, [sp, #20]
 801a496:	2b00      	cmp	r3, #0
 801a498:	f340 84a1 	ble.w	801adde <STM32Ipl_ReadImage+0x1262>
 801a49c:	3b01      	subs	r3, #1
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 801a49e:	9a04      	ldr	r2, [sp, #16]
 801a4a0:	fb0a 2303 	mla	r3, sl, r3, r2
 801a4a4:	4619      	mov	r1, r3
 801a4a6:	9307      	str	r3, [sp, #28]
				if (f_lseek(fp, line) != FR_OK) {
 801a4a8:	a82a      	add	r0, sp, #168	; 0xa8
 801a4aa:	f7fd ff69 	bl	8018380 <f_lseek>
 801a4ae:	2800      	cmp	r0, #0
 801a4b0:	f040 82fc 	bne.w	801aaac <STM32Ipl_ReadImage+0xf30>
				for (uint32_t i = 0; i < abs(height); i++) {
 801a4b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a4b6:	930b      	str	r3, [sp, #44]	; 0x2c
 801a4b8:	9b05      	ldr	r3, [sp, #20]
 801a4ba:	2b00      	cmp	r3, #0
 801a4bc:	f000 84ba 	beq.w	801ae34 <STM32Ipl_ReadImage+0x12b8>
 801a4c0:	ea4f 034b 	mov.w	r3, fp, lsl #1
						*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 801a4c4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801a678 <STM32Ipl_ReadImage+0xafc>
 801a4c8:	465e      	mov	r6, fp
 801a4ca:	ee18 7a90 	vmov	r7, s17
				for (uint32_t i = 0; i < abs(height); i++) {
 801a4ce:	9008      	str	r0, [sp, #32]
 801a4d0:	930a      	str	r3, [sp, #40]	; 0x28
					for (uint32_t j = 0; j < width; k--, j++) {
 801a4d2:	ed8d 8a06 	vstr	s16, [sp, #24]
					if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 801a4d6:	464b      	mov	r3, r9
 801a4d8:	4652      	mov	r2, sl
 801a4da:	4639      	mov	r1, r7
 801a4dc:	a82a      	add	r0, sp, #168	; 0xa8
 801a4de:	f7fd fc3b 	bl	8017d58 <f_read>
 801a4e2:	2800      	cmp	r0, #0
 801a4e4:	f040 846f 	bne.w	801adc6 <STM32Ipl_ReadImage+0x124a>
 801a4e8:	f8d9 3000 	ldr.w	r3, [r9]
 801a4ec:	459a      	cmp	sl, r3
 801a4ee:	f040 846a 	bne.w	801adc6 <STM32Ipl_ReadImage+0x124a>
					for (uint32_t j = 0; j < width; k--, j++) {
 801a4f2:	2e00      	cmp	r6, #0
 801a4f4:	f000 8114 	beq.w	801a720 <STM32Ipl_ReadImage+0xba4>
					uint8_t value = 0;
 801a4f8:	4686      	mov	lr, r0
					for (uint32_t j = 0; j < width; k--, j++) {
 801a4fa:	9a06      	ldr	r2, [sp, #24]
 801a4fc:	46bc      	mov	ip, r7
 801a4fe:	4603      	mov	r3, r0
 801a500:	e01a      	b.n	801a538 <STM32Ipl_ReadImage+0x9bc>
						index = (value >> k) & 0x1;
 801a502:	4601      	mov	r1, r0
					for (uint32_t j = 0; j < width; k--, j++) {
 801a504:	fa5f f08b 	uxtb.w	r0, fp
						index = (value >> k) & 0x1;
 801a508:	fa4e f101 	asr.w	r1, lr, r1
					for (uint32_t j = 0; j < width; k--, j++) {
 801a50c:	3301      	adds	r3, #1
						r = palette[index] >> 16;
 801a50e:	f001 0101 	and.w	r1, r1, #1
					for (uint32_t j = 0; j < width; k--, j++) {
 801a512:	42b3      	cmp	r3, r6
						r = palette[index] >> 16;
 801a514:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
						*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 801a518:	ea08 2b11 	and.w	fp, r8, r1, lsr #8
 801a51c:	f3c1 04c4 	ubfx	r4, r1, #3, #5
 801a520:	ea4f 1151 	mov.w	r1, r1, lsr #5
 801a524:	ea44 040b 	orr.w	r4, r4, fp
 801a528:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a52c:	ea41 0104 	orr.w	r1, r1, r4
 801a530:	f822 1b02 	strh.w	r1, [r2], #2
					for (uint32_t j = 0; j < width; k--, j++) {
 801a534:	f000 80f0 	beq.w	801a718 <STM32Ipl_ReadImage+0xb9c>
						if (!(j % 8)) {
 801a538:	f013 0f07 	tst.w	r3, #7
							value = (*ptr++);
 801a53c:	4664      	mov	r4, ip
					for (uint32_t j = 0; j < width; k--, j++) {
 801a53e:	f100 3bff 	add.w	fp, r0, #4294967295
							value = (*ptr++);
 801a542:	f04f 0107 	mov.w	r1, #7
						if (!(j % 8)) {
 801a546:	d1dc      	bne.n	801a502 <STM32Ipl_ReadImage+0x986>
							value = (*ptr++);
 801a548:	f814 eb01 	ldrb.w	lr, [r4], #1
 801a54c:	2006      	movs	r0, #6
 801a54e:	46a4      	mov	ip, r4
 801a550:	e7da      	b.n	801a508 <STM32Ipl_ReadImage+0x98c>
	switch (bitCount) {
 801a552:	241f      	movs	r4, #31
 801a554:	f44f 7578 	mov.w	r5, #992	; 0x3e0
 801a558:	f44f 46f8 	mov.w	r6, #31744	; 0x7c00
 801a55c:	e495      	b.n	8019e8a <STM32Ipl_ReadImage+0x30e>
 801a55e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a560:	b9c2      	cbnz	r2, 801a594 <STM32Ipl_ReadImage+0xa18>
 801a562:	f1a8 0c02 	sub.w	ip, r8, #2
				for (uint32_t j = 0; j < width; j++) {
 801a566:	4638      	mov	r0, r7
					uint16_t value = *inPixel;
 801a568:	f83c 1f02 	ldrh.w	r1, [ip, #2]!
				for (uint32_t j = 0; j < width; j++) {
 801a56c:	3201      	adds	r2, #1
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 801a56e:	4b43      	ldr	r3, [pc, #268]	; (801a67c <STM32Ipl_ReadImage+0xb00>)
 801a570:	ea01 0e05 	and.w	lr, r1, r5
				for (uint32_t j = 0; j < width; j++) {
 801a574:	4294      	cmp	r4, r2
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 801a576:	ea03 0341 	and.w	r3, r3, r1, lsl #1
 801a57a:	ea01 010b 	and.w	r1, r1, fp
 801a57e:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
 801a582:	ea43 0301 	orr.w	r3, r3, r1
 801a586:	f820 3b02 	strh.w	r3, [r0], #2
				for (uint32_t j = 0; j < width; j++) {
 801a58a:	d1ed      	bne.n	801a568 <STM32Ipl_ReadImage+0x9ec>
 801a58c:	e4fd      	b.n	8019f8a <STM32Ipl_ReadImage+0x40e>
					line += lineSize;
 801a58e:	4453      	add	r3, sl
 801a590:	9306      	str	r3, [sp, #24]
 801a592:	e508      	b.n	8019fa6 <STM32Ipl_ReadImage+0x42a>
 801a594:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a596:	2b06      	cmp	r3, #6
 801a598:	f240 81ec 	bls.w	801a974 <STM32Ipl_ReadImage+0xdf8>
 801a59c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a59e:	429f      	cmp	r7, r3
 801a5a0:	f000 81e8 	beq.w	801a974 <STM32Ipl_ReadImage+0xdf8>
 801a5a4:	463a      	mov	r2, r7
 801a5a6:	4643      	mov	r3, r8
 801a5a8:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
					uint16_t value = *inPixel;
 801a5ac:	3001      	adds	r0, #1
 801a5ae:	f853 1b04 	ldr.w	r1, [r3], #4
						*outPixel++ = value;
 801a5b2:	4584      	cmp	ip, r0
 801a5b4:	f842 1b04 	str.w	r1, [r2], #4
				for (uint32_t j = 0; j < width; j++) {
 801a5b8:	d1f8      	bne.n	801a5ac <STM32Ipl_ReadImage+0xa30>
 801a5ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a5bc:	429c      	cmp	r4, r3
 801a5be:	f43f ace4 	beq.w	8019f8a <STM32Ipl_ReadImage+0x40e>
					uint16_t value = *inPixel;
 801a5c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a5c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a5c6:	881b      	ldrh	r3, [r3, #0]
						*outPixel++ = value;
 801a5c8:	52bb      	strh	r3, [r7, r2]
				for (uint32_t j = 0; j < width; j++) {
 801a5ca:	e4de      	b.n	8019f8a <STM32Ipl_ReadImage+0x40e>
						if (f_lseek(fp, line) != FR_OK) {
 801a5cc:	4619      	mov	r1, r3
 801a5ce:	a82a      	add	r0, sp, #168	; 0xa8
 801a5d0:	f7fd fed6 	bl	8018380 <f_lseek>
 801a5d4:	2800      	cmp	r0, #0
 801a5d6:	f43f ace6 	beq.w	8019fa6 <STM32Ipl_ReadImage+0x42a>
							xfree(lineData);
 801a5da:	4640      	mov	r0, r8
							return stm32ipl_err_SeekingFile;
 801a5dc:	f06f 0409 	mvn.w	r4, #9
							xfree(lineData);
 801a5e0:	f000 fcf2 	bl	801afc8 <xfree>
							xfree(outData);
 801a5e4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a5e6:	f000 fcef 	bl	801afc8 <xfree>
							return stm32ipl_err_SeekingFile;
 801a5ea:	f7ff bb0b 	b.w	8019c04 <STM32Ipl_ReadImage+0x88>
	if (height == 0 || width == 0)
 801a5ee:	4646      	mov	r6, r8
 801a5f0:	f1ba 0f00 	cmp.w	sl, #0
 801a5f4:	f000 8408 	beq.w	801ae08 <STM32Ipl_ReadImage+0x128c>
 801a5f8:	fab8 f888 	clz	r8, r8
 801a5fc:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801a600:	2e00      	cmp	r6, #0
 801a602:	f000 8401 	beq.w	801ae08 <STM32Ipl_ReadImage+0x128c>
 801a606:	46a1      	mov	r9, r4
			if (sector[0] == '#') {
 801a608:	2a23      	cmp	r2, #35	; 0x23
 801a60a:	d026      	beq.n	801a65a <STM32Ipl_ReadImage+0xade>
				if (('0' <= sector[0]) && (sector[0] <= '9')) {
 801a60c:	3a30      	subs	r2, #48	; 0x30
 801a60e:	b2d3      	uxtb	r3, r2
					number = sector[0] - '0';
 801a610:	2b09      	cmp	r3, #9
 801a612:	bf96      	itet	ls
 801a614:	4690      	movls	r8, r2
 801a616:	2400      	movhi	r4, #0
 801a618:	2402      	movls	r4, #2
			if ((f_read(fp, sector, 1, &bytesRead) != FR_OK) || bytesRead != 1)
 801a61a:	464b      	mov	r3, r9
 801a61c:	2201      	movs	r2, #1
 801a61e:	4629      	mov	r1, r5
 801a620:	a82a      	add	r0, sp, #168	; 0xa8
 801a622:	f7fd fb99 	bl	8017d58 <f_read>
 801a626:	2800      	cmp	r0, #0
 801a628:	f47f acd1 	bne.w	8019fce <STM32Ipl_ReadImage+0x452>
 801a62c:	f8d9 3000 	ldr.w	r3, [r9]
 801a630:	2b01      	cmp	r3, #1
 801a632:	f47f accc 	bne.w	8019fce <STM32Ipl_ReadImage+0x452>
		if (mode == EAT_WHITESPACE) {
 801a636:	b174      	cbz	r4, 801a656 <STM32Ipl_ReadImage+0xada>
			if (mode == EAT_COMMENT) {
 801a638:	2c01      	cmp	r4, #1
						number = (number * 10) + sector[0] - '0';
 801a63a:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 801a63e:	f04f 0402 	mov.w	r4, #2
			if (mode == EAT_COMMENT) {
 801a642:	d00c      	beq.n	801a65e <STM32Ipl_ReadImage+0xae2>
					if (('0' <= sector[0]) && (sector[0] <= '9')) {
 801a644:	782a      	ldrb	r2, [r5, #0]
 801a646:	3a30      	subs	r2, #48	; 0x30
 801a648:	b2d1      	uxtb	r1, r2
 801a64a:	2909      	cmp	r1, #9
 801a64c:	f200 8094 	bhi.w	801a778 <STM32Ipl_ReadImage+0xbfc>
						number = (number * 10) + sector[0] - '0';
 801a650:	eb02 0843 	add.w	r8, r2, r3, lsl #1
	} while (!valid);
 801a654:	e7e1      	b.n	801a61a <STM32Ipl_ReadImage+0xa9e>
				if ((sector[0] == '\n') || (sector[0] == '\r')) {
 801a656:	782a      	ldrb	r2, [r5, #0]
 801a658:	e7d6      	b.n	801a608 <STM32Ipl_ReadImage+0xa8c>
				mode = EAT_COMMENT;
 801a65a:	2401      	movs	r4, #1
 801a65c:	e7dd      	b.n	801a61a <STM32Ipl_ReadImage+0xa9e>
				if ((sector[0] == '\n') || (sector[0] == '\r')) {
 801a65e:	782c      	ldrb	r4, [r5, #0]
 801a660:	2c0d      	cmp	r4, #13
 801a662:	bf18      	it	ne
 801a664:	2c0a      	cmpne	r4, #10
 801a666:	bf0c      	ite	eq
 801a668:	2401      	moveq	r4, #1
 801a66a:	2400      	movne	r4, #0
					mode = EAT_NUMBER;
 801a66c:	f084 0401 	eor.w	r4, r4, #1
 801a670:	e7d3      	b.n	801a61a <STM32Ipl_ReadImage+0xa9e>
			for (uint32_t i = 0; i < abs(height); i++) {
 801a672:	e9dd 6806 	ldrd	r6, r8, [sp, #24]
 801a676:	e010      	b.n	801a69a <STM32Ipl_ReadImage+0xb1e>
 801a678:	fffff800 	.word	0xfffff800
 801a67c:	fffff000 	.word	0xfffff000
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 801a680:	f8d9 3000 	ldr.w	r3, [r9]
 801a684:	459a      	cmp	sl, r3
 801a686:	d111      	bne.n	801a6ac <STM32Ipl_ReadImage+0xb30>
				memcpy(outPixel, lineData, outLineSize);
 801a688:	4630      	mov	r0, r6
 801a68a:	463a      	mov	r2, r7
 801a68c:	4629      	mov	r1, r5
				outPixel += outLineSize;
 801a68e:	443e      	add	r6, r7
				memcpy(outPixel, lineData, outLineSize);
 801a690:	f00c f811 	bl	80266b6 <memcpy>
			for (uint32_t i = 0; i < abs(height); i++) {
 801a694:	45a0      	cmp	r8, r4
 801a696:	f000 8188 	beq.w	801a9aa <STM32Ipl_ReadImage+0xe2e>
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 801a69a:	464b      	mov	r3, r9
 801a69c:	4652      	mov	r2, sl
 801a69e:	4629      	mov	r1, r5
 801a6a0:	a82a      	add	r0, sp, #168	; 0xa8
			for (uint32_t i = 0; i < abs(height); i++) {
 801a6a2:	3401      	adds	r4, #1
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 801a6a4:	f7fd fb58 	bl	8017d58 <f_read>
 801a6a8:	2800      	cmp	r0, #0
 801a6aa:	d0e9      	beq.n	801a680 <STM32Ipl_ReadImage+0xb04>
					xfree(lineData);
 801a6ac:	4628      	mov	r0, r5
					return stm32ipl_err_ReadingFile;
 801a6ae:	f06f 0407 	mvn.w	r4, #7
					xfree(lineData);
 801a6b2:	f000 fc89 	bl	801afc8 <xfree>
					xfree(outData);
 801a6b6:	9806      	ldr	r0, [sp, #24]
 801a6b8:	f000 fc86 	bl	801afc8 <xfree>
					return stm32ipl_err_ReadingFile;
 801a6bc:	f7ff baa2 	b.w	8019c04 <STM32Ipl_ReadImage+0x88>
					xfree(lineData);
 801a6c0:	4640      	mov	r0, r8
					return stm32ipl_err_ReadingFile;
 801a6c2:	f06f 0407 	mvn.w	r4, #7
					xfree(lineData);
 801a6c6:	f000 fc7f 	bl	801afc8 <xfree>
					xfree(outData);
 801a6ca:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a6cc:	f000 fc7c 	bl	801afc8 <xfree>
					return stm32ipl_err_ReadingFile;
 801a6d0:	f7ff ba98 	b.w	8019c04 <STM32Ipl_ReadImage+0x88>
				if (height > 0) {
 801a6d4:	9b05      	ldr	r3, [sp, #20]
 801a6d6:	2b00      	cmp	r3, #0
					line -= lineSize;
 801a6d8:	9b06      	ldr	r3, [sp, #24]
				if (height > 0) {
 801a6da:	f340 8174 	ble.w	801a9c6 <STM32Ipl_ReadImage+0xe4a>
					line -= lineSize;
 801a6de:	eba3 030a 	sub.w	r3, r3, sl
					if (line >= dataOffset) {
 801a6e2:	9a04      	ldr	r2, [sp, #16]
 801a6e4:	429a      	cmp	r2, r3
					line -= lineSize;
 801a6e6:	9306      	str	r3, [sp, #24]
					if (line >= dataOffset) {
 801a6e8:	f240 81c7 	bls.w	801aa7a <STM32Ipl_ReadImage+0xefe>
			for (uint32_t i = 0; i < abs(height); i++) {
 801a6ec:	9b07      	ldr	r3, [sp, #28]
 801a6ee:	9a08      	ldr	r2, [sp, #32]
 801a6f0:	3301      	adds	r3, #1
 801a6f2:	4293      	cmp	r3, r2
 801a6f4:	9307      	str	r3, [sp, #28]
 801a6f6:	f47f ae52 	bne.w	801a39e <STM32Ipl_ReadImage+0x822>
 801a6fa:	46bb      	mov	fp, r7
			xfree(lineData);
 801a6fc:	4640      	mov	r0, r8
	return stm32ipl_err_Ok;
 801a6fe:	2400      	movs	r4, #0
			xfree(lineData);
 801a700:	f000 fc62 	bl	801afc8 <xfree>
			STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_RGB565, outData);
 801a704:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a706:	4659      	mov	r1, fp
 801a708:	9803      	ldr	r0, [sp, #12]
 801a70a:	2302      	movs	r3, #2
 801a70c:	ed8d 8a00 	vstr	s16, [sp]
 801a710:	f7fe feda 	bl	80194c8 <STM32Ipl_Init>
			break;
 801a714:	f7ff ba76 	b.w	8019c04 <STM32Ipl_ReadImage+0x88>
						*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 801a718:	9b06      	ldr	r3, [sp, #24]
 801a71a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a71c:	4413      	add	r3, r2
 801a71e:	9306      	str	r3, [sp, #24]
					if (height > 0) {
 801a720:	9b05      	ldr	r3, [sp, #20]
 801a722:	2b00      	cmp	r3, #0
						line -= lineSize;
 801a724:	9b07      	ldr	r3, [sp, #28]
					if (height > 0) {
 801a726:	f340 8151 	ble.w	801a9cc <STM32Ipl_ReadImage+0xe50>
						line -= lineSize;
 801a72a:	eba3 030a 	sub.w	r3, r3, sl
						if (line >= dataOffset) {
 801a72e:	9a04      	ldr	r2, [sp, #16]
 801a730:	429a      	cmp	r2, r3
						line -= lineSize;
 801a732:	9307      	str	r3, [sp, #28]
						if (line >= dataOffset) {
 801a734:	f240 81b3 	bls.w	801aa9e <STM32Ipl_ReadImage+0xf22>
				for (uint32_t i = 0; i < abs(height); i++) {
 801a738:	9b08      	ldr	r3, [sp, #32]
 801a73a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a73c:	3301      	adds	r3, #1
 801a73e:	4293      	cmp	r3, r2
 801a740:	9308      	str	r3, [sp, #32]
 801a742:	f47f aec8 	bne.w	801a4d6 <STM32Ipl_ReadImage+0x95a>
 801a746:	46b3      	mov	fp, r6
				xfree(lineData);
 801a748:	ee18 0a90 	vmov	r0, s17
 801a74c:	f000 fc3c 	bl	801afc8 <xfree>
				STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_RGB565, outData);
 801a750:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
				STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_RGB565, outData);
 801a752:	4659      	mov	r1, fp
 801a754:	9803      	ldr	r0, [sp, #12]
 801a756:	2302      	movs	r3, #2
 801a758:	ed8d 8a00 	vstr	s16, [sp]
 801a75c:	f7fe feb4 	bl	80194c8 <STM32Ipl_Init>
 801a760:	e5d0      	b.n	801a304 <STM32Ipl_ReadImage+0x788>
		f_close(&fp);
 801a762:	a82a      	add	r0, sp, #168	; 0xa8
		return stm32ipl_err_ReadingFile;
 801a764:	f06f 0407 	mvn.w	r4, #7
		f_close(&fp);
 801a768:	f7fd fd88 	bl	801827c <f_close>
		return stm32ipl_err_ReadingFile;
 801a76c:	f7ff ba4d 	b.w	8019c0a <STM32Ipl_ReadImage+0x8e>
		return stm32ipl_err_InvalidParameter;
 801a770:	f06f 0401 	mvn.w	r4, #1
 801a774:	f7ff ba49 	b.w	8019c0a <STM32Ipl_ReadImage+0x8e>
	if (number > 255)
 801a778:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801a77c:	464c      	mov	r4, r9
 801a77e:	f200 834e 	bhi.w	801ae1e <STM32Ipl_ReadImage+0x12a2>
	switch (number_ppm) {
 801a782:	2f04      	cmp	r7, #4
 801a784:	f63f aa3c 	bhi.w	8019c00 <STM32Ipl_ReadImage+0x84>
 801a788:	a301      	add	r3, pc, #4	; (adr r3, 801a790 <STM32Ipl_ReadImage+0xc14>)
 801a78a:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 801a78e:	bf00      	nop
 801a790:	0801a8c9 	.word	0x0801a8c9
 801a794:	0801a843 	.word	0x0801a843
 801a798:	08019c01 	.word	0x08019c01
 801a79c:	0801a7ff 	.word	0x0801a7ff
 801a7a0:	0801a7a5 	.word	0x0801a7a5
			size = width * height * 3;
 801a7a4:	fb0a f806 	mul.w	r8, sl, r6
 801a7a8:	eb08 0748 	add.w	r7, r8, r8, lsl #1
			outData = xalloc(size);
 801a7ac:	4638      	mov	r0, r7
 801a7ae:	f000 fbfd 	bl	801afac <xalloc>
			if (!outData)
 801a7b2:	4605      	mov	r5, r0
 801a7b4:	2800      	cmp	r0, #0
 801a7b6:	f000 810e 	beq.w	801a9d6 <STM32Ipl_ReadImage+0xe5a>
			if ((f_read(fp, outData, size, &bytesRead) != FR_OK) || bytesRead != size)
 801a7ba:	464b      	mov	r3, r9
 801a7bc:	4601      	mov	r1, r0
 801a7be:	463a      	mov	r2, r7
 801a7c0:	a82a      	add	r0, sp, #168	; 0xa8
 801a7c2:	f7fd fac9 	bl	8017d58 <f_read>
 801a7c6:	4603      	mov	r3, r0
 801a7c8:	2800      	cmp	r0, #0
 801a7ca:	f47f ac00 	bne.w	8019fce <STM32Ipl_ReadImage+0x452>
 801a7ce:	f8d9 2000 	ldr.w	r2, [r9]
 801a7d2:	4297      	cmp	r7, r2
 801a7d4:	f47f abfb 	bne.w	8019fce <STM32Ipl_ReadImage+0x452>
			for (uint32_t i = 0; i < size; i += 3) {
 801a7d8:	f1b8 0f00 	cmp.w	r8, #0
 801a7dc:	d007      	beq.n	801a7ee <STM32Ipl_ReadImage+0xc72>
 801a7de:	1caa      	adds	r2, r5, #2
				uint8_t tmp = outData[i];
 801a7e0:	5ce9      	ldrb	r1, [r5, r3]
				outData[i] = outData[i + 2];
 801a7e2:	5cd0      	ldrb	r0, [r2, r3]
 801a7e4:	54e8      	strb	r0, [r5, r3]
				outData[i + 2] = tmp;
 801a7e6:	54d1      	strb	r1, [r2, r3]
			for (uint32_t i = 0; i < size; i += 3) {
 801a7e8:	3303      	adds	r3, #3
 801a7ea:	429f      	cmp	r7, r3
 801a7ec:	d8f8      	bhi.n	801a7e0 <STM32Ipl_ReadImage+0xc64>
			STM32Ipl_Init(img, width, height, IMAGE_BPP_RGB888, outData);
 801a7ee:	4652      	mov	r2, sl
 801a7f0:	4631      	mov	r1, r6
 801a7f2:	9803      	ldr	r0, [sp, #12]
 801a7f4:	2304      	movs	r3, #4
 801a7f6:	9500      	str	r5, [sp, #0]
 801a7f8:	f7fe fe66 	bl	80194c8 <STM32Ipl_Init>
 801a7fc:	e582      	b.n	801a304 <STM32Ipl_ReadImage+0x788>
			size = width * height;
 801a7fe:	fb0a f806 	mul.w	r8, sl, r6
			outData = xalloc(size);
 801a802:	4640      	mov	r0, r8
 801a804:	f000 fbd2 	bl	801afac <xalloc>
			if (!outData)
 801a808:	4605      	mov	r5, r0
 801a80a:	2800      	cmp	r0, #0
 801a80c:	f000 80e3 	beq.w	801a9d6 <STM32Ipl_ReadImage+0xe5a>
			if ((f_read(fp, outData, size, &bytesRead) != FR_OK) || bytesRead != size)
 801a810:	4601      	mov	r1, r0
 801a812:	464b      	mov	r3, r9
 801a814:	4642      	mov	r2, r8
 801a816:	a82a      	add	r0, sp, #168	; 0xa8
 801a818:	f7fd fa9e 	bl	8017d58 <f_read>
 801a81c:	4607      	mov	r7, r0
 801a81e:	2800      	cmp	r0, #0
 801a820:	f47f abd5 	bne.w	8019fce <STM32Ipl_ReadImage+0x452>
 801a824:	f8d9 3000 	ldr.w	r3, [r9]
 801a828:	4598      	cmp	r8, r3
 801a82a:	f47f abd0 	bne.w	8019fce <STM32Ipl_ReadImage+0x452>
			STM32Ipl_Init(img, width, height, IMAGE_BPP_GRAYSCALE, outData);
 801a82e:	4652      	mov	r2, sl
 801a830:	4631      	mov	r1, r6
 801a832:	9803      	ldr	r0, [sp, #12]
 801a834:	2301      	movs	r3, #1
 801a836:	9500      	str	r5, [sp, #0]
	return stm32ipl_err_Ok;
 801a838:	463c      	mov	r4, r7
			STM32Ipl_Init(img, width, height, IMAGE_BPP_GRAYSCALE, outData);
 801a83a:	f7fe fe45 	bl	80194c8 <STM32Ipl_Init>
			break;
 801a83e:	f7ff b9e1 	b.w	8019c04 <STM32Ipl_ReadImage+0x88>
			outData = xalloc(width * height * 3);
 801a842:	fb0a f006 	mul.w	r0, sl, r6
 801a846:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a84a:	f000 fbaf 	bl	801afac <xalloc>
			if (!outData)
 801a84e:	4602      	mov	r2, r0
 801a850:	9007      	str	r0, [sp, #28]
 801a852:	2800      	cmp	r0, #0
 801a854:	f000 80bf 	beq.w	801a9d6 <STM32Ipl_ReadImage+0xe5a>
			for (uint32_t i = 0; i < height; i++) {
 801a858:	2300      	movs	r3, #0
 801a85a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
 801a85e:	e9cd 6a05 	strd	r6, sl, [sp, #20]
 801a862:	4626      	mov	r6, r4
 801a864:	9304      	str	r3, [sp, #16]
				for (uint32_t j = 0; j < width; j++) {
 801a866:	f102 0b03 	add.w	fp, r2, #3
 801a86a:	f04f 0a00 	mov.w	sl, #0
								if (sector[0] == '#') {
 801a86e:	782b      	ldrb	r3, [r5, #0]
 801a870:	46c8      	mov	r8, r9
						number = 0;
 801a872:	2700      	movs	r7, #0
								if (sector[0] == '#') {
 801a874:	2b23      	cmp	r3, #35	; 0x23
 801a876:	d065      	beq.n	801a944 <STM32Ipl_ReadImage+0xdc8>
									if (('0' <= sector[0]) && (sector[0] <= '9')) {
 801a878:	3b30      	subs	r3, #48	; 0x30
 801a87a:	b2da      	uxtb	r2, r3
										number = sector[0] - '0';
 801a87c:	2a09      	cmp	r2, #9
 801a87e:	bf96      	itet	ls
 801a880:	461f      	movls	r7, r3
 801a882:	2400      	movhi	r4, #0
 801a884:	2402      	movls	r4, #2
								if ((f_read(fp, sector, 1, &bytesRead) != FR_OK) || bytesRead != 1)
 801a886:	4633      	mov	r3, r6
 801a888:	2201      	movs	r2, #1
 801a88a:	4629      	mov	r1, r5
 801a88c:	a82a      	add	r0, sp, #168	; 0xa8
 801a88e:	f7fd fa63 	bl	8017d58 <f_read>
 801a892:	2800      	cmp	r0, #0
 801a894:	f47f ab9b 	bne.w	8019fce <STM32Ipl_ReadImage+0x452>
 801a898:	6833      	ldr	r3, [r6, #0]
 801a89a:	2b01      	cmp	r3, #1
 801a89c:	f47f ab97 	bne.w	8019fce <STM32Ipl_ReadImage+0x452>
							if (mode == EAT_WHITESPACE) {
 801a8a0:	2c00      	cmp	r4, #0
 801a8a2:	d04d      	beq.n	801a940 <STM32Ipl_ReadImage+0xdc4>
								if (mode == EAT_COMMENT) {
 801a8a4:	2c01      	cmp	r4, #1
											number = (number * 10) + sector[0] - '0';
 801a8a6:	eb07 0287 	add.w	r2, r7, r7, lsl #2
 801a8aa:	f04f 0402 	mov.w	r4, #2
								if (mode == EAT_COMMENT) {
 801a8ae:	d04b      	beq.n	801a948 <STM32Ipl_ReadImage+0xdcc>
										if (('0' <= sector[0]) && (sector[0] <= '9')) {
 801a8b0:	782b      	ldrb	r3, [r5, #0]
 801a8b2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801a8b6:	fa5f fc81 	uxtb.w	ip, r1
 801a8ba:	f1bc 0f09 	cmp.w	ip, #9
 801a8be:	f200 808e 	bhi.w	801a9de <STM32Ipl_ReadImage+0xe62>
											number = (number * 10) + sector[0] - '0';
 801a8c2:	eb01 0742 	add.w	r7, r1, r2, lsl #1
						} while (!valid);
 801a8c6:	e7de      	b.n	801a886 <STM32Ipl_ReadImage+0xd0a>
			outData = xalloc(width * height);
 801a8c8:	fb0a f006 	mul.w	r0, sl, r6
 801a8cc:	f000 fb6e 	bl	801afac <xalloc>
			if (!outData)
 801a8d0:	9004      	str	r0, [sp, #16]
 801a8d2:	2800      	cmp	r0, #0
 801a8d4:	d07f      	beq.n	801a9d6 <STM32Ipl_ReadImage+0xe5a>
 801a8d6:	f04f 0b00 	mov.w	fp, #0
 801a8da:	4243      	negs	r3, r0
			for (uint32_t i = 0; i < height; i++) {
 801a8dc:	464f      	mov	r7, r9
 801a8de:	e9cd 3b05 	strd	r3, fp, [sp, #20]
				for (uint32_t j = 0; j < width; j++) {
 801a8e2:	9b04      	ldr	r3, [sp, #16]
 801a8e4:	eb03 090b 	add.w	r9, r3, fp
					number = 0;
 801a8e8:	f04f 0800 	mov.w	r8, #0
							if (sector[0] == '#') {
 801a8ec:	782b      	ldrb	r3, [r5, #0]
 801a8ee:	2b23      	cmp	r3, #35	; 0x23
 801a8f0:	d03e      	beq.n	801a970 <STM32Ipl_ReadImage+0xdf4>
								if (('0' <= sector[0]) && (sector[0] <= '9')) {
 801a8f2:	3b30      	subs	r3, #48	; 0x30
 801a8f4:	b2da      	uxtb	r2, r3
									number = sector[0] - '0';
 801a8f6:	2a09      	cmp	r2, #9
 801a8f8:	bf96      	itet	ls
 801a8fa:	4698      	movls	r8, r3
 801a8fc:	2400      	movhi	r4, #0
 801a8fe:	2402      	movls	r4, #2
							if ((f_read(fp, sector, 1, &bytesRead) != FR_OK) || bytesRead != 1)
 801a900:	463b      	mov	r3, r7
 801a902:	2201      	movs	r2, #1
 801a904:	4629      	mov	r1, r5
 801a906:	a82a      	add	r0, sp, #168	; 0xa8
 801a908:	f7fd fa26 	bl	8017d58 <f_read>
 801a90c:	2800      	cmp	r0, #0
 801a90e:	f47f ab5e 	bne.w	8019fce <STM32Ipl_ReadImage+0x452>
 801a912:	683a      	ldr	r2, [r7, #0]
 801a914:	2a01      	cmp	r2, #1
 801a916:	f47f ab5a 	bne.w	8019fce <STM32Ipl_ReadImage+0x452>
						if (mode == EAT_WHITESPACE) {
 801a91a:	2c00      	cmp	r4, #0
 801a91c:	d0e6      	beq.n	801a8ec <STM32Ipl_ReadImage+0xd70>
							if (mode == EAT_COMMENT) {
 801a91e:	2c01      	cmp	r4, #1
										number = (number * 10) + sector[0] - '0';
 801a920:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 801a924:	f04f 0402 	mov.w	r4, #2
							if (mode == EAT_COMMENT) {
 801a928:	d018      	beq.n	801a95c <STM32Ipl_ReadImage+0xde0>
									if (('0' <= sector[0]) && (sector[0] <= '9')) {
 801a92a:	7829      	ldrb	r1, [r5, #0]
 801a92c:	3930      	subs	r1, #48	; 0x30
 801a92e:	fa5f fc81 	uxtb.w	ip, r1
 801a932:	f1bc 0f09 	cmp.w	ip, #9
 801a936:	f200 8083 	bhi.w	801aa40 <STM32Ipl_ReadImage+0xec4>
										number = (number * 10) + sector[0] - '0';
 801a93a:	eb01 0843 	add.w	r8, r1, r3, lsl #1
					} while (!valid);
 801a93e:	e7df      	b.n	801a900 <STM32Ipl_ReadImage+0xd84>
									if ((sector[0] == '\n') || (sector[0] == '\r')) {
 801a940:	782b      	ldrb	r3, [r5, #0]
 801a942:	e797      	b.n	801a874 <STM32Ipl_ReadImage+0xcf8>
									mode = EAT_COMMENT;
 801a944:	2401      	movs	r4, #1
 801a946:	e79e      	b.n	801a886 <STM32Ipl_ReadImage+0xd0a>
									if ((sector[0] == '\n') || (sector[0] == '\r')) {
 801a948:	782c      	ldrb	r4, [r5, #0]
 801a94a:	2c0d      	cmp	r4, #13
 801a94c:	bf18      	it	ne
 801a94e:	2c0a      	cmpne	r4, #10
 801a950:	bf0c      	ite	eq
 801a952:	2401      	moveq	r4, #1
 801a954:	2400      	movne	r4, #0
										mode = EAT_NUMBER;
 801a956:	f084 0401 	eor.w	r4, r4, #1
 801a95a:	e794      	b.n	801a886 <STM32Ipl_ReadImage+0xd0a>
								if ((sector[0] == '\n') || (sector[0] == '\r')) {
 801a95c:	782c      	ldrb	r4, [r5, #0]
 801a95e:	2c0d      	cmp	r4, #13
 801a960:	bf18      	it	ne
 801a962:	2c0a      	cmpne	r4, #10
 801a964:	bf0c      	ite	eq
 801a966:	2401      	moveq	r4, #1
 801a968:	2400      	movne	r4, #0
									mode = EAT_NUMBER;
 801a96a:	f084 0401 	eor.w	r4, r4, #1
 801a96e:	e7c7      	b.n	801a900 <STM32Ipl_ReadImage+0xd84>
								mode = EAT_COMMENT;
 801a970:	2401      	movs	r4, #1
 801a972:	e7c5      	b.n	801a900 <STM32Ipl_ReadImage+0xd84>
 801a974:	f1a8 0102 	sub.w	r1, r8, #2
				for (uint32_t j = 0; j < width; j++) {
 801a978:	463a      	mov	r2, r7
 801a97a:	2300      	movs	r3, #0
 801a97c:	3301      	adds	r3, #1
					uint16_t value = *inPixel;
 801a97e:	f831 0f02 	ldrh.w	r0, [r1, #2]!
				for (uint32_t j = 0; j < width; j++) {
 801a982:	429c      	cmp	r4, r3
 801a984:	f822 0b02 	strh.w	r0, [r2], #2
 801a988:	d1f8      	bne.n	801a97c <STM32Ipl_ReadImage+0xe00>
 801a98a:	f7ff bafe 	b.w	8019f8a <STM32Ipl_ReadImage+0x40e>
		return stm32ipl_err_OpeningFile;
 801a98e:	f06f 0405 	mvn.w	r4, #5
 801a992:	f7ff b93a 	b.w	8019c0a <STM32Ipl_ReadImage+0x8e>
 801a996:	9b04      	ldr	r3, [sp, #16]
 801a998:	4619      	mov	r1, r3
 801a99a:	9306      	str	r3, [sp, #24]
 801a99c:	f7ff ba9c 	b.w	8019ed8 <STM32Ipl_ReadImage+0x35c>
 801a9a0:	9e04      	ldr	r6, [sp, #16]
 801a9a2:	f7ff bbd8 	b.w	801a156 <STM32Ipl_ReadImage+0x5da>
 801a9a6:	f8dd b014 	ldr.w	fp, [sp, #20]
			xfree(lineData);
 801a9aa:	4628      	mov	r0, r5
	return stm32ipl_err_Ok;
 801a9ac:	2400      	movs	r4, #0
			xfree(lineData);
 801a9ae:	f000 fb0b 	bl	801afc8 <xfree>
			STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_RGB888, outData);
 801a9b2:	9b06      	ldr	r3, [sp, #24]
 801a9b4:	9a07      	ldr	r2, [sp, #28]
 801a9b6:	4659      	mov	r1, fp
 801a9b8:	9300      	str	r3, [sp, #0]
 801a9ba:	2304      	movs	r3, #4
 801a9bc:	9803      	ldr	r0, [sp, #12]
 801a9be:	f7fe fd83 	bl	80194c8 <STM32Ipl_Init>
			break;
 801a9c2:	f7ff b91f 	b.w	8019c04 <STM32Ipl_ReadImage+0x88>
					line += lineSize;
 801a9c6:	4453      	add	r3, sl
 801a9c8:	9306      	str	r3, [sp, #24]
 801a9ca:	e68f      	b.n	801a6ec <STM32Ipl_ReadImage+0xb70>
						line += lineSize;
 801a9cc:	4453      	add	r3, sl
 801a9ce:	9307      	str	r3, [sp, #28]
 801a9d0:	e6b2      	b.n	801a738 <STM32Ipl_ReadImage+0xbbc>
						line += lineSize;
 801a9d2:	444f      	add	r7, r9
 801a9d4:	e486      	b.n	801a2e4 <STM32Ipl_ReadImage+0x768>
					return stm32ipl_err_OutOfMemory;
 801a9d6:	f06f 0402 	mvn.w	r4, #2
 801a9da:	f7ff b913 	b.w	8019c04 <STM32Ipl_ReadImage+0x88>
					for (uint8_t counter = 0; counter < 3; counter++) {
 801a9de:	f10d 026f 	add.w	r2, sp, #111	; 0x6f
						pixel[counter] = number;
 801a9e2:	f808 7b01 	strb.w	r7, [r8], #1
					for (uint8_t counter = 0; counter < 3; counter++) {
 801a9e6:	4542      	cmp	r2, r8
 801a9e8:	f47f af43 	bne.w	801a872 <STM32Ipl_ReadImage+0xcf6>
					*outPixel++ = pixel[2];
 801a9ec:	f899 3002 	ldrb.w	r3, [r9, #2]
				for (uint32_t j = 0; j < width; j++) {
 801a9f0:	f10a 0a01 	add.w	sl, sl, #1
 801a9f4:	465a      	mov	r2, fp
 801a9f6:	f10b 0b03 	add.w	fp, fp, #3
					*outPixel++ = pixel[2];
 801a9fa:	f80b 3c06 	strb.w	r3, [fp, #-6]
					*outPixel++ = pixel[1];
 801a9fe:	f899 3001 	ldrb.w	r3, [r9, #1]
 801aa02:	f80b 3c05 	strb.w	r3, [fp, #-5]
					*outPixel++ = pixel[0];
 801aa06:	f899 3000 	ldrb.w	r3, [r9]
 801aa0a:	f80b 3c04 	strb.w	r3, [fp, #-4]
				for (uint32_t j = 0; j < width; j++) {
 801aa0e:	9b05      	ldr	r3, [sp, #20]
 801aa10:	4553      	cmp	r3, sl
 801aa12:	f63f af2c 	bhi.w	801a86e <STM32Ipl_ReadImage+0xcf2>
			for (uint32_t i = 0; i < height; i++) {
 801aa16:	9b04      	ldr	r3, [sp, #16]
 801aa18:	9906      	ldr	r1, [sp, #24]
 801aa1a:	3301      	adds	r3, #1
 801aa1c:	428b      	cmp	r3, r1
 801aa1e:	9304      	str	r3, [sp, #16]
 801aa20:	f4ff af21 	bcc.w	801a866 <STM32Ipl_ReadImage+0xcea>
			STM32Ipl_Init(img, width, height, IMAGE_BPP_RGB888, outData);
 801aa24:	4603      	mov	r3, r0
 801aa26:	9a07      	ldr	r2, [sp, #28]
 801aa28:	9803      	ldr	r0, [sp, #12]
	return stm32ipl_err_Ok;
 801aa2a:	461c      	mov	r4, r3
			STM32Ipl_Init(img, width, height, IMAGE_BPP_RGB888, outData);
 801aa2c:	9200      	str	r2, [sp, #0]
 801aa2e:	2304      	movs	r3, #4
 801aa30:	e9dd 6a05 	ldrd	r6, sl, [sp, #20]
 801aa34:	4652      	mov	r2, sl
 801aa36:	4631      	mov	r1, r6
 801aa38:	f7fe fd46 	bl	80194c8 <STM32Ipl_Init>
			break;
 801aa3c:	f7ff b8e2 	b.w	8019c04 <STM32Ipl_ReadImage+0x88>
				for (uint32_t j = 0; j < width; j++) {
 801aa40:	9b05      	ldr	r3, [sp, #20]
					outData[offset + j] = (uint8_t)number;
 801aa42:	f809 8b01 	strb.w	r8, [r9], #1
				for (uint32_t j = 0; j < width; j++) {
 801aa46:	444b      	add	r3, r9
 801aa48:	429e      	cmp	r6, r3
 801aa4a:	f63f af4d 	bhi.w	801a8e8 <STM32Ipl_ReadImage+0xd6c>
			for (uint32_t i = 0; i < height; i++) {
 801aa4e:	9b06      	ldr	r3, [sp, #24]
 801aa50:	44b3      	add	fp, r6
 801aa52:	9905      	ldr	r1, [sp, #20]
 801aa54:	3301      	adds	r3, #1
 801aa56:	1b89      	subs	r1, r1, r6
 801aa58:	4553      	cmp	r3, sl
 801aa5a:	9306      	str	r3, [sp, #24]
 801aa5c:	9105      	str	r1, [sp, #20]
 801aa5e:	f4ff af40 	bcc.w	801a8e2 <STM32Ipl_ReadImage+0xd66>
			STM32Ipl_Init(img, width, height, IMAGE_BPP_GRAYSCALE, outData);
 801aa62:	4613      	mov	r3, r2
 801aa64:	9a04      	ldr	r2, [sp, #16]
 801aa66:	4607      	mov	r7, r0
 801aa68:	4631      	mov	r1, r6
 801aa6a:	9200      	str	r2, [sp, #0]
 801aa6c:	4652      	mov	r2, sl
 801aa6e:	9803      	ldr	r0, [sp, #12]
	return stm32ipl_err_Ok;
 801aa70:	463c      	mov	r4, r7
			STM32Ipl_Init(img, width, height, IMAGE_BPP_GRAYSCALE, outData);
 801aa72:	f7fe fd29 	bl	80194c8 <STM32Ipl_Init>
			break;
 801aa76:	f7ff b8c5 	b.w	8019c04 <STM32Ipl_ReadImage+0x88>
						if (f_lseek(fp, line) != FR_OK) {
 801aa7a:	4619      	mov	r1, r3
 801aa7c:	a82a      	add	r0, sp, #168	; 0xa8
 801aa7e:	f7fd fc7f 	bl	8018380 <f_lseek>
 801aa82:	2800      	cmp	r0, #0
 801aa84:	f43f ae32 	beq.w	801a6ec <STM32Ipl_ReadImage+0xb70>
							xfree(lineData);
 801aa88:	4640      	mov	r0, r8
							return stm32ipl_err_SeekingFile;
 801aa8a:	f06f 0409 	mvn.w	r4, #9
							xfree(lineData);
 801aa8e:	f000 fa9b 	bl	801afc8 <xfree>
							xfree(outData);
 801aa92:	ee18 0a10 	vmov	r0, s16
 801aa96:	f000 fa97 	bl	801afc8 <xfree>
							return stm32ipl_err_SeekingFile;
 801aa9a:	f7ff b8b3 	b.w	8019c04 <STM32Ipl_ReadImage+0x88>
							if (f_lseek(fp, line) != FR_OK) {
 801aa9e:	4619      	mov	r1, r3
 801aaa0:	a82a      	add	r0, sp, #168	; 0xa8
 801aaa2:	f7fd fc6d 	bl	8018380 <f_lseek>
 801aaa6:	2800      	cmp	r0, #0
 801aaa8:	f43f ae46 	beq.w	801a738 <STM32Ipl_ReadImage+0xbbc>
								xfree(lineData);
 801aaac:	ee18 0a90 	vmov	r0, s17
								return stm32ipl_err_SeekingFile;
 801aab0:	f06f 0409 	mvn.w	r4, #9
								xfree(lineData);
 801aab4:	f000 fa88 	bl	801afc8 <xfree>
								xfree(outData);
 801aab8:	ee18 0a10 	vmov	r0, s16
 801aabc:	f000 fa84 	bl	801afc8 <xfree>
								return stm32ipl_err_SeekingFile;
 801aac0:	f7ff b8a0 	b.w	8019c04 <STM32Ipl_ReadImage+0x88>
							if (f_lseek(fp, line) != FR_OK) {
 801aac4:	4639      	mov	r1, r7
 801aac6:	a82a      	add	r0, sp, #168	; 0xa8
 801aac8:	f7fd fc5a 	bl	8018380 <f_lseek>
 801aacc:	2800      	cmp	r0, #0
 801aace:	f43f ac09 	beq.w	801a2e4 <STM32Ipl_ReadImage+0x768>
								xfree(lineData);
 801aad2:	4630      	mov	r0, r6
								return stm32ipl_err_SeekingFile;
 801aad4:	f06f 0409 	mvn.w	r4, #9
								xfree(lineData);
 801aad8:	f000 fa76 	bl	801afc8 <xfree>
								xfree(outData);
 801aadc:	ee18 0a10 	vmov	r0, s16
 801aae0:	f000 fa72 	bl	801afc8 <xfree>
								return stm32ipl_err_SeekingFile;
 801aae4:	f7ff b88e 	b.w	8019c04 <STM32Ipl_ReadImage+0x88>
			if ((palette[0] == 0x0 && palette[1] == 0xFFFFFF) || (palette[0] == 0xFFFFFF && palette[1] == 0x0)) {
 801aae8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801aaec:	4293      	cmp	r3, r2
 801aaee:	f47f acb9 	bne.w	801a464 <STM32Ipl_ReadImage+0x8e8>
 801aaf2:	686b      	ldr	r3, [r5, #4]
 801aaf4:	2b00      	cmp	r3, #0
 801aaf6:	f47f acb5 	bne.w	801a464 <STM32Ipl_ReadImage+0x8e8>
				outData = xalloc0(STM32Ipl_DataSize(width, abs(height), IMAGE_BPP_BINARY));
 801aafa:	9a05      	ldr	r2, [sp, #20]
 801aafc:	4658      	mov	r0, fp
 801aafe:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 801ab02:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 801ab06:	2200      	movs	r2, #0
 801ab08:	4619      	mov	r1, r3
 801ab0a:	9308      	str	r3, [sp, #32]
 801ab0c:	f7fe fcf2 	bl	80194f4 <STM32Ipl_DataSize>
 801ab10:	f000 fa4e 	bl	801afb0 <xalloc0>
				if (!outData)
 801ab14:	ee08 0a90 	vmov	s17, r0
 801ab18:	2800      	cmp	r0, #0
 801ab1a:	f43f af5c 	beq.w	801a9d6 <STM32Ipl_ReadImage+0xe5a>
				lineData = xalloc(lineSize);
 801ab1e:	4650      	mov	r0, sl
 801ab20:	f000 fa44 	bl	801afac <xalloc>
				if (!lineData) {
 801ab24:	ee08 0a10 	vmov	s16, r0
 801ab28:	2800      	cmp	r0, #0
 801ab2a:	f000 8190 	beq.w	801ae4e <STM32Ipl_ReadImage+0x12d2>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 801ab2e:	9b05      	ldr	r3, [sp, #20]
 801ab30:	2b00      	cmp	r3, #0
 801ab32:	f340 8167 	ble.w	801ae04 <STM32Ipl_ReadImage+0x1288>
 801ab36:	3b01      	subs	r3, #1
 801ab38:	fb0a f303 	mul.w	r3, sl, r3
 801ab3c:	9a04      	ldr	r2, [sp, #16]
				if (f_lseek(fp, line) != FR_OK) {
 801ab3e:	a82a      	add	r0, sp, #168	; 0xa8
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 801ab40:	18d3      	adds	r3, r2, r3
				if (f_lseek(fp, line) != FR_OK) {
 801ab42:	4619      	mov	r1, r3
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 801ab44:	461e      	mov	r6, r3
				if (f_lseek(fp, line) != FR_OK) {
 801ab46:	f7fd fc1b 	bl	8018380 <f_lseek>
 801ab4a:	2800      	cmp	r0, #0
 801ab4c:	f040 80fe 	bne.w	801ad4c <STM32Ipl_ReadImage+0x11d0>
				for (uint32_t i = 0; i < abs(height); i++) {
 801ab50:	9b05      	ldr	r3, [sp, #20]
 801ab52:	2b00      	cmp	r3, #0
 801ab54:	d05a      	beq.n	801ac0c <STM32Ipl_ReadImage+0x1090>
 801ab56:	ee18 4a90 	vmov	r4, s17
 801ab5a:	46b0      	mov	r8, r6
 801ab5c:	9006      	str	r0, [sp, #24]
					if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 801ab5e:	464b      	mov	r3, r9
 801ab60:	4652      	mov	r2, sl
 801ab62:	ee18 1a10 	vmov	r1, s16
 801ab66:	a82a      	add	r0, sp, #168	; 0xa8
 801ab68:	f7fd f8f6 	bl	8017d58 <f_read>
 801ab6c:	2800      	cmp	r0, #0
 801ab6e:	f040 813d 	bne.w	801adec <STM32Ipl_ReadImage+0x1270>
 801ab72:	f8d9 3000 	ldr.w	r3, [r9]
 801ab76:	459a      	cmp	sl, r3
 801ab78:	f040 8138 	bne.w	801adec <STM32Ipl_ReadImage+0x1270>
					for (uint32_t j = 0; j < width; k--, j++) {
 801ab7c:	f1bb 0f00 	cmp.w	fp, #0
 801ab80:	d034      	beq.n	801abec <STM32Ipl_ReadImage+0x1070>
					value = 0;
 801ab82:	4684      	mov	ip, r0
					for (uint32_t j = 0; j < width; k--, j++) {
 801ab84:	ee18 2a10 	vmov	r2, s16
 801ab88:	4606      	mov	r6, r0
						IMAGE_PUT_BINARY_PIXEL_FAST(outRow, j, palette[(value >> k) & 1]);
 801ab8a:	f04f 0e01 	mov.w	lr, #1
 801ab8e:	f8cd a01c 	str.w	sl, [sp, #28]
 801ab92:	e01c      	b.n	801abce <STM32Ipl_ReadImage+0x1052>
 801ab94:	4603      	mov	r3, r0
					for (uint32_t j = 0; j < width; k--, j++) {
 801ab96:	b2f8      	uxtb	r0, r7
						IMAGE_PUT_BINARY_PIXEL_FAST(outRow, j, palette[(value >> k) & 1]);
 801ab98:	fa4c f303 	asr.w	r3, ip, r3
 801ab9c:	f006 011f 	and.w	r1, r6, #31
 801aba0:	ea4f 1a56 	mov.w	sl, r6, lsr #5
					for (uint32_t j = 0; j < width; k--, j++) {
 801aba4:	3601      	adds	r6, #1
						IMAGE_PUT_BINARY_PIXEL_FAST(outRow, j, palette[(value >> k) & 1]);
 801aba6:	f003 0301 	and.w	r3, r3, #1
 801abaa:	f854 702a 	ldr.w	r7, [r4, sl, lsl #2]
					for (uint32_t j = 0; j < width; k--, j++) {
 801abae:	45b3      	cmp	fp, r6
						IMAGE_PUT_BINARY_PIXEL_FAST(outRow, j, palette[(value >> k) & 1]);
 801abb0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801abb4:	f003 0301 	and.w	r3, r3, #1
 801abb8:	fa03 f301 	lsl.w	r3, r3, r1
 801abbc:	fa0e f101 	lsl.w	r1, lr, r1
 801abc0:	ea27 0701 	bic.w	r7, r7, r1
 801abc4:	ea43 0307 	orr.w	r3, r3, r7
 801abc8:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
					for (uint32_t j = 0; j < width; k--, j++) {
 801abcc:	d00c      	beq.n	801abe8 <STM32Ipl_ReadImage+0x106c>
						if (!(j % 8)) {
 801abce:	f016 0f07 	tst.w	r6, #7
							value = (*inData++);
 801abd2:	4611      	mov	r1, r2
					for (uint32_t j = 0; j < width; k--, j++) {
 801abd4:	f100 37ff 	add.w	r7, r0, #4294967295
							value = (*inData++);
 801abd8:	f04f 0307 	mov.w	r3, #7
						if (!(j % 8)) {
 801abdc:	d1da      	bne.n	801ab94 <STM32Ipl_ReadImage+0x1018>
							value = (*inData++);
 801abde:	f811 cb01 	ldrb.w	ip, [r1], #1
 801abe2:	2006      	movs	r0, #6
 801abe4:	460a      	mov	r2, r1
 801abe6:	e7d7      	b.n	801ab98 <STM32Ipl_ReadImage+0x101c>
 801abe8:	f8dd a01c 	ldr.w	sl, [sp, #28]
					if (height > 0) {
 801abec:	9b05      	ldr	r3, [sp, #20]
					outRow += offset;
 801abee:	4454      	add	r4, sl
					if (height > 0) {
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	dd19      	ble.n	801ac28 <STM32Ipl_ReadImage+0x10ac>
						line -= lineSize;
 801abf4:	eba8 080a 	sub.w	r8, r8, sl
						if (line >= dataOffset) {
 801abf8:	9b04      	ldr	r3, [sp, #16]
 801abfa:	4543      	cmp	r3, r8
 801abfc:	f240 809f 	bls.w	801ad3e <STM32Ipl_ReadImage+0x11c2>
				for (uint32_t i = 0; i < abs(height); i++) {
 801ac00:	9b06      	ldr	r3, [sp, #24]
 801ac02:	9a08      	ldr	r2, [sp, #32]
 801ac04:	3301      	adds	r3, #1
 801ac06:	429a      	cmp	r2, r3
 801ac08:	9306      	str	r3, [sp, #24]
 801ac0a:	d1a8      	bne.n	801ab5e <STM32Ipl_ReadImage+0xfe2>
				xfree(lineData);
 801ac0c:	ee18 0a10 	vmov	r0, s16
 801ac10:	f000 f9da 	bl	801afc8 <xfree>
				STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_BINARY, outData);
 801ac14:	9a08      	ldr	r2, [sp, #32]
 801ac16:	4659      	mov	r1, fp
 801ac18:	9803      	ldr	r0, [sp, #12]
 801ac1a:	2300      	movs	r3, #0
 801ac1c:	edcd 8a00 	vstr	s17, [sp]
 801ac20:	f7fe fc52 	bl	80194c8 <STM32Ipl_Init>
			if ((palette[0] == 0x0 && palette[1] == 0xFFFFFF) || (palette[0] == 0xFFFFFF && palette[1] == 0x0)) {
 801ac24:	f7ff bb6e 	b.w	801a304 <STM32Ipl_ReadImage+0x788>
						line += lineSize;
 801ac28:	44d0      	add	r8, sl
 801ac2a:	e7e9      	b.n	801ac00 <STM32Ipl_ReadImage+0x1084>
				outData = xalloc(width * abs(height) * 2);
 801ac2c:	9a05      	ldr	r2, [sp, #20]
 801ac2e:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 801ac32:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 801ac36:	fb03 f00b 	mul.w	r0, r3, fp
 801ac3a:	9307      	str	r3, [sp, #28]
 801ac3c:	0040      	lsls	r0, r0, #1
 801ac3e:	f000 f9b5 	bl	801afac <xalloc>
				if (!outData)
 801ac42:	ee08 0a10 	vmov	s16, r0
 801ac46:	2800      	cmp	r0, #0
 801ac48:	f43f aec5 	beq.w	801a9d6 <STM32Ipl_ReadImage+0xe5a>
				lineData = xalloc(lineSize);
 801ac4c:	4650      	mov	r0, sl
 801ac4e:	f000 f9ad 	bl	801afac <xalloc>
				if (!lineData) {
 801ac52:	4607      	mov	r7, r0
 801ac54:	2800      	cmp	r0, #0
 801ac56:	f000 808a 	beq.w	801ad6e <STM32Ipl_ReadImage+0x11f2>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 801ac5a:	9b05      	ldr	r3, [sp, #20]
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	f340 80c3 	ble.w	801ade8 <STM32Ipl_ReadImage+0x126c>
 801ac62:	3b01      	subs	r3, #1
 801ac64:	fb0a f303 	mul.w	r3, sl, r3
 801ac68:	9a04      	ldr	r2, [sp, #16]
				if (f_lseek(fp, line) != FR_OK) {
 801ac6a:	a82a      	add	r0, sp, #168	; 0xa8
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 801ac6c:	18d3      	adds	r3, r2, r3
				if (f_lseek(fp, line) != FR_OK) {
 801ac6e:	4619      	mov	r1, r3
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 801ac70:	9306      	str	r3, [sp, #24]
				if (f_lseek(fp, line) != FR_OK) {
 801ac72:	f7fd fb85 	bl	8018380 <f_lseek>
 801ac76:	2800      	cmp	r0, #0
 801ac78:	d156      	bne.n	801ad28 <STM32Ipl_ReadImage+0x11ac>
				for (uint32_t i = 0; i < abs(height); i++) {
 801ac7a:	9b07      	ldr	r3, [sp, #28]
 801ac7c:	930a      	str	r3, [sp, #40]	; 0x28
 801ac7e:	9b05      	ldr	r3, [sp, #20]
 801ac80:	2b00      	cmp	r3, #0
 801ac82:	f000 80d9 	beq.w	801ae38 <STM32Ipl_ReadImage+0x12bc>
 801ac86:	ea4f 034b 	mov.w	r3, fp, lsl #1
 801ac8a:	eb07 060b 	add.w	r6, r7, fp
						*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 801ac8e:	f8cd b020 	str.w	fp, [sp, #32]
 801ac92:	4680      	mov	r8, r0
 801ac94:	46cb      	mov	fp, r9
 801ac96:	4c73      	ldr	r4, [pc, #460]	; (801ae64 <STM32Ipl_ReadImage+0x12e8>)
 801ac98:	ee18 9a10 	vmov	r9, s16
 801ac9c:	9309      	str	r3, [sp, #36]	; 0x24
					if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 801ac9e:	465b      	mov	r3, fp
 801aca0:	4652      	mov	r2, sl
 801aca2:	4639      	mov	r1, r7
 801aca4:	a82a      	add	r0, sp, #168	; 0xa8
 801aca6:	f7fd f857 	bl	8017d58 <f_read>
 801acaa:	2800      	cmp	r0, #0
 801acac:	d175      	bne.n	801ad9a <STM32Ipl_ReadImage+0x121e>
 801acae:	f8db 2000 	ldr.w	r2, [fp]
 801acb2:	4592      	cmp	sl, r2
 801acb4:	d171      	bne.n	801ad9a <STM32Ipl_ReadImage+0x121e>
					for (uint32_t j = 0; j < width; j++) {
 801acb6:	9b08      	ldr	r3, [sp, #32]
 801acb8:	b1bb      	cbz	r3, 801acea <STM32Ipl_ReadImage+0x116e>
 801acba:	46cc      	mov	ip, r9
 801acbc:	4638      	mov	r0, r7
						uint8_t r = palette[index] >> 16;
 801acbe:	f810 3b01 	ldrb.w	r3, [r0], #1
 801acc2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
					for (uint32_t j = 0; j < width; j++) {
 801acc6:	42b0      	cmp	r0, r6
						*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 801acc8:	ea04 2113 	and.w	r1, r4, r3, lsr #8
 801accc:	f3c3 02c4 	ubfx	r2, r3, #3, #5
 801acd0:	ea4f 1353 	mov.w	r3, r3, lsr #5
 801acd4:	ea42 0201 	orr.w	r2, r2, r1
 801acd8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801acdc:	ea43 0302 	orr.w	r3, r3, r2
 801ace0:	f82c 3b02 	strh.w	r3, [ip], #2
					for (uint32_t j = 0; j < width; j++) {
 801ace4:	d1eb      	bne.n	801acbe <STM32Ipl_ReadImage+0x1142>
						*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 801ace6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ace8:	4499      	add	r9, r3
					if (height > 0) {
 801acea:	9b05      	ldr	r3, [sp, #20]
 801acec:	2b00      	cmp	r3, #0
						line -= lineSize;
 801acee:	9b06      	ldr	r3, [sp, #24]
					if (height > 0) {
 801acf0:	dd11      	ble.n	801ad16 <STM32Ipl_ReadImage+0x119a>
						line -= lineSize;
 801acf2:	eba3 030a 	sub.w	r3, r3, sl
						if (line >= dataOffset) {
 801acf6:	9a04      	ldr	r2, [sp, #16]
 801acf8:	429a      	cmp	r2, r3
						line -= lineSize;
 801acfa:	9306      	str	r3, [sp, #24]
						if (line >= dataOffset) {
 801acfc:	d90e      	bls.n	801ad1c <STM32Ipl_ReadImage+0x11a0>
				for (uint32_t i = 0; i < abs(height); i++) {
 801acfe:	f108 0801 	add.w	r8, r8, #1
 801ad02:	9b07      	ldr	r3, [sp, #28]
 801ad04:	4598      	cmp	r8, r3
 801ad06:	d1ca      	bne.n	801ac9e <STM32Ipl_ReadImage+0x1122>
 801ad08:	f8dd b020 	ldr.w	fp, [sp, #32]
				xfree(lineData);
 801ad0c:	4638      	mov	r0, r7
 801ad0e:	f000 f95b 	bl	801afc8 <xfree>
				STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_RGB565, outData);
 801ad12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ad14:	e51d      	b.n	801a752 <STM32Ipl_ReadImage+0xbd6>
						line += lineSize;
 801ad16:	4453      	add	r3, sl
 801ad18:	9306      	str	r3, [sp, #24]
 801ad1a:	e7f0      	b.n	801acfe <STM32Ipl_ReadImage+0x1182>
							if (f_lseek(fp, line) != FR_OK) {
 801ad1c:	4619      	mov	r1, r3
 801ad1e:	a82a      	add	r0, sp, #168	; 0xa8
 801ad20:	f7fd fb2e 	bl	8018380 <f_lseek>
 801ad24:	2800      	cmp	r0, #0
 801ad26:	d0ea      	beq.n	801acfe <STM32Ipl_ReadImage+0x1182>
								xfree(lineData);
 801ad28:	4638      	mov	r0, r7
								return stm32ipl_err_SeekingFile;
 801ad2a:	f06f 0409 	mvn.w	r4, #9
								xfree(lineData);
 801ad2e:	f000 f94b 	bl	801afc8 <xfree>
								xfree(outData);
 801ad32:	ee18 0a10 	vmov	r0, s16
 801ad36:	f000 f947 	bl	801afc8 <xfree>
								return stm32ipl_err_SeekingFile;
 801ad3a:	f7fe bf63 	b.w	8019c04 <STM32Ipl_ReadImage+0x88>
							if (f_lseek(fp, line) != FR_OK) {
 801ad3e:	4641      	mov	r1, r8
 801ad40:	a82a      	add	r0, sp, #168	; 0xa8
 801ad42:	f7fd fb1d 	bl	8018380 <f_lseek>
 801ad46:	2800      	cmp	r0, #0
 801ad48:	f43f af5a 	beq.w	801ac00 <STM32Ipl_ReadImage+0x1084>
								xfree(lineData);
 801ad4c:	ee18 0a10 	vmov	r0, s16
								return stm32ipl_err_SeekingFile;
 801ad50:	f06f 0409 	mvn.w	r4, #9
								xfree(lineData);
 801ad54:	f000 f938 	bl	801afc8 <xfree>
								xfree(outData);
 801ad58:	ee18 0a90 	vmov	r0, s17
 801ad5c:	f000 f934 	bl	801afc8 <xfree>
								return stm32ipl_err_SeekingFile;
 801ad60:	f7fe bf50 	b.w	8019c04 <STM32Ipl_ReadImage+0x88>
 801ad64:	9b04      	ldr	r3, [sp, #16]
 801ad66:	4619      	mov	r1, r3
 801ad68:	9306      	str	r3, [sp, #24]
 801ad6a:	f7ff bb07 	b.w	801a37c <STM32Ipl_ReadImage+0x800>
					xfree(outData);
 801ad6e:	ee18 0a10 	vmov	r0, s16
					return stm32ipl_err_OutOfMemory;
 801ad72:	f06f 0402 	mvn.w	r4, #2
					xfree(outData);
 801ad76:	f000 f927 	bl	801afc8 <xfree>
					return stm32ipl_err_OutOfMemory;
 801ad7a:	f7fe bf43 	b.w	8019c04 <STM32Ipl_ReadImage+0x88>
					xfree(lineData);
 801ad7e:	4640      	mov	r0, r8
					return stm32ipl_err_ReadingFile;
 801ad80:	f06f 0407 	mvn.w	r4, #7
					xfree(lineData);
 801ad84:	f000 f920 	bl	801afc8 <xfree>
					xfree(outData);
 801ad88:	ee18 0a10 	vmov	r0, s16
 801ad8c:	f000 f91c 	bl	801afc8 <xfree>
					return stm32ipl_err_ReadingFile;
 801ad90:	f7fe bf38 	b.w	8019c04 <STM32Ipl_ReadImage+0x88>
			for (uint32_t i = 0; i < abs(height); i++) {
 801ad94:	9313      	str	r3, [sp, #76]	; 0x4c
 801ad96:	f7ff b90d 	b.w	8019fb4 <STM32Ipl_ReadImage+0x438>
						xfree(lineData);
 801ad9a:	4638      	mov	r0, r7
						return stm32ipl_err_ReadingFile;
 801ad9c:	f06f 0407 	mvn.w	r4, #7
						xfree(lineData);
 801ada0:	f000 f912 	bl	801afc8 <xfree>
						xfree(outData);
 801ada4:	ee18 0a10 	vmov	r0, s16
 801ada8:	f000 f90e 	bl	801afc8 <xfree>
						return stm32ipl_err_ReadingFile;
 801adac:	f7fe bf2a 	b.w	8019c04 <STM32Ipl_ReadImage+0x88>
						xfree(lineData);
 801adb0:	4630      	mov	r0, r6
						return stm32ipl_err_ReadingFile;
 801adb2:	f06f 0407 	mvn.w	r4, #7
						xfree(lineData);
 801adb6:	f000 f907 	bl	801afc8 <xfree>
						xfree(outData);
 801adba:	ee18 0a10 	vmov	r0, s16
 801adbe:	f000 f903 	bl	801afc8 <xfree>
						return stm32ipl_err_ReadingFile;
 801adc2:	f7fe bf1f 	b.w	8019c04 <STM32Ipl_ReadImage+0x88>
						xfree(lineData);
 801adc6:	ee18 0a90 	vmov	r0, s17
						return stm32ipl_err_ReadingFile;
 801adca:	f06f 0407 	mvn.w	r4, #7
						xfree(lineData);
 801adce:	f000 f8fb 	bl	801afc8 <xfree>
						xfree(outData);
 801add2:	ee18 0a10 	vmov	r0, s16
 801add6:	f000 f8f7 	bl	801afc8 <xfree>
						return stm32ipl_err_ReadingFile;
 801adda:	f7fe bf13 	b.w	8019c04 <STM32Ipl_ReadImage+0x88>
 801adde:	9b04      	ldr	r3, [sp, #16]
 801ade0:	4619      	mov	r1, r3
 801ade2:	9307      	str	r3, [sp, #28]
 801ade4:	f7ff bb60 	b.w	801a4a8 <STM32Ipl_ReadImage+0x92c>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 801ade8:	2300      	movs	r3, #0
 801adea:	e73d      	b.n	801ac68 <STM32Ipl_ReadImage+0x10ec>
						xfree(lineData);
 801adec:	ee18 0a10 	vmov	r0, s16
						return stm32ipl_err_ReadingFile;
 801adf0:	f06f 0407 	mvn.w	r4, #7
						xfree(lineData);
 801adf4:	f000 f8e8 	bl	801afc8 <xfree>
						xfree(outData);
 801adf8:	ee18 0a90 	vmov	r0, s17
 801adfc:	f000 f8e4 	bl	801afc8 <xfree>
						return stm32ipl_err_ReadingFile;
 801ae00:	f7fe bf00 	b.w	8019c04 <STM32Ipl_ReadImage+0x88>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 801ae04:	2300      	movs	r3, #0
 801ae06:	e699      	b.n	801ab3c <STM32Ipl_ReadImage+0xfc0>
		return stm32ipl_err_InvalidParameter;
 801ae08:	f06f 0401 	mvn.w	r4, #1
 801ae0c:	f7fe befa 	b.w	8019c04 <STM32Ipl_ReadImage+0x88>
				xfree(outData);
 801ae10:	980f      	ldr	r0, [sp, #60]	; 0x3c
				return stm32ipl_err_SeekingFile;
 801ae12:	f06f 0409 	mvn.w	r4, #9
				xfree(outData);
 801ae16:	f000 f8d7 	bl	801afc8 <xfree>
				return stm32ipl_err_SeekingFile;
 801ae1a:	f7fe bef3 	b.w	8019c04 <STM32Ipl_ReadImage+0x88>
		return stm32ipl_err_Generic;
 801ae1e:	f04f 34ff 	mov.w	r4, #4294967295
 801ae22:	f7fe beef 	b.w	8019c04 <STM32Ipl_ReadImage+0x88>
				xfree(outData);
 801ae26:	980f      	ldr	r0, [sp, #60]	; 0x3c
				return stm32ipl_err_OutOfMemory;
 801ae28:	f06f 0402 	mvn.w	r4, #2
				xfree(outData);
 801ae2c:	f000 f8cc 	bl	801afc8 <xfree>
				return stm32ipl_err_OutOfMemory;
 801ae30:	f7fe bee8 	b.w	8019c04 <STM32Ipl_ReadImage+0x88>
				for (uint32_t i = 0; i < abs(height); i++) {
 801ae34:	930b      	str	r3, [sp, #44]	; 0x2c
 801ae36:	e487      	b.n	801a748 <STM32Ipl_ReadImage+0xbcc>
				for (uint32_t i = 0; i < abs(height); i++) {
 801ae38:	930a      	str	r3, [sp, #40]	; 0x28
 801ae3a:	e767      	b.n	801ad0c <STM32Ipl_ReadImage+0x1190>
				xfree(outData);
 801ae3c:	9806      	ldr	r0, [sp, #24]
				return stm32ipl_err_OutOfMemory;
 801ae3e:	f06f 0402 	mvn.w	r4, #2
				xfree(outData);
 801ae42:	f000 f8c1 	bl	801afc8 <xfree>
				return stm32ipl_err_OutOfMemory;
 801ae46:	f7fe bedd 	b.w	8019c04 <STM32Ipl_ReadImage+0x88>
			for (uint32_t i = 0; i < abs(height); i++) {
 801ae4a:	9309      	str	r3, [sp, #36]	; 0x24
 801ae4c:	e456      	b.n	801a6fc <STM32Ipl_ReadImage+0xb80>
					xfree(outData);
 801ae4e:	ee18 0a90 	vmov	r0, s17
					return stm32ipl_err_OutOfMemory;
 801ae52:	f06f 0402 	mvn.w	r4, #2
					xfree(outData);
 801ae56:	f000 f8b7 	bl	801afc8 <xfree>
					return stm32ipl_err_OutOfMemory;
 801ae5a:	f7fe bed3 	b.w	8019c04 <STM32Ipl_ReadImage+0x88>
				for (uint32_t i = 0; i < abs(height); i++) {
 801ae5e:	9307      	str	r3, [sp, #28]
 801ae60:	f7ff ba45 	b.w	801a2ee <STM32Ipl_ReadImage+0x772>
 801ae64:	fffff800 	.word	0xfffff800

0801ae68 <STM32Ipl_WriteImage>:
 * filename	Name of the output file; if it is not valid, an error is returned.
 * return	stm32ipl_err_Ok on success, error otherwise.
 */
stm32ipl_err_t STM32Ipl_WriteImage(const image_t *img, const char *filename)
{
	if (!img || !img->data || !filename)
 801ae68:	2800      	cmp	r0, #0
 801ae6a:	f000 809a 	beq.w	801afa2 <STM32Ipl_WriteImage+0x13a>
{
 801ae6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!img || !img->data || !filename)
 801ae70:	68c3      	ldr	r3, [r0, #12]
 801ae72:	4604      	mov	r4, r0
 801ae74:	2b00      	cmp	r3, #0
 801ae76:	f000 8091 	beq.w	801af9c <STM32Ipl_WriteImage+0x134>
 801ae7a:	460d      	mov	r5, r1
 801ae7c:	2900      	cmp	r1, #0
 801ae7e:	f000 808d 	beq.w	801af9c <STM32Ipl_WriteImage+0x134>
		return stm32ipl_err_InvalidParameter;

	if (img->bpp != IMAGE_BPP_BINARY && img->bpp != IMAGE_BPP_GRAYSCALE && img->bpp != IMAGE_BPP_RGB565
 801ae82:	6883      	ldr	r3, [r0, #8]
 801ae84:	2b02      	cmp	r3, #2
 801ae86:	d901      	bls.n	801ae8c <STM32Ipl_WriteImage+0x24>
 801ae88:	2b04      	cmp	r3, #4
 801ae8a:	d12a      	bne.n	801aee2 <STM32Ipl_WriteImage+0x7a>
	len = strlen(filename);
 801ae8c:	4628      	mov	r0, r5
 801ae8e:	f7e5 fa87 	bl	80003a0 <strlen>
 801ae92:	4607      	mov	r7, r0
	upFilename = xalloc(len);
 801ae94:	f000 f88a 	bl	801afac <xalloc>
	strcpy(upFilename, filename);
 801ae98:	4629      	mov	r1, r5
	upFilename = xalloc(len);
 801ae9a:	4606      	mov	r6, r0
	strcpy(upFilename, filename);
 801ae9c:	f00b fc03 	bl	80266a6 <strcpy>
	for (size_t i = 0; i < len; i++)
 801aea0:	b1e7      	cbz	r7, 801aedc <STM32Ipl_WriteImage+0x74>
 801aea2:	f107 3eff 	add.w	lr, r7, #4294967295
 801aea6:	1e72      	subs	r2, r6, #1
 801aea8:	493f      	ldr	r1, [pc, #252]	; (801afa8 <STM32Ipl_WriteImage+0x140>)
 801aeaa:	44b6      	add	lr, r6
		upFilename[i] = toupper(upFilename[i]);
 801aeac:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 801aeb0:	f811 300c 	ldrb.w	r3, [r1, ip]
 801aeb4:	f003 0303 	and.w	r3, r3, #3
 801aeb8:	2b02      	cmp	r3, #2
 801aeba:	d015      	beq.n	801aee8 <STM32Ipl_WriteImage+0x80>
	for (size_t i = 0; i < len; i++)
 801aebc:	4596      	cmp	lr, r2
 801aebe:	d1f5      	bne.n	801aeac <STM32Ipl_WriteImage+0x44>
	if (len >= 5) {
 801aec0:	2f04      	cmp	r7, #4
	ptr = upFilename + len;
 801aec2:	eb06 0307 	add.w	r3, r6, r7
	if (len >= 5) {
 801aec6:	d919      	bls.n	801aefc <STM32Ipl_WriteImage+0x94>
		if ((ptr[-1] == 'G') && (ptr[-2] == 'E') && (ptr[-3] == 'P') && (ptr[-4] == 'J') && (ptr[-5] == '.'))
 801aec8:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 801aecc:	2a47      	cmp	r2, #71	; 0x47
 801aece:	d038      	beq.n	801af42 <STM32Ipl_WriteImage+0xda>
			if ((ptr[-1] == 'P') && (ptr[-2] == 'M') && (ptr[-3] == 'B') && (ptr[-4] == '.'))
 801aed0:	2a50      	cmp	r2, #80	; 0x50
 801aed2:	d119      	bne.n	801af08 <STM32Ipl_WriteImage+0xa0>
 801aed4:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 801aed8:	2a4d      	cmp	r2, #77	; 0x4d
 801aeda:	d037      	beq.n	801af4c <STM32Ipl_WriteImage+0xe4>
	xfree(upFilename);
 801aedc:	4630      	mov	r0, r6
 801aede:	f000 f873 	bl	801afc8 <xfree>

		default:
			break;
	}

	return stm32ipl_err_UnsupportedFormat;
 801aee2:	f06f 0004 	mvn.w	r0, #4
}
 801aee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		upFilename[i] = toupper(upFilename[i]);
 801aee8:	f1ac 0c20 	sub.w	ip, ip, #32
	for (size_t i = 0; i < len; i++)
 801aeec:	4596      	cmp	lr, r2
		upFilename[i] = toupper(upFilename[i]);
 801aeee:	f882 c000 	strb.w	ip, [r2]
	for (size_t i = 0; i < len; i++)
 801aef2:	d1db      	bne.n	801aeac <STM32Ipl_WriteImage+0x44>
	if (len >= 5) {
 801aef4:	2f04      	cmp	r7, #4
	ptr = upFilename + len;
 801aef6:	eb06 0307 	add.w	r3, r6, r7
	if (len >= 5) {
 801aefa:	d8e5      	bhi.n	801aec8 <STM32Ipl_WriteImage+0x60>
	if (len >= 4) {
 801aefc:	d1ee      	bne.n	801aedc <STM32Ipl_WriteImage+0x74>
		if ((ptr[-1] == 'G') && (ptr[-2] == 'P') && (ptr[-3] == 'J') && (ptr[-4] == '.'))
 801aefe:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 801af02:	2a47      	cmp	r2, #71	; 0x47
 801af04:	d1e4      	bne.n	801aed0 <STM32Ipl_WriteImage+0x68>
 801af06:	e7e9      	b.n	801aedc <STM32Ipl_WriteImage+0x74>
				if ((ptr[-1] == 'M') && (ptr[-2] == 'P') && (ptr[-3] == 'P') && (ptr[-4] == '.'))
 801af08:	2a4d      	cmp	r2, #77	; 0x4d
 801af0a:	d1e7      	bne.n	801aedc <STM32Ipl_WriteImage+0x74>
 801af0c:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 801af10:	2a50      	cmp	r2, #80	; 0x50
 801af12:	d02c      	beq.n	801af6e <STM32Ipl_WriteImage+0x106>
					if ((ptr[-1] == 'M') && (ptr[-2] == 'G') && (ptr[-3] == 'P') && (ptr[-4] == '.'))
 801af14:	2a47      	cmp	r2, #71	; 0x47
 801af16:	d1e1      	bne.n	801aedc <STM32Ipl_WriteImage+0x74>
 801af18:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801af1c:	2a50      	cmp	r2, #80	; 0x50
 801af1e:	d1dd      	bne.n	801aedc <STM32Ipl_WriteImage+0x74>
 801af20:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 801af24:	2b2e      	cmp	r3, #46	; 0x2e
 801af26:	d1d9      	bne.n	801aedc <STM32Ipl_WriteImage+0x74>
	xfree(upFilename);
 801af28:	4630      	mov	r0, r6
 801af2a:	f000 f84d 	bl	801afc8 <xfree>
	switch (img->bpp) {
 801af2e:	68a3      	ldr	r3, [r4, #8]
 801af30:	2b01      	cmp	r3, #1
 801af32:	d1d6      	bne.n	801aee2 <STM32Ipl_WriteImage+0x7a>
	return savePnm(img, filename, format);
 801af34:	4629      	mov	r1, r5
 801af36:	4620      	mov	r0, r4
 801af38:	2205      	movs	r2, #5
}
 801af3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return savePnm(img, filename, format);
 801af3e:	f7fe bd65 	b.w	8019a0c <savePnm>
		if ((ptr[-1] == 'G') && (ptr[-2] == 'E') && (ptr[-3] == 'P') && (ptr[-4] == 'J') && (ptr[-5] == '.'))
 801af42:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 801af46:	2a45      	cmp	r2, #69	; 0x45
 801af48:	d0c8      	beq.n	801aedc <STM32Ipl_WriteImage+0x74>
 801af4a:	e7c7      	b.n	801aedc <STM32Ipl_WriteImage+0x74>
			if ((ptr[-1] == 'P') && (ptr[-2] == 'M') && (ptr[-3] == 'B') && (ptr[-4] == '.'))
 801af4c:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801af50:	2a42      	cmp	r2, #66	; 0x42
 801af52:	d1c3      	bne.n	801aedc <STM32Ipl_WriteImage+0x74>
 801af54:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 801af58:	2b2e      	cmp	r3, #46	; 0x2e
 801af5a:	d1bf      	bne.n	801aedc <STM32Ipl_WriteImage+0x74>
	xfree(upFilename);
 801af5c:	4630      	mov	r0, r6
 801af5e:	f000 f833 	bl	801afc8 <xfree>
			return saveBmp(img, filename);
 801af62:	4629      	mov	r1, r5
 801af64:	4620      	mov	r0, r4
}
 801af66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			return saveBmp(img, filename);
 801af6a:	f7fe bb9d 	b.w	80196a8 <saveBmp>
				if ((ptr[-1] == 'M') && (ptr[-2] == 'P') && (ptr[-3] == 'P') && (ptr[-4] == '.'))
 801af6e:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801af72:	2a50      	cmp	r2, #80	; 0x50
 801af74:	d1b2      	bne.n	801aedc <STM32Ipl_WriteImage+0x74>
 801af76:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 801af7a:	2b2e      	cmp	r3, #46	; 0x2e
 801af7c:	d1ae      	bne.n	801aedc <STM32Ipl_WriteImage+0x74>
	xfree(upFilename);
 801af7e:	4630      	mov	r0, r6
 801af80:	f000 f822 	bl	801afc8 <xfree>
	switch (img->bpp) {
 801af84:	68a3      	ldr	r3, [r4, #8]
 801af86:	2b02      	cmp	r3, #2
 801af88:	d001      	beq.n	801af8e <STM32Ipl_WriteImage+0x126>
 801af8a:	2b04      	cmp	r3, #4
 801af8c:	d1a9      	bne.n	801aee2 <STM32Ipl_WriteImage+0x7a>
	return savePnm(img, filename, format);
 801af8e:	4629      	mov	r1, r5
 801af90:	4620      	mov	r0, r4
 801af92:	2206      	movs	r2, #6
}
 801af94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return savePnm(img, filename, format);
 801af98:	f7fe bd38 	b.w	8019a0c <savePnm>
		return stm32ipl_err_InvalidParameter;
 801af9c:	f06f 0001 	mvn.w	r0, #1
}
 801afa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return stm32ipl_err_InvalidParameter;
 801afa2:	f06f 0001 	mvn.w	r0, #1
}
 801afa6:	4770      	bx	lr
 801afa8:	0809c60d 	.word	0x0809c60d

0801afac <xalloc>:
 * @param size	Size of the memory buffer to be allocated (bytes).
 * @return		The allocated memory buffer, null in case of errors.
 */
void* xalloc(uint32_t size)
{
	return umm_malloc(size);
 801afac:	f000 bb06 	b.w	801b5bc <umm_malloc>

0801afb0 <xalloc0>:
 * Such buffer must be released with xfree().
 * @param size	Size of the memory buffer to be allocated (bytes).
 * @return		The allocated memory buffer, null in case of errors.
 */
void* xalloc0(uint32_t size)
{
 801afb0:	b538      	push	{r3, r4, r5, lr}
 801afb2:	4605      	mov	r5, r0
	void *mem = umm_malloc(size);
 801afb4:	f000 fb02 	bl	801b5bc <umm_malloc>

	if (mem == NULL)
 801afb8:	4604      	mov	r4, r0
 801afba:	b118      	cbz	r0, 801afc4 <xalloc0+0x14>
		return NULL;

	memset(mem, 0, size);
 801afbc:	462a      	mov	r2, r5
 801afbe:	2100      	movs	r1, #0
 801afc0:	f00b fadf 	bl	8026582 <memset>

	return mem;
}
 801afc4:	4620      	mov	r0, r4
 801afc6:	bd38      	pop	{r3, r4, r5, pc}

0801afc8 <xfree>:
 * @param mem	Pointer to the the memory buffer to be released.
 * @return		void
 */
void xfree(void *mem)
{
	umm_free(mem);
 801afc8:	f000 ba9a 	b.w	801b500 <umm_free>

0801afcc <fb_init>:
 * hood, uses heap memory .
 * @return		void.
 */
void fb_init(void)
{
	memset(g_fb_alloc_stack, 0, sizeof(uint32_t) * FB_ALLOC_MAX_ENTRY);
 801afcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 801afd0:	2100      	movs	r1, #0
 801afd2:	4805      	ldr	r0, [pc, #20]	; (801afe8 <fb_init+0x1c>)
{
 801afd4:	b508      	push	{r3, lr}
	memset(g_fb_alloc_stack, 0, sizeof(uint32_t) * FB_ALLOC_MAX_ENTRY);
 801afd6:	f00b fad4 	bl	8026582 <memset>
	g_fb_alloc_inext = 0;
 801afda:	2300      	movs	r3, #0
 801afdc:	4903      	ldr	r1, [pc, #12]	; (801afec <fb_init+0x20>)
	g_fb_alloc_imark = 0;
 801afde:	4a04      	ldr	r2, [pc, #16]	; (801aff0 <fb_init+0x24>)
	g_fb_alloc_inext = 0;
 801afe0:	600b      	str	r3, [r1, #0]
	g_fb_alloc_imark = 0;
 801afe2:	6013      	str	r3, [r2, #0]
}
 801afe4:	bd08      	pop	{r3, pc}
 801afe6:	bf00      	nop
 801afe8:	2000a258 	.word	0x2000a258
 801afec:	2000a254 	.word	0x2000a254
 801aff0:	2000a250 	.word	0x2000a250

0801aff4 <STM32Ipl_Downscale>:
	int32_t dstW;
	int32_t dstH;
	int32_t wRatio;
	int32_t hRatio;

	STM32IPL_CHECK_VALID_IMAGE(src)
 801aff4:	2800      	cmp	r0, #0
 801aff6:	f000 81d7 	beq.w	801b3a8 <STM32Ipl_Downscale+0x3b4>
 801affa:	68c3      	ldr	r3, [r0, #12]
{
 801affc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b000:	4607      	mov	r7, r0
 801b002:	b087      	sub	sp, #28
	STM32IPL_CHECK_VALID_IMAGE(dst)
 801b004:	2b00      	cmp	r3, #0
 801b006:	f000 81cc 	beq.w	801b3a2 <STM32Ipl_Downscale+0x3ae>
 801b00a:	460e      	mov	r6, r1
 801b00c:	2900      	cmp	r1, #0
 801b00e:	f000 81c8 	beq.w	801b3a2 <STM32Ipl_Downscale+0x3ae>
 801b012:	68cb      	ldr	r3, [r1, #12]
 801b014:	2b00      	cmp	r3, #0
 801b016:	f000 81c4 	beq.w	801b3a2 <STM32Ipl_Downscale+0x3ae>
	STM32IPL_CHECK_FORMAT(src, STM32IPL_IF_ALL)
 801b01a:	210f      	movs	r1, #15
 801b01c:	4690      	mov	r8, r2
 801b01e:	f7fe faa5 	bl	801956c <STM32Ipl_ImageFormatSupported>
 801b022:	2800      	cmp	r0, #0
 801b024:	f000 81b8 	beq.w	801b398 <STM32Ipl_Downscale+0x3a4>
	STM32IPL_CHECK_SAME_FORMAT(src, dst)
 801b028:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801b02c:	68b3      	ldr	r3, [r6, #8]
 801b02e:	459a      	cmp	sl, r3
 801b030:	f040 81b7 	bne.w	801b3a2 <STM32Ipl_Downscale+0x3ae>

	if ((dst->w < 1) || (dst->h < 1))
 801b034:	6835      	ldr	r5, [r6, #0]
 801b036:	2d00      	cmp	r5, #0
 801b038:	f340 81b3 	ble.w	801b3a2 <STM32Ipl_Downscale+0x3ae>
 801b03c:	f8d6 b004 	ldr.w	fp, [r6, #4]
 801b040:	f1bb 0f00 	cmp.w	fp, #0
 801b044:	f340 81ad 	ble.w	801b3a2 <STM32Ipl_Downscale+0x3ae>

	dstW = dst->w;
	dstH = dst->h;

	wRatio = (int32_t) ((src->w << 16) / dst->w) + 1;
	hRatio = (int32_t) ((src->h << 16) / dst->h) + 1;
 801b048:	e9d7 4300 	ldrd	r4, r3, [r7]
 801b04c:	041b      	lsls	r3, r3, #16
	wRatio = (int32_t) ((src->w << 16) / dst->w) + 1;
 801b04e:	ea4f 4c04 	mov.w	ip, r4, lsl #16
	hRatio = (int32_t) ((src->h << 16) / dst->h) + 1;
 801b052:	fb93 f3fb 	sdiv	r3, r3, fp
	wRatio = (int32_t) ((src->w << 16) / dst->w) + 1;
 801b056:	fb9c fcf5 	sdiv	ip, ip, r5
	hRatio = (int32_t) ((src->h << 16) / dst->h) + 1;
 801b05a:	3301      	adds	r3, #1
	wRatio = (int32_t) ((src->w << 16) / dst->w) + 1;
 801b05c:	f10c 0c01 	add.w	ip, ip, #1
	hRatio = (int32_t) ((src->h << 16) / dst->h) + 1;
 801b060:	9300      	str	r3, [sp, #0]

	if (reversed) {
 801b062:	f1b8 0f00 	cmp.w	r8, #0
 801b066:	d00a      	beq.n	801b07e <STM32Ipl_Downscale+0x8a>
		switch (src->bpp) {
 801b068:	f1ba 0f04 	cmp.w	sl, #4
 801b06c:	f200 8194 	bhi.w	801b398 <STM32Ipl_Downscale+0x3a4>
 801b070:	e8df f01a 	tbh	[pc, sl, lsl #1]
 801b074:	00820094 	.word	0x00820094
 801b078:	01920051 	.word	0x01920051
 801b07c:	0010      	.short	0x0010

			default:
				return stm32ipl_err_UnsupportedFormat;
		}
	} else {
		switch (src->bpp) {
 801b07e:	f1ba 0f04 	cmp.w	sl, #4
 801b082:	f200 8189 	bhi.w	801b398 <STM32Ipl_Downscale+0x3a4>
 801b086:	e8df f01a 	tbh	[pc, sl, lsl #1]
 801b08a:	0146      	.short	0x0146
 801b08c:	00ff0124 	.word	0x00ff0124
 801b090:	00d00187 	.word	0x00d00187
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801b094:	f10b 38ff 	add.w	r8, fp, #4294967295
 801b098:	68f2      	ldr	r2, [r6, #12]
					for (int32_t x = dstW - 1; x >= 0; x--)
 801b09a:	f105 3aff 	add.w	sl, r5, #4294967295
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801b09e:	68fe      	ldr	r6, [r7, #12]
 801b0a0:	fb08 f305 	mul.w	r3, r8, r5
 801b0a4:	fb0c fa0a 	mul.w	sl, ip, sl
 801b0a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b0ac:	eb02 0e03 	add.w	lr, r2, r3
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801b0b0:	eba5 0385 	sub.w	r3, r5, r5, lsl #2
 801b0b4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801b0b8:	005b      	lsls	r3, r3, #1
 801b0ba:	9201      	str	r2, [sp, #4]
 801b0bc:	9302      	str	r3, [sp, #8]
 801b0be:	9b00      	ldr	r3, [sp, #0]
 801b0c0:	fb08 f903 	mul.w	r9, r8, r3
					rgb888_t *srcRow = IMAGE_COMPUTE_RGB888_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801b0c4:	9b01      	ldr	r3, [sp, #4]
 801b0c6:	ea4f 4729 	mov.w	r7, r9, asr #16
 801b0ca:	4651      	mov	r1, sl
 801b0cc:	eb03 0b0e 	add.w	fp, r3, lr
 801b0d0:	fb04 f707 	mul.w	r7, r4, r7
 801b0d4:	465a      	mov	r2, fp
						IMAGE_PUT_RGB888_PIXEL_FAST(dstRow, x,
 801b0d6:	eb07 4321 	add.w	r3, r7, r1, asr #16
 801b0da:	1ed0      	subs	r0, r2, #3
 801b0dc:	eba1 010c 	sub.w	r1, r1, ip
 801b0e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
					for (int x = dstW - 1; x >= 0; x--)
 801b0e4:	4586      	cmp	lr, r0
						IMAGE_PUT_RGB888_PIXEL_FAST(dstRow, x,
 801b0e6:	5af5      	ldrh	r5, [r6, r3]
 801b0e8:	4433      	add	r3, r6
 801b0ea:	789b      	ldrb	r3, [r3, #2]
 801b0ec:	f822 5c03 	strh.w	r5, [r2, #-3]
 801b0f0:	f802 3c01 	strb.w	r3, [r2, #-1]
					for (int x = dstW - 1; x >= 0; x--)
 801b0f4:	4602      	mov	r2, r0
 801b0f6:	d1ee      	bne.n	801b0d6 <STM32Ipl_Downscale+0xe2>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801b0f8:	9b00      	ldr	r3, [sp, #0]
 801b0fa:	f108 38ff 	add.w	r8, r8, #4294967295
 801b0fe:	eba9 0903 	sub.w	r9, r9, r3
 801b102:	f1b8 3fff 	cmp.w	r8, #4294967295
 801b106:	9b02      	ldr	r3, [sp, #8]
 801b108:	eb03 0e0b 	add.w	lr, r3, fp
 801b10c:	d1da      	bne.n	801b0c4 <STM32Ipl_Downscale+0xd0>
			default:
				return stm32ipl_err_UnsupportedFormat;
		}
	}

	return stm32ipl_err_Ok;
 801b10e:	2000      	movs	r0, #0
}
 801b110:	b007      	add	sp, #28
 801b112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801b116:	f10b 3eff 	add.w	lr, fp, #4294967295
 801b11a:	68f6      	ldr	r6, [r6, #12]
					for (int32_t x = dstW - 1; x >= 0; x--)
 801b11c:	f105 3bff 	add.w	fp, r5, #4294967295
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801b120:	ebc5 7a85 	rsb	sl, r5, r5, lsl #30
 801b124:	fb0e f305 	mul.w	r3, lr, r5
					uint16_t *srcRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801b128:	68ff      	ldr	r7, [r7, #12]
 801b12a:	fb0c fb0b 	mul.w	fp, ip, fp
 801b12e:	006d      	lsls	r5, r5, #1
 801b130:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801b134:	9b00      	ldr	r3, [sp, #0]
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801b136:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 801b13a:	fb0e f803 	mul.w	r8, lr, r3
					uint16_t *srcRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801b13e:	ea4f 4028 	mov.w	r0, r8, asr #16
 801b142:	eb05 0906 	add.w	r9, r5, r6
 801b146:	465a      	mov	r2, fp
 801b148:	fb04 f000 	mul.w	r0, r4, r0
 801b14c:	464b      	mov	r3, r9
						IMAGE_PUT_RGB565_PIXEL_FAST(dstRow, x,
 801b14e:	eb00 4122 	add.w	r1, r0, r2, asr #16
 801b152:	eba2 020c 	sub.w	r2, r2, ip
 801b156:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801b15a:	f823 1d02 	strh.w	r1, [r3, #-2]!
					for (int x = dstW - 1; x >= 0; x--)
 801b15e:	429e      	cmp	r6, r3
 801b160:	d1f5      	bne.n	801b14e <STM32Ipl_Downscale+0x15a>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801b162:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b166:	9b00      	ldr	r3, [sp, #0]
 801b168:	eb0a 0609 	add.w	r6, sl, r9
 801b16c:	f1be 3fff 	cmp.w	lr, #4294967295
 801b170:	eba8 0803 	sub.w	r8, r8, r3
 801b174:	d1e3      	bne.n	801b13e <STM32Ipl_Downscale+0x14a>
 801b176:	e7ca      	b.n	801b10e <STM32Ipl_Downscale+0x11a>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801b178:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b17c:	4628      	mov	r0, r5
 801b17e:	e000      	b.n	801b182 <STM32Ipl_Downscale+0x18e>
					uint8_t *dstRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(dst, y);
 801b180:	6830      	ldr	r0, [r6, #0]
						IMAGE_PUT_GRAYSCALE_PIXEL_FAST(dstRow, x,
 801b182:	68f3      	ldr	r3, [r6, #12]
 801b184:	462a      	mov	r2, r5
 801b186:	2100      	movs	r1, #0
 801b188:	fb00 300b 	mla	r0, r0, fp, r3
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801b18c:	f10b 3bff 	add.w	fp, fp, #4294967295
						IMAGE_PUT_GRAYSCALE_PIXEL_FAST(dstRow, x,
 801b190:	f00b f9f7 	bl	8026582 <memset>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801b194:	f1bb 3fff 	cmp.w	fp, #4294967295
 801b198:	d1f2      	bne.n	801b180 <STM32Ipl_Downscale+0x18c>
 801b19a:	e7b8      	b.n	801b10e <STM32Ipl_Downscale+0x11a>
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801b19c:	341f      	adds	r4, #31
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801b19e:	f10b 3eff 	add.w	lr, fp, #4294967295
					for (int32_t x = dstW - 1; x >= 0; x--)
 801b1a2:	1e6a      	subs	r2, r5, #1
 801b1a4:	9900      	ldr	r1, [sp, #0]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801b1a6:	0963      	lsrs	r3, r4, #5
 801b1a8:	f8d7 900c 	ldr.w	r9, [r7, #12]
					for (int32_t x = dstW - 1; x >= 0; x--)
 801b1ac:	9204      	str	r2, [sp, #16]
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 801b1ae:	f04f 0a01 	mov.w	sl, #1
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801b1b2:	9301      	str	r3, [sp, #4]
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 801b1b4:	f105 031f 	add.w	r3, r5, #31
 801b1b8:	fb02 f20c 	mul.w	r2, r2, ip
 801b1bc:	68f6      	ldr	r6, [r6, #12]
 801b1be:	095b      	lsrs	r3, r3, #5
 801b1c0:	fb0e fb01 	mul.w	fp, lr, r1
 801b1c4:	9203      	str	r2, [sp, #12]
 801b1c6:	fb03 f80e 	mul.w	r8, r3, lr
 801b1ca:	9302      	str	r3, [sp, #8]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801b1cc:	ea4f 472b 	mov.w	r7, fp, asr #16
 801b1d0:	9b01      	ldr	r3, [sp, #4]
					for (int32_t x = dstW - 1; x >= 0; x--)
 801b1d2:	e9dd 0203 	ldrd	r0, r2, [sp, #12]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801b1d6:	fb03 f707 	mul.w	r7, r3, r7
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 801b1da:	eb07 5360 	add.w	r3, r7, r0, asr #21
 801b1de:	f3c0 4104 	ubfx	r1, r0, #16, #5
 801b1e2:	eb08 1562 	add.w	r5, r8, r2, asr #5
 801b1e6:	eba0 000c 	sub.w	r0, r0, ip
 801b1ea:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801b1ee:	40cb      	lsrs	r3, r1
 801b1f0:	f002 011f 	and.w	r1, r2, #31
					for (int32_t x = dstW - 1; x >= 0; x--)
 801b1f4:	3a01      	subs	r2, #1
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 801b1f6:	f003 0301 	and.w	r3, r3, #1
 801b1fa:	fa0a f401 	lsl.w	r4, sl, r1
 801b1fe:	408b      	lsls	r3, r1
 801b200:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 801b204:	ea21 0104 	bic.w	r1, r1, r4
 801b208:	430b      	orrs	r3, r1
 801b20a:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
					for (int32_t x = dstW - 1; x >= 0; x--)
 801b20e:	1c53      	adds	r3, r2, #1
 801b210:	d1e3      	bne.n	801b1da <STM32Ipl_Downscale+0x1e6>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801b212:	9b00      	ldr	r3, [sp, #0]
 801b214:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b218:	ebab 0b03 	sub.w	fp, fp, r3
 801b21c:	f1be 3fff 	cmp.w	lr, #4294967295
 801b220:	9b02      	ldr	r3, [sp, #8]
 801b222:	eba8 0803 	sub.w	r8, r8, r3
 801b226:	d1d1      	bne.n	801b1cc <STM32Ipl_Downscale+0x1d8>
 801b228:	e771      	b.n	801b10e <STM32Ipl_Downscale+0x11a>
 801b22a:	68f3      	ldr	r3, [r6, #12]
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 801b22c:	f04f 0800 	mov.w	r8, #0
 801b230:	eb05 0245 	add.w	r2, r5, r5, lsl #1
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801b234:	68f8      	ldr	r0, [r7, #12]
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 801b236:	46c2      	mov	sl, r8
				for (int32_t y = 0; y < dstH; y++) {
 801b238:	46c1      	mov	r9, r8
 801b23a:	eb03 0e02 	add.w	lr, r3, r2
 801b23e:	9301      	str	r3, [sp, #4]
 801b240:	9202      	str	r2, [sp, #8]
					rgb888_t *srcRow = IMAGE_COMPUTE_RGB888_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801b242:	ea4f 472a 	mov.w	r7, sl, asr #16
 801b246:	9b01      	ldr	r3, [sp, #4]
 801b248:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 801b24c:	2100      	movs	r1, #0
 801b24e:	fb04 f707 	mul.w	r7, r4, r7
					for (int32_t x = 0; x < dstW; x++)
 801b252:	441a      	add	r2, r3
						IMAGE_PUT_RGB888_PIXEL_FAST(dstRow, x,
 801b254:	eb07 4321 	add.w	r3, r7, r1, asr #16
					for (int32_t x = 0; x < dstW; x++)
 801b258:	3203      	adds	r2, #3
 801b25a:	4461      	add	r1, ip
						IMAGE_PUT_RGB888_PIXEL_FAST(dstRow, x,
 801b25c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
					for (int32_t x = 0; x < dstW; x++)
 801b260:	4596      	cmp	lr, r2
						IMAGE_PUT_RGB888_PIXEL_FAST(dstRow, x,
 801b262:	eb00 0603 	add.w	r6, r0, r3
 801b266:	5ac3      	ldrh	r3, [r0, r3]
 801b268:	78b6      	ldrb	r6, [r6, #2]
 801b26a:	f822 3c03 	strh.w	r3, [r2, #-3]
 801b26e:	f802 6c01 	strb.w	r6, [r2, #-1]
					for (int32_t x = 0; x < dstW; x++)
 801b272:	d1ef      	bne.n	801b254 <STM32Ipl_Downscale+0x260>
				for (int32_t y = 0; y < dstH; y++) {
 801b274:	9b00      	ldr	r3, [sp, #0]
 801b276:	f109 0901 	add.w	r9, r9, #1
 801b27a:	44a8      	add	r8, r5
 801b27c:	449a      	add	sl, r3
 801b27e:	45cb      	cmp	fp, r9
 801b280:	9b02      	ldr	r3, [sp, #8]
 801b282:	449e      	add	lr, r3
 801b284:	d1dd      	bne.n	801b242 <STM32Ipl_Downscale+0x24e>
 801b286:	e742      	b.n	801b10e <STM32Ipl_Downscale+0x11a>
					uint16_t *dstRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(dst, y);
 801b288:	f04f 0e00 	mov.w	lr, #0
 801b28c:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 801b290:	006b      	lsls	r3, r5, #1
					uint16_t *srcRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801b292:	68ff      	ldr	r7, [r7, #12]
 801b294:	eb0a 0645 	add.w	r6, sl, r5, lsl #1
					uint16_t *dstRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(dst, y);
 801b298:	46f1      	mov	r9, lr
				for (int32_t y = 0; y < dstH; y++) {
 801b29a:	46f0      	mov	r8, lr
 801b29c:	9301      	str	r3, [sp, #4]
					uint16_t *srcRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801b29e:	ea4f 4029 	mov.w	r0, r9, asr #16
 801b2a2:	2300      	movs	r3, #0
 801b2a4:	eb0a 024e 	add.w	r2, sl, lr, lsl #1
 801b2a8:	fb04 f000 	mul.w	r0, r4, r0
						IMAGE_PUT_RGB565_PIXEL_FAST(dstRow, x,
 801b2ac:	eb00 4123 	add.w	r1, r0, r3, asr #16
					for (int32_t x = 0; x < dstW; x++)
 801b2b0:	4463      	add	r3, ip
						IMAGE_PUT_RGB565_PIXEL_FAST(dstRow, x,
 801b2b2:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801b2b6:	f822 1b02 	strh.w	r1, [r2], #2
					for (int32_t x = 0; x < dstW; x++)
 801b2ba:	4296      	cmp	r6, r2
 801b2bc:	d1f6      	bne.n	801b2ac <STM32Ipl_Downscale+0x2b8>
				for (int32_t y = 0; y < dstH; y++) {
 801b2be:	9b00      	ldr	r3, [sp, #0]
 801b2c0:	f108 0801 	add.w	r8, r8, #1
 801b2c4:	44ae      	add	lr, r5
 801b2c6:	4499      	add	r9, r3
 801b2c8:	45c3      	cmp	fp, r8
 801b2ca:	9b01      	ldr	r3, [sp, #4]
 801b2cc:	441e      	add	r6, r3
 801b2ce:	d1e6      	bne.n	801b29e <STM32Ipl_Downscale+0x2aa>
 801b2d0:	e71d      	b.n	801b10e <STM32Ipl_Downscale+0x11a>
		switch (src->bpp) {
 801b2d2:	f04f 0e00 	mov.w	lr, #0
 801b2d6:	4629      	mov	r1, r5
 801b2d8:	f8dd 8000 	ldr.w	r8, [sp]
				for (int32_t y = 0; y < dstH; y++) {
 801b2dc:	4670      	mov	r0, lr
					uint8_t *dstRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(dst, y);
 801b2de:	68f3      	ldr	r3, [r6, #12]
					uint8_t *srcRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801b2e0:	ea4f 492e 	mov.w	r9, lr, asr #16
 801b2e4:	68fa      	ldr	r2, [r7, #12]
					uint8_t *dstRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(dst, y);
 801b2e6:	fb00 f101 	mul.w	r1, r0, r1
					for (int32_t x = 0; x < dstW; x++)
 801b2ea:	fb04 2909 	mla	r9, r4, r9, r2
 801b2ee:	195c      	adds	r4, r3, r5
					uint8_t *dstRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(dst, y);
 801b2f0:	2200      	movs	r2, #0
 801b2f2:	440b      	add	r3, r1
 801b2f4:	440c      	add	r4, r1
						IMAGE_PUT_GRAYSCALE_PIXEL_FAST(dstRow, x,
 801b2f6:	1411      	asrs	r1, r2, #16
					for (int32_t x = 0; x < dstW; x++)
 801b2f8:	4462      	add	r2, ip
						IMAGE_PUT_GRAYSCALE_PIXEL_FAST(dstRow, x,
 801b2fa:	f819 1001 	ldrb.w	r1, [r9, r1]
 801b2fe:	f803 1b01 	strb.w	r1, [r3], #1
					for (int32_t x = 0; x < dstW; x++)
 801b302:	429c      	cmp	r4, r3
 801b304:	d1f7      	bne.n	801b2f6 <STM32Ipl_Downscale+0x302>
				for (int32_t y = 0; y < dstH; y++) {
 801b306:	3001      	adds	r0, #1
 801b308:	44c6      	add	lr, r8
 801b30a:	4583      	cmp	fp, r0
 801b30c:	f43f aeff 	beq.w	801b10e <STM32Ipl_Downscale+0x11a>
					uint8_t *srcRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801b310:	683c      	ldr	r4, [r7, #0]
					uint8_t *dstRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(dst, y);
 801b312:	6831      	ldr	r1, [r6, #0]
 801b314:	e7e3      	b.n	801b2de <STM32Ipl_Downscale+0x2ea>
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801b316:	341f      	adds	r4, #31
 801b318:	f8d7 900c 	ldr.w	r9, [r7, #12]
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 801b31c:	2700      	movs	r7, #0
 801b31e:	68f2      	ldr	r2, [r6, #12]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801b320:	0963      	lsrs	r3, r4, #5
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 801b322:	f04f 0801 	mov.w	r8, #1
				for (int32_t y = 0; y < dstH; y++) {
 801b326:	f8cd a004 	str.w	sl, [sp, #4]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801b32a:	9302      	str	r3, [sp, #8]
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 801b32c:	f105 031f 	add.w	r3, r5, #31
 801b330:	e9cd ab04 	strd	sl, fp, [sp, #16]
 801b334:	095b      	lsrs	r3, r3, #5
 801b336:	46bb      	mov	fp, r7
 801b338:	9303      	str	r3, [sp, #12]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801b33a:	ea4f 4a2b 	mov.w	sl, fp, asr #16
 801b33e:	9b02      	ldr	r3, [sp, #8]
					for (int32_t x = 0; x < dstW; x++)
 801b340:	9904      	ldr	r1, [sp, #16]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801b342:	2400      	movs	r4, #0
 801b344:	fb03 fa0a 	mul.w	sl, r3, sl
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 801b348:	eb0a 5364 	add.w	r3, sl, r4, asr #21
 801b34c:	f3c4 4004 	ubfx	r0, r4, #16, #5
 801b350:	eb07 1e61 	add.w	lr, r7, r1, asr #5
					for (int32_t x = 0; x < dstW; x++)
 801b354:	4464      	add	r4, ip
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 801b356:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801b35a:	40c3      	lsrs	r3, r0
 801b35c:	f001 001f 	and.w	r0, r1, #31
					for (int32_t x = 0; x < dstW; x++)
 801b360:	3101      	adds	r1, #1
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 801b362:	f003 0301 	and.w	r3, r3, #1
 801b366:	fa08 f600 	lsl.w	r6, r8, r0
					for (int32_t x = 0; x < dstW; x++)
 801b36a:	428d      	cmp	r5, r1
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 801b36c:	fa03 f300 	lsl.w	r3, r3, r0
 801b370:	f852 002e 	ldr.w	r0, [r2, lr, lsl #2]
 801b374:	ea20 0006 	bic.w	r0, r0, r6
 801b378:	ea43 0300 	orr.w	r3, r3, r0
 801b37c:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
					for (int32_t x = 0; x < dstW; x++)
 801b380:	d1e2      	bne.n	801b348 <STM32Ipl_Downscale+0x354>
				for (int32_t y = 0; y < dstH; y++) {
 801b382:	9900      	ldr	r1, [sp, #0]
 801b384:	9b01      	ldr	r3, [sp, #4]
 801b386:	448b      	add	fp, r1
 801b388:	9903      	ldr	r1, [sp, #12]
 801b38a:	3301      	adds	r3, #1
 801b38c:	440f      	add	r7, r1
 801b38e:	9905      	ldr	r1, [sp, #20]
 801b390:	9301      	str	r3, [sp, #4]
 801b392:	4299      	cmp	r1, r3
 801b394:	d1d1      	bne.n	801b33a <STM32Ipl_Downscale+0x346>
 801b396:	e6ba      	b.n	801b10e <STM32Ipl_Downscale+0x11a>
		switch (src->bpp) {
 801b398:	f06f 0004 	mvn.w	r0, #4
}
 801b39c:	b007      	add	sp, #28
 801b39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STM32IPL_CHECK_VALID_IMAGE(src)
 801b3a2:	f06f 0001 	mvn.w	r0, #1
 801b3a6:	e6b3      	b.n	801b110 <STM32Ipl_Downscale+0x11c>
 801b3a8:	f06f 0001 	mvn.w	r0, #1
}
 801b3ac:	4770      	bx	lr
 801b3ae:	bf00      	nop

0801b3b0 <umm_malloc_core>:
   * When a block removed from the free list, the space used by the free
   * pointers is available for data. That's what the first calculation
   * of size is doing.
   */

  if( size <= (sizeof(((umm_block *)0)->body)) )
 801b3b0:	287c      	cmp	r0, #124	; 0x7c
/* ------------------------------------------------------------------------
 * Must be called only from within critical sections guarded by
 * UMM_CRITICAL_ENTRY() and UMM_CRITICAL_EXIT().
 */

static void *umm_malloc_core( size_t size ) {
 801b3b2:	b530      	push	{r4, r5, lr}
  if( size <= (sizeof(((umm_block *)0)->body)) )
 801b3b4:	d972      	bls.n	801b49c <umm_malloc_core+0xec>
  size -= ( 1 + (sizeof(((umm_block *)0)->body)) );
 801b3b6:	f1a0 0c7d 	sub.w	ip, r0, #125	; 0x7d
  return( 2 + size/(sizeof(umm_block)) );
 801b3ba:	ea4f 1cdc 	mov.w	ip, ip, lsr #7
 801b3be:	f10c 0c02 	add.w	ip, ip, #2
 801b3c2:	fa1f fc8c 	uxth.w	ip, ip
   *
   * This part may be customized to be a best-fit, worst-fit, or first-fit
   * algorithm
   */

  cf = UMM_NFREE(0);
 801b3c6:	4b37      	ldr	r3, [pc, #220]	; (801b4a4 <umm_malloc_core+0xf4>)
 801b3c8:	6819      	ldr	r1, [r3, #0]
 801b3ca:	888d      	ldrh	r5, [r1, #4]

  bestBlock = UMM_NFREE(0);
  bestSize  = 0x7FFF;

  while( cf ) {
 801b3cc:	2d00      	cmp	r5, #0
 801b3ce:	d057      	beq.n	801b480 <umm_malloc_core+0xd0>
 801b3d0:	462a      	mov	r2, r5
  bestSize  = 0x7FFF;
 801b3d2:	f647 7eff 	movw	lr, #32767	; 0x7fff
    blockSize = (UMM_NBLOCK(cf) & UMM_BLOCKNO_MASK) - cf;
 801b3d6:	01d3      	lsls	r3, r2, #7
 801b3d8:	eb01 10c2 	add.w	r0, r1, r2, lsl #7
 801b3dc:	5acb      	ldrh	r3, [r1, r3]
 801b3de:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801b3e2:	1a9b      	subs	r3, r3, r2
 801b3e4:	b29b      	uxth	r3, r3

    DBGLOG_TRACE( "Looking at block %6i size %6i\n", cf, blockSize );

#if defined UMM_BEST_FIT
    if( (blockSize >= blocks) && (blockSize < bestSize) ) {
 801b3e6:	459c      	cmp	ip, r3
 801b3e8:	bf8c      	ite	hi
 801b3ea:	2400      	movhi	r4, #0
 801b3ec:	2401      	movls	r4, #1
 801b3ee:	4573      	cmp	r3, lr
 801b3f0:	d202      	bcs.n	801b3f8 <umm_malloc_core+0x48>
 801b3f2:	b10c      	cbz	r4, 801b3f8 <umm_malloc_core+0x48>
 801b3f4:	4615      	mov	r5, r2
 801b3f6:	469e      	mov	lr, r3
      break;
#else
#  error "No UMM_*_FIT is defined - check umm_malloc_cfg.h"
#endif

    cf = UMM_NFREE(cf);
 801b3f8:	8882      	ldrh	r2, [r0, #4]
  while( cf ) {
 801b3fa:	2a00      	cmp	r2, #0
 801b3fc:	d1eb      	bne.n	801b3d6 <umm_malloc_core+0x26>
  }

  if( 0x7FFF != bestSize ) {
 801b3fe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b402:	4596      	cmp	lr, r2
 801b404:	d040      	beq.n	801b488 <umm_malloc_core+0xd8>
    cf        = bestBlock;
    blockSize = bestSize;
  }

  if( UMM_NBLOCK(cf) & UMM_BLOCKNO_MASK && blockSize >= blocks ) {
 801b406:	eb01 10c5 	add.w	r0, r1, r5, lsl #7
 801b40a:	45f4      	cmp	ip, lr
 801b40c:	8803      	ldrh	r3, [r0, #0]
 801b40e:	bf8c      	ite	hi
 801b410:	2400      	movhi	r4, #0
 801b412:	2401      	movls	r4, #1
 801b414:	f3c3 020e 	ubfx	r2, r3, #0, #15
 801b418:	2a00      	cmp	r2, #0
 801b41a:	d03d      	beq.n	801b498 <umm_malloc_core+0xe8>
 801b41c:	2c00      	cmp	r4, #0
 801b41e:	d03b      	beq.n	801b498 <umm_malloc_core+0xe8>
     * what we need, unlink it from the free list and mark it as in use, and
     * link the rest of the block back into the freelist as if it was a new
     * block on the free list...
     */

    if( blockSize == blocks ) {
 801b420:	45e6      	cmp	lr, ip
 801b422:	d021      	beq.n	801b468 <umm_malloc_core+0xb8>
  UMM_NBLOCK(c+blocks) = (UMM_NBLOCK(c) & UMM_BLOCKNO_MASK) | new_freemask;
 801b424:	44ac      	add	ip, r5
 801b426:	4c20      	ldr	r4, [pc, #128]	; (801b4a8 <umm_malloc_core+0xf8>)
 801b428:	eb01 12cc 	add.w	r2, r1, ip, lsl #7
 801b42c:	431c      	orrs	r4, r3
 801b42e:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 801b432:	52cc      	strh	r4, [r1, r3]
  UMM_PBLOCK(c+blocks) = c;
 801b434:	8055      	strh	r5, [r2, #2]
  UMM_PBLOCK(UMM_NBLOCK(c) & UMM_BLOCKNO_MASK) = (c+blocks);
 801b436:	8803      	ldrh	r3, [r0, #0]
 801b438:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801b43c:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
 801b440:	f8a3 c002 	strh.w	ip, [r3, #2]
       * free block from `cf` to `cf + blocks`. So we have to adjust pointers
       * to and from adjacent free blocks.
       */

      /* previous free block */
      UMM_NFREE( UMM_PFREE(cf) ) = cf + blocks;
 801b444:	88c4      	ldrh	r4, [r0, #6]
  UMM_NBLOCK(c)                                = (c+blocks);
 801b446:	f8a0 c000 	strh.w	ip, [r0]
      UMM_NFREE( UMM_PFREE(cf) ) = cf + blocks;
 801b44a:	b2a3      	uxth	r3, r4
 801b44c:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
 801b450:	f8a3 c004 	strh.w	ip, [r3, #4]
      UMM_PFREE( cf + blocks ) = UMM_PFREE(cf);
 801b454:	80d4      	strh	r4, [r2, #6]

      /* next free block */
      UMM_PFREE( UMM_NFREE(cf) ) = cf + blocks;
 801b456:	8883      	ldrh	r3, [r0, #4]
 801b458:	b29c      	uxth	r4, r3
 801b45a:	eb01 11c4 	add.w	r1, r1, r4, lsl #7
 801b45e:	f8a1 c006 	strh.w	ip, [r1, #6]
      UMM_NFREE( cf + blocks ) = UMM_NFREE(cf);
 801b462:	8093      	strh	r3, [r2, #4]
    DBGLOG_DEBUG(  "Can't allocate %5i blocks\n", blocks );

    return( (void *)NULL );
  }

  return( (void *)&UMM_DATA(cf) );
 801b464:	3004      	adds	r0, #4
}
 801b466:	bd30      	pop	{r4, r5, pc}
  UMM_NFREE(UMM_PFREE(c)) = UMM_NFREE(c);
 801b468:	88c4      	ldrh	r4, [r0, #6]
 801b46a:	8885      	ldrh	r5, [r0, #4]
 801b46c:	b2a3      	uxth	r3, r4
 801b46e:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
 801b472:	809d      	strh	r5, [r3, #4]
  UMM_PFREE(UMM_NFREE(c)) = UMM_PFREE(c);
 801b474:	8883      	ldrh	r3, [r0, #4]
 801b476:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
 801b47a:	80dc      	strh	r4, [r3, #6]
  UMM_NBLOCK(c) &= (~UMM_FREELIST_MASK);
 801b47c:	8002      	strh	r2, [r0, #0]
}
 801b47e:	e7f1      	b.n	801b464 <umm_malloc_core+0xb4>
  if( 0x7FFF != bestSize ) {
 801b480:	fabc f48c 	clz	r4, ip
  uint16_t blockSize = 0;
 801b484:	462b      	mov	r3, r5
 801b486:	0964      	lsrs	r4, r4, #5
 801b488:	4608      	mov	r0, r1
 801b48a:	469e      	mov	lr, r3
 801b48c:	2500      	movs	r5, #0
  if( UMM_NBLOCK(cf) & UMM_BLOCKNO_MASK && blockSize >= blocks ) {
 801b48e:	8803      	ldrh	r3, [r0, #0]
 801b490:	f3c3 020e 	ubfx	r2, r3, #0, #15
 801b494:	2a00      	cmp	r2, #0
 801b496:	d1c1      	bne.n	801b41c <umm_malloc_core+0x6c>
    return( (void *)NULL );
 801b498:	2000      	movs	r0, #0
}
 801b49a:	bd30      	pop	{r4, r5, pc}
    return( 1 );
 801b49c:	f04f 0c01 	mov.w	ip, #1
 801b4a0:	e791      	b.n	801b3c6 <umm_malloc_core+0x16>
 801b4a2:	bf00      	nop
 801b4a4:	2000a358 	.word	0x2000a358
 801b4a8:	ffff8000 	.word	0xffff8000

0801b4ac <umm_init>:
void umm_init( void *UMM_MALLOC_CFG_HEAP_ADDR, uint32_t UMM_MALLOC_CFG_HEAP_SIZE ) {
 801b4ac:	460a      	mov	r2, r1
  memset(umm_heap, 0x00, UMM_MALLOC_CFG_HEAP_SIZE);
 801b4ae:	2100      	movs	r1, #0
void umm_init( void *UMM_MALLOC_CFG_HEAP_ADDR, uint32_t UMM_MALLOC_CFG_HEAP_SIZE ) {
 801b4b0:	b538      	push	{r3, r4, r5, lr}
  umm_numblocks = (UMM_MALLOC_CFG_HEAP_SIZE / sizeof(umm_block));
 801b4b2:	09d3      	lsrs	r3, r2, #7
  umm_heap = (umm_block *)UMM_MALLOC_CFG_HEAP_ADDR;
 801b4b4:	4c0f      	ldr	r4, [pc, #60]	; (801b4f4 <umm_init+0x48>)
  umm_numblocks = (UMM_MALLOC_CFG_HEAP_SIZE / sizeof(umm_block));
 801b4b6:	4d10      	ldr	r5, [pc, #64]	; (801b4f8 <umm_init+0x4c>)
  umm_heap = (umm_block *)UMM_MALLOC_CFG_HEAP_ADDR;
 801b4b8:	6020      	str	r0, [r4, #0]
  umm_numblocks = (UMM_MALLOC_CFG_HEAP_SIZE / sizeof(umm_block));
 801b4ba:	802b      	strh	r3, [r5, #0]
  memset(umm_heap, 0x00, UMM_MALLOC_CFG_HEAP_SIZE);
 801b4bc:	f00b f861 	bl	8026582 <memset>
    UMM_NBLOCK(0) = 1;
 801b4c0:	6822      	ldr	r2, [r4, #0]
    UMM_NFREE(0)  = 1;
 801b4c2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    UMM_NBLOCK(1) = UMM_BLOCK_LAST | UMM_FREELIST_MASK;
 801b4c6:	8829      	ldrh	r1, [r5, #0]
    UMM_NBLOCK(0) = 1;
 801b4c8:	2000      	movs	r0, #0
    UMM_NFREE(0)  = 1;
 801b4ca:	6053      	str	r3, [r2, #4]
    UMM_PBLOCK(UMM_BLOCK_LAST) = 1;
 801b4cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
    UMM_NBLOCK(1) = UMM_BLOCK_LAST | UMM_FREELIST_MASK;
 801b4d0:	1e4c      	subs	r4, r1, #1
    UMM_NBLOCK(0) = 1;
 801b4d2:	f04f 0c01 	mov.w	ip, #1
    UMM_PBLOCK(UMM_BLOCK_LAST) = 1;
 801b4d6:	440b      	add	r3, r1
    UMM_NBLOCK(1) = UMM_BLOCK_LAST | UMM_FREELIST_MASK;
 801b4d8:	4908      	ldr	r1, [pc, #32]	; (801b4fc <umm_init+0x50>)
    UMM_NBLOCK(0) = 1;
 801b4da:	7050      	strb	r0, [r2, #1]
    UMM_PBLOCK(UMM_BLOCK_LAST) = 1;
 801b4dc:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    UMM_NBLOCK(1) = UMM_BLOCK_LAST | UMM_FREELIST_MASK;
 801b4e0:	4321      	orrs	r1, r4
    UMM_NBLOCK(0) = 1;
 801b4e2:	f882 c000 	strb.w	ip, [r2]
    UMM_NBLOCK(1) = UMM_BLOCK_LAST | UMM_FREELIST_MASK;
 801b4e6:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
    UMM_PBLOCK(UMM_BLOCK_LAST) = 1;
 801b4ea:	f883 c002 	strb.w	ip, [r3, #2]
 801b4ee:	70d8      	strb	r0, [r3, #3]
}
 801b4f0:	bd38      	pop	{r3, r4, r5, pc}
 801b4f2:	bf00      	nop
 801b4f4:	2000a358 	.word	0x2000a358
 801b4f8:	2000a35c 	.word	0x2000a35c
 801b4fc:	ffff8000 	.word	0xffff8000

0801b500 <umm_free>:
  if (umm_heap == NULL) {
 801b500:	4b2c      	ldr	r3, [pc, #176]	; (801b5b4 <umm_free+0xb4>)
 801b502:	681b      	ldr	r3, [r3, #0]
  if( (void *)0 == ptr ) {
 801b504:	2800      	cmp	r0, #0
 801b506:	d054      	beq.n	801b5b2 <umm_free+0xb2>
 801b508:	2b00      	cmp	r3, #0
 801b50a:	d052      	beq.n	801b5b2 <umm_free+0xb2>
  c = (((uint8_t *)ptr)-(uint8_t *)(&(umm_heap[0])))/sizeof(umm_block);
 801b50c:	1ac0      	subs	r0, r0, r3
  if( UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_FREELIST_MASK ) {
 801b50e:	f3c0 12cf 	ubfx	r2, r0, #7, #16
void umm_free( void *ptr ) {
 801b512:	b5f0      	push	{r4, r5, r6, r7, lr}
  if( UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_FREELIST_MASK ) {
 801b514:	ea4f 1ec2 	mov.w	lr, r2, lsl #7
  c = (((uint8_t *)ptr)-(uint8_t *)(&(umm_heap[0])))/sizeof(umm_block);
 801b518:	4610      	mov	r0, r2
  if( UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_FREELIST_MASK ) {
 801b51a:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 801b51e:	f833 100e 	ldrh.w	r1, [r3, lr]
 801b522:	01cc      	lsls	r4, r1, #7
 801b524:	eb03 16c1 	add.w	r6, r3, r1, lsl #7
 801b528:	f833 c004 	ldrh.w	ip, [r3, r4]
 801b52c:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 801b530:	fa1f f58c 	uxth.w	r5, ip
 801b534:	d121      	bne.n	801b57a <umm_free+0x7a>
  if( UMM_NBLOCK(UMM_PBLOCK(c)) & UMM_FREELIST_MASK ) {
 801b536:	8854      	ldrh	r4, [r2, #2]
 801b538:	fa1f fc84 	uxth.w	ip, r4
 801b53c:	ea4f 1ccc 	mov.w	ip, ip, lsl #7
 801b540:	f933 500c 	ldrsh.w	r5, [r3, ip]
 801b544:	2d00      	cmp	r5, #0
 801b546:	db0e      	blt.n	801b566 <umm_free+0x66>
    UMM_PFREE(UMM_NFREE(0)) = c;
 801b548:	889d      	ldrh	r5, [r3, #4]
    UMM_NBLOCK(c)          |= UMM_FREELIST_MASK;
 801b54a:	4c1b      	ldr	r4, [pc, #108]	; (801b5b8 <umm_free+0xb8>)
 801b54c:	430c      	orrs	r4, r1
    UMM_PFREE(UMM_NFREE(0)) = c;
 801b54e:	b2a9      	uxth	r1, r5
 801b550:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
 801b554:	80c8      	strh	r0, [r1, #6]
    UMM_PFREE(c)            = 0;
 801b556:	2100      	movs	r1, #0
    UMM_NFREE(c)            = UMM_NFREE(0);
 801b558:	8095      	strh	r5, [r2, #4]
    UMM_PFREE(c)            = 0;
 801b55a:	7191      	strb	r1, [r2, #6]
 801b55c:	71d1      	strb	r1, [r2, #7]
    UMM_NFREE(0)            = c;
 801b55e:	8098      	strh	r0, [r3, #4]
    UMM_NBLOCK(c)          |= UMM_FREELIST_MASK;
 801b560:	f823 400e 	strh.w	r4, [r3, lr]
}
 801b564:	bdf0      	pop	{r4, r5, r6, r7, pc}
  UMM_NBLOCK(UMM_PBLOCK(c)) = UMM_NBLOCK(c) | freemask;
 801b566:	4a14      	ldr	r2, [pc, #80]	; (801b5b8 <umm_free+0xb8>)
 801b568:	430a      	orrs	r2, r1
 801b56a:	f823 200c 	strh.w	r2, [r3, ip]
  UMM_PBLOCK(UMM_NBLOCK(c)) = UMM_PBLOCK(c);
 801b56e:	f833 200e 	ldrh.w	r2, [r3, lr]
 801b572:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 801b576:	805c      	strh	r4, [r3, #2]
}
 801b578:	bdf0      	pop	{r4, r5, r6, r7, pc}
  UMM_NFREE(UMM_PFREE(c)) = UMM_NFREE(c);
 801b57a:	f8b6 c006 	ldrh.w	ip, [r6, #6]
  UMM_NBLOCK(c) &= (~UMM_FREELIST_MASK);
 801b57e:	f3c5 050e 	ubfx	r5, r5, #0, #15
  UMM_NFREE(UMM_PFREE(c)) = UMM_NFREE(c);
 801b582:	88b7      	ldrh	r7, [r6, #4]
 801b584:	fa1f f18c 	uxth.w	r1, ip
 801b588:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
 801b58c:	808f      	strh	r7, [r1, #4]
  UMM_PFREE(UMM_NFREE(c)) = UMM_PFREE(c);
 801b58e:	88b1      	ldrh	r1, [r6, #4]
 801b590:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
 801b594:	f8a1 c006 	strh.w	ip, [r1, #6]
  UMM_NBLOCK(c) &= (~UMM_FREELIST_MASK);
 801b598:	531d      	strh	r5, [r3, r4]
    UMM_PBLOCK(UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_BLOCKNO_MASK) = c;
 801b59a:	f833 100e 	ldrh.w	r1, [r3, lr]
 801b59e:	01c9      	lsls	r1, r1, #7
 801b5a0:	5a59      	ldrh	r1, [r3, r1]
 801b5a2:	f3c1 010e 	ubfx	r1, r1, #0, #15
 801b5a6:	eb03 14c1 	add.w	r4, r3, r1, lsl #7
 801b5aa:	8060      	strh	r0, [r4, #2]
    UMM_NBLOCK(c) = UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_BLOCKNO_MASK;
 801b5ac:	f823 100e 	strh.w	r1, [r3, lr]
 801b5b0:	e7c1      	b.n	801b536 <umm_free+0x36>
 801b5b2:	4770      	bx	lr
 801b5b4:	2000a358 	.word	0x2000a358
 801b5b8:	ffff8000 	.word	0xffff8000

0801b5bc <umm_malloc>:

void *umm_malloc( size_t size ) {

  void *ptr = NULL;

  if (umm_heap == NULL) {
 801b5bc:	4b03      	ldr	r3, [pc, #12]	; (801b5cc <umm_malloc+0x10>)
 801b5be:	681a      	ldr	r2, [r3, #0]
   * a size of 0 - and if we are we'll simply return a null pointer. if not
   * then reduce the size by 1 byte so that the subsequent calculations on
   * the number of blocks to allocate are easier...
   */

  if( 0 == size ) {
 801b5c0:	b112      	cbz	r2, 801b5c8 <umm_malloc+0xc>
 801b5c2:	b108      	cbz	r0, 801b5c8 <umm_malloc+0xc>

  /* Allocate the memory withing a protected critical section */

  UMM_CRITICAL_ENTRY();

  ptr = umm_malloc_core( size );
 801b5c4:	f7ff bef4 	b.w	801b3b0 <umm_malloc_core>

  UMM_CRITICAL_EXIT();

  return( ptr );
}
 801b5c8:	2000      	movs	r0, #0
 801b5ca:	4770      	bx	lr
 801b5cc:	2000a358 	.word	0x2000a358

0801b5d0 <UTIL_LCD_SetFuncDriver>:
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 801b5d0:	6803      	ldr	r3, [r0, #0]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
  FuncDriver.FillRect       = pDrv->FillRect;
  FuncDriver.GetPixel       = pDrv->GetPixel;
  FuncDriver.SetPixel       = pDrv->SetPixel;
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
 801b5d2:	6a02      	ldr	r2, [r0, #32]
{
 801b5d4:	b570      	push	{r4, r5, r6, lr}
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 801b5d6:	4c14      	ldr	r4, [pc, #80]	; (801b628 <UTIL_LCD_SetFuncDriver+0x58>)
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
 801b5d8:	2500      	movs	r5, #0
 801b5da:	4e14      	ldr	r6, [pc, #80]	; (801b62c <UTIL_LCD_SetFuncDriver+0x5c>)
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 801b5dc:	6023      	str	r3, [r4, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 801b5de:	6843      	ldr	r3, [r0, #4]
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 801b5e0:	f106 0114 	add.w	r1, r6, #20
  FuncDriver.GetYSize       = pDrv->GetYSize;
 801b5e4:	6222      	str	r2, [r4, #32]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 801b5e6:	6063      	str	r3, [r4, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 801b5e8:	6883      	ldr	r3, [r0, #8]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 801b5ea:	6a42      	ldr	r2, [r0, #36]	; 0x24
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 801b5ec:	60a3      	str	r3, [r4, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 801b5ee:	68c3      	ldr	r3, [r0, #12]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 801b5f0:	6262      	str	r2, [r4, #36]	; 0x24
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 801b5f2:	60e3      	str	r3, [r4, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 801b5f4:	6903      	ldr	r3, [r0, #16]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 801b5f6:	6a82      	ldr	r2, [r0, #40]	; 0x28
  FuncDriver.FillRect       = pDrv->FillRect;
 801b5f8:	6123      	str	r3, [r4, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 801b5fa:	6943      	ldr	r3, [r0, #20]
  DrawProp->LcdLayer = 0;
 801b5fc:	60f5      	str	r5, [r6, #12]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 801b5fe:	6163      	str	r3, [r4, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 801b600:	6983      	ldr	r3, [r0, #24]
  DrawProp->LcdDevice = 0;
 801b602:	6135      	str	r5, [r6, #16]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 801b604:	61a3      	str	r3, [r4, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 801b606:	69c3      	ldr	r3, [r0, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 801b608:	4628      	mov	r0, r5
  FuncDriver.GetFormat      = pDrv->GetFormat;
 801b60a:	62a2      	str	r2, [r4, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 801b60c:	61e3      	str	r3, [r4, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 801b60e:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 801b610:	f106 0118 	add.w	r1, r6, #24
 801b614:	6a23      	ldr	r3, [r4, #32]
 801b616:	4628      	mov	r0, r5
 801b618:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 801b61a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b61c:	f106 011c 	add.w	r1, r6, #28
 801b620:	4628      	mov	r0, r5
}
 801b622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 801b626:	4718      	bx	r3
 801b628:	2000a3a0 	.word	0x2000a3a0
 801b62c:	2000a360 	.word	0x2000a360

0801b630 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 801b630:	b538      	push	{r3, r4, r5, lr}
  if(FuncDriver.SetLayer != NULL)
 801b632:	4b05      	ldr	r3, [pc, #20]	; (801b648 <UTIL_LCD_SetLayer+0x18>)
 801b634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b636:	b133      	cbz	r3, 801b646 <UTIL_LCD_SetLayer+0x16>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 801b638:	4d04      	ldr	r5, [pc, #16]	; (801b64c <UTIL_LCD_SetLayer+0x1c>)
 801b63a:	4604      	mov	r4, r0
 801b63c:	4601      	mov	r1, r0
 801b63e:	6928      	ldr	r0, [r5, #16]
 801b640:	4798      	blx	r3
 801b642:	b900      	cbnz	r0, 801b646 <UTIL_LCD_SetLayer+0x16>
    {
      DrawProp->LcdLayer = Layer;
 801b644:	60ec      	str	r4, [r5, #12]
    }
  }
}
 801b646:	bd38      	pop	{r3, r4, r5, pc}
 801b648:	2000a3a0 	.word	0x2000a3a0
 801b64c:	2000a360 	.word	0x2000a360

0801b650 <UTIL_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 801b650:	4a02      	ldr	r2, [pc, #8]	; (801b65c <UTIL_LCD_SetTextColor+0xc>)
 801b652:	68d3      	ldr	r3, [r2, #12]
 801b654:	015b      	lsls	r3, r3, #5
 801b656:	50d0      	str	r0, [r2, r3]
}
 801b658:	4770      	bx	lr
 801b65a:	bf00      	nop
 801b65c:	2000a360 	.word	0x2000a360

0801b660 <UTIL_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 801b660:	4b02      	ldr	r3, [pc, #8]	; (801b66c <UTIL_LCD_SetBackColor+0xc>)
 801b662:	68da      	ldr	r2, [r3, #12]
 801b664:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801b668:	6058      	str	r0, [r3, #4]
}
 801b66a:	4770      	bx	lr
 801b66c:	2000a360 	.word	0x2000a360

0801b670 <UTIL_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 801b670:	4b02      	ldr	r3, [pc, #8]	; (801b67c <UTIL_LCD_SetFont+0xc>)
 801b672:	68da      	ldr	r2, [r3, #12]
 801b674:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801b678:	6098      	str	r0, [r3, #8]
}
 801b67a:	4770      	bx	lr
 801b67c:	2000a360 	.word	0x2000a360

0801b680 <UTIL_LCD_GetFont>:
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
  return DrawProp[DrawProp->LcdLayer].pFont;
 801b680:	4b02      	ldr	r3, [pc, #8]	; (801b68c <UTIL_LCD_GetFont+0xc>)
 801b682:	68da      	ldr	r2, [r3, #12]
 801b684:	eb03 1342 	add.w	r3, r3, r2, lsl #5
}
 801b688:	6898      	ldr	r0, [r3, #8]
 801b68a:	4770      	bx	lr
 801b68c:	2000a360 	.word	0x2000a360

0801b690 <UTIL_LCD_Clear>:
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 801b690:	4914      	ldr	r1, [pc, #80]	; (801b6e4 <UTIL_LCD_Clear+0x54>)
{
 801b692:	4602      	mov	r2, r0
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801b694:	69c8      	ldr	r0, [r1, #28]
 801b696:	2802      	cmp	r0, #2
{
 801b698:	b530      	push	{r4, r5, lr}
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 801b69a:	e9d1 3405 	ldrd	r3, r4, [r1, #20]
{
 801b69e:	b083      	sub	sp, #12
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801b6a0:	d009      	beq.n	801b6b6 <UTIL_LCD_Clear+0x26>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 801b6a2:	6908      	ldr	r0, [r1, #16]
 801b6a4:	4d10      	ldr	r5, [pc, #64]	; (801b6e8 <UTIL_LCD_Clear+0x58>)
 801b6a6:	9201      	str	r2, [sp, #4]
 801b6a8:	2200      	movs	r2, #0
 801b6aa:	692d      	ldr	r5, [r5, #16]
 801b6ac:	4611      	mov	r1, r2
 801b6ae:	9400      	str	r4, [sp, #0]
 801b6b0:	47a8      	blx	r5
}
 801b6b2:	b003      	add	sp, #12
 801b6b4:	bd30      	pop	{r4, r5, pc}
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 801b6b6:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 801b6ba:	480b      	ldr	r0, [pc, #44]	; (801b6e8 <UTIL_LCD_Clear+0x58>)
 801b6bc:	9400      	str	r4, [sp, #0]
 801b6be:	6904      	ldr	r4, [r0, #16]
 801b6c0:	6908      	ldr	r0, [r1, #16]
 801b6c2:	f40c 61fc 	and.w	r1, ip, #2016	; 0x7e0
 801b6c6:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 801b6ca:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801b6ce:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b6d2:	ea41 010c 	orr.w	r1, r1, ip
 801b6d6:	4311      	orrs	r1, r2
 801b6d8:	2200      	movs	r2, #0
 801b6da:	9101      	str	r1, [sp, #4]
 801b6dc:	4611      	mov	r1, r2
 801b6de:	47a0      	blx	r4
}
 801b6e0:	b003      	add	sp, #12
 801b6e2:	bd30      	pop	{r4, r5, pc}
 801b6e4:	2000a360 	.word	0x2000a360
 801b6e8:	2000a3a0 	.word	0x2000a3a0

0801b6ec <UTIL_LCD_DisplayChar>:
{
 801b6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801b6f0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801b86c <UTIL_LCD_DisplayChar+0x180>
 801b6f4:	3a20      	subs	r2, #32
 801b6f6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801b6fa:	eb09 1443 	add.w	r4, r9, r3, lsl #5
{
 801b6fe:	ed2d 8b02 	vpush	{d8}
 801b702:	ee08 0a10 	vmov	s16, r0
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801b706:	0158      	lsls	r0, r3, #5
 801b708:	68a3      	ldr	r3, [r4, #8]
{
 801b70a:	b0ab      	sub	sp, #172	; 0xac
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801b70c:	889d      	ldrh	r5, [r3, #4]
 801b70e:	88dc      	ldrh	r4, [r3, #6]
 801b710:	f105 0807 	add.w	r8, r5, #7
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801b714:	681f      	ldr	r7, [r3, #0]
 801b716:	fb04 f202 	mul.w	r2, r4, r2
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801b71a:	ea4f 03e8 	mov.w	r3, r8, asr #3
 801b71e:	9503      	str	r5, [sp, #12]
 801b720:	fb03 f202 	mul.w	r2, r3, r2
  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 801b724:	f028 0307 	bic.w	r3, r8, #7
 801b728:	9305      	str	r3, [sp, #20]

  for(i = 0; i < height; i++)
 801b72a:	2c00      	cmp	r4, #0
 801b72c:	f000 808b 	beq.w	801b846 <UTIL_LCD_DisplayChar+0x15a>
 801b730:	190b      	adds	r3, r1, r4
 801b732:	4417      	add	r7, r2
 801b734:	aa12      	add	r2, sp, #72	; 0x48
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 801b736:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 801b73a:	9304      	str	r3, [sp, #16]
 801b73c:	462b      	mov	r3, r5
 801b73e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801b742:	aa06      	add	r2, sp, #24
 801b744:	1c4e      	adds	r6, r1, #1

    switch(((width + 7)/8))
 801b746:	f1b8 0f01 	cmp.w	r8, #1
 801b74a:	eb02 0343 	add.w	r3, r2, r3, lsl #1

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
    {
      for (j = 0; j < width; j++)
      {
        if(line & (1 << (width- j + offset- 1)))
 801b74e:	f04f 0401 	mov.w	r4, #1
 801b752:	46ab      	mov	fp, r5
 801b754:	f106 32ff 	add.w	r2, r6, #4294967295
    switch(((width + 7)/8))
 801b758:	9302      	str	r3, [sp, #8]
 801b75a:	d03b      	beq.n	801b7d4 <UTIL_LCD_DisplayChar+0xe8>
 801b75c:	f1b8 0f02 	cmp.w	r8, #2
 801b760:	d07d      	beq.n	801b85e <UTIL_LCD_DisplayChar+0x172>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801b762:	787b      	ldrb	r3, [r7, #1]
 801b764:	7839      	ldrb	r1, [r7, #0]
 801b766:	021b      	lsls	r3, r3, #8
 801b768:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801b76c:	78b9      	ldrb	r1, [r7, #2]
 801b76e:	430b      	orrs	r3, r1
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801b770:	4448      	add	r0, r9
 801b772:	69c1      	ldr	r1, [r0, #28]
 801b774:	2902      	cmp	r1, #2
      for (j = 0; j < width; j++)
 801b776:	9903      	ldr	r1, [sp, #12]
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801b778:	d032      	beq.n	801b7e0 <UTIL_LCD_DisplayChar+0xf4>
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
    }
    else
    {
      for (j = 0; j < width; j++)
 801b77a:	b189      	cbz	r1, 801b7a0 <UTIL_LCD_DisplayChar+0xb4>
 801b77c:	9905      	ldr	r1, [sp, #20]
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 801b77e:	465d      	mov	r5, fp
 801b780:	e9d0 ea00 	ldrd	lr, sl, [r0]
 801b784:	1e48      	subs	r0, r1, #1
 801b786:	a912      	add	r1, sp, #72	; 0x48
        if(line & (1 << (width- j + offset- 1)))
 801b788:	fa04 fc00 	lsl.w	ip, r4, r0
 801b78c:	ea1c 0f03 	tst.w	ip, r3
 801b790:	d05e      	beq.n	801b850 <UTIL_LCD_DisplayChar+0x164>
 801b792:	f841 eb04 	str.w	lr, [r1], #4
      for (j = 0; j < width; j++)
 801b796:	428d      	cmp	r5, r1
 801b798:	f100 30ff 	add.w	r0, r0, #4294967295
 801b79c:	d1f4      	bne.n	801b788 <UTIL_LCD_DisplayChar+0x9c>
 801b79e:	46ab      	mov	fp, r5
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 801b7a0:	9b03      	ldr	r3, [sp, #12]
 801b7a2:	ee18 1a10 	vmov	r1, s16
 801b7a6:	9401      	str	r4, [sp, #4]
  for(i = 0; i < height; i++)
 801b7a8:	4447      	add	r7, r8
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 801b7aa:	9300      	str	r3, [sp, #0]
 801b7ac:	4b2e      	ldr	r3, [pc, #184]	; (801b868 <UTIL_LCD_DisplayChar+0x17c>)
 801b7ae:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801b7b2:	685b      	ldr	r3, [r3, #4]
 801b7b4:	461d      	mov	r5, r3
 801b7b6:	ab12      	add	r3, sp, #72	; 0x48
 801b7b8:	47a8      	blx	r5
  for(i = 0; i < height; i++)
 801b7ba:	9b04      	ldr	r3, [sp, #16]
 801b7bc:	429e      	cmp	r6, r3
 801b7be:	d042      	beq.n	801b846 <UTIL_LCD_DisplayChar+0x15a>
 801b7c0:	3601      	adds	r6, #1
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801b7c2:	f8d9 000c 	ldr.w	r0, [r9, #12]
    switch(((width + 7)/8))
 801b7c6:	f1b8 0f01 	cmp.w	r8, #1
 801b7ca:	ea4f 1040 	mov.w	r0, r0, lsl #5
 801b7ce:	f106 32ff 	add.w	r2, r6, #4294967295
 801b7d2:	d1c3      	bne.n	801b75c <UTIL_LCD_DisplayChar+0x70>
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801b7d4:	4448      	add	r0, r9
      line =  pchar[0];
 801b7d6:	783b      	ldrb	r3, [r7, #0]
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801b7d8:	69c1      	ldr	r1, [r0, #28]
 801b7da:	2902      	cmp	r1, #2
      for (j = 0; j < width; j++)
 801b7dc:	9903      	ldr	r1, [sp, #12]
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801b7de:	d1cc      	bne.n	801b77a <UTIL_LCD_DisplayChar+0x8e>
      for (j = 0; j < width; j++)
 801b7e0:	b309      	cbz	r1, 801b826 <UTIL_LCD_DisplayChar+0x13a>
 801b7e2:	9905      	ldr	r1, [sp, #20]
 801b7e4:	f10d 0c18 	add.w	ip, sp, #24
 801b7e8:	465d      	mov	r5, fp
 801b7ea:	f101 3eff 	add.w	lr, r1, #4294967295
        if(line & (1 << (width- j + offset- 1)))
 801b7ee:	fa04 f10e 	lsl.w	r1, r4, lr
      for (j = 0; j < width; j++)
 801b7f2:	f10e 3eff 	add.w	lr, lr, #4294967295
        if(line & (1 << (width- j + offset- 1)))
 801b7f6:	4219      	tst	r1, r3
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 801b7f8:	bf14      	ite	ne
 801b7fa:	f8d0 a000 	ldrne.w	sl, [r0]
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 801b7fe:	f8d0 a004 	ldreq.w	sl, [r0, #4]
 801b802:	ea4f 41da 	mov.w	r1, sl, lsr #19
 801b806:	f3ca 0bc4 	ubfx	fp, sl, #3, #5
 801b80a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b80e:	ea4b 21c1 	orr.w	r1, fp, r1, lsl #11
 801b812:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b816:	ea41 010a 	orr.w	r1, r1, sl
 801b81a:	f82c 1b02 	strh.w	r1, [ip], #2
      for (j = 0; j < width; j++)
 801b81e:	9902      	ldr	r1, [sp, #8]
 801b820:	458c      	cmp	ip, r1
 801b822:	d1e4      	bne.n	801b7ee <UTIL_LCD_DisplayChar+0x102>
 801b824:	46ab      	mov	fp, r5
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 801b826:	9b03      	ldr	r3, [sp, #12]
 801b828:	ee18 1a10 	vmov	r1, s16
 801b82c:	9401      	str	r4, [sp, #4]
  for(i = 0; i < height; i++)
 801b82e:	4447      	add	r7, r8
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 801b830:	9300      	str	r3, [sp, #0]
 801b832:	4b0d      	ldr	r3, [pc, #52]	; (801b868 <UTIL_LCD_DisplayChar+0x17c>)
 801b834:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801b838:	685b      	ldr	r3, [r3, #4]
 801b83a:	461d      	mov	r5, r3
 801b83c:	ab06      	add	r3, sp, #24
 801b83e:	47a8      	blx	r5
  for(i = 0; i < height; i++)
 801b840:	9b04      	ldr	r3, [sp, #16]
 801b842:	429e      	cmp	r6, r3
 801b844:	d1bc      	bne.n	801b7c0 <UTIL_LCD_DisplayChar+0xd4>
}
 801b846:	b02b      	add	sp, #172	; 0xac
 801b848:	ecbd 8b02 	vpop	{d8}
 801b84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b850:	f841 ab04 	str.w	sl, [r1], #4
      for (j = 0; j < width; j++)
 801b854:	42a9      	cmp	r1, r5
 801b856:	f100 30ff 	add.w	r0, r0, #4294967295
 801b85a:	d195      	bne.n	801b788 <UTIL_LCD_DisplayChar+0x9c>
 801b85c:	e79f      	b.n	801b79e <UTIL_LCD_DisplayChar+0xb2>
      line =  (pchar[0]<< 8) | pchar[1];
 801b85e:	883b      	ldrh	r3, [r7, #0]
 801b860:	ba5b      	rev16	r3, r3
 801b862:	b29b      	uxth	r3, r3
      break;
 801b864:	e784      	b.n	801b770 <UTIL_LCD_DisplayChar+0x84>
 801b866:	bf00      	nop
 801b868:	2000a3a0 	.word	0x2000a3a0
 801b86c:	2000a360 	.word	0x2000a360

0801b870 <UTIL_LCD_DisplayStringAt>:
{
 801b870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b874:	460f      	mov	r7, r1
  while (*ptr++) size ++ ;
 801b876:	4611      	mov	r1, r2
{
 801b878:	4614      	mov	r4, r2
 801b87a:	4680      	mov	r8, r0
  while (*ptr++) size ++ ;
 801b87c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b880:	2a00      	cmp	r2, #0
 801b882:	d044      	beq.n	801b90e <UTIL_LCD_DisplayStringAt+0x9e>
  uint32_t size = 0, xsize = 0;
 801b884:	2000      	movs	r0, #0
  while (*ptr++) size ++ ;
 801b886:	f811 5b01 	ldrb.w	r5, [r1], #1
 801b88a:	3001      	adds	r0, #1
 801b88c:	2d00      	cmp	r5, #0
 801b88e:	d1fa      	bne.n	801b886 <UTIL_LCD_DisplayStringAt+0x16>
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 801b890:	4d20      	ldr	r5, [pc, #128]	; (801b914 <UTIL_LCD_DisplayStringAt+0xa4>)
  switch (Mode)
 801b892:	2b01      	cmp	r3, #1
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 801b894:	68e9      	ldr	r1, [r5, #12]
 801b896:	eb05 1141 	add.w	r1, r5, r1, lsl #5
 801b89a:	6889      	ldr	r1, [r1, #8]
 801b89c:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 801b8a0:	6969      	ldr	r1, [r5, #20]
 801b8a2:	fbb1 f6fc 	udiv	r6, r1, ip
  switch (Mode)
 801b8a6:	d02c      	beq.n	801b902 <UTIL_LCD_DisplayStringAt+0x92>
 801b8a8:	2b02      	cmp	r3, #2
 801b8aa:	d104      	bne.n	801b8b6 <UTIL_LCD_DisplayStringAt+0x46>
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 801b8ac:	1a36      	subs	r6, r6, r0
 801b8ae:	fb0c f606 	mul.w	r6, ip, r6
 801b8b2:	eba6 0808 	sub.w	r8, r6, r8
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801b8b6:	b289      	uxth	r1, r1
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 801b8b8:	f108 30ff 	add.w	r0, r8, #4294967295
 801b8bc:	f647 73fe 	movw	r3, #32766	; 0x7ffe
    refcolumn = 1;
 801b8c0:	4298      	cmp	r0, r3
 801b8c2:	bf88      	it	hi
 801b8c4:	f04f 0801 	movhi.w	r8, #1
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801b8c8:	458c      	cmp	ip, r1
 801b8ca:	d818      	bhi.n	801b8fe <UTIL_LCD_DisplayStringAt+0x8e>
 801b8cc:	b1ba      	cbz	r2, 801b8fe <UTIL_LCD_DisplayStringAt+0x8e>
 801b8ce:	f1c4 0601 	rsb	r6, r4, #1
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 801b8d2:	4640      	mov	r0, r8
 801b8d4:	4639      	mov	r1, r7
 801b8d6:	f7ff ff09 	bl	801b6ec <UTIL_LCD_DisplayChar>
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801b8da:	68e9      	ldr	r1, [r5, #12]
 801b8dc:	1930      	adds	r0, r6, r4
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801b8de:	696b      	ldr	r3, [r5, #20]
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801b8e0:	eb05 1141 	add.w	r1, r5, r1, lsl #5
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801b8e4:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801b8e8:	6889      	ldr	r1, [r1, #8]
 801b8ea:	f8b1 c004 	ldrh.w	ip, [r1, #4]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801b8ee:	fb00 331c 	mls	r3, r0, ip, r3
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801b8f2:	44e0      	add	r8, ip
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801b8f4:	b29b      	uxth	r3, r3
 801b8f6:	459c      	cmp	ip, r3
 801b8f8:	d801      	bhi.n	801b8fe <UTIL_LCD_DisplayStringAt+0x8e>
 801b8fa:	2a00      	cmp	r2, #0
 801b8fc:	d1e9      	bne.n	801b8d2 <UTIL_LCD_DisplayStringAt+0x62>
}
 801b8fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 801b902:	1a36      	subs	r6, r6, r0
 801b904:	fb0c f606 	mul.w	r6, ip, r6
 801b908:	eb08 0856 	add.w	r8, r8, r6, lsr #1
      break;
 801b90c:	e7d3      	b.n	801b8b6 <UTIL_LCD_DisplayStringAt+0x46>
  uint32_t size = 0, xsize = 0;
 801b90e:	4610      	mov	r0, r2
 801b910:	e7be      	b.n	801b890 <UTIL_LCD_DisplayStringAt+0x20>
 801b912:	bf00      	nop
 801b914:	2000a360 	.word	0x2000a360

0801b918 <UTIL_LCD_DrawLine>:
{
 801b918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (Xpos2 >= Xpos1)                 /* The x-values are increasing */
 801b91c:	f64f 75ff 	movw	r5, #65535	; 0xffff
  x_diff = Xpos2 - Xpos1;
 801b920:	1a14      	subs	r4, r2, r0
{
 801b922:	ed2d 8b02 	vpush	{d8}
  if (Xpos2 >= Xpos1)                 /* The x-values are increasing */
 801b926:	4282      	cmp	r2, r0
 801b928:	bf34      	ite	cc
 801b92a:	462a      	movcc	r2, r5
 801b92c:	2201      	movcs	r2, #1
{
 801b92e:	b087      	sub	sp, #28
  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 801b930:	2c00      	cmp	r4, #0
  x = Xpos1;                       /* Start x off at the first pixel */
 801b932:	b200      	sxth	r0, r0
  if (Xpos2 >= Xpos1)                 /* The x-values are increasing */
 801b934:	9203      	str	r2, [sp, #12]
  if (Ypos2 >= Ypos1)                 /* The y-values are increasing */
 801b936:	462a      	mov	r2, r5
  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 801b938:	bfb8      	it	lt
 801b93a:	4264      	neglt	r4, r4
  if (Ypos2 >= Ypos1)                 /* The y-values are increasing */
 801b93c:	428b      	cmp	r3, r1
 801b93e:	bf28      	it	cs
 801b940:	2201      	movcs	r2, #1
  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 801b942:	b224      	sxth	r4, r4
  if (Ypos2 >= Ypos1)                 /* The y-values are increasing */
 801b944:	9204      	str	r2, [sp, #16]
  y_diff = Ypos2 - Ypos1;
 801b946:	1a5a      	subs	r2, r3, r1
  y = Ypos1;                       /* Start y off at the first pixel */
 801b948:	b20b      	sxth	r3, r1
  deltay = ABS(y_diff);         /* The absolute difference between the y's */
 801b94a:	2a00      	cmp	r2, #0
 801b94c:	bfb8      	it	lt
 801b94e:	4252      	neglt	r2, r2
 801b950:	b212      	sxth	r2, r2
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 801b952:	4294      	cmp	r4, r2
 801b954:	db5b      	blt.n	801ba0e <UTIL_LCD_DrawLine+0xf6>
    num = deltax / 2;
 801b956:	2c00      	cmp	r4, #0
 801b958:	4625      	mov	r5, r4
 801b95a:	f04f 0100 	mov.w	r1, #0
 801b95e:	9f03      	ldr	r7, [sp, #12]
 801b960:	bfb8      	it	lt
 801b962:	1c65      	addlt	r5, r4, #1
 801b964:	4688      	mov	r8, r1
 801b966:	9103      	str	r1, [sp, #12]
 801b968:	106d      	asrs	r5, r5, #1
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801b96a:	2c00      	cmp	r4, #0
 801b96c:	db40      	blt.n	801b9f0 <UTIL_LCD_DrawLine+0xd8>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801b96e:	b292      	uxth	r2, r2
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 801b970:	9912      	ldr	r1, [sp, #72]	; 0x48
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801b972:	2600      	movs	r6, #0
 801b974:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 801ba2c <UTIL_LCD_DrawLine+0x114>
 801b978:	9205      	str	r2, [sp, #20]
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 801b97a:	0a09      	lsrs	r1, r1, #8
 801b97c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b97e:	46bb      	mov	fp, r7
 801b980:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801b984:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 801ba30 <UTIL_LCD_DrawLine+0x118>
 801b988:	0952      	lsrs	r2, r2, #5
 801b98a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b98e:	430a      	orrs	r2, r1
 801b990:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b992:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801b996:	430a      	orrs	r2, r1
 801b998:	ee08 2a10 	vmov	s16, r2
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801b99c:	f8d9 701c 	ldr.w	r7, [r9, #28]
    UTIL_LCD_SetPixel(x, y, Color);   /* Draw the current pixel */
 801b9a0:	b281      	uxth	r1, r0
 801b9a2:	b29a      	uxth	r2, r3
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 801b9a4:	f8d9 0010 	ldr.w	r0, [r9, #16]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801b9a8:	2f02      	cmp	r7, #2
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 801b9aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 801b9ac:	f8da 7018 	ldr.w	r7, [sl, #24]
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801b9b0:	f106 0601 	add.w	r6, r6, #1
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 801b9b4:	bf08      	it	eq
 801b9b6:	ee18 3a10 	vmoveq	r3, s16
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 801b9ba:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801b9be:	47b8      	blx	r7
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801b9c0:	9b05      	ldr	r3, [sp, #20]
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 801b9c2:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801b9c6:	195f      	adds	r7, r3, r5
      x += xinc1;                             /* Change the x as appropriate */
 801b9c8:	9b03      	ldr	r3, [sp, #12]
 801b9ca:	18c8      	adds	r0, r1, r3
      y += yinc1;                             /* Change the y as appropriate */
 801b9cc:	9b04      	ldr	r3, [sp, #16]
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801b9ce:	b23d      	sxth	r5, r7
    x += xinc2;                               /* Change the x as appropriate */
 801b9d0:	4459      	add	r1, fp
      y += yinc1;                             /* Change the y as appropriate */
 801b9d2:	18d3      	adds	r3, r2, r3
    x += xinc2;                               /* Change the x as appropriate */
 801b9d4:	4458      	add	r0, fp
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801b9d6:	b2bf      	uxth	r7, r7
    if (num >= den)                           /* Check if numerator >= denominator */
 801b9d8:	42ac      	cmp	r4, r5
    y += yinc2;                               /* Change the y as appropriate */
 801b9da:	4443      	add	r3, r8
 801b9dc:	4442      	add	r2, r8
    x += xinc2;                               /* Change the x as appropriate */
 801b9de:	b200      	sxth	r0, r0
      num -= den;                             /* Calculate the new numerator value */
 801b9e0:	eba7 0704 	sub.w	r7, r7, r4
    y += yinc2;                               /* Change the y as appropriate */
 801b9e4:	b21b      	sxth	r3, r3
    if (num >= den)                           /* Check if numerator >= denominator */
 801b9e6:	dc08      	bgt.n	801b9fa <UTIL_LCD_DrawLine+0xe2>
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801b9e8:	b232      	sxth	r2, r6
      num -= den;                             /* Calculate the new numerator value */
 801b9ea:	b23d      	sxth	r5, r7
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801b9ec:	42a2      	cmp	r2, r4
 801b9ee:	ddd5      	ble.n	801b99c <UTIL_LCD_DrawLine+0x84>
}
 801b9f0:	b007      	add	sp, #28
 801b9f2:	ecbd 8b02 	vpop	{d8}
 801b9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    y += yinc2;                               /* Change the y as appropriate */
 801b9fa:	b213      	sxth	r3, r2
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801b9fc:	b232      	sxth	r2, r6
    x += xinc2;                               /* Change the x as appropriate */
 801b9fe:	b208      	sxth	r0, r1
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801ba00:	42a2      	cmp	r2, r4
 801ba02:	ddcb      	ble.n	801b99c <UTIL_LCD_DrawLine+0x84>
}
 801ba04:	b007      	add	sp, #28
 801ba06:	ecbd 8b02 	vpop	{d8}
 801ba0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
 801ba0e:	4621      	mov	r1, r4
 801ba10:	2a00      	cmp	r2, #0
 801ba12:	4615      	mov	r5, r2
 801ba14:	4614      	mov	r4, r2
 801ba16:	bfb8      	it	lt
 801ba18:	1c55      	addlt	r5, r2, #1
 801ba1a:	460a      	mov	r2, r1
 801ba1c:	2100      	movs	r1, #0
 801ba1e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801ba22:	f345 054f 	sbfx	r5, r5, #1, #16
 801ba26:	460f      	mov	r7, r1
 801ba28:	9104      	str	r1, [sp, #16]
 801ba2a:	e79e      	b.n	801b96a <UTIL_LCD_DrawLine+0x52>
 801ba2c:	2000a360 	.word	0x2000a360
 801ba30:	2000a3a0 	.word	0x2000a3a0

0801ba34 <UTIL_LCD_DrawRect>:
{
 801ba34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ba38:	4c3e      	ldr	r4, [pc, #248]	; (801bb34 <UTIL_LCD_DrawRect+0x100>)
{
 801ba3a:	469b      	mov	fp, r3
 801ba3c:	b083      	sub	sp, #12
 801ba3e:	4682      	mov	sl, r0
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ba40:	69e3      	ldr	r3, [r4, #28]
{
 801ba42:	460d      	mov	r5, r1
 801ba44:	4691      	mov	r9, r2
 801ba46:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ba4a:	2b02      	cmp	r3, #2
 801ba4c:	d031      	beq.n	801bab2 <UTIL_LCD_DrawRect+0x7e>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801ba4e:	f8cd 8000 	str.w	r8, [sp]
 801ba52:	4f39      	ldr	r7, [pc, #228]	; (801bb38 <UTIL_LCD_DrawRect+0x104>)
 801ba54:	464b      	mov	r3, r9
 801ba56:	462a      	mov	r2, r5
 801ba58:	4651      	mov	r1, sl
 801ba5a:	6920      	ldr	r0, [r4, #16]
 801ba5c:	68be      	ldr	r6, [r7, #8]
 801ba5e:	47b0      	blx	r6
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ba60:	69e3      	ldr	r3, [r4, #28]
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 801ba62:	f10b 32ff 	add.w	r2, fp, #4294967295
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ba66:	2b02      	cmp	r3, #2
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 801ba68:	442a      	add	r2, r5
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ba6a:	d054      	beq.n	801bb16 <UTIL_LCD_DrawRect+0xe2>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801ba6c:	f8cd 8000 	str.w	r8, [sp]
 801ba70:	464b      	mov	r3, r9
 801ba72:	4651      	mov	r1, sl
 801ba74:	6920      	ldr	r0, [r4, #16]
 801ba76:	68be      	ldr	r6, [r7, #8]
 801ba78:	47b0      	blx	r6
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ba7a:	69e3      	ldr	r3, [r4, #28]
 801ba7c:	2b02      	cmp	r3, #2
 801ba7e:	d03c      	beq.n	801bafa <UTIL_LCD_DrawRect+0xc6>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801ba80:	f8cd 8000 	str.w	r8, [sp]
 801ba84:	465b      	mov	r3, fp
 801ba86:	4651      	mov	r1, sl
 801ba88:	462a      	mov	r2, r5
 801ba8a:	6920      	ldr	r0, [r4, #16]
 801ba8c:	68fe      	ldr	r6, [r7, #12]
 801ba8e:	47b0      	blx	r6
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ba90:	69e3      	ldr	r3, [r4, #28]
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 801ba92:	f109 31ff 	add.w	r1, r9, #4294967295
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ba96:	2b02      	cmp	r3, #2
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 801ba98:	4451      	add	r1, sl
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ba9a:	d018      	beq.n	801bace <UTIL_LCD_DrawRect+0x9a>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801ba9c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 801baa0:	465b      	mov	r3, fp
 801baa2:	68ff      	ldr	r7, [r7, #12]
 801baa4:	462a      	mov	r2, r5
 801baa6:	6920      	ldr	r0, [r4, #16]
 801baa8:	46bc      	mov	ip, r7
}
 801baaa:	b003      	add	sp, #12
 801baac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801bab0:	4760      	bx	ip
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801bab2:	ea4f 1358 	mov.w	r3, r8, lsr #5
 801bab6:	ea4f 2218 	mov.w	r2, r8, lsr #8
 801baba:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801babe:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801bac2:	4313      	orrs	r3, r2
 801bac4:	f3c8 02c4 	ubfx	r2, r8, #3, #5
 801bac8:	4313      	orrs	r3, r2
 801baca:	9300      	str	r3, [sp, #0]
 801bacc:	e7c1      	b.n	801ba52 <UTIL_LCD_DrawRect+0x1e>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801bace:	6920      	ldr	r0, [r4, #16]
 801bad0:	462a      	mov	r2, r5
 801bad2:	ea4f 1458 	mov.w	r4, r8, lsr #5
 801bad6:	68ff      	ldr	r7, [r7, #12]
 801bad8:	ea4f 2518 	mov.w	r5, r8, lsr #8
 801badc:	f3c8 06c4 	ubfx	r6, r8, #3, #5
 801bae0:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801bae4:	465b      	mov	r3, fp
 801bae6:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801baea:	46bc      	mov	ip, r7
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801baec:	432c      	orrs	r4, r5
 801baee:	4334      	orrs	r4, r6
 801baf0:	940c      	str	r4, [sp, #48]	; 0x30
}
 801baf2:	b003      	add	sp, #12
 801baf4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801baf8:	4760      	bx	ip
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801bafa:	ea4f 1358 	mov.w	r3, r8, lsr #5
 801bafe:	ea4f 2218 	mov.w	r2, r8, lsr #8
 801bb02:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801bb06:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801bb0a:	4313      	orrs	r3, r2
 801bb0c:	f3c8 02c4 	ubfx	r2, r8, #3, #5
 801bb10:	4313      	orrs	r3, r2
 801bb12:	9300      	str	r3, [sp, #0]
 801bb14:	e7b6      	b.n	801ba84 <UTIL_LCD_DrawRect+0x50>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801bb16:	ea4f 1358 	mov.w	r3, r8, lsr #5
 801bb1a:	ea4f 2118 	mov.w	r1, r8, lsr #8
 801bb1e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801bb22:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801bb26:	430b      	orrs	r3, r1
 801bb28:	f3c8 01c4 	ubfx	r1, r8, #3, #5
 801bb2c:	430b      	orrs	r3, r1
 801bb2e:	9300      	str	r3, [sp, #0]
 801bb30:	e79e      	b.n	801ba70 <UTIL_LCD_DrawRect+0x3c>
 801bb32:	bf00      	nop
 801bb34:	2000a360 	.word	0x2000a360
 801bb38:	2000a3a0 	.word	0x2000a3a0

0801bb3c <ai_buffer_get_size>:
 801bb3c:	b340      	cbz	r0, 801bb90 <ai_buffer_get_size+0x54>
 801bb3e:	4b15      	ldr	r3, [pc, #84]	; (801bb94 <ai_buffer_get_size+0x58>)
 801bb40:	b430      	push	{r4, r5}
 801bb42:	6802      	ldr	r2, [r0, #0]
 801bb44:	4d14      	ldr	r5, [pc, #80]	; (801bb98 <ai_buffer_get_size+0x5c>)
 801bb46:	4013      	ands	r3, r2
 801bb48:	6984      	ldr	r4, [r0, #24]
 801bb4a:	42ab      	cmp	r3, r5
 801bb4c:	6862      	ldr	r2, [r4, #4]
 801bb4e:	d103      	bne.n	801bb58 <ai_buffer_get_size+0x1c>
 801bb50:	b111      	cbz	r1, 801bb58 <ai_buffer_get_size+0x1c>
 801bb52:	321f      	adds	r2, #31
 801bb54:	f022 021f 	bic.w	r2, r2, #31
 801bb58:	7d03      	ldrb	r3, [r0, #20]
 801bb5a:	6941      	ldr	r1, [r0, #20]
 801bb5c:	f1a3 0301 	sub.w	r3, r3, #1
 801bb60:	f3c1 2117 	ubfx	r1, r1, #8, #24
 801bb64:	fab3 f383 	clz	r3, r3
 801bb68:	095b      	lsrs	r3, r3, #5
 801bb6a:	428b      	cmp	r3, r1
 801bb6c:	da0c      	bge.n	801bb88 <ai_buffer_get_size+0x4c>
 801bb6e:	2b01      	cmp	r3, #1
 801bb70:	d103      	bne.n	801bb7a <ai_buffer_get_size+0x3e>
 801bb72:	2902      	cmp	r1, #2
 801bb74:	f04f 0302 	mov.w	r3, #2
 801bb78:	d006      	beq.n	801bb88 <ai_buffer_get_size+0x4c>
 801bb7a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801bb7e:	3301      	adds	r3, #1
 801bb80:	428b      	cmp	r3, r1
 801bb82:	fb00 f202 	mul.w	r2, r0, r2
 801bb86:	d1f2      	bne.n	801bb6e <ai_buffer_get_size+0x32>
 801bb88:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 801bb8c:	bc30      	pop	{r4, r5}
 801bb8e:	4770      	bx	lr
 801bb90:	4770      	bx	lr
 801bb92:	bf00      	nop
 801bb94:	017fffff 	.word	0x017fffff
 801bb98:	000400c0 	.word	0x000400c0

0801bb9c <ai_buffer_array_sane>:
 801bb9c:	b138      	cbz	r0, 801bbae <ai_buffer_array_sane+0x12>
 801bb9e:	6843      	ldr	r3, [r0, #4]
 801bba0:	b123      	cbz	r3, 801bbac <ai_buffer_array_sane+0x10>
 801bba2:	8840      	ldrh	r0, [r0, #2]
 801bba4:	3000      	adds	r0, #0
 801bba6:	bf18      	it	ne
 801bba8:	2001      	movne	r0, #1
 801bbaa:	4770      	bx	lr
 801bbac:	4618      	mov	r0, r3
 801bbae:	4770      	bx	lr

0801bbb0 <_ai_platform_acquire_crc>:
 801bbb0:	2001      	movs	r0, #1
 801bbb2:	4770      	bx	lr

0801bbb4 <_ai_platform_release_crc>:
 801bbb4:	4770      	bx	lr
 801bbb6:	bf00      	nop

0801bbb8 <ai_platform_get_weights_map>:
 801bbb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bbba:	fab1 f381 	clz	r3, r1
 801bbbe:	095b      	lsrs	r3, r3, #5
 801bbc0:	2800      	cmp	r0, #0
 801bbc2:	bf08      	it	eq
 801bbc4:	2301      	moveq	r3, #1
 801bbc6:	2a00      	cmp	r2, #0
 801bbc8:	bf14      	ite	ne
 801bbca:	461c      	movne	r4, r3
 801bbcc:	2401      	moveq	r4, #1
 801bbce:	b114      	cbz	r4, 801bbd6 <ai_platform_get_weights_map+0x1e>
 801bbd0:	2400      	movs	r4, #0
 801bbd2:	4620      	mov	r0, r4
 801bbd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bbd6:	4b22      	ldr	r3, [pc, #136]	; (801bc60 <ai_platform_get_weights_map+0xa8>)
 801bbd8:	6815      	ldr	r5, [r2, #0]
 801bbda:	429d      	cmp	r5, r3
 801bbdc:	d00c      	beq.n	801bbf8 <ai_platform_get_weights_map+0x40>
 801bbde:	6855      	ldr	r5, [r2, #4]
 801bbe0:	2d00      	cmp	r5, #0
 801bbe2:	d0f5      	beq.n	801bbd0 <ai_platform_get_weights_map+0x18>
 801bbe4:	682e      	ldr	r6, [r5, #0]
 801bbe6:	429e      	cmp	r6, r3
 801bbe8:	d022      	beq.n	801bc30 <ai_platform_get_weights_map+0x78>
 801bbea:	f1a1 0401 	sub.w	r4, r1, #1
 801bbee:	6005      	str	r5, [r0, #0]
 801bbf0:	fab4 f484 	clz	r4, r4
 801bbf4:	0964      	lsrs	r4, r4, #5
 801bbf6:	e7ec      	b.n	801bbd2 <ai_platform_get_weights_map+0x1a>
 801bbf8:	4606      	mov	r6, r0
 801bbfa:	1d10      	adds	r0, r2, #4
 801bbfc:	4615      	mov	r5, r2
 801bbfe:	460f      	mov	r7, r1
 801bc00:	f7ff ffcc 	bl	801bb9c <ai_buffer_array_sane>
 801bc04:	2800      	cmp	r0, #0
 801bc06:	d0e3      	beq.n	801bbd0 <ai_platform_get_weights_map+0x18>
 801bc08:	88eb      	ldrh	r3, [r5, #6]
 801bc0a:	429f      	cmp	r7, r3
 801bc0c:	d1e0      	bne.n	801bbd0 <ai_platform_get_weights_map+0x18>
 801bc0e:	1f33      	subs	r3, r6, #4
 801bc10:	4620      	mov	r0, r4
 801bc12:	68aa      	ldr	r2, [r5, #8]
 801bc14:	4422      	add	r2, r4
 801bc16:	341c      	adds	r4, #28
 801bc18:	6852      	ldr	r2, [r2, #4]
 801bc1a:	b122      	cbz	r2, 801bc26 <ai_platform_get_weights_map+0x6e>
 801bc1c:	3001      	adds	r0, #1
 801bc1e:	f843 2f04 	str.w	r2, [r3, #4]!
 801bc22:	4287      	cmp	r7, r0
 801bc24:	d8f5      	bhi.n	801bc12 <ai_platform_get_weights_map+0x5a>
 801bc26:	1a3c      	subs	r4, r7, r0
 801bc28:	fab4 f484 	clz	r4, r4
 801bc2c:	0964      	lsrs	r4, r4, #5
 801bc2e:	e7d0      	b.n	801bbd2 <ai_platform_get_weights_map+0x1a>
 801bc30:	686b      	ldr	r3, [r5, #4]
 801bc32:	3504      	adds	r5, #4
 801bc34:	42b3      	cmp	r3, r6
 801bc36:	d0cc      	beq.n	801bbd2 <ai_platform_get_weights_map+0x1a>
 801bc38:	3804      	subs	r0, #4
 801bc3a:	462f      	mov	r7, r5
 801bc3c:	4622      	mov	r2, r4
 801bc3e:	e003      	b.n	801bc48 <ai_platform_get_weights_map+0x90>
 801bc40:	f857 3f04 	ldr.w	r3, [r7, #4]!
 801bc44:	42b3      	cmp	r3, r6
 801bc46:	d0c4      	beq.n	801bbd2 <ai_platform_get_weights_map+0x1a>
 801bc48:	3201      	adds	r2, #1
 801bc4a:	f840 3f04 	str.w	r3, [r0, #4]!
 801bc4e:	4291      	cmp	r1, r2
 801bc50:	d1f6      	bne.n	801bc40 <ai_platform_get_weights_map+0x88>
 801bc52:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 801bc56:	4b02      	ldr	r3, [pc, #8]	; (801bc60 <ai_platform_get_weights_map+0xa8>)
 801bc58:	429a      	cmp	r2, r3
 801bc5a:	bf08      	it	eq
 801bc5c:	2401      	moveq	r4, #1
 801bc5e:	e7b8      	b.n	801bbd2 <ai_platform_get_weights_map+0x1a>
 801bc60:	a1facade 	.word	0xa1facade

0801bc64 <ai_platform_get_activations_map>:
 801bc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc66:	fab1 f381 	clz	r3, r1
 801bc6a:	095b      	lsrs	r3, r3, #5
 801bc6c:	2800      	cmp	r0, #0
 801bc6e:	bf08      	it	eq
 801bc70:	2301      	moveq	r3, #1
 801bc72:	2a00      	cmp	r2, #0
 801bc74:	bf14      	ite	ne
 801bc76:	461c      	movne	r4, r3
 801bc78:	2401      	moveq	r4, #1
 801bc7a:	b114      	cbz	r4, 801bc82 <ai_platform_get_activations_map+0x1e>
 801bc7c:	2400      	movs	r4, #0
 801bc7e:	4620      	mov	r0, r4
 801bc80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc82:	4b23      	ldr	r3, [pc, #140]	; (801bd10 <ai_platform_get_activations_map+0xac>)
 801bc84:	6815      	ldr	r5, [r2, #0]
 801bc86:	429d      	cmp	r5, r3
 801bc88:	d00c      	beq.n	801bca4 <ai_platform_get_activations_map+0x40>
 801bc8a:	6a15      	ldr	r5, [r2, #32]
 801bc8c:	2d00      	cmp	r5, #0
 801bc8e:	d0f5      	beq.n	801bc7c <ai_platform_get_activations_map+0x18>
 801bc90:	682e      	ldr	r6, [r5, #0]
 801bc92:	429e      	cmp	r6, r3
 801bc94:	d023      	beq.n	801bcde <ai_platform_get_activations_map+0x7a>
 801bc96:	f1a1 0401 	sub.w	r4, r1, #1
 801bc9a:	6005      	str	r5, [r0, #0]
 801bc9c:	fab4 f484 	clz	r4, r4
 801bca0:	0964      	lsrs	r4, r4, #5
 801bca2:	e7ec      	b.n	801bc7e <ai_platform_get_activations_map+0x1a>
 801bca4:	4606      	mov	r6, r0
 801bca6:	f102 000c 	add.w	r0, r2, #12
 801bcaa:	4615      	mov	r5, r2
 801bcac:	460f      	mov	r7, r1
 801bcae:	f7ff ff75 	bl	801bb9c <ai_buffer_array_sane>
 801bcb2:	2800      	cmp	r0, #0
 801bcb4:	d0e2      	beq.n	801bc7c <ai_platform_get_activations_map+0x18>
 801bcb6:	89eb      	ldrh	r3, [r5, #14]
 801bcb8:	429f      	cmp	r7, r3
 801bcba:	d1df      	bne.n	801bc7c <ai_platform_get_activations_map+0x18>
 801bcbc:	1f33      	subs	r3, r6, #4
 801bcbe:	4620      	mov	r0, r4
 801bcc0:	692a      	ldr	r2, [r5, #16]
 801bcc2:	4422      	add	r2, r4
 801bcc4:	341c      	adds	r4, #28
 801bcc6:	6852      	ldr	r2, [r2, #4]
 801bcc8:	b122      	cbz	r2, 801bcd4 <ai_platform_get_activations_map+0x70>
 801bcca:	3001      	adds	r0, #1
 801bccc:	f843 2f04 	str.w	r2, [r3, #4]!
 801bcd0:	4287      	cmp	r7, r0
 801bcd2:	d8f5      	bhi.n	801bcc0 <ai_platform_get_activations_map+0x5c>
 801bcd4:	1a3c      	subs	r4, r7, r0
 801bcd6:	fab4 f484 	clz	r4, r4
 801bcda:	0964      	lsrs	r4, r4, #5
 801bcdc:	e7cf      	b.n	801bc7e <ai_platform_get_activations_map+0x1a>
 801bcde:	686b      	ldr	r3, [r5, #4]
 801bce0:	3504      	adds	r5, #4
 801bce2:	42b3      	cmp	r3, r6
 801bce4:	d0cb      	beq.n	801bc7e <ai_platform_get_activations_map+0x1a>
 801bce6:	3804      	subs	r0, #4
 801bce8:	462f      	mov	r7, r5
 801bcea:	4622      	mov	r2, r4
 801bcec:	e003      	b.n	801bcf6 <ai_platform_get_activations_map+0x92>
 801bcee:	f857 3f04 	ldr.w	r3, [r7, #4]!
 801bcf2:	42b3      	cmp	r3, r6
 801bcf4:	d0c3      	beq.n	801bc7e <ai_platform_get_activations_map+0x1a>
 801bcf6:	3201      	adds	r2, #1
 801bcf8:	f840 3f04 	str.w	r3, [r0, #4]!
 801bcfc:	4291      	cmp	r1, r2
 801bcfe:	d1f6      	bne.n	801bcee <ai_platform_get_activations_map+0x8a>
 801bd00:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 801bd04:	4b02      	ldr	r3, [pc, #8]	; (801bd10 <ai_platform_get_activations_map+0xac>)
 801bd06:	429a      	cmp	r2, r3
 801bd08:	bf08      	it	eq
 801bd0a:	2401      	moveq	r4, #1
 801bd0c:	e7b7      	b.n	801bc7e <ai_platform_get_activations_map+0x1a>
 801bd0e:	bf00      	nop
 801bd10:	a1facade 	.word	0xa1facade

0801bd14 <ai_platform_runtime_get_revision>:
 801bd14:	4a34      	ldr	r2, [pc, #208]	; (801bde8 <ai_platform_runtime_get_revision+0xd4>)
 801bd16:	b508      	push	{r3, lr}
 801bd18:	6813      	ldr	r3, [r2, #0]
 801bd1a:	f023 0301 	bic.w	r3, r3, #1
 801bd1e:	6013      	str	r3, [r2, #0]
 801bd20:	f7ff ff46 	bl	801bbb0 <_ai_platform_acquire_crc>
 801bd24:	4b31      	ldr	r3, [pc, #196]	; (801bdec <ai_platform_runtime_get_revision+0xd8>)
 801bd26:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801bd2a:	681b      	ldr	r3, [r3, #0]
 801bd2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bd30:	189a      	adds	r2, r3, r2
 801bd32:	2a01      	cmp	r2, #1
 801bd34:	d91b      	bls.n	801bd6e <ai_platform_runtime_get_revision+0x5a>
 801bd36:	f240 4249 	movw	r2, #1097	; 0x449
 801bd3a:	4293      	cmp	r3, r2
 801bd3c:	d017      	beq.n	801bd6e <ai_platform_runtime_get_revision+0x5a>
 801bd3e:	4b2c      	ldr	r3, [pc, #176]	; (801bdf0 <ai_platform_runtime_get_revision+0xdc>)
 801bd40:	681a      	ldr	r2, [r3, #0]
 801bd42:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801bd46:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801bd4a:	d01f      	beq.n	801bd8c <ai_platform_runtime_get_revision+0x78>
 801bd4c:	681a      	ldr	r2, [r3, #0]
 801bd4e:	f240 4183 	movw	r1, #1155	; 0x483
 801bd52:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801bd56:	428a      	cmp	r2, r1
 801bd58:	d036      	beq.n	801bdc8 <ai_platform_runtime_get_revision+0xb4>
 801bd5a:	681b      	ldr	r3, [r3, #0]
 801bd5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bd60:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801bd64:	d021      	beq.n	801bdaa <ai_platform_runtime_get_revision+0x96>
 801bd66:	f7ff ff25 	bl	801bbb4 <_ai_platform_release_crc>
 801bd6a:	4822      	ldr	r0, [pc, #136]	; (801bdf4 <ai_platform_runtime_get_revision+0xe0>)
 801bd6c:	bd08      	pop	{r3, pc}
 801bd6e:	4b22      	ldr	r3, [pc, #136]	; (801bdf8 <ai_platform_runtime_get_revision+0xe4>)
 801bd70:	2201      	movs	r2, #1
 801bd72:	4619      	mov	r1, r3
 801bd74:	601a      	str	r2, [r3, #0]
 801bd76:	680b      	ldr	r3, [r1, #0]
 801bd78:	2b00      	cmp	r3, #0
 801bd7a:	d1fc      	bne.n	801bd76 <ai_platform_runtime_get_revision+0x62>
 801bd7c:	4b1f      	ldr	r3, [pc, #124]	; (801bdfc <ai_platform_runtime_get_revision+0xe8>)
 801bd7e:	4920      	ldr	r1, [pc, #128]	; (801be00 <ai_platform_runtime_get_revision+0xec>)
 801bd80:	4a20      	ldr	r2, [pc, #128]	; (801be04 <ai_platform_runtime_get_revision+0xf0>)
 801bd82:	6019      	str	r1, [r3, #0]
 801bd84:	681b      	ldr	r3, [r3, #0]
 801bd86:	4293      	cmp	r3, r2
 801bd88:	d0ed      	beq.n	801bd66 <ai_platform_runtime_get_revision+0x52>
 801bd8a:	e7fe      	b.n	801bd8a <ai_platform_runtime_get_revision+0x76>
 801bd8c:	4b1e      	ldr	r3, [pc, #120]	; (801be08 <ai_platform_runtime_get_revision+0xf4>)
 801bd8e:	2201      	movs	r2, #1
 801bd90:	4619      	mov	r1, r3
 801bd92:	601a      	str	r2, [r3, #0]
 801bd94:	680b      	ldr	r3, [r1, #0]
 801bd96:	2b00      	cmp	r3, #0
 801bd98:	d1fc      	bne.n	801bd94 <ai_platform_runtime_get_revision+0x80>
 801bd9a:	4b1c      	ldr	r3, [pc, #112]	; (801be0c <ai_platform_runtime_get_revision+0xf8>)
 801bd9c:	4918      	ldr	r1, [pc, #96]	; (801be00 <ai_platform_runtime_get_revision+0xec>)
 801bd9e:	4a19      	ldr	r2, [pc, #100]	; (801be04 <ai_platform_runtime_get_revision+0xf0>)
 801bda0:	6019      	str	r1, [r3, #0]
 801bda2:	681b      	ldr	r3, [r3, #0]
 801bda4:	4293      	cmp	r3, r2
 801bda6:	d0de      	beq.n	801bd66 <ai_platform_runtime_get_revision+0x52>
 801bda8:	e7fe      	b.n	801bda8 <ai_platform_runtime_get_revision+0x94>
 801bdaa:	4b13      	ldr	r3, [pc, #76]	; (801bdf8 <ai_platform_runtime_get_revision+0xe4>)
 801bdac:	2201      	movs	r2, #1
 801bdae:	4619      	mov	r1, r3
 801bdb0:	601a      	str	r2, [r3, #0]
 801bdb2:	680b      	ldr	r3, [r1, #0]
 801bdb4:	2b00      	cmp	r3, #0
 801bdb6:	d1fc      	bne.n	801bdb2 <ai_platform_runtime_get_revision+0x9e>
 801bdb8:	4b10      	ldr	r3, [pc, #64]	; (801bdfc <ai_platform_runtime_get_revision+0xe8>)
 801bdba:	4911      	ldr	r1, [pc, #68]	; (801be00 <ai_platform_runtime_get_revision+0xec>)
 801bdbc:	4a11      	ldr	r2, [pc, #68]	; (801be04 <ai_platform_runtime_get_revision+0xf0>)
 801bdbe:	6019      	str	r1, [r3, #0]
 801bdc0:	681b      	ldr	r3, [r3, #0]
 801bdc2:	4293      	cmp	r3, r2
 801bdc4:	d0cf      	beq.n	801bd66 <ai_platform_runtime_get_revision+0x52>
 801bdc6:	e7fe      	b.n	801bdc6 <ai_platform_runtime_get_revision+0xb2>
 801bdc8:	4b0f      	ldr	r3, [pc, #60]	; (801be08 <ai_platform_runtime_get_revision+0xf4>)
 801bdca:	2201      	movs	r2, #1
 801bdcc:	4619      	mov	r1, r3
 801bdce:	601a      	str	r2, [r3, #0]
 801bdd0:	680b      	ldr	r3, [r1, #0]
 801bdd2:	2b00      	cmp	r3, #0
 801bdd4:	d1fc      	bne.n	801bdd0 <ai_platform_runtime_get_revision+0xbc>
 801bdd6:	4b0d      	ldr	r3, [pc, #52]	; (801be0c <ai_platform_runtime_get_revision+0xf8>)
 801bdd8:	4909      	ldr	r1, [pc, #36]	; (801be00 <ai_platform_runtime_get_revision+0xec>)
 801bdda:	4a0a      	ldr	r2, [pc, #40]	; (801be04 <ai_platform_runtime_get_revision+0xf0>)
 801bddc:	6019      	str	r1, [r3, #0]
 801bdde:	681b      	ldr	r3, [r3, #0]
 801bde0:	4293      	cmp	r3, r2
 801bde2:	d0c0      	beq.n	801bd66 <ai_platform_runtime_get_revision+0x52>
 801bde4:	e7fe      	b.n	801bde4 <ai_platform_runtime_get_revision+0xd0>
 801bde6:	bf00      	nop
 801bde8:	e0002000 	.word	0xe0002000
 801bdec:	e0042000 	.word	0xe0042000
 801bdf0:	5c001000 	.word	0x5c001000
 801bdf4:	080292c4 	.word	0x080292c4
 801bdf8:	40023008 	.word	0x40023008
 801bdfc:	40023000 	.word	0x40023000
 801be00:	f407a5c2 	.word	0xf407a5c2
 801be04:	b5e8b5cd 	.word	0xb5e8b5cd
 801be08:	58024c08 	.word	0x58024c08
 801be0c:	58024c00 	.word	0x58024c00

0801be10 <ai_platform_runtime_get_version>:
 801be10:	4a3d      	ldr	r2, [pc, #244]	; (801bf08 <ai_platform_runtime_get_version+0xf8>)
 801be12:	b510      	push	{r4, lr}
 801be14:	6813      	ldr	r3, [r2, #0]
 801be16:	b082      	sub	sp, #8
 801be18:	f023 0301 	bic.w	r3, r3, #1
 801be1c:	6013      	str	r3, [r2, #0]
 801be1e:	f7ff fec7 	bl	801bbb0 <_ai_platform_acquire_crc>
 801be22:	4b3a      	ldr	r3, [pc, #232]	; (801bf0c <ai_platform_runtime_get_version+0xfc>)
 801be24:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801be28:	681b      	ldr	r3, [r3, #0]
 801be2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801be2e:	189a      	adds	r2, r3, r2
 801be30:	2a01      	cmp	r2, #1
 801be32:	d92c      	bls.n	801be8e <ai_platform_runtime_get_version+0x7e>
 801be34:	f240 4249 	movw	r2, #1097	; 0x449
 801be38:	4293      	cmp	r3, r2
 801be3a:	d028      	beq.n	801be8e <ai_platform_runtime_get_version+0x7e>
 801be3c:	4b34      	ldr	r3, [pc, #208]	; (801bf10 <ai_platform_runtime_get_version+0x100>)
 801be3e:	681a      	ldr	r2, [r3, #0]
 801be40:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801be44:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801be48:	d030      	beq.n	801beac <ai_platform_runtime_get_version+0x9c>
 801be4a:	681a      	ldr	r2, [r3, #0]
 801be4c:	f240 4183 	movw	r1, #1155	; 0x483
 801be50:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801be54:	428a      	cmp	r2, r1
 801be56:	d047      	beq.n	801bee8 <ai_platform_runtime_get_version+0xd8>
 801be58:	681b      	ldr	r3, [r3, #0]
 801be5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801be5e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801be62:	d032      	beq.n	801beca <ai_platform_runtime_get_version+0xba>
 801be64:	f7ff fea6 	bl	801bbb4 <_ai_platform_release_crc>
 801be68:	4b2a      	ldr	r3, [pc, #168]	; (801bf14 <ai_platform_runtime_get_version+0x104>)
 801be6a:	2000      	movs	r0, #0
 801be6c:	681b      	ldr	r3, [r3, #0]
 801be6e:	b2dc      	uxtb	r4, r3
 801be70:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801be74:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801be78:	0e1b      	lsrs	r3, r3, #24
 801be7a:	f364 0007 	bfi	r0, r4, #0, #8
 801be7e:	f361 200f 	bfi	r0, r1, #8, #8
 801be82:	f362 4017 	bfi	r0, r2, #16, #8
 801be86:	f363 601f 	bfi	r0, r3, #24, #8
 801be8a:	b002      	add	sp, #8
 801be8c:	bd10      	pop	{r4, pc}
 801be8e:	4b22      	ldr	r3, [pc, #136]	; (801bf18 <ai_platform_runtime_get_version+0x108>)
 801be90:	2201      	movs	r2, #1
 801be92:	4619      	mov	r1, r3
 801be94:	601a      	str	r2, [r3, #0]
 801be96:	680b      	ldr	r3, [r1, #0]
 801be98:	2b00      	cmp	r3, #0
 801be9a:	d1fc      	bne.n	801be96 <ai_platform_runtime_get_version+0x86>
 801be9c:	4b1f      	ldr	r3, [pc, #124]	; (801bf1c <ai_platform_runtime_get_version+0x10c>)
 801be9e:	4920      	ldr	r1, [pc, #128]	; (801bf20 <ai_platform_runtime_get_version+0x110>)
 801bea0:	4a20      	ldr	r2, [pc, #128]	; (801bf24 <ai_platform_runtime_get_version+0x114>)
 801bea2:	6019      	str	r1, [r3, #0]
 801bea4:	681b      	ldr	r3, [r3, #0]
 801bea6:	4293      	cmp	r3, r2
 801bea8:	d0dc      	beq.n	801be64 <ai_platform_runtime_get_version+0x54>
 801beaa:	e7fe      	b.n	801beaa <ai_platform_runtime_get_version+0x9a>
 801beac:	4b1e      	ldr	r3, [pc, #120]	; (801bf28 <ai_platform_runtime_get_version+0x118>)
 801beae:	2201      	movs	r2, #1
 801beb0:	4619      	mov	r1, r3
 801beb2:	601a      	str	r2, [r3, #0]
 801beb4:	680b      	ldr	r3, [r1, #0]
 801beb6:	2b00      	cmp	r3, #0
 801beb8:	d1fc      	bne.n	801beb4 <ai_platform_runtime_get_version+0xa4>
 801beba:	4b1c      	ldr	r3, [pc, #112]	; (801bf2c <ai_platform_runtime_get_version+0x11c>)
 801bebc:	4918      	ldr	r1, [pc, #96]	; (801bf20 <ai_platform_runtime_get_version+0x110>)
 801bebe:	4a19      	ldr	r2, [pc, #100]	; (801bf24 <ai_platform_runtime_get_version+0x114>)
 801bec0:	6019      	str	r1, [r3, #0]
 801bec2:	681b      	ldr	r3, [r3, #0]
 801bec4:	4293      	cmp	r3, r2
 801bec6:	d0cd      	beq.n	801be64 <ai_platform_runtime_get_version+0x54>
 801bec8:	e7fe      	b.n	801bec8 <ai_platform_runtime_get_version+0xb8>
 801beca:	4b13      	ldr	r3, [pc, #76]	; (801bf18 <ai_platform_runtime_get_version+0x108>)
 801becc:	2201      	movs	r2, #1
 801bece:	4619      	mov	r1, r3
 801bed0:	601a      	str	r2, [r3, #0]
 801bed2:	680b      	ldr	r3, [r1, #0]
 801bed4:	2b00      	cmp	r3, #0
 801bed6:	d1fc      	bne.n	801bed2 <ai_platform_runtime_get_version+0xc2>
 801bed8:	4b10      	ldr	r3, [pc, #64]	; (801bf1c <ai_platform_runtime_get_version+0x10c>)
 801beda:	4911      	ldr	r1, [pc, #68]	; (801bf20 <ai_platform_runtime_get_version+0x110>)
 801bedc:	4a11      	ldr	r2, [pc, #68]	; (801bf24 <ai_platform_runtime_get_version+0x114>)
 801bede:	6019      	str	r1, [r3, #0]
 801bee0:	681b      	ldr	r3, [r3, #0]
 801bee2:	4293      	cmp	r3, r2
 801bee4:	d0be      	beq.n	801be64 <ai_platform_runtime_get_version+0x54>
 801bee6:	e7fe      	b.n	801bee6 <ai_platform_runtime_get_version+0xd6>
 801bee8:	4b0f      	ldr	r3, [pc, #60]	; (801bf28 <ai_platform_runtime_get_version+0x118>)
 801beea:	2201      	movs	r2, #1
 801beec:	4619      	mov	r1, r3
 801beee:	601a      	str	r2, [r3, #0]
 801bef0:	680b      	ldr	r3, [r1, #0]
 801bef2:	2b00      	cmp	r3, #0
 801bef4:	d1fc      	bne.n	801bef0 <ai_platform_runtime_get_version+0xe0>
 801bef6:	4b0d      	ldr	r3, [pc, #52]	; (801bf2c <ai_platform_runtime_get_version+0x11c>)
 801bef8:	4909      	ldr	r1, [pc, #36]	; (801bf20 <ai_platform_runtime_get_version+0x110>)
 801befa:	4a0a      	ldr	r2, [pc, #40]	; (801bf24 <ai_platform_runtime_get_version+0x114>)
 801befc:	6019      	str	r1, [r3, #0]
 801befe:	681b      	ldr	r3, [r3, #0]
 801bf00:	4293      	cmp	r3, r2
 801bf02:	d0af      	beq.n	801be64 <ai_platform_runtime_get_version+0x54>
 801bf04:	e7fe      	b.n	801bf04 <ai_platform_runtime_get_version+0xf4>
 801bf06:	bf00      	nop
 801bf08:	e0002000 	.word	0xe0002000
 801bf0c:	e0042000 	.word	0xe0042000
 801bf10:	5c001000 	.word	0x5c001000
 801bf14:	0809c600 	.word	0x0809c600
 801bf18:	40023008 	.word	0x40023008
 801bf1c:	40023000 	.word	0x40023000
 801bf20:	f407a5c2 	.word	0xf407a5c2
 801bf24:	b5e8b5cd 	.word	0xb5e8b5cd
 801bf28:	58024c08 	.word	0x58024c08
 801bf2c:	58024c00 	.word	0x58024c00

0801bf30 <ai_platform_api_get_version>:
 801bf30:	4a3d      	ldr	r2, [pc, #244]	; (801c028 <ai_platform_api_get_version+0xf8>)
 801bf32:	b510      	push	{r4, lr}
 801bf34:	6813      	ldr	r3, [r2, #0]
 801bf36:	b082      	sub	sp, #8
 801bf38:	f023 0301 	bic.w	r3, r3, #1
 801bf3c:	6013      	str	r3, [r2, #0]
 801bf3e:	f7ff fe37 	bl	801bbb0 <_ai_platform_acquire_crc>
 801bf42:	4b3a      	ldr	r3, [pc, #232]	; (801c02c <ai_platform_api_get_version+0xfc>)
 801bf44:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801bf48:	681b      	ldr	r3, [r3, #0]
 801bf4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bf4e:	189a      	adds	r2, r3, r2
 801bf50:	2a01      	cmp	r2, #1
 801bf52:	d92c      	bls.n	801bfae <ai_platform_api_get_version+0x7e>
 801bf54:	f240 4249 	movw	r2, #1097	; 0x449
 801bf58:	4293      	cmp	r3, r2
 801bf5a:	d028      	beq.n	801bfae <ai_platform_api_get_version+0x7e>
 801bf5c:	4b34      	ldr	r3, [pc, #208]	; (801c030 <ai_platform_api_get_version+0x100>)
 801bf5e:	681a      	ldr	r2, [r3, #0]
 801bf60:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801bf64:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801bf68:	d030      	beq.n	801bfcc <ai_platform_api_get_version+0x9c>
 801bf6a:	681a      	ldr	r2, [r3, #0]
 801bf6c:	f240 4183 	movw	r1, #1155	; 0x483
 801bf70:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801bf74:	428a      	cmp	r2, r1
 801bf76:	d047      	beq.n	801c008 <ai_platform_api_get_version+0xd8>
 801bf78:	681b      	ldr	r3, [r3, #0]
 801bf7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bf7e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801bf82:	d032      	beq.n	801bfea <ai_platform_api_get_version+0xba>
 801bf84:	f7ff fe16 	bl	801bbb4 <_ai_platform_release_crc>
 801bf88:	4b2a      	ldr	r3, [pc, #168]	; (801c034 <ai_platform_api_get_version+0x104>)
 801bf8a:	2000      	movs	r0, #0
 801bf8c:	681b      	ldr	r3, [r3, #0]
 801bf8e:	b2dc      	uxtb	r4, r3
 801bf90:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801bf94:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801bf98:	0e1b      	lsrs	r3, r3, #24
 801bf9a:	f364 0007 	bfi	r0, r4, #0, #8
 801bf9e:	f361 200f 	bfi	r0, r1, #8, #8
 801bfa2:	f362 4017 	bfi	r0, r2, #16, #8
 801bfa6:	f363 601f 	bfi	r0, r3, #24, #8
 801bfaa:	b002      	add	sp, #8
 801bfac:	bd10      	pop	{r4, pc}
 801bfae:	4b22      	ldr	r3, [pc, #136]	; (801c038 <ai_platform_api_get_version+0x108>)
 801bfb0:	2201      	movs	r2, #1
 801bfb2:	4619      	mov	r1, r3
 801bfb4:	601a      	str	r2, [r3, #0]
 801bfb6:	680b      	ldr	r3, [r1, #0]
 801bfb8:	2b00      	cmp	r3, #0
 801bfba:	d1fc      	bne.n	801bfb6 <ai_platform_api_get_version+0x86>
 801bfbc:	4b1f      	ldr	r3, [pc, #124]	; (801c03c <ai_platform_api_get_version+0x10c>)
 801bfbe:	4920      	ldr	r1, [pc, #128]	; (801c040 <ai_platform_api_get_version+0x110>)
 801bfc0:	4a20      	ldr	r2, [pc, #128]	; (801c044 <ai_platform_api_get_version+0x114>)
 801bfc2:	6019      	str	r1, [r3, #0]
 801bfc4:	681b      	ldr	r3, [r3, #0]
 801bfc6:	4293      	cmp	r3, r2
 801bfc8:	d0dc      	beq.n	801bf84 <ai_platform_api_get_version+0x54>
 801bfca:	e7fe      	b.n	801bfca <ai_platform_api_get_version+0x9a>
 801bfcc:	4b1e      	ldr	r3, [pc, #120]	; (801c048 <ai_platform_api_get_version+0x118>)
 801bfce:	2201      	movs	r2, #1
 801bfd0:	4619      	mov	r1, r3
 801bfd2:	601a      	str	r2, [r3, #0]
 801bfd4:	680b      	ldr	r3, [r1, #0]
 801bfd6:	2b00      	cmp	r3, #0
 801bfd8:	d1fc      	bne.n	801bfd4 <ai_platform_api_get_version+0xa4>
 801bfda:	4b1c      	ldr	r3, [pc, #112]	; (801c04c <ai_platform_api_get_version+0x11c>)
 801bfdc:	4918      	ldr	r1, [pc, #96]	; (801c040 <ai_platform_api_get_version+0x110>)
 801bfde:	4a19      	ldr	r2, [pc, #100]	; (801c044 <ai_platform_api_get_version+0x114>)
 801bfe0:	6019      	str	r1, [r3, #0]
 801bfe2:	681b      	ldr	r3, [r3, #0]
 801bfe4:	4293      	cmp	r3, r2
 801bfe6:	d0cd      	beq.n	801bf84 <ai_platform_api_get_version+0x54>
 801bfe8:	e7fe      	b.n	801bfe8 <ai_platform_api_get_version+0xb8>
 801bfea:	4b13      	ldr	r3, [pc, #76]	; (801c038 <ai_platform_api_get_version+0x108>)
 801bfec:	2201      	movs	r2, #1
 801bfee:	4619      	mov	r1, r3
 801bff0:	601a      	str	r2, [r3, #0]
 801bff2:	680b      	ldr	r3, [r1, #0]
 801bff4:	2b00      	cmp	r3, #0
 801bff6:	d1fc      	bne.n	801bff2 <ai_platform_api_get_version+0xc2>
 801bff8:	4b10      	ldr	r3, [pc, #64]	; (801c03c <ai_platform_api_get_version+0x10c>)
 801bffa:	4911      	ldr	r1, [pc, #68]	; (801c040 <ai_platform_api_get_version+0x110>)
 801bffc:	4a11      	ldr	r2, [pc, #68]	; (801c044 <ai_platform_api_get_version+0x114>)
 801bffe:	6019      	str	r1, [r3, #0]
 801c000:	681b      	ldr	r3, [r3, #0]
 801c002:	4293      	cmp	r3, r2
 801c004:	d0be      	beq.n	801bf84 <ai_platform_api_get_version+0x54>
 801c006:	e7fe      	b.n	801c006 <ai_platform_api_get_version+0xd6>
 801c008:	4b0f      	ldr	r3, [pc, #60]	; (801c048 <ai_platform_api_get_version+0x118>)
 801c00a:	2201      	movs	r2, #1
 801c00c:	4619      	mov	r1, r3
 801c00e:	601a      	str	r2, [r3, #0]
 801c010:	680b      	ldr	r3, [r1, #0]
 801c012:	2b00      	cmp	r3, #0
 801c014:	d1fc      	bne.n	801c010 <ai_platform_api_get_version+0xe0>
 801c016:	4b0d      	ldr	r3, [pc, #52]	; (801c04c <ai_platform_api_get_version+0x11c>)
 801c018:	4909      	ldr	r1, [pc, #36]	; (801c040 <ai_platform_api_get_version+0x110>)
 801c01a:	4a0a      	ldr	r2, [pc, #40]	; (801c044 <ai_platform_api_get_version+0x114>)
 801c01c:	6019      	str	r1, [r3, #0]
 801c01e:	681b      	ldr	r3, [r3, #0]
 801c020:	4293      	cmp	r3, r2
 801c022:	d0af      	beq.n	801bf84 <ai_platform_api_get_version+0x54>
 801c024:	e7fe      	b.n	801c024 <ai_platform_api_get_version+0xf4>
 801c026:	bf00      	nop
 801c028:	e0002000 	.word	0xe0002000
 801c02c:	e0042000 	.word	0xe0042000
 801c030:	5c001000 	.word	0x5c001000
 801c034:	0809c604 	.word	0x0809c604
 801c038:	40023008 	.word	0x40023008
 801c03c:	40023000 	.word	0x40023000
 801c040:	f407a5c2 	.word	0xf407a5c2
 801c044:	b5e8b5cd 	.word	0xb5e8b5cd
 801c048:	58024c08 	.word	0x58024c08
 801c04c:	58024c00 	.word	0x58024c00

0801c050 <ai_platform_interface_api_get_version>:
 801c050:	4a3d      	ldr	r2, [pc, #244]	; (801c148 <ai_platform_interface_api_get_version+0xf8>)
 801c052:	b510      	push	{r4, lr}
 801c054:	6813      	ldr	r3, [r2, #0]
 801c056:	b082      	sub	sp, #8
 801c058:	f023 0301 	bic.w	r3, r3, #1
 801c05c:	6013      	str	r3, [r2, #0]
 801c05e:	f7ff fda7 	bl	801bbb0 <_ai_platform_acquire_crc>
 801c062:	4b3a      	ldr	r3, [pc, #232]	; (801c14c <ai_platform_interface_api_get_version+0xfc>)
 801c064:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801c068:	681b      	ldr	r3, [r3, #0]
 801c06a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c06e:	189a      	adds	r2, r3, r2
 801c070:	2a01      	cmp	r2, #1
 801c072:	d92c      	bls.n	801c0ce <ai_platform_interface_api_get_version+0x7e>
 801c074:	f240 4249 	movw	r2, #1097	; 0x449
 801c078:	4293      	cmp	r3, r2
 801c07a:	d028      	beq.n	801c0ce <ai_platform_interface_api_get_version+0x7e>
 801c07c:	4b34      	ldr	r3, [pc, #208]	; (801c150 <ai_platform_interface_api_get_version+0x100>)
 801c07e:	681a      	ldr	r2, [r3, #0]
 801c080:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c084:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801c088:	d030      	beq.n	801c0ec <ai_platform_interface_api_get_version+0x9c>
 801c08a:	681a      	ldr	r2, [r3, #0]
 801c08c:	f240 4183 	movw	r1, #1155	; 0x483
 801c090:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c094:	428a      	cmp	r2, r1
 801c096:	d047      	beq.n	801c128 <ai_platform_interface_api_get_version+0xd8>
 801c098:	681b      	ldr	r3, [r3, #0]
 801c09a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c09e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801c0a2:	d032      	beq.n	801c10a <ai_platform_interface_api_get_version+0xba>
 801c0a4:	f7ff fd86 	bl	801bbb4 <_ai_platform_release_crc>
 801c0a8:	4b2a      	ldr	r3, [pc, #168]	; (801c154 <ai_platform_interface_api_get_version+0x104>)
 801c0aa:	2000      	movs	r0, #0
 801c0ac:	681b      	ldr	r3, [r3, #0]
 801c0ae:	b2dc      	uxtb	r4, r3
 801c0b0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801c0b4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801c0b8:	0e1b      	lsrs	r3, r3, #24
 801c0ba:	f364 0007 	bfi	r0, r4, #0, #8
 801c0be:	f361 200f 	bfi	r0, r1, #8, #8
 801c0c2:	f362 4017 	bfi	r0, r2, #16, #8
 801c0c6:	f363 601f 	bfi	r0, r3, #24, #8
 801c0ca:	b002      	add	sp, #8
 801c0cc:	bd10      	pop	{r4, pc}
 801c0ce:	4b22      	ldr	r3, [pc, #136]	; (801c158 <ai_platform_interface_api_get_version+0x108>)
 801c0d0:	2201      	movs	r2, #1
 801c0d2:	4619      	mov	r1, r3
 801c0d4:	601a      	str	r2, [r3, #0]
 801c0d6:	680b      	ldr	r3, [r1, #0]
 801c0d8:	2b00      	cmp	r3, #0
 801c0da:	d1fc      	bne.n	801c0d6 <ai_platform_interface_api_get_version+0x86>
 801c0dc:	4b1f      	ldr	r3, [pc, #124]	; (801c15c <ai_platform_interface_api_get_version+0x10c>)
 801c0de:	4920      	ldr	r1, [pc, #128]	; (801c160 <ai_platform_interface_api_get_version+0x110>)
 801c0e0:	4a20      	ldr	r2, [pc, #128]	; (801c164 <ai_platform_interface_api_get_version+0x114>)
 801c0e2:	6019      	str	r1, [r3, #0]
 801c0e4:	681b      	ldr	r3, [r3, #0]
 801c0e6:	4293      	cmp	r3, r2
 801c0e8:	d0dc      	beq.n	801c0a4 <ai_platform_interface_api_get_version+0x54>
 801c0ea:	e7fe      	b.n	801c0ea <ai_platform_interface_api_get_version+0x9a>
 801c0ec:	4b1e      	ldr	r3, [pc, #120]	; (801c168 <ai_platform_interface_api_get_version+0x118>)
 801c0ee:	2201      	movs	r2, #1
 801c0f0:	4619      	mov	r1, r3
 801c0f2:	601a      	str	r2, [r3, #0]
 801c0f4:	680b      	ldr	r3, [r1, #0]
 801c0f6:	2b00      	cmp	r3, #0
 801c0f8:	d1fc      	bne.n	801c0f4 <ai_platform_interface_api_get_version+0xa4>
 801c0fa:	4b1c      	ldr	r3, [pc, #112]	; (801c16c <ai_platform_interface_api_get_version+0x11c>)
 801c0fc:	4918      	ldr	r1, [pc, #96]	; (801c160 <ai_platform_interface_api_get_version+0x110>)
 801c0fe:	4a19      	ldr	r2, [pc, #100]	; (801c164 <ai_platform_interface_api_get_version+0x114>)
 801c100:	6019      	str	r1, [r3, #0]
 801c102:	681b      	ldr	r3, [r3, #0]
 801c104:	4293      	cmp	r3, r2
 801c106:	d0cd      	beq.n	801c0a4 <ai_platform_interface_api_get_version+0x54>
 801c108:	e7fe      	b.n	801c108 <ai_platform_interface_api_get_version+0xb8>
 801c10a:	4b13      	ldr	r3, [pc, #76]	; (801c158 <ai_platform_interface_api_get_version+0x108>)
 801c10c:	2201      	movs	r2, #1
 801c10e:	4619      	mov	r1, r3
 801c110:	601a      	str	r2, [r3, #0]
 801c112:	680b      	ldr	r3, [r1, #0]
 801c114:	2b00      	cmp	r3, #0
 801c116:	d1fc      	bne.n	801c112 <ai_platform_interface_api_get_version+0xc2>
 801c118:	4b10      	ldr	r3, [pc, #64]	; (801c15c <ai_platform_interface_api_get_version+0x10c>)
 801c11a:	4911      	ldr	r1, [pc, #68]	; (801c160 <ai_platform_interface_api_get_version+0x110>)
 801c11c:	4a11      	ldr	r2, [pc, #68]	; (801c164 <ai_platform_interface_api_get_version+0x114>)
 801c11e:	6019      	str	r1, [r3, #0]
 801c120:	681b      	ldr	r3, [r3, #0]
 801c122:	4293      	cmp	r3, r2
 801c124:	d0be      	beq.n	801c0a4 <ai_platform_interface_api_get_version+0x54>
 801c126:	e7fe      	b.n	801c126 <ai_platform_interface_api_get_version+0xd6>
 801c128:	4b0f      	ldr	r3, [pc, #60]	; (801c168 <ai_platform_interface_api_get_version+0x118>)
 801c12a:	2201      	movs	r2, #1
 801c12c:	4619      	mov	r1, r3
 801c12e:	601a      	str	r2, [r3, #0]
 801c130:	680b      	ldr	r3, [r1, #0]
 801c132:	2b00      	cmp	r3, #0
 801c134:	d1fc      	bne.n	801c130 <ai_platform_interface_api_get_version+0xe0>
 801c136:	4b0d      	ldr	r3, [pc, #52]	; (801c16c <ai_platform_interface_api_get_version+0x11c>)
 801c138:	4909      	ldr	r1, [pc, #36]	; (801c160 <ai_platform_interface_api_get_version+0x110>)
 801c13a:	4a0a      	ldr	r2, [pc, #40]	; (801c164 <ai_platform_interface_api_get_version+0x114>)
 801c13c:	6019      	str	r1, [r3, #0]
 801c13e:	681b      	ldr	r3, [r3, #0]
 801c140:	4293      	cmp	r3, r2
 801c142:	d0af      	beq.n	801c0a4 <ai_platform_interface_api_get_version+0x54>
 801c144:	e7fe      	b.n	801c144 <ai_platform_interface_api_get_version+0xf4>
 801c146:	bf00      	nop
 801c148:	e0002000 	.word	0xe0002000
 801c14c:	e0042000 	.word	0xe0042000
 801c150:	5c001000 	.word	0x5c001000
 801c154:	0809c608 	.word	0x0809c608
 801c158:	40023008 	.word	0x40023008
 801c15c:	40023000 	.word	0x40023000
 801c160:	f407a5c2 	.word	0xf407a5c2
 801c164:	b5e8b5cd 	.word	0xb5e8b5cd
 801c168:	58024c08 	.word	0x58024c08
 801c16c:	58024c00 	.word	0x58024c00

0801c170 <ai_platform_context_acquire>:
 801c170:	b510      	push	{r4, lr}
 801c172:	4604      	mov	r4, r0
 801c174:	b120      	cbz	r0, 801c180 <ai_platform_context_acquire+0x10>
 801c176:	4b36      	ldr	r3, [pc, #216]	; (801c250 <ai_platform_context_acquire+0xe0>)
 801c178:	6802      	ldr	r2, [r0, #0]
 801c17a:	429a      	cmp	r2, r3
 801c17c:	bf18      	it	ne
 801c17e:	2400      	movne	r4, #0
 801c180:	4a34      	ldr	r2, [pc, #208]	; (801c254 <ai_platform_context_acquire+0xe4>)
 801c182:	6813      	ldr	r3, [r2, #0]
 801c184:	f023 0301 	bic.w	r3, r3, #1
 801c188:	6013      	str	r3, [r2, #0]
 801c18a:	f7ff fd11 	bl	801bbb0 <_ai_platform_acquire_crc>
 801c18e:	4b32      	ldr	r3, [pc, #200]	; (801c258 <ai_platform_context_acquire+0xe8>)
 801c190:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801c194:	681b      	ldr	r3, [r3, #0]
 801c196:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c19a:	189a      	adds	r2, r3, r2
 801c19c:	2a01      	cmp	r2, #1
 801c19e:	d91b      	bls.n	801c1d8 <ai_platform_context_acquire+0x68>
 801c1a0:	f240 4249 	movw	r2, #1097	; 0x449
 801c1a4:	4293      	cmp	r3, r2
 801c1a6:	d017      	beq.n	801c1d8 <ai_platform_context_acquire+0x68>
 801c1a8:	4b2c      	ldr	r3, [pc, #176]	; (801c25c <ai_platform_context_acquire+0xec>)
 801c1aa:	681a      	ldr	r2, [r3, #0]
 801c1ac:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c1b0:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801c1b4:	d01f      	beq.n	801c1f6 <ai_platform_context_acquire+0x86>
 801c1b6:	681a      	ldr	r2, [r3, #0]
 801c1b8:	f240 4183 	movw	r1, #1155	; 0x483
 801c1bc:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c1c0:	428a      	cmp	r2, r1
 801c1c2:	d036      	beq.n	801c232 <ai_platform_context_acquire+0xc2>
 801c1c4:	681b      	ldr	r3, [r3, #0]
 801c1c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c1ca:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801c1ce:	d021      	beq.n	801c214 <ai_platform_context_acquire+0xa4>
 801c1d0:	f7ff fcf0 	bl	801bbb4 <_ai_platform_release_crc>
 801c1d4:	4620      	mov	r0, r4
 801c1d6:	bd10      	pop	{r4, pc}
 801c1d8:	4b21      	ldr	r3, [pc, #132]	; (801c260 <ai_platform_context_acquire+0xf0>)
 801c1da:	2201      	movs	r2, #1
 801c1dc:	4619      	mov	r1, r3
 801c1de:	601a      	str	r2, [r3, #0]
 801c1e0:	680b      	ldr	r3, [r1, #0]
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d1fc      	bne.n	801c1e0 <ai_platform_context_acquire+0x70>
 801c1e6:	4b1f      	ldr	r3, [pc, #124]	; (801c264 <ai_platform_context_acquire+0xf4>)
 801c1e8:	491f      	ldr	r1, [pc, #124]	; (801c268 <ai_platform_context_acquire+0xf8>)
 801c1ea:	4a20      	ldr	r2, [pc, #128]	; (801c26c <ai_platform_context_acquire+0xfc>)
 801c1ec:	6019      	str	r1, [r3, #0]
 801c1ee:	681b      	ldr	r3, [r3, #0]
 801c1f0:	4293      	cmp	r3, r2
 801c1f2:	d0ed      	beq.n	801c1d0 <ai_platform_context_acquire+0x60>
 801c1f4:	e7fe      	b.n	801c1f4 <ai_platform_context_acquire+0x84>
 801c1f6:	4b1e      	ldr	r3, [pc, #120]	; (801c270 <ai_platform_context_acquire+0x100>)
 801c1f8:	2201      	movs	r2, #1
 801c1fa:	4619      	mov	r1, r3
 801c1fc:	601a      	str	r2, [r3, #0]
 801c1fe:	680b      	ldr	r3, [r1, #0]
 801c200:	2b00      	cmp	r3, #0
 801c202:	d1fc      	bne.n	801c1fe <ai_platform_context_acquire+0x8e>
 801c204:	4b1b      	ldr	r3, [pc, #108]	; (801c274 <ai_platform_context_acquire+0x104>)
 801c206:	4918      	ldr	r1, [pc, #96]	; (801c268 <ai_platform_context_acquire+0xf8>)
 801c208:	4a18      	ldr	r2, [pc, #96]	; (801c26c <ai_platform_context_acquire+0xfc>)
 801c20a:	6019      	str	r1, [r3, #0]
 801c20c:	681b      	ldr	r3, [r3, #0]
 801c20e:	4293      	cmp	r3, r2
 801c210:	d0de      	beq.n	801c1d0 <ai_platform_context_acquire+0x60>
 801c212:	e7fe      	b.n	801c212 <ai_platform_context_acquire+0xa2>
 801c214:	4b12      	ldr	r3, [pc, #72]	; (801c260 <ai_platform_context_acquire+0xf0>)
 801c216:	2201      	movs	r2, #1
 801c218:	4619      	mov	r1, r3
 801c21a:	601a      	str	r2, [r3, #0]
 801c21c:	680b      	ldr	r3, [r1, #0]
 801c21e:	2b00      	cmp	r3, #0
 801c220:	d1fc      	bne.n	801c21c <ai_platform_context_acquire+0xac>
 801c222:	4b10      	ldr	r3, [pc, #64]	; (801c264 <ai_platform_context_acquire+0xf4>)
 801c224:	4910      	ldr	r1, [pc, #64]	; (801c268 <ai_platform_context_acquire+0xf8>)
 801c226:	4a11      	ldr	r2, [pc, #68]	; (801c26c <ai_platform_context_acquire+0xfc>)
 801c228:	6019      	str	r1, [r3, #0]
 801c22a:	681b      	ldr	r3, [r3, #0]
 801c22c:	4293      	cmp	r3, r2
 801c22e:	d0cf      	beq.n	801c1d0 <ai_platform_context_acquire+0x60>
 801c230:	e7fe      	b.n	801c230 <ai_platform_context_acquire+0xc0>
 801c232:	4b0f      	ldr	r3, [pc, #60]	; (801c270 <ai_platform_context_acquire+0x100>)
 801c234:	2201      	movs	r2, #1
 801c236:	4619      	mov	r1, r3
 801c238:	601a      	str	r2, [r3, #0]
 801c23a:	680b      	ldr	r3, [r1, #0]
 801c23c:	2b00      	cmp	r3, #0
 801c23e:	d1fc      	bne.n	801c23a <ai_platform_context_acquire+0xca>
 801c240:	4b0c      	ldr	r3, [pc, #48]	; (801c274 <ai_platform_context_acquire+0x104>)
 801c242:	4909      	ldr	r1, [pc, #36]	; (801c268 <ai_platform_context_acquire+0xf8>)
 801c244:	4a09      	ldr	r2, [pc, #36]	; (801c26c <ai_platform_context_acquire+0xfc>)
 801c246:	6019      	str	r1, [r3, #0]
 801c248:	681b      	ldr	r3, [r3, #0]
 801c24a:	4293      	cmp	r3, r2
 801c24c:	d0c0      	beq.n	801c1d0 <ai_platform_context_acquire+0x60>
 801c24e:	e7fe      	b.n	801c24e <ai_platform_context_acquire+0xde>
 801c250:	a1c00100 	.word	0xa1c00100
 801c254:	e0002000 	.word	0xe0002000
 801c258:	e0042000 	.word	0xe0042000
 801c25c:	5c001000 	.word	0x5c001000
 801c260:	40023008 	.word	0x40023008
 801c264:	40023000 	.word	0x40023000
 801c268:	f407a5c2 	.word	0xf407a5c2
 801c26c:	b5e8b5cd 	.word	0xb5e8b5cd
 801c270:	58024c08 	.word	0x58024c08
 801c274:	58024c00 	.word	0x58024c00

0801c278 <ai_platform_network_set_error>:
 801c278:	b110      	cbz	r0, 801c280 <ai_platform_network_set_error+0x8>
 801c27a:	3010      	adds	r0, #16
 801c27c:	f001 bfb4 	b.w	801e1e8 <core_set_error>
 801c280:	4770      	bx	lr
 801c282:	bf00      	nop

0801c284 <ai_platform_api_get_network_report>:
 801c284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c288:	460c      	mov	r4, r1
 801c28a:	b089      	sub	sp, #36	; 0x24
 801c28c:	4605      	mov	r5, r0
 801c28e:	b120      	cbz	r0, 801c29a <ai_platform_api_get_network_report+0x16>
 801c290:	4bae      	ldr	r3, [pc, #696]	; (801c54c <ai_platform_api_get_network_report+0x2c8>)
 801c292:	6802      	ldr	r2, [r0, #0]
 801c294:	429a      	cmp	r2, r3
 801c296:	bf18      	it	ne
 801c298:	2500      	movne	r5, #0
 801c29a:	4aad      	ldr	r2, [pc, #692]	; (801c550 <ai_platform_api_get_network_report+0x2cc>)
 801c29c:	6813      	ldr	r3, [r2, #0]
 801c29e:	f023 0301 	bic.w	r3, r3, #1
 801c2a2:	6013      	str	r3, [r2, #0]
 801c2a4:	f7ff fc84 	bl	801bbb0 <_ai_platform_acquire_crc>
 801c2a8:	4baa      	ldr	r3, [pc, #680]	; (801c554 <ai_platform_api_get_network_report+0x2d0>)
 801c2aa:	f46f 6e8a 	mvn.w	lr, #1104	; 0x450
 801c2ae:	681b      	ldr	r3, [r3, #0]
 801c2b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c2b4:	eb03 020e 	add.w	r2, r3, lr
 801c2b8:	2a01      	cmp	r2, #1
 801c2ba:	f240 80a6 	bls.w	801c40a <ai_platform_api_get_network_report+0x186>
 801c2be:	f240 4249 	movw	r2, #1097	; 0x449
 801c2c2:	4293      	cmp	r3, r2
 801c2c4:	f000 80a1 	beq.w	801c40a <ai_platform_api_get_network_report+0x186>
 801c2c8:	4ba3      	ldr	r3, [pc, #652]	; (801c558 <ai_platform_api_get_network_report+0x2d4>)
 801c2ca:	681a      	ldr	r2, [r3, #0]
 801c2cc:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c2d0:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801c2d4:	f000 80a9 	beq.w	801c42a <ai_platform_api_get_network_report+0x1a6>
 801c2d8:	681a      	ldr	r2, [r3, #0]
 801c2da:	f240 4183 	movw	r1, #1155	; 0x483
 801c2de:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c2e2:	428a      	cmp	r2, r1
 801c2e4:	f000 83e0 	beq.w	801caa8 <ai_platform_api_get_network_report+0x824>
 801c2e8:	681b      	ldr	r3, [r3, #0]
 801c2ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c2ee:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801c2f2:	f000 83c9 	beq.w	801ca88 <ai_platform_api_get_network_report+0x804>
 801c2f6:	f7ff fc5d 	bl	801bbb4 <_ai_platform_release_crc>
 801c2fa:	2d00      	cmp	r5, #0
 801c2fc:	f000 83c2 	beq.w	801ca84 <ai_platform_api_get_network_report+0x800>
 801c300:	fab4 f384 	clz	r3, r4
 801c304:	095b      	lsrs	r3, r3, #5
 801c306:	2b00      	cmp	r3, #0
 801c308:	f040 83bc 	bne.w	801ca84 <ai_platform_api_get_network_report+0x800>
 801c30c:	6763      	str	r3, [r4, #116]	; 0x74
 801c30e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 801c310:	2a00      	cmp	r2, #0
 801c312:	f000 83af 	beq.w	801ca74 <ai_platform_api_get_network_report+0x7f0>
 801c316:	2301      	movs	r3, #1
 801c318:	6763      	str	r3, [r4, #116]	; 0x74
 801c31a:	6913      	ldr	r3, [r2, #16]
 801c31c:	b183      	cbz	r3, 801c340 <ai_platform_api_get_network_report+0xbc>
 801c31e:	429a      	cmp	r2, r3
 801c320:	d00e      	beq.n	801c340 <ai_platform_api_get_network_report+0xbc>
 801c322:	2202      	movs	r2, #2
 801c324:	e003      	b.n	801c32e <ai_platform_api_get_network_report+0xaa>
 801c326:	4299      	cmp	r1, r3
 801c328:	d006      	beq.n	801c338 <ai_platform_api_get_network_report+0xb4>
 801c32a:	460b      	mov	r3, r1
 801c32c:	b121      	cbz	r1, 801c338 <ai_platform_api_get_network_report+0xb4>
 801c32e:	6762      	str	r2, [r4, #116]	; 0x74
 801c330:	3201      	adds	r2, #1
 801c332:	6919      	ldr	r1, [r3, #16]
 801c334:	2900      	cmp	r1, #0
 801c336:	d1f6      	bne.n	801c326 <ai_platform_api_get_network_report+0xa2>
 801c338:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801c33a:	2b00      	cmp	r3, #0
 801c33c:	f000 839a 	beq.w	801ca74 <ai_platform_api_get_network_report+0x7f0>
 801c340:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 801c342:	2b00      	cmp	r3, #0
 801c344:	f000 8081 	beq.w	801c44a <ai_platform_api_get_network_report+0x1c6>
 801c348:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 801c34c:	f1b8 0f00 	cmp.w	r8, #0
 801c350:	d07b      	beq.n	801c44a <ai_platform_api_get_network_report+0x1c6>
 801c352:	f8b8 3000 	ldrh.w	r3, [r8]
 801c356:	2b00      	cmp	r3, #0
 801c358:	d077      	beq.n	801c44a <ai_platform_api_get_network_report+0x1c6>
 801c35a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c35e:	2b00      	cmp	r3, #0
 801c360:	d073      	beq.n	801c44a <ai_platform_api_get_network_report+0x1c6>
 801c362:	681f      	ldr	r7, [r3, #0]
 801c364:	2f00      	cmp	r7, #0
 801c366:	d070      	beq.n	801c44a <ai_platform_api_get_network_report+0x1c6>
 801c368:	f04f 0b00 	mov.w	fp, #0
 801c36c:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801c370:	46d9      	mov	r9, fp
 801c372:	e029      	b.n	801c3c8 <ai_platform_api_get_network_report+0x144>
 801c374:	885b      	ldrh	r3, [r3, #2]
 801c376:	2b00      	cmp	r3, #0
 801c378:	d044      	beq.n	801c404 <ai_platform_api_get_network_report+0x180>
 801c37a:	2301      	movs	r3, #1
 801c37c:	f84a 3005 	str.w	r3, [sl, r5]
 801c380:	69bb      	ldr	r3, [r7, #24]
 801c382:	685d      	ldr	r5, [r3, #4]
 801c384:	f04f 0301 	mov.w	r3, #1
 801c388:	9900      	ldr	r1, [sp, #0]
 801c38a:	f109 0701 	add.w	r7, r9, #1
 801c38e:	7533      	strb	r3, [r6, #20]
 801c390:	6973      	ldr	r3, [r6, #20]
 801c392:	46b9      	mov	r9, r7
 801c394:	6135      	str	r5, [r6, #16]
 801c396:	f361 231f 	bfi	r3, r1, #8, #24
 801c39a:	60b4      	str	r4, [r6, #8]
 801c39c:	e9c6 0200 	strd	r0, r2, [r6]
 801c3a0:	2200      	movs	r2, #0
 801c3a2:	b2b8      	uxth	r0, r7
 801c3a4:	60f2      	str	r2, [r6, #12]
 801c3a6:	9a01      	ldr	r2, [sp, #4]
 801c3a8:	e9c6 3205 	strd	r3, r2, [r6, #20]
 801c3ac:	f8b8 3000 	ldrh.w	r3, [r8]
 801c3b0:	429f      	cmp	r7, r3
 801c3b2:	d256      	bcs.n	801c462 <ai_platform_api_get_network_report+0x1de>
 801c3b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c3b8:	2b00      	cmp	r3, #0
 801c3ba:	d052      	beq.n	801c462 <ai_platform_api_get_network_report+0x1de>
 801c3bc:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 801c3c0:	f10b 0b1c 	add.w	fp, fp, #28
 801c3c4:	2f00      	cmp	r7, #0
 801c3c6:	d04c      	beq.n	801c462 <ai_platform_api_get_network_report+0x1de>
 801c3c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c3cc:	ea4f 05c9 	mov.w	r5, r9, lsl #3
 801c3d0:	69b8      	ldr	r0, [r7, #24]
 801c3d2:	e9d3 6a01 	ldrd	r6, sl, [r3, #4]
 801c3d6:	68bb      	ldr	r3, [r7, #8]
 801c3d8:	6800      	ldr	r0, [r0, #0]
 801c3da:	eb0a 0405 	add.w	r4, sl, r5
 801c3de:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801c3e2:	445e      	add	r6, fp
 801c3e4:	9300      	str	r3, [sp, #0]
 801c3e6:	68fb      	ldr	r3, [r7, #12]
 801c3e8:	9301      	str	r3, [sp, #4]
 801c3ea:	f009 f8bb 	bl	8025564 <ai_array_to_buffer_fmt>
 801c3ee:	69bb      	ldr	r3, [r7, #24]
 801c3f0:	689a      	ldr	r2, [r3, #8]
 801c3f2:	2c00      	cmp	r4, #0
 801c3f4:	d0c5      	beq.n	801c382 <ai_platform_api_get_network_report+0xfe>
 801c3f6:	2300      	movs	r3, #0
 801c3f8:	f84a 3039 	str.w	r3, [sl, r9, lsl #3]
 801c3fc:	683b      	ldr	r3, [r7, #0]
 801c3fe:	6063      	str	r3, [r4, #4]
 801c400:	2b00      	cmp	r3, #0
 801c402:	d1b7      	bne.n	801c374 <ai_platform_api_get_network_report+0xf0>
 801c404:	69bb      	ldr	r3, [r7, #24]
 801c406:	2400      	movs	r4, #0
 801c408:	e7bb      	b.n	801c382 <ai_platform_api_get_network_report+0xfe>
 801c40a:	4b54      	ldr	r3, [pc, #336]	; (801c55c <ai_platform_api_get_network_report+0x2d8>)
 801c40c:	2201      	movs	r2, #1
 801c40e:	4619      	mov	r1, r3
 801c410:	601a      	str	r2, [r3, #0]
 801c412:	680b      	ldr	r3, [r1, #0]
 801c414:	2b00      	cmp	r3, #0
 801c416:	d1fc      	bne.n	801c412 <ai_platform_api_get_network_report+0x18e>
 801c418:	4b51      	ldr	r3, [pc, #324]	; (801c560 <ai_platform_api_get_network_report+0x2dc>)
 801c41a:	4952      	ldr	r1, [pc, #328]	; (801c564 <ai_platform_api_get_network_report+0x2e0>)
 801c41c:	4a52      	ldr	r2, [pc, #328]	; (801c568 <ai_platform_api_get_network_report+0x2e4>)
 801c41e:	6019      	str	r1, [r3, #0]
 801c420:	681b      	ldr	r3, [r3, #0]
 801c422:	4293      	cmp	r3, r2
 801c424:	f43f af67 	beq.w	801c2f6 <ai_platform_api_get_network_report+0x72>
 801c428:	e7fe      	b.n	801c428 <ai_platform_api_get_network_report+0x1a4>
 801c42a:	4b50      	ldr	r3, [pc, #320]	; (801c56c <ai_platform_api_get_network_report+0x2e8>)
 801c42c:	2201      	movs	r2, #1
 801c42e:	4619      	mov	r1, r3
 801c430:	601a      	str	r2, [r3, #0]
 801c432:	680b      	ldr	r3, [r1, #0]
 801c434:	2b00      	cmp	r3, #0
 801c436:	d1fc      	bne.n	801c432 <ai_platform_api_get_network_report+0x1ae>
 801c438:	4b4d      	ldr	r3, [pc, #308]	; (801c570 <ai_platform_api_get_network_report+0x2ec>)
 801c43a:	494a      	ldr	r1, [pc, #296]	; (801c564 <ai_platform_api_get_network_report+0x2e0>)
 801c43c:	4a4a      	ldr	r2, [pc, #296]	; (801c568 <ai_platform_api_get_network_report+0x2e4>)
 801c43e:	6019      	str	r1, [r3, #0]
 801c440:	681b      	ldr	r3, [r3, #0]
 801c442:	4293      	cmp	r3, r2
 801c444:	f43f af57 	beq.w	801c2f6 <ai_platform_api_get_network_report+0x72>
 801c448:	e7fe      	b.n	801c448 <ai_platform_api_get_network_report+0x1c4>
 801c44a:	2600      	movs	r6, #0
 801c44c:	f105 0010 	add.w	r0, r5, #16
 801c450:	2218      	movs	r2, #24
 801c452:	2112      	movs	r1, #18
 801c454:	8626      	strh	r6, [r4, #48]	; 0x30
 801c456:	f001 fec7 	bl	801e1e8 <core_set_error>
 801c45a:	4630      	mov	r0, r6
 801c45c:	b009      	add	sp, #36	; 0x24
 801c45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c462:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 801c466:	2800      	cmp	r0, #0
 801c468:	d0ef      	beq.n	801c44a <ai_platform_api_get_network_report+0x1c6>
 801c46a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c46e:	685b      	ldr	r3, [r3, #4]
 801c470:	8620      	strh	r0, [r4, #48]	; 0x30
 801c472:	6363      	str	r3, [r4, #52]	; 0x34
 801c474:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 801c476:	2b01      	cmp	r3, #1
 801c478:	d95e      	bls.n	801c538 <ai_platform_api_get_network_report+0x2b4>
 801c47a:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 801c47e:	f118 0f0c 	cmn.w	r8, #12
 801c482:	d059      	beq.n	801c538 <ai_platform_api_get_network_report+0x2b4>
 801c484:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801c488:	2b00      	cmp	r3, #0
 801c48a:	d055      	beq.n	801c538 <ai_platform_api_get_network_report+0x2b4>
 801c48c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801c490:	2b00      	cmp	r3, #0
 801c492:	d051      	beq.n	801c538 <ai_platform_api_get_network_report+0x2b4>
 801c494:	681f      	ldr	r7, [r3, #0]
 801c496:	2f00      	cmp	r7, #0
 801c498:	d04e      	beq.n	801c538 <ai_platform_api_get_network_report+0x2b4>
 801c49a:	f04f 0b00 	mov.w	fp, #0
 801c49e:	46d9      	mov	r9, fp
 801c4a0:	e027      	b.n	801c4f2 <ai_platform_api_get_network_report+0x26e>
 801c4a2:	2301      	movs	r3, #1
 801c4a4:	f84a 3005 	str.w	r3, [sl, r5]
 801c4a8:	69bb      	ldr	r3, [r7, #24]
 801c4aa:	685d      	ldr	r5, [r3, #4]
 801c4ac:	f04f 0301 	mov.w	r3, #1
 801c4b0:	9900      	ldr	r1, [sp, #0]
 801c4b2:	f109 0701 	add.w	r7, r9, #1
 801c4b6:	7533      	strb	r3, [r6, #20]
 801c4b8:	6973      	ldr	r3, [r6, #20]
 801c4ba:	46b9      	mov	r9, r7
 801c4bc:	6135      	str	r5, [r6, #16]
 801c4be:	fa1f fc87 	uxth.w	ip, r7
 801c4c2:	f361 231f 	bfi	r3, r1, #8, #24
 801c4c6:	60b4      	str	r4, [r6, #8]
 801c4c8:	e9c6 0200 	strd	r0, r2, [r6]
 801c4cc:	2200      	movs	r2, #0
 801c4ce:	60f2      	str	r2, [r6, #12]
 801c4d0:	9a01      	ldr	r2, [sp, #4]
 801c4d2:	e9c6 3205 	strd	r3, r2, [r6, #20]
 801c4d6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801c4da:	429f      	cmp	r7, r3
 801c4dc:	d24a      	bcs.n	801c574 <ai_platform_api_get_network_report+0x2f0>
 801c4de:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801c4e2:	2b00      	cmp	r3, #0
 801c4e4:	d046      	beq.n	801c574 <ai_platform_api_get_network_report+0x2f0>
 801c4e6:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 801c4ea:	f10b 0b1c 	add.w	fp, fp, #28
 801c4ee:	2f00      	cmp	r7, #0
 801c4f0:	d040      	beq.n	801c574 <ai_platform_api_get_network_report+0x2f0>
 801c4f2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801c4f6:	ea4f 05c9 	mov.w	r5, r9, lsl #3
 801c4fa:	69b8      	ldr	r0, [r7, #24]
 801c4fc:	e9d3 6a01 	ldrd	r6, sl, [r3, #4]
 801c500:	68bb      	ldr	r3, [r7, #8]
 801c502:	6800      	ldr	r0, [r0, #0]
 801c504:	eb0a 0405 	add.w	r4, sl, r5
 801c508:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801c50c:	445e      	add	r6, fp
 801c50e:	9300      	str	r3, [sp, #0]
 801c510:	68fb      	ldr	r3, [r7, #12]
 801c512:	9301      	str	r3, [sp, #4]
 801c514:	f009 f826 	bl	8025564 <ai_array_to_buffer_fmt>
 801c518:	69bb      	ldr	r3, [r7, #24]
 801c51a:	689a      	ldr	r2, [r3, #8]
 801c51c:	2c00      	cmp	r4, #0
 801c51e:	d0c4      	beq.n	801c4aa <ai_platform_api_get_network_report+0x226>
 801c520:	2300      	movs	r3, #0
 801c522:	f84a 3039 	str.w	r3, [sl, r9, lsl #3]
 801c526:	683b      	ldr	r3, [r7, #0]
 801c528:	6063      	str	r3, [r4, #4]
 801c52a:	b113      	cbz	r3, 801c532 <ai_platform_api_get_network_report+0x2ae>
 801c52c:	885b      	ldrh	r3, [r3, #2]
 801c52e:	2b00      	cmp	r3, #0
 801c530:	d1b7      	bne.n	801c4a2 <ai_platform_api_get_network_report+0x21e>
 801c532:	69bb      	ldr	r3, [r7, #24]
 801c534:	2400      	movs	r4, #0
 801c536:	e7b8      	b.n	801c4aa <ai_platform_api_get_network_report+0x226>
 801c538:	2600      	movs	r6, #0
 801c53a:	f105 0010 	add.w	r0, r5, #16
 801c53e:	2218      	movs	r2, #24
 801c540:	2113      	movs	r1, #19
 801c542:	8666      	strh	r6, [r4, #50]	; 0x32
 801c544:	f001 fe50 	bl	801e1e8 <core_set_error>
 801c548:	e787      	b.n	801c45a <ai_platform_api_get_network_report+0x1d6>
 801c54a:	bf00      	nop
 801c54c:	a1c00100 	.word	0xa1c00100
 801c550:	e0002000 	.word	0xe0002000
 801c554:	e0042000 	.word	0xe0042000
 801c558:	5c001000 	.word	0x5c001000
 801c55c:	40023008 	.word	0x40023008
 801c560:	40023000 	.word	0x40023000
 801c564:	f407a5c2 	.word	0xf407a5c2
 801c568:	b5e8b5cd 	.word	0xb5e8b5cd
 801c56c:	58024c08 	.word	0x58024c08
 801c570:	58024c00 	.word	0x58024c00
 801c574:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 801c578:	f1bc 0f00 	cmp.w	ip, #0
 801c57c:	d0dc      	beq.n	801c538 <ai_platform_api_get_network_report+0x2b4>
 801c57e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801c582:	f105 0724 	add.w	r7, r5, #36	; 0x24
 801c586:	685b      	ldr	r3, [r3, #4]
 801c588:	4638      	mov	r0, r7
 801c58a:	f8a4 c032 	strh.w	ip, [r4, #50]	; 0x32
 801c58e:	63a3      	str	r3, [r4, #56]	; 0x38
 801c590:	f7ff fb04 	bl	801bb9c <ai_buffer_array_sane>
 801c594:	4606      	mov	r6, r0
 801c596:	b938      	cbnz	r0, 801c5a8 <ai_platform_api_get_network_report+0x324>
 801c598:	4638      	mov	r0, r7
 801c59a:	f7ff faff 	bl	801bb9c <ai_buffer_array_sane>
 801c59e:	b118      	cbz	r0, 801c5a8 <ai_platform_api_get_network_report+0x324>
 801c5a0:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 801c5a2:	2b00      	cmp	r3, #0
 801c5a4:	f040 8109 	bne.w	801c7ba <ai_platform_api_get_network_report+0x536>
 801c5a8:	f105 081c 	add.w	r8, r5, #28
 801c5ac:	4640      	mov	r0, r8
 801c5ae:	f7ff faf5 	bl	801bb9c <ai_buffer_array_sane>
 801c5b2:	4606      	mov	r6, r0
 801c5b4:	b938      	cbnz	r0, 801c5c6 <ai_platform_api_get_network_report+0x342>
 801c5b6:	4640      	mov	r0, r8
 801c5b8:	f7ff faf0 	bl	801bb9c <ai_buffer_array_sane>
 801c5bc:	b118      	cbz	r0, 801c5c6 <ai_platform_api_get_network_report+0x342>
 801c5be:	8beb      	ldrh	r3, [r5, #30]
 801c5c0:	2b00      	cmp	r3, #0
 801c5c2:	f040 8101 	bne.w	801c7c8 <ai_platform_api_get_network_report+0x544>
 801c5c6:	686b      	ldr	r3, [r5, #4]
 801c5c8:	4abd      	ldr	r2, [pc, #756]	; (801c8c0 <ai_platform_api_get_network_report+0x63c>)
 801c5ca:	67a3      	str	r3, [r4, #120]	; 0x78
 801c5cc:	6813      	ldr	r3, [r2, #0]
 801c5ce:	f023 0301 	bic.w	r3, r3, #1
 801c5d2:	6013      	str	r3, [r2, #0]
 801c5d4:	f7ff faec 	bl	801bbb0 <_ai_platform_acquire_crc>
 801c5d8:	4bba      	ldr	r3, [pc, #744]	; (801c8c4 <ai_platform_api_get_network_report+0x640>)
 801c5da:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 801c5de:	681b      	ldr	r3, [r3, #0]
 801c5e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c5e4:	eb03 020c 	add.w	r2, r3, ip
 801c5e8:	2a01      	cmp	r2, #1
 801c5ea:	f240 8233 	bls.w	801ca54 <ai_platform_api_get_network_report+0x7d0>
 801c5ee:	f240 4249 	movw	r2, #1097	; 0x449
 801c5f2:	4293      	cmp	r3, r2
 801c5f4:	f000 822e 	beq.w	801ca54 <ai_platform_api_get_network_report+0x7d0>
 801c5f8:	4bb3      	ldr	r3, [pc, #716]	; (801c8c8 <ai_platform_api_get_network_report+0x644>)
 801c5fa:	681a      	ldr	r2, [r3, #0]
 801c5fc:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c600:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801c604:	f000 8216 	beq.w	801ca34 <ai_platform_api_get_network_report+0x7b0>
 801c608:	681a      	ldr	r2, [r3, #0]
 801c60a:	f240 4183 	movw	r1, #1155	; 0x483
 801c60e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c612:	428a      	cmp	r2, r1
 801c614:	f000 81fe 	beq.w	801ca14 <ai_platform_api_get_network_report+0x790>
 801c618:	681b      	ldr	r3, [r3, #0]
 801c61a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c61e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801c622:	f000 81e7 	beq.w	801c9f4 <ai_platform_api_get_network_report+0x770>
 801c626:	f7ff fac5 	bl	801bbb4 <_ai_platform_release_crc>
 801c62a:	4aa5      	ldr	r2, [pc, #660]	; (801c8c0 <ai_platform_api_get_network_report+0x63c>)
 801c62c:	4ba7      	ldr	r3, [pc, #668]	; (801c8cc <ai_platform_api_get_network_report+0x648>)
 801c62e:	f46f 668a 	mvn.w	r6, #1104	; 0x450
 801c632:	6123      	str	r3, [r4, #16]
 801c634:	6813      	ldr	r3, [r2, #0]
 801c636:	f023 0301 	bic.w	r3, r3, #1
 801c63a:	6013      	str	r3, [r2, #0]
 801c63c:	f7ff fab8 	bl	801bbb0 <_ai_platform_acquire_crc>
 801c640:	4ba0      	ldr	r3, [pc, #640]	; (801c8c4 <ai_platform_api_get_network_report+0x640>)
 801c642:	681b      	ldr	r3, [r3, #0]
 801c644:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c648:	199a      	adds	r2, r3, r6
 801c64a:	2a01      	cmp	r2, #1
 801c64c:	f240 81c2 	bls.w	801c9d4 <ai_platform_api_get_network_report+0x750>
 801c650:	f240 4249 	movw	r2, #1097	; 0x449
 801c654:	4293      	cmp	r3, r2
 801c656:	f000 81bd 	beq.w	801c9d4 <ai_platform_api_get_network_report+0x750>
 801c65a:	4b9b      	ldr	r3, [pc, #620]	; (801c8c8 <ai_platform_api_get_network_report+0x644>)
 801c65c:	681a      	ldr	r2, [r3, #0]
 801c65e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c662:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801c666:	f000 81a5 	beq.w	801c9b4 <ai_platform_api_get_network_report+0x730>
 801c66a:	681a      	ldr	r2, [r3, #0]
 801c66c:	f240 4183 	movw	r1, #1155	; 0x483
 801c670:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c674:	428a      	cmp	r2, r1
 801c676:	f000 818d 	beq.w	801c994 <ai_platform_api_get_network_report+0x710>
 801c67a:	681b      	ldr	r3, [r3, #0]
 801c67c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c680:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801c684:	f000 8176 	beq.w	801c974 <ai_platform_api_get_network_report+0x6f0>
 801c688:	f7ff fa94 	bl	801bbb4 <_ai_platform_release_crc>
 801c68c:	4a8c      	ldr	r2, [pc, #560]	; (801c8c0 <ai_platform_api_get_network_report+0x63c>)
 801c68e:	f240 1307 	movw	r3, #263	; 0x107
 801c692:	6163      	str	r3, [r4, #20]
 801c694:	6813      	ldr	r3, [r2, #0]
 801c696:	f023 0301 	bic.w	r3, r3, #1
 801c69a:	6013      	str	r3, [r2, #0]
 801c69c:	f7ff fa88 	bl	801bbb0 <_ai_platform_acquire_crc>
 801c6a0:	4b88      	ldr	r3, [pc, #544]	; (801c8c4 <ai_platform_api_get_network_report+0x640>)
 801c6a2:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801c6a6:	681b      	ldr	r3, [r3, #0]
 801c6a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c6ac:	185a      	adds	r2, r3, r1
 801c6ae:	2a01      	cmp	r2, #1
 801c6b0:	f240 8150 	bls.w	801c954 <ai_platform_api_get_network_report+0x6d0>
 801c6b4:	f240 4249 	movw	r2, #1097	; 0x449
 801c6b8:	4293      	cmp	r3, r2
 801c6ba:	f000 814b 	beq.w	801c954 <ai_platform_api_get_network_report+0x6d0>
 801c6be:	4b82      	ldr	r3, [pc, #520]	; (801c8c8 <ai_platform_api_get_network_report+0x644>)
 801c6c0:	681a      	ldr	r2, [r3, #0]
 801c6c2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c6c6:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801c6ca:	f000 8133 	beq.w	801c934 <ai_platform_api_get_network_report+0x6b0>
 801c6ce:	681a      	ldr	r2, [r3, #0]
 801c6d0:	f240 4183 	movw	r1, #1155	; 0x483
 801c6d4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c6d8:	428a      	cmp	r2, r1
 801c6da:	f000 811b 	beq.w	801c914 <ai_platform_api_get_network_report+0x690>
 801c6de:	681b      	ldr	r3, [r3, #0]
 801c6e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c6e4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801c6e8:	f000 8104 	beq.w	801c8f4 <ai_platform_api_get_network_report+0x670>
 801c6ec:	f7ff fa62 	bl	801bbb4 <_ai_platform_release_crc>
 801c6f0:	4a73      	ldr	r2, [pc, #460]	; (801c8c0 <ai_platform_api_get_network_report+0x63c>)
 801c6f2:	f240 2301 	movw	r3, #513	; 0x201
 801c6f6:	6263      	str	r3, [r4, #36]	; 0x24
 801c6f8:	6813      	ldr	r3, [r2, #0]
 801c6fa:	f023 0301 	bic.w	r3, r3, #1
 801c6fe:	6013      	str	r3, [r2, #0]
 801c700:	f7ff fa56 	bl	801bbb0 <_ai_platform_acquire_crc>
 801c704:	4b6f      	ldr	r3, [pc, #444]	; (801c8c4 <ai_platform_api_get_network_report+0x640>)
 801c706:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801c70a:	681b      	ldr	r3, [r3, #0]
 801c70c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c710:	189a      	adds	r2, r3, r2
 801c712:	2a01      	cmp	r2, #1
 801c714:	f240 80c3 	bls.w	801c89e <ai_platform_api_get_network_report+0x61a>
 801c718:	f240 4249 	movw	r2, #1097	; 0x449
 801c71c:	4293      	cmp	r3, r2
 801c71e:	f000 80be 	beq.w	801c89e <ai_platform_api_get_network_report+0x61a>
 801c722:	4b69      	ldr	r3, [pc, #420]	; (801c8c8 <ai_platform_api_get_network_report+0x644>)
 801c724:	681a      	ldr	r2, [r3, #0]
 801c726:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c72a:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801c72e:	f000 80a6 	beq.w	801c87e <ai_platform_api_get_network_report+0x5fa>
 801c732:	681a      	ldr	r2, [r3, #0]
 801c734:	f240 4183 	movw	r1, #1155	; 0x483
 801c738:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c73c:	428a      	cmp	r2, r1
 801c73e:	f000 808e 	beq.w	801c85e <ai_platform_api_get_network_report+0x5da>
 801c742:	681b      	ldr	r3, [r3, #0]
 801c744:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c748:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801c74c:	d077      	beq.n	801c83e <ai_platform_api_get_network_report+0x5ba>
 801c74e:	f7ff fa31 	bl	801bbb4 <_ai_platform_release_crc>
 801c752:	f240 5301 	movw	r3, #1281	; 0x501
 801c756:	62a3      	str	r3, [r4, #40]	; 0x28
 801c758:	6c68      	ldr	r0, [r5, #68]	; 0x44
 801c75a:	f008 fed9 	bl	8025510 <ai_platform_version_get>
 801c75e:	4b5c      	ldr	r3, [pc, #368]	; (801c8d0 <ai_platform_api_get_network_report+0x64c>)
 801c760:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801c762:	6220      	str	r0, [r4, #32]
 801c764:	429a      	cmp	r2, r3
 801c766:	d051      	beq.n	801c80c <ai_platform_api_get_network_report+0x588>
 801c768:	495a      	ldr	r1, [pc, #360]	; (801c8d4 <ai_platform_api_get_network_report+0x650>)
 801c76a:	2200      	movs	r2, #0
 801c76c:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 801c770:	4b59      	ldr	r3, [pc, #356]	; (801c8d8 <ai_platform_api_get_network_report+0x654>)
 801c772:	63e1      	str	r1, [r4, #60]	; 0x3c
 801c774:	f240 4101 	movw	r1, #1025	; 0x401
 801c778:	f10d 0e10 	add.w	lr, sp, #16
 801c77c:	46b4      	mov	ip, r6
 801c77e:	6521      	str	r1, [r4, #80]	; 0x50
 801c780:	f104 0958 	add.w	r9, r4, #88	; 0x58
 801c784:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
 801c788:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
 801c78c:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
 801c790:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c792:	464c      	mov	r4, r9
 801c794:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801c798:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c79c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c79e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801c7a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801c7a6:	4638      	mov	r0, r7
 801c7a8:	f7ff f9f8 	bl	801bb9c <ai_buffer_array_sane>
 801c7ac:	bb08      	cbnz	r0, 801c7f2 <ai_platform_api_get_network_report+0x56e>
 801c7ae:	4640      	mov	r0, r8
 801c7b0:	f7ff f9f4 	bl	801bb9c <ai_buffer_array_sane>
 801c7b4:	b978      	cbnz	r0, 801c7d6 <ai_platform_api_get_network_report+0x552>
 801c7b6:	2601      	movs	r6, #1
 801c7b8:	e64f      	b.n	801c45a <ai_platform_api_get_network_report+0x1d6>
 801c7ba:	f105 0010 	add.w	r0, r5, #16
 801c7be:	2213      	movs	r2, #19
 801c7c0:	2111      	movs	r1, #17
 801c7c2:	f001 fd11 	bl	801e1e8 <core_set_error>
 801c7c6:	e648      	b.n	801c45a <ai_platform_api_get_network_report+0x1d6>
 801c7c8:	f105 0010 	add.w	r0, r5, #16
 801c7cc:	2212      	movs	r2, #18
 801c7ce:	2111      	movs	r1, #17
 801c7d0:	f001 fd0a 	bl	801e1e8 <core_set_error>
 801c7d4:	e641      	b.n	801c45a <ai_platform_api_get_network_report+0x1d6>
 801c7d6:	4640      	mov	r0, r8
 801c7d8:	f7ff f9e0 	bl	801bb9c <ai_buffer_array_sane>
 801c7dc:	b318      	cbz	r0, 801c826 <ai_platform_api_get_network_report+0x5a2>
 801c7de:	6a2f      	ldr	r7, [r5, #32]
 801c7e0:	4634      	mov	r4, r6
 801c7e2:	2601      	movs	r6, #1
 801c7e4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801c7e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c7e8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801c7ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801c7f0:	e633      	b.n	801c45a <ai_platform_api_get_network_report+0x1d6>
 801c7f2:	4638      	mov	r0, r7
 801c7f4:	f7ff f9d2 	bl	801bb9c <ai_buffer_array_sane>
 801c7f8:	b1f0      	cbz	r0, 801c838 <ai_platform_api_get_network_report+0x5b4>
 801c7fa:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 801c7fc:	464c      	mov	r4, r9
 801c7fe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801c800:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c802:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801c806:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801c80a:	e7d0      	b.n	801c7ae <ai_platform_api_get_network_report+0x52a>
 801c80c:	e897 0003 	ldmia.w	r7, {r0, r1}
 801c810:	f104 0348 	add.w	r3, r4, #72	; 0x48
 801c814:	3440      	adds	r4, #64	; 0x40
 801c816:	2601      	movs	r6, #1
 801c818:	e883 0003 	stmia.w	r3, {r0, r1}
 801c81c:	e898 0003 	ldmia.w	r8, {r0, r1}
 801c820:	e884 0003 	stmia.w	r4, {r0, r1}
 801c824:	e619      	b.n	801c45a <ai_platform_api_get_network_report+0x1d6>
 801c826:	4605      	mov	r5, r0
 801c828:	4634      	mov	r4, r6
 801c82a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c82c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c82e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801c832:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801c836:	deff      	udf	#255	; 0xff
 801c838:	4605      	mov	r5, r0
 801c83a:	464c      	mov	r4, r9
 801c83c:	e7f5      	b.n	801c82a <ai_platform_api_get_network_report+0x5a6>
 801c83e:	4b27      	ldr	r3, [pc, #156]	; (801c8dc <ai_platform_api_get_network_report+0x658>)
 801c840:	2201      	movs	r2, #1
 801c842:	4619      	mov	r1, r3
 801c844:	601a      	str	r2, [r3, #0]
 801c846:	680b      	ldr	r3, [r1, #0]
 801c848:	2b00      	cmp	r3, #0
 801c84a:	d1fc      	bne.n	801c846 <ai_platform_api_get_network_report+0x5c2>
 801c84c:	4b24      	ldr	r3, [pc, #144]	; (801c8e0 <ai_platform_api_get_network_report+0x65c>)
 801c84e:	4925      	ldr	r1, [pc, #148]	; (801c8e4 <ai_platform_api_get_network_report+0x660>)
 801c850:	4a25      	ldr	r2, [pc, #148]	; (801c8e8 <ai_platform_api_get_network_report+0x664>)
 801c852:	6019      	str	r1, [r3, #0]
 801c854:	681b      	ldr	r3, [r3, #0]
 801c856:	4293      	cmp	r3, r2
 801c858:	f43f af79 	beq.w	801c74e <ai_platform_api_get_network_report+0x4ca>
 801c85c:	e7fe      	b.n	801c85c <ai_platform_api_get_network_report+0x5d8>
 801c85e:	4b23      	ldr	r3, [pc, #140]	; (801c8ec <ai_platform_api_get_network_report+0x668>)
 801c860:	2201      	movs	r2, #1
 801c862:	4619      	mov	r1, r3
 801c864:	601a      	str	r2, [r3, #0]
 801c866:	680b      	ldr	r3, [r1, #0]
 801c868:	2b00      	cmp	r3, #0
 801c86a:	d1fc      	bne.n	801c866 <ai_platform_api_get_network_report+0x5e2>
 801c86c:	4b20      	ldr	r3, [pc, #128]	; (801c8f0 <ai_platform_api_get_network_report+0x66c>)
 801c86e:	491d      	ldr	r1, [pc, #116]	; (801c8e4 <ai_platform_api_get_network_report+0x660>)
 801c870:	4a1d      	ldr	r2, [pc, #116]	; (801c8e8 <ai_platform_api_get_network_report+0x664>)
 801c872:	6019      	str	r1, [r3, #0]
 801c874:	681b      	ldr	r3, [r3, #0]
 801c876:	4293      	cmp	r3, r2
 801c878:	f43f af69 	beq.w	801c74e <ai_platform_api_get_network_report+0x4ca>
 801c87c:	e7fe      	b.n	801c87c <ai_platform_api_get_network_report+0x5f8>
 801c87e:	4b1b      	ldr	r3, [pc, #108]	; (801c8ec <ai_platform_api_get_network_report+0x668>)
 801c880:	2201      	movs	r2, #1
 801c882:	4619      	mov	r1, r3
 801c884:	601a      	str	r2, [r3, #0]
 801c886:	680b      	ldr	r3, [r1, #0]
 801c888:	2b00      	cmp	r3, #0
 801c88a:	d1fc      	bne.n	801c886 <ai_platform_api_get_network_report+0x602>
 801c88c:	4b18      	ldr	r3, [pc, #96]	; (801c8f0 <ai_platform_api_get_network_report+0x66c>)
 801c88e:	4915      	ldr	r1, [pc, #84]	; (801c8e4 <ai_platform_api_get_network_report+0x660>)
 801c890:	4a15      	ldr	r2, [pc, #84]	; (801c8e8 <ai_platform_api_get_network_report+0x664>)
 801c892:	6019      	str	r1, [r3, #0]
 801c894:	681b      	ldr	r3, [r3, #0]
 801c896:	4293      	cmp	r3, r2
 801c898:	f43f af59 	beq.w	801c74e <ai_platform_api_get_network_report+0x4ca>
 801c89c:	e7fe      	b.n	801c89c <ai_platform_api_get_network_report+0x618>
 801c89e:	4b0f      	ldr	r3, [pc, #60]	; (801c8dc <ai_platform_api_get_network_report+0x658>)
 801c8a0:	2201      	movs	r2, #1
 801c8a2:	4619      	mov	r1, r3
 801c8a4:	601a      	str	r2, [r3, #0]
 801c8a6:	680b      	ldr	r3, [r1, #0]
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	d1fc      	bne.n	801c8a6 <ai_platform_api_get_network_report+0x622>
 801c8ac:	4b0c      	ldr	r3, [pc, #48]	; (801c8e0 <ai_platform_api_get_network_report+0x65c>)
 801c8ae:	490d      	ldr	r1, [pc, #52]	; (801c8e4 <ai_platform_api_get_network_report+0x660>)
 801c8b0:	4a0d      	ldr	r2, [pc, #52]	; (801c8e8 <ai_platform_api_get_network_report+0x664>)
 801c8b2:	6019      	str	r1, [r3, #0]
 801c8b4:	681b      	ldr	r3, [r3, #0]
 801c8b6:	4293      	cmp	r3, r2
 801c8b8:	f43f af49 	beq.w	801c74e <ai_platform_api_get_network_report+0x4ca>
 801c8bc:	e7fe      	b.n	801c8bc <ai_platform_api_get_network_report+0x638>
 801c8be:	bf00      	nop
 801c8c0:	e0002000 	.word	0xe0002000
 801c8c4:	e0042000 	.word	0xe0042000
 801c8c8:	5c001000 	.word	0x5c001000
 801c8cc:	080292c4 	.word	0x080292c4
 801c8d0:	a1facade 	.word	0xa1facade
 801c8d4:	00040440 	.word	0x00040440
 801c8d8:	08028c5c 	.word	0x08028c5c
 801c8dc:	40023008 	.word	0x40023008
 801c8e0:	40023000 	.word	0x40023000
 801c8e4:	f407a5c2 	.word	0xf407a5c2
 801c8e8:	b5e8b5cd 	.word	0xb5e8b5cd
 801c8ec:	58024c08 	.word	0x58024c08
 801c8f0:	58024c00 	.word	0x58024c00
 801c8f4:	4b74      	ldr	r3, [pc, #464]	; (801cac8 <ai_platform_api_get_network_report+0x844>)
 801c8f6:	2201      	movs	r2, #1
 801c8f8:	4619      	mov	r1, r3
 801c8fa:	601a      	str	r2, [r3, #0]
 801c8fc:	680b      	ldr	r3, [r1, #0]
 801c8fe:	2b00      	cmp	r3, #0
 801c900:	d1fc      	bne.n	801c8fc <ai_platform_api_get_network_report+0x678>
 801c902:	4b72      	ldr	r3, [pc, #456]	; (801cacc <ai_platform_api_get_network_report+0x848>)
 801c904:	4972      	ldr	r1, [pc, #456]	; (801cad0 <ai_platform_api_get_network_report+0x84c>)
 801c906:	4a73      	ldr	r2, [pc, #460]	; (801cad4 <ai_platform_api_get_network_report+0x850>)
 801c908:	6019      	str	r1, [r3, #0]
 801c90a:	681b      	ldr	r3, [r3, #0]
 801c90c:	4293      	cmp	r3, r2
 801c90e:	f43f aeed 	beq.w	801c6ec <ai_platform_api_get_network_report+0x468>
 801c912:	e7fe      	b.n	801c912 <ai_platform_api_get_network_report+0x68e>
 801c914:	4b70      	ldr	r3, [pc, #448]	; (801cad8 <ai_platform_api_get_network_report+0x854>)
 801c916:	2201      	movs	r2, #1
 801c918:	4619      	mov	r1, r3
 801c91a:	601a      	str	r2, [r3, #0]
 801c91c:	680b      	ldr	r3, [r1, #0]
 801c91e:	2b00      	cmp	r3, #0
 801c920:	d1fc      	bne.n	801c91c <ai_platform_api_get_network_report+0x698>
 801c922:	4b6e      	ldr	r3, [pc, #440]	; (801cadc <ai_platform_api_get_network_report+0x858>)
 801c924:	496a      	ldr	r1, [pc, #424]	; (801cad0 <ai_platform_api_get_network_report+0x84c>)
 801c926:	4a6b      	ldr	r2, [pc, #428]	; (801cad4 <ai_platform_api_get_network_report+0x850>)
 801c928:	6019      	str	r1, [r3, #0]
 801c92a:	681b      	ldr	r3, [r3, #0]
 801c92c:	4293      	cmp	r3, r2
 801c92e:	f43f aedd 	beq.w	801c6ec <ai_platform_api_get_network_report+0x468>
 801c932:	e7fe      	b.n	801c932 <ai_platform_api_get_network_report+0x6ae>
 801c934:	4b68      	ldr	r3, [pc, #416]	; (801cad8 <ai_platform_api_get_network_report+0x854>)
 801c936:	2201      	movs	r2, #1
 801c938:	4619      	mov	r1, r3
 801c93a:	601a      	str	r2, [r3, #0]
 801c93c:	680b      	ldr	r3, [r1, #0]
 801c93e:	2b00      	cmp	r3, #0
 801c940:	d1fc      	bne.n	801c93c <ai_platform_api_get_network_report+0x6b8>
 801c942:	4b66      	ldr	r3, [pc, #408]	; (801cadc <ai_platform_api_get_network_report+0x858>)
 801c944:	4962      	ldr	r1, [pc, #392]	; (801cad0 <ai_platform_api_get_network_report+0x84c>)
 801c946:	4a63      	ldr	r2, [pc, #396]	; (801cad4 <ai_platform_api_get_network_report+0x850>)
 801c948:	6019      	str	r1, [r3, #0]
 801c94a:	681b      	ldr	r3, [r3, #0]
 801c94c:	4293      	cmp	r3, r2
 801c94e:	f43f aecd 	beq.w	801c6ec <ai_platform_api_get_network_report+0x468>
 801c952:	e7fe      	b.n	801c952 <ai_platform_api_get_network_report+0x6ce>
 801c954:	4b5c      	ldr	r3, [pc, #368]	; (801cac8 <ai_platform_api_get_network_report+0x844>)
 801c956:	2201      	movs	r2, #1
 801c958:	4619      	mov	r1, r3
 801c95a:	601a      	str	r2, [r3, #0]
 801c95c:	680b      	ldr	r3, [r1, #0]
 801c95e:	2b00      	cmp	r3, #0
 801c960:	d1fc      	bne.n	801c95c <ai_platform_api_get_network_report+0x6d8>
 801c962:	4b5a      	ldr	r3, [pc, #360]	; (801cacc <ai_platform_api_get_network_report+0x848>)
 801c964:	495a      	ldr	r1, [pc, #360]	; (801cad0 <ai_platform_api_get_network_report+0x84c>)
 801c966:	4a5b      	ldr	r2, [pc, #364]	; (801cad4 <ai_platform_api_get_network_report+0x850>)
 801c968:	6019      	str	r1, [r3, #0]
 801c96a:	681b      	ldr	r3, [r3, #0]
 801c96c:	4293      	cmp	r3, r2
 801c96e:	f43f aebd 	beq.w	801c6ec <ai_platform_api_get_network_report+0x468>
 801c972:	e7fe      	b.n	801c972 <ai_platform_api_get_network_report+0x6ee>
 801c974:	4b54      	ldr	r3, [pc, #336]	; (801cac8 <ai_platform_api_get_network_report+0x844>)
 801c976:	2201      	movs	r2, #1
 801c978:	4619      	mov	r1, r3
 801c97a:	601a      	str	r2, [r3, #0]
 801c97c:	680b      	ldr	r3, [r1, #0]
 801c97e:	2b00      	cmp	r3, #0
 801c980:	d1fc      	bne.n	801c97c <ai_platform_api_get_network_report+0x6f8>
 801c982:	4b52      	ldr	r3, [pc, #328]	; (801cacc <ai_platform_api_get_network_report+0x848>)
 801c984:	4952      	ldr	r1, [pc, #328]	; (801cad0 <ai_platform_api_get_network_report+0x84c>)
 801c986:	4a53      	ldr	r2, [pc, #332]	; (801cad4 <ai_platform_api_get_network_report+0x850>)
 801c988:	6019      	str	r1, [r3, #0]
 801c98a:	681b      	ldr	r3, [r3, #0]
 801c98c:	4293      	cmp	r3, r2
 801c98e:	f43f ae7b 	beq.w	801c688 <ai_platform_api_get_network_report+0x404>
 801c992:	e7fe      	b.n	801c992 <ai_platform_api_get_network_report+0x70e>
 801c994:	4b50      	ldr	r3, [pc, #320]	; (801cad8 <ai_platform_api_get_network_report+0x854>)
 801c996:	2201      	movs	r2, #1
 801c998:	4619      	mov	r1, r3
 801c99a:	601a      	str	r2, [r3, #0]
 801c99c:	680b      	ldr	r3, [r1, #0]
 801c99e:	2b00      	cmp	r3, #0
 801c9a0:	d1fc      	bne.n	801c99c <ai_platform_api_get_network_report+0x718>
 801c9a2:	4b4e      	ldr	r3, [pc, #312]	; (801cadc <ai_platform_api_get_network_report+0x858>)
 801c9a4:	494a      	ldr	r1, [pc, #296]	; (801cad0 <ai_platform_api_get_network_report+0x84c>)
 801c9a6:	4a4b      	ldr	r2, [pc, #300]	; (801cad4 <ai_platform_api_get_network_report+0x850>)
 801c9a8:	6019      	str	r1, [r3, #0]
 801c9aa:	681b      	ldr	r3, [r3, #0]
 801c9ac:	4293      	cmp	r3, r2
 801c9ae:	f43f ae6b 	beq.w	801c688 <ai_platform_api_get_network_report+0x404>
 801c9b2:	e7fe      	b.n	801c9b2 <ai_platform_api_get_network_report+0x72e>
 801c9b4:	4b48      	ldr	r3, [pc, #288]	; (801cad8 <ai_platform_api_get_network_report+0x854>)
 801c9b6:	2201      	movs	r2, #1
 801c9b8:	4619      	mov	r1, r3
 801c9ba:	601a      	str	r2, [r3, #0]
 801c9bc:	680b      	ldr	r3, [r1, #0]
 801c9be:	2b00      	cmp	r3, #0
 801c9c0:	d1fc      	bne.n	801c9bc <ai_platform_api_get_network_report+0x738>
 801c9c2:	4b46      	ldr	r3, [pc, #280]	; (801cadc <ai_platform_api_get_network_report+0x858>)
 801c9c4:	4942      	ldr	r1, [pc, #264]	; (801cad0 <ai_platform_api_get_network_report+0x84c>)
 801c9c6:	4a43      	ldr	r2, [pc, #268]	; (801cad4 <ai_platform_api_get_network_report+0x850>)
 801c9c8:	6019      	str	r1, [r3, #0]
 801c9ca:	681b      	ldr	r3, [r3, #0]
 801c9cc:	4293      	cmp	r3, r2
 801c9ce:	f43f ae5b 	beq.w	801c688 <ai_platform_api_get_network_report+0x404>
 801c9d2:	e7fe      	b.n	801c9d2 <ai_platform_api_get_network_report+0x74e>
 801c9d4:	4b3c      	ldr	r3, [pc, #240]	; (801cac8 <ai_platform_api_get_network_report+0x844>)
 801c9d6:	2201      	movs	r2, #1
 801c9d8:	4619      	mov	r1, r3
 801c9da:	601a      	str	r2, [r3, #0]
 801c9dc:	680b      	ldr	r3, [r1, #0]
 801c9de:	2b00      	cmp	r3, #0
 801c9e0:	d1fc      	bne.n	801c9dc <ai_platform_api_get_network_report+0x758>
 801c9e2:	4b3a      	ldr	r3, [pc, #232]	; (801cacc <ai_platform_api_get_network_report+0x848>)
 801c9e4:	493a      	ldr	r1, [pc, #232]	; (801cad0 <ai_platform_api_get_network_report+0x84c>)
 801c9e6:	4a3b      	ldr	r2, [pc, #236]	; (801cad4 <ai_platform_api_get_network_report+0x850>)
 801c9e8:	6019      	str	r1, [r3, #0]
 801c9ea:	681b      	ldr	r3, [r3, #0]
 801c9ec:	4293      	cmp	r3, r2
 801c9ee:	f43f ae4b 	beq.w	801c688 <ai_platform_api_get_network_report+0x404>
 801c9f2:	e7fe      	b.n	801c9f2 <ai_platform_api_get_network_report+0x76e>
 801c9f4:	4b34      	ldr	r3, [pc, #208]	; (801cac8 <ai_platform_api_get_network_report+0x844>)
 801c9f6:	2201      	movs	r2, #1
 801c9f8:	4619      	mov	r1, r3
 801c9fa:	601a      	str	r2, [r3, #0]
 801c9fc:	680b      	ldr	r3, [r1, #0]
 801c9fe:	2b00      	cmp	r3, #0
 801ca00:	d1fc      	bne.n	801c9fc <ai_platform_api_get_network_report+0x778>
 801ca02:	4b32      	ldr	r3, [pc, #200]	; (801cacc <ai_platform_api_get_network_report+0x848>)
 801ca04:	4932      	ldr	r1, [pc, #200]	; (801cad0 <ai_platform_api_get_network_report+0x84c>)
 801ca06:	4a33      	ldr	r2, [pc, #204]	; (801cad4 <ai_platform_api_get_network_report+0x850>)
 801ca08:	6019      	str	r1, [r3, #0]
 801ca0a:	681b      	ldr	r3, [r3, #0]
 801ca0c:	4293      	cmp	r3, r2
 801ca0e:	f43f ae0a 	beq.w	801c626 <ai_platform_api_get_network_report+0x3a2>
 801ca12:	e7fe      	b.n	801ca12 <ai_platform_api_get_network_report+0x78e>
 801ca14:	4b30      	ldr	r3, [pc, #192]	; (801cad8 <ai_platform_api_get_network_report+0x854>)
 801ca16:	2201      	movs	r2, #1
 801ca18:	4619      	mov	r1, r3
 801ca1a:	601a      	str	r2, [r3, #0]
 801ca1c:	680b      	ldr	r3, [r1, #0]
 801ca1e:	2b00      	cmp	r3, #0
 801ca20:	d1fc      	bne.n	801ca1c <ai_platform_api_get_network_report+0x798>
 801ca22:	4b2e      	ldr	r3, [pc, #184]	; (801cadc <ai_platform_api_get_network_report+0x858>)
 801ca24:	492a      	ldr	r1, [pc, #168]	; (801cad0 <ai_platform_api_get_network_report+0x84c>)
 801ca26:	4a2b      	ldr	r2, [pc, #172]	; (801cad4 <ai_platform_api_get_network_report+0x850>)
 801ca28:	6019      	str	r1, [r3, #0]
 801ca2a:	681b      	ldr	r3, [r3, #0]
 801ca2c:	4293      	cmp	r3, r2
 801ca2e:	f43f adfa 	beq.w	801c626 <ai_platform_api_get_network_report+0x3a2>
 801ca32:	e7fe      	b.n	801ca32 <ai_platform_api_get_network_report+0x7ae>
 801ca34:	4b28      	ldr	r3, [pc, #160]	; (801cad8 <ai_platform_api_get_network_report+0x854>)
 801ca36:	2201      	movs	r2, #1
 801ca38:	4619      	mov	r1, r3
 801ca3a:	601a      	str	r2, [r3, #0]
 801ca3c:	680b      	ldr	r3, [r1, #0]
 801ca3e:	2b00      	cmp	r3, #0
 801ca40:	d1fc      	bne.n	801ca3c <ai_platform_api_get_network_report+0x7b8>
 801ca42:	4b26      	ldr	r3, [pc, #152]	; (801cadc <ai_platform_api_get_network_report+0x858>)
 801ca44:	4922      	ldr	r1, [pc, #136]	; (801cad0 <ai_platform_api_get_network_report+0x84c>)
 801ca46:	4a23      	ldr	r2, [pc, #140]	; (801cad4 <ai_platform_api_get_network_report+0x850>)
 801ca48:	6019      	str	r1, [r3, #0]
 801ca4a:	681b      	ldr	r3, [r3, #0]
 801ca4c:	4293      	cmp	r3, r2
 801ca4e:	f43f adea 	beq.w	801c626 <ai_platform_api_get_network_report+0x3a2>
 801ca52:	e7fe      	b.n	801ca52 <ai_platform_api_get_network_report+0x7ce>
 801ca54:	4b1c      	ldr	r3, [pc, #112]	; (801cac8 <ai_platform_api_get_network_report+0x844>)
 801ca56:	2201      	movs	r2, #1
 801ca58:	4619      	mov	r1, r3
 801ca5a:	601a      	str	r2, [r3, #0]
 801ca5c:	680b      	ldr	r3, [r1, #0]
 801ca5e:	2b00      	cmp	r3, #0
 801ca60:	d1fc      	bne.n	801ca5c <ai_platform_api_get_network_report+0x7d8>
 801ca62:	4b1a      	ldr	r3, [pc, #104]	; (801cacc <ai_platform_api_get_network_report+0x848>)
 801ca64:	491a      	ldr	r1, [pc, #104]	; (801cad0 <ai_platform_api_get_network_report+0x84c>)
 801ca66:	4a1b      	ldr	r2, [pc, #108]	; (801cad4 <ai_platform_api_get_network_report+0x850>)
 801ca68:	6019      	str	r1, [r3, #0]
 801ca6a:	681b      	ldr	r3, [r3, #0]
 801ca6c:	4293      	cmp	r3, r2
 801ca6e:	f43f adda 	beq.w	801c626 <ai_platform_api_get_network_report+0x3a2>
 801ca72:	e7fe      	b.n	801ca72 <ai_platform_api_get_network_report+0x7ee>
 801ca74:	f105 0010 	add.w	r0, r5, #16
 801ca78:	2218      	movs	r2, #24
 801ca7a:	2111      	movs	r1, #17
 801ca7c:	2600      	movs	r6, #0
 801ca7e:	f001 fbb3 	bl	801e1e8 <core_set_error>
 801ca82:	e4ea      	b.n	801c45a <ai_platform_api_get_network_report+0x1d6>
 801ca84:	2600      	movs	r6, #0
 801ca86:	e4e8      	b.n	801c45a <ai_platform_api_get_network_report+0x1d6>
 801ca88:	4b0f      	ldr	r3, [pc, #60]	; (801cac8 <ai_platform_api_get_network_report+0x844>)
 801ca8a:	2201      	movs	r2, #1
 801ca8c:	4619      	mov	r1, r3
 801ca8e:	601a      	str	r2, [r3, #0]
 801ca90:	680b      	ldr	r3, [r1, #0]
 801ca92:	2b00      	cmp	r3, #0
 801ca94:	d1fc      	bne.n	801ca90 <ai_platform_api_get_network_report+0x80c>
 801ca96:	4b0d      	ldr	r3, [pc, #52]	; (801cacc <ai_platform_api_get_network_report+0x848>)
 801ca98:	490d      	ldr	r1, [pc, #52]	; (801cad0 <ai_platform_api_get_network_report+0x84c>)
 801ca9a:	4a0e      	ldr	r2, [pc, #56]	; (801cad4 <ai_platform_api_get_network_report+0x850>)
 801ca9c:	6019      	str	r1, [r3, #0]
 801ca9e:	681b      	ldr	r3, [r3, #0]
 801caa0:	4293      	cmp	r3, r2
 801caa2:	f43f ac28 	beq.w	801c2f6 <ai_platform_api_get_network_report+0x72>
 801caa6:	e7fe      	b.n	801caa6 <ai_platform_api_get_network_report+0x822>
 801caa8:	4b0b      	ldr	r3, [pc, #44]	; (801cad8 <ai_platform_api_get_network_report+0x854>)
 801caaa:	2201      	movs	r2, #1
 801caac:	4619      	mov	r1, r3
 801caae:	601a      	str	r2, [r3, #0]
 801cab0:	680b      	ldr	r3, [r1, #0]
 801cab2:	2b00      	cmp	r3, #0
 801cab4:	d1fc      	bne.n	801cab0 <ai_platform_api_get_network_report+0x82c>
 801cab6:	4b09      	ldr	r3, [pc, #36]	; (801cadc <ai_platform_api_get_network_report+0x858>)
 801cab8:	4905      	ldr	r1, [pc, #20]	; (801cad0 <ai_platform_api_get_network_report+0x84c>)
 801caba:	4a06      	ldr	r2, [pc, #24]	; (801cad4 <ai_platform_api_get_network_report+0x850>)
 801cabc:	6019      	str	r1, [r3, #0]
 801cabe:	681b      	ldr	r3, [r3, #0]
 801cac0:	4293      	cmp	r3, r2
 801cac2:	f43f ac18 	beq.w	801c2f6 <ai_platform_api_get_network_report+0x72>
 801cac6:	e7fe      	b.n	801cac6 <ai_platform_api_get_network_report+0x842>
 801cac8:	40023008 	.word	0x40023008
 801cacc:	40023000 	.word	0x40023000
 801cad0:	f407a5c2 	.word	0xf407a5c2
 801cad4:	b5e8b5cd 	.word	0xb5e8b5cd
 801cad8:	58024c08 	.word	0x58024c08
 801cadc:	58024c00 	.word	0x58024c00

0801cae0 <ai_platform_network_create>:
 801cae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cae4:	b082      	sub	sp, #8
 801cae6:	4606      	mov	r6, r0
 801cae8:	4615      	mov	r5, r2
 801caea:	461f      	mov	r7, r3
 801caec:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 801caf0:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 801caf4:	f7ff f85c 	bl	801bbb0 <_ai_platform_acquire_crc>
 801caf8:	b328      	cbz	r0, 801cb46 <ai_platform_network_create+0x66>
 801cafa:	4baa      	ldr	r3, [pc, #680]	; (801cda4 <ai_platform_network_create+0x2c4>)
 801cafc:	f46f 648a 	mvn.w	r4, #1104	; 0x450
 801cb00:	4602      	mov	r2, r0
 801cb02:	681b      	ldr	r3, [r3, #0]
 801cb04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801cb08:	1919      	adds	r1, r3, r4
 801cb0a:	2901      	cmp	r1, #1
 801cb0c:	d921      	bls.n	801cb52 <ai_platform_network_create+0x72>
 801cb0e:	f240 4149 	movw	r1, #1097	; 0x449
 801cb12:	428b      	cmp	r3, r1
 801cb14:	d01d      	beq.n	801cb52 <ai_platform_network_create+0x72>
 801cb16:	4ba4      	ldr	r3, [pc, #656]	; (801cda8 <ai_platform_network_create+0x2c8>)
 801cb18:	6819      	ldr	r1, [r3, #0]
 801cb1a:	f3c1 010a 	ubfx	r1, r1, #0, #11
 801cb1e:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 801cb22:	d01e      	beq.n	801cb62 <ai_platform_network_create+0x82>
 801cb24:	6819      	ldr	r1, [r3, #0]
 801cb26:	f240 4483 	movw	r4, #1155	; 0x483
 801cb2a:	f3c1 010a 	ubfx	r1, r1, #0, #11
 801cb2e:	42a1      	cmp	r1, r4
 801cb30:	f000 8085 	beq.w	801cc3e <ai_platform_network_create+0x15e>
 801cb34:	681b      	ldr	r3, [r3, #0]
 801cb36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801cb3a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801cb3e:	f000 8157 	beq.w	801cdf0 <ai_platform_network_create+0x310>
 801cb42:	f7ff f837 	bl	801bbb4 <_ai_platform_release_crc>
 801cb46:	f244 1333 	movw	r3, #16691	; 0x4133
 801cb4a:	4618      	mov	r0, r3
 801cb4c:	b002      	add	sp, #8
 801cb4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cb52:	4b96      	ldr	r3, [pc, #600]	; (801cdac <ai_platform_network_create+0x2cc>)
 801cb54:	2118      	movs	r1, #24
 801cb56:	6019      	str	r1, [r3, #0]
 801cb58:	6819      	ldr	r1, [r3, #0]
 801cb5a:	2918      	cmp	r1, #24
 801cb5c:	d059      	beq.n	801cc12 <ai_platform_network_create+0x132>
 801cb5e:	4610      	mov	r0, r2
 801cb60:	e7ef      	b.n	801cb42 <ai_platform_network_create+0x62>
 801cb62:	4b93      	ldr	r3, [pc, #588]	; (801cdb0 <ai_platform_network_create+0x2d0>)
 801cb64:	2118      	movs	r1, #24
 801cb66:	6019      	str	r1, [r3, #0]
 801cb68:	6819      	ldr	r1, [r3, #0]
 801cb6a:	2918      	cmp	r1, #24
 801cb6c:	d1e9      	bne.n	801cb42 <ai_platform_network_create+0x62>
 801cb6e:	2101      	movs	r1, #1
 801cb70:	4618      	mov	r0, r3
 801cb72:	6019      	str	r1, [r3, #0]
 801cb74:	6803      	ldr	r3, [r0, #0]
 801cb76:	2b00      	cmp	r3, #0
 801cb78:	d1fc      	bne.n	801cb74 <ai_platform_network_create+0x94>
 801cb7a:	4610      	mov	r0, r2
 801cb7c:	f7ff f81a 	bl	801bbb4 <_ai_platform_release_crc>
 801cb80:	4a8c      	ldr	r2, [pc, #560]	; (801cdb4 <ai_platform_network_create+0x2d4>)
 801cb82:	6813      	ldr	r3, [r2, #0]
 801cb84:	f023 0301 	bic.w	r3, r3, #1
 801cb88:	6013      	str	r3, [r2, #0]
 801cb8a:	f7ff f811 	bl	801bbb0 <_ai_platform_acquire_crc>
 801cb8e:	4b85      	ldr	r3, [pc, #532]	; (801cda4 <ai_platform_network_create+0x2c4>)
 801cb90:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801cb94:	681b      	ldr	r3, [r3, #0]
 801cb96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801cb9a:	185a      	adds	r2, r3, r1
 801cb9c:	2a01      	cmp	r2, #1
 801cb9e:	d93f      	bls.n	801cc20 <ai_platform_network_create+0x140>
 801cba0:	f240 4249 	movw	r2, #1097	; 0x449
 801cba4:	4293      	cmp	r3, r2
 801cba6:	d03b      	beq.n	801cc20 <ai_platform_network_create+0x140>
 801cba8:	4b7f      	ldr	r3, [pc, #508]	; (801cda8 <ai_platform_network_create+0x2c8>)
 801cbaa:	681a      	ldr	r2, [r3, #0]
 801cbac:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801cbb0:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801cbb4:	f000 810c 	beq.w	801cdd0 <ai_platform_network_create+0x2f0>
 801cbb8:	681a      	ldr	r2, [r3, #0]
 801cbba:	f240 4183 	movw	r1, #1155	; 0x483
 801cbbe:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801cbc2:	428a      	cmp	r2, r1
 801cbc4:	f000 80de 	beq.w	801cd84 <ai_platform_network_create+0x2a4>
 801cbc8:	681b      	ldr	r3, [r3, #0]
 801cbca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801cbce:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801cbd2:	d07e      	beq.n	801ccd2 <ai_platform_network_create+0x1f2>
 801cbd4:	f7fe ffee 	bl	801bbb4 <_ai_platform_release_crc>
 801cbd8:	2e00      	cmp	r6, #0
 801cbda:	d077      	beq.n	801cccc <ai_platform_network_create+0x1ec>
 801cbdc:	4b76      	ldr	r3, [pc, #472]	; (801cdb8 <ai_platform_network_create+0x2d8>)
 801cbde:	602b      	str	r3, [r5, #0]
 801cbe0:	6035      	str	r5, [r6, #0]
 801cbe2:	f001 faff 	bl	801e1e4 <core_init>
 801cbe6:	2800      	cmp	r0, #0
 801cbe8:	d137      	bne.n	801cc5a <ai_platform_network_create+0x17a>
 801cbea:	2430      	movs	r4, #48	; 0x30
 801cbec:	2300      	movs	r3, #0
 801cbee:	f04f 0a10 	mov.w	sl, #16
 801cbf2:	6033      	str	r3, [r6, #0]
 801cbf4:	464a      	mov	r2, r9
 801cbf6:	4641      	mov	r1, r8
 801cbf8:	4638      	mov	r0, r7
 801cbfa:	f008 fc83 	bl	8025504 <ai_version_get>
 801cbfe:	2300      	movs	r3, #0
 801cc00:	6468      	str	r0, [r5, #68]	; 0x44
 801cc02:	f364 0307 	bfi	r3, r4, #0, #8
 801cc06:	f36a 231f 	bfi	r3, sl, #8, #24
 801cc0a:	4618      	mov	r0, r3
 801cc0c:	b002      	add	sp, #8
 801cc0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc12:	2101      	movs	r1, #1
 801cc14:	4618      	mov	r0, r3
 801cc16:	6019      	str	r1, [r3, #0]
 801cc18:	6803      	ldr	r3, [r0, #0]
 801cc1a:	2b00      	cmp	r3, #0
 801cc1c:	d1fc      	bne.n	801cc18 <ai_platform_network_create+0x138>
 801cc1e:	e7ac      	b.n	801cb7a <ai_platform_network_create+0x9a>
 801cc20:	4b62      	ldr	r3, [pc, #392]	; (801cdac <ai_platform_network_create+0x2cc>)
 801cc22:	2201      	movs	r2, #1
 801cc24:	4619      	mov	r1, r3
 801cc26:	601a      	str	r2, [r3, #0]
 801cc28:	680b      	ldr	r3, [r1, #0]
 801cc2a:	2b00      	cmp	r3, #0
 801cc2c:	d1fc      	bne.n	801cc28 <ai_platform_network_create+0x148>
 801cc2e:	4b63      	ldr	r3, [pc, #396]	; (801cdbc <ai_platform_network_create+0x2dc>)
 801cc30:	4963      	ldr	r1, [pc, #396]	; (801cdc0 <ai_platform_network_create+0x2e0>)
 801cc32:	4a64      	ldr	r2, [pc, #400]	; (801cdc4 <ai_platform_network_create+0x2e4>)
 801cc34:	6019      	str	r1, [r3, #0]
 801cc36:	681b      	ldr	r3, [r3, #0]
 801cc38:	4293      	cmp	r3, r2
 801cc3a:	d0cb      	beq.n	801cbd4 <ai_platform_network_create+0xf4>
 801cc3c:	e7fe      	b.n	801cc3c <ai_platform_network_create+0x15c>
 801cc3e:	4b5c      	ldr	r3, [pc, #368]	; (801cdb0 <ai_platform_network_create+0x2d0>)
 801cc40:	2118      	movs	r1, #24
 801cc42:	6019      	str	r1, [r3, #0]
 801cc44:	6819      	ldr	r1, [r3, #0]
 801cc46:	2918      	cmp	r1, #24
 801cc48:	f47f af7b 	bne.w	801cb42 <ai_platform_network_create+0x62>
 801cc4c:	2101      	movs	r1, #1
 801cc4e:	4618      	mov	r0, r3
 801cc50:	6019      	str	r1, [r3, #0]
 801cc52:	6803      	ldr	r3, [r0, #0]
 801cc54:	2b00      	cmp	r3, #0
 801cc56:	d1fc      	bne.n	801cc52 <ai_platform_network_create+0x172>
 801cc58:	e78f      	b.n	801cb7a <ai_platform_network_create+0x9a>
 801cc5a:	4a56      	ldr	r2, [pc, #344]	; (801cdb4 <ai_platform_network_create+0x2d4>)
 801cc5c:	6813      	ldr	r3, [r2, #0]
 801cc5e:	f023 0301 	bic.w	r3, r3, #1
 801cc62:	6013      	str	r3, [r2, #0]
 801cc64:	f7fe ffa4 	bl	801bbb0 <_ai_platform_acquire_crc>
 801cc68:	4b4e      	ldr	r3, [pc, #312]	; (801cda4 <ai_platform_network_create+0x2c4>)
 801cc6a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801cc6e:	681b      	ldr	r3, [r3, #0]
 801cc70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801cc74:	189a      	adds	r2, r3, r2
 801cc76:	2a01      	cmp	r2, #1
 801cc78:	d975      	bls.n	801cd66 <ai_platform_network_create+0x286>
 801cc7a:	f240 4249 	movw	r2, #1097	; 0x449
 801cc7e:	4293      	cmp	r3, r2
 801cc80:	d071      	beq.n	801cd66 <ai_platform_network_create+0x286>
 801cc82:	4b49      	ldr	r3, [pc, #292]	; (801cda8 <ai_platform_network_create+0x2c8>)
 801cc84:	681a      	ldr	r2, [r3, #0]
 801cc86:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801cc8a:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801cc8e:	d05b      	beq.n	801cd48 <ai_platform_network_create+0x268>
 801cc90:	681a      	ldr	r2, [r3, #0]
 801cc92:	f240 4183 	movw	r1, #1155	; 0x483
 801cc96:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801cc9a:	428a      	cmp	r2, r1
 801cc9c:	d045      	beq.n	801cd2a <ai_platform_network_create+0x24a>
 801cc9e:	681b      	ldr	r3, [r3, #0]
 801cca0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801cca4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801cca8:	d030      	beq.n	801cd0c <ai_platform_network_create+0x22c>
 801ccaa:	f7fe ff83 	bl	801bbb4 <_ai_platform_release_crc>
 801ccae:	2200      	movs	r2, #0
 801ccb0:	4641      	mov	r1, r8
 801ccb2:	4638      	mov	r0, r7
 801ccb4:	f008 fc26 	bl	8025504 <ai_version_get>
 801ccb8:	4604      	mov	r4, r0
 801ccba:	2200      	movs	r2, #0
 801ccbc:	2105      	movs	r1, #5
 801ccbe:	2001      	movs	r0, #1
 801ccc0:	f008 fc20 	bl	8025504 <ai_version_get>
 801ccc4:	4284      	cmp	r4, r0
 801ccc6:	d014      	beq.n	801ccf2 <ai_platform_network_create+0x212>
 801ccc8:	2401      	movs	r4, #1
 801ccca:	e78f      	b.n	801cbec <ai_platform_network_create+0x10c>
 801cccc:	f241 0310 	movw	r3, #4112	; 0x1010
 801ccd0:	e73b      	b.n	801cb4a <ai_platform_network_create+0x6a>
 801ccd2:	4b36      	ldr	r3, [pc, #216]	; (801cdac <ai_platform_network_create+0x2cc>)
 801ccd4:	2201      	movs	r2, #1
 801ccd6:	4619      	mov	r1, r3
 801ccd8:	601a      	str	r2, [r3, #0]
 801ccda:	680b      	ldr	r3, [r1, #0]
 801ccdc:	2b00      	cmp	r3, #0
 801ccde:	d1fc      	bne.n	801ccda <ai_platform_network_create+0x1fa>
 801cce0:	4b36      	ldr	r3, [pc, #216]	; (801cdbc <ai_platform_network_create+0x2dc>)
 801cce2:	4937      	ldr	r1, [pc, #220]	; (801cdc0 <ai_platform_network_create+0x2e0>)
 801cce4:	4a37      	ldr	r2, [pc, #220]	; (801cdc4 <ai_platform_network_create+0x2e4>)
 801cce6:	6019      	str	r1, [r3, #0]
 801cce8:	681b      	ldr	r3, [r3, #0]
 801ccea:	4293      	cmp	r3, r2
 801ccec:	f43f af72 	beq.w	801cbd4 <ai_platform_network_create+0xf4>
 801ccf0:	e7fe      	b.n	801ccf0 <ai_platform_network_create+0x210>
 801ccf2:	4b35      	ldr	r3, [pc, #212]	; (801cdc8 <ai_platform_network_create+0x2e8>)
 801ccf4:	a802      	add	r0, sp, #8
 801ccf6:	f840 3d04 	str.w	r3, [r0, #-4]!
 801ccfa:	f003 f87b 	bl	801fdf4 <ai_check_custom_types>
 801ccfe:	b118      	cbz	r0, 801cd08 <ai_platform_network_create+0x228>
 801cd00:	f04f 0a00 	mov.w	sl, #0
 801cd04:	4654      	mov	r4, sl
 801cd06:	e775      	b.n	801cbf4 <ai_platform_network_create+0x114>
 801cd08:	2402      	movs	r4, #2
 801cd0a:	e76f      	b.n	801cbec <ai_platform_network_create+0x10c>
 801cd0c:	4b27      	ldr	r3, [pc, #156]	; (801cdac <ai_platform_network_create+0x2cc>)
 801cd0e:	2201      	movs	r2, #1
 801cd10:	4619      	mov	r1, r3
 801cd12:	601a      	str	r2, [r3, #0]
 801cd14:	680b      	ldr	r3, [r1, #0]
 801cd16:	2b00      	cmp	r3, #0
 801cd18:	d1fc      	bne.n	801cd14 <ai_platform_network_create+0x234>
 801cd1a:	4b28      	ldr	r3, [pc, #160]	; (801cdbc <ai_platform_network_create+0x2dc>)
 801cd1c:	4928      	ldr	r1, [pc, #160]	; (801cdc0 <ai_platform_network_create+0x2e0>)
 801cd1e:	4a29      	ldr	r2, [pc, #164]	; (801cdc4 <ai_platform_network_create+0x2e4>)
 801cd20:	6019      	str	r1, [r3, #0]
 801cd22:	681b      	ldr	r3, [r3, #0]
 801cd24:	4293      	cmp	r3, r2
 801cd26:	d0c0      	beq.n	801ccaa <ai_platform_network_create+0x1ca>
 801cd28:	e7fe      	b.n	801cd28 <ai_platform_network_create+0x248>
 801cd2a:	4b21      	ldr	r3, [pc, #132]	; (801cdb0 <ai_platform_network_create+0x2d0>)
 801cd2c:	2201      	movs	r2, #1
 801cd2e:	4619      	mov	r1, r3
 801cd30:	601a      	str	r2, [r3, #0]
 801cd32:	680b      	ldr	r3, [r1, #0]
 801cd34:	2b00      	cmp	r3, #0
 801cd36:	d1fc      	bne.n	801cd32 <ai_platform_network_create+0x252>
 801cd38:	4b24      	ldr	r3, [pc, #144]	; (801cdcc <ai_platform_network_create+0x2ec>)
 801cd3a:	4921      	ldr	r1, [pc, #132]	; (801cdc0 <ai_platform_network_create+0x2e0>)
 801cd3c:	4a21      	ldr	r2, [pc, #132]	; (801cdc4 <ai_platform_network_create+0x2e4>)
 801cd3e:	6019      	str	r1, [r3, #0]
 801cd40:	681b      	ldr	r3, [r3, #0]
 801cd42:	4293      	cmp	r3, r2
 801cd44:	d0b1      	beq.n	801ccaa <ai_platform_network_create+0x1ca>
 801cd46:	e7fe      	b.n	801cd46 <ai_platform_network_create+0x266>
 801cd48:	4b19      	ldr	r3, [pc, #100]	; (801cdb0 <ai_platform_network_create+0x2d0>)
 801cd4a:	2201      	movs	r2, #1
 801cd4c:	4619      	mov	r1, r3
 801cd4e:	601a      	str	r2, [r3, #0]
 801cd50:	680b      	ldr	r3, [r1, #0]
 801cd52:	2b00      	cmp	r3, #0
 801cd54:	d1fc      	bne.n	801cd50 <ai_platform_network_create+0x270>
 801cd56:	4b1d      	ldr	r3, [pc, #116]	; (801cdcc <ai_platform_network_create+0x2ec>)
 801cd58:	4919      	ldr	r1, [pc, #100]	; (801cdc0 <ai_platform_network_create+0x2e0>)
 801cd5a:	4a1a      	ldr	r2, [pc, #104]	; (801cdc4 <ai_platform_network_create+0x2e4>)
 801cd5c:	6019      	str	r1, [r3, #0]
 801cd5e:	681b      	ldr	r3, [r3, #0]
 801cd60:	4293      	cmp	r3, r2
 801cd62:	d0a2      	beq.n	801ccaa <ai_platform_network_create+0x1ca>
 801cd64:	e7fe      	b.n	801cd64 <ai_platform_network_create+0x284>
 801cd66:	4b11      	ldr	r3, [pc, #68]	; (801cdac <ai_platform_network_create+0x2cc>)
 801cd68:	2201      	movs	r2, #1
 801cd6a:	4619      	mov	r1, r3
 801cd6c:	601a      	str	r2, [r3, #0]
 801cd6e:	680b      	ldr	r3, [r1, #0]
 801cd70:	2b00      	cmp	r3, #0
 801cd72:	d1fc      	bne.n	801cd6e <ai_platform_network_create+0x28e>
 801cd74:	4b11      	ldr	r3, [pc, #68]	; (801cdbc <ai_platform_network_create+0x2dc>)
 801cd76:	4912      	ldr	r1, [pc, #72]	; (801cdc0 <ai_platform_network_create+0x2e0>)
 801cd78:	4a12      	ldr	r2, [pc, #72]	; (801cdc4 <ai_platform_network_create+0x2e4>)
 801cd7a:	6019      	str	r1, [r3, #0]
 801cd7c:	681b      	ldr	r3, [r3, #0]
 801cd7e:	4293      	cmp	r3, r2
 801cd80:	d093      	beq.n	801ccaa <ai_platform_network_create+0x1ca>
 801cd82:	e7fe      	b.n	801cd82 <ai_platform_network_create+0x2a2>
 801cd84:	4b0a      	ldr	r3, [pc, #40]	; (801cdb0 <ai_platform_network_create+0x2d0>)
 801cd86:	2201      	movs	r2, #1
 801cd88:	4619      	mov	r1, r3
 801cd8a:	601a      	str	r2, [r3, #0]
 801cd8c:	680b      	ldr	r3, [r1, #0]
 801cd8e:	2b00      	cmp	r3, #0
 801cd90:	d1fc      	bne.n	801cd8c <ai_platform_network_create+0x2ac>
 801cd92:	4b0e      	ldr	r3, [pc, #56]	; (801cdcc <ai_platform_network_create+0x2ec>)
 801cd94:	490a      	ldr	r1, [pc, #40]	; (801cdc0 <ai_platform_network_create+0x2e0>)
 801cd96:	4a0b      	ldr	r2, [pc, #44]	; (801cdc4 <ai_platform_network_create+0x2e4>)
 801cd98:	6019      	str	r1, [r3, #0]
 801cd9a:	681b      	ldr	r3, [r3, #0]
 801cd9c:	4293      	cmp	r3, r2
 801cd9e:	f43f af19 	beq.w	801cbd4 <ai_platform_network_create+0xf4>
 801cda2:	e7fe      	b.n	801cda2 <ai_platform_network_create+0x2c2>
 801cda4:	e0042000 	.word	0xe0042000
 801cda8:	5c001000 	.word	0x5c001000
 801cdac:	40023008 	.word	0x40023008
 801cdb0:	58024c08 	.word	0x58024c08
 801cdb4:	e0002000 	.word	0xe0002000
 801cdb8:	a1c00100 	.word	0xa1c00100
 801cdbc:	40023000 	.word	0x40023000
 801cdc0:	f407a5c2 	.word	0xf407a5c2
 801cdc4:	b5e8b5cd 	.word	0xb5e8b5cd
 801cdc8:	84048403 	.word	0x84048403
 801cdcc:	58024c00 	.word	0x58024c00
 801cdd0:	4b0e      	ldr	r3, [pc, #56]	; (801ce0c <ai_platform_network_create+0x32c>)
 801cdd2:	2201      	movs	r2, #1
 801cdd4:	4619      	mov	r1, r3
 801cdd6:	601a      	str	r2, [r3, #0]
 801cdd8:	680b      	ldr	r3, [r1, #0]
 801cdda:	2b00      	cmp	r3, #0
 801cddc:	d1fc      	bne.n	801cdd8 <ai_platform_network_create+0x2f8>
 801cdde:	4b0c      	ldr	r3, [pc, #48]	; (801ce10 <ai_platform_network_create+0x330>)
 801cde0:	490c      	ldr	r1, [pc, #48]	; (801ce14 <ai_platform_network_create+0x334>)
 801cde2:	4a0d      	ldr	r2, [pc, #52]	; (801ce18 <ai_platform_network_create+0x338>)
 801cde4:	6019      	str	r1, [r3, #0]
 801cde6:	681b      	ldr	r3, [r3, #0]
 801cde8:	4293      	cmp	r3, r2
 801cdea:	f43f aef3 	beq.w	801cbd4 <ai_platform_network_create+0xf4>
 801cdee:	e7fe      	b.n	801cdee <ai_platform_network_create+0x30e>
 801cdf0:	4b0a      	ldr	r3, [pc, #40]	; (801ce1c <ai_platform_network_create+0x33c>)
 801cdf2:	2118      	movs	r1, #24
 801cdf4:	6019      	str	r1, [r3, #0]
 801cdf6:	6819      	ldr	r1, [r3, #0]
 801cdf8:	2918      	cmp	r1, #24
 801cdfa:	f47f aea2 	bne.w	801cb42 <ai_platform_network_create+0x62>
 801cdfe:	2101      	movs	r1, #1
 801ce00:	4618      	mov	r0, r3
 801ce02:	6019      	str	r1, [r3, #0]
 801ce04:	6803      	ldr	r3, [r0, #0]
 801ce06:	2b00      	cmp	r3, #0
 801ce08:	d1fc      	bne.n	801ce04 <ai_platform_network_create+0x324>
 801ce0a:	e6b6      	b.n	801cb7a <ai_platform_network_create+0x9a>
 801ce0c:	58024c08 	.word	0x58024c08
 801ce10:	58024c00 	.word	0x58024c00
 801ce14:	f407a5c2 	.word	0xf407a5c2
 801ce18:	b5e8b5cd 	.word	0xb5e8b5cd
 801ce1c:	40023008 	.word	0x40023008

0801ce20 <ai_platform_network_destroy>:
 801ce20:	b510      	push	{r4, lr}
 801ce22:	4604      	mov	r4, r0
 801ce24:	b118      	cbz	r0, 801ce2e <ai_platform_network_destroy+0xe>
 801ce26:	4b6d      	ldr	r3, [pc, #436]	; (801cfdc <ai_platform_network_destroy+0x1bc>)
 801ce28:	6802      	ldr	r2, [r0, #0]
 801ce2a:	429a      	cmp	r2, r3
 801ce2c:	d03c      	beq.n	801cea8 <ai_platform_network_destroy+0x88>
 801ce2e:	4a6c      	ldr	r2, [pc, #432]	; (801cfe0 <ai_platform_network_destroy+0x1c0>)
 801ce30:	6813      	ldr	r3, [r2, #0]
 801ce32:	f023 0301 	bic.w	r3, r3, #1
 801ce36:	6013      	str	r3, [r2, #0]
 801ce38:	f7fe feba 	bl	801bbb0 <_ai_platform_acquire_crc>
 801ce3c:	4b69      	ldr	r3, [pc, #420]	; (801cfe4 <ai_platform_network_destroy+0x1c4>)
 801ce3e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801ce42:	681b      	ldr	r3, [r3, #0]
 801ce44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ce48:	185a      	adds	r2, r3, r1
 801ce4a:	2a01      	cmp	r2, #1
 801ce4c:	d91d      	bls.n	801ce8a <ai_platform_network_destroy+0x6a>
 801ce4e:	f240 4249 	movw	r2, #1097	; 0x449
 801ce52:	4293      	cmp	r3, r2
 801ce54:	d019      	beq.n	801ce8a <ai_platform_network_destroy+0x6a>
 801ce56:	4b64      	ldr	r3, [pc, #400]	; (801cfe8 <ai_platform_network_destroy+0x1c8>)
 801ce58:	681a      	ldr	r2, [r3, #0]
 801ce5a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801ce5e:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801ce62:	f000 80ab 	beq.w	801cfbc <ai_platform_network_destroy+0x19c>
 801ce66:	681a      	ldr	r2, [r3, #0]
 801ce68:	f240 4183 	movw	r1, #1155	; 0x483
 801ce6c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801ce70:	428a      	cmp	r2, r1
 801ce72:	f000 8093 	beq.w	801cf9c <ai_platform_network_destroy+0x17c>
 801ce76:	681b      	ldr	r3, [r3, #0]
 801ce78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ce7c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801ce80:	d041      	beq.n	801cf06 <ai_platform_network_destroy+0xe6>
 801ce82:	f7fe fe97 	bl	801bbb4 <_ai_platform_release_crc>
 801ce86:	4620      	mov	r0, r4
 801ce88:	bd10      	pop	{r4, pc}
 801ce8a:	4b58      	ldr	r3, [pc, #352]	; (801cfec <ai_platform_network_destroy+0x1cc>)
 801ce8c:	2201      	movs	r2, #1
 801ce8e:	4619      	mov	r1, r3
 801ce90:	601a      	str	r2, [r3, #0]
 801ce92:	680b      	ldr	r3, [r1, #0]
 801ce94:	2b00      	cmp	r3, #0
 801ce96:	d1fc      	bne.n	801ce92 <ai_platform_network_destroy+0x72>
 801ce98:	4b55      	ldr	r3, [pc, #340]	; (801cff0 <ai_platform_network_destroy+0x1d0>)
 801ce9a:	4956      	ldr	r1, [pc, #344]	; (801cff4 <ai_platform_network_destroy+0x1d4>)
 801ce9c:	4a56      	ldr	r2, [pc, #344]	; (801cff8 <ai_platform_network_destroy+0x1d8>)
 801ce9e:	6019      	str	r1, [r3, #0]
 801cea0:	681b      	ldr	r3, [r3, #0]
 801cea2:	4293      	cmp	r3, r2
 801cea4:	d0ed      	beq.n	801ce82 <ai_platform_network_destroy+0x62>
 801cea6:	e7fe      	b.n	801cea6 <ai_platform_network_destroy+0x86>
 801cea8:	4a4d      	ldr	r2, [pc, #308]	; (801cfe0 <ai_platform_network_destroy+0x1c0>)
 801ceaa:	6813      	ldr	r3, [r2, #0]
 801ceac:	f023 0301 	bic.w	r3, r3, #1
 801ceb0:	6013      	str	r3, [r2, #0]
 801ceb2:	f7fe fe7d 	bl	801bbb0 <_ai_platform_acquire_crc>
 801ceb6:	4b4b      	ldr	r3, [pc, #300]	; (801cfe4 <ai_platform_network_destroy+0x1c4>)
 801ceb8:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801cebc:	681b      	ldr	r3, [r3, #0]
 801cebe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801cec2:	189a      	adds	r2, r3, r2
 801cec4:	2a01      	cmp	r2, #1
 801cec6:	d95a      	bls.n	801cf7e <ai_platform_network_destroy+0x15e>
 801cec8:	f240 4249 	movw	r2, #1097	; 0x449
 801cecc:	4293      	cmp	r3, r2
 801cece:	d056      	beq.n	801cf7e <ai_platform_network_destroy+0x15e>
 801ced0:	4b45      	ldr	r3, [pc, #276]	; (801cfe8 <ai_platform_network_destroy+0x1c8>)
 801ced2:	681a      	ldr	r2, [r3, #0]
 801ced4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801ced8:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801cedc:	d040      	beq.n	801cf60 <ai_platform_network_destroy+0x140>
 801cede:	681a      	ldr	r2, [r3, #0]
 801cee0:	f240 4183 	movw	r1, #1155	; 0x483
 801cee4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801cee8:	428a      	cmp	r2, r1
 801ceea:	d02a      	beq.n	801cf42 <ai_platform_network_destroy+0x122>
 801ceec:	681b      	ldr	r3, [r3, #0]
 801ceee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801cef2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801cef6:	d015      	beq.n	801cf24 <ai_platform_network_destroy+0x104>
 801cef8:	f7fe fe5c 	bl	801bbb4 <_ai_platform_release_crc>
 801cefc:	4620      	mov	r0, r4
 801cefe:	2400      	movs	r4, #0
 801cf00:	f003 f818 	bl	801ff34 <ai_layers_destroy_all>
 801cf04:	e7bf      	b.n	801ce86 <ai_platform_network_destroy+0x66>
 801cf06:	4b39      	ldr	r3, [pc, #228]	; (801cfec <ai_platform_network_destroy+0x1cc>)
 801cf08:	2201      	movs	r2, #1
 801cf0a:	4619      	mov	r1, r3
 801cf0c:	601a      	str	r2, [r3, #0]
 801cf0e:	680b      	ldr	r3, [r1, #0]
 801cf10:	2b00      	cmp	r3, #0
 801cf12:	d1fc      	bne.n	801cf0e <ai_platform_network_destroy+0xee>
 801cf14:	4b36      	ldr	r3, [pc, #216]	; (801cff0 <ai_platform_network_destroy+0x1d0>)
 801cf16:	4937      	ldr	r1, [pc, #220]	; (801cff4 <ai_platform_network_destroy+0x1d4>)
 801cf18:	4a37      	ldr	r2, [pc, #220]	; (801cff8 <ai_platform_network_destroy+0x1d8>)
 801cf1a:	6019      	str	r1, [r3, #0]
 801cf1c:	681b      	ldr	r3, [r3, #0]
 801cf1e:	4293      	cmp	r3, r2
 801cf20:	d0af      	beq.n	801ce82 <ai_platform_network_destroy+0x62>
 801cf22:	e7fe      	b.n	801cf22 <ai_platform_network_destroy+0x102>
 801cf24:	4b31      	ldr	r3, [pc, #196]	; (801cfec <ai_platform_network_destroy+0x1cc>)
 801cf26:	2201      	movs	r2, #1
 801cf28:	4619      	mov	r1, r3
 801cf2a:	601a      	str	r2, [r3, #0]
 801cf2c:	680b      	ldr	r3, [r1, #0]
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	d1fc      	bne.n	801cf2c <ai_platform_network_destroy+0x10c>
 801cf32:	4b2f      	ldr	r3, [pc, #188]	; (801cff0 <ai_platform_network_destroy+0x1d0>)
 801cf34:	492f      	ldr	r1, [pc, #188]	; (801cff4 <ai_platform_network_destroy+0x1d4>)
 801cf36:	4a30      	ldr	r2, [pc, #192]	; (801cff8 <ai_platform_network_destroy+0x1d8>)
 801cf38:	6019      	str	r1, [r3, #0]
 801cf3a:	681b      	ldr	r3, [r3, #0]
 801cf3c:	4293      	cmp	r3, r2
 801cf3e:	d0db      	beq.n	801cef8 <ai_platform_network_destroy+0xd8>
 801cf40:	e7fe      	b.n	801cf40 <ai_platform_network_destroy+0x120>
 801cf42:	4b2e      	ldr	r3, [pc, #184]	; (801cffc <ai_platform_network_destroy+0x1dc>)
 801cf44:	2201      	movs	r2, #1
 801cf46:	4619      	mov	r1, r3
 801cf48:	601a      	str	r2, [r3, #0]
 801cf4a:	680b      	ldr	r3, [r1, #0]
 801cf4c:	2b00      	cmp	r3, #0
 801cf4e:	d1fc      	bne.n	801cf4a <ai_platform_network_destroy+0x12a>
 801cf50:	4b2b      	ldr	r3, [pc, #172]	; (801d000 <ai_platform_network_destroy+0x1e0>)
 801cf52:	4928      	ldr	r1, [pc, #160]	; (801cff4 <ai_platform_network_destroy+0x1d4>)
 801cf54:	4a28      	ldr	r2, [pc, #160]	; (801cff8 <ai_platform_network_destroy+0x1d8>)
 801cf56:	6019      	str	r1, [r3, #0]
 801cf58:	681b      	ldr	r3, [r3, #0]
 801cf5a:	4293      	cmp	r3, r2
 801cf5c:	d0cc      	beq.n	801cef8 <ai_platform_network_destroy+0xd8>
 801cf5e:	e7fe      	b.n	801cf5e <ai_platform_network_destroy+0x13e>
 801cf60:	4b26      	ldr	r3, [pc, #152]	; (801cffc <ai_platform_network_destroy+0x1dc>)
 801cf62:	2201      	movs	r2, #1
 801cf64:	4619      	mov	r1, r3
 801cf66:	601a      	str	r2, [r3, #0]
 801cf68:	680b      	ldr	r3, [r1, #0]
 801cf6a:	2b00      	cmp	r3, #0
 801cf6c:	d1fc      	bne.n	801cf68 <ai_platform_network_destroy+0x148>
 801cf6e:	4b24      	ldr	r3, [pc, #144]	; (801d000 <ai_platform_network_destroy+0x1e0>)
 801cf70:	4920      	ldr	r1, [pc, #128]	; (801cff4 <ai_platform_network_destroy+0x1d4>)
 801cf72:	4a21      	ldr	r2, [pc, #132]	; (801cff8 <ai_platform_network_destroy+0x1d8>)
 801cf74:	6019      	str	r1, [r3, #0]
 801cf76:	681b      	ldr	r3, [r3, #0]
 801cf78:	4293      	cmp	r3, r2
 801cf7a:	d0bd      	beq.n	801cef8 <ai_platform_network_destroy+0xd8>
 801cf7c:	e7fe      	b.n	801cf7c <ai_platform_network_destroy+0x15c>
 801cf7e:	4b1b      	ldr	r3, [pc, #108]	; (801cfec <ai_platform_network_destroy+0x1cc>)
 801cf80:	2201      	movs	r2, #1
 801cf82:	4619      	mov	r1, r3
 801cf84:	601a      	str	r2, [r3, #0]
 801cf86:	680b      	ldr	r3, [r1, #0]
 801cf88:	2b00      	cmp	r3, #0
 801cf8a:	d1fc      	bne.n	801cf86 <ai_platform_network_destroy+0x166>
 801cf8c:	4b18      	ldr	r3, [pc, #96]	; (801cff0 <ai_platform_network_destroy+0x1d0>)
 801cf8e:	4919      	ldr	r1, [pc, #100]	; (801cff4 <ai_platform_network_destroy+0x1d4>)
 801cf90:	4a19      	ldr	r2, [pc, #100]	; (801cff8 <ai_platform_network_destroy+0x1d8>)
 801cf92:	6019      	str	r1, [r3, #0]
 801cf94:	681b      	ldr	r3, [r3, #0]
 801cf96:	4293      	cmp	r3, r2
 801cf98:	d0ae      	beq.n	801cef8 <ai_platform_network_destroy+0xd8>
 801cf9a:	e7fe      	b.n	801cf9a <ai_platform_network_destroy+0x17a>
 801cf9c:	4b17      	ldr	r3, [pc, #92]	; (801cffc <ai_platform_network_destroy+0x1dc>)
 801cf9e:	2201      	movs	r2, #1
 801cfa0:	4619      	mov	r1, r3
 801cfa2:	601a      	str	r2, [r3, #0]
 801cfa4:	680b      	ldr	r3, [r1, #0]
 801cfa6:	2b00      	cmp	r3, #0
 801cfa8:	d1fc      	bne.n	801cfa4 <ai_platform_network_destroy+0x184>
 801cfaa:	4b15      	ldr	r3, [pc, #84]	; (801d000 <ai_platform_network_destroy+0x1e0>)
 801cfac:	4911      	ldr	r1, [pc, #68]	; (801cff4 <ai_platform_network_destroy+0x1d4>)
 801cfae:	4a12      	ldr	r2, [pc, #72]	; (801cff8 <ai_platform_network_destroy+0x1d8>)
 801cfb0:	6019      	str	r1, [r3, #0]
 801cfb2:	681b      	ldr	r3, [r3, #0]
 801cfb4:	4293      	cmp	r3, r2
 801cfb6:	f43f af64 	beq.w	801ce82 <ai_platform_network_destroy+0x62>
 801cfba:	e7fe      	b.n	801cfba <ai_platform_network_destroy+0x19a>
 801cfbc:	4b0f      	ldr	r3, [pc, #60]	; (801cffc <ai_platform_network_destroy+0x1dc>)
 801cfbe:	2201      	movs	r2, #1
 801cfc0:	4619      	mov	r1, r3
 801cfc2:	601a      	str	r2, [r3, #0]
 801cfc4:	680b      	ldr	r3, [r1, #0]
 801cfc6:	2b00      	cmp	r3, #0
 801cfc8:	d1fc      	bne.n	801cfc4 <ai_platform_network_destroy+0x1a4>
 801cfca:	4b0d      	ldr	r3, [pc, #52]	; (801d000 <ai_platform_network_destroy+0x1e0>)
 801cfcc:	4909      	ldr	r1, [pc, #36]	; (801cff4 <ai_platform_network_destroy+0x1d4>)
 801cfce:	4a0a      	ldr	r2, [pc, #40]	; (801cff8 <ai_platform_network_destroy+0x1d8>)
 801cfd0:	6019      	str	r1, [r3, #0]
 801cfd2:	681b      	ldr	r3, [r3, #0]
 801cfd4:	4293      	cmp	r3, r2
 801cfd6:	f43f af54 	beq.w	801ce82 <ai_platform_network_destroy+0x62>
 801cfda:	e7fe      	b.n	801cfda <ai_platform_network_destroy+0x1ba>
 801cfdc:	a1c00100 	.word	0xa1c00100
 801cfe0:	e0002000 	.word	0xe0002000
 801cfe4:	e0042000 	.word	0xe0042000
 801cfe8:	5c001000 	.word	0x5c001000
 801cfec:	40023008 	.word	0x40023008
 801cff0:	40023000 	.word	0x40023000
 801cff4:	f407a5c2 	.word	0xf407a5c2
 801cff8:	b5e8b5cd 	.word	0xb5e8b5cd
 801cffc:	58024c08 	.word	0x58024c08
 801d000:	58024c00 	.word	0x58024c00

0801d004 <ai_platform_network_init>:
 801d004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d008:	2800      	cmp	r0, #0
 801d00a:	d05a      	beq.n	801d0c2 <ai_platform_network_init+0xbe>
 801d00c:	4ba7      	ldr	r3, [pc, #668]	; (801d2ac <ai_platform_network_init+0x2a8>)
 801d00e:	4604      	mov	r4, r0
 801d010:	6802      	ldr	r2, [r0, #0]
 801d012:	429a      	cmp	r2, r3
 801d014:	d155      	bne.n	801d0c2 <ai_platform_network_init+0xbe>
 801d016:	4aa6      	ldr	r2, [pc, #664]	; (801d2b0 <ai_platform_network_init+0x2ac>)
 801d018:	460d      	mov	r5, r1
 801d01a:	6813      	ldr	r3, [r2, #0]
 801d01c:	f023 0301 	bic.w	r3, r3, #1
 801d020:	6013      	str	r3, [r2, #0]
 801d022:	f7fe fdc5 	bl	801bbb0 <_ai_platform_acquire_crc>
 801d026:	4ba3      	ldr	r3, [pc, #652]	; (801d2b4 <ai_platform_network_init+0x2b0>)
 801d028:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801d02c:	681b      	ldr	r3, [r3, #0]
 801d02e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d032:	189a      	adds	r2, r3, r2
 801d034:	2a01      	cmp	r2, #1
 801d036:	d935      	bls.n	801d0a4 <ai_platform_network_init+0xa0>
 801d038:	f240 4249 	movw	r2, #1097	; 0x449
 801d03c:	4293      	cmp	r3, r2
 801d03e:	d031      	beq.n	801d0a4 <ai_platform_network_init+0xa0>
 801d040:	4b9d      	ldr	r3, [pc, #628]	; (801d2b8 <ai_platform_network_init+0x2b4>)
 801d042:	681a      	ldr	r2, [r3, #0]
 801d044:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801d048:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801d04c:	f000 8154 	beq.w	801d2f8 <ai_platform_network_init+0x2f4>
 801d050:	681a      	ldr	r2, [r3, #0]
 801d052:	f240 4183 	movw	r1, #1155	; 0x483
 801d056:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801d05a:	428a      	cmp	r2, r1
 801d05c:	f000 813c 	beq.w	801d2d8 <ai_platform_network_init+0x2d4>
 801d060:	681b      	ldr	r3, [r3, #0]
 801d062:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d066:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801d06a:	f000 8107 	beq.w	801d27c <ai_platform_network_init+0x278>
 801d06e:	f7fe fda1 	bl	801bbb4 <_ai_platform_release_crc>
 801d072:	2d00      	cmp	r5, #0
 801d074:	f000 8112 	beq.w	801d29c <ai_platform_network_init+0x298>
 801d078:	4b90      	ldr	r3, [pc, #576]	; (801d2bc <ai_platform_network_init+0x2b8>)
 801d07a:	682a      	ldr	r2, [r5, #0]
 801d07c:	429a      	cmp	r2, r3
 801d07e:	d14e      	bne.n	801d11e <ai_platform_network_init+0x11a>
 801d080:	6928      	ldr	r0, [r5, #16]
 801d082:	89ab      	ldrh	r3, [r5, #12]
 801d084:	89ee      	ldrh	r6, [r5, #14]
 801d086:	e9d5 2101 	ldrd	r2, r1, [r5, #4]
 801d08a:	62a0      	str	r0, [r4, #40]	; 0x28
 801d08c:	e9c4 2107 	strd	r2, r1, [r4, #28]
 801d090:	2203      	movs	r2, #3
 801d092:	84e6      	strh	r6, [r4, #38]	; 0x26
 801d094:	84a3      	strh	r3, [r4, #36]	; 0x24
 801d096:	4620      	mov	r0, r4
 801d098:	60e2      	str	r2, [r4, #12]
 801d09a:	f002 fed5 	bl	801fe48 <ai_layers_init_all>
 801d09e:	4620      	mov	r0, r4
 801d0a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d0a4:	4b86      	ldr	r3, [pc, #536]	; (801d2c0 <ai_platform_network_init+0x2bc>)
 801d0a6:	2201      	movs	r2, #1
 801d0a8:	4619      	mov	r1, r3
 801d0aa:	601a      	str	r2, [r3, #0]
 801d0ac:	680b      	ldr	r3, [r1, #0]
 801d0ae:	2b00      	cmp	r3, #0
 801d0b0:	d1fc      	bne.n	801d0ac <ai_platform_network_init+0xa8>
 801d0b2:	4b84      	ldr	r3, [pc, #528]	; (801d2c4 <ai_platform_network_init+0x2c0>)
 801d0b4:	4984      	ldr	r1, [pc, #528]	; (801d2c8 <ai_platform_network_init+0x2c4>)
 801d0b6:	4a85      	ldr	r2, [pc, #532]	; (801d2cc <ai_platform_network_init+0x2c8>)
 801d0b8:	6019      	str	r1, [r3, #0]
 801d0ba:	681b      	ldr	r3, [r3, #0]
 801d0bc:	4293      	cmp	r3, r2
 801d0be:	d0d6      	beq.n	801d06e <ai_platform_network_init+0x6a>
 801d0c0:	e7fe      	b.n	801d0c0 <ai_platform_network_init+0xbc>
 801d0c2:	4a7b      	ldr	r2, [pc, #492]	; (801d2b0 <ai_platform_network_init+0x2ac>)
 801d0c4:	6813      	ldr	r3, [r2, #0]
 801d0c6:	f023 0301 	bic.w	r3, r3, #1
 801d0ca:	6013      	str	r3, [r2, #0]
 801d0cc:	f7fe fd70 	bl	801bbb0 <_ai_platform_acquire_crc>
 801d0d0:	4b78      	ldr	r3, [pc, #480]	; (801d2b4 <ai_platform_network_init+0x2b0>)
 801d0d2:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801d0d6:	681b      	ldr	r3, [r3, #0]
 801d0d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d0dc:	185a      	adds	r2, r3, r1
 801d0de:	2a01      	cmp	r2, #1
 801d0e0:	d93f      	bls.n	801d162 <ai_platform_network_init+0x15e>
 801d0e2:	f240 4249 	movw	r2, #1097	; 0x449
 801d0e6:	4293      	cmp	r3, r2
 801d0e8:	d03b      	beq.n	801d162 <ai_platform_network_init+0x15e>
 801d0ea:	4b73      	ldr	r3, [pc, #460]	; (801d2b8 <ai_platform_network_init+0x2b4>)
 801d0ec:	681a      	ldr	r2, [r3, #0]
 801d0ee:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801d0f2:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801d0f6:	f000 80a5 	beq.w	801d244 <ai_platform_network_init+0x240>
 801d0fa:	681a      	ldr	r2, [r3, #0]
 801d0fc:	f240 4183 	movw	r1, #1155	; 0x483
 801d100:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801d104:	428a      	cmp	r2, r1
 801d106:	f000 808d 	beq.w	801d224 <ai_platform_network_init+0x220>
 801d10a:	681b      	ldr	r3, [r3, #0]
 801d10c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d110:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801d114:	d076      	beq.n	801d204 <ai_platform_network_init+0x200>
 801d116:	f7fe fd4d 	bl	801bbb4 <_ai_platform_release_crc>
 801d11a:	2000      	movs	r0, #0
 801d11c:	e7c0      	b.n	801d0a0 <ai_platform_network_init+0x9c>
 801d11e:	2101      	movs	r1, #1
 801d120:	4628      	mov	r0, r5
 801d122:	f105 081c 	add.w	r8, r5, #28
 801d126:	686f      	ldr	r7, [r5, #4]
 801d128:	f7fe fd08 	bl	801bb3c <ai_buffer_get_size>
 801d12c:	4681      	mov	r9, r0
 801d12e:	2101      	movs	r1, #1
 801d130:	4640      	mov	r0, r8
 801d132:	6a2e      	ldr	r6, [r5, #32]
 801d134:	f7fe fd02 	bl	801bb3c <ai_buffer_get_size>
 801d138:	f1b9 0f00 	cmp.w	r9, #0
 801d13c:	d020      	beq.n	801d180 <ai_platform_network_init+0x17c>
 801d13e:	2800      	cmp	r0, #0
 801d140:	f040 8090 	bne.w	801d264 <ai_platform_network_init+0x260>
 801d144:	4680      	mov	r8, r0
 801d146:	4606      	mov	r6, r0
 801d148:	2f00      	cmp	r7, #0
 801d14a:	f000 808f 	beq.w	801d26c <ai_platform_network_init+0x268>
 801d14e:	8be7      	ldrh	r7, [r4, #30]
 801d150:	bb7f      	cbnz	r7, 801d1b2 <ai_platform_network_init+0x1ae>
 801d152:	f104 0010 	add.w	r0, r4, #16
 801d156:	2212      	movs	r2, #18
 801d158:	2116      	movs	r1, #22
 801d15a:	f001 f845 	bl	801e1e8 <core_set_error>
 801d15e:	4638      	mov	r0, r7
 801d160:	e79e      	b.n	801d0a0 <ai_platform_network_init+0x9c>
 801d162:	4b57      	ldr	r3, [pc, #348]	; (801d2c0 <ai_platform_network_init+0x2bc>)
 801d164:	2201      	movs	r2, #1
 801d166:	4619      	mov	r1, r3
 801d168:	601a      	str	r2, [r3, #0]
 801d16a:	680b      	ldr	r3, [r1, #0]
 801d16c:	2b00      	cmp	r3, #0
 801d16e:	d1fc      	bne.n	801d16a <ai_platform_network_init+0x166>
 801d170:	4b54      	ldr	r3, [pc, #336]	; (801d2c4 <ai_platform_network_init+0x2c0>)
 801d172:	4955      	ldr	r1, [pc, #340]	; (801d2c8 <ai_platform_network_init+0x2c4>)
 801d174:	4a55      	ldr	r2, [pc, #340]	; (801d2cc <ai_platform_network_init+0x2c8>)
 801d176:	6019      	str	r1, [r3, #0]
 801d178:	681b      	ldr	r3, [r3, #0]
 801d17a:	4293      	cmp	r3, r2
 801d17c:	d0cb      	beq.n	801d116 <ai_platform_network_init+0x112>
 801d17e:	e7fe      	b.n	801d17e <ai_platform_network_init+0x17a>
 801d180:	b970      	cbnz	r0, 801d1a0 <ai_platform_network_init+0x19c>
 801d182:	4680      	mov	r8, r0
 801d184:	4606      	mov	r6, r0
 801d186:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801d188:	2200      	movs	r2, #0
 801d18a:	42b3      	cmp	r3, r6
 801d18c:	61e2      	str	r2, [r4, #28]
 801d18e:	d21e      	bcs.n	801d1ce <ai_platform_network_init+0x1ca>
 801d190:	f104 0010 	add.w	r0, r4, #16
 801d194:	2213      	movs	r2, #19
 801d196:	2116      	movs	r1, #22
 801d198:	f001 f826 	bl	801e1e8 <core_set_error>
 801d19c:	2000      	movs	r0, #0
 801d19e:	e77f      	b.n	801d0a0 <ai_platform_network_init+0x9c>
 801d1a0:	bb66      	cbnz	r6, 801d1fc <ai_platform_network_init+0x1f8>
 801d1a2:	f104 0010 	add.w	r0, r4, #16
 801d1a6:	2213      	movs	r2, #19
 801d1a8:	2110      	movs	r1, #16
 801d1aa:	f001 f81d 	bl	801e1e8 <core_set_error>
 801d1ae:	2000      	movs	r0, #0
 801d1b0:	e776      	b.n	801d0a0 <ai_platform_network_init+0x9c>
 801d1b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d1b4:	6a27      	ldr	r7, [r4, #32]
 801d1b6:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 801d1ba:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801d1bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d1c0:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801d1c4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801d1c6:	f8c4 c01c 	str.w	ip, [r4, #28]
 801d1ca:	42b3      	cmp	r3, r6
 801d1cc:	d3e0      	bcc.n	801d190 <ai_platform_network_init+0x18c>
 801d1ce:	b1be      	cbz	r6, 801d200 <ai_platform_network_init+0x1fc>
 801d1d0:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 801d1d4:	f04f 0e00 	mov.w	lr, #0
 801d1d8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801d1dc:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 801d1de:	eb08 070e 	add.w	r7, r8, lr
 801d1e2:	4475      	add	r5, lr
 801d1e4:	f10e 0e1c 	add.w	lr, lr, #28
 801d1e8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801d1ea:	45f4      	cmp	ip, lr
 801d1ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d1ee:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801d1f2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801d1f6:	d1f1      	bne.n	801d1dc <ai_platform_network_init+0x1d8>
 801d1f8:	2300      	movs	r3, #0
 801d1fa:	e749      	b.n	801d090 <ai_platform_network_init+0x8c>
 801d1fc:	2601      	movs	r6, #1
 801d1fe:	e7c2      	b.n	801d186 <ai_platform_network_init+0x182>
 801d200:	4633      	mov	r3, r6
 801d202:	e745      	b.n	801d090 <ai_platform_network_init+0x8c>
 801d204:	4b2e      	ldr	r3, [pc, #184]	; (801d2c0 <ai_platform_network_init+0x2bc>)
 801d206:	2201      	movs	r2, #1
 801d208:	4619      	mov	r1, r3
 801d20a:	601a      	str	r2, [r3, #0]
 801d20c:	680b      	ldr	r3, [r1, #0]
 801d20e:	2b00      	cmp	r3, #0
 801d210:	d1fc      	bne.n	801d20c <ai_platform_network_init+0x208>
 801d212:	4b2c      	ldr	r3, [pc, #176]	; (801d2c4 <ai_platform_network_init+0x2c0>)
 801d214:	492c      	ldr	r1, [pc, #176]	; (801d2c8 <ai_platform_network_init+0x2c4>)
 801d216:	4a2d      	ldr	r2, [pc, #180]	; (801d2cc <ai_platform_network_init+0x2c8>)
 801d218:	6019      	str	r1, [r3, #0]
 801d21a:	681b      	ldr	r3, [r3, #0]
 801d21c:	4293      	cmp	r3, r2
 801d21e:	f43f af7a 	beq.w	801d116 <ai_platform_network_init+0x112>
 801d222:	e7fe      	b.n	801d222 <ai_platform_network_init+0x21e>
 801d224:	4b2a      	ldr	r3, [pc, #168]	; (801d2d0 <ai_platform_network_init+0x2cc>)
 801d226:	2201      	movs	r2, #1
 801d228:	4619      	mov	r1, r3
 801d22a:	601a      	str	r2, [r3, #0]
 801d22c:	680b      	ldr	r3, [r1, #0]
 801d22e:	2b00      	cmp	r3, #0
 801d230:	d1fc      	bne.n	801d22c <ai_platform_network_init+0x228>
 801d232:	4b28      	ldr	r3, [pc, #160]	; (801d2d4 <ai_platform_network_init+0x2d0>)
 801d234:	4924      	ldr	r1, [pc, #144]	; (801d2c8 <ai_platform_network_init+0x2c4>)
 801d236:	4a25      	ldr	r2, [pc, #148]	; (801d2cc <ai_platform_network_init+0x2c8>)
 801d238:	6019      	str	r1, [r3, #0]
 801d23a:	681b      	ldr	r3, [r3, #0]
 801d23c:	4293      	cmp	r3, r2
 801d23e:	f43f af6a 	beq.w	801d116 <ai_platform_network_init+0x112>
 801d242:	e7fe      	b.n	801d242 <ai_platform_network_init+0x23e>
 801d244:	4b22      	ldr	r3, [pc, #136]	; (801d2d0 <ai_platform_network_init+0x2cc>)
 801d246:	2201      	movs	r2, #1
 801d248:	4619      	mov	r1, r3
 801d24a:	601a      	str	r2, [r3, #0]
 801d24c:	680b      	ldr	r3, [r1, #0]
 801d24e:	2b00      	cmp	r3, #0
 801d250:	d1fc      	bne.n	801d24c <ai_platform_network_init+0x248>
 801d252:	4b20      	ldr	r3, [pc, #128]	; (801d2d4 <ai_platform_network_init+0x2d0>)
 801d254:	491c      	ldr	r1, [pc, #112]	; (801d2c8 <ai_platform_network_init+0x2c4>)
 801d256:	4a1d      	ldr	r2, [pc, #116]	; (801d2cc <ai_platform_network_init+0x2c8>)
 801d258:	6019      	str	r1, [r3, #0]
 801d25a:	681b      	ldr	r3, [r3, #0]
 801d25c:	4293      	cmp	r3, r2
 801d25e:	f43f af5a 	beq.w	801d116 <ai_platform_network_init+0x112>
 801d262:	e7fe      	b.n	801d262 <ai_platform_network_init+0x25e>
 801d264:	2e00      	cmp	r6, #0
 801d266:	d09c      	beq.n	801d1a2 <ai_platform_network_init+0x19e>
 801d268:	2601      	movs	r6, #1
 801d26a:	e76d      	b.n	801d148 <ai_platform_network_init+0x144>
 801d26c:	f104 0010 	add.w	r0, r4, #16
 801d270:	2212      	movs	r2, #18
 801d272:	2110      	movs	r1, #16
 801d274:	f000 ffb8 	bl	801e1e8 <core_set_error>
 801d278:	4638      	mov	r0, r7
 801d27a:	e711      	b.n	801d0a0 <ai_platform_network_init+0x9c>
 801d27c:	4b10      	ldr	r3, [pc, #64]	; (801d2c0 <ai_platform_network_init+0x2bc>)
 801d27e:	2201      	movs	r2, #1
 801d280:	4619      	mov	r1, r3
 801d282:	601a      	str	r2, [r3, #0]
 801d284:	680b      	ldr	r3, [r1, #0]
 801d286:	2b00      	cmp	r3, #0
 801d288:	d1fc      	bne.n	801d284 <ai_platform_network_init+0x280>
 801d28a:	4b0e      	ldr	r3, [pc, #56]	; (801d2c4 <ai_platform_network_init+0x2c0>)
 801d28c:	490e      	ldr	r1, [pc, #56]	; (801d2c8 <ai_platform_network_init+0x2c4>)
 801d28e:	4a0f      	ldr	r2, [pc, #60]	; (801d2cc <ai_platform_network_init+0x2c8>)
 801d290:	6019      	str	r1, [r3, #0]
 801d292:	681b      	ldr	r3, [r3, #0]
 801d294:	4293      	cmp	r3, r2
 801d296:	f43f aeea 	beq.w	801d06e <ai_platform_network_init+0x6a>
 801d29a:	e7fe      	b.n	801d29a <ai_platform_network_init+0x296>
 801d29c:	f104 0010 	add.w	r0, r4, #16
 801d2a0:	2211      	movs	r2, #17
 801d2a2:	2110      	movs	r1, #16
 801d2a4:	f000 ffa0 	bl	801e1e8 <core_set_error>
 801d2a8:	4628      	mov	r0, r5
 801d2aa:	e6f9      	b.n	801d0a0 <ai_platform_network_init+0x9c>
 801d2ac:	a1c00100 	.word	0xa1c00100
 801d2b0:	e0002000 	.word	0xe0002000
 801d2b4:	e0042000 	.word	0xe0042000
 801d2b8:	5c001000 	.word	0x5c001000
 801d2bc:	a1facade 	.word	0xa1facade
 801d2c0:	40023008 	.word	0x40023008
 801d2c4:	40023000 	.word	0x40023000
 801d2c8:	f407a5c2 	.word	0xf407a5c2
 801d2cc:	b5e8b5cd 	.word	0xb5e8b5cd
 801d2d0:	58024c08 	.word	0x58024c08
 801d2d4:	58024c00 	.word	0x58024c00
 801d2d8:	4b0f      	ldr	r3, [pc, #60]	; (801d318 <ai_platform_network_init+0x314>)
 801d2da:	2201      	movs	r2, #1
 801d2dc:	4619      	mov	r1, r3
 801d2de:	601a      	str	r2, [r3, #0]
 801d2e0:	680b      	ldr	r3, [r1, #0]
 801d2e2:	2b00      	cmp	r3, #0
 801d2e4:	d1fc      	bne.n	801d2e0 <ai_platform_network_init+0x2dc>
 801d2e6:	4b0d      	ldr	r3, [pc, #52]	; (801d31c <ai_platform_network_init+0x318>)
 801d2e8:	490d      	ldr	r1, [pc, #52]	; (801d320 <ai_platform_network_init+0x31c>)
 801d2ea:	4a0e      	ldr	r2, [pc, #56]	; (801d324 <ai_platform_network_init+0x320>)
 801d2ec:	6019      	str	r1, [r3, #0]
 801d2ee:	681b      	ldr	r3, [r3, #0]
 801d2f0:	4293      	cmp	r3, r2
 801d2f2:	f43f aebc 	beq.w	801d06e <ai_platform_network_init+0x6a>
 801d2f6:	e7fe      	b.n	801d2f6 <ai_platform_network_init+0x2f2>
 801d2f8:	4b07      	ldr	r3, [pc, #28]	; (801d318 <ai_platform_network_init+0x314>)
 801d2fa:	2201      	movs	r2, #1
 801d2fc:	4619      	mov	r1, r3
 801d2fe:	601a      	str	r2, [r3, #0]
 801d300:	680b      	ldr	r3, [r1, #0]
 801d302:	2b00      	cmp	r3, #0
 801d304:	d1fc      	bne.n	801d300 <ai_platform_network_init+0x2fc>
 801d306:	4b05      	ldr	r3, [pc, #20]	; (801d31c <ai_platform_network_init+0x318>)
 801d308:	4905      	ldr	r1, [pc, #20]	; (801d320 <ai_platform_network_init+0x31c>)
 801d30a:	4a06      	ldr	r2, [pc, #24]	; (801d324 <ai_platform_network_init+0x320>)
 801d30c:	6019      	str	r1, [r3, #0]
 801d30e:	681b      	ldr	r3, [r3, #0]
 801d310:	4293      	cmp	r3, r2
 801d312:	f43f aeac 	beq.w	801d06e <ai_platform_network_init+0x6a>
 801d316:	e7fe      	b.n	801d316 <ai_platform_network_init+0x312>
 801d318:	58024c08 	.word	0x58024c08
 801d31c:	58024c00 	.word	0x58024c00
 801d320:	f407a5c2 	.word	0xf407a5c2
 801d324:	b5e8b5cd 	.word	0xb5e8b5cd

0801d328 <ai_platform_network_post_init>:
 801d328:	b538      	push	{r3, r4, r5, lr}
 801d32a:	b120      	cbz	r0, 801d336 <ai_platform_network_post_init+0xe>
 801d32c:	4b7f      	ldr	r3, [pc, #508]	; (801d52c <ai_platform_network_post_init+0x204>)
 801d32e:	4604      	mov	r4, r0
 801d330:	6802      	ldr	r2, [r0, #0]
 801d332:	429a      	cmp	r2, r3
 801d334:	d03c      	beq.n	801d3b0 <ai_platform_network_post_init+0x88>
 801d336:	4a7e      	ldr	r2, [pc, #504]	; (801d530 <ai_platform_network_post_init+0x208>)
 801d338:	6813      	ldr	r3, [r2, #0]
 801d33a:	f023 0301 	bic.w	r3, r3, #1
 801d33e:	6013      	str	r3, [r2, #0]
 801d340:	f7fe fc36 	bl	801bbb0 <_ai_platform_acquire_crc>
 801d344:	4b7b      	ldr	r3, [pc, #492]	; (801d534 <ai_platform_network_post_init+0x20c>)
 801d346:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801d34a:	681b      	ldr	r3, [r3, #0]
 801d34c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d350:	185a      	adds	r2, r3, r1
 801d352:	2a01      	cmp	r2, #1
 801d354:	d91d      	bls.n	801d392 <ai_platform_network_post_init+0x6a>
 801d356:	f240 4249 	movw	r2, #1097	; 0x449
 801d35a:	4293      	cmp	r3, r2
 801d35c:	d019      	beq.n	801d392 <ai_platform_network_post_init+0x6a>
 801d35e:	4b76      	ldr	r3, [pc, #472]	; (801d538 <ai_platform_network_post_init+0x210>)
 801d360:	681a      	ldr	r2, [r3, #0]
 801d362:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801d366:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801d36a:	f000 80a7 	beq.w	801d4bc <ai_platform_network_post_init+0x194>
 801d36e:	681a      	ldr	r2, [r3, #0]
 801d370:	f240 4183 	movw	r1, #1155	; 0x483
 801d374:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801d378:	428a      	cmp	r2, r1
 801d37a:	f000 808f 	beq.w	801d49c <ai_platform_network_post_init+0x174>
 801d37e:	681b      	ldr	r3, [r3, #0]
 801d380:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d384:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801d388:	d05b      	beq.n	801d442 <ai_platform_network_post_init+0x11a>
 801d38a:	f7fe fc13 	bl	801bbb4 <_ai_platform_release_crc>
 801d38e:	2000      	movs	r0, #0
 801d390:	bd38      	pop	{r3, r4, r5, pc}
 801d392:	4b6a      	ldr	r3, [pc, #424]	; (801d53c <ai_platform_network_post_init+0x214>)
 801d394:	2201      	movs	r2, #1
 801d396:	4619      	mov	r1, r3
 801d398:	601a      	str	r2, [r3, #0]
 801d39a:	680b      	ldr	r3, [r1, #0]
 801d39c:	2b00      	cmp	r3, #0
 801d39e:	d1fc      	bne.n	801d39a <ai_platform_network_post_init+0x72>
 801d3a0:	4b67      	ldr	r3, [pc, #412]	; (801d540 <ai_platform_network_post_init+0x218>)
 801d3a2:	4968      	ldr	r1, [pc, #416]	; (801d544 <ai_platform_network_post_init+0x21c>)
 801d3a4:	4a68      	ldr	r2, [pc, #416]	; (801d548 <ai_platform_network_post_init+0x220>)
 801d3a6:	6019      	str	r1, [r3, #0]
 801d3a8:	681b      	ldr	r3, [r3, #0]
 801d3aa:	4293      	cmp	r3, r2
 801d3ac:	d0ed      	beq.n	801d38a <ai_platform_network_post_init+0x62>
 801d3ae:	e7fe      	b.n	801d3ae <ai_platform_network_post_init+0x86>
 801d3b0:	4a5f      	ldr	r2, [pc, #380]	; (801d530 <ai_platform_network_post_init+0x208>)
 801d3b2:	6813      	ldr	r3, [r2, #0]
 801d3b4:	f023 0301 	bic.w	r3, r3, #1
 801d3b8:	6013      	str	r3, [r2, #0]
 801d3ba:	f7fe fbf9 	bl	801bbb0 <_ai_platform_acquire_crc>
 801d3be:	4b5d      	ldr	r3, [pc, #372]	; (801d534 <ai_platform_network_post_init+0x20c>)
 801d3c0:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801d3c4:	681b      	ldr	r3, [r3, #0]
 801d3c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d3ca:	189a      	adds	r2, r3, r2
 801d3cc:	2a01      	cmp	r2, #1
 801d3ce:	d956      	bls.n	801d47e <ai_platform_network_post_init+0x156>
 801d3d0:	f240 4249 	movw	r2, #1097	; 0x449
 801d3d4:	4293      	cmp	r3, r2
 801d3d6:	d052      	beq.n	801d47e <ai_platform_network_post_init+0x156>
 801d3d8:	4b57      	ldr	r3, [pc, #348]	; (801d538 <ai_platform_network_post_init+0x210>)
 801d3da:	681a      	ldr	r2, [r3, #0]
 801d3dc:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801d3e0:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801d3e4:	d03c      	beq.n	801d460 <ai_platform_network_post_init+0x138>
 801d3e6:	681a      	ldr	r2, [r3, #0]
 801d3e8:	f240 4183 	movw	r1, #1155	; 0x483
 801d3ec:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801d3f0:	428a      	cmp	r2, r1
 801d3f2:	f000 8082 	beq.w	801d4fa <ai_platform_network_post_init+0x1d2>
 801d3f6:	681b      	ldr	r3, [r3, #0]
 801d3f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d3fc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801d400:	d06c      	beq.n	801d4dc <ai_platform_network_post_init+0x1b4>
 801d402:	f7fe fbd7 	bl	801bbb4 <_ai_platform_release_crc>
 801d406:	68e3      	ldr	r3, [r4, #12]
 801d408:	f013 0502 	ands.w	r5, r3, #2
 801d40c:	f000 8085 	beq.w	801d51a <ai_platform_network_post_init+0x1f2>
 801d410:	4620      	mov	r0, r4
 801d412:	f002 fd2d 	bl	801fe70 <ai_layers_post_init_all>
 801d416:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d418:	b18b      	cbz	r3, 801d43e <ai_platform_network_post_init+0x116>
 801d41a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 801d41c:	b90d      	cbnz	r5, 801d422 <ai_platform_network_post_init+0xfa>
 801d41e:	e00e      	b.n	801d43e <ai_platform_network_post_init+0x116>
 801d420:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d422:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801d424:	4629      	mov	r1, r5
 801d426:	2000      	movs	r0, #0
 801d428:	4798      	blx	r3
 801d42a:	692a      	ldr	r2, [r5, #16]
 801d42c:	1b53      	subs	r3, r2, r5
 801d42e:	4615      	mov	r5, r2
 801d430:	bf18      	it	ne
 801d432:	2301      	movne	r3, #1
 801d434:	2a00      	cmp	r2, #0
 801d436:	bf08      	it	eq
 801d438:	2300      	moveq	r3, #0
 801d43a:	2b00      	cmp	r3, #0
 801d43c:	d1f0      	bne.n	801d420 <ai_platform_network_post_init+0xf8>
 801d43e:	2001      	movs	r0, #1
 801d440:	bd38      	pop	{r3, r4, r5, pc}
 801d442:	4b3e      	ldr	r3, [pc, #248]	; (801d53c <ai_platform_network_post_init+0x214>)
 801d444:	2201      	movs	r2, #1
 801d446:	4619      	mov	r1, r3
 801d448:	601a      	str	r2, [r3, #0]
 801d44a:	680b      	ldr	r3, [r1, #0]
 801d44c:	2b00      	cmp	r3, #0
 801d44e:	d1fc      	bne.n	801d44a <ai_platform_network_post_init+0x122>
 801d450:	4b3b      	ldr	r3, [pc, #236]	; (801d540 <ai_platform_network_post_init+0x218>)
 801d452:	493c      	ldr	r1, [pc, #240]	; (801d544 <ai_platform_network_post_init+0x21c>)
 801d454:	4a3c      	ldr	r2, [pc, #240]	; (801d548 <ai_platform_network_post_init+0x220>)
 801d456:	6019      	str	r1, [r3, #0]
 801d458:	681b      	ldr	r3, [r3, #0]
 801d45a:	4293      	cmp	r3, r2
 801d45c:	d095      	beq.n	801d38a <ai_platform_network_post_init+0x62>
 801d45e:	e7fe      	b.n	801d45e <ai_platform_network_post_init+0x136>
 801d460:	4b3a      	ldr	r3, [pc, #232]	; (801d54c <ai_platform_network_post_init+0x224>)
 801d462:	2201      	movs	r2, #1
 801d464:	4619      	mov	r1, r3
 801d466:	601a      	str	r2, [r3, #0]
 801d468:	680b      	ldr	r3, [r1, #0]
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	d1fc      	bne.n	801d468 <ai_platform_network_post_init+0x140>
 801d46e:	4b38      	ldr	r3, [pc, #224]	; (801d550 <ai_platform_network_post_init+0x228>)
 801d470:	4934      	ldr	r1, [pc, #208]	; (801d544 <ai_platform_network_post_init+0x21c>)
 801d472:	4a35      	ldr	r2, [pc, #212]	; (801d548 <ai_platform_network_post_init+0x220>)
 801d474:	6019      	str	r1, [r3, #0]
 801d476:	681b      	ldr	r3, [r3, #0]
 801d478:	4293      	cmp	r3, r2
 801d47a:	d0c2      	beq.n	801d402 <ai_platform_network_post_init+0xda>
 801d47c:	e7fe      	b.n	801d47c <ai_platform_network_post_init+0x154>
 801d47e:	4b2f      	ldr	r3, [pc, #188]	; (801d53c <ai_platform_network_post_init+0x214>)
 801d480:	2201      	movs	r2, #1
 801d482:	4619      	mov	r1, r3
 801d484:	601a      	str	r2, [r3, #0]
 801d486:	680b      	ldr	r3, [r1, #0]
 801d488:	2b00      	cmp	r3, #0
 801d48a:	d1fc      	bne.n	801d486 <ai_platform_network_post_init+0x15e>
 801d48c:	4b2c      	ldr	r3, [pc, #176]	; (801d540 <ai_platform_network_post_init+0x218>)
 801d48e:	492d      	ldr	r1, [pc, #180]	; (801d544 <ai_platform_network_post_init+0x21c>)
 801d490:	4a2d      	ldr	r2, [pc, #180]	; (801d548 <ai_platform_network_post_init+0x220>)
 801d492:	6019      	str	r1, [r3, #0]
 801d494:	681b      	ldr	r3, [r3, #0]
 801d496:	4293      	cmp	r3, r2
 801d498:	d0b3      	beq.n	801d402 <ai_platform_network_post_init+0xda>
 801d49a:	e7fe      	b.n	801d49a <ai_platform_network_post_init+0x172>
 801d49c:	4b2b      	ldr	r3, [pc, #172]	; (801d54c <ai_platform_network_post_init+0x224>)
 801d49e:	2201      	movs	r2, #1
 801d4a0:	4619      	mov	r1, r3
 801d4a2:	601a      	str	r2, [r3, #0]
 801d4a4:	680b      	ldr	r3, [r1, #0]
 801d4a6:	2b00      	cmp	r3, #0
 801d4a8:	d1fc      	bne.n	801d4a4 <ai_platform_network_post_init+0x17c>
 801d4aa:	4b29      	ldr	r3, [pc, #164]	; (801d550 <ai_platform_network_post_init+0x228>)
 801d4ac:	4925      	ldr	r1, [pc, #148]	; (801d544 <ai_platform_network_post_init+0x21c>)
 801d4ae:	4a26      	ldr	r2, [pc, #152]	; (801d548 <ai_platform_network_post_init+0x220>)
 801d4b0:	6019      	str	r1, [r3, #0]
 801d4b2:	681b      	ldr	r3, [r3, #0]
 801d4b4:	4293      	cmp	r3, r2
 801d4b6:	f43f af68 	beq.w	801d38a <ai_platform_network_post_init+0x62>
 801d4ba:	e7fe      	b.n	801d4ba <ai_platform_network_post_init+0x192>
 801d4bc:	4b23      	ldr	r3, [pc, #140]	; (801d54c <ai_platform_network_post_init+0x224>)
 801d4be:	2201      	movs	r2, #1
 801d4c0:	4619      	mov	r1, r3
 801d4c2:	601a      	str	r2, [r3, #0]
 801d4c4:	680b      	ldr	r3, [r1, #0]
 801d4c6:	2b00      	cmp	r3, #0
 801d4c8:	d1fc      	bne.n	801d4c4 <ai_platform_network_post_init+0x19c>
 801d4ca:	4b21      	ldr	r3, [pc, #132]	; (801d550 <ai_platform_network_post_init+0x228>)
 801d4cc:	491d      	ldr	r1, [pc, #116]	; (801d544 <ai_platform_network_post_init+0x21c>)
 801d4ce:	4a1e      	ldr	r2, [pc, #120]	; (801d548 <ai_platform_network_post_init+0x220>)
 801d4d0:	6019      	str	r1, [r3, #0]
 801d4d2:	681b      	ldr	r3, [r3, #0]
 801d4d4:	4293      	cmp	r3, r2
 801d4d6:	f43f af58 	beq.w	801d38a <ai_platform_network_post_init+0x62>
 801d4da:	e7fe      	b.n	801d4da <ai_platform_network_post_init+0x1b2>
 801d4dc:	4b17      	ldr	r3, [pc, #92]	; (801d53c <ai_platform_network_post_init+0x214>)
 801d4de:	2201      	movs	r2, #1
 801d4e0:	4619      	mov	r1, r3
 801d4e2:	601a      	str	r2, [r3, #0]
 801d4e4:	680b      	ldr	r3, [r1, #0]
 801d4e6:	2b00      	cmp	r3, #0
 801d4e8:	d1fc      	bne.n	801d4e4 <ai_platform_network_post_init+0x1bc>
 801d4ea:	4b15      	ldr	r3, [pc, #84]	; (801d540 <ai_platform_network_post_init+0x218>)
 801d4ec:	4915      	ldr	r1, [pc, #84]	; (801d544 <ai_platform_network_post_init+0x21c>)
 801d4ee:	4a16      	ldr	r2, [pc, #88]	; (801d548 <ai_platform_network_post_init+0x220>)
 801d4f0:	6019      	str	r1, [r3, #0]
 801d4f2:	681b      	ldr	r3, [r3, #0]
 801d4f4:	4293      	cmp	r3, r2
 801d4f6:	d084      	beq.n	801d402 <ai_platform_network_post_init+0xda>
 801d4f8:	e7fe      	b.n	801d4f8 <ai_platform_network_post_init+0x1d0>
 801d4fa:	4b14      	ldr	r3, [pc, #80]	; (801d54c <ai_platform_network_post_init+0x224>)
 801d4fc:	2201      	movs	r2, #1
 801d4fe:	4619      	mov	r1, r3
 801d500:	601a      	str	r2, [r3, #0]
 801d502:	680b      	ldr	r3, [r1, #0]
 801d504:	2b00      	cmp	r3, #0
 801d506:	d1fc      	bne.n	801d502 <ai_platform_network_post_init+0x1da>
 801d508:	4b11      	ldr	r3, [pc, #68]	; (801d550 <ai_platform_network_post_init+0x228>)
 801d50a:	490e      	ldr	r1, [pc, #56]	; (801d544 <ai_platform_network_post_init+0x21c>)
 801d50c:	4a0e      	ldr	r2, [pc, #56]	; (801d548 <ai_platform_network_post_init+0x220>)
 801d50e:	6019      	str	r1, [r3, #0]
 801d510:	681b      	ldr	r3, [r3, #0]
 801d512:	4293      	cmp	r3, r2
 801d514:	f43f af75 	beq.w	801d402 <ai_platform_network_post_init+0xda>
 801d518:	e7fe      	b.n	801d518 <ai_platform_network_post_init+0x1f0>
 801d51a:	f104 0010 	add.w	r0, r4, #16
 801d51e:	2210      	movs	r2, #16
 801d520:	2111      	movs	r1, #17
 801d522:	f000 fe61 	bl	801e1e8 <core_set_error>
 801d526:	4628      	mov	r0, r5
 801d528:	bd38      	pop	{r3, r4, r5, pc}
 801d52a:	bf00      	nop
 801d52c:	a1c00100 	.word	0xa1c00100
 801d530:	e0002000 	.word	0xe0002000
 801d534:	e0042000 	.word	0xe0042000
 801d538:	5c001000 	.word	0x5c001000
 801d53c:	40023008 	.word	0x40023008
 801d540:	40023000 	.word	0x40023000
 801d544:	f407a5c2 	.word	0xf407a5c2
 801d548:	b5e8b5cd 	.word	0xb5e8b5cd
 801d54c:	58024c08 	.word	0x58024c08
 801d550:	58024c00 	.word	0x58024c00

0801d554 <ai_platform_network_process>:
 801d554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d558:	460f      	mov	r7, r1
 801d55a:	b083      	sub	sp, #12
 801d55c:	4615      	mov	r5, r2
 801d55e:	4604      	mov	r4, r0
 801d560:	b120      	cbz	r0, 801d56c <ai_platform_network_process+0x18>
 801d562:	4ba8      	ldr	r3, [pc, #672]	; (801d804 <ai_platform_network_process+0x2b0>)
 801d564:	6802      	ldr	r2, [r0, #0]
 801d566:	429a      	cmp	r2, r3
 801d568:	bf18      	it	ne
 801d56a:	2400      	movne	r4, #0
 801d56c:	4aa6      	ldr	r2, [pc, #664]	; (801d808 <ai_platform_network_process+0x2b4>)
 801d56e:	6813      	ldr	r3, [r2, #0]
 801d570:	f023 0301 	bic.w	r3, r3, #1
 801d574:	6013      	str	r3, [r2, #0]
 801d576:	f7fe fb1b 	bl	801bbb0 <_ai_platform_acquire_crc>
 801d57a:	4ba4      	ldr	r3, [pc, #656]	; (801d80c <ai_platform_network_process+0x2b8>)
 801d57c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801d580:	681b      	ldr	r3, [r3, #0]
 801d582:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d586:	185a      	adds	r2, r3, r1
 801d588:	2a01      	cmp	r2, #1
 801d58a:	f240 80d3 	bls.w	801d734 <ai_platform_network_process+0x1e0>
 801d58e:	f240 4249 	movw	r2, #1097	; 0x449
 801d592:	4293      	cmp	r3, r2
 801d594:	f000 80ce 	beq.w	801d734 <ai_platform_network_process+0x1e0>
 801d598:	4b9d      	ldr	r3, [pc, #628]	; (801d810 <ai_platform_network_process+0x2bc>)
 801d59a:	681a      	ldr	r2, [r3, #0]
 801d59c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801d5a0:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801d5a4:	f000 80e4 	beq.w	801d770 <ai_platform_network_process+0x21c>
 801d5a8:	681a      	ldr	r2, [r3, #0]
 801d5aa:	f240 4183 	movw	r1, #1155	; 0x483
 801d5ae:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801d5b2:	428a      	cmp	r2, r1
 801d5b4:	f000 8104 	beq.w	801d7c0 <ai_platform_network_process+0x26c>
 801d5b8:	681b      	ldr	r3, [r3, #0]
 801d5ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d5be:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801d5c2:	f000 80ed 	beq.w	801d7a0 <ai_platform_network_process+0x24c>
 801d5c6:	f7fe faf5 	bl	801bbb4 <_ai_platform_release_crc>
 801d5ca:	2c00      	cmp	r4, #0
 801d5cc:	f000 80cb 	beq.w	801d766 <ai_platform_network_process+0x212>
 801d5d0:	68e2      	ldr	r2, [r4, #12]
 801d5d2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 801d5d4:	f002 0203 	and.w	r2, r2, #3
 801d5d8:	2b00      	cmp	r3, #0
 801d5da:	f000 80bb 	beq.w	801d754 <ai_platform_network_process+0x200>
 801d5de:	2100      	movs	r1, #0
 801d5e0:	2a03      	cmp	r2, #3
 801d5e2:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801d5e6:	6161      	str	r1, [r4, #20]
 801d5e8:	f040 80b7 	bne.w	801d75a <ai_platform_network_process+0x206>
 801d5ec:	2f00      	cmp	r7, #0
 801d5ee:	f000 80cf 	beq.w	801d790 <ai_platform_network_process+0x23c>
 801d5f2:	faba f28a 	clz	r2, sl
 801d5f6:	0952      	lsrs	r2, r2, #5
 801d5f8:	2a00      	cmp	r2, #0
 801d5fa:	f040 80c9 	bne.w	801d790 <ai_platform_network_process+0x23c>
 801d5fe:	f8ba 1000 	ldrh.w	r1, [sl]
 801d602:	2900      	cmp	r1, #0
 801d604:	f000 80c4 	beq.w	801d790 <ai_platform_network_process+0x23c>
 801d608:	69b8      	ldr	r0, [r7, #24]
 801d60a:	f8da 1004 	ldr.w	r1, [sl, #4]
 801d60e:	6806      	ldr	r6, [r0, #0]
 801d610:	2900      	cmp	r1, #0
 801d612:	f000 810c 	beq.w	801d82e <ai_platform_network_process+0x2da>
 801d616:	f8d1 9000 	ldr.w	r9, [r1]
 801d61a:	f1b9 0f00 	cmp.w	r9, #0
 801d61e:	f000 8106 	beq.w	801d82e <ai_platform_network_process+0x2da>
 801d622:	f8da 3008 	ldr.w	r3, [sl, #8]
 801d626:	4690      	mov	r8, r2
 801d628:	f8d3 b000 	ldr.w	fp, [r3]
 801d62c:	f1bb 0f00 	cmp.w	fp, #0
 801d630:	d16d      	bne.n	801d70e <ai_platform_network_process+0x1ba>
 801d632:	e0ad      	b.n	801d790 <ai_platform_network_process+0x23c>
 801d634:	f8d9 000c 	ldr.w	r0, [r9, #12]
 801d638:	69b9      	ldr	r1, [r7, #24]
 801d63a:	68c2      	ldr	r2, [r0, #12]
 801d63c:	68cb      	ldr	r3, [r1, #12]
 801d63e:	429a      	cmp	r2, r3
 801d640:	d170      	bne.n	801d724 <ai_platform_network_process+0x1d0>
 801d642:	6882      	ldr	r2, [r0, #8]
 801d644:	688b      	ldr	r3, [r1, #8]
 801d646:	429a      	cmp	r2, r3
 801d648:	d16c      	bne.n	801d724 <ai_platform_network_process+0x1d0>
 801d64a:	6842      	ldr	r2, [r0, #4]
 801d64c:	684b      	ldr	r3, [r1, #4]
 801d64e:	429a      	cmp	r2, r3
 801d650:	d168      	bne.n	801d724 <ai_platform_network_process+0x1d0>
 801d652:	f8d9 3018 	ldr.w	r3, [r9, #24]
 801d656:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d65a:	f007 ffd9 	bl	8025610 <ai_array_get_data_byte_size>
 801d65e:	9000      	str	r0, [sp, #0]
 801d660:	4648      	mov	r0, r9
 801d662:	f007 ff67 	bl	8025534 <get_tensor_byte_size>
 801d666:	9b00      	ldr	r3, [sp, #0]
 801d668:	4283      	cmp	r3, r0
 801d66a:	d35b      	bcc.n	801d724 <ai_platform_network_process+0x1d0>
 801d66c:	f8d9 3018 	ldr.w	r3, [r9, #24]
 801d670:	6818      	ldr	r0, [r3, #0]
 801d672:	f007 ff77 	bl	8025564 <ai_array_to_buffer_fmt>
 801d676:	683b      	ldr	r3, [r7, #0]
 801d678:	4043      	eors	r3, r0
 801d67a:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 801d67e:	f040 823c 	bne.w	801dafa <ai_platform_network_process+0x5a6>
 801d682:	687b      	ldr	r3, [r7, #4]
 801d684:	2b00      	cmp	r3, #0
 801d686:	f000 80b4 	beq.w	801d7f2 <ai_platform_network_process+0x29e>
 801d68a:	69bb      	ldr	r3, [r7, #24]
 801d68c:	681b      	ldr	r3, [r3, #0]
 801d68e:	2b00      	cmp	r3, #0
 801d690:	f000 80a6 	beq.w	801d7e0 <ai_platform_network_process+0x28c>
 801d694:	429e      	cmp	r6, r3
 801d696:	4648      	mov	r0, r9
 801d698:	bf38      	it	cc
 801d69a:	461e      	movcc	r6, r3
 801d69c:	f007 ff4a 	bl	8025534 <get_tensor_byte_size>
 801d6a0:	f8cb 0008 	str.w	r0, [fp, #8]
 801d6a4:	69bb      	ldr	r3, [r7, #24]
 801d6a6:	681a      	ldr	r2, [r3, #0]
 801d6a8:	fb02 f200 	mul.w	r2, r2, r0
 801d6ac:	f8cb 200c 	str.w	r2, [fp, #12]
 801d6b0:	6878      	ldr	r0, [r7, #4]
 801d6b2:	f8cb 0004 	str.w	r0, [fp, #4]
 801d6b6:	687b      	ldr	r3, [r7, #4]
 801d6b8:	4413      	add	r3, r2
 801d6ba:	f8cb 3000 	str.w	r3, [fp]
 801d6be:	f8d9 1018 	ldr.w	r1, [r9, #24]
 801d6c2:	680b      	ldr	r3, [r1, #0]
 801d6c4:	009a      	lsls	r2, r3, #2
 801d6c6:	d409      	bmi.n	801d6dc <ai_platform_network_process+0x188>
 801d6c8:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 801d6cc:	1a9b      	subs	r3, r3, r2
 801d6ce:	4418      	add	r0, r3
 801d6d0:	6088      	str	r0, [r1, #8]
 801d6d2:	f8d9 3018 	ldr.w	r3, [r9, #24]
 801d6d6:	f8db 2004 	ldr.w	r2, [fp, #4]
 801d6da:	60da      	str	r2, [r3, #12]
 801d6dc:	f108 0801 	add.w	r8, r8, #1
 801d6e0:	f8ba 3000 	ldrh.w	r3, [sl]
 801d6e4:	4598      	cmp	r8, r3
 801d6e6:	f080 80a1 	bcs.w	801d82c <ai_platform_network_process+0x2d8>
 801d6ea:	f8da 3004 	ldr.w	r3, [sl, #4]
 801d6ee:	2b00      	cmp	r3, #0
 801d6f0:	f000 809c 	beq.w	801d82c <ai_platform_network_process+0x2d8>
 801d6f4:	f853 9028 	ldr.w	r9, [r3, r8, lsl #2]
 801d6f8:	f1b9 0f00 	cmp.w	r9, #0
 801d6fc:	f000 8096 	beq.w	801d82c <ai_platform_network_process+0x2d8>
 801d700:	f8da 3008 	ldr.w	r3, [sl, #8]
 801d704:	371c      	adds	r7, #28
 801d706:	681b      	ldr	r3, [r3, #0]
 801d708:	eb13 1b08 	adds.w	fp, r3, r8, lsl #4
 801d70c:	d040      	beq.n	801d790 <ai_platform_network_process+0x23c>
 801d70e:	f8d9 3018 	ldr.w	r3, [r9, #24]
 801d712:	2101      	movs	r1, #1
 801d714:	4638      	mov	r0, r7
 801d716:	685b      	ldr	r3, [r3, #4]
 801d718:	9300      	str	r3, [sp, #0]
 801d71a:	f7fe fa0f 	bl	801bb3c <ai_buffer_get_size>
 801d71e:	9b00      	ldr	r3, [sp, #0]
 801d720:	4283      	cmp	r3, r0
 801d722:	d287      	bcs.n	801d634 <ai_platform_network_process+0xe0>
 801d724:	f104 0010 	add.w	r0, r4, #16
 801d728:	2218      	movs	r2, #24
 801d72a:	2112      	movs	r1, #18
 801d72c:	f000 fd5c 	bl	801e1e8 <core_set_error>
 801d730:	2300      	movs	r3, #0
 801d732:	e019      	b.n	801d768 <ai_platform_network_process+0x214>
 801d734:	4b37      	ldr	r3, [pc, #220]	; (801d814 <ai_platform_network_process+0x2c0>)
 801d736:	2201      	movs	r2, #1
 801d738:	4619      	mov	r1, r3
 801d73a:	601a      	str	r2, [r3, #0]
 801d73c:	680b      	ldr	r3, [r1, #0]
 801d73e:	2b00      	cmp	r3, #0
 801d740:	d1fc      	bne.n	801d73c <ai_platform_network_process+0x1e8>
 801d742:	4b35      	ldr	r3, [pc, #212]	; (801d818 <ai_platform_network_process+0x2c4>)
 801d744:	4935      	ldr	r1, [pc, #212]	; (801d81c <ai_platform_network_process+0x2c8>)
 801d746:	4a36      	ldr	r2, [pc, #216]	; (801d820 <ai_platform_network_process+0x2cc>)
 801d748:	6019      	str	r1, [r3, #0]
 801d74a:	681b      	ldr	r3, [r3, #0]
 801d74c:	4293      	cmp	r3, r2
 801d74e:	f43f af3a 	beq.w	801d5c6 <ai_platform_network_process+0x72>
 801d752:	e7fe      	b.n	801d752 <ai_platform_network_process+0x1fe>
 801d754:	2a03      	cmp	r2, #3
 801d756:	6163      	str	r3, [r4, #20]
 801d758:	d01a      	beq.n	801d790 <ai_platform_network_process+0x23c>
 801d75a:	f104 0010 	add.w	r0, r4, #16
 801d75e:	2230      	movs	r2, #48	; 0x30
 801d760:	2111      	movs	r1, #17
 801d762:	f000 fd41 	bl	801e1e8 <core_set_error>
 801d766:	2300      	movs	r3, #0
 801d768:	4618      	mov	r0, r3
 801d76a:	b003      	add	sp, #12
 801d76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d770:	4b2c      	ldr	r3, [pc, #176]	; (801d824 <ai_platform_network_process+0x2d0>)
 801d772:	2201      	movs	r2, #1
 801d774:	4619      	mov	r1, r3
 801d776:	601a      	str	r2, [r3, #0]
 801d778:	680b      	ldr	r3, [r1, #0]
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	d1fc      	bne.n	801d778 <ai_platform_network_process+0x224>
 801d77e:	4b2a      	ldr	r3, [pc, #168]	; (801d828 <ai_platform_network_process+0x2d4>)
 801d780:	4926      	ldr	r1, [pc, #152]	; (801d81c <ai_platform_network_process+0x2c8>)
 801d782:	4a27      	ldr	r2, [pc, #156]	; (801d820 <ai_platform_network_process+0x2cc>)
 801d784:	6019      	str	r1, [r3, #0]
 801d786:	681b      	ldr	r3, [r3, #0]
 801d788:	4293      	cmp	r3, r2
 801d78a:	f43f af1c 	beq.w	801d5c6 <ai_platform_network_process+0x72>
 801d78e:	e7fe      	b.n	801d78e <ai_platform_network_process+0x23a>
 801d790:	f104 0010 	add.w	r0, r4, #16
 801d794:	2217      	movs	r2, #23
 801d796:	2112      	movs	r1, #18
 801d798:	f000 fd26 	bl	801e1e8 <core_set_error>
 801d79c:	2300      	movs	r3, #0
 801d79e:	e7e3      	b.n	801d768 <ai_platform_network_process+0x214>
 801d7a0:	4b1c      	ldr	r3, [pc, #112]	; (801d814 <ai_platform_network_process+0x2c0>)
 801d7a2:	2201      	movs	r2, #1
 801d7a4:	4619      	mov	r1, r3
 801d7a6:	601a      	str	r2, [r3, #0]
 801d7a8:	680b      	ldr	r3, [r1, #0]
 801d7aa:	2b00      	cmp	r3, #0
 801d7ac:	d1fc      	bne.n	801d7a8 <ai_platform_network_process+0x254>
 801d7ae:	4b1a      	ldr	r3, [pc, #104]	; (801d818 <ai_platform_network_process+0x2c4>)
 801d7b0:	491a      	ldr	r1, [pc, #104]	; (801d81c <ai_platform_network_process+0x2c8>)
 801d7b2:	4a1b      	ldr	r2, [pc, #108]	; (801d820 <ai_platform_network_process+0x2cc>)
 801d7b4:	6019      	str	r1, [r3, #0]
 801d7b6:	681b      	ldr	r3, [r3, #0]
 801d7b8:	4293      	cmp	r3, r2
 801d7ba:	f43f af04 	beq.w	801d5c6 <ai_platform_network_process+0x72>
 801d7be:	e7fe      	b.n	801d7be <ai_platform_network_process+0x26a>
 801d7c0:	4b18      	ldr	r3, [pc, #96]	; (801d824 <ai_platform_network_process+0x2d0>)
 801d7c2:	2201      	movs	r2, #1
 801d7c4:	4619      	mov	r1, r3
 801d7c6:	601a      	str	r2, [r3, #0]
 801d7c8:	680b      	ldr	r3, [r1, #0]
 801d7ca:	2b00      	cmp	r3, #0
 801d7cc:	d1fc      	bne.n	801d7c8 <ai_platform_network_process+0x274>
 801d7ce:	4b16      	ldr	r3, [pc, #88]	; (801d828 <ai_platform_network_process+0x2d4>)
 801d7d0:	4912      	ldr	r1, [pc, #72]	; (801d81c <ai_platform_network_process+0x2c8>)
 801d7d2:	4a13      	ldr	r2, [pc, #76]	; (801d820 <ai_platform_network_process+0x2cc>)
 801d7d4:	6019      	str	r1, [r3, #0]
 801d7d6:	681b      	ldr	r3, [r3, #0]
 801d7d8:	4293      	cmp	r3, r2
 801d7da:	f43f aef4 	beq.w	801d5c6 <ai_platform_network_process+0x72>
 801d7de:	e7fe      	b.n	801d7de <ai_platform_network_process+0x28a>
 801d7e0:	f104 0010 	add.w	r0, r4, #16
 801d7e4:	2221      	movs	r2, #33	; 0x21
 801d7e6:	2112      	movs	r1, #18
 801d7e8:	9300      	str	r3, [sp, #0]
 801d7ea:	f000 fcfd 	bl	801e1e8 <core_set_error>
 801d7ee:	9b00      	ldr	r3, [sp, #0]
 801d7f0:	e7ba      	b.n	801d768 <ai_platform_network_process+0x214>
 801d7f2:	f104 0010 	add.w	r0, r4, #16
 801d7f6:	2217      	movs	r2, #23
 801d7f8:	2112      	movs	r1, #18
 801d7fa:	9300      	str	r3, [sp, #0]
 801d7fc:	f000 fcf4 	bl	801e1e8 <core_set_error>
 801d800:	9b00      	ldr	r3, [sp, #0]
 801d802:	e7b1      	b.n	801d768 <ai_platform_network_process+0x214>
 801d804:	a1c00100 	.word	0xa1c00100
 801d808:	e0002000 	.word	0xe0002000
 801d80c:	e0042000 	.word	0xe0042000
 801d810:	5c001000 	.word	0x5c001000
 801d814:	40023008 	.word	0x40023008
 801d818:	40023000 	.word	0x40023000
 801d81c:	f407a5c2 	.word	0xf407a5c2
 801d820:	b5e8b5cd 	.word	0xb5e8b5cd
 801d824:	58024c08 	.word	0x58024c08
 801d828:	58024c00 	.word	0x58024c00
 801d82c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 801d82e:	2d00      	cmp	r5, #0
 801d830:	f000 80ad 	beq.w	801d98e <ai_platform_network_process+0x43a>
 801d834:	2b01      	cmp	r3, #1
 801d836:	f240 8158 	bls.w	801daea <ai_platform_network_process+0x596>
 801d83a:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 801d83e:	f119 0f0c 	cmn.w	r9, #12
 801d842:	f000 8152 	beq.w	801daea <ai_platform_network_process+0x596>
 801d846:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d84a:	2b00      	cmp	r3, #0
 801d84c:	f000 814d 	beq.w	801daea <ai_platform_network_process+0x596>
 801d850:	f04f 0800 	mov.w	r8, #0
 801d854:	4598      	cmp	r8, r3
 801d856:	f080 8099 	bcs.w	801d98c <ai_platform_network_process+0x438>
 801d85a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d85e:	2b00      	cmp	r3, #0
 801d860:	f000 8094 	beq.w	801d98c <ai_platform_network_process+0x438>
 801d864:	f853 b028 	ldr.w	fp, [r3, r8, lsl #2]
 801d868:	f1bb 0f00 	cmp.w	fp, #0
 801d86c:	f000 808e 	beq.w	801d98c <ai_platform_network_process+0x438>
 801d870:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801d874:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 801d878:	681b      	ldr	r3, [r3, #0]
 801d87a:	eb13 070a 	adds.w	r7, r3, sl
 801d87e:	9300      	str	r3, [sp, #0]
 801d880:	d07c      	beq.n	801d97c <ai_platform_network_process+0x428>
 801d882:	f8db 3018 	ldr.w	r3, [fp, #24]
 801d886:	2101      	movs	r1, #1
 801d888:	4628      	mov	r0, r5
 801d88a:	685b      	ldr	r3, [r3, #4]
 801d88c:	9301      	str	r3, [sp, #4]
 801d88e:	f7fe f955 	bl	801bb3c <ai_buffer_get_size>
 801d892:	9b01      	ldr	r3, [sp, #4]
 801d894:	4283      	cmp	r3, r0
 801d896:	f0c0 8128 	bcc.w	801daea <ai_platform_network_process+0x596>
 801d89a:	f8db 000c 	ldr.w	r0, [fp, #12]
 801d89e:	69a9      	ldr	r1, [r5, #24]
 801d8a0:	68c2      	ldr	r2, [r0, #12]
 801d8a2:	68cb      	ldr	r3, [r1, #12]
 801d8a4:	429a      	cmp	r2, r3
 801d8a6:	f040 8120 	bne.w	801daea <ai_platform_network_process+0x596>
 801d8aa:	6882      	ldr	r2, [r0, #8]
 801d8ac:	688b      	ldr	r3, [r1, #8]
 801d8ae:	429a      	cmp	r2, r3
 801d8b0:	f040 811b 	bne.w	801daea <ai_platform_network_process+0x596>
 801d8b4:	6842      	ldr	r2, [r0, #4]
 801d8b6:	684b      	ldr	r3, [r1, #4]
 801d8b8:	429a      	cmp	r2, r3
 801d8ba:	f040 8116 	bne.w	801daea <ai_platform_network_process+0x596>
 801d8be:	f8db 3018 	ldr.w	r3, [fp, #24]
 801d8c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d8c6:	f007 fea3 	bl	8025610 <ai_array_get_data_byte_size>
 801d8ca:	9001      	str	r0, [sp, #4]
 801d8cc:	4658      	mov	r0, fp
 801d8ce:	f007 fe31 	bl	8025534 <get_tensor_byte_size>
 801d8d2:	9b01      	ldr	r3, [sp, #4]
 801d8d4:	4283      	cmp	r3, r0
 801d8d6:	f0c0 8108 	bcc.w	801daea <ai_platform_network_process+0x596>
 801d8da:	f8db 3018 	ldr.w	r3, [fp, #24]
 801d8de:	6818      	ldr	r0, [r3, #0]
 801d8e0:	f007 fe40 	bl	8025564 <ai_array_to_buffer_fmt>
 801d8e4:	682b      	ldr	r3, [r5, #0]
 801d8e6:	4043      	eors	r3, r0
 801d8e8:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 801d8ec:	d13e      	bne.n	801d96c <ai_platform_network_process+0x418>
 801d8ee:	686b      	ldr	r3, [r5, #4]
 801d8f0:	2b00      	cmp	r3, #0
 801d8f2:	d032      	beq.n	801d95a <ai_platform_network_process+0x406>
 801d8f4:	69ab      	ldr	r3, [r5, #24]
 801d8f6:	681b      	ldr	r3, [r3, #0]
 801d8f8:	b333      	cbz	r3, 801d948 <ai_platform_network_process+0x3f4>
 801d8fa:	429e      	cmp	r6, r3
 801d8fc:	4658      	mov	r0, fp
 801d8fe:	bf38      	it	cc
 801d900:	461e      	movcc	r6, r3
 801d902:	f007 fe17 	bl	8025534 <get_tensor_byte_size>
 801d906:	60b8      	str	r0, [r7, #8]
 801d908:	69ab      	ldr	r3, [r5, #24]
 801d90a:	681a      	ldr	r2, [r3, #0]
 801d90c:	fb02 f200 	mul.w	r2, r2, r0
 801d910:	60fa      	str	r2, [r7, #12]
 801d912:	6868      	ldr	r0, [r5, #4]
 801d914:	6078      	str	r0, [r7, #4]
 801d916:	686b      	ldr	r3, [r5, #4]
 801d918:	4413      	add	r3, r2
 801d91a:	9a00      	ldr	r2, [sp, #0]
 801d91c:	f842 300a 	str.w	r3, [r2, sl]
 801d920:	f8db 1018 	ldr.w	r1, [fp, #24]
 801d924:	680b      	ldr	r3, [r1, #0]
 801d926:	009b      	lsls	r3, r3, #2
 801d928:	d408      	bmi.n	801d93c <ai_platform_network_process+0x3e8>
 801d92a:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 801d92e:	1a9b      	subs	r3, r3, r2
 801d930:	4418      	add	r0, r3
 801d932:	6088      	str	r0, [r1, #8]
 801d934:	687a      	ldr	r2, [r7, #4]
 801d936:	f8db 3018 	ldr.w	r3, [fp, #24]
 801d93a:	60da      	str	r2, [r3, #12]
 801d93c:	f108 0801 	add.w	r8, r8, #1
 801d940:	351c      	adds	r5, #28
 801d942:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d946:	e785      	b.n	801d854 <ai_platform_network_process+0x300>
 801d948:	f104 0010 	add.w	r0, r4, #16
 801d94c:	2221      	movs	r2, #33	; 0x21
 801d94e:	2113      	movs	r1, #19
 801d950:	9300      	str	r3, [sp, #0]
 801d952:	f000 fc49 	bl	801e1e8 <core_set_error>
 801d956:	9b00      	ldr	r3, [sp, #0]
 801d958:	e706      	b.n	801d768 <ai_platform_network_process+0x214>
 801d95a:	f104 0010 	add.w	r0, r4, #16
 801d95e:	2217      	movs	r2, #23
 801d960:	2113      	movs	r1, #19
 801d962:	9300      	str	r3, [sp, #0]
 801d964:	f000 fc40 	bl	801e1e8 <core_set_error>
 801d968:	9b00      	ldr	r3, [sp, #0]
 801d96a:	e6fd      	b.n	801d768 <ai_platform_network_process+0x214>
 801d96c:	f104 0010 	add.w	r0, r4, #16
 801d970:	2219      	movs	r2, #25
 801d972:	2113      	movs	r1, #19
 801d974:	f000 fc38 	bl	801e1e8 <core_set_error>
 801d978:	2300      	movs	r3, #0
 801d97a:	e6f5      	b.n	801d768 <ai_platform_network_process+0x214>
 801d97c:	f104 0010 	add.w	r0, r4, #16
 801d980:	2217      	movs	r2, #23
 801d982:	2113      	movs	r1, #19
 801d984:	f000 fc30 	bl	801e1e8 <core_set_error>
 801d988:	463b      	mov	r3, r7
 801d98a:	e6ed      	b.n	801d768 <ai_platform_network_process+0x214>
 801d98c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 801d98e:	82a6      	strh	r6, [r4, #20]
 801d990:	2b00      	cmp	r3, #0
 801d992:	f000 80a5 	beq.w	801dae0 <ai_platform_network_process+0x58c>
 801d996:	2b01      	cmp	r3, #1
 801d998:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801d99a:	f240 80a4 	bls.w	801dae6 <ai_platform_network_process+0x592>
 801d99e:	f105 070c 	add.w	r7, r5, #12
 801d9a2:	8ae3      	ldrh	r3, [r4, #22]
 801d9a4:	8aa2      	ldrh	r2, [r4, #20]
 801d9a6:	429a      	cmp	r2, r3
 801d9a8:	f67f aede 	bls.w	801d768 <ai_platform_network_process+0x214>
 801d9ac:	2d00      	cmp	r5, #0
 801d9ae:	d03a      	beq.n	801da26 <ai_platform_network_process+0x4d2>
 801d9b0:	882b      	ldrh	r3, [r5, #0]
 801d9b2:	2b00      	cmp	r3, #0
 801d9b4:	d037      	beq.n	801da26 <ai_platform_network_process+0x4d2>
 801d9b6:	686b      	ldr	r3, [r5, #4]
 801d9b8:	2b00      	cmp	r3, #0
 801d9ba:	d034      	beq.n	801da26 <ai_platform_network_process+0x4d2>
 801d9bc:	681a      	ldr	r2, [r3, #0]
 801d9be:	2a00      	cmp	r2, #0
 801d9c0:	d031      	beq.n	801da26 <ai_platform_network_process+0x4d2>
 801d9c2:	f04f 0800 	mov.w	r8, #0
 801d9c6:	e01b      	b.n	801da00 <ai_platform_network_process+0x4ac>
 801d9c8:	68d9      	ldr	r1, [r3, #12]
 801d9ca:	1a40      	subs	r0, r0, r1
 801d9cc:	eb0c 0100 	add.w	r1, ip, r0
 801d9d0:	6099      	str	r1, [r3, #8]
 801d9d2:	6993      	ldr	r3, [r2, #24]
 801d9d4:	6872      	ldr	r2, [r6, #4]
 801d9d6:	60da      	str	r2, [r3, #12]
 801d9d8:	6873      	ldr	r3, [r6, #4]
 801d9da:	f108 0801 	add.w	r8, r8, #1
 801d9de:	68b1      	ldr	r1, [r6, #8]
 801d9e0:	f85a 2009 	ldr.w	r2, [sl, r9]
 801d9e4:	440b      	add	r3, r1
 801d9e6:	4293      	cmp	r3, r2
 801d9e8:	d301      	bcc.n	801d9ee <ai_platform_network_process+0x49a>
 801d9ea:	68f3      	ldr	r3, [r6, #12]
 801d9ec:	1ad3      	subs	r3, r2, r3
 801d9ee:	6073      	str	r3, [r6, #4]
 801d9f0:	882b      	ldrh	r3, [r5, #0]
 801d9f2:	4598      	cmp	r8, r3
 801d9f4:	d217      	bcs.n	801da26 <ai_platform_network_process+0x4d2>
 801d9f6:	686b      	ldr	r3, [r5, #4]
 801d9f8:	b1ab      	cbz	r3, 801da26 <ai_platform_network_process+0x4d2>
 801d9fa:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 801d9fe:	b192      	cbz	r2, 801da26 <ai_platform_network_process+0x4d2>
 801da00:	68a9      	ldr	r1, [r5, #8]
 801da02:	ea4f 1908 	mov.w	r9, r8, lsl #4
 801da06:	6993      	ldr	r3, [r2, #24]
 801da08:	f8d1 a000 	ldr.w	sl, [r1]
 801da0c:	6819      	ldr	r1, [r3, #0]
 801da0e:	eb0a 0609 	add.w	r6, sl, r9
 801da12:	6898      	ldr	r0, [r3, #8]
 801da14:	0089      	lsls	r1, r1, #2
 801da16:	f8d6 c004 	ldr.w	ip, [r6, #4]
 801da1a:	d5d5      	bpl.n	801d9c8 <ai_platform_network_process+0x474>
 801da1c:	4661      	mov	r1, ip
 801da1e:	68b2      	ldr	r2, [r6, #8]
 801da20:	f008 fe49 	bl	80266b6 <memcpy>
 801da24:	e7d8      	b.n	801d9d8 <ai_platform_network_process+0x484>
 801da26:	4620      	mov	r0, r4
 801da28:	f002 fa38 	bl	801fe9c <ai_layers_forward_all>
 801da2c:	2f00      	cmp	r7, #0
 801da2e:	d04b      	beq.n	801dac8 <ai_platform_network_process+0x574>
 801da30:	883b      	ldrh	r3, [r7, #0]
 801da32:	2b00      	cmp	r3, #0
 801da34:	d048      	beq.n	801dac8 <ai_platform_network_process+0x574>
 801da36:	687b      	ldr	r3, [r7, #4]
 801da38:	2b00      	cmp	r3, #0
 801da3a:	d045      	beq.n	801dac8 <ai_platform_network_process+0x574>
 801da3c:	6818      	ldr	r0, [r3, #0]
 801da3e:	2800      	cmp	r0, #0
 801da40:	d042      	beq.n	801dac8 <ai_platform_network_process+0x574>
 801da42:	f04f 0800 	mov.w	r8, #0
 801da46:	e01c      	b.n	801da82 <ai_platform_network_process+0x52e>
 801da48:	f85a 2009 	ldr.w	r2, [sl, r9]
 801da4c:	4596      	cmp	lr, r2
 801da4e:	d302      	bcc.n	801da56 <ai_platform_network_process+0x502>
 801da50:	68f3      	ldr	r3, [r6, #12]
 801da52:	eba2 0e03 	sub.w	lr, r2, r3
 801da56:	f8c6 e004 	str.w	lr, [r6, #4]
 801da5a:	f108 0801 	add.w	r8, r8, #1
 801da5e:	6981      	ldr	r1, [r0, #24]
 801da60:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 801da64:	1ad2      	subs	r2, r2, r3
 801da66:	eb0e 0302 	add.w	r3, lr, r2
 801da6a:	608b      	str	r3, [r1, #8]
 801da6c:	6983      	ldr	r3, [r0, #24]
 801da6e:	6872      	ldr	r2, [r6, #4]
 801da70:	60da      	str	r2, [r3, #12]
 801da72:	883b      	ldrh	r3, [r7, #0]
 801da74:	4598      	cmp	r8, r3
 801da76:	d227      	bcs.n	801dac8 <ai_platform_network_process+0x574>
 801da78:	687b      	ldr	r3, [r7, #4]
 801da7a:	b32b      	cbz	r3, 801dac8 <ai_platform_network_process+0x574>
 801da7c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801da80:	b310      	cbz	r0, 801dac8 <ai_platform_network_process+0x574>
 801da82:	68bb      	ldr	r3, [r7, #8]
 801da84:	ea4f 1908 	mov.w	r9, r8, lsl #4
 801da88:	6981      	ldr	r1, [r0, #24]
 801da8a:	f8d3 a000 	ldr.w	sl, [r3]
 801da8e:	680b      	ldr	r3, [r1, #0]
 801da90:	eb0a 0609 	add.w	r6, sl, r9
 801da94:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 801da98:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 801da9c:	eb0c 0e02 	add.w	lr, ip, r2
 801daa0:	d0d2      	beq.n	801da48 <ai_platform_network_process+0x4f4>
 801daa2:	6889      	ldr	r1, [r1, #8]
 801daa4:	4660      	mov	r0, ip
 801daa6:	f008 fe06 	bl	80266b6 <memcpy>
 801daaa:	f85a 2009 	ldr.w	r2, [sl, r9]
 801daae:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 801dab2:	440b      	add	r3, r1
 801dab4:	4293      	cmp	r3, r2
 801dab6:	d301      	bcc.n	801dabc <ai_platform_network_process+0x568>
 801dab8:	68f3      	ldr	r3, [r6, #12]
 801daba:	1ad3      	subs	r3, r2, r3
 801dabc:	6073      	str	r3, [r6, #4]
 801dabe:	f108 0801 	add.w	r8, r8, #1
 801dac2:	883b      	ldrh	r3, [r7, #0]
 801dac4:	4598      	cmp	r8, r3
 801dac6:	d3d7      	bcc.n	801da78 <ai_platform_network_process+0x524>
 801dac8:	8ae3      	ldrh	r3, [r4, #22]
 801daca:	8aa2      	ldrh	r2, [r4, #20]
 801dacc:	3301      	adds	r3, #1
 801dace:	b29b      	uxth	r3, r3
 801dad0:	429a      	cmp	r2, r3
 801dad2:	82e3      	strh	r3, [r4, #22]
 801dad4:	f63f af6a 	bhi.w	801d9ac <ai_platform_network_process+0x458>
 801dad8:	4618      	mov	r0, r3
 801dada:	b003      	add	sp, #12
 801dadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dae0:	461d      	mov	r5, r3
 801dae2:	461f      	mov	r7, r3
 801dae4:	e75d      	b.n	801d9a2 <ai_platform_network_process+0x44e>
 801dae6:	2700      	movs	r7, #0
 801dae8:	e75b      	b.n	801d9a2 <ai_platform_network_process+0x44e>
 801daea:	f104 0010 	add.w	r0, r4, #16
 801daee:	2218      	movs	r2, #24
 801daf0:	2113      	movs	r1, #19
 801daf2:	f000 fb79 	bl	801e1e8 <core_set_error>
 801daf6:	2300      	movs	r3, #0
 801daf8:	e636      	b.n	801d768 <ai_platform_network_process+0x214>
 801dafa:	f104 0010 	add.w	r0, r4, #16
 801dafe:	2219      	movs	r2, #25
 801db00:	2112      	movs	r1, #18
 801db02:	f000 fb71 	bl	801e1e8 <core_set_error>
 801db06:	2300      	movs	r3, #0
 801db08:	e62e      	b.n	801d768 <ai_platform_network_process+0x214>
 801db0a:	bf00      	nop

0801db0c <node_convert>:
 801db0c:	6982      	ldr	r2, [r0, #24]
 801db0e:	8813      	ldrh	r3, [r2, #0]
 801db10:	2b00      	cmp	r3, #0
 801db12:	d04b      	beq.n	801dbac <node_convert+0xa0>
 801db14:	b5f0      	push	{r4, r5, r6, r7, lr}
 801db16:	6852      	ldr	r2, [r2, #4]
 801db18:	b083      	sub	sp, #12
 801db1a:	6855      	ldr	r5, [r2, #4]
 801db1c:	b105      	cbz	r5, 801db20 <node_convert+0x14>
 801db1e:	682d      	ldr	r5, [r5, #0]
 801db20:	2b01      	cmp	r3, #1
 801db22:	d940      	bls.n	801dba6 <node_convert+0x9a>
 801db24:	6916      	ldr	r6, [r2, #16]
 801db26:	b106      	cbz	r6, 801db2a <node_convert+0x1e>
 801db28:	6836      	ldr	r6, [r6, #0]
 801db2a:	68ab      	ldr	r3, [r5, #8]
 801db2c:	0a1b      	lsrs	r3, r3, #8
 801db2e:	f000 80e3 	beq.w	801dcf8 <node_convert+0x1ec>
 801db32:	68e9      	ldr	r1, [r5, #12]
 801db34:	2401      	movs	r4, #1
 801db36:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801db3a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801db3e:	428b      	cmp	r3, r1
 801db40:	fb02 f404 	mul.w	r4, r2, r4
 801db44:	d1f9      	bne.n	801db3a <node_convert+0x2e>
 801db46:	69aa      	ldr	r2, [r5, #24]
 801db48:	69b7      	ldr	r7, [r6, #24]
 801db4a:	6813      	ldr	r3, [r2, #0]
 801db4c:	6890      	ldr	r0, [r2, #8]
 801db4e:	f3c3 4243 	ubfx	r2, r3, #17, #4
 801db52:	2a01      	cmp	r2, #1
 801db54:	d055      	beq.n	801dc02 <node_convert+0xf6>
 801db56:	6829      	ldr	r1, [r5, #0]
 801db58:	15da      	asrs	r2, r3, #23
 801db5a:	68bd      	ldr	r5, [r7, #8]
 801db5c:	b341      	cbz	r1, 801dbb0 <node_convert+0xa4>
 801db5e:	684e      	ldr	r6, [r1, #4]
 801db60:	f002 0201 	and.w	r2, r2, #1
 801db64:	2e00      	cmp	r6, #0
 801db66:	f000 80c9 	beq.w	801dcfc <node_convert+0x1f0>
 801db6a:	884b      	ldrh	r3, [r1, #2]
 801db6c:	2b00      	cmp	r3, #0
 801db6e:	f000 8087 	beq.w	801dc80 <node_convert+0x174>
 801db72:	6833      	ldr	r3, [r6, #0]
 801db74:	ed93 7a00 	vldr	s14, [r3]
 801db78:	6873      	ldr	r3, [r6, #4]
 801db7a:	2a00      	cmp	r2, #0
 801db7c:	f000 80d5 	beq.w	801dd2a <node_convert+0x21e>
 801db80:	f993 2000 	ldrsb.w	r2, [r3]
 801db84:	b16c      	cbz	r4, 801dba2 <node_convert+0x96>
 801db86:	4404      	add	r4, r0
 801db88:	f910 3b01 	ldrsb.w	r3, [r0], #1
 801db8c:	1a9b      	subs	r3, r3, r2
 801db8e:	42a0      	cmp	r0, r4
 801db90:	ee07 3a90 	vmov	s15, r3
 801db94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801db98:	ee67 7a87 	vmul.f32	s15, s15, s14
 801db9c:	ece5 7a01 	vstmia	r5!, {s15}
 801dba0:	d1f2      	bne.n	801db88 <node_convert+0x7c>
 801dba2:	b003      	add	sp, #12
 801dba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dba6:	2300      	movs	r3, #0
 801dba8:	685b      	ldr	r3, [r3, #4]
 801dbaa:	deff      	udf	#255	; 0xff
 801dbac:	685b      	ldr	r3, [r3, #4]
 801dbae:	deff      	udf	#255	; 0xff
 801dbb0:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 801dbb4:	f003 067f 	and.w	r6, r3, #127	; 0x7f
 801dbb8:	f002 0201 	and.w	r2, r2, #1
 801dbbc:	1b8e      	subs	r6, r1, r6
 801dbbe:	2908      	cmp	r1, #8
 801dbc0:	4629      	mov	r1, r5
 801dbc2:	f106 0640 	add.w	r6, r6, #64	; 0x40
 801dbc6:	eba6 0602 	sub.w	r6, r6, r2
 801dbca:	4622      	mov	r2, r4
 801dbcc:	d05e      	beq.n	801dc8c <node_convert+0x180>
 801dbce:	f007 fbcb 	bl	8025368 <st_dsp_arm_q15_to_float>
 801dbd2:	2e00      	cmp	r6, #0
 801dbd4:	d0e5      	beq.n	801dba2 <node_convert+0x96>
 801dbd6:	ee07 6a90 	vmov	s15, r6
 801dbda:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801dbde:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801dbe2:	f00a fe09 	bl	80287f8 <powf>
 801dbe6:	2c00      	cmp	r4, #0
 801dbe8:	d0db      	beq.n	801dba2 <node_convert+0x96>
 801dbea:	2300      	movs	r3, #0
 801dbec:	ecf5 7a01 	vldmia	r5!, {s15}
 801dbf0:	3301      	adds	r3, #1
 801dbf2:	ee67 7a80 	vmul.f32	s15, s15, s0
 801dbf6:	429c      	cmp	r4, r3
 801dbf8:	ed45 7a01 	vstr	s15, [r5, #-4]
 801dbfc:	d1f6      	bne.n	801dbec <node_convert+0xe0>
 801dbfe:	b003      	add	sp, #12
 801dc00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc02:	683b      	ldr	r3, [r7, #0]
 801dc04:	6835      	ldr	r5, [r6, #0]
 801dc06:	15da      	asrs	r2, r3, #23
 801dc08:	2d00      	cmp	r5, #0
 801dc0a:	f000 8090 	beq.w	801dd2e <node_convert+0x222>
 801dc0e:	6869      	ldr	r1, [r5, #4]
 801dc10:	f002 0301 	and.w	r3, r2, #1
 801dc14:	68ba      	ldr	r2, [r7, #8]
 801dc16:	2900      	cmp	r1, #0
 801dc18:	d03b      	beq.n	801dc92 <node_convert+0x186>
 801dc1a:	886d      	ldrh	r5, [r5, #2]
 801dc1c:	2d00      	cmp	r5, #0
 801dc1e:	d03e      	beq.n	801dc9e <node_convert+0x192>
 801dc20:	680d      	ldr	r5, [r1, #0]
 801dc22:	edd5 7a00 	vldr	s15, [r5]
 801dc26:	2b00      	cmp	r3, #0
 801dc28:	f000 80b3 	beq.w	801dd92 <node_convert+0x286>
 801dc2c:	684b      	ldr	r3, [r1, #4]
 801dc2e:	f993 3000 	ldrsb.w	r3, [r3]
 801dc32:	ee07 3a10 	vmov	s14, r3
 801dc36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dc3a:	2c00      	cmp	r4, #0
 801dc3c:	d0b1      	beq.n	801dba2 <node_convert+0x96>
 801dc3e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801dc42:	4414      	add	r4, r2
 801dc44:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801dc48:	eddf 5a57 	vldr	s11, [pc, #348]	; 801dda8 <node_convert+0x29c>
 801dc4c:	eec5 6a27 	vdiv.f32	s13, s10, s15
 801dc50:	ecf0 7a01 	vldmia	r0!, {s15}
 801dc54:	eeb0 5a47 	vmov.f32	s10, s14
 801dc58:	eea7 5aa6 	vfma.f32	s10, s15, s13
 801dc5c:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801dc60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc64:	db3b      	blt.n	801dcde <node_convert+0x1d2>
 801dc66:	ee75 7a06 	vadd.f32	s15, s10, s12
 801dc6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801dc6e:	ee17 3a90 	vmov	r3, s15
 801dc72:	f303 0307 	ssat	r3, #8, r3
 801dc76:	f802 3b01 	strb.w	r3, [r2], #1
 801dc7a:	42a2      	cmp	r2, r4
 801dc7c:	d1e8      	bne.n	801dc50 <node_convert+0x144>
 801dc7e:	e790      	b.n	801dba2 <node_convert+0x96>
 801dc80:	2a00      	cmp	r2, #0
 801dc82:	d03d      	beq.n	801dd00 <node_convert+0x1f4>
 801dc84:	461a      	mov	r2, r3
 801dc86:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801ddac <node_convert+0x2a0>
 801dc8a:	e77b      	b.n	801db84 <node_convert+0x78>
 801dc8c:	f007 fbd4 	bl	8025438 <st_dsp_arm_q7_to_float>
 801dc90:	e79f      	b.n	801dbd2 <node_convert+0xc6>
 801dc92:	b133      	cbz	r3, 801dca2 <node_convert+0x196>
 801dc94:	ed9f 7a45 	vldr	s14, [pc, #276]	; 801ddac <node_convert+0x2a0>
 801dc98:	eef0 7a47 	vmov.f32	s15, s14
 801dc9c:	e7cd      	b.n	801dc3a <node_convert+0x12e>
 801dc9e:	2b00      	cmp	r3, #0
 801dca0:	d1f8      	bne.n	801dc94 <node_convert+0x188>
 801dca2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801dca6:	eddf 7a41 	vldr	s15, [pc, #260]	; 801ddac <node_convert+0x2a0>
 801dcaa:	2c00      	cmp	r4, #0
 801dcac:	f43f af79 	beq.w	801dba2 <node_convert+0x96>
 801dcb0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801dcb4:	4414      	add	r4, r2
 801dcb6:	eec6 6a27 	vdiv.f32	s13, s12, s15
 801dcba:	ecf0 7a01 	vldmia	r0!, {s15}
 801dcbe:	eeb0 6a47 	vmov.f32	s12, s14
 801dcc2:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801dcc6:	eefd 7ac6 	vcvt.s32.f32	s15, s12
 801dcca:	ee17 3a90 	vmov	r3, s15
 801dcce:	f383 0308 	usat	r3, #8, r3
 801dcd2:	f802 3b01 	strb.w	r3, [r2], #1
 801dcd6:	42a2      	cmp	r2, r4
 801dcd8:	d1ef      	bne.n	801dcba <node_convert+0x1ae>
 801dcda:	b003      	add	sp, #12
 801dcdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dcde:	ee75 7a65 	vsub.f32	s15, s10, s11
 801dce2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801dce6:	ee17 3a90 	vmov	r3, s15
 801dcea:	f303 0307 	ssat	r3, #8, r3
 801dcee:	f802 3b01 	strb.w	r3, [r2], #1
 801dcf2:	4294      	cmp	r4, r2
 801dcf4:	d1ac      	bne.n	801dc50 <node_convert+0x144>
 801dcf6:	e754      	b.n	801dba2 <node_convert+0x96>
 801dcf8:	2401      	movs	r4, #1
 801dcfa:	e724      	b.n	801db46 <node_convert+0x3a>
 801dcfc:	2a00      	cmp	r2, #0
 801dcfe:	d13f      	bne.n	801dd80 <node_convert+0x274>
 801dd00:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 801ddac <node_convert+0x2a0>
 801dd04:	2c00      	cmp	r4, #0
 801dd06:	f43f af4c 	beq.w	801dba2 <node_convert+0x96>
 801dd0a:	4404      	add	r4, r0
 801dd0c:	f810 3b01 	ldrb.w	r3, [r0], #1
 801dd10:	1a9b      	subs	r3, r3, r2
 801dd12:	42a0      	cmp	r0, r4
 801dd14:	ee07 3a90 	vmov	s15, r3
 801dd18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dd1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801dd20:	ece5 7a01 	vstmia	r5!, {s15}
 801dd24:	d1f2      	bne.n	801dd0c <node_convert+0x200>
 801dd26:	b003      	add	sp, #12
 801dd28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dd2a:	781a      	ldrb	r2, [r3, #0]
 801dd2c:	e7ea      	b.n	801dd04 <node_convert+0x1f8>
 801dd2e:	f3c3 16c6 	ubfx	r6, r3, #7, #7
 801dd32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dd36:	f002 0201 	and.w	r2, r2, #1
 801dd3a:	1af3      	subs	r3, r6, r3
 801dd3c:	3340      	adds	r3, #64	; 0x40
 801dd3e:	1a9b      	subs	r3, r3, r2
 801dd40:	d015      	beq.n	801dd6e <node_convert+0x262>
 801dd42:	425b      	negs	r3, r3
 801dd44:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801dd48:	9001      	str	r0, [sp, #4]
 801dd4a:	ee00 3a90 	vmov	s1, r3
 801dd4e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801dd52:	f00a fd51 	bl	80287f8 <powf>
 801dd56:	9801      	ldr	r0, [sp, #4]
 801dd58:	b14c      	cbz	r4, 801dd6e <node_convert+0x262>
 801dd5a:	4603      	mov	r3, r0
 801dd5c:	ecf3 7a01 	vldmia	r3!, {s15}
 801dd60:	3501      	adds	r5, #1
 801dd62:	ee67 7a80 	vmul.f32	s15, s15, s0
 801dd66:	42ac      	cmp	r4, r5
 801dd68:	ed43 7a01 	vstr	s15, [r3, #-4]
 801dd6c:	d1f6      	bne.n	801dd5c <node_convert+0x250>
 801dd6e:	2e08      	cmp	r6, #8
 801dd70:	68b9      	ldr	r1, [r7, #8]
 801dd72:	4622      	mov	r2, r4
 801dd74:	d008      	beq.n	801dd88 <node_convert+0x27c>
 801dd76:	b003      	add	sp, #12
 801dd78:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801dd7c:	f007 b972 	b.w	8025064 <st_dsp_arm_float_to_q15>
 801dd80:	4632      	mov	r2, r6
 801dd82:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 801ddac <node_convert+0x2a0>
 801dd86:	e6fd      	b.n	801db84 <node_convert+0x78>
 801dd88:	b003      	add	sp, #12
 801dd8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801dd8e:	f007 ba23 	b.w	80251d8 <st_dsp_arm_float_to_q7>
 801dd92:	684b      	ldr	r3, [r1, #4]
 801dd94:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801dd98:	781b      	ldrb	r3, [r3, #0]
 801dd9a:	ee07 3a10 	vmov	s14, r3
 801dd9e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801dda2:	ee37 7a26 	vadd.f32	s14, s14, s13
 801dda6:	e780      	b.n	801dcaa <node_convert+0x19e>
 801dda8:	3efffffc 	.word	0x3efffffc
 801ddac:	00000000 	.word	0x00000000

0801ddb0 <node_convert_integer>:
 801ddb0:	6982      	ldr	r2, [r0, #24]
 801ddb2:	8813      	ldrh	r3, [r2, #0]
 801ddb4:	2b00      	cmp	r3, #0
 801ddb6:	f000 8084 	beq.w	801dec2 <node_convert_integer+0x112>
 801ddba:	b4f0      	push	{r4, r5, r6, r7}
 801ddbc:	6852      	ldr	r2, [r2, #4]
 801ddbe:	6855      	ldr	r5, [r2, #4]
 801ddc0:	b105      	cbz	r5, 801ddc4 <node_convert_integer+0x14>
 801ddc2:	682d      	ldr	r5, [r5, #0]
 801ddc4:	2b01      	cmp	r3, #1
 801ddc6:	d979      	bls.n	801debc <node_convert_integer+0x10c>
 801ddc8:	6916      	ldr	r6, [r2, #16]
 801ddca:	b106      	cbz	r6, 801ddce <node_convert_integer+0x1e>
 801ddcc:	6836      	ldr	r6, [r6, #0]
 801ddce:	68ab      	ldr	r3, [r5, #8]
 801ddd0:	0a1b      	lsrs	r3, r3, #8
 801ddd2:	f000 817c 	beq.w	801e0ce <node_convert_integer+0x31e>
 801ddd6:	68e8      	ldr	r0, [r5, #12]
 801ddd8:	2201      	movs	r2, #1
 801ddda:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801ddde:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801dde2:	4298      	cmp	r0, r3
 801dde4:	fb01 f202 	mul.w	r2, r1, r2
 801dde8:	d1f9      	bne.n	801ddde <node_convert_integer+0x2e>
 801ddea:	0893      	lsrs	r3, r2, #2
 801ddec:	682c      	ldr	r4, [r5, #0]
 801ddee:	f8d6 c000 	ldr.w	ip, [r6]
 801ddf2:	b19c      	cbz	r4, 801de1c <node_convert_integer+0x6c>
 801ddf4:	6861      	ldr	r1, [r4, #4]
 801ddf6:	b189      	cbz	r1, 801de1c <node_convert_integer+0x6c>
 801ddf8:	8860      	ldrh	r0, [r4, #2]
 801ddfa:	b178      	cbz	r0, 801de1c <node_convert_integer+0x6c>
 801ddfc:	6809      	ldr	r1, [r1, #0]
 801ddfe:	edd1 6a00 	vldr	s13, [r1]
 801de02:	f1bc 0f00 	cmp.w	ip, #0
 801de06:	d00e      	beq.n	801de26 <node_convert_integer+0x76>
 801de08:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801de0c:	b159      	cbz	r1, 801de26 <node_convert_integer+0x76>
 801de0e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801de12:	b140      	cbz	r0, 801de26 <node_convert_integer+0x76>
 801de14:	6809      	ldr	r1, [r1, #0]
 801de16:	ed91 7a00 	vldr	s14, [r1]
 801de1a:	e006      	b.n	801de2a <node_convert_integer+0x7a>
 801de1c:	eddf 6abf 	vldr	s13, [pc, #764]	; 801e11c <node_convert_integer+0x36c>
 801de20:	f1bc 0f00 	cmp.w	ip, #0
 801de24:	d1f0      	bne.n	801de08 <node_convert_integer+0x58>
 801de26:	ed9f 7abd 	vldr	s14, [pc, #756]	; 801e11c <node_convert_integer+0x36c>
 801de2a:	69a8      	ldr	r0, [r5, #24]
 801de2c:	69b7      	ldr	r7, [r6, #24]
 801de2e:	6805      	ldr	r5, [r0, #0]
 801de30:	6839      	ldr	r1, [r7, #0]
 801de32:	022d      	lsls	r5, r5, #8
 801de34:	6880      	ldr	r0, [r0, #8]
 801de36:	f3c1 56c0 	ubfx	r6, r1, #23, #1
 801de3a:	68b9      	ldr	r1, [r7, #8]
 801de3c:	d443      	bmi.n	801dec6 <node_convert_integer+0x116>
 801de3e:	2e00      	cmp	r6, #0
 801de40:	f040 80d6 	bne.w	801dff0 <node_convert_integer+0x240>
 801de44:	b13c      	cbz	r4, 801de56 <node_convert_integer+0xa6>
 801de46:	6863      	ldr	r3, [r4, #4]
 801de48:	2b00      	cmp	r3, #0
 801de4a:	f000 815f 	beq.w	801e10c <node_convert_integer+0x35c>
 801de4e:	8864      	ldrh	r4, [r4, #2]
 801de50:	b10c      	cbz	r4, 801de56 <node_convert_integer+0xa6>
 801de52:	685b      	ldr	r3, [r3, #4]
 801de54:	781c      	ldrb	r4, [r3, #0]
 801de56:	f1bc 0f00 	cmp.w	ip, #0
 801de5a:	f000 8130 	beq.w	801e0be <node_convert_integer+0x30e>
 801de5e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801de62:	2b00      	cmp	r3, #0
 801de64:	f000 812b 	beq.w	801e0be <node_convert_integer+0x30e>
 801de68:	f8bc 5002 	ldrh.w	r5, [ip, #2]
 801de6c:	2d00      	cmp	r5, #0
 801de6e:	f000 8126 	beq.w	801e0be <node_convert_integer+0x30e>
 801de72:	685b      	ldr	r3, [r3, #4]
 801de74:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801de78:	781b      	ldrb	r3, [r3, #0]
 801de7a:	ee06 3a10 	vmov	s12, r3
 801de7e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801de82:	ee36 6a27 	vadd.f32	s12, s12, s15
 801de86:	eec6 5a87 	vdiv.f32	s11, s13, s14
 801de8a:	b1aa      	cbz	r2, 801deb8 <node_convert_integer+0x108>
 801de8c:	440a      	add	r2, r1
 801de8e:	f810 3b01 	ldrb.w	r3, [r0], #1
 801de92:	1b1b      	subs	r3, r3, r4
 801de94:	eeb0 7a46 	vmov.f32	s14, s12
 801de98:	ee07 3a90 	vmov	s15, r3
 801de9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dea0:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801dea4:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801dea8:	ee17 3a90 	vmov	r3, s15
 801deac:	f383 0308 	usat	r3, #8, r3
 801deb0:	f801 3b01 	strb.w	r3, [r1], #1
 801deb4:	4291      	cmp	r1, r2
 801deb6:	d1ea      	bne.n	801de8e <node_convert_integer+0xde>
 801deb8:	bcf0      	pop	{r4, r5, r6, r7}
 801deba:	4770      	bx	lr
 801debc:	2300      	movs	r3, #0
 801debe:	685b      	ldr	r3, [r3, #4]
 801dec0:	deff      	udf	#255	; 0xff
 801dec2:	685b      	ldr	r3, [r3, #4]
 801dec4:	deff      	udf	#255	; 0xff
 801dec6:	2e00      	cmp	r6, #0
 801dec8:	d049      	beq.n	801df5e <node_convert_integer+0x1ae>
 801deca:	b144      	cbz	r4, 801dede <node_convert_integer+0x12e>
 801decc:	6863      	ldr	r3, [r4, #4]
 801dece:	2b00      	cmp	r3, #0
 801ded0:	f000 8114 	beq.w	801e0fc <node_convert_integer+0x34c>
 801ded4:	8864      	ldrh	r4, [r4, #2]
 801ded6:	b114      	cbz	r4, 801dede <node_convert_integer+0x12e>
 801ded8:	685b      	ldr	r3, [r3, #4]
 801deda:	f993 4000 	ldrsb.w	r4, [r3]
 801dede:	f1bc 0f00 	cmp.w	ip, #0
 801dee2:	f000 80ef 	beq.w	801e0c4 <node_convert_integer+0x314>
 801dee6:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801deea:	2d00      	cmp	r5, #0
 801deec:	f000 80fd 	beq.w	801e0ea <node_convert_integer+0x33a>
 801def0:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 801def4:	2b00      	cmp	r3, #0
 801def6:	f000 80f3 	beq.w	801e0e0 <node_convert_integer+0x330>
 801defa:	686b      	ldr	r3, [r5, #4]
 801defc:	f993 3000 	ldrsb.w	r3, [r3]
 801df00:	ee07 3a90 	vmov	s15, r3
 801df04:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801df08:	2a00      	cmp	r2, #0
 801df0a:	d0d5      	beq.n	801deb8 <node_convert_integer+0x108>
 801df0c:	440a      	add	r2, r1
 801df0e:	eddf 5a84 	vldr	s11, [pc, #528]	; 801e120 <node_convert_integer+0x370>
 801df12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801df16:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801df1a:	f910 3b01 	ldrsb.w	r3, [r0], #1
 801df1e:	eeb0 5a47 	vmov.f32	s10, s14
 801df22:	1b1b      	subs	r3, r3, r4
 801df24:	ee07 3a90 	vmov	s15, r3
 801df28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801df2c:	eea7 5a86 	vfma.f32	s10, s15, s12
 801df30:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801df34:	eef0 7a45 	vmov.f32	s15, s10
 801df38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df3c:	bfd4      	ite	le
 801df3e:	ee75 7a65 	vsuble.f32	s15, s10, s11
 801df42:	ee77 7aa6 	vaddgt.f32	s15, s15, s13
 801df46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801df4a:	ee17 3a90 	vmov	r3, s15
 801df4e:	f303 0307 	ssat	r3, #8, r3
 801df52:	f801 3b01 	strb.w	r3, [r1], #1
 801df56:	4291      	cmp	r1, r2
 801df58:	d1df      	bne.n	801df1a <node_convert_integer+0x16a>
 801df5a:	bcf0      	pop	{r4, r5, r6, r7}
 801df5c:	4770      	bx	lr
 801df5e:	b144      	cbz	r4, 801df72 <node_convert_integer+0x1c2>
 801df60:	6865      	ldr	r5, [r4, #4]
 801df62:	2d00      	cmp	r5, #0
 801df64:	f000 80c4 	beq.w	801e0f0 <node_convert_integer+0x340>
 801df68:	8864      	ldrh	r4, [r4, #2]
 801df6a:	b114      	cbz	r4, 801df72 <node_convert_integer+0x1c2>
 801df6c:	686c      	ldr	r4, [r5, #4]
 801df6e:	f994 4000 	ldrsb.w	r4, [r4]
 801df72:	f1bc 0f00 	cmp.w	ip, #0
 801df76:	d00c      	beq.n	801df92 <node_convert_integer+0x1e2>
 801df78:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801df7c:	2e00      	cmp	r6, #0
 801df7e:	f000 80b2 	beq.w	801e0e6 <node_convert_integer+0x336>
 801df82:	f8bc 5002 	ldrh.w	r5, [ip, #2]
 801df86:	2d00      	cmp	r5, #0
 801df88:	f000 80a8 	beq.w	801e0dc <node_convert_integer+0x32c>
 801df8c:	6875      	ldr	r5, [r6, #4]
 801df8e:	f895 c000 	ldrb.w	ip, [r5]
 801df92:	eef4 6a47 	vcmp.f32	s13, s14
 801df96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df9a:	d104      	bne.n	801dfa6 <node_convert_integer+0x1f6>
 801df9c:	f104 0680 	add.w	r6, r4, #128	; 0x80
 801dfa0:	4566      	cmp	r6, ip
 801dfa2:	f000 80fb 	beq.w	801e19c <node_convert_integer+0x3ec>
 801dfa6:	ee07 ca90 	vmov	s15, ip
 801dfaa:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801dfae:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801dfb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dfb6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801dfba:	2a00      	cmp	r2, #0
 801dfbc:	f43f af7c 	beq.w	801deb8 <node_convert_integer+0x108>
 801dfc0:	4402      	add	r2, r0
 801dfc2:	f910 3b01 	ldrsb.w	r3, [r0], #1
 801dfc6:	eef0 6a67 	vmov.f32	s13, s15
 801dfca:	1b1b      	subs	r3, r3, r4
 801dfcc:	ee07 3a10 	vmov	s14, r3
 801dfd0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dfd4:	eee7 6a06 	vfma.f32	s13, s14, s12
 801dfd8:	eebd 7ae6 	vcvt.s32.f32	s14, s13
 801dfdc:	ee17 3a10 	vmov	r3, s14
 801dfe0:	f383 0308 	usat	r3, #8, r3
 801dfe4:	4290      	cmp	r0, r2
 801dfe6:	f801 3b01 	strb.w	r3, [r1], #1
 801dfea:	d1ea      	bne.n	801dfc2 <node_convert_integer+0x212>
 801dfec:	bcf0      	pop	{r4, r5, r6, r7}
 801dfee:	4770      	bx	lr
 801dff0:	2c00      	cmp	r4, #0
 801dff2:	d06a      	beq.n	801e0ca <node_convert_integer+0x31a>
 801dff4:	6866      	ldr	r6, [r4, #4]
 801dff6:	2e00      	cmp	r6, #0
 801dff8:	f000 808e 	beq.w	801e118 <node_convert_integer+0x368>
 801dffc:	8865      	ldrh	r5, [r4, #2]
 801dffe:	b10d      	cbz	r5, 801e004 <node_convert_integer+0x254>
 801e000:	6875      	ldr	r5, [r6, #4]
 801e002:	782d      	ldrb	r5, [r5, #0]
 801e004:	f1bc 0f00 	cmp.w	ip, #0
 801e008:	d063      	beq.n	801e0d2 <node_convert_integer+0x322>
 801e00a:	f8dc 7004 	ldr.w	r7, [ip, #4]
 801e00e:	2f00      	cmp	r7, #0
 801e010:	d07a      	beq.n	801e108 <node_convert_integer+0x358>
 801e012:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 801e016:	b116      	cbz	r6, 801e01e <node_convert_integer+0x26e>
 801e018:	687e      	ldr	r6, [r7, #4]
 801e01a:	f996 6000 	ldrsb.w	r6, [r6]
 801e01e:	eef4 6a47 	vcmp.f32	s13, s14
 801e022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e026:	d102      	bne.n	801e02e <node_convert_integer+0x27e>
 801e028:	3d80      	subs	r5, #128	; 0x80
 801e02a:	42b5      	cmp	r5, r6
 801e02c:	d07d      	beq.n	801e12a <node_convert_integer+0x37a>
 801e02e:	b13c      	cbz	r4, 801e040 <node_convert_integer+0x290>
 801e030:	6863      	ldr	r3, [r4, #4]
 801e032:	2b00      	cmp	r3, #0
 801e034:	f000 80d1 	beq.w	801e1da <node_convert_integer+0x42a>
 801e038:	8864      	ldrh	r4, [r4, #2]
 801e03a:	b10c      	cbz	r4, 801e040 <node_convert_integer+0x290>
 801e03c:	685b      	ldr	r3, [r3, #4]
 801e03e:	781c      	ldrb	r4, [r3, #0]
 801e040:	f1bc 0f00 	cmp.w	ip, #0
 801e044:	d047      	beq.n	801e0d6 <node_convert_integer+0x326>
 801e046:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801e04a:	2d00      	cmp	r5, #0
 801e04c:	f000 80c2 	beq.w	801e1d4 <node_convert_integer+0x424>
 801e050:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 801e054:	2b00      	cmp	r3, #0
 801e056:	d065      	beq.n	801e124 <node_convert_integer+0x374>
 801e058:	686b      	ldr	r3, [r5, #4]
 801e05a:	f993 3000 	ldrsb.w	r3, [r3]
 801e05e:	ee07 3a90 	vmov	s15, r3
 801e062:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801e066:	2a00      	cmp	r2, #0
 801e068:	f43f af26 	beq.w	801deb8 <node_convert_integer+0x108>
 801e06c:	440a      	add	r2, r1
 801e06e:	eddf 5a2c 	vldr	s11, [pc, #176]	; 801e120 <node_convert_integer+0x370>
 801e072:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e076:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801e07a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801e07e:	eeb0 5a47 	vmov.f32	s10, s14
 801e082:	1b1b      	subs	r3, r3, r4
 801e084:	ee07 3a90 	vmov	s15, r3
 801e088:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e08c:	eea7 5a86 	vfma.f32	s10, s15, s12
 801e090:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801e094:	eef0 7a45 	vmov.f32	s15, s10
 801e098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e09c:	bfd4      	ite	le
 801e09e:	ee75 7a65 	vsuble.f32	s15, s10, s11
 801e0a2:	ee77 7aa6 	vaddgt.f32	s15, s15, s13
 801e0a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e0aa:	ee17 3a90 	vmov	r3, s15
 801e0ae:	f303 0307 	ssat	r3, #8, r3
 801e0b2:	f801 3b01 	strb.w	r3, [r1], #1
 801e0b6:	4291      	cmp	r1, r2
 801e0b8:	d1df      	bne.n	801e07a <node_convert_integer+0x2ca>
 801e0ba:	bcf0      	pop	{r4, r5, r6, r7}
 801e0bc:	4770      	bx	lr
 801e0be:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801e0c2:	e6e0      	b.n	801de86 <node_convert_integer+0xd6>
 801e0c4:	ee07 ca90 	vmov	s15, ip
 801e0c8:	e71c      	b.n	801df04 <node_convert_integer+0x154>
 801e0ca:	4625      	mov	r5, r4
 801e0cc:	e79a      	b.n	801e004 <node_convert_integer+0x254>
 801e0ce:	2201      	movs	r2, #1
 801e0d0:	e68c      	b.n	801ddec <node_convert_integer+0x3c>
 801e0d2:	4666      	mov	r6, ip
 801e0d4:	e7a3      	b.n	801e01e <node_convert_integer+0x26e>
 801e0d6:	ee07 ca90 	vmov	s15, ip
 801e0da:	e7c2      	b.n	801e062 <node_convert_integer+0x2b2>
 801e0dc:	46ac      	mov	ip, r5
 801e0de:	e758      	b.n	801df92 <node_convert_integer+0x1e2>
 801e0e0:	ee07 3a90 	vmov	s15, r3
 801e0e4:	e70e      	b.n	801df04 <node_convert_integer+0x154>
 801e0e6:	46b4      	mov	ip, r6
 801e0e8:	e753      	b.n	801df92 <node_convert_integer+0x1e2>
 801e0ea:	ee07 5a90 	vmov	s15, r5
 801e0ee:	e709      	b.n	801df04 <node_convert_integer+0x154>
 801e0f0:	462c      	mov	r4, r5
 801e0f2:	f1bc 0f00 	cmp.w	ip, #0
 801e0f6:	f47f af3f 	bne.w	801df78 <node_convert_integer+0x1c8>
 801e0fa:	e74a      	b.n	801df92 <node_convert_integer+0x1e2>
 801e0fc:	461c      	mov	r4, r3
 801e0fe:	f1bc 0f00 	cmp.w	ip, #0
 801e102:	f47f aef0 	bne.w	801dee6 <node_convert_integer+0x136>
 801e106:	e7dd      	b.n	801e0c4 <node_convert_integer+0x314>
 801e108:	463e      	mov	r6, r7
 801e10a:	e788      	b.n	801e01e <node_convert_integer+0x26e>
 801e10c:	461c      	mov	r4, r3
 801e10e:	f1bc 0f00 	cmp.w	ip, #0
 801e112:	f47f aea4 	bne.w	801de5e <node_convert_integer+0xae>
 801e116:	e7d2      	b.n	801e0be <node_convert_integer+0x30e>
 801e118:	4635      	mov	r5, r6
 801e11a:	e773      	b.n	801e004 <node_convert_integer+0x254>
 801e11c:	00000000 	.word	0x00000000
 801e120:	3efffffc 	.word	0x3efffffc
 801e124:	ee07 3a90 	vmov	s15, r3
 801e128:	e79b      	b.n	801e062 <node_convert_integer+0x2b2>
 801e12a:	2b00      	cmp	r3, #0
 801e12c:	d057      	beq.n	801e1de <node_convert_integer+0x42e>
 801e12e:	009b      	lsls	r3, r3, #2
 801e130:	460f      	mov	r7, r1
 801e132:	f04f 1680 	mov.w	r6, #8388736	; 0x800080
 801e136:	eb00 0c03 	add.w	ip, r0, r3
 801e13a:	f850 4b04 	ldr.w	r4, [r0], #4
 801e13e:	ea4f 2534 	mov.w	r5, r4, ror #8
 801e142:	fa3f f585 	uxtb16	r5, r5
 801e146:	fad5 f506 	ssub16	r5, r5, r6
 801e14a:	fa3f f484 	uxtb16	r4, r4
 801e14e:	fad4 f406 	ssub16	r4, r4, r6
 801e152:	022d      	lsls	r5, r5, #8
 801e154:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801e158:	4560      	cmp	r0, ip
 801e15a:	f005 25ff 	and.w	r5, r5, #4278255360	; 0xff00ff00
 801e15e:	ea44 0405 	orr.w	r4, r4, r5
 801e162:	f847 4b04 	str.w	r4, [r7], #4
 801e166:	d1e8      	bne.n	801e13a <node_convert_integer+0x38a>
 801e168:	4419      	add	r1, r3
 801e16a:	f012 0203 	ands.w	r2, r2, #3
 801e16e:	f43f aea3 	beq.w	801deb8 <node_convert_integer+0x108>
 801e172:	f89c 3000 	ldrb.w	r3, [ip]
 801e176:	2a01      	cmp	r2, #1
 801e178:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 801e17c:	700b      	strb	r3, [r1, #0]
 801e17e:	f43f ae9b 	beq.w	801deb8 <node_convert_integer+0x108>
 801e182:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801e186:	2a03      	cmp	r2, #3
 801e188:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 801e18c:	704b      	strb	r3, [r1, #1]
 801e18e:	f47f ae93 	bne.w	801deb8 <node_convert_integer+0x108>
 801e192:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801e196:	3b80      	subs	r3, #128	; 0x80
 801e198:	708b      	strb	r3, [r1, #2]
 801e19a:	e68d      	b.n	801deb8 <node_convert_integer+0x108>
 801e19c:	b1fb      	cbz	r3, 801e1de <node_convert_integer+0x42e>
 801e19e:	009b      	lsls	r3, r3, #2
 801e1a0:	460f      	mov	r7, r1
 801e1a2:	f04f 1680 	mov.w	r6, #8388736	; 0x800080
 801e1a6:	eb00 0c03 	add.w	ip, r0, r3
 801e1aa:	f850 4b04 	ldr.w	r4, [r0], #4
 801e1ae:	ea4f 2534 	mov.w	r5, r4, ror #8
 801e1b2:	fa2f f585 	sxtb16	r5, r5
 801e1b6:	fa95 f506 	sadd16	r5, r5, r6
 801e1ba:	fa2f f484 	sxtb16	r4, r4
 801e1be:	fa94 f406 	sadd16	r4, r4, r6
 801e1c2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801e1c6:	4560      	cmp	r0, ip
 801e1c8:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 801e1cc:	f847 4b04 	str.w	r4, [r7], #4
 801e1d0:	d1eb      	bne.n	801e1aa <node_convert_integer+0x3fa>
 801e1d2:	e7c9      	b.n	801e168 <node_convert_integer+0x3b8>
 801e1d4:	ee07 5a90 	vmov	s15, r5
 801e1d8:	e743      	b.n	801e062 <node_convert_integer+0x2b2>
 801e1da:	461c      	mov	r4, r3
 801e1dc:	e730      	b.n	801e040 <node_convert_integer+0x290>
 801e1de:	4684      	mov	ip, r0
 801e1e0:	e7c3      	b.n	801e16a <node_convert_integer+0x3ba>
 801e1e2:	bf00      	nop

0801e1e4 <core_init>:
 801e1e4:	2001      	movs	r0, #1
 801e1e6:	4770      	bx	lr

0801e1e8 <core_set_error>:
 801e1e8:	4603      	mov	r3, r0
 801e1ea:	7800      	ldrb	r0, [r0, #0]
 801e1ec:	b930      	cbnz	r0, 801e1fc <core_set_error+0x14>
 801e1ee:	7019      	strb	r1, [r3, #0]
 801e1f0:	2001      	movs	r0, #1
 801e1f2:	6819      	ldr	r1, [r3, #0]
 801e1f4:	f362 211f 	bfi	r1, r2, #8, #24
 801e1f8:	6019      	str	r1, [r3, #0]
 801e1fa:	4770      	bx	lr
 801e1fc:	2000      	movs	r0, #0
 801e1fe:	4770      	bx	lr

0801e200 <ai_sum_f32>:
 801e200:	edd1 7a00 	vldr	s15, [r1]
 801e204:	ed92 7a00 	vldr	s14, [r2]
 801e208:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e20c:	edc0 7a00 	vstr	s15, [r0]
 801e210:	4770      	bx	lr
 801e212:	bf00      	nop

0801e214 <ai_sum_buffer_INT8>:
 801e214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e218:	b085      	sub	sp, #20
 801e21a:	461e      	mov	r6, r3
 801e21c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e21e:	08b6      	lsrs	r6, r6, #2
 801e220:	9300      	str	r3, [sp, #0]
 801e222:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e224:	f994 e000 	ldrsb.w	lr, [r4]
 801e228:	f993 9000 	ldrsb.w	r9, [r3]
 801e22c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e22e:	fa1f f78e 	uxth.w	r7, lr
 801e232:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e234:	fa1f fc89 	uxth.w	ip, r9
 801e238:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e23a:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 801e23e:	edd5 7a00 	vldr	s15, [r5]
 801e242:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 801e246:	ed94 7a00 	vldr	s14, [r4]
 801e24a:	f993 5000 	ldrsb.w	r5, [r3]
 801e24e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e250:	ee87 6a27 	vdiv.f32	s12, s14, s15
 801e254:	ee06 5a90 	vmov	s13, r5
 801e258:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e25a:	ed94 5a00 	vldr	s10, [r4]
 801e25e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801e262:	eec5 5a27 	vdiv.f32	s11, s10, s15
 801e266:	bb23      	cbnz	r3, 801e2b2 <ai_sum_buffer_INT8+0x9e>
 801e268:	eeb4 7a67 	vcmp.f32	s14, s15
 801e26c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e270:	f040 8126 	bne.w	801e4c0 <ai_sum_buffer_INT8+0x2ac>
 801e274:	45ae      	cmp	lr, r5
 801e276:	f040 8123 	bne.w	801e4c0 <ai_sum_buffer_INT8+0x2ac>
 801e27a:	eeb4 5a67 	vcmp.f32	s10, s15
 801e27e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e282:	f040 811d 	bne.w	801e4c0 <ai_sum_buffer_INT8+0x2ac>
 801e286:	45a9      	cmp	r9, r5
 801e288:	f040 811a 	bne.w	801e4c0 <ai_sum_buffer_INT8+0x2ac>
 801e28c:	9b00      	ldr	r3, [sp, #0]
 801e28e:	b16b      	cbz	r3, 801e2ac <ai_sum_buffer_INT8+0x98>
 801e290:	440b      	add	r3, r1
 801e292:	461e      	mov	r6, r3
 801e294:	f911 3b01 	ldrsb.w	r3, [r1], #1
 801e298:	f912 4b01 	ldrsb.w	r4, [r2], #1
 801e29c:	4423      	add	r3, r4
 801e29e:	1b5b      	subs	r3, r3, r5
 801e2a0:	f303 0307 	ssat	r3, #8, r3
 801e2a4:	42b1      	cmp	r1, r6
 801e2a6:	f800 3b01 	strb.w	r3, [r0], #1
 801e2aa:	d1f3      	bne.n	801e294 <ai_sum_buffer_INT8+0x80>
 801e2ac:	b005      	add	sp, #20
 801e2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2b2:	2b01      	cmp	r3, #1
 801e2b4:	f000 8240 	beq.w	801e738 <ai_sum_buffer_INT8+0x524>
 801e2b8:	f992 3000 	ldrsb.w	r3, [r2]
 801e2bc:	eba3 0909 	sub.w	r9, r3, r9
 801e2c0:	ee07 9a90 	vmov	s15, r9
 801e2c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e2c8:	eee7 6aa5 	vfma.f32	s13, s15, s11
 801e2cc:	2e00      	cmp	r6, #0
 801e2ce:	f000 8328 	beq.w	801e922 <ai_sum_buffer_INT8+0x70e>
 801e2d2:	ea4f 0c86 	mov.w	ip, r6, lsl #2
 801e2d6:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 801e2da:	4606      	mov	r6, r0
 801e2dc:	eddf 5a77 	vldr	s11, [pc, #476]	; 801e4bc <ai_sum_buffer_INT8+0x2a8>
 801e2e0:	eb01 080c 	add.w	r8, r1, ip
 801e2e4:	f851 3b04 	ldr.w	r3, [r1], #4
 801e2e8:	fa2f f283 	sxtb16	r2, r3
 801e2ec:	ea4f 2333 	mov.w	r3, r3, ror #8
 801e2f0:	fa2f f383 	sxtb16	r3, r3
 801e2f4:	fad3 f407 	ssub16	r4, r3, r7
 801e2f8:	fad2 f207 	ssub16	r2, r2, r7
 801e2fc:	b213      	sxth	r3, r2
 801e2fe:	eeb0 7a66 	vmov.f32	s14, s13
 801e302:	ee07 3a90 	vmov	s15, r3
 801e306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e30a:	eea7 7a86 	vfma.f32	s14, s15, s12
 801e30e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801e312:	eef0 7a47 	vmov.f32	s15, s14
 801e316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e31a:	fe35 7a25 	vselgt.f32	s14, s10, s11
 801e31e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e322:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e326:	ee17 9a90 	vmov	r9, s15
 801e32a:	f309 0907 	ssat	r9, #8, r9
 801e32e:	1412      	asrs	r2, r2, #16
 801e330:	eeb0 7a66 	vmov.f32	s14, s13
 801e334:	fa4f f989 	sxtb.w	r9, r9
 801e338:	ee07 2a90 	vmov	s15, r2
 801e33c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e340:	eea7 7a86 	vfma.f32	s14, s15, s12
 801e344:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801e348:	eef0 7a47 	vmov.f32	s15, s14
 801e34c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e350:	fe35 7a25 	vselgt.f32	s14, s10, s11
 801e354:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e358:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e35c:	ee17 3a90 	vmov	r3, s15
 801e360:	f303 0307 	ssat	r3, #8, r3
 801e364:	b222      	sxth	r2, r4
 801e366:	eeb0 7a66 	vmov.f32	s14, s13
 801e36a:	ee07 2a90 	vmov	s15, r2
 801e36e:	b25a      	sxtb	r2, r3
 801e370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e374:	eea7 7a86 	vfma.f32	s14, s15, s12
 801e378:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801e37c:	eef0 7a47 	vmov.f32	s15, s14
 801e380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e384:	fe35 7a25 	vselgt.f32	s14, s10, s11
 801e388:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e38c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e390:	ee17 5a90 	vmov	r5, s15
 801e394:	f305 0507 	ssat	r5, #8, r5
 801e398:	1423      	asrs	r3, r4, #16
 801e39a:	eeb0 7a66 	vmov.f32	s14, s13
 801e39e:	b26d      	sxtb	r5, r5
 801e3a0:	ee07 3a90 	vmov	s15, r3
 801e3a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e3a8:	eea7 7a86 	vfma.f32	s14, s15, s12
 801e3ac:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801e3b0:	eef0 7a47 	vmov.f32	s15, s14
 801e3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e3b8:	fe35 7a25 	vselgt.f32	s14, s10, s11
 801e3bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e3c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e3c4:	ee17 3a90 	vmov	r3, s15
 801e3c8:	f303 0407 	ssat	r4, #8, r3
 801e3cc:	0413      	lsls	r3, r2, #16
 801e3ce:	4541      	cmp	r1, r8
 801e3d0:	fa5f f989 	uxtb.w	r9, r9
 801e3d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801e3d8:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801e3dc:	ea43 0309 	orr.w	r3, r3, r9
 801e3e0:	b292      	uxth	r2, r2
 801e3e2:	ea43 0302 	orr.w	r3, r3, r2
 801e3e6:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 801e3ea:	f846 3b04 	str.w	r3, [r6], #4
 801e3ee:	f47f af79 	bne.w	801e2e4 <ai_sum_buffer_INT8+0xd0>
 801e3f2:	4460      	add	r0, ip
 801e3f4:	9b00      	ldr	r3, [sp, #0]
 801e3f6:	f013 0303 	ands.w	r3, r3, #3
 801e3fa:	f43f af57 	beq.w	801e2ac <ai_sum_buffer_INT8+0x98>
 801e3fe:	f998 2000 	ldrsb.w	r2, [r8]
 801e402:	eeb0 5a66 	vmov.f32	s10, s13
 801e406:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801e40a:	eddf 5a2c 	vldr	s11, [pc, #176]	; 801e4bc <ai_sum_buffer_INT8+0x2a8>
 801e40e:	eba2 020e 	sub.w	r2, r2, lr
 801e412:	ee07 2a90 	vmov	s15, r2
 801e416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e41a:	eea7 5a86 	vfma.f32	s10, s15, s12
 801e41e:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801e422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e426:	fe77 7a25 	vselgt.f32	s15, s14, s11
 801e42a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801e42e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e432:	ee17 2a90 	vmov	r2, s15
 801e436:	f302 0207 	ssat	r2, #8, r2
 801e43a:	2b01      	cmp	r3, #1
 801e43c:	7002      	strb	r2, [r0, #0]
 801e43e:	f43f af35 	beq.w	801e2ac <ai_sum_buffer_INT8+0x98>
 801e442:	f998 2001 	ldrsb.w	r2, [r8, #1]
 801e446:	eeb0 5a66 	vmov.f32	s10, s13
 801e44a:	eba2 020e 	sub.w	r2, r2, lr
 801e44e:	ee07 2a90 	vmov	s15, r2
 801e452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e456:	eea6 5a27 	vfma.f32	s10, s12, s15
 801e45a:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801e45e:	eef0 7a45 	vmov.f32	s15, s10
 801e462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e466:	fe37 5a25 	vselgt.f32	s10, s14, s11
 801e46a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801e46e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e472:	ee17 2a90 	vmov	r2, s15
 801e476:	f302 0207 	ssat	r2, #8, r2
 801e47a:	2b02      	cmp	r3, #2
 801e47c:	7042      	strb	r2, [r0, #1]
 801e47e:	f43f af15 	beq.w	801e2ac <ai_sum_buffer_INT8+0x98>
 801e482:	f998 3002 	ldrsb.w	r3, [r8, #2]
 801e486:	eba3 0e0e 	sub.w	lr, r3, lr
 801e48a:	ee07 ea90 	vmov	s15, lr
 801e48e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e492:	eee7 6a86 	vfma.f32	s13, s15, s12
 801e496:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801e49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e49e:	fe37 7a25 	vselgt.f32	s14, s14, s11
 801e4a2:	ee77 6a26 	vadd.f32	s13, s14, s13
 801e4a6:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801e4aa:	ee16 3a90 	vmov	r3, s13
 801e4ae:	f303 0307 	ssat	r3, #8, r3
 801e4b2:	7083      	strb	r3, [r0, #2]
 801e4b4:	b005      	add	sp, #20
 801e4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4ba:	bf00      	nop
 801e4bc:	befffffc 	.word	0xbefffffc
 801e4c0:	2e00      	cmp	r6, #0
 801e4c2:	f000 822c 	beq.w	801e91e <ai_sum_buffer_INT8+0x70a>
 801e4c6:	00b3      	lsls	r3, r6, #2
 801e4c8:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 801e4cc:	4690      	mov	r8, r2
 801e4ce:	9203      	str	r2, [sp, #12]
 801e4d0:	9302      	str	r3, [sp, #8]
 801e4d2:	18cb      	adds	r3, r1, r3
 801e4d4:	4682      	mov	sl, r0
 801e4d6:	ed1f 5a07 	vldr	s10, [pc, #-28]	; 801e4bc <ai_sum_buffer_INT8+0x2a8>
 801e4da:	461a      	mov	r2, r3
 801e4dc:	9301      	str	r3, [sp, #4]
 801e4de:	f851 3b04 	ldr.w	r3, [r1], #4
 801e4e2:	f858 4b04 	ldr.w	r4, [r8], #4
 801e4e6:	ea4f 2633 	mov.w	r6, r3, ror #8
 801e4ea:	ea4f 2b34 	mov.w	fp, r4, ror #8
 801e4ee:	fa2f f383 	sxtb16	r3, r3
 801e4f2:	fa2f f686 	sxtb16	r6, r6
 801e4f6:	fa2f f484 	sxtb16	r4, r4
 801e4fa:	fa2f fb8b 	sxtb16	fp, fp
 801e4fe:	fad6 f607 	ssub16	r6, r6, r7
 801e502:	fad3 f307 	ssub16	r3, r3, r7
 801e506:	fadb fb0c 	ssub16	fp, fp, ip
 801e50a:	fad4 f40c 	ssub16	r4, r4, ip
 801e50e:	b225      	sxth	r5, r4
 801e510:	ee07 5a90 	vmov	s15, r5
 801e514:	b21d      	sxth	r5, r3
 801e516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e51a:	ee07 5a10 	vmov	s14, r5
 801e51e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e522:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801e526:	eee7 7a06 	vfma.f32	s15, s14, s12
 801e52a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e52e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e536:	fe34 7a85 	vselgt.f32	s14, s9, s10
 801e53a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e53e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e542:	ee17 5a90 	vmov	r5, s15
 801e546:	f305 0507 	ssat	r5, #8, r5
 801e54a:	1424      	asrs	r4, r4, #16
 801e54c:	141b      	asrs	r3, r3, #16
 801e54e:	ee07 4a90 	vmov	s15, r4
 801e552:	b26d      	sxtb	r5, r5
 801e554:	ee07 3a10 	vmov	s14, r3
 801e558:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e55c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e560:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801e564:	eee7 7a06 	vfma.f32	s15, s14, s12
 801e568:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e56c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e574:	fe34 7a85 	vselgt.f32	s14, s9, s10
 801e578:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e57c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e580:	ee17 3a90 	vmov	r3, s15
 801e584:	f303 0307 	ssat	r3, #8, r3
 801e588:	fa0f f48b 	sxth.w	r4, fp
 801e58c:	b25b      	sxtb	r3, r3
 801e58e:	ee07 4a90 	vmov	s15, r4
 801e592:	b234      	sxth	r4, r6
 801e594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e598:	ee07 4a10 	vmov	s14, r4
 801e59c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e5a0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801e5a4:	eee7 7a06 	vfma.f32	s15, s14, s12
 801e5a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e5ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e5b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e5b4:	fe34 7a85 	vselgt.f32	s14, s9, s10
 801e5b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e5bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e5c0:	ee17 4a90 	vmov	r4, s15
 801e5c4:	f304 0407 	ssat	r4, #8, r4
 801e5c8:	ea4f 4b2b 	mov.w	fp, fp, asr #16
 801e5cc:	1436      	asrs	r6, r6, #16
 801e5ce:	ee07 ba90 	vmov	s15, fp
 801e5d2:	b264      	sxtb	r4, r4
 801e5d4:	ee07 6a10 	vmov	s14, r6
 801e5d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e5dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e5e0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801e5e4:	eee7 7a06 	vfma.f32	s15, s14, s12
 801e5e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e5ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e5f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e5f4:	fe34 7a85 	vselgt.f32	s14, s9, s10
 801e5f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e5fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e600:	ee17 6a90 	vmov	r6, s15
 801e604:	f306 0607 	ssat	r6, #8, r6
 801e608:	041b      	lsls	r3, r3, #16
 801e60a:	4291      	cmp	r1, r2
 801e60c:	b2ed      	uxtb	r5, r5
 801e60e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801e612:	ea4f 2404 	mov.w	r4, r4, lsl #8
 801e616:	ea45 0503 	orr.w	r5, r5, r3
 801e61a:	b2a4      	uxth	r4, r4
 801e61c:	ea45 0504 	orr.w	r5, r5, r4
 801e620:	ea45 6506 	orr.w	r5, r5, r6, lsl #24
 801e624:	f84a 5b04 	str.w	r5, [sl], #4
 801e628:	f47f af59 	bne.w	801e4de <ai_sum_buffer_INT8+0x2ca>
 801e62c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801e630:	441a      	add	r2, r3
 801e632:	4418      	add	r0, r3
 801e634:	9b00      	ldr	r3, [sp, #0]
 801e636:	f013 0303 	ands.w	r3, r3, #3
 801e63a:	f43f ae37 	beq.w	801e2ac <ai_sum_buffer_INT8+0x98>
 801e63e:	f992 1000 	ldrsb.w	r1, [r2]
 801e642:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 801e646:	9d01      	ldr	r5, [sp, #4]
 801e648:	eba1 0109 	sub.w	r1, r1, r9
 801e64c:	ed5f 4a65 	vldr	s9, [pc, #-404]	; 801e4bc <ai_sum_buffer_INT8+0x2a8>
 801e650:	ee07 1a90 	vmov	s15, r1
 801e654:	f995 1000 	ldrsb.w	r1, [r5]
 801e658:	eba1 010e 	sub.w	r1, r1, lr
 801e65c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e660:	ee07 1a10 	vmov	s14, r1
 801e664:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801e668:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e66c:	eee6 7a07 	vfma.f32	s15, s12, s14
 801e670:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e674:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e67c:	fe35 7a24 	vselgt.f32	s14, s10, s9
 801e680:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e684:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e688:	ee17 1a90 	vmov	r1, s15
 801e68c:	f301 0107 	ssat	r1, #8, r1
 801e690:	2b01      	cmp	r3, #1
 801e692:	7001      	strb	r1, [r0, #0]
 801e694:	f43f ae0a 	beq.w	801e2ac <ai_sum_buffer_INT8+0x98>
 801e698:	f992 1001 	ldrsb.w	r1, [r2, #1]
 801e69c:	f995 4001 	ldrsb.w	r4, [r5, #1]
 801e6a0:	eba1 0109 	sub.w	r1, r1, r9
 801e6a4:	eba4 040e 	sub.w	r4, r4, lr
 801e6a8:	ee07 1a90 	vmov	s15, r1
 801e6ac:	ee07 4a10 	vmov	s14, r4
 801e6b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e6b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e6b8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801e6bc:	eee6 7a07 	vfma.f32	s15, s12, s14
 801e6c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e6c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6cc:	fe35 7a24 	vselgt.f32	s14, s10, s9
 801e6d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e6d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e6d8:	ee17 1a90 	vmov	r1, s15
 801e6dc:	f301 0107 	ssat	r1, #8, r1
 801e6e0:	2b02      	cmp	r3, #2
 801e6e2:	7041      	strb	r1, [r0, #1]
 801e6e4:	f43f ade2 	beq.w	801e2ac <ai_sum_buffer_INT8+0x98>
 801e6e8:	f992 3002 	ldrsb.w	r3, [r2, #2]
 801e6ec:	f995 2002 	ldrsb.w	r2, [r5, #2]
 801e6f0:	eba3 0909 	sub.w	r9, r3, r9
 801e6f4:	eba2 0e0e 	sub.w	lr, r2, lr
 801e6f8:	ee07 9a90 	vmov	s15, r9
 801e6fc:	ee07 ea10 	vmov	s14, lr
 801e700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e704:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e708:	ee67 5aa5 	vmul.f32	s11, s15, s11
 801e70c:	eee7 5a06 	vfma.f32	s11, s14, s12
 801e710:	ee75 6aa6 	vadd.f32	s13, s11, s13
 801e714:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801e718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e71c:	fe35 5a24 	vselgt.f32	s10, s10, s9
 801e720:	ee75 6a26 	vadd.f32	s13, s10, s13
 801e724:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801e728:	ee16 3a90 	vmov	r3, s13
 801e72c:	f303 0307 	ssat	r3, #8, r3
 801e730:	7083      	strb	r3, [r0, #2]
 801e732:	b005      	add	sp, #20
 801e734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e738:	f991 3000 	ldrsb.w	r3, [r1]
 801e73c:	eba3 0e0e 	sub.w	lr, r3, lr
 801e740:	ee07 ea90 	vmov	s15, lr
 801e744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e748:	eee7 6a86 	vfma.f32	s13, s15, s12
 801e74c:	2e00      	cmp	r6, #0
 801e74e:	f000 80ea 	beq.w	801e926 <ai_sum_buffer_INT8+0x712>
 801e752:	00b6      	lsls	r6, r6, #2
 801e754:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 801e758:	4607      	mov	r7, r0
 801e75a:	ed1f 6aa8 	vldr	s12, [pc, #-672]	; 801e4bc <ai_sum_buffer_INT8+0x2a8>
 801e75e:	eb02 0e06 	add.w	lr, r2, r6
 801e762:	f852 3b04 	ldr.w	r3, [r2], #4
 801e766:	fa2f f183 	sxtb16	r1, r3
 801e76a:	ea4f 2333 	mov.w	r3, r3, ror #8
 801e76e:	fa2f f383 	sxtb16	r3, r3
 801e772:	fad3 f40c 	ssub16	r4, r3, ip
 801e776:	fad1 f10c 	ssub16	r1, r1, ip
 801e77a:	b20b      	sxth	r3, r1
 801e77c:	eeb0 7a66 	vmov.f32	s14, s13
 801e780:	ee07 3a90 	vmov	s15, r3
 801e784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e788:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801e78c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801e790:	eef0 7a47 	vmov.f32	s15, s14
 801e794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e798:	fe35 7a06 	vselgt.f32	s14, s10, s12
 801e79c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e7a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e7a4:	ee17 8a90 	vmov	r8, s15
 801e7a8:	f308 0807 	ssat	r8, #8, r8
 801e7ac:	1409      	asrs	r1, r1, #16
 801e7ae:	eeb0 7a66 	vmov.f32	s14, s13
 801e7b2:	fa4f f888 	sxtb.w	r8, r8
 801e7b6:	ee07 1a90 	vmov	s15, r1
 801e7ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e7be:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801e7c2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801e7c6:	eef0 7a47 	vmov.f32	s15, s14
 801e7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e7ce:	fe35 7a06 	vselgt.f32	s14, s10, s12
 801e7d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e7d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e7da:	ee17 3a90 	vmov	r3, s15
 801e7de:	f303 0307 	ssat	r3, #8, r3
 801e7e2:	b221      	sxth	r1, r4
 801e7e4:	eeb0 7a66 	vmov.f32	s14, s13
 801e7e8:	ee07 1a90 	vmov	s15, r1
 801e7ec:	b259      	sxtb	r1, r3
 801e7ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e7f2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801e7f6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801e7fa:	eef0 7a47 	vmov.f32	s15, s14
 801e7fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e802:	fe35 7a06 	vselgt.f32	s14, s10, s12
 801e806:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e80a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e80e:	ee17 5a90 	vmov	r5, s15
 801e812:	f305 0507 	ssat	r5, #8, r5
 801e816:	1423      	asrs	r3, r4, #16
 801e818:	eeb0 7a66 	vmov.f32	s14, s13
 801e81c:	b26d      	sxtb	r5, r5
 801e81e:	ee07 3a90 	vmov	s15, r3
 801e822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e826:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801e82a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801e82e:	eef0 7a47 	vmov.f32	s15, s14
 801e832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e836:	fe35 7a06 	vselgt.f32	s14, s10, s12
 801e83a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e83e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e842:	ee17 3a90 	vmov	r3, s15
 801e846:	f303 0407 	ssat	r4, #8, r3
 801e84a:	040b      	lsls	r3, r1, #16
 801e84c:	4572      	cmp	r2, lr
 801e84e:	fa5f f888 	uxtb.w	r8, r8
 801e852:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801e856:	ea4f 2105 	mov.w	r1, r5, lsl #8
 801e85a:	ea43 0308 	orr.w	r3, r3, r8
 801e85e:	b289      	uxth	r1, r1
 801e860:	ea43 0301 	orr.w	r3, r3, r1
 801e864:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 801e868:	f847 3b04 	str.w	r3, [r7], #4
 801e86c:	f47f af79 	bne.w	801e762 <ai_sum_buffer_INT8+0x54e>
 801e870:	4430      	add	r0, r6
 801e872:	9b00      	ldr	r3, [sp, #0]
 801e874:	f013 0303 	ands.w	r3, r3, #3
 801e878:	f43f ad18 	beq.w	801e2ac <ai_sum_buffer_INT8+0x98>
 801e87c:	f99e 2000 	ldrsb.w	r2, [lr]
 801e880:	eeb0 5a66 	vmov.f32	s10, s13
 801e884:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801e888:	ed9f 6a28 	vldr	s12, [pc, #160]	; 801e92c <ai_sum_buffer_INT8+0x718>
 801e88c:	eba2 0209 	sub.w	r2, r2, r9
 801e890:	ee07 2a90 	vmov	s15, r2
 801e894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e898:	eea5 5aa7 	vfma.f32	s10, s11, s15
 801e89c:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801e8a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8a4:	fe77 7a06 	vselgt.f32	s15, s14, s12
 801e8a8:	ee77 7a85 	vadd.f32	s15, s15, s10
 801e8ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e8b0:	ee17 2a90 	vmov	r2, s15
 801e8b4:	f302 0207 	ssat	r2, #8, r2
 801e8b8:	2b01      	cmp	r3, #1
 801e8ba:	7002      	strb	r2, [r0, #0]
 801e8bc:	f43f acf6 	beq.w	801e2ac <ai_sum_buffer_INT8+0x98>
 801e8c0:	f99e 2001 	ldrsb.w	r2, [lr, #1]
 801e8c4:	eeb0 5a66 	vmov.f32	s10, s13
 801e8c8:	eba2 0209 	sub.w	r2, r2, r9
 801e8cc:	ee07 2a90 	vmov	s15, r2
 801e8d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e8d4:	eea7 5aa5 	vfma.f32	s10, s15, s11
 801e8d8:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801e8dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8e0:	fe77 7a06 	vselgt.f32	s15, s14, s12
 801e8e4:	ee77 7a85 	vadd.f32	s15, s15, s10
 801e8e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e8ec:	ee17 2a90 	vmov	r2, s15
 801e8f0:	f302 0207 	ssat	r2, #8, r2
 801e8f4:	2b02      	cmp	r3, #2
 801e8f6:	7042      	strb	r2, [r0, #1]
 801e8f8:	f43f acd8 	beq.w	801e2ac <ai_sum_buffer_INT8+0x98>
 801e8fc:	f99e 3002 	ldrsb.w	r3, [lr, #2]
 801e900:	eba3 0909 	sub.w	r9, r3, r9
 801e904:	ee07 9a90 	vmov	s15, r9
 801e908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e90c:	eee7 6aa5 	vfma.f32	s13, s15, s11
 801e910:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801e914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e918:	fe37 7a06 	vselgt.f32	s14, s14, s12
 801e91c:	e5c1      	b.n	801e4a2 <ai_sum_buffer_INT8+0x28e>
 801e91e:	9101      	str	r1, [sp, #4]
 801e920:	e688      	b.n	801e634 <ai_sum_buffer_INT8+0x420>
 801e922:	4688      	mov	r8, r1
 801e924:	e566      	b.n	801e3f4 <ai_sum_buffer_INT8+0x1e0>
 801e926:	4696      	mov	lr, r2
 801e928:	e7a3      	b.n	801e872 <ai_sum_buffer_INT8+0x65e>
 801e92a:	bf00      	nop
 801e92c:	befffffc 	.word	0xbefffffc

0801e930 <func_dummy>:
 801e930:	4770      	bx	lr
 801e932:	bf00      	nop

0801e934 <forward_conv2d_integer_SSSA_ch>:
 801e934:	6983      	ldr	r3, [r0, #24]
 801e936:	8819      	ldrh	r1, [r3, #0]
 801e938:	2900      	cmp	r1, #0
 801e93a:	f000 8163 	beq.w	801ec04 <forward_conv2d_integer_SSSA_ch+0x2d0>
 801e93e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e942:	685a      	ldr	r2, [r3, #4]
 801e944:	b0ad      	sub	sp, #180	; 0xb4
 801e946:	6853      	ldr	r3, [r2, #4]
 801e948:	2b00      	cmp	r3, #0
 801e94a:	f000 8296 	beq.w	801ee7a <forward_conv2d_integer_SSSA_ch+0x546>
 801e94e:	f8d3 e000 	ldr.w	lr, [r3]
 801e952:	2901      	cmp	r1, #1
 801e954:	f240 8144 	bls.w	801ebe0 <forward_conv2d_integer_SSSA_ch+0x2ac>
 801e958:	6913      	ldr	r3, [r2, #16]
 801e95a:	2b00      	cmp	r3, #0
 801e95c:	f000 8163 	beq.w	801ec26 <forward_conv2d_integer_SSSA_ch+0x2f2>
 801e960:	681b      	ldr	r3, [r3, #0]
 801e962:	9327      	str	r3, [sp, #156]	; 0x9c
 801e964:	2902      	cmp	r1, #2
 801e966:	f000 814f 	beq.w	801ec08 <forward_conv2d_integer_SSSA_ch+0x2d4>
 801e96a:	69d3      	ldr	r3, [r2, #28]
 801e96c:	2b00      	cmp	r3, #0
 801e96e:	f040 813d 	bne.w	801ebec <forward_conv2d_integer_SSSA_ch+0x2b8>
 801e972:	469c      	mov	ip, r3
 801e974:	f112 0418 	adds.w	r4, r2, #24
 801e978:	d007      	beq.n	801e98a <forward_conv2d_integer_SSSA_ch+0x56>
 801e97a:	8b14      	ldrh	r4, [r2, #24]
 801e97c:	2c01      	cmp	r4, #1
 801e97e:	f240 816b 	bls.w	801ec58 <forward_conv2d_integer_SSSA_ch+0x324>
 801e982:	2b00      	cmp	r3, #0
 801e984:	f000 8292 	beq.w	801eeac <forward_conv2d_integer_SSSA_ch+0x578>
 801e988:	685c      	ldr	r4, [r3, #4]
 801e98a:	2903      	cmp	r1, #3
 801e98c:	f000 812b 	beq.w	801ebe6 <forward_conv2d_integer_SSSA_ch+0x2b2>
 801e990:	6a41      	ldr	r1, [r0, #36]	; 0x24
 801e992:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801e994:	9124      	str	r1, [sp, #144]	; 0x90
 801e996:	2a00      	cmp	r2, #0
 801e998:	f000 8147 	beq.w	801ec2a <forward_conv2d_integer_SSSA_ch+0x2f6>
 801e99c:	6816      	ldr	r6, [r2, #0]
 801e99e:	2900      	cmp	r1, #0
 801e9a0:	f000 826f 	beq.w	801ee82 <forward_conv2d_integer_SSSA_ch+0x54e>
 801e9a4:	f8d2 b004 	ldr.w	fp, [r2, #4]
 801e9a8:	f8db 100c 	ldr.w	r1, [fp, #12]
 801e9ac:	f8de 200c 	ldr.w	r2, [lr, #12]
 801e9b0:	69a5      	ldr	r5, [r4, #24]
 801e9b2:	69b4      	ldr	r4, [r6, #24]
 801e9b4:	684e      	ldr	r6, [r1, #4]
 801e9b6:	6857      	ldr	r7, [r2, #4]
 801e9b8:	961d      	str	r6, [sp, #116]	; 0x74
 801e9ba:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 801e9bc:	fa1f f987 	uxth.w	r9, r7
 801e9c0:	f8dc a00c 	ldr.w	sl, [ip, #12]
 801e9c4:	68ad      	ldr	r5, [r5, #8]
 801e9c6:	9723      	str	r7, [sp, #140]	; 0x8c
 801e9c8:	9522      	str	r5, [sp, #136]	; 0x88
 801e9ca:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
 801e9ce:	68a5      	ldr	r5, [r4, #8]
 801e9d0:	68cc      	ldr	r4, [r1, #12]
 801e9d2:	6889      	ldr	r1, [r1, #8]
 801e9d4:	9713      	str	r7, [sp, #76]	; 0x4c
 801e9d6:	9418      	str	r4, [sp, #96]	; 0x60
 801e9d8:	911e      	str	r1, [sp, #120]	; 0x78
 801e9da:	e9d2 2802 	ldrd	r2, r8, [r2, #8]
 801e9de:	921f      	str	r2, [sp, #124]	; 0x7c
 801e9e0:	8832      	ldrh	r2, [r6, #0]
 801e9e2:	9221      	str	r2, [sp, #132]	; 0x84
 801e9e4:	88b2      	ldrh	r2, [r6, #4]
 801e9e6:	921a      	str	r2, [sp, #104]	; 0x68
 801e9e8:	f8da 2008 	ldr.w	r2, [sl, #8]
 801e9ec:	f8da a004 	ldr.w	sl, [sl, #4]
 801e9f0:	921c      	str	r2, [sp, #112]	; 0x70
 801e9f2:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 801e9f4:	9219      	str	r2, [sp, #100]	; 0x64
 801e9f6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801e9f8:	9220      	str	r2, [sp, #128]	; 0x80
 801e9fa:	69c2      	ldr	r2, [r0, #28]
 801e9fc:	9225      	str	r2, [sp, #148]	; 0x94
 801e9fe:	2b00      	cmp	r3, #0
 801ea00:	f000 80f7 	beq.w	801ebf2 <forward_conv2d_integer_SSSA_ch+0x2be>
 801ea04:	689e      	ldr	r6, [r3, #8]
 801ea06:	2e00      	cmp	r6, #0
 801ea08:	f000 80f3 	beq.w	801ebf2 <forward_conv2d_integer_SSSA_ch+0x2be>
 801ea0c:	69b3      	ldr	r3, [r6, #24]
 801ea0e:	2b00      	cmp	r3, #0
 801ea10:	bf08      	it	eq
 801ea12:	2600      	moveq	r6, #0
 801ea14:	f8dc 1000 	ldr.w	r1, [ip]
 801ea18:	f8de 2000 	ldr.w	r2, [lr]
 801ea1c:	f8db 3000 	ldr.w	r3, [fp]
 801ea20:	9128      	str	r1, [sp, #160]	; 0xa0
 801ea22:	2a00      	cmp	r2, #0
 801ea24:	f000 80be 	beq.w	801eba4 <forward_conv2d_integer_SSSA_ch+0x270>
 801ea28:	6851      	ldr	r1, [r2, #4]
 801ea2a:	2900      	cmp	r1, #0
 801ea2c:	f000 80ba 	beq.w	801eba4 <forward_conv2d_integer_SSSA_ch+0x270>
 801ea30:	8850      	ldrh	r0, [r2, #2]
 801ea32:	2800      	cmp	r0, #0
 801ea34:	f000 80b6 	beq.w	801eba4 <forward_conv2d_integer_SSSA_ch+0x270>
 801ea38:	6809      	ldr	r1, [r1, #0]
 801ea3a:	ed91 0a00 	vldr	s0, [r1]
 801ea3e:	b12b      	cbz	r3, 801ea4c <forward_conv2d_integer_SSSA_ch+0x118>
 801ea40:	6859      	ldr	r1, [r3, #4]
 801ea42:	b119      	cbz	r1, 801ea4c <forward_conv2d_integer_SSSA_ch+0x118>
 801ea44:	8858      	ldrh	r0, [r3, #2]
 801ea46:	2800      	cmp	r0, #0
 801ea48:	f040 8213 	bne.w	801ee72 <forward_conv2d_integer_SSSA_ch+0x53e>
 801ea4c:	eddf 0a83 	vldr	s1, [pc, #524]	; 801ec5c <forward_conv2d_integer_SSSA_ch+0x328>
 801ea50:	991c      	ldr	r1, [sp, #112]	; 0x70
 801ea52:	4551      	cmp	r1, sl
 801ea54:	f040 80a9 	bne.w	801ebaa <forward_conv2d_integer_SSSA_ch+0x276>
 801ea58:	9919      	ldr	r1, [sp, #100]	; 0x64
 801ea5a:	9820      	ldr	r0, [sp, #128]	; 0x80
 801ea5c:	4281      	cmp	r1, r0
 801ea5e:	f040 80a4 	bne.w	801ebaa <forward_conv2d_integer_SSSA_ch+0x276>
 801ea62:	9921      	ldr	r1, [sp, #132]	; 0x84
 801ea64:	981a      	ldr	r0, [sp, #104]	; 0x68
 801ea66:	4281      	cmp	r1, r0
 801ea68:	f040 809f 	bne.w	801ebaa <forward_conv2d_integer_SSSA_ch+0x276>
 801ea6c:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801ea6e:	4588      	cmp	r8, r1
 801ea70:	f040 809b 	bne.w	801ebaa <forward_conv2d_integer_SSSA_ch+0x276>
 801ea74:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ea76:	981e      	ldr	r0, [sp, #120]	; 0x78
 801ea78:	4281      	cmp	r1, r0
 801ea7a:	bf08      	it	eq
 801ea7c:	f1b9 0f03 	cmpeq.w	r9, #3
 801ea80:	bf0c      	ite	eq
 801ea82:	2401      	moveq	r4, #1
 801ea84:	2400      	movne	r4, #0
 801ea86:	f1ba 0f01 	cmp.w	sl, #1
 801ea8a:	9414      	str	r4, [sp, #80]	; 0x50
 801ea8c:	f000 8093 	beq.w	801ebb6 <forward_conv2d_integer_SSSA_ch+0x282>
 801ea90:	2100      	movs	r1, #0
 801ea92:	9114      	str	r1, [sp, #80]	; 0x50
 801ea94:	f8dc 0018 	ldr.w	r0, [ip, #24]
 801ea98:	f8de e018 	ldr.w	lr, [lr, #24]
 801ea9c:	6880      	ldr	r0, [r0, #8]
 801ea9e:	f8de 7008 	ldr.w	r7, [lr, #8]
 801eaa2:	9014      	str	r0, [sp, #80]	; 0x50
 801eaa4:	f8db 0018 	ldr.w	r0, [fp, #24]
 801eaa8:	971b      	str	r7, [sp, #108]	; 0x6c
 801eaaa:	6880      	ldr	r0, [r0, #8]
 801eaac:	9017      	str	r0, [sp, #92]	; 0x5c
 801eaae:	2a00      	cmp	r2, #0
 801eab0:	f000 8094 	beq.w	801ebdc <forward_conv2d_integer_SSSA_ch+0x2a8>
 801eab4:	6850      	ldr	r0, [r2, #4]
 801eab6:	2800      	cmp	r0, #0
 801eab8:	f000 81e1 	beq.w	801ee7e <forward_conv2d_integer_SSSA_ch+0x54a>
 801eabc:	8852      	ldrh	r2, [r2, #2]
 801eabe:	2a00      	cmp	r2, #0
 801eac0:	f000 808c 	beq.w	801ebdc <forward_conv2d_integer_SSSA_ch+0x2a8>
 801eac4:	6842      	ldr	r2, [r0, #4]
 801eac6:	f992 2000 	ldrsb.w	r2, [r2]
 801eaca:	9215      	str	r2, [sp, #84]	; 0x54
 801eacc:	b13b      	cbz	r3, 801eade <forward_conv2d_integer_SSSA_ch+0x1aa>
 801eace:	685a      	ldr	r2, [r3, #4]
 801ead0:	2a00      	cmp	r2, #0
 801ead2:	f000 81db 	beq.w	801ee8c <forward_conv2d_integer_SSSA_ch+0x558>
 801ead6:	885b      	ldrh	r3, [r3, #2]
 801ead8:	2b00      	cmp	r3, #0
 801eada:	f040 81c5 	bne.w	801ee68 <forward_conv2d_integer_SSSA_ch+0x534>
 801eade:	9316      	str	r3, [sp, #88]	; 0x58
 801eae0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eae2:	2b00      	cmp	r3, #0
 801eae4:	f000 8093 	beq.w	801ec0e <forward_conv2d_integer_SSSA_ch+0x2da>
 801eae8:	6858      	ldr	r0, [r3, #4]
 801eaea:	b100      	cbz	r0, 801eaee <forward_conv2d_integer_SSSA_ch+0x1ba>
 801eaec:	6800      	ldr	r0, [r0, #0]
 801eaee:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 801eaf2:	9323      	str	r3, [sp, #140]	; 0x8c
 801eaf4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801eaf6:	2b01      	cmp	r3, #1
 801eaf8:	f000 8091 	beq.w	801ec1e <forward_conv2d_integer_SSSA_ch+0x2ea>
 801eafc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801eafe:	4293      	cmp	r3, r2
 801eb00:	bf0c      	ite	eq
 801eb02:	2317      	moveq	r3, #23
 801eb04:	2300      	movne	r3, #0
 801eb06:	9329      	str	r3, [sp, #164]	; 0xa4
 801eb08:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801eb0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801eb0c:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
 801eb10:	fb03 f307 	mul.w	r3, r3, r7
 801eb14:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801eb16:	921d      	str	r2, [sp, #116]	; 0x74
 801eb18:	fb02 7303 	mla	r3, r2, r3, r7
 801eb1c:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801eb1e:	429f      	cmp	r7, r3
 801eb20:	d26d      	bcs.n	801ebfe <forward_conv2d_integer_SSSA_ch+0x2ca>
 801eb22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801eb24:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801eb26:	fb03 f308 	mul.w	r3, r3, r8
 801eb2a:	fb02 7303 	mla	r3, r2, r3, r7
 801eb2e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801eb30:	429a      	cmp	r2, r3
 801eb32:	bf2c      	ite	cs
 801eb34:	2300      	movcs	r3, #0
 801eb36:	2301      	movcc	r3, #1
 801eb38:	9326      	str	r3, [sp, #152]	; 0x98
 801eb3a:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 801eb3e:	fa1f fa8a 	uxth.w	sl, sl
 801eb42:	9f25      	ldr	r7, [sp, #148]	; 0x94
 801eb44:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eb46:	921c      	str	r2, [sp, #112]	; 0x70
 801eb48:	2f01      	cmp	r7, #1
 801eb4a:	fb1a f202 	smulbb	r2, sl, r2
 801eb4e:	885b      	ldrh	r3, [r3, #2]
 801eb50:	b292      	uxth	r2, r2
 801eb52:	d003      	beq.n	801eb5c <forward_conv2d_integer_SSSA_ch+0x228>
 801eb54:	46bc      	mov	ip, r7
 801eb56:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 801eb58:	45bc      	cmp	ip, r7
 801eb5a:	d06f      	beq.n	801ec3c <forward_conv2d_integer_SSSA_ch+0x308>
 801eb5c:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 801eb5e:	fb02 f207 	mul.w	r2, r2, r7
 801eb62:	2c00      	cmp	r4, #0
 801eb64:	f040 8194 	bne.w	801ee90 <forward_conv2d_integer_SSSA_ch+0x55c>
 801eb68:	2900      	cmp	r1, #0
 801eb6a:	f000 8191 	beq.w	801ee90 <forward_conv2d_integer_SSSA_ch+0x55c>
 801eb6e:	0094      	lsls	r4, r2, #2
 801eb70:	2b01      	cmp	r3, #1
 801eb72:	d960      	bls.n	801ec36 <forward_conv2d_integer_SSSA_ch+0x302>
 801eb74:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801eb76:	0093      	lsls	r3, r2, #2
 801eb78:	189a      	adds	r2, r3, r2
 801eb7a:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 801eb7e:	18eb      	adds	r3, r5, r3
 801eb80:	462a      	mov	r2, r5
 801eb82:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801eb84:	9325      	str	r3, [sp, #148]	; 0x94
 801eb86:	f001 faff 	bl	8020188 <align_factor_ch>
 801eb8a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801eb8c:	3b15      	subs	r3, #21
 801eb8e:	e9cd 542a 	strd	r5, r4, [sp, #168]	; 0xa8
 801eb92:	2b03      	cmp	r3, #3
 801eb94:	f200 818c 	bhi.w	801eeb0 <forward_conv2d_integer_SSSA_ch+0x57c>
 801eb98:	e8df f013 	tbh	[pc, r3, lsl #1]
 801eb9c:	00e4013d 	.word	0x00e4013d
 801eba0:	006200ae 	.word	0x006200ae
 801eba4:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 801ec5c <forward_conv2d_integer_SSSA_ch+0x328>
 801eba8:	e749      	b.n	801ea3e <forward_conv2d_integer_SSSA_ch+0x10a>
 801ebaa:	2400      	movs	r4, #0
 801ebac:	f1ba 0f01 	cmp.w	sl, #1
 801ebb0:	9414      	str	r4, [sp, #80]	; 0x50
 801ebb2:	f47f af6d 	bne.w	801ea90 <forward_conv2d_integer_SSSA_ch+0x15c>
 801ebb6:	991c      	ldr	r1, [sp, #112]	; 0x70
 801ebb8:	2901      	cmp	r1, #1
 801ebba:	f47f af69 	bne.w	801ea90 <forward_conv2d_integer_SSSA_ch+0x15c>
 801ebbe:	9921      	ldr	r1, [sp, #132]	; 0x84
 801ebc0:	981a      	ldr	r0, [sp, #104]	; 0x68
 801ebc2:	4301      	orrs	r1, r0
 801ebc4:	f47f af64 	bne.w	801ea90 <forward_conv2d_integer_SSSA_ch+0x15c>
 801ebc8:	9919      	ldr	r1, [sp, #100]	; 0x64
 801ebca:	9820      	ldr	r0, [sp, #128]	; 0x80
 801ebcc:	2901      	cmp	r1, #1
 801ebce:	bf08      	it	eq
 801ebd0:	2801      	cmpeq	r0, #1
 801ebd2:	bf0c      	ite	eq
 801ebd4:	2101      	moveq	r1, #1
 801ebd6:	2100      	movne	r1, #0
 801ebd8:	9114      	str	r1, [sp, #80]	; 0x50
 801ebda:	e75b      	b.n	801ea94 <forward_conv2d_integer_SSSA_ch+0x160>
 801ebdc:	9215      	str	r2, [sp, #84]	; 0x54
 801ebde:	e775      	b.n	801eacc <forward_conv2d_integer_SSSA_ch+0x198>
 801ebe0:	2300      	movs	r3, #0
 801ebe2:	685b      	ldr	r3, [r3, #4]
 801ebe4:	deff      	udf	#255	; 0xff
 801ebe6:	2300      	movs	r3, #0
 801ebe8:	685b      	ldr	r3, [r3, #4]
 801ebea:	deff      	udf	#255	; 0xff
 801ebec:	f8d3 c000 	ldr.w	ip, [r3]
 801ebf0:	e6c0      	b.n	801e974 <forward_conv2d_integer_SSSA_ch+0x40>
 801ebf2:	6a06      	ldr	r6, [r0, #32]
 801ebf4:	2e00      	cmp	r6, #0
 801ebf6:	f43f af0d 	beq.w	801ea14 <forward_conv2d_integer_SSSA_ch+0xe0>
 801ebfa:	68b6      	ldr	r6, [r6, #8]
 801ebfc:	e70a      	b.n	801ea14 <forward_conv2d_integer_SSSA_ch+0xe0>
 801ebfe:	2300      	movs	r3, #0
 801ec00:	9326      	str	r3, [sp, #152]	; 0x98
 801ec02:	e79a      	b.n	801eb3a <forward_conv2d_integer_SSSA_ch+0x206>
 801ec04:	684b      	ldr	r3, [r1, #4]
 801ec06:	deff      	udf	#255	; 0xff
 801ec08:	2300      	movs	r3, #0
 801ec0a:	685b      	ldr	r3, [r3, #4]
 801ec0c:	deff      	udf	#255	; 0xff
 801ec0e:	4618      	mov	r0, r3
 801ec10:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 801ec14:	9323      	str	r3, [sp, #140]	; 0x8c
 801ec16:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ec18:	2b01      	cmp	r3, #1
 801ec1a:	f47f af6f 	bne.w	801eafc <forward_conv2d_integer_SSSA_ch+0x1c8>
 801ec1e:	b1a4      	cbz	r4, 801ec4a <forward_conv2d_integer_SSSA_ch+0x316>
 801ec20:	2315      	movs	r3, #21
 801ec22:	9329      	str	r3, [sp, #164]	; 0xa4
 801ec24:	e770      	b.n	801eb08 <forward_conv2d_integer_SSSA_ch+0x1d4>
 801ec26:	9327      	str	r3, [sp, #156]	; 0x9c
 801ec28:	e69c      	b.n	801e964 <forward_conv2d_integer_SSSA_ch+0x30>
 801ec2a:	460b      	mov	r3, r1
 801ec2c:	b909      	cbnz	r1, 801ec32 <forward_conv2d_integer_SSSA_ch+0x2fe>
 801ec2e:	699b      	ldr	r3, [r3, #24]
 801ec30:	deff      	udf	#255	; 0xff
 801ec32:	68d3      	ldr	r3, [r2, #12]
 801ec34:	deff      	udf	#255	; 0xff
 801ec36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ec38:	009b      	lsls	r3, r3, #2
 801ec3a:	e7a0      	b.n	801eb7e <forward_conv2d_integer_SSSA_ch+0x24a>
 801ec3c:	991d      	ldr	r1, [sp, #116]	; 0x74
 801ec3e:	fb01 f202 	mul.w	r2, r1, r2
 801ec42:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ec46:	1c54      	adds	r4, r2, #1
 801ec48:	e792      	b.n	801eb70 <forward_conv2d_integer_SSSA_ch+0x23c>
 801ec4a:	2900      	cmp	r1, #0
 801ec4c:	460b      	mov	r3, r1
 801ec4e:	bf0c      	ite	eq
 801ec50:	2318      	moveq	r3, #24
 801ec52:	2316      	movne	r3, #22
 801ec54:	9329      	str	r3, [sp, #164]	; 0xa4
 801ec56:	e757      	b.n	801eb08 <forward_conv2d_integer_SSSA_ch+0x1d4>
 801ec58:	2400      	movs	r4, #0
 801ec5a:	e696      	b.n	801e98a <forward_conv2d_integer_SSSA_ch+0x56>
 801ec5c:	00000000 	.word	0x00000000
 801ec60:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801ec62:	4653      	mov	r3, sl
 801ec64:	9922      	ldr	r1, [sp, #136]	; 0x88
 801ec66:	4648      	mov	r0, r9
 801ec68:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801ec6a:	9702      	str	r7, [sp, #8]
 801ec6c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ec6e:	9101      	str	r1, [sp, #4]
 801ec70:	9400      	str	r4, [sp, #0]
 801ec72:	9914      	ldr	r1, [sp, #80]	; 0x50
 801ec74:	9503      	str	r5, [sp, #12]
 801ec76:	f002 f923 	bl	8020ec0 <st_sssa8_ch_convolve_rank1upd>
 801ec7a:	970b      	str	r7, [sp, #44]	; 0x2c
 801ec7c:	9f20      	ldr	r7, [sp, #128]	; 0x80
 801ec7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ec80:	9707      	str	r7, [sp, #28]
 801ec82:	9f19      	ldr	r7, [sp, #100]	; 0x64
 801ec84:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801ec86:	9706      	str	r7, [sp, #24]
 801ec88:	9f21      	ldr	r7, [sp, #132]	; 0x84
 801ec8a:	9822      	ldr	r0, [sp, #136]	; 0x88
 801ec8c:	9705      	str	r7, [sp, #20]
 801ec8e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801ec90:	930d      	str	r3, [sp, #52]	; 0x34
 801ec92:	9704      	str	r7, [sp, #16]
 801ec94:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801ec96:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 801ec9a:	920c      	str	r2, [sp, #48]	; 0x30
 801ec9c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801ec9e:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 801eca2:	930e      	str	r3, [sp, #56]	; 0x38
 801eca4:	464b      	mov	r3, r9
 801eca6:	920a      	str	r2, [sp, #40]	; 0x28
 801eca8:	fa1f f288 	uxth.w	r2, r8
 801ecac:	9008      	str	r0, [sp, #32]
 801ecae:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 801ecb2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801ecb4:	9509      	str	r5, [sp, #36]	; 0x24
 801ecb6:	e9cd a702 	strd	sl, r7, [sp, #8]
 801ecba:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801ecbc:	9701      	str	r7, [sp, #4]
 801ecbe:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801ecc0:	e9cd 450f 	strd	r4, r5, [sp, #60]	; 0x3c
 801ecc4:	9700      	str	r7, [sp, #0]
 801ecc6:	f002 f983 	bl	8020fd0 <st_sssa8_ch_convolve>
 801ecca:	f8db 3008 	ldr.w	r3, [fp, #8]
 801ecce:	0a1b      	lsrs	r3, r3, #8
 801ecd0:	d046      	beq.n	801ed60 <forward_conv2d_integer_SSSA_ch+0x42c>
 801ecd2:	f8db 100c 	ldr.w	r1, [fp, #12]
 801ecd6:	2201      	movs	r2, #1
 801ecd8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801ecdc:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 801ece0:	4299      	cmp	r1, r3
 801ece2:	fb00 f202 	mul.w	r2, r0, r2
 801ece6:	d1f9      	bne.n	801ecdc <forward_conv2d_integer_SSSA_ch+0x3a8>
 801ece8:	4633      	mov	r3, r6
 801ecea:	4659      	mov	r1, fp
 801ecec:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801ecee:	9c24      	ldr	r4, [sp, #144]	; 0x90
 801ecf0:	47a0      	blx	r4
 801ecf2:	b02d      	add	sp, #180	; 0xb4
 801ecf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ecf8:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 801ecfc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ecfe:	4652      	mov	r2, sl
 801ed00:	9500      	str	r5, [sp, #0]
 801ed02:	f001 fab7 	bl	8020274 <st_sssa8_ch_conv_dw_Wadapt>
 801ed06:	9f20      	ldr	r7, [sp, #128]	; 0x80
 801ed08:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801ed0a:	9707      	str	r7, [sp, #28]
 801ed0c:	9f19      	ldr	r7, [sp, #100]	; 0x64
 801ed0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ed10:	9706      	str	r7, [sp, #24]
 801ed12:	9f21      	ldr	r7, [sp, #132]	; 0x84
 801ed14:	920c      	str	r2, [sp, #48]	; 0x30
 801ed16:	9705      	str	r7, [sp, #20]
 801ed18:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801ed1a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801ed1c:	9704      	str	r7, [sp, #16]
 801ed1e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801ed20:	9822      	ldr	r0, [sp, #136]	; 0x88
 801ed22:	930d      	str	r3, [sp, #52]	; 0x34
 801ed24:	920b      	str	r2, [sp, #44]	; 0x2c
 801ed26:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 801ed2a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801ed2c:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 801ed30:	930e      	str	r3, [sp, #56]	; 0x38
 801ed32:	464b      	mov	r3, r9
 801ed34:	920a      	str	r2, [sp, #40]	; 0x28
 801ed36:	fa1f f288 	uxth.w	r2, r8
 801ed3a:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 801ed3e:	9008      	str	r0, [sp, #32]
 801ed40:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801ed42:	9509      	str	r5, [sp, #36]	; 0x24
 801ed44:	e9cd a702 	strd	sl, r7, [sp, #8]
 801ed48:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801ed4a:	9701      	str	r7, [sp, #4]
 801ed4c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801ed4e:	9700      	str	r7, [sp, #0]
 801ed50:	e9cd 450f 	strd	r4, r5, [sp, #60]	; 0x3c
 801ed54:	f001 fb4c 	bl	80203f0 <st_sssa8_ch_convolve_dw>
 801ed58:	f8db 3008 	ldr.w	r3, [fp, #8]
 801ed5c:	0a1b      	lsrs	r3, r3, #8
 801ed5e:	d1b8      	bne.n	801ecd2 <forward_conv2d_integer_SSSA_ch+0x39e>
 801ed60:	2201      	movs	r2, #1
 801ed62:	e7c1      	b.n	801ece8 <forward_conv2d_integer_SSSA_ch+0x3b4>
 801ed64:	ab2a      	add	r3, sp, #168	; 0xa8
 801ed66:	464a      	mov	r2, r9
 801ed68:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 801ed6c:	f003 faa2 	bl	80222b4 <st_sssa8_ch_convolve_1x1_WeightsPrefetch>
 801ed70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ed72:	2b00      	cmp	r3, #0
 801ed74:	f040 809d 	bne.w	801eeb2 <forward_conv2d_integer_SSSA_ch+0x57e>
 801ed78:	fa1f f388 	uxth.w	r3, r8
 801ed7c:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 801ed80:	f04f 0801 	mov.w	r8, #1
 801ed84:	9326      	str	r3, [sp, #152]	; 0x98
 801ed86:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801ed88:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801ed8a:	9513      	str	r5, [sp, #76]	; 0x4c
 801ed8c:	e9dd 321d 	ldrd	r3, r2, [sp, #116]	; 0x74
 801ed90:	fb02 f303 	mul.w	r3, r2, r3
 801ed94:	931d      	str	r3, [sp, #116]	; 0x74
 801ed96:	b28b      	uxth	r3, r1
 801ed98:	9328      	str	r3, [sp, #160]	; 0xa0
 801ed9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ed9c:	9423      	str	r4, [sp, #140]	; 0x8c
 801ed9e:	fb03 f301 	mul.w	r3, r3, r1
 801eda2:	931e      	str	r3, [sp, #120]	; 0x78
 801eda4:	b293      	uxth	r3, r2
 801eda6:	931f      	str	r3, [sp, #124]	; 0x7c
 801eda8:	2300      	movs	r3, #0
 801edaa:	9318      	str	r3, [sp, #96]	; 0x60
 801edac:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801edae:	3301      	adds	r3, #1
 801edb0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801edb2:	9509      	str	r5, [sp, #36]	; 0x24
 801edb4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801edb6:	940d      	str	r4, [sp, #52]	; 0x34
 801edb8:	442c      	add	r4, r5
 801edba:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 801edbe:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 801edc0:	9417      	str	r4, [sp, #92]	; 0x5c
 801edc2:	9c22      	ldr	r4, [sp, #136]	; 0x88
 801edc4:	9916      	ldr	r1, [sp, #88]	; 0x58
 801edc6:	9408      	str	r4, [sp, #32]
 801edc8:	4664      	mov	r4, ip
 801edca:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801edcc:	442c      	add	r4, r5
 801edce:	9825      	ldr	r0, [sp, #148]	; 0x94
 801edd0:	910c      	str	r1, [sp, #48]	; 0x30
 801edd2:	941b      	str	r4, [sp, #108]	; 0x6c
 801edd4:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801edd6:	9915      	ldr	r1, [sp, #84]	; 0x54
 801edd8:	9407      	str	r4, [sp, #28]
 801edda:	9c19      	ldr	r4, [sp, #100]	; 0x64
 801eddc:	9318      	str	r3, [sp, #96]	; 0x60
 801edde:	464b      	mov	r3, r9
 801ede0:	9406      	str	r4, [sp, #24]
 801ede2:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801ede4:	920e      	str	r2, [sp, #56]	; 0x38
 801ede6:	9405      	str	r4, [sp, #20]
 801ede8:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801edea:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801edec:	9404      	str	r4, [sp, #16]
 801edee:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801edf0:	910b      	str	r1, [sp, #44]	; 0x2c
 801edf2:	900a      	str	r0, [sp, #40]	; 0x28
 801edf4:	4660      	mov	r0, ip
 801edf6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801edf8:	e9cd a402 	strd	sl, r4, [sp, #8]
 801edfc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801edfe:	9701      	str	r7, [sp, #4]
 801ee00:	9400      	str	r4, [sp, #0]
 801ee02:	ac2a      	add	r4, sp, #168	; 0xa8
 801ee04:	9410      	str	r4, [sp, #64]	; 0x40
 801ee06:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 801ee08:	940f      	str	r4, [sp, #60]	; 0x3c
 801ee0a:	f003 fa67 	bl	80222dc <st_sssa8_ch_convolve_1x1>
 801ee0e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ee10:	4543      	cmp	r3, r8
 801ee12:	d3cb      	bcc.n	801edac <forward_conv2d_integer_SSSA_ch+0x478>
 801ee14:	e759      	b.n	801ecca <forward_conv2d_integer_SSSA_ch+0x396>
 801ee16:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ee18:	4653      	mov	r3, sl
 801ee1a:	9f22      	ldr	r7, [sp, #136]	; 0x88
 801ee1c:	4648      	mov	r0, r9
 801ee1e:	9402      	str	r4, [sp, #8]
 801ee20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ee22:	9914      	ldr	r1, [sp, #80]	; 0x50
 801ee24:	9503      	str	r5, [sp, #12]
 801ee26:	9701      	str	r7, [sp, #4]
 801ee28:	f8cd a000 	str.w	sl, [sp]
 801ee2c:	f002 f848 	bl	8020ec0 <st_sssa8_ch_convolve_rank1upd>
 801ee30:	9407      	str	r4, [sp, #28]
 801ee32:	9c19      	ldr	r4, [sp, #100]	; 0x64
 801ee34:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801ee36:	9403      	str	r4, [sp, #12]
 801ee38:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801ee3a:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
 801ee3e:	9825      	ldr	r0, [sp, #148]	; 0x94
 801ee40:	9109      	str	r1, [sp, #36]	; 0x24
 801ee42:	9916      	ldr	r1, [sp, #88]	; 0x58
 801ee44:	920a      	str	r2, [sp, #40]	; 0x28
 801ee46:	464a      	mov	r2, r9
 801ee48:	9108      	str	r1, [sp, #32]
 801ee4a:	fa1f f188 	uxth.w	r1, r8
 801ee4e:	9006      	str	r0, [sp, #24]
 801ee50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ee52:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801ee54:	950b      	str	r5, [sp, #44]	; 0x2c
 801ee56:	e9cd a401 	strd	sl, r4, [sp, #4]
 801ee5a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ee5c:	e9cd 7504 	strd	r7, r5, [sp, #16]
 801ee60:	9400      	str	r4, [sp, #0]
 801ee62:	f002 fe17 	bl	8021a94 <st_sssa8_ch_convolve_rgb>
 801ee66:	e730      	b.n	801ecca <forward_conv2d_integer_SSSA_ch+0x396>
 801ee68:	6853      	ldr	r3, [r2, #4]
 801ee6a:	f993 3000 	ldrsb.w	r3, [r3]
 801ee6e:	9316      	str	r3, [sp, #88]	; 0x58
 801ee70:	e636      	b.n	801eae0 <forward_conv2d_integer_SSSA_ch+0x1ac>
 801ee72:	6809      	ldr	r1, [r1, #0]
 801ee74:	edd1 0a00 	vldr	s1, [r1]
 801ee78:	e5ea      	b.n	801ea50 <forward_conv2d_integer_SSSA_ch+0x11c>
 801ee7a:	469e      	mov	lr, r3
 801ee7c:	e569      	b.n	801e952 <forward_conv2d_integer_SSSA_ch+0x1e>
 801ee7e:	9015      	str	r0, [sp, #84]	; 0x54
 801ee80:	e624      	b.n	801eacc <forward_conv2d_integer_SSSA_ch+0x198>
 801ee82:	4a0f      	ldr	r2, [pc, #60]	; (801eec0 <forward_conv2d_integer_SSSA_ch+0x58c>)
 801ee84:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 801ee88:	9224      	str	r2, [sp, #144]	; 0x90
 801ee8a:	e58d      	b.n	801e9a8 <forward_conv2d_integer_SSSA_ch+0x74>
 801ee8c:	9216      	str	r2, [sp, #88]	; 0x58
 801ee8e:	e627      	b.n	801eae0 <forward_conv2d_integer_SSSA_ch+0x1ac>
 801ee90:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801ee92:	4621      	mov	r1, r4
 801ee94:	4414      	add	r4, r2
 801ee96:	fb02 f101 	mul.w	r1, r2, r1
 801ee9a:	00a4      	lsls	r4, r4, #2
 801ee9c:	004a      	lsls	r2, r1, #1
 801ee9e:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 801eea2:	bfd4      	ite	le
 801eea4:	18a4      	addle	r4, r4, r2
 801eea6:	f504 54a0 	addgt.w	r4, r4, #5120	; 0x1400
 801eeaa:	e661      	b.n	801eb70 <forward_conv2d_integer_SSSA_ch+0x23c>
 801eeac:	461c      	mov	r4, r3
 801eeae:	e56c      	b.n	801e98a <forward_conv2d_integer_SSSA_ch+0x56>
 801eeb0:	e7fe      	b.n	801eeb0 <forward_conv2d_integer_SSSA_ch+0x57c>
 801eeb2:	f1b8 0f00 	cmp.w	r8, #0
 801eeb6:	f43f af08 	beq.w	801ecca <forward_conv2d_integer_SSSA_ch+0x396>
 801eeba:	9c26      	ldr	r4, [sp, #152]	; 0x98
 801eebc:	e763      	b.n	801ed86 <forward_conv2d_integer_SSSA_ch+0x452>
 801eebe:	bf00      	nop
 801eec0:	0801e931 	.word	0x0801e931

0801eec4 <forward_conv2d_nl_pool_integer_SSSA_ch>:
 801eec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eec8:	6983      	ldr	r3, [r0, #24]
 801eeca:	b0d5      	sub	sp, #340	; 0x154
 801eecc:	881e      	ldrh	r6, [r3, #0]
 801eece:	2e00      	cmp	r6, #0
 801eed0:	f000 81b9 	beq.w	801f246 <forward_conv2d_nl_pool_integer_SSSA_ch+0x382>
 801eed4:	6859      	ldr	r1, [r3, #4]
 801eed6:	684d      	ldr	r5, [r1, #4]
 801eed8:	2d00      	cmp	r5, #0
 801eeda:	f000 8360 	beq.w	801f59e <forward_conv2d_nl_pool_integer_SSSA_ch+0x6da>
 801eede:	682b      	ldr	r3, [r5, #0]
 801eee0:	9313      	str	r3, [sp, #76]	; 0x4c
 801eee2:	2e01      	cmp	r6, #1
 801eee4:	f240 81ac 	bls.w	801f240 <forward_conv2d_nl_pool_integer_SSSA_ch+0x37c>
 801eee8:	690b      	ldr	r3, [r1, #16]
 801eeea:	2b00      	cmp	r3, #0
 801eeec:	f000 82b2 	beq.w	801f454 <forward_conv2d_nl_pool_integer_SSSA_ch+0x590>
 801eef0:	681b      	ldr	r3, [r3, #0]
 801eef2:	931b      	str	r3, [sp, #108]	; 0x6c
 801eef4:	2e02      	cmp	r6, #2
 801eef6:	f000 81a3 	beq.w	801f240 <forward_conv2d_nl_pool_integer_SSSA_ch+0x37c>
 801eefa:	69cc      	ldr	r4, [r1, #28]
 801eefc:	2c00      	cmp	r4, #0
 801eefe:	f040 82a7 	bne.w	801f450 <forward_conv2d_nl_pool_integer_SSSA_ch+0x58c>
 801ef02:	4623      	mov	r3, r4
 801ef04:	f111 0218 	adds.w	r2, r1, #24
 801ef08:	d007      	beq.n	801ef1a <forward_conv2d_nl_pool_integer_SSSA_ch+0x56>
 801ef0a:	8b0a      	ldrh	r2, [r1, #24]
 801ef0c:	2a01      	cmp	r2, #1
 801ef0e:	f240 8375 	bls.w	801f5fc <forward_conv2d_nl_pool_integer_SSSA_ch+0x738>
 801ef12:	2c00      	cmp	r4, #0
 801ef14:	f000 8370 	beq.w	801f5f8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x734>
 801ef18:	6862      	ldr	r2, [r4, #4]
 801ef1a:	2e03      	cmp	r6, #3
 801ef1c:	f000 8190 	beq.w	801f240 <forward_conv2d_nl_pool_integer_SSSA_ch+0x37c>
 801ef20:	6a89      	ldr	r1, [r1, #40]	; 0x28
 801ef22:	2900      	cmp	r1, #0
 801ef24:	f000 8191 	beq.w	801f24a <forward_conv2d_nl_pool_integer_SSSA_ch+0x386>
 801ef28:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801ef2a:	680d      	ldr	r5, [r1, #0]
 801ef2c:	9630      	str	r6, [sp, #192]	; 0xc0
 801ef2e:	9516      	str	r5, [sp, #88]	; 0x58
 801ef30:	f8d1 b004 	ldr.w	fp, [r1, #4]
 801ef34:	2e00      	cmp	r6, #0
 801ef36:	f000 835a 	beq.w	801f5ee <forward_conv2d_nl_pool_integer_SSSA_ch+0x72a>
 801ef3a:	6889      	ldr	r1, [r1, #8]
 801ef3c:	911e      	str	r1, [sp, #120]	; 0x78
 801ef3e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801ef40:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 801ef44:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 801ef48:	f8db 100c 	ldr.w	r1, [fp, #12]
 801ef4c:	f8dc 7004 	ldr.w	r7, [ip, #4]
 801ef50:	6849      	ldr	r1, [r1, #4]
 801ef52:	b2bd      	uxth	r5, r7
 801ef54:	f8de 6000 	ldr.w	r6, [lr]
 801ef58:	9117      	str	r1, [sp, #92]	; 0x5c
 801ef5a:	951d      	str	r5, [sp, #116]	; 0x74
 801ef5c:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801ef5e:	9725      	str	r7, [sp, #148]	; 0x94
 801ef60:	68e9      	ldr	r1, [r5, #12]
 801ef62:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 801ef66:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801ef68:	9515      	str	r5, [sp, #84]	; 0x54
 801ef6a:	b2b5      	uxth	r5, r6
 801ef6c:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 801ef70:	9514      	str	r5, [sp, #80]	; 0x50
 801ef72:	b2bd      	uxth	r5, r7
 801ef74:	9521      	str	r5, [sp, #132]	; 0x84
 801ef76:	e9dc 5902 	ldrd	r5, r9, [ip, #8]
 801ef7a:	f8de c008 	ldr.w	ip, [lr, #8]
 801ef7e:	952d      	str	r5, [sp, #180]	; 0xb4
 801ef80:	f8be 5004 	ldrh.w	r5, [lr, #4]
 801ef84:	9522      	str	r5, [sp, #136]	; 0x88
 801ef86:	68cd      	ldr	r5, [r1, #12]
 801ef88:	6889      	ldr	r1, [r1, #8]
 801ef8a:	9532      	str	r5, [sp, #200]	; 0xc8
 801ef8c:	9138      	str	r1, [sp, #224]	; 0xe0
 801ef8e:	e9da 1801 	ldrd	r1, r8, [sl, #4]
 801ef92:	911a      	str	r1, [sp, #104]	; 0x68
 801ef94:	6d41      	ldr	r1, [r0, #84]	; 0x54
 801ef96:	6809      	ldr	r1, [r1, #0]
 801ef98:	9123      	str	r1, [sp, #140]	; 0x8c
 801ef9a:	6d41      	ldr	r1, [r0, #84]	; 0x54
 801ef9c:	6849      	ldr	r1, [r1, #4]
 801ef9e:	913b      	str	r1, [sp, #236]	; 0xec
 801efa0:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 801efa2:	9120      	str	r1, [sp, #128]	; 0x80
 801efa4:	69c1      	ldr	r1, [r0, #28]
 801efa6:	9126      	str	r1, [sp, #152]	; 0x98
 801efa8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801efaa:	9139      	str	r1, [sp, #228]	; 0xe4
 801efac:	6c81      	ldr	r1, [r0, #72]	; 0x48
 801efae:	913a      	str	r1, [sp, #232]	; 0xe8
 801efb0:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 801efb2:	9129      	str	r1, [sp, #164]	; 0xa4
 801efb4:	2c00      	cmp	r4, #0
 801efb6:	f000 8242 	beq.w	801f43e <forward_conv2d_nl_pool_integer_SSSA_ch+0x57a>
 801efba:	f8d4 a008 	ldr.w	sl, [r4, #8]
 801efbe:	f1ba 0f00 	cmp.w	sl, #0
 801efc2:	f000 823c 	beq.w	801f43e <forward_conv2d_nl_pool_integer_SSSA_ch+0x57a>
 801efc6:	f8da 1018 	ldr.w	r1, [sl, #24]
 801efca:	2900      	cmp	r1, #0
 801efcc:	bf08      	it	eq
 801efce:	f04f 0a00 	moveq.w	sl, #0
 801efd2:	fa1f fe86 	uxth.w	lr, r6
 801efd6:	902e      	str	r0, [sp, #184]	; 0xb8
 801efd8:	9219      	str	r2, [sp, #100]	; 0x64
 801efda:	a941      	add	r1, sp, #260	; 0x104
 801efdc:	fa1e f08c 	uxtah	r0, lr, ip
 801efe0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801efe2:	9150      	str	r1, [sp, #320]	; 0x140
 801efe4:	2400      	movs	r4, #0
 801efe6:	6996      	ldr	r6, [r2, #24]
 801efe8:	4448      	add	r0, r9
 801efea:	4611      	mov	r1, r2
 801efec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801eff0:	eba0 0508 	sub.w	r5, r0, r8
 801eff4:	931c      	str	r3, [sp, #112]	; 0x70
 801eff6:	924e      	str	r2, [sp, #312]	; 0x138
 801eff8:	f240 4201 	movw	r2, #1025	; 0x401
 801effc:	9518      	str	r5, [sp, #96]	; 0x60
 801effe:	b2bb      	uxth	r3, r7
 801f000:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801f002:	eb0e 0709 	add.w	r7, lr, r9
 801f006:	924f      	str	r2, [sp, #316]	; 0x13c
 801f008:	f240 4202 	movw	r2, #1026	; 0x402
 801f00c:	69ad      	ldr	r5, [r5, #24]
 801f00e:	f50d 7c8a 	add.w	ip, sp, #276	; 0x114
 801f012:	9251      	str	r2, [sp, #324]	; 0x144
 801f014:	f50d 7992 	add.w	r9, sp, #292	; 0x124
 801f018:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801f01a:	a84d      	add	r0, sp, #308	; 0x134
 801f01c:	9533      	str	r5, [sp, #204]	; 0xcc
 801f01e:	6c55      	ldr	r5, [r2, #68]	; 0x44
 801f020:	6d92      	ldr	r2, [r2, #88]	; 0x58
 801f022:	931f      	str	r3, [sp, #124]	; 0x7c
 801f024:	944d      	str	r4, [sp, #308]	; 0x134
 801f026:	9727      	str	r7, [sp, #156]	; 0x9c
 801f028:	9441      	str	r4, [sp, #260]	; 0x104
 801f02a:	f8db 7018 	ldr.w	r7, [fp, #24]
 801f02e:	9445      	str	r4, [sp, #276]	; 0x114
 801f030:	9442      	str	r4, [sp, #264]	; 0x108
 801f032:	9443      	str	r4, [sp, #268]	; 0x10c
 801f034:	9446      	str	r4, [sp, #280]	; 0x118
 801f036:	9444      	str	r4, [sp, #272]	; 0x110
 801f038:	9453      	str	r4, [sp, #332]	; 0x14c
 801f03a:	9447      	str	r4, [sp, #284]	; 0x11c
 801f03c:	9448      	str	r4, [sp, #288]	; 0x120
 801f03e:	f8cd c148 	str.w	ip, [sp, #328]	; 0x148
 801f042:	952a      	str	r5, [sp, #168]	; 0xa8
 801f044:	f9bd 408c 	ldrsh.w	r4, [sp, #140]	; 0x8c
 801f048:	923c      	str	r2, [sp, #240]	; 0xf0
 801f04a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801f04c:	fbb5 fcf3 	udiv	ip, r5, r3
 801f050:	f10c 0301 	add.w	r3, ip, #1
 801f054:	9328      	str	r3, [sp, #160]	; 0xa0
 801f056:	f006 fbbf 	bl	80257d8 <core_tensor_clone>
 801f05a:	4648      	mov	r0, r9
 801f05c:	4631      	mov	r1, r6
 801f05e:	f006 fbed 	bl	802583c <core_array_clone>
 801f062:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f064:	f8cd 914c 	str.w	r9, [sp, #332]	; 0x14c
 801f068:	6999      	ldr	r1, [r3, #24]
 801f06a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f06c:	f8d1 9008 	ldr.w	r9, [r1, #8]
 801f070:	6818      	ldr	r0, [r3, #0]
 801f072:	f8db 300c 	ldr.w	r3, [fp, #12]
 801f076:	f8db 1000 	ldr.w	r1, [fp]
 801f07a:	689b      	ldr	r3, [r3, #8]
 801f07c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801f07e:	932f      	str	r3, [sp, #188]	; 0xbc
 801f080:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f082:	f8d3 e000 	ldr.w	lr, [r3]
 801f086:	2800      	cmp	r0, #0
 801f088:	f000 80e1 	beq.w	801f24e <forward_conv2d_nl_pool_integer_SSSA_ch+0x38a>
 801f08c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 801f090:	f1bc 0f00 	cmp.w	ip, #0
 801f094:	f000 80db 	beq.w	801f24e <forward_conv2d_nl_pool_integer_SSSA_ch+0x38a>
 801f098:	8845      	ldrh	r5, [r0, #2]
 801f09a:	2d00      	cmp	r5, #0
 801f09c:	f000 80d7 	beq.w	801f24e <forward_conv2d_nl_pool_integer_SSSA_ch+0x38a>
 801f0a0:	f8dc c000 	ldr.w	ip, [ip]
 801f0a4:	ed9c 0a00 	vldr	s0, [ip]
 801f0a8:	2900      	cmp	r1, #0
 801f0aa:	f000 80d5 	beq.w	801f258 <forward_conv2d_nl_pool_integer_SSSA_ch+0x394>
 801f0ae:	f8d1 c004 	ldr.w	ip, [r1, #4]
 801f0b2:	f1bc 0f00 	cmp.w	ip, #0
 801f0b6:	f000 80cf 	beq.w	801f258 <forward_conv2d_nl_pool_integer_SSSA_ch+0x394>
 801f0ba:	884d      	ldrh	r5, [r1, #2]
 801f0bc:	2d00      	cmp	r5, #0
 801f0be:	f000 80cb 	beq.w	801f258 <forward_conv2d_nl_pool_integer_SSSA_ch+0x394>
 801f0c2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801f0c4:	f8dc c000 	ldr.w	ip, [ip]
 801f0c8:	2d01      	cmp	r5, #1
 801f0ca:	eddc 0a00 	vldr	s1, [ip]
 801f0ce:	f040 80c9 	bne.w	801f264 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3a0>
 801f0d2:	f1b8 0f01 	cmp.w	r8, #1
 801f0d6:	f040 80c5 	bne.w	801f264 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3a0>
 801f0da:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f0dc:	46ac      	mov	ip, r5
 801f0de:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801f0e0:	ea5c 0505 	orrs.w	r5, ip, r5
 801f0e4:	f040 80be 	bne.w	801f264 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3a0>
 801f0e8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801f0ea:	46ac      	mov	ip, r5
 801f0ec:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801f0ee:	f1bc 0f01 	cmp.w	ip, #1
 801f0f2:	bf08      	it	eq
 801f0f4:	2d01      	cmpeq	r5, #1
 801f0f6:	bf0c      	ite	eq
 801f0f8:	f04f 0c01 	moveq.w	ip, #1
 801f0fc:	f04f 0c00 	movne.w	ip, #0
 801f100:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f102:	699b      	ldr	r3, [r3, #24]
 801f104:	69ad      	ldr	r5, [r5, #24]
 801f106:	689b      	ldr	r3, [r3, #8]
 801f108:	6992      	ldr	r2, [r2, #24]
 801f10a:	68ad      	ldr	r5, [r5, #8]
 801f10c:	9319      	str	r3, [sp, #100]	; 0x64
 801f10e:	6893      	ldr	r3, [r2, #8]
 801f110:	9537      	str	r5, [sp, #220]	; 0xdc
 801f112:	9324      	str	r3, [sp, #144]	; 0x90
 801f114:	2800      	cmp	r0, #0
 801f116:	f000 81a1 	beq.w	801f45c <forward_conv2d_nl_pool_integer_SSSA_ch+0x598>
 801f11a:	6843      	ldr	r3, [r0, #4]
 801f11c:	2b00      	cmp	r3, #0
 801f11e:	f000 8264 	beq.w	801f5ea <forward_conv2d_nl_pool_integer_SSSA_ch+0x726>
 801f122:	8842      	ldrh	r2, [r0, #2]
 801f124:	2a00      	cmp	r2, #0
 801f126:	f000 8197 	beq.w	801f458 <forward_conv2d_nl_pool_integer_SSSA_ch+0x594>
 801f12a:	685b      	ldr	r3, [r3, #4]
 801f12c:	f993 3000 	ldrsb.w	r3, [r3]
 801f130:	9316      	str	r3, [sp, #88]	; 0x58
 801f132:	2900      	cmp	r1, #0
 801f134:	f000 8181 	beq.w	801f43a <forward_conv2d_nl_pool_integer_SSSA_ch+0x576>
 801f138:	684b      	ldr	r3, [r1, #4]
 801f13a:	2b00      	cmp	r3, #0
 801f13c:	f000 8253 	beq.w	801f5e6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x722>
 801f140:	884a      	ldrh	r2, [r1, #2]
 801f142:	2a00      	cmp	r2, #0
 801f144:	f000 8177 	beq.w	801f436 <forward_conv2d_nl_pool_integer_SSSA_ch+0x572>
 801f148:	685b      	ldr	r3, [r3, #4]
 801f14a:	f993 3000 	ldrsb.w	r3, [r3]
 801f14e:	9318      	str	r3, [sp, #96]	; 0x60
 801f150:	f1be 0f00 	cmp.w	lr, #0
 801f154:	f000 816d 	beq.w	801f432 <forward_conv2d_nl_pool_integer_SSSA_ch+0x56e>
 801f158:	f8de 0004 	ldr.w	r0, [lr, #4]
 801f15c:	b100      	cbz	r0, 801f160 <forward_conv2d_nl_pool_integer_SSSA_ch+0x29c>
 801f15e:	6800      	ldr	r0, [r0, #0]
 801f160:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801f164:	fa1f f188 	uxth.w	r1, r8
 801f168:	f8bd 5094 	ldrh.w	r5, [sp, #148]	; 0x94
 801f16c:	931c      	str	r3, [sp, #112]	; 0x70
 801f16e:	fb11 f303 	smulbb	r3, r1, r3
 801f172:	9525      	str	r5, [sp, #148]	; 0x94
 801f174:	b29d      	uxth	r5, r3
 801f176:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f178:	911a      	str	r1, [sp, #104]	; 0x68
 801f17a:	2b01      	cmp	r3, #1
 801f17c:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
 801f180:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801f184:	9113      	str	r1, [sp, #76]	; 0x4c
 801f186:	f000 8177 	beq.w	801f478 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5b4>
 801f18a:	9925      	ldr	r1, [sp, #148]	; 0x94
 801f18c:	428b      	cmp	r3, r1
 801f18e:	f000 816a 	beq.w	801f466 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5a2>
 801f192:	460b      	mov	r3, r1
 801f194:	2100      	movs	r1, #0
 801f196:	fb05 f303 	mul.w	r3, r5, r3
 801f19a:	912c      	str	r1, [sp, #176]	; 0xb0
 801f19c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801f19e:	fb03 f101 	mul.w	r1, r3, r1
 801f1a2:	0049      	lsls	r1, r1, #1
 801f1a4:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 801f1a8:	bfa8      	it	ge
 801f1aa:	f44f 51a0 	movge.w	r1, #5120	; 0x1400
 801f1ae:	f1bc 0f00 	cmp.w	ip, #0
 801f1b2:	f000 8176 	beq.w	801f4a2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5de>
 801f1b6:	009d      	lsls	r5, r3, #2
 801f1b8:	2a01      	cmp	r2, #1
 801f1ba:	f240 8151 	bls.w	801f460 <forward_conv2d_nl_pool_integer_SSSA_ch+0x59c>
 801f1be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f1c0:	0093      	lsls	r3, r2, #2
 801f1c2:	189a      	adds	r2, r3, r2
 801f1c4:	eb05 0542 	add.w	r5, r5, r2, lsl #1
 801f1c8:	444b      	add	r3, r9
 801f1ca:	464a      	mov	r2, r9
 801f1cc:	9915      	ldr	r1, [sp, #84]	; 0x54
 801f1ce:	932b      	str	r3, [sp, #172]	; 0xac
 801f1d0:	f000 ffda 	bl	8020188 <align_factor_ch>
 801f1d4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801f1d6:	f8cd 90fc 	str.w	r9, [sp, #252]	; 0xfc
 801f1da:	9540      	str	r5, [sp, #256]	; 0x100
 801f1dc:	2b00      	cmp	r3, #0
 801f1de:	f000 80f5 	beq.w	801f3cc <forward_conv2d_nl_pool_integer_SSSA_ch+0x508>
 801f1e2:	9d2f      	ldr	r5, [sp, #188]	; 0xbc
 801f1e4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f1e6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f1e8:	fb00 f005 	mul.w	r0, r0, r5
 801f1ec:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801f1ee:	4613      	mov	r3, r2
 801f1f0:	f8cd a0f4 	str.w	sl, [sp, #244]	; 0xf4
 801f1f4:	902f      	str	r0, [sp, #188]	; 0xbc
 801f1f6:	b2a8      	uxth	r0, r5
 801f1f8:	fb03 f301 	mul.w	r3, r3, r1
 801f1fc:	f8dd a0dc 	ldr.w	sl, [sp, #220]	; 0xdc
 801f200:	9026      	str	r0, [sp, #152]	; 0x98
 801f202:	2100      	movs	r1, #0
 801f204:	9825      	ldr	r0, [sp, #148]	; 0x94
 801f206:	9117      	str	r1, [sp, #92]	; 0x5c
 801f208:	fb00 f303 	mul.w	r3, r0, r3
 801f20c:	9125      	str	r1, [sp, #148]	; 0x94
 801f20e:	9335      	str	r3, [sp, #212]	; 0xd4
 801f210:	b293      	uxth	r3, r2
 801f212:	9431      	str	r4, [sp, #196]	; 0xc4
 801f214:	932d      	str	r3, [sp, #180]	; 0xb4
 801f216:	fb00 f302 	mul.w	r3, r0, r2
 801f21a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801f21e:	9336      	str	r3, [sp, #216]	; 0xd8
 801f220:	f9bd 30a8 	ldrsh.w	r3, [sp, #168]	; 0xa8
 801f224:	9334      	str	r3, [sp, #208]	; 0xd0
 801f226:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f228:	2b00      	cmp	r3, #0
 801f22a:	dd6a      	ble.n	801f302 <forward_conv2d_nl_pool_integer_SSSA_ch+0x43e>
 801f22c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f22e:	2b17      	cmp	r3, #23
 801f230:	f000 8186 	beq.w	801f540 <forward_conv2d_nl_pool_integer_SSSA_ch+0x67c>
 801f234:	2b18      	cmp	r3, #24
 801f236:	f000 813b 	beq.w	801f4b0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5ec>
 801f23a:	2b16      	cmp	r3, #22
 801f23c:	d015      	beq.n	801f26a <forward_conv2d_nl_pool_integer_SSSA_ch+0x3a6>
 801f23e:	e7fe      	b.n	801f23e <forward_conv2d_nl_pool_integer_SSSA_ch+0x37a>
 801f240:	2300      	movs	r3, #0
 801f242:	685b      	ldr	r3, [r3, #4]
 801f244:	deff      	udf	#255	; 0xff
 801f246:	6873      	ldr	r3, [r6, #4]
 801f248:	deff      	udf	#255	; 0xff
 801f24a:	68cb      	ldr	r3, [r1, #12]
 801f24c:	deff      	udf	#255	; 0xff
 801f24e:	ed9f 0a97 	vldr	s0, [pc, #604]	; 801f4ac <forward_conv2d_nl_pool_integer_SSSA_ch+0x5e8>
 801f252:	2900      	cmp	r1, #0
 801f254:	f47f af2b 	bne.w	801f0ae <forward_conv2d_nl_pool_integer_SSSA_ch+0x1ea>
 801f258:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801f25a:	eddf 0a94 	vldr	s1, [pc, #592]	; 801f4ac <forward_conv2d_nl_pool_integer_SSSA_ch+0x5e8>
 801f25e:	2d01      	cmp	r5, #1
 801f260:	f43f af37 	beq.w	801f0d2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x20e>
 801f264:	f04f 0c00 	mov.w	ip, #0
 801f268:	e74a      	b.n	801f100 <forward_conv2d_nl_pool_integer_SSSA_ch+0x23c>
 801f26a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f26c:	2b00      	cmp	r3, #0
 801f26e:	f040 81b7 	bne.w	801f5e0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x71c>
 801f272:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f274:	f10d 09fc 	add.w	r9, sp, #252	; 0xfc
 801f278:	429c      	cmp	r4, r3
 801f27a:	f000 81aa 	beq.w	801f5d2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x70e>
 801f27e:	9926      	ldr	r1, [sp, #152]	; 0x98
 801f280:	2201      	movs	r2, #1
 801f282:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801f284:	920f      	str	r2, [sp, #60]	; 0x3c
 801f286:	fa1f f288 	uxth.w	r2, r8
 801f28a:	910e      	str	r1, [sp, #56]	; 0x38
 801f28c:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801f290:	68b8      	ldr	r0, [r7, #8]
 801f292:	950c      	str	r5, [sp, #48]	; 0x30
 801f294:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f296:	900d      	str	r0, [sp, #52]	; 0x34
 801f298:	4650      	mov	r0, sl
 801f29a:	950b      	str	r5, [sp, #44]	; 0x2c
 801f29c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801f29e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f2a0:	950a      	str	r5, [sp, #40]	; 0x28
 801f2a2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f2a4:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801f2a6:	9509      	str	r5, [sp, #36]	; 0x24
 801f2a8:	9d24      	ldr	r5, [sp, #144]	; 0x90
 801f2aa:	9508      	str	r5, [sp, #32]
 801f2ac:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801f2ae:	9507      	str	r5, [sp, #28]
 801f2b0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801f2b2:	9506      	str	r5, [sp, #24]
 801f2b4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f2b6:	9505      	str	r5, [sp, #20]
 801f2b8:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801f2ba:	9504      	str	r5, [sp, #16]
 801f2bc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801f2be:	9503      	str	r5, [sp, #12]
 801f2c0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801f2c2:	9502      	str	r5, [sp, #8]
 801f2c4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801f2c6:	9501      	str	r5, [sp, #4]
 801f2c8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 801f2ca:	9500      	str	r5, [sp, #0]
 801f2cc:	f003 f806 	bl	80222dc <st_sssa8_ch_convolve_1x1>
 801f2d0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f2d2:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801f2d4:	428b      	cmp	r3, r1
 801f2d6:	f000 811e 	beq.w	801f516 <forward_conv2d_nl_pool_integer_SSSA_ch+0x652>
 801f2da:	1a5b      	subs	r3, r3, r1
 801f2dc:	4598      	cmp	r8, r3
 801f2de:	9327      	str	r3, [sp, #156]	; 0x9c
 801f2e0:	bf28      	it	cs
 801f2e2:	4698      	movcs	r8, r3
 801f2e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f2e6:	2b00      	cmp	r3, #0
 801f2e8:	f040 811d 	bne.w	801f526 <forward_conv2d_nl_pool_integer_SSSA_ch+0x662>
 801f2ec:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801f2ee:	449a      	add	sl, r3
 801f2f0:	3401      	adds	r4, #1
 801f2f2:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 801f2f4:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801f2f6:	4659      	mov	r1, fp
 801f2f8:	981e      	ldr	r0, [sp, #120]	; 0x78
 801f2fa:	b224      	sxth	r4, r4
 801f2fc:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 801f2fe:	47a8      	blx	r5
 801f300:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f302:	3b01      	subs	r3, #1
 801f304:	9328      	str	r3, [sp, #160]	; 0xa0
 801f306:	d46b      	bmi.n	801f3e0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x51c>
 801f308:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801f30a:	429c      	cmp	r4, r3
 801f30c:	db36      	blt.n	801f37c <forward_conv2d_nl_pool_integer_SSSA_ch+0x4b8>
 801f30e:	2001      	movs	r0, #1
 801f310:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 801f314:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801f316:	9007      	str	r0, [sp, #28]
 801f318:	9825      	ldr	r0, [sp, #148]	; 0x94
 801f31a:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
 801f31e:	f8dd 90c4 	ldr.w	r9, [sp, #196]	; 0xc4
 801f322:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801f324:	1a64      	subs	r4, r4, r1
 801f326:	9208      	str	r2, [sp, #32]
 801f328:	1a1a      	subs	r2, r3, r0
 801f32a:	f8bd 00e0 	ldrh.w	r0, [sp, #224]	; 0xe0
 801f32e:	3501      	adds	r5, #1
 801f330:	f8bd c0e8 	ldrh.w	ip, [sp, #232]	; 0xe8
 801f334:	b292      	uxth	r2, r2
 801f336:	9301      	str	r3, [sp, #4]
 801f338:	fa1f f389 	uxth.w	r3, r9
 801f33c:	9105      	str	r1, [sp, #20]
 801f33e:	b224      	sxth	r4, r4
 801f340:	f8bd 10ec 	ldrh.w	r1, [sp, #236]	; 0xec
 801f344:	9006      	str	r0, [sp, #24]
 801f346:	f8bd 00e4 	ldrh.w	r0, [sp, #228]	; 0xe4
 801f34a:	9102      	str	r1, [sp, #8]
 801f34c:	9000      	str	r0, [sp, #0]
 801f34e:	a84d      	add	r0, sp, #308	; 0x134
 801f350:	9926      	ldr	r1, [sp, #152]	; 0x98
 801f352:	9517      	str	r5, [sp, #92]	; 0x5c
 801f354:	9d3c      	ldr	r5, [sp, #240]	; 0xf0
 801f356:	e9cd 3c03 	strd	r3, ip, [sp, #12]
 801f35a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f35c:	47a8      	blx	r5
 801f35e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801f360:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 801f364:	464d      	mov	r5, r9
 801f366:	6951      	ldr	r1, [r2, #20]
 801f368:	9833      	ldr	r0, [sp, #204]	; 0xcc
 801f36a:	1aeb      	subs	r3, r5, r3
 801f36c:	68c9      	ldr	r1, [r1, #12]
 801f36e:	6882      	ldr	r2, [r0, #8]
 801f370:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f374:	440a      	add	r2, r1
 801f376:	b21b      	sxth	r3, r3
 801f378:	6082      	str	r2, [r0, #8]
 801f37a:	9331      	str	r3, [sp, #196]	; 0xc4
 801f37c:	f8db 3014 	ldr.w	r3, [fp, #20]
 801f380:	68ba      	ldr	r2, [r7, #8]
 801f382:	68db      	ldr	r3, [r3, #12]
 801f384:	eb02 0903 	add.w	r9, r2, r3
 801f388:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f38a:	f8c7 9008 	str.w	r9, [r7, #8]
 801f38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f390:	b13b      	cbz	r3, 801f3a2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4de>
 801f392:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f394:	695a      	ldr	r2, [r3, #20]
 801f396:	68b3      	ldr	r3, [r6, #8]
 801f398:	68d2      	ldr	r2, [r2, #12]
 801f39a:	4413      	add	r3, r2
 801f39c:	60b3      	str	r3, [r6, #8]
 801f39e:	f8d7 9008 	ldr.w	r9, [r7, #8]
 801f3a2:	68fb      	ldr	r3, [r7, #12]
 801f3a4:	4658      	mov	r0, fp
 801f3a6:	9337      	str	r3, [sp, #220]	; 0xdc
 801f3a8:	f006 f8c4 	bl	8025534 <get_tensor_byte_size>
 801f3ac:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 801f3ae:	4403      	add	r3, r0
 801f3b0:	4599      	cmp	r9, r3
 801f3b2:	d306      	bcc.n	801f3c2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4fe>
 801f3b4:	68fb      	ldr	r3, [r7, #12]
 801f3b6:	60bb      	str	r3, [r7, #8]
 801f3b8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f3bc:	b10b      	cbz	r3, 801f3c2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4fe>
 801f3be:	68f3      	ldr	r3, [r6, #12]
 801f3c0:	60b3      	str	r3, [r6, #8]
 801f3c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f3c4:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801f3c6:	4293      	cmp	r3, r2
 801f3c8:	f4ff af2d 	bcc.w	801f226 <forward_conv2d_nl_pool_integer_SSSA_ch+0x362>
 801f3cc:	68fb      	ldr	r3, [r7, #12]
 801f3ce:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 801f3d0:	60bb      	str	r3, [r7, #8]
 801f3d2:	68f3      	ldr	r3, [r6, #12]
 801f3d4:	60b3      	str	r3, [r6, #8]
 801f3d6:	68d3      	ldr	r3, [r2, #12]
 801f3d8:	6093      	str	r3, [r2, #8]
 801f3da:	b055      	add	sp, #340	; 0x154
 801f3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3e0:	e9d6 2102 	ldrd	r2, r1, [r6, #8]
 801f3e4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801f3e6:	fb03 2314 	mls	r3, r3, r4, r2
 801f3ea:	4299      	cmp	r1, r3
 801f3ec:	d901      	bls.n	801f3f2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x52e>
 801f3ee:	6870      	ldr	r0, [r6, #4]
 801f3f0:	4403      	add	r3, r0
 801f3f2:	4299      	cmp	r1, r3
 801f3f4:	d212      	bcs.n	801f41c <forward_conv2d_nl_pool_integer_SSSA_ch+0x558>
 801f3f6:	9834      	ldr	r0, [sp, #208]	; 0xd0
 801f3f8:	4284      	cmp	r4, r0
 801f3fa:	d00f      	beq.n	801f41c <forward_conv2d_nl_pool_integer_SSSA_ch+0x558>
 801f3fc:	6870      	ldr	r0, [r6, #4]
 801f3fe:	4401      	add	r1, r0
 801f400:	428b      	cmp	r3, r1
 801f402:	d20b      	bcs.n	801f41c <forward_conv2d_nl_pool_integer_SSSA_ch+0x558>
 801f404:	3a01      	subs	r2, #1
 801f406:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f408:	f813 1b01 	ldrb.w	r1, [r3], #1
 801f40c:	f802 1f01 	strb.w	r1, [r2, #1]!
 801f410:	68f1      	ldr	r1, [r6, #12]
 801f412:	6870      	ldr	r0, [r6, #4]
 801f414:	4401      	add	r1, r0
 801f416:	428b      	cmp	r3, r1
 801f418:	d3f6      	bcc.n	801f408 <forward_conv2d_nl_pool_integer_SSSA_ch+0x544>
 801f41a:	9513      	str	r5, [sp, #76]	; 0x4c
 801f41c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f41e:	b2a4      	uxth	r4, r4
 801f420:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f422:	4413      	add	r3, r2
 801f424:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f426:	1b1b      	subs	r3, r3, r4
 801f428:	4414      	add	r4, r2
 801f42a:	b21b      	sxth	r3, r3
 801f42c:	b224      	sxth	r4, r4
 801f42e:	9325      	str	r3, [sp, #148]	; 0x94
 801f430:	e76a      	b.n	801f308 <forward_conv2d_nl_pool_integer_SSSA_ch+0x444>
 801f432:	4670      	mov	r0, lr
 801f434:	e694      	b.n	801f160 <forward_conv2d_nl_pool_integer_SSSA_ch+0x29c>
 801f436:	9218      	str	r2, [sp, #96]	; 0x60
 801f438:	e68a      	b.n	801f150 <forward_conv2d_nl_pool_integer_SSSA_ch+0x28c>
 801f43a:	9118      	str	r1, [sp, #96]	; 0x60
 801f43c:	e688      	b.n	801f150 <forward_conv2d_nl_pool_integer_SSSA_ch+0x28c>
 801f43e:	f8d0 a020 	ldr.w	sl, [r0, #32]
 801f442:	f1ba 0f00 	cmp.w	sl, #0
 801f446:	f43f adc4 	beq.w	801efd2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x10e>
 801f44a:	f8da a008 	ldr.w	sl, [sl, #8]
 801f44e:	e5c0      	b.n	801efd2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x10e>
 801f450:	6823      	ldr	r3, [r4, #0]
 801f452:	e557      	b.n	801ef04 <forward_conv2d_nl_pool_integer_SSSA_ch+0x40>
 801f454:	931b      	str	r3, [sp, #108]	; 0x6c
 801f456:	e54d      	b.n	801eef4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x30>
 801f458:	9216      	str	r2, [sp, #88]	; 0x58
 801f45a:	e66a      	b.n	801f132 <forward_conv2d_nl_pool_integer_SSSA_ch+0x26e>
 801f45c:	9016      	str	r0, [sp, #88]	; 0x58
 801f45e:	e668      	b.n	801f132 <forward_conv2d_nl_pool_integer_SSSA_ch+0x26e>
 801f460:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f462:	009b      	lsls	r3, r3, #2
 801f464:	e6b0      	b.n	801f1c8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x304>
 801f466:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f468:	fb05 f503 	mul.w	r5, r5, r3
 801f46c:	2317      	movs	r3, #23
 801f46e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f472:	932c      	str	r3, [sp, #176]	; 0xb0
 801f474:	3501      	adds	r5, #1
 801f476:	e69f      	b.n	801f1b8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x2f4>
 801f478:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f47a:	f1bc 0f00 	cmp.w	ip, #0
 801f47e:	fb05 f303 	mul.w	r3, r5, r3
 801f482:	bf14      	ite	ne
 801f484:	2516      	movne	r5, #22
 801f486:	2518      	moveq	r5, #24
 801f488:	fb01 f103 	mul.w	r1, r1, r3
 801f48c:	952c      	str	r5, [sp, #176]	; 0xb0
 801f48e:	0049      	lsls	r1, r1, #1
 801f490:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 801f494:	bfa8      	it	ge
 801f496:	f44f 51a0 	movge.w	r1, #5120	; 0x1400
 801f49a:	f1bc 0f00 	cmp.w	ip, #0
 801f49e:	f47f ae8a 	bne.w	801f1b6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x2f2>
 801f4a2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f4a4:	195d      	adds	r5, r3, r5
 801f4a6:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 801f4aa:	e685      	b.n	801f1b8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x2f4>
 801f4ac:	00000000 	.word	0x00000000
 801f4b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f4b2:	b913      	cbnz	r3, 801f4ba <forward_conv2d_nl_pool_integer_SSSA_ch+0x5f6>
 801f4b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f4b6:	429c      	cmp	r4, r3
 801f4b8:	d07c      	beq.n	801f5b4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x6f0>
 801f4ba:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f4bc:	2201      	movs	r2, #1
 801f4be:	9926      	ldr	r1, [sp, #152]	; 0x98
 801f4c0:	9510      	str	r5, [sp, #64]	; 0x40
 801f4c2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801f4c4:	920f      	str	r2, [sp, #60]	; 0x3c
 801f4c6:	fa1f f288 	uxth.w	r2, r8
 801f4ca:	910e      	str	r1, [sp, #56]	; 0x38
 801f4cc:	68b8      	ldr	r0, [r7, #8]
 801f4ce:	950c      	str	r5, [sp, #48]	; 0x30
 801f4d0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f4d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f4d4:	950b      	str	r5, [sp, #44]	; 0x2c
 801f4d6:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801f4d8:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801f4da:	950a      	str	r5, [sp, #40]	; 0x28
 801f4dc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f4de:	900d      	str	r0, [sp, #52]	; 0x34
 801f4e0:	4650      	mov	r0, sl
 801f4e2:	9509      	str	r5, [sp, #36]	; 0x24
 801f4e4:	9d24      	ldr	r5, [sp, #144]	; 0x90
 801f4e6:	9508      	str	r5, [sp, #32]
 801f4e8:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801f4ea:	9507      	str	r5, [sp, #28]
 801f4ec:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801f4ee:	9506      	str	r5, [sp, #24]
 801f4f0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f4f2:	9505      	str	r5, [sp, #20]
 801f4f4:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801f4f6:	9504      	str	r5, [sp, #16]
 801f4f8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801f4fa:	9503      	str	r5, [sp, #12]
 801f4fc:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801f4fe:	9502      	str	r5, [sp, #8]
 801f500:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801f502:	9501      	str	r5, [sp, #4]
 801f504:	9d19      	ldr	r5, [sp, #100]	; 0x64
 801f506:	9500      	str	r5, [sp, #0]
 801f508:	f001 fd62 	bl	8020fd0 <st_sssa8_ch_convolve>
 801f50c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f50e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801f510:	428b      	cmp	r3, r1
 801f512:	f47f aee2 	bne.w	801f2da <forward_conv2d_nl_pool_integer_SSSA_ch+0x416>
 801f516:	f04f 0800 	mov.w	r8, #0
 801f51a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f51c:	f8cd 809c 	str.w	r8, [sp, #156]	; 0x9c
 801f520:	2b00      	cmp	r3, #0
 801f522:	f43f aee3 	beq.w	801f2ec <forward_conv2d_nl_pool_integer_SSSA_ch+0x428>
 801f526:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801f528:	1a9b      	subs	r3, r3, r2
 801f52a:	d504      	bpl.n	801f536 <forward_conv2d_nl_pool_integer_SSSA_ch+0x672>
 801f52c:	9914      	ldr	r1, [sp, #80]	; 0x50
 801f52e:	1a52      	subs	r2, r2, r1
 801f530:	9936      	ldr	r1, [sp, #216]	; 0xd8
 801f532:	fb01 aa02 	mla	sl, r1, r2, sl
 801f536:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f53a:	b29b      	uxth	r3, r3
 801f53c:	9314      	str	r3, [sp, #80]	; 0x50
 801f53e:	e6d7      	b.n	801f2f0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x42c>
 801f540:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f542:	b913      	cbnz	r3, 801f54a <forward_conv2d_nl_pool_integer_SSSA_ch+0x686>
 801f544:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f546:	429c      	cmp	r4, r3
 801f548:	d02b      	beq.n	801f5a2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x6de>
 801f54a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f54c:	2201      	movs	r2, #1
 801f54e:	9926      	ldr	r1, [sp, #152]	; 0x98
 801f550:	9510      	str	r5, [sp, #64]	; 0x40
 801f552:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801f554:	920f      	str	r2, [sp, #60]	; 0x3c
 801f556:	fa1f f288 	uxth.w	r2, r8
 801f55a:	910e      	str	r1, [sp, #56]	; 0x38
 801f55c:	68b8      	ldr	r0, [r7, #8]
 801f55e:	950c      	str	r5, [sp, #48]	; 0x30
 801f560:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f562:	900d      	str	r0, [sp, #52]	; 0x34
 801f564:	4650      	mov	r0, sl
 801f566:	950b      	str	r5, [sp, #44]	; 0x2c
 801f568:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801f56a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f56c:	950a      	str	r5, [sp, #40]	; 0x28
 801f56e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f570:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801f572:	9509      	str	r5, [sp, #36]	; 0x24
 801f574:	9d24      	ldr	r5, [sp, #144]	; 0x90
 801f576:	9508      	str	r5, [sp, #32]
 801f578:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801f57a:	9507      	str	r5, [sp, #28]
 801f57c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801f57e:	9506      	str	r5, [sp, #24]
 801f580:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f582:	9505      	str	r5, [sp, #20]
 801f584:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801f586:	9504      	str	r5, [sp, #16]
 801f588:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801f58a:	9503      	str	r5, [sp, #12]
 801f58c:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801f58e:	9502      	str	r5, [sp, #8]
 801f590:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801f592:	9501      	str	r5, [sp, #4]
 801f594:	9d19      	ldr	r5, [sp, #100]	; 0x64
 801f596:	9500      	str	r5, [sp, #0]
 801f598:	f000 ff2a 	bl	80203f0 <st_sssa8_ch_convolve_dw>
 801f59c:	e698      	b.n	801f2d0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x40c>
 801f59e:	9513      	str	r5, [sp, #76]	; 0x4c
 801f5a0:	e49f      	b.n	801eee2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x1e>
 801f5a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f5a4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801f5a6:	9300      	str	r3, [sp, #0]
 801f5a8:	9915      	ldr	r1, [sp, #84]	; 0x54
 801f5aa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f5ac:	9819      	ldr	r0, [sp, #100]	; 0x64
 801f5ae:	f000 fe61 	bl	8020274 <st_sssa8_ch_conv_dw_Wadapt>
 801f5b2:	e7ca      	b.n	801f54a <forward_conv2d_nl_pool_integer_SSSA_ch+0x686>
 801f5b4:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f5b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f5b8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f5ba:	9101      	str	r1, [sp, #4]
 801f5bc:	9303      	str	r3, [sp, #12]
 801f5be:	9202      	str	r2, [sp, #8]
 801f5c0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f5c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801f5c4:	e9dd 1019 	ldrd	r1, r0, [sp, #100]	; 0x64
 801f5c8:	9000      	str	r0, [sp, #0]
 801f5ca:	981d      	ldr	r0, [sp, #116]	; 0x74
 801f5cc:	f001 fc78 	bl	8020ec0 <st_sssa8_ch_convolve_rank1upd>
 801f5d0:	e773      	b.n	801f4ba <forward_conv2d_nl_pool_integer_SSSA_ch+0x5f6>
 801f5d2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801f5d4:	464b      	mov	r3, r9
 801f5d6:	9915      	ldr	r1, [sp, #84]	; 0x54
 801f5d8:	9819      	ldr	r0, [sp, #100]	; 0x64
 801f5da:	f002 fe6b 	bl	80222b4 <st_sssa8_ch_convolve_1x1_WeightsPrefetch>
 801f5de:	e64e      	b.n	801f27e <forward_conv2d_nl_pool_integer_SSSA_ch+0x3ba>
 801f5e0:	f10d 09fc 	add.w	r9, sp, #252	; 0xfc
 801f5e4:	e64b      	b.n	801f27e <forward_conv2d_nl_pool_integer_SSSA_ch+0x3ba>
 801f5e6:	9318      	str	r3, [sp, #96]	; 0x60
 801f5e8:	e5b2      	b.n	801f150 <forward_conv2d_nl_pool_integer_SSSA_ch+0x28c>
 801f5ea:	9316      	str	r3, [sp, #88]	; 0x58
 801f5ec:	e5a1      	b.n	801f132 <forward_conv2d_nl_pool_integer_SSSA_ch+0x26e>
 801f5ee:	4904      	ldr	r1, [pc, #16]	; (801f600 <forward_conv2d_nl_pool_integer_SSSA_ch+0x73c>)
 801f5f0:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
 801f5f4:	9130      	str	r1, [sp, #192]	; 0xc0
 801f5f6:	e4a2      	b.n	801ef3e <forward_conv2d_nl_pool_integer_SSSA_ch+0x7a>
 801f5f8:	4622      	mov	r2, r4
 801f5fa:	e48e      	b.n	801ef1a <forward_conv2d_nl_pool_integer_SSSA_ch+0x56>
 801f5fc:	2200      	movs	r2, #0
 801f5fe:	e48c      	b.n	801ef1a <forward_conv2d_nl_pool_integer_SSSA_ch+0x56>
 801f600:	0801e931 	.word	0x0801e931

0801f604 <forward_dense_integer_SSSA>:
 801f604:	6983      	ldr	r3, [r0, #24]
 801f606:	8818      	ldrh	r0, [r3, #0]
 801f608:	2800      	cmp	r0, #0
 801f60a:	f000 80b2 	beq.w	801f772 <forward_dense_integer_SSSA+0x16e>
 801f60e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f612:	685c      	ldr	r4, [r3, #4]
 801f614:	b093      	sub	sp, #76	; 0x4c
 801f616:	6863      	ldr	r3, [r4, #4]
 801f618:	b103      	cbz	r3, 801f61c <forward_dense_integer_SSSA+0x18>
 801f61a:	681b      	ldr	r3, [r3, #0]
 801f61c:	2801      	cmp	r0, #1
 801f61e:	f240 809f 	bls.w	801f760 <forward_dense_integer_SSSA+0x15c>
 801f622:	6922      	ldr	r2, [r4, #16]
 801f624:	b102      	cbz	r2, 801f628 <forward_dense_integer_SSSA+0x24>
 801f626:	6812      	ldr	r2, [r2, #0]
 801f628:	2802      	cmp	r0, #2
 801f62a:	f000 809f 	beq.w	801f76c <forward_dense_integer_SSSA+0x168>
 801f62e:	69e5      	ldr	r5, [r4, #28]
 801f630:	2d00      	cmp	r5, #0
 801f632:	f000 80ed 	beq.w	801f810 <forward_dense_integer_SSSA+0x20c>
 801f636:	6829      	ldr	r1, [r5, #0]
 801f638:	f114 0618 	adds.w	r6, r4, #24
 801f63c:	d007      	beq.n	801f64e <forward_dense_integer_SSSA+0x4a>
 801f63e:	8b26      	ldrh	r6, [r4, #24]
 801f640:	2e01      	cmp	r6, #1
 801f642:	f240 80d8 	bls.w	801f7f6 <forward_dense_integer_SSSA+0x1f2>
 801f646:	2d00      	cmp	r5, #0
 801f648:	f000 80cc 	beq.w	801f7e4 <forward_dense_integer_SSSA+0x1e0>
 801f64c:	686e      	ldr	r6, [r5, #4]
 801f64e:	2803      	cmp	r0, #3
 801f650:	f000 8089 	beq.w	801f766 <forward_dense_integer_SSSA+0x162>
 801f654:	68d0      	ldr	r0, [r2, #12]
 801f656:	68dd      	ldr	r5, [r3, #12]
 801f658:	f8d0 a004 	ldr.w	sl, [r0, #4]
 801f65c:	9509      	str	r5, [sp, #36]	; 0x24
 801f65e:	fa1f f58a 	uxth.w	r5, sl
 801f662:	69b7      	ldr	r7, [r6, #24]
 801f664:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f666:	950f      	str	r5, [sp, #60]	; 0x3c
 801f668:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801f66a:	e9d0 0402 	ldrd	r0, r4, [r0, #8]
 801f66e:	f8d5 b004 	ldr.w	fp, [r5, #4]
 801f672:	fb00 f904 	mul.w	r9, r0, r4
 801f676:	68bd      	ldr	r5, [r7, #8]
 801f678:	fa1f f08b 	uxth.w	r0, fp
 801f67c:	699c      	ldr	r4, [r3, #24]
 801f67e:	950e      	str	r5, [sp, #56]	; 0x38
 801f680:	900d      	str	r0, [sp, #52]	; 0x34
 801f682:	6990      	ldr	r0, [r2, #24]
 801f684:	2e00      	cmp	r6, #0
 801f686:	f000 80c5 	beq.w	801f814 <forward_dense_integer_SSSA+0x210>
 801f68a:	6835      	ldr	r5, [r6, #0]
 801f68c:	2d00      	cmp	r5, #0
 801f68e:	f000 809d 	beq.w	801f7cc <forward_dense_integer_SSSA+0x1c8>
 801f692:	69ad      	ldr	r5, [r5, #24]
 801f694:	68ad      	ldr	r5, [r5, #8]
 801f696:	9509      	str	r5, [sp, #36]	; 0x24
 801f698:	681f      	ldr	r7, [r3, #0]
 801f69a:	698b      	ldr	r3, [r1, #24]
 801f69c:	6812      	ldr	r2, [r2, #0]
 801f69e:	689b      	ldr	r3, [r3, #8]
 801f6a0:	68a5      	ldr	r5, [r4, #8]
 801f6a2:	6886      	ldr	r6, [r0, #8]
 801f6a4:	930a      	str	r3, [sp, #40]	; 0x28
 801f6a6:	6809      	ldr	r1, [r1, #0]
 801f6a8:	2f00      	cmp	r7, #0
 801f6aa:	d071      	beq.n	801f790 <forward_dense_integer_SSSA+0x18c>
 801f6ac:	6878      	ldr	r0, [r7, #4]
 801f6ae:	4604      	mov	r4, r0
 801f6b0:	2800      	cmp	r0, #0
 801f6b2:	d060      	beq.n	801f776 <forward_dense_integer_SSSA+0x172>
 801f6b4:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 801f6b8:	f1bc 0f00 	cmp.w	ip, #0
 801f6bc:	f000 8088 	beq.w	801f7d0 <forward_dense_integer_SSSA+0x1cc>
 801f6c0:	6803      	ldr	r3, [r0, #0]
 801f6c2:	edd3 7a00 	vldr	s15, [r3]
 801f6c6:	2a00      	cmp	r2, #0
 801f6c8:	f000 80ac 	beq.w	801f824 <forward_dense_integer_SSSA+0x220>
 801f6cc:	6853      	ldr	r3, [r2, #4]
 801f6ce:	2b00      	cmp	r3, #0
 801f6d0:	f000 8081 	beq.w	801f7d6 <forward_dense_integer_SSSA+0x1d2>
 801f6d4:	8850      	ldrh	r0, [r2, #2]
 801f6d6:	2800      	cmp	r0, #0
 801f6d8:	d063      	beq.n	801f7a2 <forward_dense_integer_SSSA+0x19e>
 801f6da:	681c      	ldr	r4, [r3, #0]
 801f6dc:	ed94 0a00 	vldr	s0, [r4]
 801f6e0:	2f00      	cmp	r7, #0
 801f6e2:	f040 808a 	bne.w	801f7fa <forward_dense_integer_SSSA+0x1f6>
 801f6e6:	685b      	ldr	r3, [r3, #4]
 801f6e8:	f993 3000 	ldrsb.w	r3, [r3]
 801f6ec:	930b      	str	r3, [sp, #44]	; 0x2c
 801f6ee:	2900      	cmp	r1, #0
 801f6f0:	d048      	beq.n	801f784 <forward_dense_integer_SSSA+0x180>
 801f6f2:	684b      	ldr	r3, [r1, #4]
 801f6f4:	2b00      	cmp	r3, #0
 801f6f6:	d045      	beq.n	801f784 <forward_dense_integer_SSSA+0x180>
 801f6f8:	681b      	ldr	r3, [r3, #0]
 801f6fa:	2400      	movs	r4, #0
 801f6fc:	f10d 0842 	add.w	r8, sp, #66	; 0x42
 801f700:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 801f704:	9411      	str	r4, [sp, #68]	; 0x44
 801f706:	4640      	mov	r0, r8
 801f708:	ed93 7a00 	vldr	s14, [r3]
 801f70c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f710:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801f714:	f000 fcd4 	bl	80200c0 <align_factor>
 801f718:	9011      	str	r0, [sp, #68]	; 0x44
 801f71a:	f1b9 0f00 	cmp.w	r9, #0
 801f71e:	d01c      	beq.n	801f75a <forward_dense_integer_SSSA+0x156>
 801f720:	fa1f fb8b 	uxth.w	fp, fp
 801f724:	970c      	str	r7, [sp, #48]	; 0x30
 801f726:	fa1f fa8a 	uxth.w	sl, sl
 801f72a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f72c:	af11      	add	r7, sp, #68	; 0x44
 801f72e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801f730:	3401      	adds	r4, #1
 801f732:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f734:	9103      	str	r1, [sp, #12]
 801f736:	9002      	str	r0, [sp, #8]
 801f738:	4628      	mov	r0, r5
 801f73a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f73c:	445d      	add	r5, fp
 801f73e:	f8cd 8004 	str.w	r8, [sp, #4]
 801f742:	9700      	str	r7, [sp, #0]
 801f744:	e9cd 6305 	strd	r6, r3, [sp, #20]
 801f748:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801f74c:	4456      	add	r6, sl
 801f74e:	9204      	str	r2, [sp, #16]
 801f750:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f752:	f002 fe4b 	bl	80223ec <st_sssa8_fully_connected>
 801f756:	454c      	cmp	r4, r9
 801f758:	d1e7      	bne.n	801f72a <forward_dense_integer_SSSA+0x126>
 801f75a:	b013      	add	sp, #76	; 0x4c
 801f75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f760:	2300      	movs	r3, #0
 801f762:	685b      	ldr	r3, [r3, #4]
 801f764:	deff      	udf	#255	; 0xff
 801f766:	2300      	movs	r3, #0
 801f768:	685b      	ldr	r3, [r3, #4]
 801f76a:	deff      	udf	#255	; 0xff
 801f76c:	2300      	movs	r3, #0
 801f76e:	685b      	ldr	r3, [r3, #4]
 801f770:	deff      	udf	#255	; 0xff
 801f772:	6843      	ldr	r3, [r0, #4]
 801f774:	deff      	udf	#255	; 0xff
 801f776:	2a00      	cmp	r2, #0
 801f778:	d036      	beq.n	801f7e8 <forward_dense_integer_SSSA+0x1e4>
 801f77a:	6853      	ldr	r3, [r2, #4]
 801f77c:	b963      	cbnz	r3, 801f798 <forward_dense_integer_SSSA+0x194>
 801f77e:	eddf 7a2c 	vldr	s15, [pc, #176]	; 801f830 <forward_dense_integer_SSSA+0x22c>
 801f782:	e011      	b.n	801f7a8 <forward_dense_integer_SSSA+0x1a4>
 801f784:	2300      	movs	r3, #0
 801f786:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801f78a:	9311      	str	r3, [sp, #68]	; 0x44
 801f78c:	681b      	ldr	r3, [r3, #0]
 801f78e:	deff      	udf	#255	; 0xff
 801f790:	b352      	cbz	r2, 801f7e8 <forward_dense_integer_SSSA+0x1e4>
 801f792:	6853      	ldr	r3, [r2, #4]
 801f794:	2b00      	cmp	r3, #0
 801f796:	d03f      	beq.n	801f818 <forward_dense_integer_SSSA+0x214>
 801f798:	8850      	ldrh	r0, [r2, #2]
 801f79a:	eddf 7a25 	vldr	s15, [pc, #148]	; 801f830 <forward_dense_integer_SSSA+0x22c>
 801f79e:	2800      	cmp	r0, #0
 801f7a0:	d19b      	bne.n	801f6da <forward_dense_integer_SSSA+0xd6>
 801f7a2:	2f00      	cmp	r7, #0
 801f7a4:	d03b      	beq.n	801f81e <forward_dense_integer_SSSA+0x21a>
 801f7a6:	6878      	ldr	r0, [r7, #4]
 801f7a8:	4604      	mov	r4, r0
 801f7aa:	b358      	cbz	r0, 801f804 <forward_dense_integer_SSSA+0x200>
 801f7ac:	ed9f 0a20 	vldr	s0, [pc, #128]	; 801f830 <forward_dense_integer_SSSA+0x22c>
 801f7b0:	887f      	ldrh	r7, [r7, #2]
 801f7b2:	b127      	cbz	r7, 801f7be <forward_dense_integer_SSSA+0x1ba>
 801f7b4:	6863      	ldr	r3, [r4, #4]
 801f7b6:	f993 7000 	ldrsb.w	r7, [r3]
 801f7ba:	b33a      	cbz	r2, 801f80c <forward_dense_integer_SSSA+0x208>
 801f7bc:	6853      	ldr	r3, [r2, #4]
 801f7be:	b11b      	cbz	r3, 801f7c8 <forward_dense_integer_SSSA+0x1c4>
 801f7c0:	8850      	ldrh	r0, [r2, #2]
 801f7c2:	2800      	cmp	r0, #0
 801f7c4:	d18f      	bne.n	801f6e6 <forward_dense_integer_SSSA+0xe2>
 801f7c6:	2300      	movs	r3, #0
 801f7c8:	930b      	str	r3, [sp, #44]	; 0x2c
 801f7ca:	e790      	b.n	801f6ee <forward_dense_integer_SSSA+0xea>
 801f7cc:	9509      	str	r5, [sp, #36]	; 0x24
 801f7ce:	e763      	b.n	801f698 <forward_dense_integer_SSSA+0x94>
 801f7d0:	eddf 7a17 	vldr	s15, [pc, #92]	; 801f830 <forward_dense_integer_SSSA+0x22c>
 801f7d4:	e777      	b.n	801f6c6 <forward_dense_integer_SSSA+0xc2>
 801f7d6:	2f00      	cmp	r7, #0
 801f7d8:	d1e6      	bne.n	801f7a8 <forward_dense_integer_SSSA+0x1a4>
 801f7da:	2700      	movs	r7, #0
 801f7dc:	ed9f 0a14 	vldr	s0, [pc, #80]	; 801f830 <forward_dense_integer_SSSA+0x22c>
 801f7e0:	970b      	str	r7, [sp, #44]	; 0x2c
 801f7e2:	e784      	b.n	801f6ee <forward_dense_integer_SSSA+0xea>
 801f7e4:	462e      	mov	r6, r5
 801f7e6:	e732      	b.n	801f64e <forward_dense_integer_SSSA+0x4a>
 801f7e8:	eddf 7a11 	vldr	s15, [pc, #68]	; 801f830 <forward_dense_integer_SSSA+0x22c>
 801f7ec:	4617      	mov	r7, r2
 801f7ee:	920b      	str	r2, [sp, #44]	; 0x2c
 801f7f0:	eeb0 0a67 	vmov.f32	s0, s15
 801f7f4:	e77b      	b.n	801f6ee <forward_dense_integer_SSSA+0xea>
 801f7f6:	2600      	movs	r6, #0
 801f7f8:	e729      	b.n	801f64e <forward_dense_integer_SSSA+0x4a>
 801f7fa:	687c      	ldr	r4, [r7, #4]
 801f7fc:	2c00      	cmp	r4, #0
 801f7fe:	d1d7      	bne.n	801f7b0 <forward_dense_integer_SSSA+0x1ac>
 801f800:	4627      	mov	r7, r4
 801f802:	e7de      	b.n	801f7c2 <forward_dense_integer_SSSA+0x1be>
 801f804:	4607      	mov	r7, r0
 801f806:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 801f830 <forward_dense_integer_SSSA+0x22c>
 801f80a:	e7d8      	b.n	801f7be <forward_dense_integer_SSSA+0x1ba>
 801f80c:	920b      	str	r2, [sp, #44]	; 0x2c
 801f80e:	e76e      	b.n	801f6ee <forward_dense_integer_SSSA+0xea>
 801f810:	4629      	mov	r1, r5
 801f812:	e711      	b.n	801f638 <forward_dense_integer_SSSA+0x34>
 801f814:	9609      	str	r6, [sp, #36]	; 0x24
 801f816:	e73f      	b.n	801f698 <forward_dense_integer_SSSA+0x94>
 801f818:	eddf 7a05 	vldr	s15, [pc, #20]	; 801f830 <forward_dense_integer_SSSA+0x22c>
 801f81c:	e7dd      	b.n	801f7da <forward_dense_integer_SSSA+0x1d6>
 801f81e:	ed9f 0a04 	vldr	s0, [pc, #16]	; 801f830 <forward_dense_integer_SSSA+0x22c>
 801f822:	e7d0      	b.n	801f7c6 <forward_dense_integer_SSSA+0x1c2>
 801f824:	f1bc 0f00 	cmp.w	ip, #0
 801f828:	d0d7      	beq.n	801f7da <forward_dense_integer_SSSA+0x1d6>
 801f82a:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801f830 <forward_dense_integer_SSSA+0x22c>
 801f82e:	e7c1      	b.n	801f7b4 <forward_dense_integer_SSSA+0x1b0>
 801f830:	00000000 	.word	0x00000000

0801f834 <nl_func_sm_array_f32>:
 801f834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f838:	ed2d 8b04 	vpush	{d8-d9}
 801f83c:	b089      	sub	sp, #36	; 0x24
 801f83e:	698f      	ldr	r7, [r1, #24]
 801f840:	6986      	ldr	r6, [r0, #24]
 801f842:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801f846:	68bd      	ldr	r5, [r7, #8]
 801f848:	eba2 040e 	sub.w	r4, r2, lr
 801f84c:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 801f850:	9602      	str	r6, [sp, #8]
 801f852:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 801f856:	68fc      	ldr	r4, [r7, #12]
 801f858:	68b6      	ldr	r6, [r6, #8]
 801f85a:	eba2 020c 	sub.w	r2, r2, ip
 801f85e:	42a5      	cmp	r5, r4
 801f860:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 801f864:	d351      	bcc.n	801f90a <nl_func_sm_array_f32+0xd6>
 801f866:	9303      	str	r3, [sp, #12]
 801f868:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801f86c:	009b      	lsls	r3, r3, #2
 801f86e:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801f872:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801f876:	f1ce 0200 	rsb	r2, lr, #0
 801f87a:	9301      	str	r3, [sp, #4]
 801f87c:	f1cc 0300 	rsb	r3, ip, #0
 801f880:	9204      	str	r2, [sp, #16]
 801f882:	e9cd 1006 	strd	r1, r0, [sp, #24]
 801f886:	9305      	str	r3, [sp, #20]
 801f888:	9b02      	ldr	r3, [sp, #8]
 801f88a:	9a07      	ldr	r2, [sp, #28]
 801f88c:	60bd      	str	r5, [r7, #8]
 801f88e:	609e      	str	r6, [r3, #8]
 801f890:	9b06      	ldr	r3, [sp, #24]
 801f892:	6992      	ldr	r2, [r2, #24]
 801f894:	699b      	ldr	r3, [r3, #24]
 801f896:	6894      	ldr	r4, [r2, #8]
 801f898:	9a03      	ldr	r2, [sp, #12]
 801f89a:	689b      	ldr	r3, [r3, #8]
 801f89c:	2a01      	cmp	r2, #1
 801f89e:	ed93 8a00 	vldr	s16, [r3]
 801f8a2:	d93b      	bls.n	801f91c <nl_func_sm_array_f32+0xe8>
 801f8a4:	9901      	ldr	r1, [sp, #4]
 801f8a6:	1d1a      	adds	r2, r3, #4
 801f8a8:	eb03 0b01 	add.w	fp, r3, r1
 801f8ac:	ecf2 7a01 	vldmia	r2!, {s15}
 801f8b0:	4593      	cmp	fp, r2
 801f8b2:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 801f8b6:	d1f9      	bne.n	801f8ac <nl_func_sm_array_f32+0x78>
 801f8b8:	469a      	mov	sl, r3
 801f8ba:	46a1      	mov	r9, r4
 801f8bc:	46a0      	mov	r8, r4
 801f8be:	eddf 8a1a 	vldr	s17, [pc, #104]	; 801f928 <nl_func_sm_array_f32+0xf4>
 801f8c2:	ecba 0a01 	vldmia	sl!, {s0}
 801f8c6:	ee30 0a48 	vsub.f32	s0, s0, s16
 801f8ca:	f008 ff09 	bl	80286e0 <expf>
 801f8ce:	45d3      	cmp	fp, sl
 801f8d0:	eca8 0a01 	vstmia	r8!, {s0}
 801f8d4:	ee78 8a80 	vadd.f32	s17, s17, s0
 801f8d8:	d1f3      	bne.n	801f8c2 <nl_func_sm_array_f32+0x8e>
 801f8da:	eef5 8a40 	vcmp.f32	s17, #0.0
 801f8de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f8e2:	d00b      	beq.n	801f8fc <nl_func_sm_array_f32+0xc8>
 801f8e4:	ee89 7a28 	vdiv.f32	s14, s18, s17
 801f8e8:	9b01      	ldr	r3, [sp, #4]
 801f8ea:	441c      	add	r4, r3
 801f8ec:	edd9 7a00 	vldr	s15, [r9]
 801f8f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f8f4:	ece9 7a01 	vstmia	r9!, {s15}
 801f8f8:	454c      	cmp	r4, r9
 801f8fa:	d1f7      	bne.n	801f8ec <nl_func_sm_array_f32+0xb8>
 801f8fc:	9b04      	ldr	r3, [sp, #16]
 801f8fe:	68fc      	ldr	r4, [r7, #12]
 801f900:	441d      	add	r5, r3
 801f902:	9b05      	ldr	r3, [sp, #20]
 801f904:	42ac      	cmp	r4, r5
 801f906:	441e      	add	r6, r3
 801f908:	d9be      	bls.n	801f888 <nl_func_sm_array_f32+0x54>
 801f90a:	9a02      	ldr	r2, [sp, #8]
 801f90c:	60bc      	str	r4, [r7, #8]
 801f90e:	68d3      	ldr	r3, [r2, #12]
 801f910:	6093      	str	r3, [r2, #8]
 801f912:	b009      	add	sp, #36	; 0x24
 801f914:	ecbd 8b04 	vpop	{d8-d9}
 801f918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f91c:	2a00      	cmp	r2, #0
 801f91e:	d0ed      	beq.n	801f8fc <nl_func_sm_array_f32+0xc8>
 801f920:	9a01      	ldr	r2, [sp, #4]
 801f922:	eb03 0b02 	add.w	fp, r3, r2
 801f926:	e7c7      	b.n	801f8b8 <nl_func_sm_array_f32+0x84>
 801f928:	00000000 	.word	0x00000000

0801f92c <forward_sm>:
 801f92c:	6982      	ldr	r2, [r0, #24]
 801f92e:	8813      	ldrh	r3, [r2, #0]
 801f930:	b333      	cbz	r3, 801f980 <forward_sm+0x54>
 801f932:	6852      	ldr	r2, [r2, #4]
 801f934:	6851      	ldr	r1, [r2, #4]
 801f936:	b101      	cbz	r1, 801f93a <forward_sm+0xe>
 801f938:	6809      	ldr	r1, [r1, #0]
 801f93a:	2b01      	cmp	r3, #1
 801f93c:	d91d      	bls.n	801f97a <forward_sm+0x4e>
 801f93e:	6913      	ldr	r3, [r2, #16]
 801f940:	b1cb      	cbz	r3, 801f976 <forward_sm+0x4a>
 801f942:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f944:	6818      	ldr	r0, [r3, #0]
 801f946:	b083      	sub	sp, #12
 801f948:	688b      	ldr	r3, [r1, #8]
 801f94a:	68cd      	ldr	r5, [r1, #12]
 801f94c:	68c2      	ldr	r2, [r0, #12]
 801f94e:	0a1b      	lsrs	r3, r3, #8
 801f950:	686e      	ldr	r6, [r5, #4]
 801f952:	6857      	ldr	r7, [r2, #4]
 801f954:	d016      	beq.n	801f984 <forward_sm+0x58>
 801f956:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801f95a:	2201      	movs	r2, #1
 801f95c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 801f960:	429d      	cmp	r5, r3
 801f962:	fb04 f202 	mul.w	r2, r4, r2
 801f966:	d1f9      	bne.n	801f95c <forward_sm+0x30>
 801f968:	4633      	mov	r3, r6
 801f96a:	9701      	str	r7, [sp, #4]
 801f96c:	9600      	str	r6, [sp, #0]
 801f96e:	f7ff ff61 	bl	801f834 <nl_func_sm_array_f32>
 801f972:	b003      	add	sp, #12
 801f974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f976:	68db      	ldr	r3, [r3, #12]
 801f978:	deff      	udf	#255	; 0xff
 801f97a:	2300      	movs	r3, #0
 801f97c:	685b      	ldr	r3, [r3, #4]
 801f97e:	deff      	udf	#255	; 0xff
 801f980:	685b      	ldr	r3, [r3, #4]
 801f982:	deff      	udf	#255	; 0xff
 801f984:	2201      	movs	r2, #1
 801f986:	e7ef      	b.n	801f968 <forward_sm+0x3c>

0801f988 <forward_eltwise_integer_INT8>:
 801f988:	6982      	ldr	r2, [r0, #24]
 801f98a:	8813      	ldrh	r3, [r2, #0]
 801f98c:	2b00      	cmp	r3, #0
 801f98e:	d05a      	beq.n	801fa46 <forward_eltwise_integer_INT8+0xbe>
 801f990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f994:	ed2d 8b02 	vpush	{d8}
 801f998:	6851      	ldr	r1, [r2, #4]
 801f99a:	b0ab      	sub	sp, #172	; 0xac
 801f99c:	684a      	ldr	r2, [r1, #4]
 801f99e:	2a00      	cmp	r2, #0
 801f9a0:	f000 821a 	beq.w	801fdd8 <forward_eltwise_integer_INT8+0x450>
 801f9a4:	e9d2 7900 	ldrd	r7, r9, [r2]
 801f9a8:	2b01      	cmp	r3, #1
 801f9aa:	d949      	bls.n	801fa40 <forward_eltwise_integer_INT8+0xb8>
 801f9ac:	690b      	ldr	r3, [r1, #16]
 801f9ae:	2b00      	cmp	r3, #0
 801f9b0:	f000 81fb 	beq.w	801fdaa <forward_eltwise_integer_INT8+0x422>
 801f9b4:	f8d3 8000 	ldr.w	r8, [r3]
 801f9b8:	68bb      	ldr	r3, [r7, #8]
 801f9ba:	f107 0208 	add.w	r2, r7, #8
 801f9be:	f8d9 5008 	ldr.w	r5, [r9, #8]
 801f9c2:	9209      	str	r2, [sp, #36]	; 0x24
 801f9c4:	f3c3 2617 	ubfx	r6, r3, #8, #24
 801f9c8:	ea83 0b05 	eor.w	fp, r3, r5
 801f9cc:	f109 0208 	add.w	r2, r9, #8
 801f9d0:	6a03      	ldr	r3, [r0, #32]
 801f9d2:	f03b 0bff 	bics.w	fp, fp, #255	; 0xff
 801f9d6:	920a      	str	r2, [sp, #40]	; 0x28
 801f9d8:	69c4      	ldr	r4, [r0, #28]
 801f9da:	930c      	str	r3, [sp, #48]	; 0x30
 801f9dc:	d135      	bne.n	801fa4a <forward_eltwise_integer_INT8+0xc2>
 801f9de:	2e00      	cmp	r6, #0
 801f9e0:	f000 81fd 	beq.w	801fdde <forward_eltwise_integer_INT8+0x456>
 801f9e4:	1e73      	subs	r3, r6, #1
 801f9e6:	68fa      	ldr	r2, [r7, #12]
 801f9e8:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 801f9ec:	f852 c023 	ldr.w	ip, [r2, r3, lsl #2]
 801f9f0:	f85e 1023 	ldr.w	r1, [lr, r3, lsl #2]
 801f9f4:	458c      	cmp	ip, r1
 801f9f6:	d131      	bne.n	801fa5c <forward_eltwise_integer_INT8+0xd4>
 801f9f8:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 801f9fc:	4618      	mov	r0, r3
 801f9fe:	469a      	mov	sl, r3
 801fa00:	4431      	add	r1, r6
 801fa02:	0089      	lsls	r1, r1, #2
 801fa04:	eb0e 0601 	add.w	r6, lr, r1
 801fa08:	4411      	add	r1, r2
 801fa0a:	4696      	mov	lr, r2
 801fa0c:	2800      	cmp	r0, #0
 801fa0e:	f000 81d2 	beq.w	801fdb6 <forward_eltwise_integer_INT8+0x42e>
 801fa12:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801fa16:	3801      	subs	r0, #1
 801fa18:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 801fa1c:	429a      	cmp	r2, r3
 801fa1e:	d0f5      	beq.n	801fa0c <forward_eltwise_integer_INT8+0x84>
 801fa20:	f1bc 0f01 	cmp.w	ip, #1
 801fa24:	4672      	mov	r2, lr
 801fa26:	4653      	mov	r3, sl
 801fa28:	f04f 0b00 	mov.w	fp, #0
 801fa2c:	d019      	beq.n	801fa62 <forward_eltwise_integer_INT8+0xda>
 801fa2e:	0a2d      	lsrs	r5, r5, #8
 801fa30:	f04f 0601 	mov.w	r6, #1
 801fa34:	f04f 0a00 	mov.w	sl, #0
 801fa38:	d121      	bne.n	801fa7e <forward_eltwise_integer_INT8+0xf6>
 801fa3a:	2301      	movs	r3, #1
 801fa3c:	930b      	str	r3, [sp, #44]	; 0x2c
 801fa3e:	e034      	b.n	801faaa <forward_eltwise_integer_INT8+0x122>
 801fa40:	2300      	movs	r3, #0
 801fa42:	685b      	ldr	r3, [r3, #4]
 801fa44:	deff      	udf	#255	; 0xff
 801fa46:	685b      	ldr	r3, [r3, #4]
 801fa48:	deff      	udf	#255	; 0xff
 801fa4a:	2e00      	cmp	r6, #0
 801fa4c:	f000 81cb 	beq.w	801fde6 <forward_eltwise_integer_INT8+0x45e>
 801fa50:	1e73      	subs	r3, r6, #1
 801fa52:	68fa      	ldr	r2, [r7, #12]
 801fa54:	f04f 0b00 	mov.w	fp, #0
 801fa58:	f852 c023 	ldr.w	ip, [r2, r3, lsl #2]
 801fa5c:	f1bc 0f01 	cmp.w	ip, #1
 801fa60:	d1e5      	bne.n	801fa2e <forward_eltwise_integer_INT8+0xa6>
 801fa62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801fa66:	e003      	b.n	801fa70 <forward_eltwise_integer_INT8+0xe8>
 801fa68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801fa6c:	2901      	cmp	r1, #1
 801fa6e:	d1de      	bne.n	801fa2e <forward_eltwise_integer_INT8+0xa6>
 801fa70:	429a      	cmp	r2, r3
 801fa72:	d1f9      	bne.n	801fa68 <forward_eltwise_integer_INT8+0xe0>
 801fa74:	2600      	movs	r6, #0
 801fa76:	f04f 0a01 	mov.w	sl, #1
 801fa7a:	0a2d      	lsrs	r5, r5, #8
 801fa7c:	d0dd      	beq.n	801fa3a <forward_eltwise_integer_INT8+0xb2>
 801fa7e:	1e6b      	subs	r3, r5, #1
 801fa80:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801fa84:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801fa88:	2901      	cmp	r1, #1
 801fa8a:	d10b      	bne.n	801faa4 <forward_eltwise_integer_INT8+0x11c>
 801fa8c:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 801fa90:	4429      	add	r1, r5
 801fa92:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801fa96:	2b00      	cmp	r3, #0
 801fa98:	d0cf      	beq.n	801fa3a <forward_eltwise_integer_INT8+0xb2>
 801fa9a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801fa9e:	3b01      	subs	r3, #1
 801faa0:	2901      	cmp	r1, #1
 801faa2:	d0f8      	beq.n	801fa96 <forward_eltwise_integer_INT8+0x10e>
 801faa4:	2300      	movs	r3, #0
 801faa6:	4656      	mov	r6, sl
 801faa8:	930b      	str	r3, [sp, #44]	; 0x2c
 801faaa:	697d      	ldr	r5, [r7, #20]
 801faac:	f240 5101 	movw	r1, #1281	; 0x501
 801fab0:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801fab4:	f04f 0c00 	mov.w	ip, #0
 801fab8:	686d      	ldr	r5, [r5, #4]
 801faba:	ab1b      	add	r3, sp, #108	; 0x6c
 801fabc:	9115      	str	r1, [sp, #84]	; 0x54
 801fabe:	a815      	add	r0, sp, #84	; 0x54
 801fac0:	950d      	str	r5, [sp, #52]	; 0x34
 801fac2:	9909      	ldr	r1, [sp, #36]	; 0x24
 801fac4:	6855      	ldr	r5, [r2, #4]
 801fac6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fac8:	9316      	str	r3, [sp, #88]	; 0x58
 801faca:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 801face:	e9cd cc1b 	strd	ip, ip, [sp, #108]	; 0x6c
 801fad2:	e9cd cc1d 	strd	ip, ip, [sp, #116]	; 0x74
 801fad6:	f005 fdab 	bl	8025630 <core_get_broadcasted_shape>
 801fada:	6839      	ldr	r1, [r7, #0]
 801fadc:	f8d7 c018 	ldr.w	ip, [r7, #24]
 801fae0:	f8d8 3000 	ldr.w	r3, [r8]
 801fae4:	f8d9 2000 	ldr.w	r2, [r9]
 801fae8:	2900      	cmp	r1, #0
 801faea:	f000 812d 	beq.w	801fd48 <forward_eltwise_integer_INT8+0x3c0>
 801faee:	6848      	ldr	r0, [r1, #4]
 801faf0:	2800      	cmp	r0, #0
 801faf2:	f000 8129 	beq.w	801fd48 <forward_eltwise_integer_INT8+0x3c0>
 801faf6:	884f      	ldrh	r7, [r1, #2]
 801faf8:	2f00      	cmp	r7, #0
 801fafa:	f000 8125 	beq.w	801fd48 <forward_eltwise_integer_INT8+0x3c0>
 801fafe:	6800      	ldr	r0, [r0, #0]
 801fb00:	6800      	ldr	r0, [r0, #0]
 801fb02:	900f      	str	r0, [sp, #60]	; 0x3c
 801fb04:	2a00      	cmp	r2, #0
 801fb06:	f000 811d 	beq.w	801fd44 <forward_eltwise_integer_INT8+0x3bc>
 801fb0a:	6850      	ldr	r0, [r2, #4]
 801fb0c:	2800      	cmp	r0, #0
 801fb0e:	f000 8119 	beq.w	801fd44 <forward_eltwise_integer_INT8+0x3bc>
 801fb12:	8857      	ldrh	r7, [r2, #2]
 801fb14:	2f00      	cmp	r7, #0
 801fb16:	f000 8115 	beq.w	801fd44 <forward_eltwise_integer_INT8+0x3bc>
 801fb1a:	6800      	ldr	r0, [r0, #0]
 801fb1c:	6800      	ldr	r0, [r0, #0]
 801fb1e:	9010      	str	r0, [sp, #64]	; 0x40
 801fb20:	2b00      	cmp	r3, #0
 801fb22:	f000 810c 	beq.w	801fd3e <forward_eltwise_integer_INT8+0x3b6>
 801fb26:	6858      	ldr	r0, [r3, #4]
 801fb28:	2800      	cmp	r0, #0
 801fb2a:	f000 8108 	beq.w	801fd3e <forward_eltwise_integer_INT8+0x3b6>
 801fb2e:	885f      	ldrh	r7, [r3, #2]
 801fb30:	2f00      	cmp	r7, #0
 801fb32:	f000 8104 	beq.w	801fd3e <forward_eltwise_integer_INT8+0x3b6>
 801fb36:	6800      	ldr	r0, [r0, #0]
 801fb38:	f8d0 e000 	ldr.w	lr, [r0]
 801fb3c:	f8d9 7018 	ldr.w	r7, [r9, #24]
 801fb40:	f8d8 0018 	ldr.w	r0, [r8, #24]
 801fb44:	68bf      	ldr	r7, [r7, #8]
 801fb46:	f8d0 9008 	ldr.w	r9, [r0, #8]
 801fb4a:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
 801fb4e:	f8dc 8008 	ldr.w	r8, [ip, #8]
 801fb52:	b141      	cbz	r1, 801fb66 <forward_eltwise_integer_INT8+0x1de>
 801fb54:	6848      	ldr	r0, [r1, #4]
 801fb56:	2800      	cmp	r0, #0
 801fb58:	f000 8138 	beq.w	801fdcc <forward_eltwise_integer_INT8+0x444>
 801fb5c:	8849      	ldrh	r1, [r1, #2]
 801fb5e:	b111      	cbz	r1, 801fb66 <forward_eltwise_integer_INT8+0x1de>
 801fb60:	6841      	ldr	r1, [r0, #4]
 801fb62:	f991 1000 	ldrsb.w	r1, [r1]
 801fb66:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
 801fb6a:	b142      	cbz	r2, 801fb7e <forward_eltwise_integer_INT8+0x1f6>
 801fb6c:	6851      	ldr	r1, [r2, #4]
 801fb6e:	2900      	cmp	r1, #0
 801fb70:	f000 812e 	beq.w	801fdd0 <forward_eltwise_integer_INT8+0x448>
 801fb74:	8852      	ldrh	r2, [r2, #2]
 801fb76:	b112      	cbz	r2, 801fb7e <forward_eltwise_integer_INT8+0x1f6>
 801fb78:	684a      	ldr	r2, [r1, #4]
 801fb7a:	f992 2000 	ldrsb.w	r2, [r2]
 801fb7e:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 801fb82:	b143      	cbz	r3, 801fb96 <forward_eltwise_integer_INT8+0x20e>
 801fb84:	685a      	ldr	r2, [r3, #4]
 801fb86:	2a00      	cmp	r2, #0
 801fb88:	f000 8124 	beq.w	801fdd4 <forward_eltwise_integer_INT8+0x44c>
 801fb8c:	885b      	ldrh	r3, [r3, #2]
 801fb8e:	b113      	cbz	r3, 801fb96 <forward_eltwise_integer_INT8+0x20e>
 801fb90:	6853      	ldr	r3, [r2, #4]
 801fb92:	f993 3000 	ldrsb.w	r3, [r3]
 801fb96:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 801fb9a:	f1bb 0f00 	cmp.w	fp, #0
 801fb9e:	f040 80d5 	bne.w	801fd4c <forward_eltwise_integer_INT8+0x3c4>
 801fba2:	2e00      	cmp	r6, #0
 801fba4:	f040 80d2 	bne.w	801fd4c <forward_eltwise_integer_INT8+0x3c4>
 801fba8:	f240 5002 	movw	r0, #1282	; 0x502
 801fbac:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 801fbb0:	f10d 0e80 	add.w	lr, sp, #128	; 0x80
 801fbb4:	f10d 0c94 	add.w	ip, sp, #148	; 0x94
 801fbb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801fbba:	4653      	mov	r3, sl
 801fbbc:	aa15      	add	r2, sp, #84	; 0x54
 801fbbe:	9017      	str	r0, [sp, #92]	; 0x5c
 801fbc0:	9019      	str	r0, [sp, #100]	; 0x64
 801fbc2:	a817      	add	r0, sp, #92	; 0x5c
 801fbc4:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 801fbc8:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
 801fbcc:	9620      	str	r6, [sp, #128]	; 0x80
 801fbce:	9625      	str	r6, [sp, #148]	; 0x94
 801fbd0:	e9cd 6621 	strd	r6, r6, [sp, #132]	; 0x84
 801fbd4:	e9cd 6623 	strd	r6, r6, [sp, #140]	; 0x8c
 801fbd8:	e9cd 6626 	strd	r6, r6, [sp, #152]	; 0x98
 801fbdc:	e9cd 6628 	strd	r6, r6, [sp, #160]	; 0xa0
 801fbe0:	f005 fd50 	bl	8025684 <core_compute_offsets_in_bytes>
 801fbe4:	4653      	mov	r3, sl
 801fbe6:	aa15      	add	r2, sp, #84	; 0x54
 801fbe8:	990a      	ldr	r1, [sp, #40]	; 0x28
 801fbea:	a819      	add	r0, sp, #100	; 0x64
 801fbec:	f005 fd4a 	bl	8025684 <core_compute_offsets_in_bytes>
 801fbf0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801fbf2:	68d3      	ldr	r3, [r2, #12]
 801fbf4:	2b00      	cmp	r3, #0
 801fbf6:	f000 809d 	beq.w	801fd34 <forward_eltwise_integer_INT8+0x3ac>
 801fbfa:	f8d2 c008 	ldr.w	ip, [r2, #8]
 801fbfe:	4619      	mov	r1, r3
 801fc00:	eddf 8a7b 	vldr	s17, [pc, #492]	; 801fdf0 <forward_eltwise_integer_INT8+0x468>
 801fc04:	4663      	mov	r3, ip
 801fc06:	960a      	str	r6, [sp, #40]	; 0x28
 801fc08:	2b00      	cmp	r3, #0
 801fc0a:	f000 80d0 	beq.w	801fdae <forward_eltwise_integer_INT8+0x426>
 801fc0e:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801fc10:	f04f 0b00 	mov.w	fp, #0
 801fc14:	f3c6 2617 	ubfx	r6, r6, #8, #24
 801fc18:	f04f 0a00 	mov.w	sl, #0
 801fc1c:	2e04      	cmp	r6, #4
 801fc1e:	bf8c      	ite	hi
 801fc20:	6911      	ldrhi	r1, [r2, #16]
 801fc22:	2101      	movls	r1, #1
 801fc24:	458a      	cmp	sl, r1
 801fc26:	d269      	bcs.n	801fcfc <forward_eltwise_integer_INT8+0x374>
 801fc28:	6851      	ldr	r1, [r2, #4]
 801fc2a:	2900      	cmp	r1, #0
 801fc2c:	d055      	beq.n	801fcda <forward_eltwise_integer_INT8+0x352>
 801fc2e:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 801fc32:	2600      	movs	r6, #0
 801fc34:	f998 0000 	ldrsb.w	r0, [r8]
 801fc38:	aa13      	add	r2, sp, #76	; 0x4c
 801fc3a:	f99d c039 	ldrsb.w	ip, [sp, #57]	; 0x39
 801fc3e:	a912      	add	r1, sp, #72	; 0x48
 801fc40:	eddd 6a0f 	vldr	s13, [sp, #60]	; 0x3c
 801fc44:	eba0 030c 	sub.w	r3, r0, ip
 801fc48:	f99d e03a 	ldrsb.w	lr, [sp, #58]	; 0x3a
 801fc4c:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
 801fc50:	a814      	add	r0, sp, #80	; 0x50
 801fc52:	ee07 3a90 	vmov	s15, r3
 801fc56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fc5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801fc5e:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48
 801fc62:	f997 c000 	ldrsb.w	ip, [r7]
 801fc66:	ebac 030e 	sub.w	r3, ip, lr
 801fc6a:	ee07 3a90 	vmov	s15, r3
 801fc6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fc72:	ee67 7a87 	vmul.f32	s15, s15, s14
 801fc76:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
 801fc7a:	47a0      	blx	r4
 801fc7c:	ed9d 6a14 	vldr	s12, [sp, #80]	; 0x50
 801fc80:	eddd 6a11 	vldr	s13, [sp, #68]	; 0x44
 801fc84:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 801fc88:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801fc8c:	ee07 3a90 	vmov	s15, r3
 801fc90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fc94:	ee77 7a27 	vadd.f32	s15, s14, s15
 801fc98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801fc9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fca0:	fe38 7a28 	vselgt.f32	s14, s16, s17
 801fca4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801fca8:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 801fcac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801fcb0:	ee17 2a90 	vmov	r2, s15
 801fcb4:	f302 0207 	ssat	r2, #8, r2
 801fcb8:	f889 2000 	strb.w	r2, [r9]
 801fcbc:	3601      	adds	r6, #1
 801fcbe:	9818      	ldr	r0, [sp, #96]	; 0x60
 801fcc0:	44a9      	add	r9, r5
 801fcc2:	991a      	ldr	r1, [sp, #104]	; 0x68
 801fcc4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801fcc6:	6843      	ldr	r3, [r0, #4]
 801fcc8:	6848      	ldr	r0, [r1, #4]
 801fcca:	6851      	ldr	r1, [r2, #4]
 801fccc:	4498      	add	r8, r3
 801fcce:	4407      	add	r7, r0
 801fcd0:	42b1      	cmp	r1, r6
 801fcd2:	d8af      	bhi.n	801fc34 <forward_eltwise_integer_INT8+0x2ac>
 801fcd4:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801fcd6:	f3c6 2617 	ubfx	r6, r6, #8, #24
 801fcda:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801fcdc:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 801fce0:	d302      	bcc.n	801fce8 <forward_eltwise_integer_INT8+0x360>
 801fce2:	9918      	ldr	r1, [sp, #96]	; 0x60
 801fce4:	6909      	ldr	r1, [r1, #16]
 801fce6:	4488      	add	r8, r1
 801fce8:	9919      	ldr	r1, [sp, #100]	; 0x64
 801fcea:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 801fcee:	d302      	bcc.n	801fcf6 <forward_eltwise_integer_INT8+0x36e>
 801fcf0:	991a      	ldr	r1, [sp, #104]	; 0x68
 801fcf2:	6909      	ldr	r1, [r1, #16]
 801fcf4:	440f      	add	r7, r1
 801fcf6:	f10a 0a01 	add.w	sl, sl, #1
 801fcfa:	e78f      	b.n	801fc1c <forward_eltwise_integer_INT8+0x294>
 801fcfc:	981a      	ldr	r0, [sp, #104]	; 0x68
 801fcfe:	f10b 0b01 	add.w	fp, fp, #1
 801fd02:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 801fd06:	6881      	ldr	r1, [r0, #8]
 801fd08:	6893      	ldr	r3, [r2, #8]
 801fd0a:	9109      	str	r1, [sp, #36]	; 0x24
 801fd0c:	f8da 1008 	ldr.w	r1, [sl, #8]
 801fd10:	455b      	cmp	r3, fp
 801fd12:	4488      	add	r8, r1
 801fd14:	9909      	ldr	r1, [sp, #36]	; 0x24
 801fd16:	440f      	add	r7, r1
 801fd18:	f63f af7e 	bhi.w	801fc18 <forward_eltwise_integer_INT8+0x290>
 801fd1c:	68d1      	ldr	r1, [r2, #12]
 801fd1e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801fd20:	f8da c00c 	ldr.w	ip, [sl, #12]
 801fd24:	3601      	adds	r6, #1
 801fd26:	68c0      	ldr	r0, [r0, #12]
 801fd28:	44e0      	add	r8, ip
 801fd2a:	428e      	cmp	r6, r1
 801fd2c:	960a      	str	r6, [sp, #40]	; 0x28
 801fd2e:	4407      	add	r7, r0
 801fd30:	f4ff af6a 	bcc.w	801fc08 <forward_eltwise_integer_INT8+0x280>
 801fd34:	b02b      	add	sp, #172	; 0xac
 801fd36:	ecbd 8b02 	vpop	{d8}
 801fd3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd3e:	f04f 0e00 	mov.w	lr, #0
 801fd42:	e6fb      	b.n	801fb3c <forward_eltwise_integer_INT8+0x1b4>
 801fd44:	2000      	movs	r0, #0
 801fd46:	e6ea      	b.n	801fb1e <forward_eltwise_integer_INT8+0x196>
 801fd48:	2000      	movs	r0, #0
 801fd4a:	e6da      	b.n	801fb02 <forward_eltwise_integer_INT8+0x17a>
 801fd4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fd4e:	4553      	cmp	r3, sl
 801fd50:	d036      	beq.n	801fdc0 <forward_eltwise_integer_INT8+0x438>
 801fd52:	f1ba 0f00 	cmp.w	sl, #0
 801fd56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fd58:	bf0c      	ite	eq
 801fd5a:	2402      	moveq	r4, #2
 801fd5c:	2401      	movne	r4, #1
 801fd5e:	0a1a      	lsrs	r2, r3, #8
 801fd60:	d032      	beq.n	801fdc8 <forward_eltwise_integer_INT8+0x440>
 801fd62:	9816      	ldr	r0, [sp, #88]	; 0x58
 801fd64:	2301      	movs	r3, #1
 801fd66:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801fd6a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801fd6e:	4290      	cmp	r0, r2
 801fd70:	fb01 f303 	mul.w	r3, r1, r3
 801fd74:	d1f9      	bne.n	801fd6a <forward_eltwise_integer_INT8+0x3e2>
 801fd76:	9406      	str	r4, [sp, #24]
 801fd78:	f10d 043a 	add.w	r4, sp, #58	; 0x3a
 801fd7c:	f10d 063b 	add.w	r6, sp, #59	; 0x3b
 801fd80:	ad11      	add	r5, sp, #68	; 0x44
 801fd82:	9403      	str	r4, [sp, #12]
 801fd84:	ac0f      	add	r4, sp, #60	; 0x3c
 801fd86:	9605      	str	r6, [sp, #20]
 801fd88:	ae10      	add	r6, sp, #64	; 0x40
 801fd8a:	9504      	str	r5, [sp, #16]
 801fd8c:	f10d 0539 	add.w	r5, sp, #57	; 0x39
 801fd90:	9400      	str	r4, [sp, #0]
 801fd92:	463a      	mov	r2, r7
 801fd94:	4641      	mov	r1, r8
 801fd96:	4648      	mov	r0, r9
 801fd98:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801fd9a:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801fd9e:	47a0      	blx	r4
 801fda0:	b02b      	add	sp, #172	; 0xac
 801fda2:	ecbd 8b02 	vpop	{d8}
 801fda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdaa:	4698      	mov	r8, r3
 801fdac:	e604      	b.n	801f9b8 <forward_eltwise_integer_INT8+0x30>
 801fdae:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 801fdb2:	981a      	ldr	r0, [sp, #104]	; 0x68
 801fdb4:	e7b3      	b.n	801fd1e <forward_eltwise_integer_INT8+0x396>
 801fdb6:	4672      	mov	r2, lr
 801fdb8:	4653      	mov	r3, sl
 801fdba:	f04f 0b01 	mov.w	fp, #1
 801fdbe:	e64d      	b.n	801fa5c <forward_eltwise_integer_INT8+0xd4>
 801fdc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fdc2:	2400      	movs	r4, #0
 801fdc4:	0a1a      	lsrs	r2, r3, #8
 801fdc6:	d1cc      	bne.n	801fd62 <forward_eltwise_integer_INT8+0x3da>
 801fdc8:	2301      	movs	r3, #1
 801fdca:	e7d4      	b.n	801fd76 <forward_eltwise_integer_INT8+0x3ee>
 801fdcc:	4601      	mov	r1, r0
 801fdce:	e6ca      	b.n	801fb66 <forward_eltwise_integer_INT8+0x1de>
 801fdd0:	460a      	mov	r2, r1
 801fdd2:	e6d4      	b.n	801fb7e <forward_eltwise_integer_INT8+0x1f6>
 801fdd4:	4613      	mov	r3, r2
 801fdd6:	e6de      	b.n	801fb96 <forward_eltwise_integer_INT8+0x20e>
 801fdd8:	4617      	mov	r7, r2
 801fdda:	4691      	mov	r9, r2
 801fddc:	e5e4      	b.n	801f9a8 <forward_eltwise_integer_INT8+0x20>
 801fdde:	f04f 0b01 	mov.w	fp, #1
 801fde2:	46da      	mov	sl, fp
 801fde4:	e649      	b.n	801fa7a <forward_eltwise_integer_INT8+0xf2>
 801fde6:	f04f 0a01 	mov.w	sl, #1
 801fdea:	46b3      	mov	fp, r6
 801fdec:	e645      	b.n	801fa7a <forward_eltwise_integer_INT8+0xf2>
 801fdee:	bf00      	nop
 801fdf0:	befffffc 	.word	0xbefffffc

0801fdf4 <ai_check_custom_types>:
 801fdf4:	4b13      	ldr	r3, [pc, #76]	; (801fe44 <ai_check_custom_types+0x50>)
 801fdf6:	b082      	sub	sp, #8
 801fdf8:	681b      	ldr	r3, [r3, #0]
 801fdfa:	9301      	str	r3, [sp, #4]
 801fdfc:	b118      	cbz	r0, 801fe06 <ai_check_custom_types+0x12>
 801fdfe:	7803      	ldrb	r3, [r0, #0]
 801fe00:	2b03      	cmp	r3, #3
 801fe02:	d002      	beq.n	801fe0a <ai_check_custom_types+0x16>
 801fe04:	2000      	movs	r0, #0
 801fe06:	b002      	add	sp, #8
 801fe08:	4770      	bx	lr
 801fe0a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801fe0e:	4293      	cmp	r3, r2
 801fe10:	d004      	beq.n	801fe1c <ai_check_custom_types+0x28>
 801fe12:	2001      	movs	r0, #1
 801fe14:	f080 0001 	eor.w	r0, r0, #1
 801fe18:	b002      	add	sp, #8
 801fe1a:	4770      	bx	lr
 801fe1c:	7842      	ldrb	r2, [r0, #1]
 801fe1e:	3001      	adds	r0, #1
 801fe20:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801fe24:	429a      	cmp	r2, r3
 801fe26:	d1f4      	bne.n	801fe12 <ai_check_custom_types+0x1e>
 801fe28:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801fe2c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801fe30:	429a      	cmp	r2, r3
 801fe32:	d1ee      	bne.n	801fe12 <ai_check_custom_types+0x1e>
 801fe34:	7842      	ldrb	r2, [r0, #1]
 801fe36:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801fe3a:	429a      	cmp	r2, r3
 801fe3c:	d1e9      	bne.n	801fe12 <ai_check_custom_types+0x1e>
 801fe3e:	2000      	movs	r0, #0
 801fe40:	e7e8      	b.n	801fe14 <ai_check_custom_types+0x20>
 801fe42:	bf00      	nop
 801fe44:	08028c6c 	.word	0x08028c6c

0801fe48 <ai_layers_init_all>:
 801fe48:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801fe4a:	b16a      	cbz	r2, 801fe68 <ai_layers_init_all+0x20>
 801fe4c:	6913      	ldr	r3, [r2, #16]
 801fe4e:	60d0      	str	r0, [r2, #12]
 801fe50:	429a      	cmp	r2, r3
 801fe52:	f04f 0201 	mov.w	r2, #1
 801fe56:	d007      	beq.n	801fe68 <ai_layers_init_all+0x20>
 801fe58:	b133      	cbz	r3, 801fe68 <ai_layers_init_all+0x20>
 801fe5a:	6919      	ldr	r1, [r3, #16]
 801fe5c:	3201      	adds	r2, #1
 801fe5e:	60d8      	str	r0, [r3, #12]
 801fe60:	4299      	cmp	r1, r3
 801fe62:	bf18      	it	ne
 801fe64:	2900      	cmpne	r1, #0
 801fe66:	d101      	bne.n	801fe6c <ai_layers_init_all+0x24>
 801fe68:	4610      	mov	r0, r2
 801fe6a:	4770      	bx	lr
 801fe6c:	460b      	mov	r3, r1
 801fe6e:	e7f4      	b.n	801fe5a <ai_layers_init_all+0x12>

0801fe70 <ai_layers_post_init_all>:
 801fe70:	b538      	push	{r3, r4, r5, lr}
 801fe72:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801fe74:	b184      	cbz	r4, 801fe98 <ai_layers_post_init_all+0x28>
 801fe76:	2500      	movs	r5, #0
 801fe78:	6863      	ldr	r3, [r4, #4]
 801fe7a:	4620      	mov	r0, r4
 801fe7c:	07db      	lsls	r3, r3, #31
 801fe7e:	d503      	bpl.n	801fe88 <ai_layers_post_init_all+0x18>
 801fe80:	6a23      	ldr	r3, [r4, #32]
 801fe82:	b10b      	cbz	r3, 801fe88 <ai_layers_post_init_all+0x18>
 801fe84:	3501      	adds	r5, #1
 801fe86:	4798      	blx	r3
 801fe88:	6923      	ldr	r3, [r4, #16]
 801fe8a:	429c      	cmp	r4, r3
 801fe8c:	bf18      	it	ne
 801fe8e:	2b00      	cmpne	r3, #0
 801fe90:	461c      	mov	r4, r3
 801fe92:	d1f1      	bne.n	801fe78 <ai_layers_post_init_all+0x8>
 801fe94:	4628      	mov	r0, r5
 801fe96:	bd38      	pop	{r3, r4, r5, pc}
 801fe98:	4625      	mov	r5, r4
 801fe9a:	e7fb      	b.n	801fe94 <ai_layers_post_init_all+0x24>

0801fe9c <ai_layers_forward_all>:
 801fe9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fea0:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 801fea2:	4604      	mov	r4, r0
 801fea4:	6b45      	ldr	r5, [r0, #52]	; 0x34
 801fea6:	2f00      	cmp	r7, #0
 801fea8:	d02b      	beq.n	801ff02 <ai_layers_forward_all+0x66>
 801feaa:	2d00      	cmp	r5, #0
 801feac:	d03d      	beq.n	801ff2a <ai_layers_forward_all+0x8e>
 801feae:	2600      	movs	r6, #0
 801feb0:	6385      	str	r5, [r0, #56]	; 0x38
 801feb2:	4629      	mov	r1, r5
 801feb4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801feb6:	2001      	movs	r0, #1
 801feb8:	46b0      	mov	r8, r6
 801feba:	47b8      	blx	r7
 801febc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801febe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801fec0:	2002      	movs	r0, #2
 801fec2:	47b8      	blx	r7
 801fec4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 801fec6:	696b      	ldr	r3, [r5, #20]
 801fec8:	4628      	mov	r0, r5
 801feca:	4798      	blx	r3
 801fecc:	692b      	ldr	r3, [r5, #16]
 801fece:	2003      	movs	r0, #3
 801fed0:	429d      	cmp	r5, r3
 801fed2:	4619      	mov	r1, r3
 801fed4:	d009      	beq.n	801feea <ai_layers_forward_all+0x4e>
 801fed6:	63a3      	str	r3, [r4, #56]	; 0x38
 801fed8:	3601      	adds	r6, #1
 801feda:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801fedc:	47b8      	blx	r7
 801fede:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801fee0:	2900      	cmp	r1, #0
 801fee2:	d1ec      	bne.n	801febe <ai_layers_forward_all+0x22>
 801fee4:	4630      	mov	r0, r6
 801fee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801feea:	2100      	movs	r1, #0
 801feec:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 801fef0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801fef2:	3601      	adds	r6, #1
 801fef4:	47b8      	blx	r7
 801fef6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801fef8:	2900      	cmp	r1, #0
 801fefa:	d1e0      	bne.n	801febe <ai_layers_forward_all+0x22>
 801fefc:	4630      	mov	r0, r6
 801fefe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff02:	b195      	cbz	r5, 801ff2a <ai_layers_forward_all+0x8e>
 801ff04:	463e      	mov	r6, r7
 801ff06:	6385      	str	r5, [r0, #56]	; 0x38
 801ff08:	696b      	ldr	r3, [r5, #20]
 801ff0a:	4628      	mov	r0, r5
 801ff0c:	4798      	blx	r3
 801ff0e:	692b      	ldr	r3, [r5, #16]
 801ff10:	3601      	adds	r6, #1
 801ff12:	42ab      	cmp	r3, r5
 801ff14:	461d      	mov	r5, r3
 801ff16:	d003      	beq.n	801ff20 <ai_layers_forward_all+0x84>
 801ff18:	63a3      	str	r3, [r4, #56]	; 0x38
 801ff1a:	2b00      	cmp	r3, #0
 801ff1c:	d1f4      	bne.n	801ff08 <ai_layers_forward_all+0x6c>
 801ff1e:	e7e1      	b.n	801fee4 <ai_layers_forward_all+0x48>
 801ff20:	2300      	movs	r3, #0
 801ff22:	4630      	mov	r0, r6
 801ff24:	63a3      	str	r3, [r4, #56]	; 0x38
 801ff26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff2a:	462e      	mov	r6, r5
 801ff2c:	4630      	mov	r0, r6
 801ff2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff32:	bf00      	nop

0801ff34 <ai_layers_destroy_all>:
 801ff34:	b538      	push	{r3, r4, r5, lr}
 801ff36:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801ff38:	b184      	cbz	r4, 801ff5c <ai_layers_destroy_all+0x28>
 801ff3a:	2500      	movs	r5, #0
 801ff3c:	6863      	ldr	r3, [r4, #4]
 801ff3e:	4620      	mov	r0, r4
 801ff40:	075b      	lsls	r3, r3, #29
 801ff42:	d503      	bpl.n	801ff4c <ai_layers_destroy_all+0x18>
 801ff44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ff46:	b10b      	cbz	r3, 801ff4c <ai_layers_destroy_all+0x18>
 801ff48:	3501      	adds	r5, #1
 801ff4a:	4798      	blx	r3
 801ff4c:	6923      	ldr	r3, [r4, #16]
 801ff4e:	429c      	cmp	r4, r3
 801ff50:	bf18      	it	ne
 801ff52:	2b00      	cmpne	r3, #0
 801ff54:	461c      	mov	r4, r3
 801ff56:	d1f1      	bne.n	801ff3c <ai_layers_destroy_all+0x8>
 801ff58:	4628      	mov	r0, r5
 801ff5a:	bd38      	pop	{r3, r4, r5, pc}
 801ff5c:	4625      	mov	r5, r4
 801ff5e:	e7fb      	b.n	801ff58 <ai_layers_destroy_all+0x24>

0801ff60 <pool_func_ap_array_integer_INT8>:
 801ff60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff64:	b093      	sub	sp, #76	; 0x4c
 801ff66:	6985      	ldr	r5, [r0, #24]
 801ff68:	460f      	mov	r7, r1
 801ff6a:	469c      	mov	ip, r3
 801ff6c:	9c24      	ldr	r4, [sp, #144]	; 0x90
 801ff6e:	6803      	ldr	r3, [r0, #0]
 801ff70:	69a1      	ldr	r1, [r4, #24]
 801ff72:	68a8      	ldr	r0, [r5, #8]
 801ff74:	6825      	ldr	r5, [r4, #0]
 801ff76:	f8bd 4074 	ldrh.w	r4, [sp, #116]	; 0x74
 801ff7a:	6889      	ldr	r1, [r1, #8]
 801ff7c:	940d      	str	r4, [sp, #52]	; 0x34
 801ff7e:	f8bd 4078 	ldrh.w	r4, [sp, #120]	; 0x78
 801ff82:	f8bd a070 	ldrh.w	sl, [sp, #112]	; 0x70
 801ff86:	940e      	str	r4, [sp, #56]	; 0x38
 801ff88:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 801ff8c:	f8bd e084 	ldrh.w	lr, [sp, #132]	; 0x84
 801ff90:	940f      	str	r4, [sp, #60]	; 0x3c
 801ff92:	f8bd 4080 	ldrh.w	r4, [sp, #128]	; 0x80
 801ff96:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801ff9a:	9410      	str	r4, [sp, #64]	; 0x40
 801ff9c:	f8bd 908c 	ldrh.w	r9, [sp, #140]	; 0x8c
 801ffa0:	2b00      	cmp	r3, #0
 801ffa2:	d03c      	beq.n	802001e <pool_func_ap_array_integer_INT8+0xbe>
 801ffa4:	685e      	ldr	r6, [r3, #4]
 801ffa6:	46b3      	mov	fp, r6
 801ffa8:	2e00      	cmp	r6, #0
 801ffaa:	d031      	beq.n	8020010 <pool_func_ap_array_integer_INT8+0xb0>
 801ffac:	885c      	ldrh	r4, [r3, #2]
 801ffae:	9411      	str	r4, [sp, #68]	; 0x44
 801ffb0:	2c00      	cmp	r4, #0
 801ffb2:	d051      	beq.n	8020058 <pool_func_ap_array_integer_INT8+0xf8>
 801ffb4:	6834      	ldr	r4, [r6, #0]
 801ffb6:	ed94 0a00 	vldr	s0, [r4]
 801ffba:	2d00      	cmp	r5, #0
 801ffbc:	d069      	beq.n	8020092 <pool_func_ap_array_integer_INT8+0x132>
 801ffbe:	686c      	ldr	r4, [r5, #4]
 801ffc0:	2c00      	cmp	r4, #0
 801ffc2:	d054      	beq.n	802006e <pool_func_ap_array_integer_INT8+0x10e>
 801ffc4:	886e      	ldrh	r6, [r5, #2]
 801ffc6:	9611      	str	r6, [sp, #68]	; 0x44
 801ffc8:	2e00      	cmp	r6, #0
 801ffca:	d033      	beq.n	8020034 <pool_func_ap_array_integer_INT8+0xd4>
 801ffcc:	6826      	ldr	r6, [r4, #0]
 801ffce:	edd6 0a00 	vldr	s1, [r6]
 801ffd2:	2b00      	cmp	r3, #0
 801ffd4:	d155      	bne.n	8020082 <pool_func_ap_array_integer_INT8+0x122>
 801ffd6:	6864      	ldr	r4, [r4, #4]
 801ffd8:	f994 4000 	ldrsb.w	r4, [r4]
 801ffdc:	f8cd 9020 	str.w	r9, [sp, #32]
 801ffe0:	f8cd 801c 	str.w	r8, [sp, #28]
 801ffe4:	f8cd e018 	str.w	lr, [sp, #24]
 801ffe8:	f8cd c000 	str.w	ip, [sp]
 801ffec:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
 801fff0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fff2:	4613      	mov	r3, r2
 801fff4:	463a      	mov	r2, r7
 801fff6:	9405      	str	r4, [sp, #20]
 801fff8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801fffa:	9404      	str	r4, [sp, #16]
 801fffc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801fffe:	9403      	str	r4, [sp, #12]
 8020000:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020002:	e9cd a401 	strd	sl, r4, [sp, #4]
 8020006:	f004 fec9 	bl	8024d9c <st_int8_avepool>
 802000a:	b013      	add	sp, #76	; 0x4c
 802000c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020010:	2d00      	cmp	r5, #0
 8020012:	d02f      	beq.n	8020074 <pool_func_ap_array_integer_INT8+0x114>
 8020014:	686c      	ldr	r4, [r5, #4]
 8020016:	b93c      	cbnz	r4, 8020028 <pool_func_ap_array_integer_INT8+0xc8>
 8020018:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80200bc <pool_func_ap_array_integer_INT8+0x15c>
 802001c:	e00d      	b.n	802003a <pool_func_ap_array_integer_INT8+0xda>
 802001e:	2d00      	cmp	r5, #0
 8020020:	d028      	beq.n	8020074 <pool_func_ap_array_integer_INT8+0x114>
 8020022:	686c      	ldr	r4, [r5, #4]
 8020024:	2c00      	cmp	r4, #0
 8020026:	d03f      	beq.n	80200a8 <pool_func_ap_array_integer_INT8+0x148>
 8020028:	886e      	ldrh	r6, [r5, #2]
 802002a:	ed9f 0a24 	vldr	s0, [pc, #144]	; 80200bc <pool_func_ap_array_integer_INT8+0x15c>
 802002e:	9611      	str	r6, [sp, #68]	; 0x44
 8020030:	2e00      	cmp	r6, #0
 8020032:	d1cb      	bne.n	801ffcc <pool_func_ap_array_integer_INT8+0x6c>
 8020034:	2b00      	cmp	r3, #0
 8020036:	d03e      	beq.n	80200b6 <pool_func_ap_array_integer_INT8+0x156>
 8020038:	685e      	ldr	r6, [r3, #4]
 802003a:	46b3      	mov	fp, r6
 802003c:	2e00      	cmp	r6, #0
 802003e:	d02f      	beq.n	80200a0 <pool_func_ap_array_integer_INT8+0x140>
 8020040:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80200bc <pool_func_ap_array_integer_INT8+0x15c>
 8020044:	885b      	ldrh	r3, [r3, #2]
 8020046:	b953      	cbnz	r3, 802005e <pool_func_ap_array_integer_INT8+0xfe>
 8020048:	2c00      	cmp	r4, #0
 802004a:	d0c7      	beq.n	801ffdc <pool_func_ap_array_integer_INT8+0x7c>
 802004c:	886d      	ldrh	r5, [r5, #2]
 802004e:	9511      	str	r5, [sp, #68]	; 0x44
 8020050:	2d00      	cmp	r5, #0
 8020052:	d1c0      	bne.n	801ffd6 <pool_func_ap_array_integer_INT8+0x76>
 8020054:	2400      	movs	r4, #0
 8020056:	e7c1      	b.n	801ffdc <pool_func_ap_array_integer_INT8+0x7c>
 8020058:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80200bc <pool_func_ap_array_integer_INT8+0x15c>
 802005c:	e7ad      	b.n	801ffba <pool_func_ap_array_integer_INT8+0x5a>
 802005e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8020062:	f993 3000 	ldrsb.w	r3, [r3]
 8020066:	2d00      	cmp	r5, #0
 8020068:	d0f4      	beq.n	8020054 <pool_func_ap_array_integer_INT8+0xf4>
 802006a:	686c      	ldr	r4, [r5, #4]
 802006c:	e7ec      	b.n	8020048 <pool_func_ap_array_integer_INT8+0xe8>
 802006e:	2b00      	cmp	r3, #0
 8020070:	d1e3      	bne.n	802003a <pool_func_ap_array_integer_INT8+0xda>
 8020072:	e01b      	b.n	80200ac <pool_func_ap_array_integer_INT8+0x14c>
 8020074:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80200bc <pool_func_ap_array_integer_INT8+0x15c>
 8020078:	462b      	mov	r3, r5
 802007a:	462c      	mov	r4, r5
 802007c:	eef0 0a40 	vmov.f32	s1, s0
 8020080:	e7ac      	b.n	801ffdc <pool_func_ap_array_integer_INT8+0x7c>
 8020082:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8020086:	f1bb 0f00 	cmp.w	fp, #0
 802008a:	d1db      	bne.n	8020044 <pool_func_ap_array_integer_INT8+0xe4>
 802008c:	465b      	mov	r3, fp
 802008e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020090:	e7de      	b.n	8020050 <pool_func_ap_array_integer_INT8+0xf0>
 8020092:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020094:	eddf 0a09 	vldr	s1, [pc, #36]	; 80200bc <pool_func_ap_array_integer_INT8+0x15c>
 8020098:	2b00      	cmp	r3, #0
 802009a:	d1e0      	bne.n	802005e <pool_func_ap_array_integer_INT8+0xfe>
 802009c:	461c      	mov	r4, r3
 802009e:	e79d      	b.n	801ffdc <pool_func_ap_array_integer_INT8+0x7c>
 80200a0:	4633      	mov	r3, r6
 80200a2:	eddf 0a06 	vldr	s1, [pc, #24]	; 80200bc <pool_func_ap_array_integer_INT8+0x15c>
 80200a6:	e7cf      	b.n	8020048 <pool_func_ap_array_integer_INT8+0xe8>
 80200a8:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80200bc <pool_func_ap_array_integer_INT8+0x15c>
 80200ac:	2300      	movs	r3, #0
 80200ae:	eddf 0a03 	vldr	s1, [pc, #12]	; 80200bc <pool_func_ap_array_integer_INT8+0x15c>
 80200b2:	461c      	mov	r4, r3
 80200b4:	e792      	b.n	801ffdc <pool_func_ap_array_integer_INT8+0x7c>
 80200b6:	eddf 0a01 	vldr	s1, [pc, #4]	; 80200bc <pool_func_ap_array_integer_INT8+0x15c>
 80200ba:	e7cb      	b.n	8020054 <pool_func_ap_array_integer_INT8+0xf4>
 80200bc:	00000000 	.word	0x00000000

080200c0 <align_factor>:
 80200c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80200c4:	b508      	push	{r3, lr}
 80200c6:	eeb4 0a67 	vcmp.f32	s0, s15
 80200ca:	2300      	movs	r3, #0
 80200cc:	8003      	strh	r3, [r0, #0]
 80200ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80200d2:	d52d      	bpl.n	8020130 <align_factor+0x70>
 80200d4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80200d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80200dc:	dd28      	ble.n	8020130 <align_factor+0x70>
 80200de:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80200e2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80200e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80200ea:	d511      	bpl.n	8020110 <align_factor+0x50>
 80200ec:	2201      	movs	r2, #1
 80200ee:	ee30 0a00 	vadd.f32	s0, s0, s0
 80200f2:	2302      	movs	r3, #2
 80200f4:	8002      	strh	r2, [r0, #0]
 80200f6:	e005      	b.n	8020104 <align_factor+0x44>
 80200f8:	8003      	strh	r3, [r0, #0]
 80200fa:	b293      	uxth	r3, r2
 80200fc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8020100:	2b21      	cmp	r3, #33	; 0x21
 8020102:	d035      	beq.n	8020170 <align_factor+0xb0>
 8020104:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8020108:	1c5a      	adds	r2, r3, #1
 802010a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802010e:	d4f3      	bmi.n	80200f8 <align_factor+0x38>
 8020110:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8020184 <align_factor+0xc4>
 8020114:	ee60 7a27 	vmul.f32	s15, s0, s15
 8020118:	ee17 0a90 	vmov	r0, s15
 802011c:	f7e0 f960 	bl	80003e0 <__aeabi_f2lz>
 8020120:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8020124:	d003      	beq.n	802012e <align_factor+0x6e>
 8020126:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 802012a:	ea80 70e1 	eor.w	r0, r0, r1, asr #31
 802012e:	bd08      	pop	{r3, pc}
 8020130:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8020134:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8020138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802013c:	dde8      	ble.n	8020110 <align_factor+0x50>
 802013e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8020142:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020146:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 802014a:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 802014e:	8002      	strh	r2, [r0, #0]
 8020150:	ee20 0a07 	vmul.f32	s0, s0, s14
 8020154:	e005      	b.n	8020162 <align_factor+0xa2>
 8020156:	8003      	strh	r3, [r0, #0]
 8020158:	b293      	uxth	r3, r2
 802015a:	ee20 0a07 	vmul.f32	s0, s0, s14
 802015e:	428b      	cmp	r3, r1
 8020160:	d00a      	beq.n	8020178 <align_factor+0xb8>
 8020162:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8020166:	1e5a      	subs	r2, r3, #1
 8020168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802016c:	dcf3      	bgt.n	8020156 <align_factor+0x96>
 802016e:	e7cf      	b.n	8020110 <align_factor+0x50>
 8020170:	2300      	movs	r3, #0
 8020172:	8003      	strh	r3, [r0, #0]
 8020174:	4618      	mov	r0, r3
 8020176:	bd08      	pop	{r3, pc}
 8020178:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 802017c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8020180:	8003      	strh	r3, [r0, #0]
 8020182:	e7c5      	b.n	8020110 <align_factor+0x50>
 8020184:	4f000000 	.word	0x4f000000

08020188 <align_factor_ch>:
 8020188:	2900      	cmp	r1, #0
 802018a:	d06f      	beq.n	802026c <align_factor_ch+0xe4>
 802018c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020190:	ed2d 8b04 	vpush	{d8-d9}
 8020194:	ee80 9a20 	vdiv.f32	s18, s0, s1
 8020198:	4604      	mov	r4, r0
 802019a:	4691      	mov	r9, r2
 802019c:	4698      	mov	r8, r3
 802019e:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 80201a2:	eddf 9a33 	vldr	s19, [pc, #204]	; 8020270 <align_factor_ch+0xe8>
 80201a6:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 80201aa:	2700      	movs	r7, #0
 80201ac:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80201b0:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80201b4:	ecf4 7a01 	vldmia	r4!, {s15}
 80201b8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80201bc:	eef4 7a68 	vcmp.f32	s15, s17
 80201c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80201c4:	d530      	bpl.n	8020228 <align_factor_ch+0xa0>
 80201c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80201ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80201ce:	dd2b      	ble.n	8020228 <align_factor_ch+0xa0>
 80201d0:	eef4 7ac8 	vcmpe.f32	s15, s16
 80201d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80201d8:	d546      	bpl.n	8020268 <align_factor_ch+0xe0>
 80201da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80201de:	2301      	movs	r3, #1
 80201e0:	e004      	b.n	80201ec <align_factor_ch+0x64>
 80201e2:	2a20      	cmp	r2, #32
 80201e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80201e8:	b213      	sxth	r3, r2
 80201ea:	d039      	beq.n	8020260 <align_factor_ch+0xd8>
 80201ec:	eef4 7ac8 	vcmpe.f32	s15, s16
 80201f0:	1c5a      	adds	r2, r3, #1
 80201f2:	b292      	uxth	r2, r2
 80201f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80201f8:	d4f3      	bmi.n	80201e2 <align_factor_ch+0x5a>
 80201fa:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80201fe:	f8a8 3000 	strh.w	r3, [r8]
 8020202:	ee17 0a90 	vmov	r0, s15
 8020206:	f7e0 f8eb 	bl	80003e0 <__aeabi_f2lz>
 802020a:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 802020e:	bf18      	it	ne
 8020210:	ea86 70e1 	eorne.w	r0, r6, r1, asr #31
 8020214:	42a5      	cmp	r5, r4
 8020216:	f849 0b04 	str.w	r0, [r9], #4
 802021a:	f108 0802 	add.w	r8, r8, #2
 802021e:	d1c9      	bne.n	80201b4 <align_factor_ch+0x2c>
 8020220:	ecbd 8b04 	vpop	{d8-d9}
 8020224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020228:	eef4 7ae8 	vcmpe.f32	s15, s17
 802022c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020230:	dd1a      	ble.n	8020268 <align_factor_ch+0xe0>
 8020232:	ee67 7a88 	vmul.f32	s15, s15, s16
 8020236:	f04f 33ff 	mov.w	r3, #4294967295
 802023a:	e005      	b.n	8020248 <align_factor_ch+0xc0>
 802023c:	b213      	sxth	r3, r2
 802023e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8020242:	f113 0f1f 	cmn.w	r3, #31
 8020246:	d006      	beq.n	8020256 <align_factor_ch+0xce>
 8020248:	eef4 7ae8 	vcmpe.f32	s15, s17
 802024c:	1e5a      	subs	r2, r3, #1
 802024e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020252:	dcf3      	bgt.n	802023c <align_factor_ch+0xb4>
 8020254:	e7d1      	b.n	80201fa <align_factor_ch+0x72>
 8020256:	ee77 7aa7 	vadd.f32	s15, s15, s15
 802025a:	f06f 031d 	mvn.w	r3, #29
 802025e:	e7cc      	b.n	80201fa <align_factor_ch+0x72>
 8020260:	f8a8 7000 	strh.w	r7, [r8]
 8020264:	2000      	movs	r0, #0
 8020266:	e7d5      	b.n	8020214 <align_factor_ch+0x8c>
 8020268:	2300      	movs	r3, #0
 802026a:	e7c6      	b.n	80201fa <align_factor_ch+0x72>
 802026c:	4770      	bx	lr
 802026e:	bf00      	nop
 8020270:	4f000000 	.word	0x4f000000

08020274 <st_sssa8_ch_conv_dw_Wadapt>:
 8020274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020278:	b089      	sub	sp, #36	; 0x24
 802027a:	4606      	mov	r6, r0
 802027c:	ea5f 0991 	movs.w	r9, r1, lsr #2
 8020280:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020282:	9005      	str	r0, [sp, #20]
 8020284:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8020288:	9202      	str	r2, [sp, #8]
 802028a:	9303      	str	r3, [sp, #12]
 802028c:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 8020290:	f000 8081 	beq.w	8020396 <st_sssa8_ch_conv_dw_Wadapt+0x122>
 8020294:	fb03 fa02 	mul.w	sl, r3, r2
 8020298:	461d      	mov	r5, r3
 802029a:	f109 33ff 	add.w	r3, r9, #4294967295
 802029e:	1d34      	adds	r4, r6, #4
 80202a0:	fb12 f505 	smulbb	r5, r2, r5
 80202a4:	f3ca 0a4f 	ubfx	sl, sl, #1, #16
 80202a8:	b29b      	uxth	r3, r3
 80202aa:	f8cd 9010 	str.w	r9, [sp, #16]
 80202ae:	f10a 32ff 	add.w	r2, sl, #4294967295
 80202b2:	ea4f 0e41 	mov.w	lr, r1, lsl #1
 80202b6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80202ba:	f005 0301 	and.w	r3, r5, #1
 80202be:	46b0      	mov	r8, r6
 80202c0:	f8df c128 	ldr.w	ip, [pc, #296]	; 80203ec <st_sssa8_ch_conv_dw_Wadapt+0x178>
 80202c4:	9300      	str	r3, [sp, #0]
 80202c6:	b293      	uxth	r3, r2
 80202c8:	46a1      	mov	r9, r4
 80202ca:	fb03 e30e 	mla	r3, r3, lr, lr
 80202ce:	9301      	str	r3, [sp, #4]
 80202d0:	9007      	str	r0, [sp, #28]
 80202d2:	4644      	mov	r4, r8
 80202d4:	f1ba 0f00 	cmp.w	sl, #0
 80202d8:	d030      	beq.n	802033c <st_sssa8_ch_conv_dw_Wadapt+0xc8>
 80202da:	4650      	mov	r0, sl
 80202dc:	468b      	mov	fp, r1
 80202de:	9907      	ldr	r1, [sp, #28]
 80202e0:	3801      	subs	r0, #1
 80202e2:	6822      	ldr	r2, [r4, #0]
 80202e4:	1d0d      	adds	r5, r1, #4
 80202e6:	f854 300b 	ldr.w	r3, [r4, fp]
 80202ea:	b296      	uxth	r6, r2
 80202ec:	4474      	add	r4, lr
 80202ee:	9507      	str	r5, [sp, #28]
 80202f0:	ea03 050c 	and.w	r5, r3, ip
 80202f4:	9f07      	ldr	r7, [sp, #28]
 80202f6:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 80202fa:	ea45 4212 	orr.w	r2, r5, r2, lsr #16
 80202fe:	1d3e      	adds	r6, r7, #4
 8020300:	b280      	uxth	r0, r0
 8020302:	fa2f f583 	sxtb16	r5, r3
 8020306:	9607      	str	r6, [sp, #28]
 8020308:	ea4f 2333 	mov.w	r3, r3, ror #8
 802030c:	9e07      	ldr	r6, [sp, #28]
 802030e:	600d      	str	r5, [r1, #0]
 8020310:	ea4f 2532 	mov.w	r5, r2, ror #8
 8020314:	1d31      	adds	r1, r6, #4
 8020316:	fa2f f383 	sxtb16	r3, r3
 802031a:	9107      	str	r1, [sp, #28]
 802031c:	9907      	ldr	r1, [sp, #28]
 802031e:	603b      	str	r3, [r7, #0]
 8020320:	1d0b      	adds	r3, r1, #4
 8020322:	fa2f f282 	sxtb16	r2, r2
 8020326:	fa2f f585 	sxtb16	r5, r5
 802032a:	6032      	str	r2, [r6, #0]
 802032c:	9307      	str	r3, [sp, #28]
 802032e:	600d      	str	r5, [r1, #0]
 8020330:	2800      	cmp	r0, #0
 8020332:	d1d4      	bne.n	80202de <st_sssa8_ch_conv_dw_Wadapt+0x6a>
 8020334:	9b01      	ldr	r3, [sp, #4]
 8020336:	4659      	mov	r1, fp
 8020338:	eb03 0408 	add.w	r4, r3, r8
 802033c:	9b00      	ldr	r3, [sp, #0]
 802033e:	9807      	ldr	r0, [sp, #28]
 8020340:	b1fb      	cbz	r3, 8020382 <st_sssa8_ch_conv_dw_Wadapt+0x10e>
 8020342:	6823      	ldr	r3, [r4, #0]
 8020344:	2500      	movs	r5, #0
 8020346:	3008      	adds	r0, #8
 8020348:	ea03 020c 	and.w	r2, r3, ip
 802034c:	462c      	mov	r4, r5
 802034e:	ea0c 2603 	and.w	r6, ip, r3, lsl #8
 8020352:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8020356:	b29b      	uxth	r3, r3
 8020358:	ea4f 4232 	mov.w	r2, r2, ror #16
 802035c:	4333      	orrs	r3, r6
 802035e:	fa2f f282 	sxtb16	r2, r2
 8020362:	fa2f f383 	sxtb16	r3, r3
 8020366:	f362 050f 	bfi	r5, r2, #0, #16
 802036a:	f363 040f 	bfi	r4, r3, #0, #16
 802036e:	0c12      	lsrs	r2, r2, #16
 8020370:	0c1b      	lsrs	r3, r3, #16
 8020372:	f362 451f 	bfi	r5, r2, #16, #16
 8020376:	f363 441f 	bfi	r4, r3, #16, #16
 802037a:	f840 5c04 	str.w	r5, [r0, #-4]
 802037e:	f840 4c08 	str.w	r4, [r0, #-8]
 8020382:	f108 0804 	add.w	r8, r8, #4
 8020386:	45c1      	cmp	r9, r8
 8020388:	d1a2      	bne.n	80202d0 <st_sssa8_ch_conv_dw_Wadapt+0x5c>
 802038a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 802038e:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8020392:	fa1f f989 	uxth.w	r9, r9
 8020396:	f011 0703 	ands.w	r7, r1, #3
 802039a:	d023      	beq.n	80203e4 <st_sssa8_ch_conv_dw_Wadapt+0x170>
 802039c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80203a0:	fb13 f302 	smulbb	r3, r3, r2
 80203a4:	b29b      	uxth	r3, r3
 80203a6:	b1eb      	cbz	r3, 80203e4 <st_sssa8_ch_conv_dw_Wadapt+0x170>
 80203a8:	3b01      	subs	r3, #1
 80203aa:	444f      	add	r7, r9
 80203ac:	f8dd e014 	ldr.w	lr, [sp, #20]
 80203b0:	b29b      	uxth	r3, r3
 80203b2:	b2bf      	uxth	r7, r7
 80203b4:	f103 0c01 	add.w	ip, r3, #1
 80203b8:	005b      	lsls	r3, r3, #1
 80203ba:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80203be:	1c9e      	adds	r6, r3, #2
 80203c0:	f109 0401 	add.w	r4, r9, #1
 80203c4:	eb0e 0209 	add.w	r2, lr, r9
 80203c8:	1985      	adds	r5, r0, r6
 80203ca:	4603      	mov	r3, r0
 80203cc:	fa1f f984 	uxth.w	r9, r4
 80203d0:	f992 4000 	ldrsb.w	r4, [r2]
 80203d4:	440a      	add	r2, r1
 80203d6:	f823 4b02 	strh.w	r4, [r3], #2
 80203da:	42ab      	cmp	r3, r5
 80203dc:	d1f8      	bne.n	80203d0 <st_sssa8_ch_conv_dw_Wadapt+0x15c>
 80203de:	45b9      	cmp	r9, r7
 80203e0:	4460      	add	r0, ip
 80203e2:	d1ed      	bne.n	80203c0 <st_sssa8_ch_conv_dw_Wadapt+0x14c>
 80203e4:	b009      	add	sp, #36	; 0x24
 80203e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203ea:	bf00      	nop
 80203ec:	ffff0000 	.word	0xffff0000

080203f0 <st_sssa8_ch_convolve_dw>:
 80203f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203f4:	b0dd      	sub	sp, #372	; 0x174
 80203f6:	f8bd 719c 	ldrh.w	r7, [sp, #412]	; 0x19c
 80203fa:	f8bd 41a4 	ldrh.w	r4, [sp, #420]	; 0x1a4
 80203fe:	901f      	str	r0, [sp, #124]	; 0x7c
 8020400:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8020404:	f8bd 01a0 	ldrh.w	r0, [sp, #416]	; 0x1a0
 8020408:	007e      	lsls	r6, r7, #1
 802040a:	9108      	str	r1, [sp, #32]
 802040c:	eb08 0107 	add.w	r1, r8, r7
 8020410:	fb04 f900 	mul.w	r9, r4, r0
 8020414:	f99d 51c8 	ldrsb.w	r5, [sp, #456]	; 0x1c8
 8020418:	9219      	str	r2, [sp, #100]	; 0x64
 802041a:	fb07 1109 	mla	r1, r7, r9, r1
 802041e:	9a76      	ldr	r2, [sp, #472]	; 0x1d8
 8020420:	9033      	str	r0, [sp, #204]	; 0xcc
 8020422:	19f0      	adds	r0, r6, r7
 8020424:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8020428:	931e      	str	r3, [sp, #120]	; 0x78
 802042a:	9b76      	ldr	r3, [sp, #472]	; 0x1d8
 802042c:	9218      	str	r2, [sp, #96]	; 0x60
 802042e:	f8bd 21a8 	ldrh.w	r2, [sp, #424]	; 0x1a8
 8020432:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8020436:	9438      	str	r4, [sp, #224]	; 0xe0
 8020438:	9232      	str	r2, [sp, #200]	; 0xc8
 802043a:	f8bd 21ac 	ldrh.w	r2, [sp, #428]	; 0x1ac
 802043e:	9614      	str	r6, [sp, #80]	; 0x50
 8020440:	9239      	str	r2, [sp, #228]	; 0xe4
 8020442:	f8bd 21b0 	ldrh.w	r2, [sp, #432]	; 0x1b0
 8020446:	9326      	str	r3, [sp, #152]	; 0x98
 8020448:	9222      	str	r2, [sp, #136]	; 0x88
 802044a:	f8bd 21b4 	ldrh.w	r2, [sp, #436]	; 0x1b4
 802044e:	9237      	str	r2, [sp, #220]	; 0xdc
 8020450:	f99d 21c4 	ldrsb.w	r2, [sp, #452]	; 0x1c4
 8020454:	9209      	str	r2, [sp, #36]	; 0x24
 8020456:	f8bd 21d0 	ldrh.w	r2, [sp, #464]	; 0x1d0
 802045a:	9225      	str	r2, [sp, #148]	; 0x94
 802045c:	f8bd 21d4 	ldrh.w	r2, [sp, #468]	; 0x1d4
 8020460:	923a      	str	r2, [sp, #232]	; 0xe8
 8020462:	b1af      	cbz	r7, 8020490 <st_sssa8_ch_convolve_dw+0xa0>
 8020464:	9970      	ldr	r1, [sp, #448]	; 0x1c0
 8020466:	1f1c      	subs	r4, r3, #4
 8020468:	f04f 0c01 	mov.w	ip, #1
 802046c:	198e      	adds	r6, r1, r6
 802046e:	f931 3b02 	ldrsh.w	r3, [r1], #2
 8020472:	1e5a      	subs	r2, r3, #1
 8020474:	fa0c f003 	lsl.w	r0, ip, r3
 8020478:	fa05 f303 	lsl.w	r3, r5, r3
 802047c:	b292      	uxth	r2, r2
 802047e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8020482:	2a14      	cmp	r2, #20
 8020484:	f200 8512 	bhi.w	8020eac <st_sssa8_ch_convolve_dw+0xabc>
 8020488:	428e      	cmp	r6, r1
 802048a:	f844 3f04 	str.w	r3, [r4, #4]!
 802048e:	d1ee      	bne.n	802046e <st_sssa8_ch_convolve_dw+0x7e>
 8020490:	9c08      	ldr	r4, [sp, #32]
 8020492:	a944      	add	r1, sp, #272	; 0x110
 8020494:	ab40      	add	r3, sp, #256	; 0x100
 8020496:	aa3c      	add	r2, sp, #240	; 0xf0
 8020498:	943e      	str	r4, [sp, #248]	; 0xf8
 802049a:	a848      	add	r0, sp, #288	; 0x120
 802049c:	9c19      	ldr	r4, [sp, #100]	; 0x64
 802049e:	9100      	str	r1, [sp, #0]
 80204a0:	a952      	add	r1, sp, #328	; 0x148
 80204a2:	943d      	str	r4, [sp, #244]	; 0xf4
 80204a4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80204a6:	9442      	str	r4, [sp, #264]	; 0x108
 80204a8:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80204aa:	9441      	str	r4, [sp, #260]	; 0x104
 80204ac:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 80204ae:	9446      	str	r4, [sp, #280]	; 0x118
 80204b0:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 80204b2:	9445      	str	r4, [sp, #276]	; 0x114
 80204b4:	9c22      	ldr	r4, [sp, #136]	; 0x88
 80204b6:	9454      	str	r4, [sp, #336]	; 0x150
 80204b8:	9c37      	ldr	r4, [sp, #220]	; 0xdc
 80204ba:	9455      	str	r4, [sp, #340]	; 0x154
 80204bc:	9c32      	ldr	r4, [sp, #200]	; 0xc8
 80204be:	9456      	str	r4, [sp, #344]	; 0x158
 80204c0:	9c39      	ldr	r4, [sp, #228]	; 0xe4
 80204c2:	9457      	str	r4, [sp, #348]	; 0x15c
 80204c4:	f002 fa84 	bl	80229d0 <ai_padding_opt_init>
 80204c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80204ca:	fbb7 f3f3 	udiv	r3, r7, r3
 80204ce:	079a      	lsls	r2, r3, #30
 80204d0:	931a      	str	r3, [sp, #104]	; 0x68
 80204d2:	f040 84f2 	bne.w	8020eba <st_sssa8_ch_convolve_dw+0xaca>
 80204d6:	109c      	asrs	r4, r3, #2
 80204d8:	2304      	movs	r3, #4
 80204da:	931a      	str	r3, [sp, #104]	; 0x68
 80204dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80204de:	425b      	negs	r3, r3
 80204e0:	b29a      	uxth	r2, r3
 80204e2:	ea42 4b03 	orr.w	fp, r2, r3, lsl #16
 80204e6:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80204e8:	2b00      	cmp	r3, #0
 80204ea:	f000 8254 	beq.w	8020996 <st_sssa8_ch_convolve_dw+0x5a6>
 80204ee:	f3c9 014f 	ubfx	r1, r9, #1, #16
 80204f2:	08ba      	lsrs	r2, r7, #2
 80204f4:	9838      	ldr	r0, [sp, #224]	; 0xe0
 80204f6:	1e4d      	subs	r5, r1, #1
 80204f8:	910f      	str	r1, [sp, #60]	; 0x3c
 80204fa:	996e      	ldr	r1, [sp, #440]	; 0x1b8
 80204fc:	fa1f fa85 	uxth.w	sl, r5
 8020500:	2500      	movs	r5, #0
 8020502:	f101 0e20 	add.w	lr, r1, #32
 8020506:	9939      	ldr	r1, [sp, #228]	; 0xe4
 8020508:	9536      	str	r5, [sp, #216]	; 0xd8
 802050a:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 802050c:	f1c1 0c00 	rsb	ip, r1, #0
 8020510:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020512:	9224      	str	r2, [sp, #144]	; 0x90
 8020514:	4629      	mov	r1, r5
 8020516:	fb13 f300 	smulbb	r3, r3, r0
 802051a:	3a01      	subs	r2, #1
 802051c:	fb01 f104 	mul.w	r1, r1, r4
 8020520:	9826      	ldr	r0, [sp, #152]	; 0x98
 8020522:	b292      	uxth	r2, r2
 8020524:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8020526:	4440      	add	r0, r8
 8020528:	9135      	str	r1, [sp, #212]	; 0xd4
 802052a:	f102 0901 	add.w	r9, r2, #1
 802052e:	eb0e 1102 	add.w	r1, lr, r2, lsl #4
 8020532:	eba7 0808 	sub.w	r8, r7, r8
 8020536:	9029      	str	r0, [sp, #164]	; 0xa4
 8020538:	9111      	str	r1, [sp, #68]	; 0x44
 802053a:	b29b      	uxth	r3, r3
 802053c:	eb00 0648 	add.w	r6, r0, r8, lsl #1
 8020540:	9976      	ldr	r1, [sp, #472]	; 0x1d8
 8020542:	ea4f 1009 	mov.w	r0, r9, lsl #4
 8020546:	931b      	str	r3, [sp, #108]	; 0x6c
 8020548:	3b01      	subs	r3, #1
 802054a:	9628      	str	r6, [sp, #160]	; 0xa0
 802054c:	4401      	add	r1, r0
 802054e:	f10a 0601 	add.w	r6, sl, #1
 8020552:	b29b      	uxth	r3, r3
 8020554:	46b8      	mov	r8, r7
 8020556:	9130      	str	r1, [sp, #192]	; 0xc0
 8020558:	1821      	adds	r1, r4, r0
 802055a:	3301      	adds	r3, #1
 802055c:	2400      	movs	r4, #0
 802055e:	912d      	str	r1, [sp, #180]	; 0xb4
 8020560:	996e      	ldr	r1, [sp, #440]	; 0x1b8
 8020562:	4401      	add	r1, r0
 8020564:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8020566:	912c      	str	r1, [sp, #176]	; 0xb0
 8020568:	0059      	lsls	r1, r3, #1
 802056a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802056c:	911d      	str	r1, [sp, #116]	; 0x74
 802056e:	eb00 01c9 	add.w	r1, r0, r9, lsl #3
 8020572:	912f      	str	r1, [sp, #188]	; 0xbc
 8020574:	9914      	ldr	r1, [sp, #80]	; 0x50
 8020576:	fb06 f101 	mul.w	r1, r6, r1
 802057a:	9115      	str	r1, [sp, #84]	; 0x54
 802057c:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8020580:	912b      	str	r1, [sp, #172]	; 0xac
 8020582:	f003 0101 	and.w	r1, r3, #1
 8020586:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020588:	9110      	str	r1, [sp, #64]	; 0x40
 802058a:	ea4f 110a 	mov.w	r1, sl, lsl #4
 802058e:	fb05 f303 	mul.w	r3, r5, r3
 8020592:	912a      	str	r1, [sp, #168]	; 0xa8
 8020594:	0131      	lsls	r1, r6, #4
 8020596:	933b      	str	r3, [sp, #236]	; 0xec
 8020598:	9116      	str	r1, [sp, #88]	; 0x58
 802059a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 802059c:	f8cd b0c4 	str.w	fp, [sp, #196]	; 0xc4
 80205a0:	0093      	lsls	r3, r2, #2
 80205a2:	932e      	str	r3, [sp, #184]	; 0xb8
 80205a4:	f007 0303 	and.w	r3, r7, #3
 80205a8:	9321      	str	r3, [sp, #132]	; 0x84
 80205aa:	fa1f f38c 	uxth.w	r3, ip
 80205ae:	9334      	str	r3, [sp, #208]	; 0xd0
 80205b0:	a848      	add	r0, sp, #288	; 0x120
 80205b2:	f002 fa67 	bl	8022a84 <ai_padding_opt_phase1>
 80205b6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80205b8:	2b00      	cmp	r3, #0
 80205ba:	f000 81de 	beq.w	802097a <st_sssa8_ch_convolve_dw+0x58a>
 80205be:	f9bd 00d0 	ldrsh.w	r0, [sp, #208]	; 0xd0
 80205c2:	2100      	movs	r1, #0
 80205c4:	46c3      	mov	fp, r8
 80205c6:	9027      	str	r0, [sp, #156]	; 0x9c
 80205c8:	9837      	ldr	r0, [sp, #220]	; 0xdc
 80205ca:	9120      	str	r1, [sp, #128]	; 0x80
 80205cc:	e9dd 3238 	ldrd	r3, r2, [sp, #224]	; 0xe0
 80205d0:	1a9a      	subs	r2, r3, r2
 80205d2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80205d4:	425b      	negs	r3, r3
 80205d6:	fb04 2200 	mla	r2, r4, r0, r2
 80205da:	b29b      	uxth	r3, r3
 80205dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80205de:	460a      	mov	r2, r1
 80205e0:	931c      	str	r3, [sp, #112]	; 0x70
 80205e2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80205e4:	3b01      	subs	r3, #1
 80205e6:	9313      	str	r3, [sp, #76]	; 0x4c
 80205e8:	9b48      	ldr	r3, [sp, #288]	; 0x120
 80205ea:	2b00      	cmp	r3, #0
 80205ec:	f000 830e 	beq.w	8020c0c <st_sssa8_ch_convolve_dw+0x81c>
 80205f0:	3b01      	subs	r3, #1
 80205f2:	2101      	movs	r1, #1
 80205f4:	9348      	str	r3, [sp, #288]	; 0x120
 80205f6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80205f8:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
 80205fc:	2b01      	cmp	r3, #1
 80205fe:	f000 8354 	beq.w	8020caa <st_sssa8_ch_convolve_dw+0x8ba>
 8020602:	2b04      	cmp	r3, #4
 8020604:	f000 83ed 	beq.w	8020de2 <st_sssa8_ch_convolve_dw+0x9f2>
 8020608:	2b02      	cmp	r3, #2
 802060a:	f000 8391 	beq.w	8020d30 <st_sssa8_ch_convolve_dw+0x940>
 802060e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020610:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8020612:	4283      	cmp	r3, r0
 8020614:	da45      	bge.n	80206a2 <st_sssa8_ch_convolve_dw+0x2b2>
 8020616:	9922      	ldr	r1, [sp, #136]	; 0x88
 8020618:	9833      	ldr	r0, [sp, #204]	; 0xcc
 802061a:	fb02 0201 	mla	r2, r2, r1, r0
 802061e:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8020620:	f9bd 1070 	ldrsh.w	r1, [sp, #112]	; 0x70
 8020624:	1a12      	subs	r2, r2, r0
 8020626:	910b      	str	r1, [sp, #44]	; 0x2c
 8020628:	4291      	cmp	r1, r2
 802062a:	9203      	str	r2, [sp, #12]
 802062c:	da39      	bge.n	80206a2 <st_sssa8_ch_convolve_dw+0x2b2>
 802062e:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 8020632:	46d9      	mov	r9, fp
 8020634:	461a      	mov	r2, r3
 8020636:	9305      	str	r3, [sp, #20]
 8020638:	9908      	ldr	r1, [sp, #32]
 802063a:	0fd2      	lsrs	r2, r2, #31
 802063c:	9819      	ldr	r0, [sp, #100]	; 0x64
 802063e:	f1ca 0b00 	rsb	fp, sl, #0
 8020642:	fb01 f103 	mul.w	r1, r1, r3
 8020646:	4298      	cmp	r0, r3
 8020648:	bfd8      	it	le
 802064a:	f042 0201 	orrle.w	r2, r2, #1
 802064e:	9107      	str	r1, [sp, #28]
 8020650:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8020652:	9204      	str	r2, [sp, #16]
 8020654:	4688      	mov	r8, r1
 8020656:	9b08      	ldr	r3, [sp, #32]
 8020658:	428b      	cmp	r3, r1
 802065a:	bfcc      	ite	gt
 802065c:	2300      	movgt	r3, #0
 802065e:	2301      	movle	r3, #1
 8020660:	ea53 73d8 	orrs.w	r3, r3, r8, lsr #31
 8020664:	d103      	bne.n	802066e <st_sssa8_ch_convolve_dw+0x27e>
 8020666:	9b04      	ldr	r3, [sp, #16]
 8020668:	2b00      	cmp	r3, #0
 802066a:	f000 822e 	beq.w	8020aca <st_sssa8_ch_convolve_dw+0x6da>
 802066e:	464a      	mov	r2, r9
 8020670:	4651      	mov	r1, sl
 8020672:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8020676:	f002 fa21 	bl	8022abc <st_uint8_fill>
 802067a:	f108 0801 	add.w	r8, r8, #1
 802067e:	9b03      	ldr	r3, [sp, #12]
 8020680:	44ca      	add	sl, r9
 8020682:	ebab 0b09 	sub.w	fp, fp, r9
 8020686:	fa0f f888 	sxth.w	r8, r8
 802068a:	4598      	cmp	r8, r3
 802068c:	4641      	mov	r1, r8
 802068e:	dbe2      	blt.n	8020656 <st_sssa8_ch_convolve_dw+0x266>
 8020690:	9b05      	ldr	r3, [sp, #20]
 8020692:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8020694:	3301      	adds	r3, #1
 8020696:	b21b      	sxth	r3, r3
 8020698:	428b      	cmp	r3, r1
 802069a:	461a      	mov	r2, r3
 802069c:	9305      	str	r3, [sp, #20]
 802069e:	dbcb      	blt.n	8020638 <st_sssa8_ch_convolve_dw+0x248>
 80206a0:	46cb      	mov	fp, r9
 80206a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80206a4:	2b00      	cmp	r3, #0
 80206a6:	f000 82e9 	beq.w	8020c7c <st_sssa8_ch_convolve_dw+0x88c>
 80206aa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80206ac:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
 80206ae:	f102 0810 	add.w	r8, r2, #16
 80206b2:	9a73      	ldr	r2, [sp, #460]	; 0x1cc
 80206b4:	3310      	adds	r3, #16
 80206b6:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80206ba:	3204      	adds	r2, #4
 80206bc:	9307      	str	r3, [sp, #28]
 80206be:	9204      	str	r2, [sp, #16]
 80206c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80206c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80206c4:	3308      	adds	r3, #8
 80206c6:	9206      	str	r2, [sp, #24]
 80206c8:	9305      	str	r3, [sp, #20]
 80206ca:	9b76      	ldr	r3, [sp, #472]	; 0x1d8
 80206cc:	e9dd c229 	ldrd	ip, r2, [sp, #164]	; 0xa4
 80206d0:	3310      	adds	r3, #16
 80206d2:	3220      	adds	r2, #32
 80206d4:	4666      	mov	r6, ip
 80206d6:	469e      	mov	lr, r3
 80206d8:	9b07      	ldr	r3, [sp, #28]
 80206da:	9212      	str	r2, [sp, #72]	; 0x48
 80206dc:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 80206e0:	920d      	str	r2, [sp, #52]	; 0x34
 80206e2:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80206e4:	9203      	str	r2, [sp, #12]
 80206e6:	f853 cc10 	ldr.w	ip, [r3, #-16]
 80206ea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80206ee:	9906      	ldr	r1, [sp, #24]
 80206f0:	e953 5403 	ldrd	r5, r4, [r3, #-12]
 80206f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80206f6:	2b00      	cmp	r3, #0
 80206f8:	d043      	beq.n	8020782 <st_sssa8_ch_convolve_dw+0x392>
 80206fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80206fc:	f106 0210 	add.w	r2, r6, #16
 8020700:	9f03      	ldr	r7, [sp, #12]
 8020702:	18f3      	adds	r3, r6, r3
 8020704:	960a      	str	r6, [sp, #40]	; 0x28
 8020706:	e9cd 8e0b 	strd	r8, lr, [sp, #44]	; 0x2c
 802070a:	4698      	mov	r8, r3
 802070c:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 8020710:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020712:	9303      	str	r3, [sp, #12]
 8020714:	9b03      	ldr	r3, [sp, #12]
 8020716:	f8d1 a000 	ldr.w	sl, [r1]
 802071a:	f851 b003 	ldr.w	fp, [r1, r3]
 802071e:	4bcf      	ldr	r3, [pc, #828]	; (8020a5c <st_sssa8_ch_convolve_dw+0x66c>)
 8020720:	fa1f f98a 	uxth.w	r9, sl
 8020724:	f852 6c10 	ldr.w	r6, [r2, #-16]
 8020728:	ea0b 0303 	and.w	r3, fp, r3
 802072c:	ea49 490b 	orr.w	r9, r9, fp, lsl #16
 8020730:	ea43 431a 	orr.w	r3, r3, sl, lsr #16
 8020734:	fa27 fa89 	sxtab16	sl, r7, r9
 8020738:	fb26 cc0a 	smlad	ip, r6, sl, ip
 802073c:	ea4f 2939 	mov.w	r9, r9, ror #8
 8020740:	f852 6c0c 	ldr.w	r6, [r2, #-12]
 8020744:	fa27 f989 	sxtab16	r9, r7, r9
 8020748:	fb26 5509 	smlad	r5, r6, r9, r5
 802074c:	fa27 f983 	sxtab16	r9, r7, r3
 8020750:	f852 6c08 	ldr.w	r6, [r2, #-8]
 8020754:	fb26 4409 	smlad	r4, r6, r9, r4
 8020758:	ea4f 2333 	mov.w	r3, r3, ror #8
 802075c:	f852 6c04 	ldr.w	r6, [r2, #-4]
 8020760:	fa27 f383 	sxtab16	r3, r7, r3
 8020764:	fb26 0003 	smlad	r0, r6, r3, r0
 8020768:	3210      	adds	r2, #16
 802076a:	4471      	add	r1, lr
 802076c:	4590      	cmp	r8, r2
 802076e:	d1d1      	bne.n	8020714 <st_sssa8_ch_convolve_dw+0x324>
 8020770:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020772:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8020774:	9a06      	ldr	r2, [sp, #24]
 8020776:	441e      	add	r6, r3
 8020778:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802077a:	9703      	str	r7, [sp, #12]
 802077c:	1899      	adds	r1, r3, r2
 802077e:	e9dd 8e0b 	ldrd	r8, lr, [sp, #44]	; 0x2c
 8020782:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020784:	b1f3      	cbz	r3, 80207c4 <st_sssa8_ch_convolve_dw+0x3d4>
 8020786:	680b      	ldr	r3, [r1, #0]
 8020788:	3608      	adds	r6, #8
 802078a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802078c:	fa4f f983 	sxtb.w	r9, r3
 8020790:	f836 ac08 	ldrh.w	sl, [r6, #-8]
 8020794:	f343 2107 	sbfx	r1, r3, #8, #8
 8020798:	f343 4207 	sbfx	r2, r3, #16, #8
 802079c:	eba9 0907 	sub.w	r9, r9, r7
 80207a0:	ebc7 6323 	rsb	r3, r7, r3, asr #24
 80207a4:	1bc9      	subs	r1, r1, r7
 80207a6:	1bd2      	subs	r2, r2, r7
 80207a8:	fb1a cc09 	smlabb	ip, sl, r9, ip
 80207ac:	f836 ac06 	ldrh.w	sl, [r6, #-6]
 80207b0:	f836 9c04 	ldrh.w	r9, [r6, #-4]
 80207b4:	fb1a 5501 	smlabb	r5, sl, r1, r5
 80207b8:	f836 1c02 	ldrh.w	r1, [r6, #-2]
 80207bc:	fb19 4402 	smlabb	r4, r9, r2, r4
 80207c0:	fb11 0003 	smlabb	r0, r1, r3, r0
 80207c4:	9b05      	ldr	r3, [sp, #20]
 80207c6:	f85e 9c10 	ldr.w	r9, [lr, #-16]
 80207ca:	f933 2c08 	ldrsh.w	r2, [r3, #-8]
 80207ce:	f858 1c10 	ldr.w	r1, [r8, #-16]
 80207d2:	2a15      	cmp	r2, #21
 80207d4:	f340 8113 	ble.w	80209fe <st_sssa8_ch_convolve_dw+0x60e>
 80207d8:	1e93      	subs	r3, r2, #2
 80207da:	2701      	movs	r7, #1
 80207dc:	3a01      	subs	r2, #1
 80207de:	fa07 f303 	lsl.w	r3, r7, r3
 80207e2:	fb5c 3c09 	smmla	ip, ip, r9, r3
 80207e6:	fa4c fc02 	asr.w	ip, ip, r2
 80207ea:	448c      	add	ip, r1
 80207ec:	f30c 0c07 	ssat	ip, #8, ip
 80207f0:	9b04      	ldr	r3, [sp, #16]
 80207f2:	f803 cc04 	strb.w	ip, [r3, #-4]
 80207f6:	9b05      	ldr	r3, [sp, #20]
 80207f8:	f933 1c06 	ldrsh.w	r1, [r3, #-6]
 80207fc:	2915      	cmp	r1, #21
 80207fe:	f340 80ee 	ble.w	80209de <st_sssa8_ch_convolve_dw+0x5ee>
 8020802:	1e8a      	subs	r2, r1, #2
 8020804:	2301      	movs	r3, #1
 8020806:	3901      	subs	r1, #1
 8020808:	f85e 7c0c 	ldr.w	r7, [lr, #-12]
 802080c:	fa03 f202 	lsl.w	r2, r3, r2
 8020810:	f858 3c0c 	ldr.w	r3, [r8, #-12]
 8020814:	fb55 2507 	smmla	r5, r5, r7, r2
 8020818:	fa45 f101 	asr.w	r1, r5, r1
 802081c:	4419      	add	r1, r3
 802081e:	f301 0107 	ssat	r1, #8, r1
 8020822:	9b04      	ldr	r3, [sp, #16]
 8020824:	f803 1c03 	strb.w	r1, [r3, #-3]
 8020828:	9b05      	ldr	r3, [sp, #20]
 802082a:	f933 1c04 	ldrsh.w	r1, [r3, #-4]
 802082e:	2915      	cmp	r1, #21
 8020830:	f340 80c5 	ble.w	80209be <st_sssa8_ch_convolve_dw+0x5ce>
 8020834:	1e8a      	subs	r2, r1, #2
 8020836:	2301      	movs	r3, #1
 8020838:	3901      	subs	r1, #1
 802083a:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 802083e:	fa03 f202 	lsl.w	r2, r3, r2
 8020842:	f858 3c08 	ldr.w	r3, [r8, #-8]
 8020846:	fb54 2405 	smmla	r4, r4, r5, r2
 802084a:	fa44 f101 	asr.w	r1, r4, r1
 802084e:	4419      	add	r1, r3
 8020850:	f301 0107 	ssat	r1, #8, r1
 8020854:	9b04      	ldr	r3, [sp, #16]
 8020856:	f803 1c02 	strb.w	r1, [r3, #-2]
 802085a:	9b05      	ldr	r3, [sp, #20]
 802085c:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 8020860:	2915      	cmp	r1, #21
 8020862:	f340 809c 	ble.w	802099e <st_sssa8_ch_convolve_dw+0x5ae>
 8020866:	1e8a      	subs	r2, r1, #2
 8020868:	2301      	movs	r3, #1
 802086a:	3901      	subs	r1, #1
 802086c:	f85e 4c04 	ldr.w	r4, [lr, #-4]
 8020870:	fa03 f202 	lsl.w	r2, r3, r2
 8020874:	f858 3c04 	ldr.w	r3, [r8, #-4]
 8020878:	fb50 2004 	smmla	r0, r0, r4, r2
 802087c:	fa40 f101 	asr.w	r1, r0, r1
 8020880:	4419      	add	r1, r3
 8020882:	f301 0107 	ssat	r1, #8, r1
 8020886:	9b04      	ldr	r3, [sp, #16]
 8020888:	f803 1c01 	strb.w	r1, [r3, #-1]
 802088c:	9a05      	ldr	r2, [sp, #20]
 802088e:	f10e 0e10 	add.w	lr, lr, #16
 8020892:	9b07      	ldr	r3, [sp, #28]
 8020894:	f108 0810 	add.w	r8, r8, #16
 8020898:	3208      	adds	r2, #8
 802089a:	3310      	adds	r3, #16
 802089c:	9205      	str	r2, [sp, #20]
 802089e:	9a04      	ldr	r2, [sp, #16]
 80208a0:	9307      	str	r3, [sp, #28]
 80208a2:	3204      	adds	r2, #4
 80208a4:	9204      	str	r2, [sp, #16]
 80208a6:	9a06      	ldr	r2, [sp, #24]
 80208a8:	3204      	adds	r2, #4
 80208aa:	9206      	str	r2, [sp, #24]
 80208ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80208ae:	429a      	cmp	r2, r3
 80208b0:	f47f af19 	bne.w	80206e6 <st_sssa8_ch_convolve_dw+0x2f6>
 80208b4:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
 80208b6:	46b4      	mov	ip, r6
 80208b8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80208ba:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 80208be:	4413      	add	r3, r2
 80208c0:	f8dd 80c0 	ldr.w	r8, [sp, #192]	; 0xc0
 80208c4:	e9dd ae2c 	ldrd	sl, lr, [sp, #176]	; 0xb0
 80208c8:	e9dd 692e 	ldrd	r6, r9, [sp, #184]	; 0xb8
 80208cc:	9373      	str	r3, [sp, #460]	; 0x1cc
 80208ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80208d0:	2b00      	cmp	r3, #0
 80208d2:	d044      	beq.n	802095e <st_sssa8_ch_convolve_dw+0x56e>
 80208d4:	4433      	add	r3, r6
 80208d6:	f1ae 0704 	sub.w	r7, lr, #4
 80208da:	f1a9 0902 	sub.w	r9, r9, #2
 80208de:	f1a8 0804 	sub.w	r8, r8, #4
 80208e2:	b29b      	uxth	r3, r3
 80208e4:	f8dd e1cc 	ldr.w	lr, [sp, #460]	; 0x1cc
 80208e8:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 80208ec:	9303      	str	r3, [sp, #12]
 80208ee:	1c73      	adds	r3, r6, #1
 80208f0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80208f2:	f85a 1b04 	ldr.w	r1, [sl], #4
 80208f6:	4432      	add	r2, r6
 80208f8:	b29e      	uxth	r6, r3
 80208fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80208fc:	b163      	cbz	r3, 8020918 <st_sssa8_ch_convolve_dw+0x528>
 80208fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020900:	eb0c 0403 	add.w	r4, ip, r3
 8020904:	f992 3000 	ldrsb.w	r3, [r2]
 8020908:	445a      	add	r2, fp
 802090a:	f83c 0b02 	ldrh.w	r0, [ip], #2
 802090e:	1b5b      	subs	r3, r3, r5
 8020910:	45a4      	cmp	ip, r4
 8020912:	fb10 1103 	smlabb	r1, r0, r3, r1
 8020916:	d1f5      	bne.n	8020904 <st_sssa8_ch_convolve_dw+0x514>
 8020918:	f939 2f02 	ldrsh.w	r2, [r9, #2]!
 802091c:	f858 4f04 	ldr.w	r4, [r8, #4]!
 8020920:	2a15      	cmp	r2, #21
 8020922:	f857 0f04 	ldr.w	r0, [r7, #4]!
 8020926:	dd78      	ble.n	8020a1a <st_sssa8_ch_convolve_dw+0x62a>
 8020928:	1e93      	subs	r3, r2, #2
 802092a:	3a01      	subs	r2, #1
 802092c:	9204      	str	r2, [sp, #16]
 802092e:	2201      	movs	r2, #1
 8020930:	fa02 f303 	lsl.w	r3, r2, r3
 8020934:	fb51 3104 	smmla	r1, r1, r4, r3
 8020938:	9b04      	ldr	r3, [sp, #16]
 802093a:	4119      	asrs	r1, r3
 802093c:	4401      	add	r1, r0
 802093e:	f301 0107 	ssat	r1, #8, r1
 8020942:	f88e 1000 	strb.w	r1, [lr]
 8020946:	9b03      	ldr	r3, [sp, #12]
 8020948:	f10e 0e01 	add.w	lr, lr, #1
 802094c:	429e      	cmp	r6, r3
 802094e:	d1ce      	bne.n	80208ee <st_sssa8_ch_convolve_dw+0x4fe>
 8020950:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020952:	9a73      	ldr	r2, [sp, #460]	; 0x1cc
 8020954:	3b01      	subs	r3, #1
 8020956:	b29b      	uxth	r3, r3
 8020958:	3301      	adds	r3, #1
 802095a:	441a      	add	r2, r3
 802095c:	9273      	str	r2, [sp, #460]	; 0x1cc
 802095e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020960:	9922      	ldr	r1, [sp, #136]	; 0x88
 8020962:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020964:	440b      	add	r3, r1
 8020966:	3201      	adds	r2, #1
 8020968:	b29b      	uxth	r3, r3
 802096a:	b212      	sxth	r2, r2
 802096c:	931c      	str	r3, [sp, #112]	; 0x70
 802096e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020970:	9220      	str	r2, [sp, #128]	; 0x80
 8020972:	4293      	cmp	r3, r2
 8020974:	f73f ae38 	bgt.w	80205e8 <st_sssa8_ch_convolve_dw+0x1f8>
 8020978:	46d8      	mov	r8, fp
 802097a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802097c:	9937      	ldr	r1, [sp, #220]	; 0xdc
 802097e:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8020980:	440b      	add	r3, r1
 8020982:	3201      	adds	r2, #1
 8020984:	b29b      	uxth	r3, r3
 8020986:	b212      	sxth	r2, r2
 8020988:	9334      	str	r3, [sp, #208]	; 0xd0
 802098a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 802098c:	4614      	mov	r4, r2
 802098e:	9236      	str	r2, [sp, #216]	; 0xd8
 8020990:	4293      	cmp	r3, r2
 8020992:	f73f ae0d 	bgt.w	80205b0 <st_sssa8_ch_convolve_dw+0x1c0>
 8020996:	2000      	movs	r0, #0
 8020998:	b05d      	add	sp, #372	; 0x174
 802099a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802099e:	2900      	cmp	r1, #0
 80209a0:	dd48      	ble.n	8020a34 <st_sssa8_ch_convolve_dw+0x644>
 80209a2:	f85e 3c04 	ldr.w	r3, [lr, #-4]
 80209a6:	0040      	lsls	r0, r0, #1
 80209a8:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80209ac:	fb50 2003 	smmla	r0, r0, r3, r2
 80209b0:	4108      	asrs	r0, r1
 80209b2:	f300 0007 	ssat	r0, #8, r0
 80209b6:	9b04      	ldr	r3, [sp, #16]
 80209b8:	f803 0c01 	strb.w	r0, [r3, #-1]
 80209bc:	e766      	b.n	802088c <st_sssa8_ch_convolve_dw+0x49c>
 80209be:	2900      	cmp	r1, #0
 80209c0:	dd5d      	ble.n	8020a7e <st_sssa8_ch_convolve_dw+0x68e>
 80209c2:	f85e 3c08 	ldr.w	r3, [lr, #-8]
 80209c6:	0064      	lsls	r4, r4, #1
 80209c8:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80209cc:	fb54 2403 	smmla	r4, r4, r3, r2
 80209d0:	410c      	asrs	r4, r1
 80209d2:	f304 0407 	ssat	r4, #8, r4
 80209d6:	9b04      	ldr	r3, [sp, #16]
 80209d8:	f803 4c02 	strb.w	r4, [r3, #-2]
 80209dc:	e73d      	b.n	802085a <st_sssa8_ch_convolve_dw+0x46a>
 80209de:	2900      	cmp	r1, #0
 80209e0:	dd60      	ble.n	8020aa4 <st_sssa8_ch_convolve_dw+0x6b4>
 80209e2:	f85e 3c0c 	ldr.w	r3, [lr, #-12]
 80209e6:	006d      	lsls	r5, r5, #1
 80209e8:	f858 2c0c 	ldr.w	r2, [r8, #-12]
 80209ec:	fb55 2503 	smmla	r5, r5, r3, r2
 80209f0:	410d      	asrs	r5, r1
 80209f2:	f305 0507 	ssat	r5, #8, r5
 80209f6:	9b04      	ldr	r3, [sp, #16]
 80209f8:	f803 5c03 	strb.w	r5, [r3, #-3]
 80209fc:	e714      	b.n	8020828 <st_sssa8_ch_convolve_dw+0x438>
 80209fe:	2a00      	cmp	r2, #0
 8020a00:	dd2e      	ble.n	8020a60 <st_sssa8_ch_convolve_dw+0x670>
 8020a02:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8020a06:	fb5c 1c09 	smmla	ip, ip, r9, r1
 8020a0a:	fa4c f202 	asr.w	r2, ip, r2
 8020a0e:	f302 0207 	ssat	r2, #8, r2
 8020a12:	9b04      	ldr	r3, [sp, #16]
 8020a14:	f803 2c04 	strb.w	r2, [r3, #-4]
 8020a18:	e6ed      	b.n	80207f6 <st_sssa8_ch_convolve_dw+0x406>
 8020a1a:	2a00      	cmp	r2, #0
 8020a1c:	f340 80e8 	ble.w	8020bf0 <st_sssa8_ch_convolve_dw+0x800>
 8020a20:	0049      	lsls	r1, r1, #1
 8020a22:	fb51 0104 	smmla	r1, r1, r4, r0
 8020a26:	fa41 f202 	asr.w	r2, r1, r2
 8020a2a:	f302 0207 	ssat	r2, #8, r2
 8020a2e:	f88e 2000 	strb.w	r2, [lr]
 8020a32:	e788      	b.n	8020946 <st_sssa8_ch_convolve_dw+0x556>
 8020a34:	f1c1 0101 	rsb	r1, r1, #1
 8020a38:	fa00 f201 	lsl.w	r2, r0, r1
 8020a3c:	f302 021f 	ssat	r2, #32, r2
 8020a40:	f85e 3c04 	ldr.w	r3, [lr, #-4]
 8020a44:	fb52 f213 	smmulr	r2, r2, r3
 8020a48:	f858 3c04 	ldr.w	r3, [r8, #-4]
 8020a4c:	4413      	add	r3, r2
 8020a4e:	f303 0307 	ssat	r3, #8, r3
 8020a52:	9a04      	ldr	r2, [sp, #16]
 8020a54:	f802 3c01 	strb.w	r3, [r2, #-1]
 8020a58:	e718      	b.n	802088c <st_sssa8_ch_convolve_dw+0x49c>
 8020a5a:	bf00      	nop
 8020a5c:	ffff0000 	.word	0xffff0000
 8020a60:	f1c2 0201 	rsb	r2, r2, #1
 8020a64:	fa0c f202 	lsl.w	r2, ip, r2
 8020a68:	f302 021f 	ssat	r2, #32, r2
 8020a6c:	fb52 f219 	smmulr	r2, r2, r9
 8020a70:	440a      	add	r2, r1
 8020a72:	f302 0207 	ssat	r2, #8, r2
 8020a76:	9b04      	ldr	r3, [sp, #16]
 8020a78:	f803 2c04 	strb.w	r2, [r3, #-4]
 8020a7c:	e6bb      	b.n	80207f6 <st_sssa8_ch_convolve_dw+0x406>
 8020a7e:	f1c1 0101 	rsb	r1, r1, #1
 8020a82:	fa04 f201 	lsl.w	r2, r4, r1
 8020a86:	f302 021f 	ssat	r2, #32, r2
 8020a8a:	f85e 3c08 	ldr.w	r3, [lr, #-8]
 8020a8e:	fb52 f213 	smmulr	r2, r2, r3
 8020a92:	f858 3c08 	ldr.w	r3, [r8, #-8]
 8020a96:	4413      	add	r3, r2
 8020a98:	f303 0307 	ssat	r3, #8, r3
 8020a9c:	9a04      	ldr	r2, [sp, #16]
 8020a9e:	f802 3c02 	strb.w	r3, [r2, #-2]
 8020aa2:	e6da      	b.n	802085a <st_sssa8_ch_convolve_dw+0x46a>
 8020aa4:	f1c1 0101 	rsb	r1, r1, #1
 8020aa8:	fa05 f201 	lsl.w	r2, r5, r1
 8020aac:	f302 021f 	ssat	r2, #32, r2
 8020ab0:	f85e 3c0c 	ldr.w	r3, [lr, #-12]
 8020ab4:	fb52 f213 	smmulr	r2, r2, r3
 8020ab8:	f858 3c0c 	ldr.w	r3, [r8, #-12]
 8020abc:	4413      	add	r3, r2
 8020abe:	f303 0307 	ssat	r3, #8, r3
 8020ac2:	9a04      	ldr	r2, [sp, #16]
 8020ac4:	f802 3c03 	strb.w	r3, [r2, #-3]
 8020ac8:	e6ae      	b.n	8020828 <st_sssa8_ch_convolve_dw+0x438>
 8020aca:	9b07      	ldr	r3, [sp, #28]
 8020acc:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8020ace:	4419      	add	r1, r3
 8020ad0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020ad2:	fb03 0101 	mla	r1, r3, r1, r0
 8020ad6:	2b00      	cmp	r3, #0
 8020ad8:	f43f adcf 	beq.w	802067a <st_sssa8_ch_convolve_dw+0x28a>
 8020adc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8020ade:	2f00      	cmp	r7, #0
 8020ae0:	f43f adcb 	beq.w	802067a <st_sssa8_ch_convolve_dw+0x28a>
 8020ae4:	18ca      	adds	r2, r1, r3
 8020ae6:	1ebb      	subs	r3, r7, #2
 8020ae8:	465c      	mov	r4, fp
 8020aea:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8020aee:	9306      	str	r3, [sp, #24]
 8020af0:	1efb      	subs	r3, r7, #3
 8020af2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8020af6:	4650      	mov	r0, sl
 8020af8:	930a      	str	r3, [sp, #40]	; 0x28
 8020afa:	4693      	mov	fp, r2
 8020afc:	1f3b      	subs	r3, r7, #4
 8020afe:	46a1      	mov	r9, r4
 8020b00:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8020b04:	e9cd 3a0c 	strd	r3, sl, [sp, #48]	; 0x30
 8020b08:	19c6      	adds	r6, r0, r7
 8020b0a:	f101 0e01 	add.w	lr, r1, #1
 8020b0e:	42b1      	cmp	r1, r6
 8020b10:	bf38      	it	cc
 8020b12:	4570      	cmpcc	r0, lr
 8020b14:	d362      	bcc.n	8020bdc <st_sssa8_ch_convolve_dw+0x7ec>
 8020b16:	2f0b      	cmp	r7, #11
 8020b18:	d960      	bls.n	8020bdc <st_sssa8_ch_convolve_dw+0x7ec>
 8020b1a:	f009 0303 	and.w	r3, r9, #3
 8020b1e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020b20:	1cda      	adds	r2, r3, #3
 8020b22:	42a2      	cmp	r2, r4
 8020b24:	f200 80b4 	bhi.w	8020c90 <st_sssa8_ch_convolve_dw+0x8a0>
 8020b28:	2b00      	cmp	r3, #0
 8020b2a:	d05e      	beq.n	8020bea <st_sssa8_ch_convolve_dw+0x7fa>
 8020b2c:	780a      	ldrb	r2, [r1, #0]
 8020b2e:	2b01      	cmp	r3, #1
 8020b30:	f100 0a01 	add.w	sl, r0, #1
 8020b34:	9d06      	ldr	r5, [sp, #24]
 8020b36:	7002      	strb	r2, [r0, #0]
 8020b38:	d00b      	beq.n	8020b52 <st_sssa8_ch_convolve_dw+0x762>
 8020b3a:	780a      	ldrb	r2, [r1, #0]
 8020b3c:	2b03      	cmp	r3, #3
 8020b3e:	f100 0a02 	add.w	sl, r0, #2
 8020b42:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8020b44:	7042      	strb	r2, [r0, #1]
 8020b46:	d104      	bne.n	8020b52 <st_sssa8_ch_convolve_dw+0x762>
 8020b48:	780a      	ldrb	r2, [r1, #0]
 8020b4a:	f100 0a03 	add.w	sl, r0, #3
 8020b4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020b50:	7082      	strb	r2, [r0, #2]
 8020b52:	f891 c000 	ldrb.w	ip, [r1]
 8020b56:	2400      	movs	r4, #0
 8020b58:	eba7 0803 	sub.w	r8, r7, r3
 8020b5c:	2200      	movs	r2, #0
 8020b5e:	f36c 0407 	bfi	r4, ip, #0, #8
 8020b62:	4403      	add	r3, r0
 8020b64:	ea4f 0098 	mov.w	r0, r8, lsr #2
 8020b68:	f36c 240f 	bfi	r4, ip, #8, #8
 8020b6c:	f36c 4417 	bfi	r4, ip, #16, #8
 8020b70:	f36c 641f 	bfi	r4, ip, #24, #8
 8020b74:	3201      	adds	r2, #1
 8020b76:	f843 4b04 	str.w	r4, [r3], #4
 8020b7a:	4282      	cmp	r2, r0
 8020b7c:	d3fa      	bcc.n	8020b74 <st_sssa8_ch_convolve_dw+0x784>
 8020b7e:	f028 0203 	bic.w	r2, r8, #3
 8020b82:	4542      	cmp	r2, r8
 8020b84:	4492      	add	sl, r2
 8020b86:	eba5 0502 	sub.w	r5, r5, r2
 8020b8a:	d01a      	beq.n	8020bc2 <st_sssa8_ch_convolve_dw+0x7d2>
 8020b8c:	780b      	ldrb	r3, [r1, #0]
 8020b8e:	f88a 3000 	strb.w	r3, [sl]
 8020b92:	b1b5      	cbz	r5, 8020bc2 <st_sssa8_ch_convolve_dw+0x7d2>
 8020b94:	780b      	ldrb	r3, [r1, #0]
 8020b96:	2d01      	cmp	r5, #1
 8020b98:	f88a 3001 	strb.w	r3, [sl, #1]
 8020b9c:	d011      	beq.n	8020bc2 <st_sssa8_ch_convolve_dw+0x7d2>
 8020b9e:	780b      	ldrb	r3, [r1, #0]
 8020ba0:	2d02      	cmp	r5, #2
 8020ba2:	f88a 3002 	strb.w	r3, [sl, #2]
 8020ba6:	d00c      	beq.n	8020bc2 <st_sssa8_ch_convolve_dw+0x7d2>
 8020ba8:	780b      	ldrb	r3, [r1, #0]
 8020baa:	2d03      	cmp	r5, #3
 8020bac:	f88a 3003 	strb.w	r3, [sl, #3]
 8020bb0:	d007      	beq.n	8020bc2 <st_sssa8_ch_convolve_dw+0x7d2>
 8020bb2:	780b      	ldrb	r3, [r1, #0]
 8020bb4:	2d04      	cmp	r5, #4
 8020bb6:	f88a 3004 	strb.w	r3, [sl, #4]
 8020bba:	d002      	beq.n	8020bc2 <st_sssa8_ch_convolve_dw+0x7d2>
 8020bbc:	780b      	ldrb	r3, [r1, #0]
 8020bbe:	f88a 3005 	strb.w	r3, [sl, #5]
 8020bc2:	45de      	cmp	lr, fp
 8020bc4:	4671      	mov	r1, lr
 8020bc6:	4630      	mov	r0, r6
 8020bc8:	eba9 0907 	sub.w	r9, r9, r7
 8020bcc:	d19c      	bne.n	8020b08 <st_sssa8_ch_convolve_dw+0x718>
 8020bce:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8020bd2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8020bd6:	e9dd a80d 	ldrd	sl, r8, [sp, #52]	; 0x34
 8020bda:	e54e      	b.n	802067a <st_sssa8_ch_convolve_dw+0x28a>
 8020bdc:	4603      	mov	r3, r0
 8020bde:	780a      	ldrb	r2, [r1, #0]
 8020be0:	f803 2b01 	strb.w	r2, [r3], #1
 8020be4:	429e      	cmp	r6, r3
 8020be6:	d1fa      	bne.n	8020bde <st_sssa8_ch_convolve_dw+0x7ee>
 8020be8:	e7eb      	b.n	8020bc2 <st_sssa8_ch_convolve_dw+0x7d2>
 8020bea:	4625      	mov	r5, r4
 8020bec:	4682      	mov	sl, r0
 8020bee:	e7b0      	b.n	8020b52 <st_sssa8_ch_convolve_dw+0x762>
 8020bf0:	f1c2 0201 	rsb	r2, r2, #1
 8020bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8020bf8:	f302 031f 	ssat	r3, #32, r2
 8020bfc:	fb53 f314 	smmulr	r3, r3, r4
 8020c00:	4403      	add	r3, r0
 8020c02:	f303 0307 	ssat	r3, #8, r3
 8020c06:	f88e 3000 	strb.w	r3, [lr]
 8020c0a:	e69c      	b.n	8020946 <st_sssa8_ch_convolve_dw+0x556>
 8020c0c:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8020c0e:	2b00      	cmp	r3, #0
 8020c10:	d041      	beq.n	8020c96 <st_sssa8_ch_convolve_dw+0x8a6>
 8020c12:	3b01      	subs	r3, #1
 8020c14:	f8bd 1144 	ldrh.w	r1, [sp, #324]	; 0x144
 8020c18:	9349      	str	r3, [sp, #292]	; 0x124
 8020c1a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020c1c:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
 8020c20:	2b01      	cmp	r3, #1
 8020c22:	f47f acee 	bne.w	8020602 <st_sssa8_ch_convolve_dw+0x212>
 8020c26:	2901      	cmp	r1, #1
 8020c28:	d03f      	beq.n	8020caa <st_sssa8_ch_convolve_dw+0x8ba>
 8020c2a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020c2c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8020c2e:	f9bd 5070 	ldrsh.w	r5, [sp, #112]	; 0x70
 8020c32:	428b      	cmp	r3, r1
 8020c34:	f6bf ad35 	bge.w	80206a2 <st_sssa8_ch_convolve_dw+0x2b2>
 8020c38:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8020c3a:	461c      	mov	r4, r3
 8020c3c:	f8cd b00c 	str.w	fp, [sp, #12]
 8020c40:	4618      	mov	r0, r3
 8020c42:	4637      	mov	r7, r6
 8020c44:	f8dd 80ec 	ldr.w	r8, [sp, #236]	; 0xec
 8020c48:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
 8020c4c:	468b      	mov	fp, r1
 8020c4e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8020c52:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8020c54:	3401      	adds	r4, #1
 8020c56:	fb00 500a 	mla	r0, r0, sl, r5
 8020c5a:	4639      	mov	r1, r7
 8020c5c:	4642      	mov	r2, r8
 8020c5e:	b224      	sxth	r4, r4
 8020c60:	fb06 9000 	mla	r0, r6, r0, r9
 8020c64:	f004 f9c0 	bl	8024fe8 <st_dsp_arm_copy_q7>
 8020c68:	4447      	add	r7, r8
 8020c6a:	455c      	cmp	r4, fp
 8020c6c:	4620      	mov	r0, r4
 8020c6e:	dbf1      	blt.n	8020c54 <st_sssa8_ch_convolve_dw+0x864>
 8020c70:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020c72:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020c76:	2b00      	cmp	r3, #0
 8020c78:	f47f ad17 	bne.w	80206aa <st_sssa8_ch_convolve_dw+0x2ba>
 8020c7c:	461e      	mov	r6, r3
 8020c7e:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 8020c82:	f8dd e098 	ldr.w	lr, [sp, #152]	; 0x98
 8020c86:	f8dd 81d8 	ldr.w	r8, [sp, #472]	; 0x1d8
 8020c8a:	e9dd 9c28 	ldrd	r9, ip, [sp, #160]	; 0xa0
 8020c8e:	e61e      	b.n	80208ce <st_sssa8_ch_convolve_dw+0x4de>
 8020c90:	4625      	mov	r5, r4
 8020c92:	4682      	mov	sl, r0
 8020c94:	e77a      	b.n	8020b8c <st_sssa8_ch_convolve_dw+0x79c>
 8020c96:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 8020c98:	2101      	movs	r1, #1
 8020c9a:	3b01      	subs	r3, #1
 8020c9c:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
 8020ca0:	934a      	str	r3, [sp, #296]	; 0x128
 8020ca2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020ca4:	2b01      	cmp	r3, #1
 8020ca6:	f47f acac 	bne.w	8020602 <st_sssa8_ch_convolve_dw+0x212>
 8020caa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020cac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8020cae:	4283      	cmp	r3, r0
 8020cb0:	f6bf acf7 	bge.w	80206a2 <st_sssa8_ch_convolve_dw+0x2b2>
 8020cb4:	9922      	ldr	r1, [sp, #136]	; 0x88
 8020cb6:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8020cb8:	fb02 0201 	mla	r2, r2, r1, r0
 8020cbc:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8020cbe:	f9bd 1070 	ldrsh.w	r1, [sp, #112]	; 0x70
 8020cc2:	1a15      	subs	r5, r2, r0
 8020cc4:	9104      	str	r1, [sp, #16]
 8020cc6:	428d      	cmp	r5, r1
 8020cc8:	f77f aceb 	ble.w	80206a2 <st_sssa8_ch_convolve_dw+0x2b2>
 8020ccc:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 8020cd0:	4698      	mov	r8, r3
 8020cd2:	461a      	mov	r2, r3
 8020cd4:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8020cd8:	9e08      	ldr	r6, [sp, #32]
 8020cda:	fb06 f302 	mul.w	r3, r6, r2
 8020cde:	ea4f 77d8 	mov.w	r7, r8, lsr #31
 8020ce2:	f8dd c010 	ldr.w	ip, [sp, #16]
 8020ce6:	9303      	str	r3, [sp, #12]
 8020ce8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020cea:	4664      	mov	r4, ip
 8020cec:	4293      	cmp	r3, r2
 8020cee:	bfd8      	it	le
 8020cf0:	f047 0701 	orrle.w	r7, r7, #1
 8020cf4:	4566      	cmp	r6, ip
 8020cf6:	465a      	mov	r2, fp
 8020cf8:	4651      	mov	r1, sl
 8020cfa:	4648      	mov	r0, r9
 8020cfc:	bfcc      	ite	gt
 8020cfe:	2300      	movgt	r3, #0
 8020d00:	2301      	movle	r3, #1
 8020d02:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 8020d06:	d102      	bne.n	8020d0e <st_sssa8_ch_convolve_dw+0x91e>
 8020d08:	2f00      	cmp	r7, #0
 8020d0a:	f000 80c4 	beq.w	8020e96 <st_sssa8_ch_convolve_dw+0xaa6>
 8020d0e:	f001 fed5 	bl	8022abc <st_uint8_fill>
 8020d12:	3401      	adds	r4, #1
 8020d14:	44da      	add	sl, fp
 8020d16:	b224      	sxth	r4, r4
 8020d18:	42ac      	cmp	r4, r5
 8020d1a:	46a4      	mov	ip, r4
 8020d1c:	dbea      	blt.n	8020cf4 <st_sssa8_ch_convolve_dw+0x904>
 8020d1e:	f108 0801 	add.w	r8, r8, #1
 8020d22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020d24:	fa0f f888 	sxth.w	r8, r8
 8020d28:	4598      	cmp	r8, r3
 8020d2a:	4642      	mov	r2, r8
 8020d2c:	dbd5      	blt.n	8020cda <st_sssa8_ch_convolve_dw+0x8ea>
 8020d2e:	e4b8      	b.n	80206a2 <st_sssa8_ch_convolve_dw+0x2b2>
 8020d30:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8020d32:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8020d34:	4281      	cmp	r1, r0
 8020d36:	f6bf acb4 	bge.w	80206a2 <st_sssa8_ch_convolve_dw+0x2b2>
 8020d3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020d3c:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8020d3e:	fb02 0203 	mla	r2, r2, r3, r0
 8020d42:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8020d44:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 8020d48:	1a15      	subs	r5, r2, r0
 8020d4a:	9304      	str	r3, [sp, #16]
 8020d4c:	42ab      	cmp	r3, r5
 8020d4e:	f6bf aca8 	bge.w	80206a2 <st_sssa8_ch_convolve_dw+0x2b2>
 8020d52:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 8020d56:	460e      	mov	r6, r1
 8020d58:	4689      	mov	r9, r1
 8020d5a:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 8020d5e:	9f08      	ldr	r7, [sp, #32]
 8020d60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020d62:	9a04      	ldr	r2, [sp, #16]
 8020d64:	454b      	cmp	r3, r9
 8020d66:	fb09 f307 	mul.w	r3, r9, r7
 8020d6a:	4614      	mov	r4, r2
 8020d6c:	bfcc      	ite	gt
 8020d6e:	2100      	movgt	r1, #0
 8020d70:	2101      	movle	r1, #1
 8020d72:	9303      	str	r3, [sp, #12]
 8020d74:	ea41 79d6 	orr.w	r9, r1, r6, lsr #31
 8020d78:	464b      	mov	r3, r9
 8020d7a:	46b1      	mov	r9, r6
 8020d7c:	461e      	mov	r6, r3
 8020d7e:	4297      	cmp	r7, r2
 8020d80:	bfcc      	ite	gt
 8020d82:	2300      	movgt	r3, #0
 8020d84:	2301      	movle	r3, #1
 8020d86:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 8020d8a:	d100      	bne.n	8020d8e <st_sssa8_ch_convolve_dw+0x99e>
 8020d8c:	b196      	cbz	r6, 8020db4 <st_sssa8_ch_convolve_dw+0x9c4>
 8020d8e:	465a      	mov	r2, fp
 8020d90:	4651      	mov	r1, sl
 8020d92:	4640      	mov	r0, r8
 8020d94:	f001 fe92 	bl	8022abc <st_uint8_fill>
 8020d98:	3401      	adds	r4, #1
 8020d9a:	44da      	add	sl, fp
 8020d9c:	b224      	sxth	r4, r4
 8020d9e:	42ac      	cmp	r4, r5
 8020da0:	4622      	mov	r2, r4
 8020da2:	dbec      	blt.n	8020d7e <st_sssa8_ch_convolve_dw+0x98e>
 8020da4:	464e      	mov	r6, r9
 8020da6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020da8:	3601      	adds	r6, #1
 8020daa:	b236      	sxth	r6, r6
 8020dac:	429e      	cmp	r6, r3
 8020dae:	46b1      	mov	r9, r6
 8020db0:	dbd6      	blt.n	8020d60 <st_sssa8_ch_convolve_dw+0x970>
 8020db2:	e476      	b.n	80206a2 <st_sssa8_ch_convolve_dw+0x2b2>
 8020db4:	9b03      	ldr	r3, [sp, #12]
 8020db6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8020db8:	441a      	add	r2, r3
 8020dba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020dbc:	fb03 0102 	mla	r1, r3, r2, r0
 8020dc0:	2b00      	cmp	r3, #0
 8020dc2:	d0e9      	beq.n	8020d98 <st_sssa8_ch_convolve_dw+0x9a8>
 8020dc4:	eb01 0c03 	add.w	ip, r1, r3
 8020dc8:	4650      	mov	r0, sl
 8020dca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020dce:	021b      	lsls	r3, r3, #8
 8020dd0:	4561      	cmp	r1, ip
 8020dd2:	ea4f 2233 	mov.w	r2, r3, ror #8
 8020dd6:	fa33 f382 	uxtab16	r3, r3, r2
 8020dda:	f820 3b02 	strh.w	r3, [r0], #2
 8020dde:	d1f4      	bne.n	8020dca <st_sssa8_ch_convolve_dw+0x9da>
 8020de0:	e7da      	b.n	8020d98 <st_sssa8_ch_convolve_dw+0x9a8>
 8020de2:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8020de4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8020de6:	4281      	cmp	r1, r0
 8020de8:	f6bf ac5b 	bge.w	80206a2 <st_sssa8_ch_convolve_dw+0x2b2>
 8020dec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020dee:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8020df0:	fb02 0203 	mla	r2, r2, r3, r0
 8020df4:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8020df6:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 8020dfa:	1a15      	subs	r5, r2, r0
 8020dfc:	9304      	str	r3, [sp, #16]
 8020dfe:	429d      	cmp	r5, r3
 8020e00:	f77f ac4f 	ble.w	80206a2 <st_sssa8_ch_convolve_dw+0x2b2>
 8020e04:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 8020e08:	4689      	mov	r9, r1
 8020e0a:	460a      	mov	r2, r1
 8020e0c:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 8020e10:	9e08      	ldr	r6, [sp, #32]
 8020e12:	fb06 f302 	mul.w	r3, r6, r2
 8020e16:	ea4f 77d9 	mov.w	r7, r9, lsr #31
 8020e1a:	9904      	ldr	r1, [sp, #16]
 8020e1c:	9303      	str	r3, [sp, #12]
 8020e1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020e20:	460c      	mov	r4, r1
 8020e22:	4293      	cmp	r3, r2
 8020e24:	bfd8      	it	le
 8020e26:	f047 0701 	orrle.w	r7, r7, #1
 8020e2a:	428e      	cmp	r6, r1
 8020e2c:	bfcc      	ite	gt
 8020e2e:	2300      	movgt	r3, #0
 8020e30:	2301      	movle	r3, #1
 8020e32:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 8020e36:	d100      	bne.n	8020e3a <st_sssa8_ch_convolve_dw+0xa4a>
 8020e38:	b19f      	cbz	r7, 8020e62 <st_sssa8_ch_convolve_dw+0xa72>
 8020e3a:	465a      	mov	r2, fp
 8020e3c:	4651      	mov	r1, sl
 8020e3e:	4640      	mov	r0, r8
 8020e40:	f001 fe3c 	bl	8022abc <st_uint8_fill>
 8020e44:	3401      	adds	r4, #1
 8020e46:	44da      	add	sl, fp
 8020e48:	b224      	sxth	r4, r4
 8020e4a:	42ac      	cmp	r4, r5
 8020e4c:	4621      	mov	r1, r4
 8020e4e:	dbec      	blt.n	8020e2a <st_sssa8_ch_convolve_dw+0xa3a>
 8020e50:	f109 0901 	add.w	r9, r9, #1
 8020e54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020e56:	fa0f f989 	sxth.w	r9, r9
 8020e5a:	4599      	cmp	r9, r3
 8020e5c:	464a      	mov	r2, r9
 8020e5e:	dbd8      	blt.n	8020e12 <st_sssa8_ch_convolve_dw+0xa22>
 8020e60:	e41f      	b.n	80206a2 <st_sssa8_ch_convolve_dw+0x2b2>
 8020e62:	9b03      	ldr	r3, [sp, #12]
 8020e64:	185a      	adds	r2, r3, r1
 8020e66:	e9dd 311e 	ldrd	r3, r1, [sp, #120]	; 0x78
 8020e6a:	fb03 1202 	mla	r2, r3, r2, r1
 8020e6e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8020e70:	2b00      	cmp	r3, #0
 8020e72:	d0e7      	beq.n	8020e44 <st_sssa8_ch_convolve_dw+0xa54>
 8020e74:	18d0      	adds	r0, r2, r3
 8020e76:	4651      	mov	r1, sl
 8020e78:	f812 cb01 	ldrb.w	ip, [r2], #1
 8020e7c:	ea4f 630c 	mov.w	r3, ip, lsl #24
 8020e80:	4282      	cmp	r2, r0
 8020e82:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8020e86:	ea4f 2c33 	mov.w	ip, r3, ror #8
 8020e8a:	fa33 f38c 	uxtab16	r3, r3, ip
 8020e8e:	f841 3b04 	str.w	r3, [r1], #4
 8020e92:	d1f1      	bne.n	8020e78 <st_sssa8_ch_convolve_dw+0xa88>
 8020e94:	e7d6      	b.n	8020e44 <st_sssa8_ch_convolve_dw+0xa54>
 8020e96:	9b03      	ldr	r3, [sp, #12]
 8020e98:	eb03 000c 	add.w	r0, r3, ip
 8020e9c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020e9e:	461a      	mov	r2, r3
 8020ea0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020ea2:	fb02 3000 	mla	r0, r2, r0, r3
 8020ea6:	f004 f89f 	bl	8024fe8 <st_dsp_arm_copy_q7>
 8020eaa:	e732      	b.n	8020d12 <st_sssa8_ch_convolve_dw+0x922>
 8020eac:	428e      	cmp	r6, r1
 8020eae:	f844 5f04 	str.w	r5, [r4, #4]!
 8020eb2:	f47f aadc 	bne.w	802046e <st_sssa8_ch_convolve_dw+0x7e>
 8020eb6:	f7ff baeb 	b.w	8020490 <st_sssa8_ch_convolve_dw+0xa0>
 8020eba:	2401      	movs	r4, #1
 8020ebc:	f7ff bb0e 	b.w	80204dc <st_sssa8_ch_convolve_dw+0xec>

08020ec0 <st_sssa8_ch_convolve_rank1upd>:
 8020ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ec4:	b083      	sub	sp, #12
 8020ec6:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8020eca:	f99d a038 	ldrsb.w	sl, [sp, #56]	; 0x38
 8020ece:	fb13 f304 	smulbb	r3, r3, r4
 8020ed2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8020ed4:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 8020ed8:	fb13 f600 	smulbb	r6, r3, r0
 8020edc:	2a00      	cmp	r2, #0
 8020ede:	d06c      	beq.n	8020fba <st_sssa8_ch_convolve_rank1upd+0xfa>
 8020ee0:	b2b6      	uxth	r6, r6
 8020ee2:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8020ee6:	ea4f 0944 	mov.w	r9, r4, lsl #1
 8020eea:	ea4f 0b96 	mov.w	fp, r6, lsr #2
 8020eee:	f006 0603 	and.w	r6, r6, #3
 8020ef2:	eb08 0e82 	add.w	lr, r8, r2, lsl #2
 8020ef6:	f1a9 0904 	sub.w	r9, r9, #4
 8020efa:	f1ab 0381 	sub.w	r3, fp, #129	; 0x81
 8020efe:	f1ab 0080 	sub.w	r0, fp, #128	; 0x80
 8020f02:	44a9      	add	r9, r5
 8020f04:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8020f08:	ebc3 2243 	rsb	r2, r3, r3, lsl #9
 8020f0c:	3301      	adds	r3, #1
 8020f0e:	eb00 12c2 	add.w	r2, r0, r2, lsl #7
 8020f12:	ea4f 2c43 	mov.w	ip, r3, lsl #9
 8020f16:	b293      	uxth	r3, r2
 8020f18:	9301      	str	r3, [sp, #4]
 8020f1a:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
 8020f1e:	d94f      	bls.n	8020fc0 <st_sssa8_ch_convolve_rank1upd+0x100>
 8020f20:	eb01 050c 	add.w	r5, r1, ip
 8020f24:	2400      	movs	r4, #0
 8020f26:	2300      	movs	r3, #0
 8020f28:	f501 7000 	add.w	r0, r1, #512	; 0x200
 8020f2c:	461f      	mov	r7, r3
 8020f2e:	f851 2b04 	ldr.w	r2, [r1], #4
 8020f32:	fa2f f382 	sxtb16	r3, r2
 8020f36:	4288      	cmp	r0, r1
 8020f38:	ea4f 2232 	mov.w	r2, r2, ror #8
 8020f3c:	fa97 f313 	qadd16	r3, r7, r3
 8020f40:	fa2f f282 	sxtb16	r2, r2
 8020f44:	fa93 f712 	qadd16	r7, r3, r2
 8020f48:	d1f1      	bne.n	8020f2e <st_sssa8_ch_convolve_rank1upd+0x6e>
 8020f4a:	b23a      	sxth	r2, r7
 8020f4c:	4285      	cmp	r5, r0
 8020f4e:	4601      	mov	r1, r0
 8020f50:	eb02 4327 	add.w	r3, r2, r7, asr #16
 8020f54:	441c      	add	r4, r3
 8020f56:	d1e6      	bne.n	8020f26 <st_sssa8_ch_convolve_rank1upd+0x66>
 8020f58:	9801      	ldr	r0, [sp, #4]
 8020f5a:	b1b8      	cbz	r0, 8020f8c <st_sssa8_ch_convolve_rank1upd+0xcc>
 8020f5c:	3801      	subs	r0, #1
 8020f5e:	2200      	movs	r2, #0
 8020f60:	b280      	uxth	r0, r0
 8020f62:	3001      	adds	r0, #1
 8020f64:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8020f68:	f851 3b04 	ldr.w	r3, [r1], #4
 8020f6c:	fa2f f583 	sxtb16	r5, r3
 8020f70:	4281      	cmp	r1, r0
 8020f72:	ea4f 2333 	mov.w	r3, r3, ror #8
 8020f76:	fa92 f215 	qadd16	r2, r2, r5
 8020f7a:	fa2f f383 	sxtb16	r3, r3
 8020f7e:	fa92 f213 	qadd16	r2, r2, r3
 8020f82:	d1f1      	bne.n	8020f68 <st_sssa8_ch_convolve_rank1upd+0xa8>
 8020f84:	b213      	sxth	r3, r2
 8020f86:	eb03 4222 	add.w	r2, r3, r2, asr #16
 8020f8a:	4414      	add	r4, r2
 8020f8c:	b16e      	cbz	r6, 8020faa <st_sssa8_ch_convolve_rank1upd+0xea>
 8020f8e:	f991 3000 	ldrsb.w	r3, [r1]
 8020f92:	2e01      	cmp	r6, #1
 8020f94:	441c      	add	r4, r3
 8020f96:	d018      	beq.n	8020fca <st_sssa8_ch_convolve_rank1upd+0x10a>
 8020f98:	f991 3001 	ldrsb.w	r3, [r1, #1]
 8020f9c:	2e02      	cmp	r6, #2
 8020f9e:	441c      	add	r4, r3
 8020fa0:	d011      	beq.n	8020fc6 <st_sssa8_ch_convolve_rank1upd+0x106>
 8020fa2:	f991 3002 	ldrsb.w	r3, [r1, #2]
 8020fa6:	3103      	adds	r1, #3
 8020fa8:	441c      	add	r4, r3
 8020faa:	f858 3b04 	ldr.w	r3, [r8], #4
 8020fae:	fb0a 3414 	mls	r4, sl, r4, r3
 8020fb2:	45c6      	cmp	lr, r8
 8020fb4:	f849 4f04 	str.w	r4, [r9, #4]!
 8020fb8:	d1af      	bne.n	8020f1a <st_sssa8_ch_convolve_rank1upd+0x5a>
 8020fba:	b003      	add	sp, #12
 8020fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fc0:	4658      	mov	r0, fp
 8020fc2:	2400      	movs	r4, #0
 8020fc4:	e7c9      	b.n	8020f5a <st_sssa8_ch_convolve_rank1upd+0x9a>
 8020fc6:	3102      	adds	r1, #2
 8020fc8:	e7ef      	b.n	8020faa <st_sssa8_ch_convolve_rank1upd+0xea>
 8020fca:	3101      	adds	r1, #1
 8020fcc:	e7ed      	b.n	8020faa <st_sssa8_ch_convolve_rank1upd+0xea>
 8020fce:	bf00      	nop

08020fd0 <st_sssa8_ch_convolve>:
 8020fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fd4:	b0d3      	sub	sp, #332	; 0x14c
 8020fd6:	4699      	mov	r9, r3
 8020fd8:	4688      	mov	r8, r1
 8020fda:	f8bd 5174 	ldrh.w	r5, [sp, #372]	; 0x174
 8020fde:	f8bd 6178 	ldrh.w	r6, [sp, #376]	; 0x178
 8020fe2:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 8020fe4:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
 8020fe8:	f8bd 717c 	ldrh.w	r7, [sp, #380]	; 0x17c
 8020fec:	4629      	mov	r1, r5
 8020fee:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8020ff2:	900d      	str	r0, [sp, #52]	; 0x34
 8020ff4:	fb16 f307 	smulbb	r3, r6, r7
 8020ff8:	ebc5 7045 	rsb	r0, r5, r5, lsl #29
 8020ffc:	9519      	str	r5, [sp, #100]	; 0x64
 8020ffe:	00ad      	lsls	r5, r5, #2
 8021000:	fb13 f309 	smulbb	r3, r3, r9
 8021004:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8021008:	920b      	str	r2, [sp, #44]	; 0x2c
 802100a:	b29b      	uxth	r3, r3
 802100c:	4602      	mov	r2, r0
 802100e:	9022      	str	r0, [sp, #136]	; 0x88
 8021010:	931a      	str	r3, [sp, #104]	; 0x68
 8021012:	442a      	add	r2, r5
 8021014:	f8bd 3184 	ldrh.w	r3, [sp, #388]	; 0x184
 8021018:	f8bd 0180 	ldrh.w	r0, [sp, #384]	; 0x180
 802101c:	9323      	str	r3, [sp, #140]	; 0x8c
 802101e:	f8bd 3188 	ldrh.w	r3, [sp, #392]	; 0x188
 8021022:	9617      	str	r6, [sp, #92]	; 0x5c
 8021024:	930f      	str	r3, [sp, #60]	; 0x3c
 8021026:	f8bd 318c 	ldrh.w	r3, [sp, #396]	; 0x18c
 802102a:	9414      	str	r4, [sp, #80]	; 0x50
 802102c:	931b      	str	r3, [sp, #108]	; 0x6c
 802102e:	f8bd 31a8 	ldrh.w	r3, [sp, #424]	; 0x1a8
 8021032:	9725      	str	r7, [sp, #148]	; 0x94
 8021034:	9311      	str	r3, [sp, #68]	; 0x44
 8021036:	f8bd 31ac 	ldrh.w	r3, [sp, #428]	; 0x1ac
 802103a:	9507      	str	r5, [sp, #28]
 802103c:	9224      	str	r2, [sp, #144]	; 0x90
 802103e:	9015      	str	r0, [sp, #84]	; 0x54
 8021040:	9c66      	ldr	r4, [sp, #408]	; 0x198
 8021042:	f99d b19c 	ldrsb.w	fp, [sp, #412]	; 0x19c
 8021046:	f99d 61a0 	ldrsb.w	r6, [sp, #416]	; 0x1a0
 802104a:	9320      	str	r3, [sp, #128]	; 0x80
 802104c:	2900      	cmp	r1, #0
 802104e:	f000 8516 	beq.w	8021a7e <st_sssa8_ch_convolve+0xaae>
 8021052:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8021056:	4620      	mov	r0, r4
 8021058:	1f15      	subs	r5, r2, #4
 802105a:	2701      	movs	r7, #1
 802105c:	4464      	add	r4, ip
 802105e:	f930 3b02 	ldrsh.w	r3, [r0], #2
 8021062:	1e5a      	subs	r2, r3, #1
 8021064:	fa07 f103 	lsl.w	r1, r7, r3
 8021068:	fa06 f303 	lsl.w	r3, r6, r3
 802106c:	b292      	uxth	r2, r2
 802106e:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8021072:	2a14      	cmp	r2, #20
 8021074:	f200 816a 	bhi.w	802134c <st_sssa8_ch_convolve+0x37c>
 8021078:	4284      	cmp	r4, r0
 802107a:	f845 3f04 	str.w	r3, [r5, #4]!
 802107e:	d1ee      	bne.n	802105e <st_sssa8_ch_convolve+0x8e>
 8021080:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021082:	9a07      	ldr	r2, [sp, #28]
 8021084:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8021086:	189d      	adds	r5, r3, r2
 8021088:	eba4 010c 	sub.w	r1, r4, ip
 802108c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802108e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021090:	aa3a      	add	r2, sp, #232	; 0xe8
 8021092:	974a      	str	r7, [sp, #296]	; 0x128
 8021094:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8021098:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 802109a:	ab36      	add	r3, sp, #216	; 0xd8
 802109c:	9433      	str	r4, [sp, #204]	; 0xcc
 802109e:	a83e      	add	r0, sp, #248	; 0xf8
 80210a0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80210a2:	974b      	str	r7, [sp, #300]	; 0x12c
 80210a4:	9438      	str	r4, [sp, #224]	; 0xe0
 80210a6:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80210a8:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80210aa:	974c      	str	r7, [sp, #304]	; 0x130
 80210ac:	9437      	str	r4, [sp, #220]	; 0xdc
 80210ae:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 80210b0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80210b2:	9200      	str	r2, [sp, #0]
 80210b4:	aa32      	add	r2, sp, #200	; 0xc8
 80210b6:	9121      	str	r1, [sp, #132]	; 0x84
 80210b8:	a948      	add	r1, sp, #288	; 0x120
 80210ba:	f8cd 80d0 	str.w	r8, [sp, #208]	; 0xd0
 80210be:	974d      	str	r7, [sp, #308]	; 0x134
 80210c0:	e9cd 643b 	strd	r6, r4, [sp, #236]	; 0xec
 80210c4:	f001 fc84 	bl	80229d0 <ai_padding_opt_init>
 80210c8:	fb0a f204 	mul.w	r2, sl, r4
 80210cc:	e9dd 3119 	ldrd	r3, r1, [sp, #100]	; 0x64
 80210d0:	fb06 f202 	mul.w	r2, r6, r2
 80210d4:	fb03 f301 	mul.w	r3, r3, r1
 80210d8:	9914      	ldr	r1, [sp, #80]	; 0x50
 80210da:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80210de:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80210e2:	921c      	str	r2, [sp, #112]	; 0x70
 80210e4:	f340 84b2 	ble.w	8021a4c <st_sssa8_ch_convolve+0xa7c>
 80210e8:	2300      	movs	r3, #0
 80210ea:	932e      	str	r3, [sp, #184]	; 0xb8
 80210ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80210ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80210f0:	9969      	ldr	r1, [sp, #420]	; 0x1a4
 80210f2:	fb03 f302 	mul.w	r3, r3, r2
 80210f6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80210f8:	fb02 1303 	mla	r3, r2, r3, r1
 80210fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80210fe:	429a      	cmp	r2, r3
 8021100:	f080 812a 	bcs.w	8021358 <st_sssa8_ch_convolve+0x388>
 8021104:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021106:	fb03 f308 	mul.w	r3, r3, r8
 802110a:	fb09 2303 	mla	r3, r9, r3, r2
 802110e:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 8021110:	429a      	cmp	r2, r3
 8021112:	bf2c      	ite	cs
 8021114:	2300      	movcs	r3, #0
 8021116:	2301      	movcc	r3, #1
 8021118:	991a      	ldr	r1, [sp, #104]	; 0x68
 802111a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 802111e:	fb92 f2f1 	sdiv	r2, r2, r1
 8021122:	9919      	ldr	r1, [sp, #100]	; 0x64
 8021124:	f022 0201 	bic.w	r2, r2, #1
 8021128:	428a      	cmp	r2, r1
 802112a:	bf28      	it	cs
 802112c:	460a      	movcs	r2, r1
 802112e:	2a01      	cmp	r2, #1
 8021130:	921f      	str	r2, [sp, #124]	; 0x7c
 8021132:	f240 82ec 	bls.w	802170e <st_sssa8_ch_convolve+0x73e>
 8021136:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8021138:	460a      	mov	r2, r1
 802113a:	fbb1 f1f0 	udiv	r1, r1, r0
 802113e:	fb00 2211 	mls	r2, r0, r1, r2
 8021142:	b289      	uxth	r1, r1
 8021144:	b292      	uxth	r2, r2
 8021146:	912c      	str	r1, [sp, #176]	; 0xb0
 8021148:	b11a      	cbz	r2, 8021152 <st_sssa8_ch_convolve+0x182>
 802114a:	460a      	mov	r2, r1
 802114c:	3201      	adds	r2, #1
 802114e:	b292      	uxth	r2, r2
 8021150:	922c      	str	r2, [sp, #176]	; 0xb0
 8021152:	2b00      	cmp	r3, #0
 8021154:	f040 8102 	bne.w	802135c <st_sssa8_ch_convolve+0x38c>
 8021158:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802115a:	fa0f fb8b 	sxth.w	fp, fp
 802115e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021160:	fb09 f201 	mul.w	r2, r9, r1
 8021164:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021166:	005b      	lsls	r3, r3, #1
 8021168:	9216      	str	r2, [sp, #88]	; 0x58
 802116a:	0052      	lsls	r2, r2, #1
 802116c:	fb01 f303 	mul.w	r3, r1, r3
 8021170:	9207      	str	r2, [sp, #28]
 8021172:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021174:	9026      	str	r0, [sp, #152]	; 0x98
 8021176:	fb0a 2303 	mla	r3, sl, r3, r2
 802117a:	4652      	mov	r2, sl
 802117c:	46ca      	mov	sl, r9
 802117e:	9313      	str	r3, [sp, #76]	; 0x4c
 8021180:	465b      	mov	r3, fp
 8021182:	4691      	mov	r9, r2
 8021184:	46c3      	mov	fp, r8
 8021186:	4698      	mov	r8, r3
 8021188:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802118a:	1e5a      	subs	r2, r3, #1
 802118c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021190:	b292      	uxth	r2, r2
 8021192:	429a      	cmp	r2, r3
 8021194:	922c      	str	r2, [sp, #176]	; 0xb0
 8021196:	f000 82b6 	beq.w	8021706 <st_sssa8_ch_convolve+0x736>
 802119a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802119c:	b92b      	cbnz	r3, 80211aa <st_sssa8_ch_convolve+0x1da>
 802119e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80211a0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80211a2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80211a4:	985c      	ldr	r0, [sp, #368]	; 0x170
 80211a6:	f002 f93b 	bl	8023420 <st_int8_to16_dual>
 80211aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80211ac:	2b00      	cmp	r3, #0
 80211ae:	f000 80a9 	beq.w	8021304 <st_sssa8_ch_convolve+0x334>
 80211b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80211b4:	2400      	movs	r4, #0
 80211b6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80211b8:	425b      	negs	r3, r3
 80211ba:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 80211bc:	941e      	str	r4, [sp, #120]	; 0x78
 80211be:	b29b      	uxth	r3, r3
 80211c0:	921d      	str	r2, [sp, #116]	; 0x74
 80211c2:	9318      	str	r3, [sp, #96]	; 0x60
 80211c4:	4643      	mov	r3, r8
 80211c6:	46c8      	mov	r8, r9
 80211c8:	46b9      	mov	r9, r7
 80211ca:	461f      	mov	r7, r3
 80211cc:	a83e      	add	r0, sp, #248	; 0xf8
 80211ce:	f001 fc59 	bl	8022a84 <ai_padding_opt_phase1>
 80211d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80211d4:	2b00      	cmp	r3, #0
 80211d6:	d06e      	beq.n	80212b6 <st_sssa8_ch_convolve+0x2e6>
 80211d8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80211da:	2500      	movs	r5, #0
 80211dc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80211de:	9510      	str	r5, [sp, #64]	; 0x40
 80211e0:	1a99      	subs	r1, r3, r2
 80211e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80211e4:	425a      	negs	r2, r3
 80211e6:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 80211ea:	9312      	str	r3, [sp, #72]	; 0x48
 80211ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80211ee:	fb04 1303 	mla	r3, r4, r3, r1
 80211f2:	9308      	str	r3, [sp, #32]
 80211f4:	b293      	uxth	r3, r2
 80211f6:	930a      	str	r3, [sp, #40]	; 0x28
 80211f8:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 80211fa:	2a00      	cmp	r2, #0
 80211fc:	f040 8192 	bne.w	8021524 <st_sssa8_ch_convolve+0x554>
 8021200:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8021202:	2a00      	cmp	r2, #0
 8021204:	f040 8194 	bne.w	8021530 <st_sssa8_ch_convolve+0x560>
 8021208:	9a40      	ldr	r2, [sp, #256]	; 0x100
 802120a:	2101      	movs	r1, #1
 802120c:	3a01      	subs	r2, #1
 802120e:	f8ad 111e 	strh.w	r1, [sp, #286]	; 0x11e
 8021212:	9240      	str	r2, [sp, #256]	; 0x100
 8021214:	9b08      	ldr	r3, [sp, #32]
 8021216:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021218:	4293      	cmp	r3, r2
 802121a:	dd3a      	ble.n	8021292 <st_sssa8_ch_convolve+0x2c2>
 802121c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802121e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8021220:	fb05 2503 	mla	r5, r5, r3, r2
 8021224:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8021228:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802122a:	930e      	str	r3, [sp, #56]	; 0x38
 802122c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802122e:	1aad      	subs	r5, r5, r2
 8021230:	461e      	mov	r6, r3
 8021232:	461a      	mov	r2, r3
 8021234:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021236:	428d      	cmp	r5, r1
 8021238:	dd25      	ble.n	8021286 <st_sssa8_ch_convolve+0x2b6>
 802123a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802123c:	460c      	mov	r4, r1
 802123e:	9609      	str	r6, [sp, #36]	; 0x24
 8021240:	468c      	mov	ip, r1
 8021242:	4293      	cmp	r3, r2
 8021244:	fb02 f20b 	mul.w	r2, r2, fp
 8021248:	bfcc      	ite	gt
 802124a:	2300      	movgt	r3, #0
 802124c:	2301      	movle	r3, #1
 802124e:	920c      	str	r2, [sp, #48]	; 0x30
 8021250:	ea43 73d6 	orr.w	r3, r3, r6, lsr #31
 8021254:	461e      	mov	r6, r3
 8021256:	45e3      	cmp	fp, ip
 8021258:	4652      	mov	r2, sl
 802125a:	4649      	mov	r1, r9
 802125c:	4638      	mov	r0, r7
 802125e:	bfcc      	ite	gt
 8021260:	f04f 0e00 	movgt.w	lr, #0
 8021264:	f04f 0e01 	movle.w	lr, #1
 8021268:	ea5e 73d4 	orrs.w	r3, lr, r4, lsr #31
 802126c:	d102      	bne.n	8021274 <st_sssa8_ch_convolve+0x2a4>
 802126e:	2e00      	cmp	r6, #0
 8021270:	f000 8146 	beq.w	8021500 <st_sssa8_ch_convolve+0x530>
 8021274:	f003 feda 	bl	802502c <st_dsp_arm_fill_q15>
 8021278:	3401      	adds	r4, #1
 802127a:	44c1      	add	r9, r8
 802127c:	b224      	sxth	r4, r4
 802127e:	42ac      	cmp	r4, r5
 8021280:	46a4      	mov	ip, r4
 8021282:	dbe8      	blt.n	8021256 <st_sssa8_ch_convolve+0x286>
 8021284:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8021286:	3601      	adds	r6, #1
 8021288:	9b08      	ldr	r3, [sp, #32]
 802128a:	b236      	sxth	r6, r6
 802128c:	429e      	cmp	r6, r3
 802128e:	4632      	mov	r2, r6
 8021290:	dbd0      	blt.n	8021234 <st_sssa8_ch_convolve+0x264>
 8021292:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021294:	454b      	cmp	r3, r9
 8021296:	f000 8179 	beq.w	802158c <st_sssa8_ch_convolve+0x5bc>
 802129a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802129c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802129e:	9910      	ldr	r1, [sp, #64]	; 0x40
 80212a0:	4403      	add	r3, r0
 80212a2:	3101      	adds	r1, #1
 80212a4:	461a      	mov	r2, r3
 80212a6:	b20b      	sxth	r3, r1
 80212a8:	b292      	uxth	r2, r2
 80212aa:	9310      	str	r3, [sp, #64]	; 0x40
 80212ac:	461d      	mov	r5, r3
 80212ae:	920a      	str	r2, [sp, #40]	; 0x28
 80212b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80212b2:	429a      	cmp	r2, r3
 80212b4:	dca0      	bgt.n	80211f8 <st_sssa8_ch_convolve+0x228>
 80212b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80212b8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80212ba:	991e      	ldr	r1, [sp, #120]	; 0x78
 80212bc:	4403      	add	r3, r0
 80212be:	3101      	adds	r1, #1
 80212c0:	461a      	mov	r2, r3
 80212c2:	b20b      	sxth	r3, r1
 80212c4:	b292      	uxth	r2, r2
 80212c6:	931e      	str	r3, [sp, #120]	; 0x78
 80212c8:	461c      	mov	r4, r3
 80212ca:	9218      	str	r2, [sp, #96]	; 0x60
 80212cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80212ce:	429a      	cmp	r2, r3
 80212d0:	f73f af7c 	bgt.w	80211cc <st_sssa8_ch_convolve+0x1fc>
 80212d4:	463b      	mov	r3, r7
 80212d6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80212d8:	464f      	mov	r7, r9
 80212da:	46c1      	mov	r9, r8
 80212dc:	4698      	mov	r8, r3
 80212de:	42b9      	cmp	r1, r7
 80212e0:	d010      	beq.n	8021304 <st_sssa8_ch_convolve+0x334>
 80212e2:	9865      	ldr	r0, [sp, #404]	; 0x194
 80212e4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80212e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80212e8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80212ea:	9003      	str	r0, [sp, #12]
 80212ec:	9401      	str	r4, [sp, #4]
 80212ee:	9821      	ldr	r0, [sp, #132]	; 0x84
 80212f0:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 80212f2:	9305      	str	r3, [sp, #20]
 80212f4:	9204      	str	r2, [sp, #16]
 80212f6:	9002      	str	r0, [sp, #8]
 80212f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80212fa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80212fc:	981c      	ldr	r0, [sp, #112]	; 0x70
 80212fe:	9400      	str	r4, [sp, #0]
 8021300:	f003 fb64 	bl	80249cc <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8021304:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8021306:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021308:	4611      	mov	r1, r2
 802130a:	1a9b      	subs	r3, r3, r2
 802130c:	b298      	uxth	r0, r3
 802130e:	4282      	cmp	r2, r0
 8021310:	9026      	str	r0, [sp, #152]	; 0x98
 8021312:	bf28      	it	cs
 8021314:	4601      	movcs	r1, r0
 8021316:	460b      	mov	r3, r1
 8021318:	b1b1      	cbz	r1, 8021348 <st_sssa8_ch_convolve+0x378>
 802131a:	4611      	mov	r1, r2
 802131c:	9d5c      	ldr	r5, [sp, #368]	; 0x170
 802131e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8021320:	0092      	lsls	r2, r2, #2
 8021322:	fb04 5001 	mla	r0, r4, r1, r5
 8021326:	905c      	str	r0, [sp, #368]	; 0x170
 8021328:	9821      	ldr	r0, [sp, #132]	; 0x84
 802132a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 802132e:	9021      	str	r0, [sp, #132]	; 0x84
 8021330:	9869      	ldr	r0, [sp, #420]	; 0x1a4
 8021332:	4408      	add	r0, r1
 8021334:	9922      	ldr	r1, [sp, #136]	; 0x88
 8021336:	4411      	add	r1, r2
 8021338:	9069      	str	r0, [sp, #420]	; 0x1a4
 802133a:	9122      	str	r1, [sp, #136]	; 0x88
 802133c:	9965      	ldr	r1, [sp, #404]	; 0x194
 802133e:	4411      	add	r1, r2
 8021340:	9165      	str	r1, [sp, #404]	; 0x194
 8021342:	9924      	ldr	r1, [sp, #144]	; 0x90
 8021344:	4411      	add	r1, r2
 8021346:	9124      	str	r1, [sp, #144]	; 0x90
 8021348:	931f      	str	r3, [sp, #124]	; 0x7c
 802134a:	e71d      	b.n	8021188 <st_sssa8_ch_convolve+0x1b8>
 802134c:	4284      	cmp	r4, r0
 802134e:	f845 6f04 	str.w	r6, [r5, #4]!
 8021352:	f47f ae84 	bne.w	802105e <st_sssa8_ch_convolve+0x8e>
 8021356:	e693      	b.n	8021080 <st_sssa8_ch_convolve+0xb0>
 8021358:	2300      	movs	r3, #0
 802135a:	e6dd      	b.n	8021118 <st_sssa8_ch_convolve+0x148>
 802135c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802135e:	2b00      	cmp	r3, #0
 8021360:	f000 81d1 	beq.w	8021706 <st_sssa8_ch_convolve+0x736>
 8021364:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8021366:	2400      	movs	r4, #0
 8021368:	9925      	ldr	r1, [sp, #148]	; 0x94
 802136a:	4242      	negs	r2, r0
 802136c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 802136e:	004b      	lsls	r3, r1, #1
 8021370:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
 8021374:	b292      	uxth	r2, r2
 8021376:	fb09 f506 	mul.w	r5, r9, r6
 802137a:	fb06 f303 	mul.w	r3, r6, r3
 802137e:	1a09      	subs	r1, r1, r0
 8021380:	922f      	str	r2, [sp, #188]	; 0xbc
 8021382:	fa0f f68b 	sxth.w	r6, fp
 8021386:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021388:	46c3      	mov	fp, r8
 802138a:	9507      	str	r5, [sp, #28]
 802138c:	fb0a 2303 	mla	r3, sl, r3, r2
 8021390:	46ca      	mov	sl, r9
 8021392:	9430      	str	r4, [sp, #192]	; 0xc0
 8021394:	9316      	str	r3, [sp, #88]	; 0x58
 8021396:	006b      	lsls	r3, r5, #1
 8021398:	9613      	str	r6, [sp, #76]	; 0x4c
 802139a:	9131      	str	r1, [sp, #196]	; 0xc4
 802139c:	931d      	str	r3, [sp, #116]	; 0x74
 802139e:	a83e      	add	r0, sp, #248	; 0xf8
 80213a0:	f001 fb70 	bl	8022a84 <ai_padding_opt_phase1>
 80213a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80213a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80213a8:	fb04 f303 	mul.w	r3, r4, r3
 80213ac:	9969      	ldr	r1, [sp, #420]	; 0x1a4
 80213ae:	fb02 1303 	mla	r3, r2, r3, r1
 80213b2:	9323      	str	r3, [sp, #140]	; 0x8c
 80213b4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80213b6:	b92b      	cbnz	r3, 80213c4 <st_sssa8_ch_convolve+0x3f4>
 80213b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80213ba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80213bc:	991c      	ldr	r1, [sp, #112]	; 0x70
 80213be:	985c      	ldr	r0, [sp, #368]	; 0x170
 80213c0:	f002 f82e 	bl	8023420 <st_int8_to16_dual>
 80213c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80213c6:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80213c8:	fb03 2304 	mla	r3, r3, r4, r2
 80213cc:	9308      	str	r3, [sp, #32]
 80213ce:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 80213d2:	9312      	str	r3, [sp, #72]	; 0x48
 80213d4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80213d6:	9325      	str	r3, [sp, #148]	; 0x94
 80213d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80213da:	932a      	str	r3, [sp, #168]	; 0xa8
 80213dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80213de:	9318      	str	r3, [sp, #96]	; 0x60
 80213e0:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 80213e2:	932d      	str	r3, [sp, #180]	; 0xb4
 80213e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80213e6:	9327      	str	r3, [sp, #156]	; 0x9c
 80213e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80213ea:	9329      	str	r3, [sp, #164]	; 0xa4
 80213ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80213ee:	9326      	str	r3, [sp, #152]	; 0x98
 80213f0:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80213f2:	9328      	str	r3, [sp, #160]	; 0xa0
 80213f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80213f6:	1e5a      	subs	r2, r3, #1
 80213f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80213fc:	b292      	uxth	r2, r2
 80213fe:	429a      	cmp	r2, r3
 8021400:	9225      	str	r2, [sp, #148]	; 0x94
 8021402:	f000 8172 	beq.w	80216ea <st_sssa8_ch_convolve+0x71a>
 8021406:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8021408:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802140a:	9942      	ldr	r1, [sp, #264]	; 0x108
 802140c:	9340      	str	r3, [sp, #256]	; 0x100
 802140e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021410:	e9cd 213e 	strd	r2, r1, [sp, #248]	; 0xf8
 8021414:	2b00      	cmp	r3, #0
 8021416:	f000 813e 	beq.w	8021696 <st_sssa8_ch_convolve+0x6c6>
 802141a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802141c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802141e:	4259      	negs	r1, r3
 8021420:	2300      	movs	r3, #0
 8021422:	901e      	str	r0, [sp, #120]	; 0x78
 8021424:	b289      	uxth	r1, r1
 8021426:	9310      	str	r3, [sp, #64]	; 0x40
 8021428:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 802142c:	910a      	str	r1, [sp, #40]	; 0x28
 802142e:	4619      	mov	r1, r3
 8021430:	2a00      	cmp	r2, #0
 8021432:	d15f      	bne.n	80214f4 <st_sssa8_ch_convolve+0x524>
 8021434:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8021436:	2a00      	cmp	r2, #0
 8021438:	f040 80cc 	bne.w	80215d4 <st_sssa8_ch_convolve+0x604>
 802143c:	9a40      	ldr	r2, [sp, #256]	; 0x100
 802143e:	2001      	movs	r0, #1
 8021440:	3a01      	subs	r2, #1
 8021442:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 8021446:	9240      	str	r2, [sp, #256]	; 0x100
 8021448:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802144a:	9a08      	ldr	r2, [sp, #32]
 802144c:	4293      	cmp	r3, r2
 802144e:	da3b      	bge.n	80214c8 <st_sssa8_ch_convolve+0x4f8>
 8021450:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021452:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8021454:	f8dd 80ac 	ldr.w	r8, [sp, #172]	; 0xac
 8021458:	fb01 2103 	mla	r1, r1, r3, r2
 802145c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8021460:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021462:	930e      	str	r3, [sp, #56]	; 0x38
 8021464:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021466:	4617      	mov	r7, r2
 8021468:	1ace      	subs	r6, r1, r3
 802146a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802146c:	42b3      	cmp	r3, r6
 802146e:	da25      	bge.n	80214bc <st_sssa8_ch_convolve+0x4ec>
 8021470:	f3c7 35c0 	ubfx	r5, r7, #15, #1
 8021474:	461c      	mov	r4, r3
 8021476:	469c      	mov	ip, r3
 8021478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802147a:	fb0b f102 	mul.w	r1, fp, r2
 802147e:	4293      	cmp	r3, r2
 8021480:	bfd8      	it	le
 8021482:	f045 0501 	orrle.w	r5, r5, #1
 8021486:	9709      	str	r7, [sp, #36]	; 0x24
 8021488:	910c      	str	r1, [sp, #48]	; 0x30
 802148a:	462f      	mov	r7, r5
 802148c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802148e:	45e3      	cmp	fp, ip
 8021490:	4652      	mov	r2, sl
 8021492:	4649      	mov	r1, r9
 8021494:	4628      	mov	r0, r5
 8021496:	bfcc      	ite	gt
 8021498:	f04f 0e00 	movgt.w	lr, #0
 802149c:	f04f 0e01 	movle.w	lr, #1
 80214a0:	ea5e 73d4 	orrs.w	r3, lr, r4, lsr #31
 80214a4:	d101      	bne.n	80214aa <st_sssa8_ch_convolve+0x4da>
 80214a6:	2f00      	cmp	r7, #0
 80214a8:	d033      	beq.n	8021512 <st_sssa8_ch_convolve+0x542>
 80214aa:	f003 fdbf 	bl	802502c <st_dsp_arm_fill_q15>
 80214ae:	3401      	adds	r4, #1
 80214b0:	44c1      	add	r9, r8
 80214b2:	b224      	sxth	r4, r4
 80214b4:	42b4      	cmp	r4, r6
 80214b6:	46a4      	mov	ip, r4
 80214b8:	dbe9      	blt.n	802148e <st_sssa8_ch_convolve+0x4be>
 80214ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80214bc:	3701      	adds	r7, #1
 80214be:	9b08      	ldr	r3, [sp, #32]
 80214c0:	b23f      	sxth	r7, r7
 80214c2:	429f      	cmp	r7, r3
 80214c4:	463a      	mov	r2, r7
 80214c6:	dbd0      	blt.n	802146a <st_sssa8_ch_convolve+0x49a>
 80214c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80214ca:	454b      	cmp	r3, r9
 80214cc:	f000 80ac 	beq.w	8021628 <st_sssa8_ch_convolve+0x658>
 80214d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80214d2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80214d4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80214d6:	4403      	add	r3, r0
 80214d8:	3101      	adds	r1, #1
 80214da:	461a      	mov	r2, r3
 80214dc:	b20b      	sxth	r3, r1
 80214de:	b292      	uxth	r2, r2
 80214e0:	9310      	str	r3, [sp, #64]	; 0x40
 80214e2:	4619      	mov	r1, r3
 80214e4:	920a      	str	r2, [sp, #40]	; 0x28
 80214e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80214e8:	429a      	cmp	r2, r3
 80214ea:	f340 80c0 	ble.w	802166e <st_sssa8_ch_convolve+0x69e>
 80214ee:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 80214f0:	2a00      	cmp	r2, #0
 80214f2:	d09f      	beq.n	8021434 <st_sssa8_ch_convolve+0x464>
 80214f4:	3a01      	subs	r2, #1
 80214f6:	2001      	movs	r0, #1
 80214f8:	923e      	str	r2, [sp, #248]	; 0xf8
 80214fa:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 80214fe:	e7a3      	b.n	8021448 <st_sssa8_ch_convolve+0x478>
 8021500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021502:	eb03 000c 	add.w	r0, r3, ip
 8021506:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021508:	fb0a 3000 	mla	r0, sl, r0, r3
 802150c:	f001 fee6 	bl	80232dc <st_int8_to16_no_shift>
 8021510:	e6b2      	b.n	8021278 <st_sssa8_ch_convolve+0x2a8>
 8021512:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021514:	eb03 000c 	add.w	r0, r3, ip
 8021518:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802151a:	fb0a 3000 	mla	r0, sl, r0, r3
 802151e:	f001 fedd 	bl	80232dc <st_int8_to16_no_shift>
 8021522:	e7c4      	b.n	80214ae <st_sssa8_ch_convolve+0x4de>
 8021524:	3a01      	subs	r2, #1
 8021526:	2101      	movs	r1, #1
 8021528:	923e      	str	r2, [sp, #248]	; 0xf8
 802152a:	f8ad 111e 	strh.w	r1, [sp, #286]	; 0x11e
 802152e:	e671      	b.n	8021214 <st_sssa8_ch_convolve+0x244>
 8021530:	f8bd 111c 	ldrh.w	r1, [sp, #284]	; 0x11c
 8021534:	3a01      	subs	r2, #1
 8021536:	2901      	cmp	r1, #1
 8021538:	923f      	str	r2, [sp, #252]	; 0xfc
 802153a:	f8ad 111e 	strh.w	r1, [sp, #286]	; 0x11e
 802153e:	f43f ae69 	beq.w	8021214 <st_sssa8_ch_convolve+0x244>
 8021542:	9e08      	ldr	r6, [sp, #32]
 8021544:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021546:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
 802154a:	4296      	cmp	r6, r2
 802154c:	f77f aea1 	ble.w	8021292 <st_sssa8_ch_convolve+0x2c2>
 8021550:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8021554:	4615      	mov	r5, r2
 8021556:	970c      	str	r7, [sp, #48]	; 0x30
 8021558:	4610      	mov	r0, r2
 802155a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 802155e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8021560:	3501      	adds	r5, #1
 8021562:	fb00 400b 	mla	r0, r0, fp, r4
 8021566:	9b07      	ldr	r3, [sp, #28]
 8021568:	4649      	mov	r1, r9
 802156a:	b22d      	sxth	r5, r5
 802156c:	fb0a 7000 	mla	r0, sl, r0, r7
 8021570:	4642      	mov	r2, r8
 8021572:	4499      	add	r9, r3
 8021574:	f001 feb2 	bl	80232dc <st_int8_to16_no_shift>
 8021578:	42b5      	cmp	r5, r6
 802157a:	4628      	mov	r0, r5
 802157c:	dbf0      	blt.n	8021560 <st_sssa8_ch_convolve+0x590>
 802157e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021580:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8021584:	454b      	cmp	r3, r9
 8021586:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021588:	f47f ae87 	bne.w	802129a <st_sssa8_ch_convolve+0x2ca>
 802158c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 802158e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021590:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8021592:	9965      	ldr	r1, [sp, #404]	; 0x194
 8021594:	9821      	ldr	r0, [sp, #132]	; 0x84
 8021596:	9401      	str	r4, [sp, #4]
 8021598:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 802159a:	9305      	str	r3, [sp, #20]
 802159c:	9204      	str	r2, [sp, #16]
 802159e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80215a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80215a2:	9103      	str	r1, [sp, #12]
 80215a4:	9002      	str	r0, [sp, #8]
 80215a6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80215a8:	981c      	ldr	r0, [sp, #112]	; 0x70
 80215aa:	9400      	str	r4, [sp, #0]
 80215ac:	f002 fef4 	bl	8024398 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 80215b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80215b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80215b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80215b6:	440b      	add	r3, r1
 80215b8:	901d      	str	r0, [sp, #116]	; 0x74
 80215ba:	3201      	adds	r2, #1
 80215bc:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 80215c0:	b29b      	uxth	r3, r3
 80215c2:	b212      	sxth	r2, r2
 80215c4:	930a      	str	r3, [sp, #40]	; 0x28
 80215c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80215c8:	4615      	mov	r5, r2
 80215ca:	9210      	str	r2, [sp, #64]	; 0x40
 80215cc:	4293      	cmp	r3, r2
 80215ce:	f73f ae13 	bgt.w	80211f8 <st_sssa8_ch_convolve+0x228>
 80215d2:	e670      	b.n	80212b6 <st_sssa8_ch_convolve+0x2e6>
 80215d4:	f8bd 011c 	ldrh.w	r0, [sp, #284]	; 0x11c
 80215d8:	3a01      	subs	r2, #1
 80215da:	2801      	cmp	r0, #1
 80215dc:	923f      	str	r2, [sp, #252]	; 0xfc
 80215de:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 80215e2:	f43f af31 	beq.w	8021448 <st_sssa8_ch_convolve+0x478>
 80215e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80215e8:	9f08      	ldr	r7, [sp, #32]
 80215ea:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
 80215ee:	42bb      	cmp	r3, r7
 80215f0:	f6bf af6a 	bge.w	80214c8 <st_sssa8_ch_convolve+0x4f8>
 80215f4:	464e      	mov	r6, r9
 80215f6:	461d      	mov	r5, r3
 80215f8:	4618      	mov	r0, r3
 80215fa:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
 80215fe:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8021602:	3501      	adds	r5, #1
 8021604:	fb00 400b 	mla	r0, r0, fp, r4
 8021608:	4631      	mov	r1, r6
 802160a:	9a07      	ldr	r2, [sp, #28]
 802160c:	b22d      	sxth	r5, r5
 802160e:	fb0a 8000 	mla	r0, sl, r0, r8
 8021612:	f001 fe63 	bl	80232dc <st_int8_to16_no_shift>
 8021616:	444e      	add	r6, r9
 8021618:	42bd      	cmp	r5, r7
 802161a:	4628      	mov	r0, r5
 802161c:	dbf1      	blt.n	8021602 <st_sssa8_ch_convolve+0x632>
 802161e:	46b1      	mov	r9, r6
 8021620:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021622:	454b      	cmp	r3, r9
 8021624:	f47f af54 	bne.w	80214d0 <st_sssa8_ch_convolve+0x500>
 8021628:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802162a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 802162c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802162e:	9826      	ldr	r0, [sp, #152]	; 0x98
 8021630:	9204      	str	r2, [sp, #16]
 8021632:	9401      	str	r4, [sp, #4]
 8021634:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8021636:	9305      	str	r3, [sp, #20]
 8021638:	9002      	str	r0, [sp, #8]
 802163a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802163c:	981c      	ldr	r0, [sp, #112]	; 0x70
 802163e:	9400      	str	r4, [sp, #0]
 8021640:	e9dd 1228 	ldrd	r1, r2, [sp, #160]	; 0xa0
 8021644:	9103      	str	r1, [sp, #12]
 8021646:	9914      	ldr	r1, [sp, #80]	; 0x50
 8021648:	f002 fea6 	bl	8024398 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 802164c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802164e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021650:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021652:	440b      	add	r3, r1
 8021654:	901e      	str	r0, [sp, #120]	; 0x78
 8021656:	3201      	adds	r2, #1
 8021658:	b29b      	uxth	r3, r3
 802165a:	b212      	sxth	r2, r2
 802165c:	930a      	str	r3, [sp, #40]	; 0x28
 802165e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021660:	4611      	mov	r1, r2
 8021662:	9210      	str	r2, [sp, #64]	; 0x40
 8021664:	4293      	cmp	r3, r2
 8021666:	dd16      	ble.n	8021696 <st_sssa8_ch_convolve+0x6c6>
 8021668:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 802166c:	e73f      	b.n	80214ee <st_sssa8_ch_convolve+0x51e>
 802166e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8021670:	4589      	cmp	r9, r1
 8021672:	d010      	beq.n	8021696 <st_sssa8_ch_convolve+0x6c6>
 8021674:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8021676:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8021678:	9204      	str	r2, [sp, #16]
 802167a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802167c:	9401      	str	r4, [sp, #4]
 802167e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8021680:	9305      	str	r3, [sp, #20]
 8021682:	9400      	str	r4, [sp, #0]
 8021684:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021686:	e9dd 0228 	ldrd	r0, r2, [sp, #160]	; 0xa0
 802168a:	9003      	str	r0, [sp, #12]
 802168c:	9826      	ldr	r0, [sp, #152]	; 0x98
 802168e:	9002      	str	r0, [sp, #8]
 8021690:	981c      	ldr	r0, [sp, #112]	; 0x70
 8021692:	f003 f99b 	bl	80249cc <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8021696:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8021698:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802169a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 802169c:	1a9b      	subs	r3, r3, r2
 802169e:	4608      	mov	r0, r1
 80216a0:	b29b      	uxth	r3, r3
 80216a2:	4410      	add	r0, r2
 80216a4:	429a      	cmp	r2, r3
 80216a6:	932a      	str	r3, [sp, #168]	; 0xa8
 80216a8:	9023      	str	r0, [sp, #140]	; 0x8c
 80216aa:	bf28      	it	cs
 80216ac:	461a      	movcs	r2, r3
 80216ae:	b294      	uxth	r4, r2
 80216b0:	b90c      	cbnz	r4, 80216b6 <st_sssa8_ch_convolve+0x6e6>
 80216b2:	9418      	str	r4, [sp, #96]	; 0x60
 80216b4:	e69e      	b.n	80213f4 <st_sssa8_ch_convolve+0x424>
 80216b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80216b8:	9e26      	ldr	r6, [sp, #152]	; 0x98
 80216ba:	4619      	mov	r1, r3
 80216bc:	009d      	lsls	r5, r3, #2
 80216be:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80216c0:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 80216c4:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 80216c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80216c8:	442e      	add	r6, r5
 80216ca:	9126      	str	r1, [sp, #152]	; 0x98
 80216cc:	fb02 0003 	mla	r0, r2, r3, r0
 80216d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80216d2:	9629      	str	r6, [sp, #164]	; 0xa4
 80216d4:	4623      	mov	r3, r4
 80216d6:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 80216d8:	902d      	str	r0, [sp, #180]	; 0xb4
 80216da:	442e      	add	r6, r5
 80216dc:	9628      	str	r6, [sp, #160]	; 0xa0
 80216de:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80216e0:	442e      	add	r6, r5
 80216e2:	9627      	str	r6, [sp, #156]	; 0x9c
 80216e4:	f001 fe9c 	bl	8023420 <st_int8_to16_dual>
 80216e8:	e7e3      	b.n	80216b2 <st_sssa8_ch_convolve+0x6e2>
 80216ea:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80216ec:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80216ee:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80216f0:	440b      	add	r3, r1
 80216f2:	3201      	adds	r2, #1
 80216f4:	b29b      	uxth	r3, r3
 80216f6:	b212      	sxth	r2, r2
 80216f8:	932f      	str	r3, [sp, #188]	; 0xbc
 80216fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80216fc:	4614      	mov	r4, r2
 80216fe:	9230      	str	r2, [sp, #192]	; 0xc0
 8021700:	4293      	cmp	r3, r2
 8021702:	f73f ae4c 	bgt.w	802139e <st_sssa8_ch_convolve+0x3ce>
 8021706:	2000      	movs	r0, #0
 8021708:	b053      	add	sp, #332	; 0x14c
 802170a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802170e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021710:	2b00      	cmp	r3, #0
 8021712:	d0f8      	beq.n	8021706 <st_sssa8_ch_convolve+0x736>
 8021714:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021716:	2400      	movs	r4, #0
 8021718:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802171a:	005b      	lsls	r3, r3, #1
 802171c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 802171e:	fb00 f109 	mul.w	r1, r0, r9
 8021722:	fb00 f303 	mul.w	r3, r0, r3
 8021726:	9807      	ldr	r0, [sp, #28]
 8021728:	4252      	negs	r2, r2
 802172a:	9116      	str	r1, [sp, #88]	; 0x58
 802172c:	1a28      	subs	r0, r5, r0
 802172e:	941c      	str	r4, [sp, #112]	; 0x70
 8021730:	901d      	str	r0, [sp, #116]	; 0x74
 8021732:	fa0f f08b 	sxth.w	r0, fp
 8021736:	901e      	str	r0, [sp, #120]	; 0x78
 8021738:	9814      	ldr	r0, [sp, #80]	; 0x50
 802173a:	fb0a 0303 	mla	r3, sl, r3, r0
 802173e:	4683      	mov	fp, r0
 8021740:	9313      	str	r3, [sp, #76]	; 0x4c
 8021742:	004b      	lsls	r3, r1, #1
 8021744:	9307      	str	r3, [sp, #28]
 8021746:	b293      	uxth	r3, r2
 8021748:	9318      	str	r3, [sp, #96]	; 0x60
 802174a:	a83e      	add	r0, sp, #248	; 0xf8
 802174c:	f001 f99a 	bl	8022a84 <ai_padding_opt_phase1>
 8021750:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021752:	2b00      	cmp	r3, #0
 8021754:	d070      	beq.n	8021838 <st_sssa8_ch_convolve+0x868>
 8021756:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021758:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 802175a:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
 802175e:	1a99      	subs	r1, r3, r2
 8021760:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021762:	9012      	str	r0, [sp, #72]	; 0x48
 8021764:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8021766:	425a      	negs	r2, r3
 8021768:	2300      	movs	r3, #0
 802176a:	fb00 1104 	mla	r1, r0, r4, r1
 802176e:	b292      	uxth	r2, r2
 8021770:	9310      	str	r3, [sp, #64]	; 0x40
 8021772:	9108      	str	r1, [sp, #32]
 8021774:	4619      	mov	r1, r3
 8021776:	920a      	str	r2, [sp, #40]	; 0x28
 8021778:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 802177a:	2a00      	cmp	r2, #0
 802177c:	f040 8102 	bne.w	8021984 <st_sssa8_ch_convolve+0x9b4>
 8021780:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8021782:	2a00      	cmp	r2, #0
 8021784:	f040 8104 	bne.w	8021990 <st_sssa8_ch_convolve+0x9c0>
 8021788:	9a40      	ldr	r2, [sp, #256]	; 0x100
 802178a:	2001      	movs	r0, #1
 802178c:	3a01      	subs	r2, #1
 802178e:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 8021792:	9240      	str	r2, [sp, #256]	; 0x100
 8021794:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021796:	9a08      	ldr	r2, [sp, #32]
 8021798:	4293      	cmp	r3, r2
 802179a:	da3b      	bge.n	8021814 <st_sssa8_ch_convolve+0x844>
 802179c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802179e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80217a0:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80217a2:	fb01 2103 	mla	r1, r1, r3, r2
 80217a6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80217aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80217ac:	930e      	str	r3, [sp, #56]	; 0x38
 80217ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80217b0:	1a8d      	subs	r5, r1, r2
 80217b2:	461e      	mov	r6, r3
 80217b4:	461a      	mov	r2, r3
 80217b6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80217b8:	42a9      	cmp	r1, r5
 80217ba:	da25      	bge.n	8021808 <st_sssa8_ch_convolve+0x838>
 80217bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80217be:	460c      	mov	r4, r1
 80217c0:	9609      	str	r6, [sp, #36]	; 0x24
 80217c2:	468c      	mov	ip, r1
 80217c4:	4293      	cmp	r3, r2
 80217c6:	fb02 f208 	mul.w	r2, r2, r8
 80217ca:	bfcc      	ite	gt
 80217cc:	2300      	movgt	r3, #0
 80217ce:	2301      	movle	r3, #1
 80217d0:	920c      	str	r2, [sp, #48]	; 0x30
 80217d2:	ea43 73d6 	orr.w	r3, r3, r6, lsr #31
 80217d6:	461e      	mov	r6, r3
 80217d8:	45e0      	cmp	r8, ip
 80217da:	464a      	mov	r2, r9
 80217dc:	4659      	mov	r1, fp
 80217de:	4638      	mov	r0, r7
 80217e0:	bfcc      	ite	gt
 80217e2:	f04f 0e00 	movgt.w	lr, #0
 80217e6:	f04f 0e01 	movle.w	lr, #1
 80217ea:	ea5e 73d4 	orrs.w	r3, lr, r4, lsr #31
 80217ee:	d102      	bne.n	80217f6 <st_sssa8_ch_convolve+0x826>
 80217f0:	2e00      	cmp	r6, #0
 80217f2:	f000 80be 	beq.w	8021972 <st_sssa8_ch_convolve+0x9a2>
 80217f6:	f003 fc19 	bl	802502c <st_dsp_arm_fill_q15>
 80217fa:	3401      	adds	r4, #1
 80217fc:	44d3      	add	fp, sl
 80217fe:	b224      	sxth	r4, r4
 8021800:	42ac      	cmp	r4, r5
 8021802:	46a4      	mov	ip, r4
 8021804:	dbe8      	blt.n	80217d8 <st_sssa8_ch_convolve+0x808>
 8021806:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8021808:	3601      	adds	r6, #1
 802180a:	9b08      	ldr	r3, [sp, #32]
 802180c:	b236      	sxth	r6, r6
 802180e:	429e      	cmp	r6, r3
 8021810:	4632      	mov	r2, r6
 8021812:	dbd0      	blt.n	80217b6 <st_sssa8_ch_convolve+0x7e6>
 8021814:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021816:	455b      	cmp	r3, fp
 8021818:	f000 80ea 	beq.w	80219f0 <st_sssa8_ch_convolve+0xa20>
 802181c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802181e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021820:	9910      	ldr	r1, [sp, #64]	; 0x40
 8021822:	4403      	add	r3, r0
 8021824:	3101      	adds	r1, #1
 8021826:	461a      	mov	r2, r3
 8021828:	b20b      	sxth	r3, r1
 802182a:	b292      	uxth	r2, r2
 802182c:	9310      	str	r3, [sp, #64]	; 0x40
 802182e:	4619      	mov	r1, r3
 8021830:	920a      	str	r2, [sp, #40]	; 0x28
 8021832:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021834:	429a      	cmp	r2, r3
 8021836:	dc9f      	bgt.n	8021778 <st_sssa8_ch_convolve+0x7a8>
 8021838:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802183a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802183c:	991c      	ldr	r1, [sp, #112]	; 0x70
 802183e:	4403      	add	r3, r0
 8021840:	3101      	adds	r1, #1
 8021842:	461a      	mov	r2, r3
 8021844:	b20b      	sxth	r3, r1
 8021846:	b292      	uxth	r2, r2
 8021848:	931c      	str	r3, [sp, #112]	; 0x70
 802184a:	461c      	mov	r4, r3
 802184c:	9218      	str	r2, [sp, #96]	; 0x60
 802184e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8021850:	429a      	cmp	r2, r3
 8021852:	f73f af7a 	bgt.w	802174a <st_sssa8_ch_convolve+0x77a>
 8021856:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021858:	455a      	cmp	r2, fp
 802185a:	f43f af54 	beq.w	8021706 <st_sssa8_ch_convolve+0x736>
 802185e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8021860:	2900      	cmp	r1, #0
 8021862:	f43f af50 	beq.w	8021706 <st_sssa8_ch_convolve+0x736>
 8021866:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021868:	981a      	ldr	r0, [sp, #104]	; 0x68
 802186a:	1f1d      	subs	r5, r3, #4
 802186c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802186e:	ea4f 0a90 	mov.w	sl, r0, lsr #2
 8021872:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8021874:	1e9e      	subs	r6, r3, #2
 8021876:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8021878:	f1a4 0b04 	sub.w	fp, r4, #4
 802187c:	9c69      	ldr	r4, [sp, #420]	; 0x1a4
 802187e:	f1a3 0904 	sub.w	r9, r3, #4
 8021882:	f10a 33ff 	add.w	r3, sl, #4294967295
 8021886:	4421      	add	r1, r4
 8021888:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 802188c:	b29b      	uxth	r3, r3
 802188e:	f000 0803 	and.w	r8, r0, #3
 8021892:	9108      	str	r1, [sp, #32]
 8021894:	3301      	adds	r3, #1
 8021896:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 8021a90 <st_sssa8_ch_convolve+0xac0>
 802189a:	9f5c      	ldr	r7, [sp, #368]	; 0x170
 802189c:	0099      	lsls	r1, r3, #2
 802189e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80218a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80218a4:	9109      	str	r1, [sp, #36]	; 0x24
 80218a6:	9307      	str	r3, [sp, #28]
 80218a8:	f855 3f04 	ldr.w	r3, [r5, #4]!
 80218ac:	2a00      	cmp	r2, #0
 80218ae:	d05e      	beq.n	802196e <st_sssa8_ch_convolve+0x99e>
 80218b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80218b2:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 80218b6:	eb07 0a02 	add.w	sl, r7, r2
 80218ba:	f857 2b04 	ldr.w	r2, [r7], #4
 80218be:	fa2f f482 	sxtb16	r4, r2
 80218c2:	b2a0      	uxth	r0, r4
 80218c4:	f8de 1000 	ldr.w	r1, [lr]
 80218c8:	ea4f 2232 	mov.w	r2, r2, ror #8
 80218cc:	fa2f f282 	sxtb16	r2, r2
 80218d0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80218d4:	fb20 3101 	smlad	r1, r0, r1, r3
 80218d8:	ea02 030c 	and.w	r3, r2, ip
 80218dc:	f10e 0e08 	add.w	lr, lr, #8
 80218e0:	f85e 2c04 	ldr.w	r2, [lr, #-4]
 80218e4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80218e8:	fb23 1302 	smlad	r3, r3, r2, r1
 80218ec:	4557      	cmp	r7, sl
 80218ee:	d1e4      	bne.n	80218ba <st_sssa8_ch_convolve+0x8ea>
 80218f0:	9a07      	ldr	r2, [sp, #28]
 80218f2:	f1b8 0f00 	cmp.w	r8, #0
 80218f6:	d017      	beq.n	8021928 <st_sssa8_ch_convolve+0x958>
 80218f8:	f997 1000 	ldrsb.w	r1, [r7]
 80218fc:	f1b8 0f01 	cmp.w	r8, #1
 8021900:	8810      	ldrh	r0, [r2, #0]
 8021902:	fb10 3301 	smlabb	r3, r0, r1, r3
 8021906:	f000 80ab 	beq.w	8021a60 <st_sssa8_ch_convolve+0xa90>
 802190a:	f997 1001 	ldrsb.w	r1, [r7, #1]
 802190e:	f1b8 0f02 	cmp.w	r8, #2
 8021912:	8850      	ldrh	r0, [r2, #2]
 8021914:	fb10 3301 	smlabb	r3, r0, r1, r3
 8021918:	f000 80b7 	beq.w	8021a8a <st_sssa8_ch_convolve+0xaba>
 802191c:	8891      	ldrh	r1, [r2, #4]
 802191e:	3703      	adds	r7, #3
 8021920:	f917 2c01 	ldrsb.w	r2, [r7, #-1]
 8021924:	fb11 3302 	smlabb	r3, r1, r2, r3
 8021928:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 802192a:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
 802192e:	3201      	adds	r2, #1
 8021930:	f859 4f04 	ldr.w	r4, [r9, #4]!
 8021934:	2915      	cmp	r1, #21
 8021936:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 802193a:	9269      	str	r2, [sp, #420]	; 0x1a4
 802193c:	dd7a      	ble.n	8021a34 <st_sssa8_ch_convolve+0xa64>
 802193e:	1e8a      	subs	r2, r1, #2
 8021940:	f04f 0e01 	mov.w	lr, #1
 8021944:	3901      	subs	r1, #1
 8021946:	fa0e f202 	lsl.w	r2, lr, r2
 802194a:	fb53 2304 	smmla	r3, r3, r4, r2
 802194e:	410b      	asrs	r3, r1
 8021950:	4403      	add	r3, r0
 8021952:	f303 0307 	ssat	r3, #8, r3
 8021956:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 8021958:	f802 3c01 	strb.w	r3, [r2, #-1]
 802195c:	9b08      	ldr	r3, [sp, #32]
 802195e:	4293      	cmp	r3, r2
 8021960:	f43f aed1 	beq.w	8021706 <st_sssa8_ch_convolve+0x736>
 8021964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021966:	f855 3f04 	ldr.w	r3, [r5, #4]!
 802196a:	2a00      	cmp	r2, #0
 802196c:	d1a0      	bne.n	80218b0 <st_sssa8_ch_convolve+0x8e0>
 802196e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021970:	e7bf      	b.n	80218f2 <st_sssa8_ch_convolve+0x922>
 8021972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021974:	eb03 000c 	add.w	r0, r3, ip
 8021978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802197a:	fb09 3000 	mla	r0, r9, r0, r3
 802197e:	f001 fcad 	bl	80232dc <st_int8_to16_no_shift>
 8021982:	e73a      	b.n	80217fa <st_sssa8_ch_convolve+0x82a>
 8021984:	3a01      	subs	r2, #1
 8021986:	2001      	movs	r0, #1
 8021988:	923e      	str	r2, [sp, #248]	; 0xf8
 802198a:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 802198e:	e701      	b.n	8021794 <st_sssa8_ch_convolve+0x7c4>
 8021990:	f8bd 011c 	ldrh.w	r0, [sp, #284]	; 0x11c
 8021994:	3a01      	subs	r2, #1
 8021996:	2801      	cmp	r0, #1
 8021998:	923f      	str	r2, [sp, #252]	; 0xfc
 802199a:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 802199e:	f43f aef9 	beq.w	8021794 <st_sssa8_ch_convolve+0x7c4>
 80219a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80219a4:	9f08      	ldr	r7, [sp, #32]
 80219a6:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
 80219aa:	42bb      	cmp	r3, r7
 80219ac:	f6bf af32 	bge.w	8021814 <st_sssa8_ch_convolve+0x844>
 80219b0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80219b4:	461d      	mov	r5, r3
 80219b6:	46ca      	mov	sl, r9
 80219b8:	4618      	mov	r0, r3
 80219ba:	46c1      	mov	r9, r8
 80219bc:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80219be:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80219c2:	3501      	adds	r5, #1
 80219c4:	fb00 4009 	mla	r0, r0, r9, r4
 80219c8:	9b07      	ldr	r3, [sp, #28]
 80219ca:	4659      	mov	r1, fp
 80219cc:	b22d      	sxth	r5, r5
 80219ce:	fb0a 8000 	mla	r0, sl, r0, r8
 80219d2:	4632      	mov	r2, r6
 80219d4:	449b      	add	fp, r3
 80219d6:	f001 fc81 	bl	80232dc <st_int8_to16_no_shift>
 80219da:	42bd      	cmp	r5, r7
 80219dc:	4628      	mov	r0, r5
 80219de:	dbf0      	blt.n	80219c2 <st_sssa8_ch_convolve+0x9f2>
 80219e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80219e2:	46c8      	mov	r8, r9
 80219e4:	46d1      	mov	r9, sl
 80219e6:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80219ea:	455b      	cmp	r3, fp
 80219ec:	f47f af16 	bne.w	802181c <st_sssa8_ch_convolve+0x84c>
 80219f0:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
 80219f2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80219f4:	9965      	ldr	r1, [sp, #404]	; 0x194
 80219f6:	9821      	ldr	r0, [sp, #132]	; 0x84
 80219f8:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80219fa:	9304      	str	r3, [sp, #16]
 80219fc:	9203      	str	r2, [sp, #12]
 80219fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021a00:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8021a02:	9102      	str	r1, [sp, #8]
 8021a04:	9001      	str	r0, [sp, #4]
 8021a06:	9914      	ldr	r1, [sp, #80]	; 0x50
 8021a08:	985c      	ldr	r0, [sp, #368]	; 0x170
 8021a0a:	9400      	str	r4, [sp, #0]
 8021a0c:	f001 f882 	bl	8022b14 <st_sssa8_ch_nn_mat_mult_kernel>
 8021a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021a12:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021a14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021a16:	440b      	add	r3, r1
 8021a18:	9069      	str	r0, [sp, #420]	; 0x1a4
 8021a1a:	3201      	adds	r2, #1
 8021a1c:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 8021a20:	b29b      	uxth	r3, r3
 8021a22:	b212      	sxth	r2, r2
 8021a24:	930a      	str	r3, [sp, #40]	; 0x28
 8021a26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021a28:	4611      	mov	r1, r2
 8021a2a:	9210      	str	r2, [sp, #64]	; 0x40
 8021a2c:	4293      	cmp	r3, r2
 8021a2e:	f73f aea3 	bgt.w	8021778 <st_sssa8_ch_convolve+0x7a8>
 8021a32:	e701      	b.n	8021838 <st_sssa8_ch_convolve+0x868>
 8021a34:	2900      	cmp	r1, #0
 8021a36:	dd15      	ble.n	8021a64 <st_sssa8_ch_convolve+0xa94>
 8021a38:	005b      	lsls	r3, r3, #1
 8021a3a:	fb53 0304 	smmla	r3, r3, r4, r0
 8021a3e:	fa43 f101 	asr.w	r1, r3, r1
 8021a42:	f301 0307 	ssat	r3, #8, r1
 8021a46:	f802 3c01 	strb.w	r3, [r2, #-1]
 8021a4a:	e787      	b.n	802195c <st_sssa8_ch_convolve+0x98c>
 8021a4c:	4611      	mov	r1, r2
 8021a4e:	985c      	ldr	r0, [sp, #368]	; 0x170
 8021a50:	e9dd 3219 	ldrd	r3, r2, [sp, #100]	; 0x64
 8021a54:	f001 fce4 	bl	8023420 <st_int8_to16_dual>
 8021a58:	2301      	movs	r3, #1
 8021a5a:	932e      	str	r3, [sp, #184]	; 0xb8
 8021a5c:	f7ff bb46 	b.w	80210ec <st_sssa8_ch_convolve+0x11c>
 8021a60:	3701      	adds	r7, #1
 8021a62:	e761      	b.n	8021928 <st_sssa8_ch_convolve+0x958>
 8021a64:	f1c1 0101 	rsb	r1, r1, #1
 8021a68:	408b      	lsls	r3, r1
 8021a6a:	f303 031f 	ssat	r3, #32, r3
 8021a6e:	fb53 f314 	smmulr	r3, r3, r4
 8021a72:	4403      	add	r3, r0
 8021a74:	f303 0307 	ssat	r3, #8, r3
 8021a78:	f802 3c01 	strb.w	r3, [r2, #-1]
 8021a7c:	e76e      	b.n	802195c <st_sssa8_ch_convolve+0x98c>
 8021a7e:	4615      	mov	r5, r2
 8021a80:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
 8021a84:	463e      	mov	r6, r7
 8021a86:	f7ff baff 	b.w	8021088 <st_sssa8_ch_convolve+0xb8>
 8021a8a:	3702      	adds	r7, #2
 8021a8c:	e74c      	b.n	8021928 <st_sssa8_ch_convolve+0x958>
 8021a8e:	bf00      	nop
 8021a90:	ffff0000 	.word	0xffff0000

08021a94 <st_sssa8_ch_convolve_rgb>:
 8021a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a98:	b0cb      	sub	sp, #300	; 0x12c
 8021a9a:	468b      	mov	fp, r1
 8021a9c:	2a03      	cmp	r2, #3
 8021a9e:	931f      	str	r3, [sp, #124]	; 0x7c
 8021aa0:	f8bd 3158 	ldrh.w	r3, [sp, #344]	; 0x158
 8021aa4:	f8bd 1150 	ldrh.w	r1, [sp, #336]	; 0x150
 8021aa8:	9310      	str	r3, [sp, #64]	; 0x40
 8021aaa:	f8bd 315c 	ldrh.w	r3, [sp, #348]	; 0x15c
 8021aae:	f8bd 4154 	ldrh.w	r4, [sp, #340]	; 0x154
 8021ab2:	930a      	str	r3, [sp, #40]	; 0x28
 8021ab4:	f99d 316c 	ldrsb.w	r3, [sp, #364]	; 0x16c
 8021ab8:	9115      	str	r1, [sp, #84]	; 0x54
 8021aba:	931d      	str	r3, [sp, #116]	; 0x74
 8021abc:	f8bd 3178 	ldrh.w	r3, [sp, #376]	; 0x178
 8021ac0:	940f      	str	r4, [sp, #60]	; 0x3c
 8021ac2:	930e      	str	r3, [sp, #56]	; 0x38
 8021ac4:	9d5a      	ldr	r5, [sp, #360]	; 0x168
 8021ac6:	f99d e170 	ldrsb.w	lr, [sp, #368]	; 0x170
 8021aca:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
 8021acc:	f040 83ed 	bne.w	80222aa <st_sssa8_ch_convolve_rgb+0x816>
 8021ad0:	4606      	mov	r6, r0
 8021ad2:	4608      	mov	r0, r1
 8021ad4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8021ad8:	ebc0 7240 	rsb	r2, r0, r0, lsl #29
 8021adc:	eb03 0741 	add.w	r7, r3, r1, lsl #1
 8021ae0:	fb14 f304 	smulbb	r3, r4, r4
 8021ae4:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8021ae8:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8021aec:	9711      	str	r7, [sp, #68]	; 0x44
 8021aee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021af2:	9221      	str	r2, [sp, #132]	; 0x84
 8021af4:	4442      	add	r2, r8
 8021af6:	b29b      	uxth	r3, r3
 8021af8:	9222      	str	r2, [sp, #136]	; 0x88
 8021afa:	9316      	str	r3, [sp, #88]	; 0x58
 8021afc:	2800      	cmp	r0, #0
 8021afe:	f000 83d1 	beq.w	80222a4 <st_sssa8_ch_convolve_rgb+0x810>
 8021b02:	0047      	lsls	r7, r0, #1
 8021b04:	4629      	mov	r1, r5
 8021b06:	1f14      	subs	r4, r2, #4
 8021b08:	f04f 0c01 	mov.w	ip, #1
 8021b0c:	443d      	add	r5, r7
 8021b0e:	f931 3b02 	ldrsh.w	r3, [r1], #2
 8021b12:	1e5a      	subs	r2, r3, #1
 8021b14:	fa0c f003 	lsl.w	r0, ip, r3
 8021b18:	fa0e f303 	lsl.w	r3, lr, r3
 8021b1c:	b292      	uxth	r2, r2
 8021b1e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8021b22:	2a14      	cmp	r2, #20
 8021b24:	f200 81e4 	bhi.w	8021ef0 <st_sssa8_ch_convolve_rgb+0x45c>
 8021b28:	428d      	cmp	r5, r1
 8021b2a:	f844 3f04 	str.w	r3, [r4, #4]!
 8021b2e:	d1ee      	bne.n	8021b0e <st_sssa8_ch_convolve_rgb+0x7a>
 8021b30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021b32:	eb03 0408 	add.w	r4, r3, r8
 8021b36:	1bed      	subs	r5, r5, r7
 8021b38:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8021b3a:	a932      	add	r1, sp, #200	; 0xc8
 8021b3c:	ab2e      	add	r3, sp, #184	; 0xb8
 8021b3e:	9523      	str	r5, [sp, #140]	; 0x8c
 8021b40:	aa2a      	add	r2, sp, #168	; 0xa8
 8021b42:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021b44:	a836      	add	r0, sp, #216	; 0xd8
 8021b46:	9744      	str	r7, [sp, #272]	; 0x110
 8021b48:	9745      	str	r7, [sp, #276]	; 0x114
 8021b4a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021b4c:	9100      	str	r1, [sp, #0]
 8021b4e:	a940      	add	r1, sp, #256	; 0x100
 8021b50:	9742      	str	r7, [sp, #264]	; 0x108
 8021b52:	9743      	str	r7, [sp, #268]	; 0x10c
 8021b54:	e9cd 552f 	strd	r5, r5, [sp, #188]	; 0xbc
 8021b58:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021b5a:	e9cd bb2b 	strd	fp, fp, [sp, #172]	; 0xac
 8021b5e:	e9cd 5533 	strd	r5, r5, [sp, #204]	; 0xcc
 8021b62:	f000 ff35 	bl	80229d0 <ai_padding_opt_init>
 8021b66:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021b68:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8021b6c:	e9dd 2015 	ldrd	r2, r0, [sp, #84]	; 0x54
 8021b70:	005b      	lsls	r3, r3, #1
 8021b72:	fb02 f200 	mul.w	r2, r2, r0
 8021b76:	fb05 f303 	mul.w	r3, r5, r3
 8021b7a:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 8021b7e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8021b82:	930d      	str	r3, [sp, #52]	; 0x34
 8021b84:	f340 8384 	ble.w	8022290 <st_sssa8_ch_convolve_rgb+0x7fc>
 8021b88:	2300      	movs	r3, #0
 8021b8a:	4602      	mov	r2, r0
 8021b8c:	9328      	str	r3, [sp, #160]	; 0xa0
 8021b8e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8021b92:	fb93 f3f2 	sdiv	r3, r3, r2
 8021b96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8021b98:	f023 0301 	bic.w	r3, r3, #1
 8021b9c:	4293      	cmp	r3, r2
 8021b9e:	bf28      	it	cs
 8021ba0:	4613      	movcs	r3, r2
 8021ba2:	2b01      	cmp	r3, #1
 8021ba4:	9324      	str	r3, [sp, #144]	; 0x90
 8021ba6:	f240 81ae 	bls.w	8021f06 <st_sssa8_ch_convolve_rgb+0x472>
 8021baa:	9924      	ldr	r1, [sp, #144]	; 0x90
 8021bac:	4613      	mov	r3, r2
 8021bae:	fbb2 f2f1 	udiv	r2, r2, r1
 8021bb2:	fb01 3312 	mls	r3, r1, r2, r3
 8021bb6:	b292      	uxth	r2, r2
 8021bb8:	b29b      	uxth	r3, r3
 8021bba:	9229      	str	r2, [sp, #164]	; 0xa4
 8021bbc:	2b00      	cmp	r3, #0
 8021bbe:	f040 819d 	bne.w	8021efc <st_sssa8_ch_convolve_rgb+0x468>
 8021bc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021bc4:	2b00      	cmp	r3, #0
 8021bc6:	f000 818b 	beq.w	8021ee0 <st_sssa8_ch_convolve_rgb+0x44c>
 8021bca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021bcc:	2500      	movs	r5, #0
 8021bce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021bd0:	4253      	negs	r3, r2
 8021bd2:	4f99      	ldr	r7, [pc, #612]	; (8021e38 <st_sssa8_ch_convolve_rgb+0x3a4>)
 8021bd4:	1a8a      	subs	r2, r1, r2
 8021bd6:	9527      	str	r5, [sp, #156]	; 0x9c
 8021bd8:	b29b      	uxth	r3, r3
 8021bda:	9226      	str	r2, [sp, #152]	; 0x98
 8021bdc:	931e      	str	r3, [sp, #120]	; 0x78
 8021bde:	9325      	str	r3, [sp, #148]	; 0x94
 8021be0:	a836      	add	r0, sp, #216	; 0xd8
 8021be2:	f000 ff4f 	bl	8022a84 <ai_padding_opt_phase1>
 8021be6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021be8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021bea:	fb05 f303 	mul.w	r3, r5, r3
 8021bee:	995d      	ldr	r1, [sp, #372]	; 0x174
 8021bf0:	fb02 1303 	mla	r3, r2, r3, r1
 8021bf4:	9314      	str	r3, [sp, #80]	; 0x50
 8021bf6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021bf8:	b92b      	cbnz	r3, 8021c06 <st_sssa8_ch_convolve_rgb+0x172>
 8021bfa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021bfc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8021bfe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8021c00:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8021c02:	f001 fc0d 	bl	8023420 <st_int8_to16_dual>
 8021c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021c08:	46d9      	mov	r9, fp
 8021c0a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8021c0c:	46b2      	mov	sl, r6
 8021c0e:	fb03 2505 	mla	r5, r3, r5, r2
 8021c12:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8021c16:	930b      	str	r3, [sp, #44]	; 0x2c
 8021c18:	46ab      	mov	fp, r5
 8021c1a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021c1c:	9317      	str	r3, [sp, #92]	; 0x5c
 8021c1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021c20:	931c      	str	r3, [sp, #112]	; 0x70
 8021c22:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021c24:	9312      	str	r3, [sp, #72]	; 0x48
 8021c26:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021c28:	9320      	str	r3, [sp, #128]	; 0x80
 8021c2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021c2c:	931b      	str	r3, [sp, #108]	; 0x6c
 8021c2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021c30:	931a      	str	r3, [sp, #104]	; 0x68
 8021c32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021c34:	9318      	str	r3, [sp, #96]	; 0x60
 8021c36:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8021c38:	9319      	str	r3, [sp, #100]	; 0x64
 8021c3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021c3c:	1e5a      	subs	r2, r3, #1
 8021c3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021c42:	b292      	uxth	r2, r2
 8021c44:	429a      	cmp	r2, r3
 8021c46:	9217      	str	r2, [sp, #92]	; 0x5c
 8021c48:	f000 813a 	beq.w	8021ec0 <st_sssa8_ch_convolve_rgb+0x42c>
 8021c4c:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8021c4e:	2600      	movs	r6, #0
 8021c50:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021c52:	9238      	str	r2, [sp, #224]	; 0xe0
 8021c54:	464a      	mov	r2, r9
 8021c56:	9306      	str	r3, [sp, #24]
 8021c58:	46d9      	mov	r9, fp
 8021c5a:	9609      	str	r6, [sp, #36]	; 0x24
 8021c5c:	4693      	mov	fp, r2
 8021c5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021c60:	e9dd 0139 	ldrd	r0, r1, [sp, #228]	; 0xe4
 8021c64:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 8021c68:	9914      	ldr	r1, [sp, #80]	; 0x50
 8021c6a:	9113      	str	r1, [sp, #76]	; 0x4c
 8021c6c:	2800      	cmp	r0, #0
 8021c6e:	d17b      	bne.n	8021d68 <st_sssa8_ch_convolve_rgb+0x2d4>
 8021c70:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8021c72:	2a00      	cmp	r2, #0
 8021c74:	d17e      	bne.n	8021d74 <st_sssa8_ch_convolve_rgb+0x2e0>
 8021c76:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8021c78:	2101      	movs	r1, #1
 8021c7a:	3a01      	subs	r2, #1
 8021c7c:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 8021c80:	9238      	str	r2, [sp, #224]	; 0xe0
 8021c82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021c84:	4591      	cmp	r9, r2
 8021c86:	dd5c      	ble.n	8021d42 <st_sssa8_ch_convolve_rgb+0x2ae>
 8021c88:	4610      	mov	r0, r2
 8021c8a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021c8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021c8e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021c90:	4686      	mov	lr, r0
 8021c92:	fb06 1102 	mla	r1, r6, r2, r1
 8021c96:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8021c9a:	f8cd 9020 	str.w	r9, [sp, #32]
 8021c9e:	1b09      	subs	r1, r1, r4
 8021ca0:	4691      	mov	r9, r2
 8021ca2:	f9bd 4074 	ldrsh.w	r4, [sp, #116]	; 0x74
 8021ca6:	468c      	mov	ip, r1
 8021ca8:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8021cac:	45cc      	cmp	ip, r9
 8021cae:	dd3d      	ble.n	8021d2c <st_sssa8_ch_convolve_rgb+0x298>
 8021cb0:	fb00 f20b 	mul.w	r2, r0, fp
 8021cb4:	ea4f 71de 	mov.w	r1, lr, lsr #31
 8021cb8:	4698      	mov	r8, r3
 8021cba:	9207      	str	r2, [sp, #28]
 8021cbc:	4583      	cmp	fp, r0
 8021cbe:	bfd8      	it	le
 8021cc0:	f041 0101 	orrle.w	r1, r1, #1
 8021cc4:	464a      	mov	r2, r9
 8021cc6:	4648      	mov	r0, r9
 8021cc8:	4583      	cmp	fp, r0
 8021cca:	f102 0601 	add.w	r6, r2, #1
 8021cce:	f103 0306 	add.w	r3, r3, #6
 8021cd2:	bfcc      	ite	gt
 8021cd4:	2500      	movgt	r5, #0
 8021cd6:	2501      	movle	r5, #1
 8021cd8:	ea55 75d2 	orrs.w	r5, r5, r2, lsr #31
 8021cdc:	d100      	bne.n	8021ce0 <st_sssa8_ch_convolve_rgb+0x24c>
 8021cde:	b159      	cbz	r1, 8021cf8 <st_sssa8_ch_convolve_rgb+0x264>
 8021ce0:	b232      	sxth	r2, r6
 8021ce2:	f823 4c04 	strh.w	r4, [r3, #-4]
 8021ce6:	f823 4c02 	strh.w	r4, [r3, #-2]
 8021cea:	4562      	cmp	r2, ip
 8021cec:	f823 4c06 	strh.w	r4, [r3, #-6]
 8021cf0:	4610      	mov	r0, r2
 8021cf2:	da1b      	bge.n	8021d2c <st_sssa8_ch_convolve_rgb+0x298>
 8021cf4:	4698      	mov	r8, r3
 8021cf6:	e7e7      	b.n	8021cc8 <st_sssa8_ch_convolve_rgb+0x234>
 8021cf8:	9d07      	ldr	r5, [sp, #28]
 8021cfa:	3201      	adds	r2, #1
 8021cfc:	4428      	add	r0, r5
 8021cfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021d00:	b212      	sxth	r2, r2
 8021d02:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021d06:	4562      	cmp	r2, ip
 8021d08:	5828      	ldr	r0, [r5, r0]
 8021d0a:	fa2f f680 	sxtb16	r6, r0
 8021d0e:	ea4f 2530 	mov.w	r5, r0, ror #8
 8021d12:	ea06 0a07 	and.w	sl, r6, r7
 8021d16:	fa2f f585 	sxtb16	r5, r5
 8021d1a:	b2ad      	uxth	r5, r5
 8021d1c:	4610      	mov	r0, r2
 8021d1e:	ea45 050a 	orr.w	r5, r5, sl
 8021d22:	f8c8 5002 	str.w	r5, [r8, #2]
 8021d26:	f823 6c06 	strh.w	r6, [r3, #-6]
 8021d2a:	dbe3      	blt.n	8021cf4 <st_sssa8_ch_convolve_rgb+0x260>
 8021d2c:	f10e 0e01 	add.w	lr, lr, #1
 8021d30:	9a08      	ldr	r2, [sp, #32]
 8021d32:	fa0f fe8e 	sxth.w	lr, lr
 8021d36:	4596      	cmp	lr, r2
 8021d38:	4670      	mov	r0, lr
 8021d3a:	dbb7      	blt.n	8021cac <st_sssa8_ch_convolve_rgb+0x218>
 8021d3c:	4691      	mov	r9, r2
 8021d3e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8021d42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021d44:	429a      	cmp	r2, r3
 8021d46:	d055      	beq.n	8021df4 <st_sssa8_ch_convolve_rgb+0x360>
 8021d48:	9a06      	ldr	r2, [sp, #24]
 8021d4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021d4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021d4e:	4402      	add	r2, r0
 8021d50:	3101      	adds	r1, #1
 8021d52:	b292      	uxth	r2, r2
 8021d54:	b209      	sxth	r1, r1
 8021d56:	9206      	str	r2, [sp, #24]
 8021d58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021d5a:	460e      	mov	r6, r1
 8021d5c:	9109      	str	r1, [sp, #36]	; 0x24
 8021d5e:	428a      	cmp	r2, r1
 8021d60:	dd6c      	ble.n	8021e3c <st_sssa8_ch_convolve_rgb+0x3a8>
 8021d62:	9836      	ldr	r0, [sp, #216]	; 0xd8
 8021d64:	2800      	cmp	r0, #0
 8021d66:	d083      	beq.n	8021c70 <st_sssa8_ch_convolve_rgb+0x1dc>
 8021d68:	3801      	subs	r0, #1
 8021d6a:	2201      	movs	r2, #1
 8021d6c:	9036      	str	r0, [sp, #216]	; 0xd8
 8021d6e:	f8ad 20fe 	strh.w	r2, [sp, #254]	; 0xfe
 8021d72:	e786      	b.n	8021c82 <st_sssa8_ch_convolve_rgb+0x1ee>
 8021d74:	f8bd 10fc 	ldrh.w	r1, [sp, #252]	; 0xfc
 8021d78:	3a01      	subs	r2, #1
 8021d7a:	2901      	cmp	r1, #1
 8021d7c:	9237      	str	r2, [sp, #220]	; 0xdc
 8021d7e:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 8021d82:	f43f af7e 	beq.w	8021c82 <st_sssa8_ch_convolve_rgb+0x1ee>
 8021d86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021d88:	4591      	cmp	r9, r2
 8021d8a:	ddda      	ble.n	8021d42 <st_sssa8_ch_convolve_rgb+0x2ae>
 8021d8c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021d8e:	4694      	mov	ip, r2
 8021d90:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021d92:	4615      	mov	r5, r2
 8021d94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021d96:	fb06 0601 	mla	r6, r6, r1, r0
 8021d9a:	f9bd e018 	ldrsh.w	lr, [sp, #24]
 8021d9e:	1ab6      	subs	r6, r6, r2
 8021da0:	4576      	cmp	r6, lr
 8021da2:	dd1d      	ble.n	8021de0 <st_sssa8_ch_convolve_rgb+0x34c>
 8021da4:	fb05 f40b 	mul.w	r4, r5, fp
 8021da8:	4670      	mov	r0, lr
 8021daa:	4675      	mov	r5, lr
 8021dac:	4425      	add	r5, r4
 8021dae:	3001      	adds	r0, #1
 8021db0:	3306      	adds	r3, #6
 8021db2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021db6:	b200      	sxth	r0, r0
 8021db8:	f85a 2005 	ldr.w	r2, [sl, r5]
 8021dbc:	fa2f f182 	sxtb16	r1, r2
 8021dc0:	ea4f 2232 	mov.w	r2, r2, ror #8
 8021dc4:	ea01 0807 	and.w	r8, r1, r7
 8021dc8:	fa2f f282 	sxtb16	r2, r2
 8021dcc:	b292      	uxth	r2, r2
 8021dce:	42b0      	cmp	r0, r6
 8021dd0:	f823 1c06 	strh.w	r1, [r3, #-6]
 8021dd4:	4605      	mov	r5, r0
 8021dd6:	ea42 0208 	orr.w	r2, r2, r8
 8021dda:	f843 2c04 	str.w	r2, [r3, #-4]
 8021dde:	dbe5      	blt.n	8021dac <st_sssa8_ch_convolve_rgb+0x318>
 8021de0:	f10c 0c01 	add.w	ip, ip, #1
 8021de4:	fa0f fc8c 	sxth.w	ip, ip
 8021de8:	45cc      	cmp	ip, r9
 8021dea:	4665      	mov	r5, ip
 8021dec:	dbd8      	blt.n	8021da0 <st_sssa8_ch_convolve_rgb+0x30c>
 8021dee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021df0:	429a      	cmp	r2, r3
 8021df2:	d1a9      	bne.n	8021d48 <st_sssa8_ch_convolve_rgb+0x2b4>
 8021df4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8021df6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021df8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021dfa:	9818      	ldr	r0, [sp, #96]	; 0x60
 8021dfc:	9204      	str	r2, [sp, #16]
 8021dfe:	9401      	str	r4, [sp, #4]
 8021e00:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021e02:	9305      	str	r3, [sp, #20]
 8021e04:	9002      	str	r0, [sp, #8]
 8021e06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021e08:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021e0a:	9400      	str	r4, [sp, #0]
 8021e0c:	e9dd 1219 	ldrd	r1, r2, [sp, #100]	; 0x64
 8021e10:	9103      	str	r1, [sp, #12]
 8021e12:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021e14:	f002 fac0 	bl	8024398 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8021e18:	9b06      	ldr	r3, [sp, #24]
 8021e1a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021e1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021e1e:	440b      	add	r3, r1
 8021e20:	9013      	str	r0, [sp, #76]	; 0x4c
 8021e22:	3201      	adds	r2, #1
 8021e24:	b29b      	uxth	r3, r3
 8021e26:	b212      	sxth	r2, r2
 8021e28:	9306      	str	r3, [sp, #24]
 8021e2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021e2c:	4616      	mov	r6, r2
 8021e2e:	9209      	str	r2, [sp, #36]	; 0x24
 8021e30:	4293      	cmp	r3, r2
 8021e32:	dd59      	ble.n	8021ee8 <st_sssa8_ch_convolve_rgb+0x454>
 8021e34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021e36:	e794      	b.n	8021d62 <st_sssa8_ch_convolve_rgb+0x2ce>
 8021e38:	ffff0000 	.word	0xffff0000
 8021e3c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021e3e:	465a      	mov	r2, fp
 8021e40:	46cb      	mov	fp, r9
 8021e42:	4299      	cmp	r1, r3
 8021e44:	4691      	mov	r9, r2
 8021e46:	d010      	beq.n	8021e6a <st_sssa8_ch_convolve_rgb+0x3d6>
 8021e48:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8021e4a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021e4c:	9204      	str	r2, [sp, #16]
 8021e4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021e50:	9401      	str	r4, [sp, #4]
 8021e52:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021e54:	9305      	str	r3, [sp, #20]
 8021e56:	9400      	str	r4, [sp, #0]
 8021e58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021e5a:	e9dd 0219 	ldrd	r0, r2, [sp, #100]	; 0x64
 8021e5e:	9003      	str	r0, [sp, #12]
 8021e60:	9818      	ldr	r0, [sp, #96]	; 0x60
 8021e62:	9002      	str	r0, [sp, #8]
 8021e64:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021e66:	f002 fdb1 	bl	80249cc <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8021e6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021e6c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021e6e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8021e70:	1a9b      	subs	r3, r3, r2
 8021e72:	4608      	mov	r0, r1
 8021e74:	b29b      	uxth	r3, r3
 8021e76:	4410      	add	r0, r2
 8021e78:	429a      	cmp	r2, r3
 8021e7a:	931c      	str	r3, [sp, #112]	; 0x70
 8021e7c:	9014      	str	r0, [sp, #80]	; 0x50
 8021e7e:	bf28      	it	cs
 8021e80:	461a      	movcs	r2, r3
 8021e82:	4614      	mov	r4, r2
 8021e84:	b90a      	cbnz	r2, 8021e8a <st_sssa8_ch_convolve_rgb+0x3f6>
 8021e86:	9412      	str	r4, [sp, #72]	; 0x48
 8021e88:	e6d7      	b.n	8021c3a <st_sssa8_ch_convolve_rgb+0x1a6>
 8021e8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021e8c:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8021e8e:	4619      	mov	r1, r3
 8021e90:	009d      	lsls	r5, r3, #2
 8021e92:	9820      	ldr	r0, [sp, #128]	; 0x80
 8021e94:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 8021e98:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8021e9a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8021e9c:	442e      	add	r6, r5
 8021e9e:	9118      	str	r1, [sp, #96]	; 0x60
 8021ea0:	fb02 0003 	mla	r0, r2, r3, r0
 8021ea4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8021ea6:	961a      	str	r6, [sp, #104]	; 0x68
 8021ea8:	4623      	mov	r3, r4
 8021eaa:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8021eac:	9020      	str	r0, [sp, #128]	; 0x80
 8021eae:	442e      	add	r6, r5
 8021eb0:	9619      	str	r6, [sp, #100]	; 0x64
 8021eb2:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8021eb4:	442e      	add	r6, r5
 8021eb6:	4635      	mov	r5, r6
 8021eb8:	961b      	str	r6, [sp, #108]	; 0x6c
 8021eba:	f001 fab1 	bl	8023420 <st_int8_to16_dual>
 8021ebe:	e7e2      	b.n	8021e86 <st_sssa8_ch_convolve_rgb+0x3f2>
 8021ec0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021ec2:	4656      	mov	r6, sl
 8021ec4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021ec6:	46cb      	mov	fp, r9
 8021ec8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8021eca:	440b      	add	r3, r1
 8021ecc:	3201      	adds	r2, #1
 8021ece:	b29b      	uxth	r3, r3
 8021ed0:	b212      	sxth	r2, r2
 8021ed2:	9325      	str	r3, [sp, #148]	; 0x94
 8021ed4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021ed6:	4615      	mov	r5, r2
 8021ed8:	9227      	str	r2, [sp, #156]	; 0x9c
 8021eda:	4293      	cmp	r3, r2
 8021edc:	f73f ae80 	bgt.w	8021be0 <st_sssa8_ch_convolve_rgb+0x14c>
 8021ee0:	2000      	movs	r0, #0
 8021ee2:	b04b      	add	sp, #300	; 0x12c
 8021ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ee8:	465b      	mov	r3, fp
 8021eea:	46cb      	mov	fp, r9
 8021eec:	4699      	mov	r9, r3
 8021eee:	e7bc      	b.n	8021e6a <st_sssa8_ch_convolve_rgb+0x3d6>
 8021ef0:	428d      	cmp	r5, r1
 8021ef2:	f844 ef04 	str.w	lr, [r4, #4]!
 8021ef6:	f47f ae0a 	bne.w	8021b0e <st_sssa8_ch_convolve_rgb+0x7a>
 8021efa:	e619      	b.n	8021b30 <st_sssa8_ch_convolve_rgb+0x9c>
 8021efc:	4613      	mov	r3, r2
 8021efe:	3301      	adds	r3, #1
 8021f00:	b29b      	uxth	r3, r3
 8021f02:	9329      	str	r3, [sp, #164]	; 0xa4
 8021f04:	e65d      	b.n	8021bc2 <st_sssa8_ch_convolve_rgb+0x12e>
 8021f06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021f08:	2b00      	cmp	r3, #0
 8021f0a:	d0e9      	beq.n	8021ee0 <st_sssa8_ch_convolve_rgb+0x44c>
 8021f0c:	2100      	movs	r1, #0
 8021f0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021f10:	eba4 0008 	sub.w	r0, r4, r8
 8021f14:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8021f16:	4253      	negs	r3, r2
 8021f18:	9113      	str	r1, [sp, #76]	; 0x4c
 8021f1a:	460c      	mov	r4, r1
 8021f1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021f1e:	b29b      	uxth	r3, r3
 8021f20:	9012      	str	r0, [sp, #72]	; 0x48
 8021f22:	1a8a      	subs	r2, r1, r2
 8021f24:	9314      	str	r3, [sp, #80]	; 0x50
 8021f26:	9226      	str	r2, [sp, #152]	; 0x98
 8021f28:	930c      	str	r3, [sp, #48]	; 0x30
 8021f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021f2c:	2500      	movs	r5, #0
 8021f2e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8021f30:	a836      	add	r0, sp, #216	; 0xd8
 8021f32:	9507      	str	r5, [sp, #28]
 8021f34:	fb03 2a04 	mla	sl, r3, r4, r2
 8021f38:	f000 fda4 	bl	8022a84 <ai_padding_opt_phase1>
 8021f3c:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8021f40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021f42:	9309      	str	r3, [sp, #36]	; 0x24
 8021f44:	462b      	mov	r3, r5
 8021f46:	9206      	str	r2, [sp, #24]
 8021f48:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8021f4a:	2a00      	cmp	r2, #0
 8021f4c:	f040 8119 	bne.w	8022182 <st_sssa8_ch_convolve_rgb+0x6ee>
 8021f50:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8021f52:	2a00      	cmp	r2, #0
 8021f54:	f040 811b 	bne.w	802218e <st_sssa8_ch_convolve_rgb+0x6fa>
 8021f58:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8021f5a:	2101      	movs	r1, #1
 8021f5c:	3a01      	subs	r2, #1
 8021f5e:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 8021f62:	9238      	str	r2, [sp, #224]	; 0xe0
 8021f64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021f66:	4552      	cmp	r2, sl
 8021f68:	da5d      	bge.n	8022026 <st_sssa8_ch_convolve_rgb+0x592>
 8021f6a:	4691      	mov	r9, r2
 8021f6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021f6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021f70:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 8021f74:	46cc      	mov	ip, r9
 8021f76:	fb03 1302 	mla	r3, r3, r2, r1
 8021f7a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021f7c:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 8021f80:	4680      	mov	r8, r0
 8021f82:	1a9a      	subs	r2, r3, r2
 8021f84:	f8cd a020 	str.w	sl, [sp, #32]
 8021f88:	960b      	str	r6, [sp, #44]	; 0x2c
 8021f8a:	4542      	cmp	r2, r8
 8021f8c:	dd41      	ble.n	8022012 <st_sssa8_ch_convolve_rgb+0x57e>
 8021f8e:	45cb      	cmp	fp, r9
 8021f90:	fb09 fa0b 	mul.w	sl, r9, fp
 8021f94:	463e      	mov	r6, r7
 8021f96:	4643      	mov	r3, r8
 8021f98:	bfcc      	ite	gt
 8021f9a:	f04f 0e00 	movgt.w	lr, #0
 8021f9e:	f04f 0e01 	movle.w	lr, #1
 8021fa2:	4640      	mov	r0, r8
 8021fa4:	ea4e 7edc 	orr.w	lr, lr, ip, lsr #31
 8021fa8:	4583      	cmp	fp, r0
 8021faa:	f103 0501 	add.w	r5, r3, #1
 8021fae:	f107 0706 	add.w	r7, r7, #6
 8021fb2:	bfcc      	ite	gt
 8021fb4:	2400      	movgt	r4, #0
 8021fb6:	2401      	movle	r4, #1
 8021fb8:	ea54 74d3 	orrs.w	r4, r4, r3, lsr #31
 8021fbc:	d102      	bne.n	8021fc4 <st_sssa8_ch_convolve_rgb+0x530>
 8021fbe:	f1be 0f00 	cmp.w	lr, #0
 8021fc2:	d00b      	beq.n	8021fdc <st_sssa8_ch_convolve_rgb+0x548>
 8021fc4:	b22b      	sxth	r3, r5
 8021fc6:	f827 1c04 	strh.w	r1, [r7, #-4]
 8021fca:	f827 1c02 	strh.w	r1, [r7, #-2]
 8021fce:	429a      	cmp	r2, r3
 8021fd0:	f827 1c06 	strh.w	r1, [r7, #-6]
 8021fd4:	4618      	mov	r0, r3
 8021fd6:	dd1c      	ble.n	8022012 <st_sssa8_ch_convolve_rgb+0x57e>
 8021fd8:	463e      	mov	r6, r7
 8021fda:	e7e5      	b.n	8021fa8 <st_sssa8_ch_convolve_rgb+0x514>
 8021fdc:	4450      	add	r0, sl
 8021fde:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021fe0:	3301      	adds	r3, #1
 8021fe2:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 80222b0 <st_sssa8_ch_convolve_rgb+0x81c>
 8021fe6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021fea:	b21b      	sxth	r3, r3
 8021fec:	5820      	ldr	r0, [r4, r0]
 8021fee:	fa2f f580 	sxtb16	r5, r0
 8021ff2:	ea4f 2430 	mov.w	r4, r0, ror #8
 8021ff6:	ea05 0909 	and.w	r9, r5, r9
 8021ffa:	fa2f f484 	sxtb16	r4, r4
 8021ffe:	b2a4      	uxth	r4, r4
 8022000:	4293      	cmp	r3, r2
 8022002:	4618      	mov	r0, r3
 8022004:	ea44 0409 	orr.w	r4, r4, r9
 8022008:	f8c6 4002 	str.w	r4, [r6, #2]
 802200c:	f827 5c06 	strh.w	r5, [r7, #-6]
 8022010:	dbe2      	blt.n	8021fd8 <st_sssa8_ch_convolve_rgb+0x544>
 8022012:	f10c 0c01 	add.w	ip, ip, #1
 8022016:	9b08      	ldr	r3, [sp, #32]
 8022018:	fa0f fc8c 	sxth.w	ip, ip
 802201c:	459c      	cmp	ip, r3
 802201e:	46e1      	mov	r9, ip
 8022020:	dbb3      	blt.n	8021f8a <st_sssa8_ch_convolve_rgb+0x4f6>
 8022022:	469a      	mov	sl, r3
 8022024:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8022026:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022028:	42bb      	cmp	r3, r7
 802202a:	f000 80f3 	beq.w	8022214 <st_sssa8_ch_convolve_rgb+0x780>
 802202e:	9a07      	ldr	r2, [sp, #28]
 8022030:	9b06      	ldr	r3, [sp, #24]
 8022032:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022034:	3201      	adds	r2, #1
 8022036:	440b      	add	r3, r1
 8022038:	b212      	sxth	r2, r2
 802203a:	990e      	ldr	r1, [sp, #56]	; 0x38
 802203c:	b29b      	uxth	r3, r3
 802203e:	9207      	str	r2, [sp, #28]
 8022040:	4291      	cmp	r1, r2
 8022042:	9306      	str	r3, [sp, #24]
 8022044:	4613      	mov	r3, r2
 8022046:	f73f af7f 	bgt.w	8021f48 <st_sssa8_ch_convolve_rgb+0x4b4>
 802204a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802204c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802204e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022050:	440b      	add	r3, r1
 8022052:	3201      	adds	r2, #1
 8022054:	b29b      	uxth	r3, r3
 8022056:	b212      	sxth	r2, r2
 8022058:	930c      	str	r3, [sp, #48]	; 0x30
 802205a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802205c:	4614      	mov	r4, r2
 802205e:	9213      	str	r2, [sp, #76]	; 0x4c
 8022060:	4293      	cmp	r3, r2
 8022062:	f73f af62 	bgt.w	8021f2a <st_sssa8_ch_convolve_rgb+0x496>
 8022066:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022068:	42ba      	cmp	r2, r7
 802206a:	f43f af39 	beq.w	8021ee0 <st_sssa8_ch_convolve_rgb+0x44c>
 802206e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8022070:	2900      	cmp	r1, #0
 8022072:	f43f af35 	beq.w	8021ee0 <st_sssa8_ch_convolve_rgb+0x44c>
 8022076:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022078:	9816      	ldr	r0, [sp, #88]	; 0x58
 802207a:	1f1f      	subs	r7, r3, #4
 802207c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802207e:	ea4f 0990 	mov.w	r9, r0, lsr #2
 8022082:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022084:	f1a3 0c02 	sub.w	ip, r3, #2
 8022088:	9b59      	ldr	r3, [sp, #356]	; 0x164
 802208a:	f1a4 0a04 	sub.w	sl, r4, #4
 802208e:	9c5d      	ldr	r4, [sp, #372]	; 0x174
 8022090:	1f1e      	subs	r6, r3, #4
 8022092:	f109 33ff 	add.w	r3, r9, #4294967295
 8022096:	4421      	add	r1, r4
 8022098:	f000 0e03 	and.w	lr, r0, #3
 802209c:	b29b      	uxth	r3, r3
 802209e:	f8df b210 	ldr.w	fp, [pc, #528]	; 80222b0 <st_sssa8_ch_convolve_rgb+0x81c>
 80220a2:	9107      	str	r1, [sp, #28]
 80220a4:	3301      	adds	r3, #1
 80220a6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80220a8:	0099      	lsls	r1, r3, #2
 80220aa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80220ae:	9108      	str	r1, [sp, #32]
 80220b0:	e9cd 3909 	strd	r3, r9, [sp, #36]	; 0x24
 80220b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80220b6:	46a1      	mov	r9, r4
 80220b8:	f857 3f04 	ldr.w	r3, [r7, #4]!
 80220bc:	2a00      	cmp	r2, #0
 80220be:	d05e      	beq.n	802217e <st_sssa8_ch_convolve_rgb+0x6ea>
 80220c0:	9a08      	ldr	r2, [sp, #32]
 80220c2:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 80220c6:	1882      	adds	r2, r0, r2
 80220c8:	9206      	str	r2, [sp, #24]
 80220ca:	f850 2b04 	ldr.w	r2, [r0], #4
 80220ce:	fa2f f482 	sxtb16	r4, r2
 80220d2:	b2a1      	uxth	r1, r4
 80220d4:	f8d8 5000 	ldr.w	r5, [r8]
 80220d8:	ea4f 2232 	mov.w	r2, r2, ror #8
 80220dc:	fa2f f282 	sxtb16	r2, r2
 80220e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80220e4:	fb21 3105 	smlad	r1, r1, r5, r3
 80220e8:	ea02 020b 	and.w	r2, r2, fp
 80220ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80220f0:	f108 0808 	add.w	r8, r8, #8
 80220f4:	ea42 4414 	orr.w	r4, r2, r4, lsr #16
 80220f8:	fb24 1303 	smlad	r3, r4, r3, r1
 80220fc:	9a06      	ldr	r2, [sp, #24]
 80220fe:	4290      	cmp	r0, r2
 8022100:	d1e3      	bne.n	80220ca <st_sssa8_ch_convolve_rgb+0x636>
 8022102:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022104:	f1be 0f00 	cmp.w	lr, #0
 8022108:	d017      	beq.n	802213a <st_sssa8_ch_convolve_rgb+0x6a6>
 802210a:	f990 1000 	ldrsb.w	r1, [r0]
 802210e:	f1be 0f01 	cmp.w	lr, #1
 8022112:	8814      	ldrh	r4, [r2, #0]
 8022114:	fb14 3301 	smlabb	r3, r4, r1, r3
 8022118:	f000 80ab 	beq.w	8022272 <st_sssa8_ch_convolve_rgb+0x7de>
 802211c:	f990 1001 	ldrsb.w	r1, [r0, #1]
 8022120:	f1be 0f02 	cmp.w	lr, #2
 8022124:	8854      	ldrh	r4, [r2, #2]
 8022126:	fb14 3301 	smlabb	r3, r4, r1, r3
 802212a:	f000 80a0 	beq.w	802226e <st_sssa8_ch_convolve_rgb+0x7da>
 802212e:	8891      	ldrh	r1, [r2, #4]
 8022130:	3003      	adds	r0, #3
 8022132:	f910 2c01 	ldrsb.w	r2, [r0, #-1]
 8022136:	fb11 3302 	smlabb	r3, r1, r2, r3
 802213a:	f93c 1f02 	ldrsh.w	r1, [ip, #2]!
 802213e:	f109 0901 	add.w	r9, r9, #1
 8022142:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8022146:	2915      	cmp	r1, #21
 8022148:	f85a 4f04 	ldr.w	r4, [sl, #4]!
 802214c:	f340 8083 	ble.w	8022256 <st_sssa8_ch_convolve_rgb+0x7c2>
 8022150:	1e8a      	subs	r2, r1, #2
 8022152:	f04f 0801 	mov.w	r8, #1
 8022156:	3901      	subs	r1, #1
 8022158:	fa08 f202 	lsl.w	r2, r8, r2
 802215c:	fb53 2305 	smmla	r3, r3, r5, r2
 8022160:	410b      	asrs	r3, r1
 8022162:	4423      	add	r3, r4
 8022164:	f303 0307 	ssat	r3, #8, r3
 8022168:	f809 3c01 	strb.w	r3, [r9, #-1]
 802216c:	9b07      	ldr	r3, [sp, #28]
 802216e:	454b      	cmp	r3, r9
 8022170:	f43f aeb6 	beq.w	8021ee0 <st_sssa8_ch_convolve_rgb+0x44c>
 8022174:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022176:	f857 3f04 	ldr.w	r3, [r7, #4]!
 802217a:	2a00      	cmp	r2, #0
 802217c:	d1a0      	bne.n	80220c0 <st_sssa8_ch_convolve_rgb+0x62c>
 802217e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022180:	e7c0      	b.n	8022104 <st_sssa8_ch_convolve_rgb+0x670>
 8022182:	3a01      	subs	r2, #1
 8022184:	2101      	movs	r1, #1
 8022186:	9236      	str	r2, [sp, #216]	; 0xd8
 8022188:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 802218c:	e6ea      	b.n	8021f64 <st_sssa8_ch_convolve_rgb+0x4d0>
 802218e:	f8bd 10fc 	ldrh.w	r1, [sp, #252]	; 0xfc
 8022192:	3a01      	subs	r2, #1
 8022194:	2901      	cmp	r1, #1
 8022196:	9237      	str	r2, [sp, #220]	; 0xdc
 8022198:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 802219c:	f43f aee2 	beq.w	8021f64 <st_sssa8_ch_convolve_rgb+0x4d0>
 80221a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80221a2:	4552      	cmp	r2, sl
 80221a4:	f6bf af3f 	bge.w	8022026 <st_sssa8_ch_convolve_rgb+0x592>
 80221a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80221aa:	4694      	mov	ip, r2
 80221ac:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80221ae:	4614      	mov	r4, r2
 80221b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80221b2:	fb03 0301 	mla	r3, r3, r1, r0
 80221b6:	f9bd e018 	ldrsh.w	lr, [sp, #24]
 80221ba:	1a9d      	subs	r5, r3, r2
 80221bc:	45ae      	cmp	lr, r5
 80221be:	da1e      	bge.n	80221fe <st_sssa8_ch_convolve_rgb+0x76a>
 80221c0:	fb04 f00b 	mul.w	r0, r4, fp
 80221c4:	4671      	mov	r1, lr
 80221c6:	4674      	mov	r4, lr
 80221c8:	1903      	adds	r3, r0, r4
 80221ca:	3101      	adds	r1, #1
 80221cc:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 80222b0 <st_sssa8_ch_convolve_rgb+0x81c>
 80221d0:	3706      	adds	r7, #6
 80221d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80221d6:	b209      	sxth	r1, r1
 80221d8:	58f3      	ldr	r3, [r6, r3]
 80221da:	fa2f f283 	sxtb16	r2, r3
 80221de:	ea4f 2333 	mov.w	r3, r3, ror #8
 80221e2:	ea02 0808 	and.w	r8, r2, r8
 80221e6:	fa2f f383 	sxtb16	r3, r3
 80221ea:	b29b      	uxth	r3, r3
 80221ec:	42a9      	cmp	r1, r5
 80221ee:	f827 2c06 	strh.w	r2, [r7, #-6]
 80221f2:	460c      	mov	r4, r1
 80221f4:	ea43 0308 	orr.w	r3, r3, r8
 80221f8:	f847 3c04 	str.w	r3, [r7, #-4]
 80221fc:	dbe4      	blt.n	80221c8 <st_sssa8_ch_convolve_rgb+0x734>
 80221fe:	f10c 0c01 	add.w	ip, ip, #1
 8022202:	fa0f fc8c 	sxth.w	ip, ip
 8022206:	45d4      	cmp	ip, sl
 8022208:	4664      	mov	r4, ip
 802220a:	dbd7      	blt.n	80221bc <st_sssa8_ch_convolve_rgb+0x728>
 802220c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802220e:	42bb      	cmp	r3, r7
 8022210:	f47f af0d 	bne.w	802202e <st_sssa8_ch_convolve_rgb+0x59a>
 8022214:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 8022216:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022218:	9959      	ldr	r1, [sp, #356]	; 0x164
 802221a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802221c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802221e:	9304      	str	r3, [sp, #16]
 8022220:	9203      	str	r2, [sp, #12]
 8022222:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022224:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8022226:	9102      	str	r1, [sp, #8]
 8022228:	9001      	str	r0, [sp, #4]
 802222a:	9911      	ldr	r1, [sp, #68]	; 0x44
 802222c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802222e:	9400      	str	r4, [sp, #0]
 8022230:	f000 fc70 	bl	8022b14 <st_sssa8_ch_nn_mat_mult_kernel>
 8022234:	9a07      	ldr	r2, [sp, #28]
 8022236:	9b06      	ldr	r3, [sp, #24]
 8022238:	990a      	ldr	r1, [sp, #40]	; 0x28
 802223a:	3201      	adds	r2, #1
 802223c:	905d      	str	r0, [sp, #372]	; 0x174
 802223e:	b212      	sxth	r2, r2
 8022240:	440b      	add	r3, r1
 8022242:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022244:	b29b      	uxth	r3, r3
 8022246:	9207      	str	r2, [sp, #28]
 8022248:	4291      	cmp	r1, r2
 802224a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 802224c:	9306      	str	r3, [sp, #24]
 802224e:	4613      	mov	r3, r2
 8022250:	f73f ae7a 	bgt.w	8021f48 <st_sssa8_ch_convolve_rgb+0x4b4>
 8022254:	e6f9      	b.n	802204a <st_sssa8_ch_convolve_rgb+0x5b6>
 8022256:	2900      	cmp	r1, #0
 8022258:	dd0d      	ble.n	8022276 <st_sssa8_ch_convolve_rgb+0x7e2>
 802225a:	005b      	lsls	r3, r3, #1
 802225c:	fb53 4305 	smmla	r3, r3, r5, r4
 8022260:	fa43 f101 	asr.w	r1, r3, r1
 8022264:	f301 0307 	ssat	r3, #8, r1
 8022268:	f809 3c01 	strb.w	r3, [r9, #-1]
 802226c:	e77e      	b.n	802216c <st_sssa8_ch_convolve_rgb+0x6d8>
 802226e:	3002      	adds	r0, #2
 8022270:	e763      	b.n	802213a <st_sssa8_ch_convolve_rgb+0x6a6>
 8022272:	3001      	adds	r0, #1
 8022274:	e761      	b.n	802213a <st_sssa8_ch_convolve_rgb+0x6a6>
 8022276:	f1c1 0101 	rsb	r1, r1, #1
 802227a:	408b      	lsls	r3, r1
 802227c:	f303 031f 	ssat	r3, #32, r3
 8022280:	fb53 f315 	smmulr	r3, r3, r5
 8022284:	4423      	add	r3, r4
 8022286:	f303 0307 	ssat	r3, #8, r3
 802228a:	f809 3c01 	strb.w	r3, [r9, #-1]
 802228e:	e76d      	b.n	802216c <st_sssa8_ch_convolve_rgb+0x6d8>
 8022290:	4602      	mov	r2, r0
 8022292:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022294:	990d      	ldr	r1, [sp, #52]	; 0x34
 8022296:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8022298:	f001 f8c2 	bl	8023420 <st_int8_to16_dual>
 802229c:	2301      	movs	r3, #1
 802229e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80222a0:	9328      	str	r3, [sp, #160]	; 0xa0
 80222a2:	e474      	b.n	8021b8e <st_sssa8_ch_convolve_rgb+0xfa>
 80222a4:	9c22      	ldr	r4, [sp, #136]	; 0x88
 80222a6:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80222a8:	e445      	b.n	8021b36 <st_sssa8_ch_convolve_rgb+0xa2>
 80222aa:	f06f 0002 	mvn.w	r0, #2
 80222ae:	e618      	b.n	8021ee2 <st_sssa8_ch_convolve_rgb+0x44e>
 80222b0:	ffff0000 	.word	0xffff0000

080222b4 <st_sssa8_ch_convolve_1x1_WeightsPrefetch>:
 80222b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80222b6:	f06f 0509 	mvn.w	r5, #9
 80222ba:	685f      	ldr	r7, [r3, #4]
 80222bc:	fb02 f601 	mul.w	r6, r2, r1
 80222c0:	fb05 7501 	mla	r5, r5, r1, r7
 80222c4:	ebb5 0f46 	cmp.w	r5, r6, lsl #1
 80222c8:	db06      	blt.n	80222d8 <st_sssa8_ch_convolve_1x1_WeightsPrefetch+0x24>
 80222ca:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 80222ce:	681b      	ldr	r3, [r3, #0]
 80222d0:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80222d4:	f001 fa12 	bl	80236fc <st_sssa8_ch_fullW_prefetch>
 80222d8:	2000      	movs	r0, #0
 80222da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080222dc <st_sssa8_ch_convolve_1x1>:
 80222dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222e0:	b091      	sub	sp, #68	; 0x44
 80222e2:	469a      	mov	sl, r3
 80222e4:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 80222e8:	f99d 3094 	ldrsb.w	r3, [sp, #148]	; 0x94
 80222ec:	2d01      	cmp	r5, #1
 80222ee:	920d      	str	r2, [sp, #52]	; 0x34
 80222f0:	930e      	str	r3, [sp, #56]	; 0x38
 80222f2:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 80222f6:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 80222fa:	f8bd c080 	ldrh.w	ip, [sp, #128]	; 0x80
 80222fe:	f8bd e084 	ldrh.w	lr, [sp, #132]	; 0x84
 8022302:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8022304:	f99d 3098 	ldrsb.w	r3, [sp, #152]	; 0x98
 8022308:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802230a:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 802230e:	f8bd 1074 	ldrh.w	r1, [sp, #116]	; 0x74
 8022312:	f8bd 007c 	ldrh.w	r0, [sp, #124]	; 0x7c
 8022316:	d165      	bne.n	80223e4 <st_sssa8_ch_convolve_1x1+0x108>
 8022318:	2901      	cmp	r1, #1
 802231a:	d163      	bne.n	80223e4 <st_sssa8_ch_convolve_1x1+0x108>
 802231c:	ea56 0100 	orrs.w	r1, r6, r0
 8022320:	d160      	bne.n	80223e4 <st_sssa8_ch_convolve_1x1+0x108>
 8022322:	f1bc 0f01 	cmp.w	ip, #1
 8022326:	d15d      	bne.n	80223e4 <st_sssa8_ch_convolve_1x1+0x108>
 8022328:	f1be 0f01 	cmp.w	lr, #1
 802232c:	d15a      	bne.n	80223e4 <st_sssa8_ch_convolve_1x1+0x108>
 802232e:	ea4f 0987 	mov.w	r9, r7, lsl #2
 8022332:	ebc7 7c87 	rsb	ip, r7, r7, lsl #30
 8022336:	eb09 0807 	add.w	r8, r9, r7
 802233a:	e9d2 1200 	ldrd	r1, r2, [r2]
 802233e:	eb01 0848 	add.w	r8, r1, r8, lsl #1
 8022342:	920f      	str	r2, [sp, #60]	; 0x3c
 8022344:	eb08 0c8c 	add.w	ip, r8, ip, lsl #2
 8022348:	2f00      	cmp	r7, #0
 802234a:	d048      	beq.n	80223de <st_sssa8_ch_convolve_1x1+0x102>
 802234c:	ea4f 0b47 	mov.w	fp, r7, lsl #1
 8022350:	f1ac 0604 	sub.w	r6, ip, #4
 8022354:	f04f 0e01 	mov.w	lr, #1
 8022358:	eb04 050b 	add.w	r5, r4, fp
 802235c:	f934 2b02 	ldrsh.w	r2, [r4], #2
 8022360:	1e51      	subs	r1, r2, #1
 8022362:	fa0e f002 	lsl.w	r0, lr, r2
 8022366:	fa03 f202 	lsl.w	r2, r3, r2
 802236a:	b289      	uxth	r1, r1
 802236c:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 8022370:	2914      	cmp	r1, #20
 8022372:	d82f      	bhi.n	80223d4 <st_sssa8_ch_convolve_1x1+0xf8>
 8022374:	42a5      	cmp	r5, r4
 8022376:	f846 2f04 	str.w	r2, [r6, #4]!
 802237a:	d1ef      	bne.n	802235c <st_sssa8_ch_convolve_1x1+0x80>
 802237c:	462c      	mov	r4, r5
 802237e:	44cc      	add	ip, r9
 8022380:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022382:	f06f 0e09 	mvn.w	lr, #9
 8022386:	fb07 f50a 	mul.w	r5, r7, sl
 802238a:	ebac 0609 	sub.w	r6, ip, r9
 802238e:	eba4 040b 	sub.w	r4, r4, fp
 8022392:	fb0e 3c07 	mla	ip, lr, r7, r3
 8022396:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8022398:	9401      	str	r4, [sp, #4]
 802239a:	ebbc 0f45 	cmp.w	ip, r5, lsl #1
 802239e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80223a0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80223a2:	bfac      	ite	ge
 80223a4:	4644      	movge	r4, r8
 80223a6:	2400      	movlt	r4, #0
 80223a8:	9606      	str	r6, [sp, #24]
 80223aa:	f8cd 801c 	str.w	r8, [sp, #28]
 80223ae:	9703      	str	r7, [sp, #12]
 80223b0:	9408      	str	r4, [sp, #32]
 80223b2:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80223b6:	e9cd a504 	strd	sl, r5, [sp, #16]
 80223ba:	fb02 f101 	mul.w	r1, r2, r1
 80223be:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 80223c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80223c2:	9102      	str	r1, [sp, #8]
 80223c4:	9500      	str	r5, [sp, #0]
 80223c6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80223c8:	f001 fa98 	bl	80238fc <st_sssa8_ch_nn_mat_mult_nt_t>
 80223cc:	2000      	movs	r0, #0
 80223ce:	b011      	add	sp, #68	; 0x44
 80223d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80223d4:	42a5      	cmp	r5, r4
 80223d6:	f846 3f04 	str.w	r3, [r6, #4]!
 80223da:	d1bf      	bne.n	802235c <st_sssa8_ch_convolve_1x1+0x80>
 80223dc:	e7ce      	b.n	802237c <st_sssa8_ch_convolve_1x1+0xa0>
 80223de:	46bb      	mov	fp, r7
 80223e0:	4613      	mov	r3, r2
 80223e2:	e7ce      	b.n	8022382 <st_sssa8_ch_convolve_1x1+0xa6>
 80223e4:	f06f 0002 	mvn.w	r0, #2
 80223e8:	e7f1      	b.n	80223ce <st_sssa8_ch_convolve_1x1+0xf2>
 80223ea:	bf00      	nop

080223ec <st_sssa8_fully_connected>:
 80223ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223f0:	b097      	sub	sp, #92	; 0x5c
 80223f2:	4688      	mov	r8, r1
 80223f4:	e9dd 4520 	ldrd	r4, r5, [sp, #128]	; 0x80
 80223f8:	9312      	str	r3, [sp, #72]	; 0x48
 80223fa:	f9b5 1000 	ldrsh.w	r1, [r5]
 80223fe:	6823      	ldr	r3, [r4, #0]
 8022400:	9204      	str	r2, [sp, #16]
 8022402:	460c      	mov	r4, r1
 8022404:	9309      	str	r3, [sp, #36]	; 0x24
 8022406:	1e4b      	subs	r3, r1, #1
 8022408:	9108      	str	r1, [sp, #32]
 802240a:	461a      	mov	r2, r3
 802240c:	f99d 108c 	ldrsb.w	r1, [sp, #140]	; 0x8c
 8022410:	930d      	str	r3, [sp, #52]	; 0x34
 8022412:	b292      	uxth	r2, r2
 8022414:	f99d 3088 	ldrsb.w	r3, [sp, #136]	; 0x88
 8022418:	9107      	str	r1, [sp, #28]
 802241a:	2a14      	cmp	r2, #20
 802241c:	d805      	bhi.n	802242a <st_sssa8_fully_connected+0x3e>
 802241e:	2201      	movs	r2, #1
 8022420:	40a1      	lsls	r1, r4
 8022422:	40a2      	lsls	r2, r4
 8022424:	eb01 0252 	add.w	r2, r1, r2, lsr #1
 8022428:	9207      	str	r2, [sp, #28]
 802242a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802242c:	2a00      	cmp	r2, #0
 802242e:	f000 81e4 	beq.w	80227fa <st_sssa8_fully_connected+0x40e>
 8022432:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022434:	b29a      	uxth	r2, r3
 8022436:	9d04      	ldr	r5, [sp, #16]
 8022438:	084c      	lsrs	r4, r1, #1
 802243a:	9300      	str	r3, [sp, #0]
 802243c:	9926      	ldr	r1, [sp, #152]	; 0x98
 802243e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8022442:	462a      	mov	r2, r5
 8022444:	f001 ff70 	bl	8024328 <st_int8_reordered_no_shift_zero>
 8022448:	2c00      	cmp	r4, #0
 802244a:	f000 813f 	beq.w	80226cc <st_sssa8_fully_connected+0x2e0>
 802244e:	3c01      	subs	r4, #1
 8022450:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8022452:	f1a5 0310 	sub.w	r3, r5, #16
 8022456:	2001      	movs	r0, #1
 8022458:	b2a7      	uxth	r7, r4
 802245a:	3210      	adds	r2, #16
 802245c:	091b      	lsrs	r3, r3, #4
 802245e:	462c      	mov	r4, r5
 8022460:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 8022464:	9e08      	ldr	r6, [sp, #32]
 8022466:	4403      	add	r3, r0
 8022468:	3d03      	subs	r5, #3
 802246a:	920e      	str	r2, [sp, #56]	; 0x38
 802246c:	1eb1      	subs	r1, r6, #2
 802246e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8022470:	fa00 f101 	lsl.w	r1, r0, r1
 8022474:	9715      	str	r7, [sp, #84]	; 0x54
 8022476:	3208      	adds	r2, #8
 8022478:	950f      	str	r5, [sp, #60]	; 0x3c
 802247a:	9113      	str	r1, [sp, #76]	; 0x4c
 802247c:	9205      	str	r2, [sp, #20]
 802247e:	011a      	lsls	r2, r3, #4
 8022480:	920a      	str	r2, [sp, #40]	; 0x28
 8022482:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8022484:	9206      	str	r2, [sp, #24]
 8022486:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022488:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 802248c:	9310      	str	r3, [sp, #64]	; 0x40
 802248e:	1f23      	subs	r3, r4, #4
 8022490:	9311      	str	r3, [sp, #68]	; 0x44
 8022492:	1b83      	subs	r3, r0, r6
 8022494:	9314      	str	r3, [sp, #80]	; 0x50
 8022496:	9b05      	ldr	r3, [sp, #20]
 8022498:	9a04      	ldr	r2, [sp, #16]
 802249a:	f853 0c08 	ldr.w	r0, [r3, #-8]
 802249e:	eb08 0702 	add.w	r7, r8, r2
 80224a2:	2a0f      	cmp	r2, #15
 80224a4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80224a8:	9703      	str	r7, [sp, #12]
 80224aa:	f340 8279 	ble.w	80229a0 <st_sssa8_fully_connected+0x5b4>
 80224ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80224b0:	9e26      	ldr	r6, [sp, #152]	; 0x98
 80224b2:	eb08 0c02 	add.w	ip, r8, r2
 80224b6:	f8d8 2000 	ldr.w	r2, [r8]
 80224ba:	683d      	ldr	r5, [r7, #0]
 80224bc:	ea4f 2132 	mov.w	r1, r2, ror #8
 80224c0:	6834      	ldr	r4, [r6, #0]
 80224c2:	ea4f 2e35 	mov.w	lr, r5, ror #8
 80224c6:	fa2f f181 	sxtb16	r1, r1
 80224ca:	fa2f f282 	sxtb16	r2, r2
 80224ce:	fa2f f585 	sxtb16	r5, r5
 80224d2:	fa2f fe8e 	sxtb16	lr, lr
 80224d6:	fb24 0002 	smlad	r0, r4, r2, r0
 80224da:	fb24 3305 	smlad	r3, r4, r5, r3
 80224de:	6872      	ldr	r2, [r6, #4]
 80224e0:	fb22 0001 	smlad	r0, r2, r1, r0
 80224e4:	fb22 3e0e 	smlad	lr, r2, lr, r3
 80224e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80224ec:	687d      	ldr	r5, [r7, #4]
 80224ee:	ea4f 2331 	mov.w	r3, r1, ror #8
 80224f2:	68b2      	ldr	r2, [r6, #8]
 80224f4:	ea4f 2935 	mov.w	r9, r5, ror #8
 80224f8:	fa2f f383 	sxtb16	r3, r3
 80224fc:	fa2f f181 	sxtb16	r1, r1
 8022500:	fa2f f585 	sxtb16	r5, r5
 8022504:	fa2f f989 	sxtb16	r9, r9
 8022508:	fb22 0101 	smlad	r1, r2, r1, r0
 802250c:	fb22 e205 	smlad	r2, r2, r5, lr
 8022510:	68f4      	ldr	r4, [r6, #12]
 8022512:	fb24 1103 	smlad	r1, r4, r3, r1
 8022516:	fb24 2209 	smlad	r2, r4, r9, r2
 802251a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802251e:	68bd      	ldr	r5, [r7, #8]
 8022520:	ea4f 2033 	mov.w	r0, r3, ror #8
 8022524:	6934      	ldr	r4, [r6, #16]
 8022526:	ea4f 2e35 	mov.w	lr, r5, ror #8
 802252a:	fa2f f080 	sxtb16	r0, r0
 802252e:	fa2f f383 	sxtb16	r3, r3
 8022532:	fa2f f585 	sxtb16	r5, r5
 8022536:	fa2f fe8e 	sxtb16	lr, lr
 802253a:	fb24 1303 	smlad	r3, r4, r3, r1
 802253e:	fb24 2405 	smlad	r4, r4, r5, r2
 8022542:	6971      	ldr	r1, [r6, #20]
 8022544:	fb21 3300 	smlad	r3, r1, r0, r3
 8022548:	fb21 4e0e 	smlad	lr, r1, lr, r4
 802254c:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8022550:	3710      	adds	r7, #16
 8022552:	f857 4c04 	ldr.w	r4, [r7, #-4]
 8022556:	f108 0810 	add.w	r8, r8, #16
 802255a:	ea4f 2032 	mov.w	r0, r2, ror #8
 802255e:	69b1      	ldr	r1, [r6, #24]
 8022560:	fa2f f580 	sxtb16	r5, r0
 8022564:	fa2f f082 	sxtb16	r0, r2
 8022568:	ea4f 2234 	mov.w	r2, r4, ror #8
 802256c:	fa2f f484 	sxtb16	r4, r4
 8022570:	fa2f f282 	sxtb16	r2, r2
 8022574:	fb21 3000 	smlad	r0, r1, r0, r3
 8022578:	fb21 e104 	smlad	r1, r1, r4, lr
 802257c:	69f3      	ldr	r3, [r6, #28]
 802257e:	3620      	adds	r6, #32
 8022580:	fb23 0005 	smlad	r0, r3, r5, r0
 8022584:	fb23 1302 	smlad	r3, r3, r2, r1
 8022588:	45e0      	cmp	r8, ip
 802258a:	d194      	bne.n	80224b6 <st_sssa8_fully_connected+0xca>
 802258c:	9903      	ldr	r1, [sp, #12]
 802258e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022590:	460c      	mov	r4, r1
 8022592:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8022596:	4696      	mov	lr, r2
 8022598:	4414      	add	r4, r2
 802259a:	9403      	str	r4, [sp, #12]
 802259c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802259e:	4596      	cmp	lr, r2
 80225a0:	da35      	bge.n	802260e <st_sssa8_fully_connected+0x222>
 80225a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80225a4:	4655      	mov	r5, sl
 80225a6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80225aa:	eba2 020e 	sub.w	r2, r2, lr
 80225ae:	0892      	lsrs	r2, r2, #2
 80225b0:	920c      	str	r2, [sp, #48]	; 0x30
 80225b2:	3201      	adds	r2, #1
 80225b4:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 80225b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80225ba:	eb08 090b 	add.w	r9, r8, fp
 80225be:	f858 7b04 	ldr.w	r7, [r8], #4
 80225c2:	f85c 1b04 	ldr.w	r1, [ip], #4
 80225c6:	ea4f 2637 	mov.w	r6, r7, ror #8
 80225ca:	682a      	ldr	r2, [r5, #0]
 80225cc:	ea4f 2431 	mov.w	r4, r1, ror #8
 80225d0:	fa2f f686 	sxtb16	r6, r6
 80225d4:	fa2f f787 	sxtb16	r7, r7
 80225d8:	fa2f f181 	sxtb16	r1, r1
 80225dc:	fa2f f484 	sxtb16	r4, r4
 80225e0:	fb22 0007 	smlad	r0, r2, r7, r0
 80225e4:	fb22 3301 	smlad	r3, r2, r1, r3
 80225e8:	686a      	ldr	r2, [r5, #4]
 80225ea:	3508      	adds	r5, #8
 80225ec:	fb22 0006 	smlad	r0, r2, r6, r0
 80225f0:	fb22 3304 	smlad	r3, r2, r4, r3
 80225f4:	45c8      	cmp	r8, r9
 80225f6:	d1e2      	bne.n	80225be <st_sssa8_fully_connected+0x1d2>
 80225f8:	9a03      	ldr	r2, [sp, #12]
 80225fa:	f10e 0e04 	add.w	lr, lr, #4
 80225fe:	445a      	add	r2, fp
 8022600:	9203      	str	r2, [sp, #12]
 8022602:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022604:	eb0a 0ac2 	add.w	sl, sl, r2, lsl #3
 8022608:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802260a:	eb0e 0e82 	add.w	lr, lr, r2, lsl #2
 802260e:	9e04      	ldr	r6, [sp, #16]
 8022610:	45b6      	cmp	lr, r6
 8022612:	da2d      	bge.n	8022670 <st_sssa8_fully_connected+0x284>
 8022614:	f10e 0201 	add.w	r2, lr, #1
 8022618:	9c03      	ldr	r4, [sp, #12]
 802261a:	f9ba 1000 	ldrsh.w	r1, [sl]
 802261e:	f998 5000 	ldrsb.w	r5, [r8]
 8022622:	4296      	cmp	r6, r2
 8022624:	f994 4000 	ldrsb.w	r4, [r4]
 8022628:	fb11 0005 	smlabb	r0, r1, r5, r0
 802262c:	fb11 3304 	smlabb	r3, r1, r4, r3
 8022630:	f340 80c6 	ble.w	80227c0 <st_sssa8_fully_connected+0x3d4>
 8022634:	9903      	ldr	r1, [sp, #12]
 8022636:	f10e 0e02 	add.w	lr, lr, #2
 802263a:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 802263e:	f998 4001 	ldrsb.w	r4, [r8, #1]
 8022642:	f991 1001 	ldrsb.w	r1, [r1, #1]
 8022646:	fb12 0004 	smlabb	r0, r2, r4, r0
 802264a:	fb12 3301 	smlabb	r3, r2, r1, r3
 802264e:	9a04      	ldr	r2, [sp, #16]
 8022650:	4572      	cmp	r2, lr
 8022652:	f340 81aa 	ble.w	80229aa <st_sssa8_fully_connected+0x5be>
 8022656:	9903      	ldr	r1, [sp, #12]
 8022658:	f108 0803 	add.w	r8, r8, #3
 802265c:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 8022660:	f991 4002 	ldrsb.w	r4, [r1, #2]
 8022664:	f918 1c01 	ldrsb.w	r1, [r8, #-1]
 8022668:	fb12 3304 	smlabb	r3, r2, r4, r3
 802266c:	fb12 0001 	smlabb	r0, r2, r1, r0
 8022670:	9a06      	ldr	r2, [sp, #24]
 8022672:	9908      	ldr	r1, [sp, #32]
 8022674:	3202      	adds	r2, #2
 8022676:	2915      	cmp	r1, #21
 8022678:	9206      	str	r2, [sp, #24]
 802267a:	f340 808a 	ble.w	8022792 <st_sssa8_fully_connected+0x3a6>
 802267e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022680:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022682:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022684:	fb50 5001 	smmla	r0, r0, r1, r5
 8022688:	fb53 5301 	smmla	r3, r3, r1, r5
 802268c:	4120      	asrs	r0, r4
 802268e:	9d07      	ldr	r5, [sp, #28]
 8022690:	4428      	add	r0, r5
 8022692:	f300 0007 	ssat	r0, #8, r0
 8022696:	4123      	asrs	r3, r4
 8022698:	f802 0c02 	strb.w	r0, [r2, #-2]
 802269c:	442b      	add	r3, r5
 802269e:	f303 0307 	ssat	r3, #8, r3
 80226a2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80226a6:	9b05      	ldr	r3, [sp, #20]
 80226a8:	9a04      	ldr	r2, [sp, #16]
 80226aa:	3308      	adds	r3, #8
 80226ac:	4490      	add	r8, r2
 80226ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80226b0:	9305      	str	r3, [sp, #20]
 80226b2:	429a      	cmp	r2, r3
 80226b4:	f47f aef0 	bne.w	8022498 <st_sssa8_fully_connected+0xac>
 80226b8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80226ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80226bc:	3401      	adds	r4, #1
 80226be:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80226c2:	9324      	str	r3, [sp, #144]	; 0x90
 80226c4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80226c6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80226ca:	9325      	str	r3, [sp, #148]	; 0x94
 80226cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80226ce:	07db      	lsls	r3, r3, #31
 80226d0:	d54a      	bpl.n	8022768 <st_sssa8_fully_connected+0x37c>
 80226d2:	9a04      	ldr	r2, [sp, #16]
 80226d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80226d6:	0892      	lsrs	r2, r2, #2
 80226d8:	681b      	ldr	r3, [r3, #0]
 80226da:	d01a      	beq.n	8022712 <st_sssa8_fully_connected+0x326>
 80226dc:	1e55      	subs	r5, r2, #1
 80226de:	9826      	ldr	r0, [sp, #152]	; 0x98
 80226e0:	b2ad      	uxth	r5, r5
 80226e2:	3501      	adds	r5, #1
 80226e4:	eb08 0685 	add.w	r6, r8, r5, lsl #2
 80226e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80226ec:	6804      	ldr	r4, [r0, #0]
 80226ee:	ea4f 2132 	mov.w	r1, r2, ror #8
 80226f2:	fa2f f282 	sxtb16	r2, r2
 80226f6:	fa2f f181 	sxtb16	r1, r1
 80226fa:	fb24 3202 	smlad	r2, r4, r2, r3
 80226fe:	6843      	ldr	r3, [r0, #4]
 8022700:	3008      	adds	r0, #8
 8022702:	fb23 2301 	smlad	r3, r3, r1, r2
 8022706:	45b0      	cmp	r8, r6
 8022708:	d1ee      	bne.n	80226e8 <st_sssa8_fully_connected+0x2fc>
 802270a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802270c:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8022710:	9226      	str	r2, [sp, #152]	; 0x98
 8022712:	9a04      	ldr	r2, [sp, #16]
 8022714:	f012 0203 	ands.w	r2, r2, #3
 8022718:	d015      	beq.n	8022746 <st_sssa8_fully_connected+0x35a>
 802271a:	9826      	ldr	r0, [sp, #152]	; 0x98
 802271c:	2a01      	cmp	r2, #1
 802271e:	f998 1000 	ldrsb.w	r1, [r8]
 8022722:	8800      	ldrh	r0, [r0, #0]
 8022724:	fb10 3301 	smlabb	r3, r0, r1, r3
 8022728:	d00d      	beq.n	8022746 <st_sssa8_fully_connected+0x35a>
 802272a:	9826      	ldr	r0, [sp, #152]	; 0x98
 802272c:	2a02      	cmp	r2, #2
 802272e:	f998 1001 	ldrsb.w	r1, [r8, #1]
 8022732:	8840      	ldrh	r0, [r0, #2]
 8022734:	fb10 3301 	smlabb	r3, r0, r1, r3
 8022738:	d005      	beq.n	8022746 <st_sssa8_fully_connected+0x35a>
 802273a:	9926      	ldr	r1, [sp, #152]	; 0x98
 802273c:	f998 2002 	ldrsb.w	r2, [r8, #2]
 8022740:	8889      	ldrh	r1, [r1, #4]
 8022742:	fb11 3302 	smlabb	r3, r1, r2, r3
 8022746:	9a08      	ldr	r2, [sp, #32]
 8022748:	2a15      	cmp	r2, #21
 802274a:	dd11      	ble.n	8022770 <st_sssa8_fully_connected+0x384>
 802274c:	1e91      	subs	r1, r2, #2
 802274e:	2201      	movs	r2, #1
 8022750:	408a      	lsls	r2, r1
 8022752:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022754:	fb53 2301 	smmla	r3, r3, r1, r2
 8022758:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802275a:	4113      	asrs	r3, r2
 802275c:	9a07      	ldr	r2, [sp, #28]
 802275e:	4413      	add	r3, r2
 8022760:	f303 0307 	ssat	r3, #8, r3
 8022764:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8022766:	7013      	strb	r3, [r2, #0]
 8022768:	2000      	movs	r0, #0
 802276a:	b017      	add	sp, #92	; 0x5c
 802276c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022770:	2a00      	cmp	r2, #0
 8022772:	f340 811d 	ble.w	80229b0 <st_sssa8_fully_connected+0x5c4>
 8022776:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022778:	005b      	lsls	r3, r3, #1
 802277a:	9807      	ldr	r0, [sp, #28]
 802277c:	fb53 0301 	smmla	r3, r3, r1, r0
 8022780:	4113      	asrs	r3, r2
 8022782:	f303 0307 	ssat	r3, #8, r3
 8022786:	2000      	movs	r0, #0
 8022788:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802278a:	7013      	strb	r3, [r2, #0]
 802278c:	b017      	add	sp, #92	; 0x5c
 802278e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022792:	2900      	cmp	r1, #0
 8022794:	460a      	mov	r2, r1
 8022796:	dd16      	ble.n	80227c6 <st_sssa8_fully_connected+0x3da>
 8022798:	9909      	ldr	r1, [sp, #36]	; 0x24
 802279a:	0040      	lsls	r0, r0, #1
 802279c:	9d07      	ldr	r5, [sp, #28]
 802279e:	005b      	lsls	r3, r3, #1
 80227a0:	fb50 5001 	smmla	r0, r0, r1, r5
 80227a4:	fb53 5301 	smmla	r3, r3, r1, r5
 80227a8:	4110      	asrs	r0, r2
 80227aa:	f300 0007 	ssat	r0, #8, r0
 80227ae:	9906      	ldr	r1, [sp, #24]
 80227b0:	4113      	asrs	r3, r2
 80227b2:	f801 0c02 	strb.w	r0, [r1, #-2]
 80227b6:	f303 0307 	ssat	r3, #8, r3
 80227ba:	f801 3c01 	strb.w	r3, [r1, #-1]
 80227be:	e772      	b.n	80226a6 <st_sssa8_fully_connected+0x2ba>
 80227c0:	f108 0801 	add.w	r8, r8, #1
 80227c4:	e754      	b.n	8022670 <st_sssa8_fully_connected+0x284>
 80227c6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80227c8:	fa00 f201 	lsl.w	r2, r0, r1
 80227cc:	f302 021f 	ssat	r2, #32, r2
 80227d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80227d2:	fb52 f210 	smmulr	r2, r2, r0
 80227d6:	408b      	lsls	r3, r1
 80227d8:	f303 031f 	ssat	r3, #32, r3
 80227dc:	fb53 f310 	smmulr	r3, r3, r0
 80227e0:	9907      	ldr	r1, [sp, #28]
 80227e2:	440a      	add	r2, r1
 80227e4:	f302 0207 	ssat	r2, #8, r2
 80227e8:	9806      	ldr	r0, [sp, #24]
 80227ea:	440b      	add	r3, r1
 80227ec:	f800 2c02 	strb.w	r2, [r0, #-2]
 80227f0:	f303 0307 	ssat	r3, #8, r3
 80227f4:	f800 3c01 	strb.w	r3, [r0, #-1]
 80227f8:	e755      	b.n	80226a6 <st_sssa8_fully_connected+0x2ba>
 80227fa:	425a      	negs	r2, r3
 80227fc:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80227fe:	b296      	uxth	r6, r2
 8022800:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8022804:	2f00      	cmp	r7, #0
 8022806:	d0af      	beq.n	8022768 <st_sssa8_fully_connected+0x37c>
 8022808:	9d08      	ldr	r5, [sp, #32]
 802280a:	46bc      	mov	ip, r7
 802280c:	9a04      	ldr	r2, [sp, #16]
 802280e:	2101      	movs	r1, #1
 8022810:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8022812:	46ab      	mov	fp, r5
 8022814:	f1a2 0410 	sub.w	r4, r2, #16
 8022818:	1eaa      	subs	r2, r5, #2
 802281a:	44bc      	add	ip, r7
 802281c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8022820:	f024 040f 	bic.w	r4, r4, #15
 8022824:	9006      	str	r0, [sp, #24]
 8022826:	f8cd c014 	str.w	ip, [sp, #20]
 802282a:	fa0f fc83 	sxth.w	ip, r3
 802282e:	fa01 f302 	lsl.w	r3, r1, r2
 8022832:	f1b9 0f0f 	cmp.w	r9, #15
 8022836:	930a      	str	r3, [sp, #40]	; 0x28
 8022838:	eba1 0305 	sub.w	r3, r1, r5
 802283c:	930b      	str	r3, [sp, #44]	; 0x2c
 802283e:	f104 0310 	add.w	r3, r4, #16
 8022842:	e9dd ae24 	ldrd	sl, lr, [sp, #144]	; 0x90
 8022846:	9303      	str	r3, [sp, #12]
 8022848:	4403      	add	r3, r0
 802284a:	9308      	str	r3, [sp, #32]
 802284c:	f85a 3b04 	ldr.w	r3, [sl], #4
 8022850:	f340 8086 	ble.w	8022960 <st_sssa8_fully_connected+0x574>
 8022854:	9a03      	ldr	r2, [sp, #12]
 8022856:	9d06      	ldr	r5, [sp, #24]
 8022858:	eb08 0702 	add.w	r7, r8, r2
 802285c:	f8d8 4000 	ldr.w	r4, [r8]
 8022860:	682a      	ldr	r2, [r5, #0]
 8022862:	ea4f 2034 	mov.w	r0, r4, ror #8
 8022866:	ea4f 2132 	mov.w	r1, r2, ror #8
 802286a:	fa2f f484 	sxtb16	r4, r4
 802286e:	fa2f f080 	sxtb16	r0, r0
 8022872:	fa26 f282 	sxtab16	r2, r6, r2
 8022876:	fa26 f181 	sxtab16	r1, r6, r1
 802287a:	fb22 3304 	smlad	r3, r2, r4, r3
 802287e:	fb21 3200 	smlad	r2, r1, r0, r3
 8022882:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8022886:	686b      	ldr	r3, [r5, #4]
 8022888:	ea4f 2034 	mov.w	r0, r4, ror #8
 802288c:	ea4f 2133 	mov.w	r1, r3, ror #8
 8022890:	fa2f f484 	sxtb16	r4, r4
 8022894:	fa2f f080 	sxtb16	r0, r0
 8022898:	fa26 f383 	sxtab16	r3, r6, r3
 802289c:	fa26 f181 	sxtab16	r1, r6, r1
 80228a0:	fb23 2204 	smlad	r2, r3, r4, r2
 80228a4:	fb21 2300 	smlad	r3, r1, r0, r2
 80228a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80228ac:	68a9      	ldr	r1, [r5, #8]
 80228ae:	ea4f 2034 	mov.w	r0, r4, ror #8
 80228b2:	ea4f 2231 	mov.w	r2, r1, ror #8
 80228b6:	fa2f f484 	sxtb16	r4, r4
 80228ba:	fa2f f080 	sxtb16	r0, r0
 80228be:	fa26 f181 	sxtab16	r1, r6, r1
 80228c2:	fa26 f282 	sxtab16	r2, r6, r2
 80228c6:	fb21 3304 	smlad	r3, r1, r4, r3
 80228ca:	fb22 3100 	smlad	r1, r2, r0, r3
 80228ce:	f8d8 400c 	ldr.w	r4, [r8, #12]
 80228d2:	3510      	adds	r5, #16
 80228d4:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80228d8:	f108 0810 	add.w	r8, r8, #16
 80228dc:	ea4f 2034 	mov.w	r0, r4, ror #8
 80228e0:	ea4f 2233 	mov.w	r2, r3, ror #8
 80228e4:	fa2f f484 	sxtb16	r4, r4
 80228e8:	fa2f f080 	sxtb16	r0, r0
 80228ec:	fa26 f383 	sxtab16	r3, r6, r3
 80228f0:	fa26 f282 	sxtab16	r2, r6, r2
 80228f4:	fb23 1304 	smlad	r3, r3, r4, r1
 80228f8:	fb22 3300 	smlad	r3, r2, r0, r3
 80228fc:	45b8      	cmp	r8, r7
 80228fe:	d1ad      	bne.n	802285c <st_sssa8_fully_connected+0x470>
 8022900:	9808      	ldr	r0, [sp, #32]
 8022902:	9d03      	ldr	r5, [sp, #12]
 8022904:	454d      	cmp	r5, r9
 8022906:	da10      	bge.n	802292a <st_sssa8_fully_connected+0x53e>
 8022908:	eba9 0505 	sub.w	r5, r9, r5
 802290c:	4644      	mov	r4, r8
 802290e:	4445      	add	r5, r8
 8022910:	7822      	ldrb	r2, [r4, #0]
 8022912:	f108 0801 	add.w	r8, r8, #1
 8022916:	f910 1b01 	ldrsb.w	r1, [r0], #1
 802291a:	b252      	sxtb	r2, r2
 802291c:	45a8      	cmp	r8, r5
 802291e:	eba1 010c 	sub.w	r1, r1, ip
 8022922:	4644      	mov	r4, r8
 8022924:	fb11 3302 	smlabb	r3, r1, r2, r3
 8022928:	d1f2      	bne.n	8022910 <st_sssa8_fully_connected+0x524>
 802292a:	f1bb 0f15 	cmp.w	fp, #21
 802292e:	f10e 0e01 	add.w	lr, lr, #1
 8022932:	dd18      	ble.n	8022966 <st_sssa8_fully_connected+0x57a>
 8022934:	e9dd 2109 	ldrd	r2, r1, [sp, #36]	; 0x24
 8022938:	fb53 1302 	smmla	r3, r3, r2, r1
 802293c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802293e:	4113      	asrs	r3, r2
 8022940:	9a07      	ldr	r2, [sp, #28]
 8022942:	4413      	add	r3, r2
 8022944:	f303 0307 	ssat	r3, #8, r3
 8022948:	f80e 3c01 	strb.w	r3, [lr, #-1]
 802294c:	9b05      	ldr	r3, [sp, #20]
 802294e:	4573      	cmp	r3, lr
 8022950:	f43f af0a 	beq.w	8022768 <st_sssa8_fully_connected+0x37c>
 8022954:	f1b9 0f0f 	cmp.w	r9, #15
 8022958:	f85a 3b04 	ldr.w	r3, [sl], #4
 802295c:	f73f af7a 	bgt.w	8022854 <st_sssa8_fully_connected+0x468>
 8022960:	9806      	ldr	r0, [sp, #24]
 8022962:	2500      	movs	r5, #0
 8022964:	e7ce      	b.n	8022904 <st_sssa8_fully_connected+0x518>
 8022966:	f1bb 0f00 	cmp.w	fp, #0
 802296a:	dd0b      	ble.n	8022984 <st_sssa8_fully_connected+0x598>
 802296c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802296e:	005b      	lsls	r3, r3, #1
 8022970:	9907      	ldr	r1, [sp, #28]
 8022972:	fb53 1302 	smmla	r3, r3, r2, r1
 8022976:	fa43 f30b 	asr.w	r3, r3, fp
 802297a:	f303 0307 	ssat	r3, #8, r3
 802297e:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8022982:	e7e3      	b.n	802294c <st_sssa8_fully_connected+0x560>
 8022984:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022986:	4093      	lsls	r3, r2
 8022988:	f303 031f 	ssat	r3, #32, r3
 802298c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802298e:	fb53 f312 	smmulr	r3, r3, r2
 8022992:	9a07      	ldr	r2, [sp, #28]
 8022994:	4413      	add	r3, r2
 8022996:	f303 0307 	ssat	r3, #8, r3
 802299a:	f80e 3c01 	strb.w	r3, [lr, #-1]
 802299e:	e7d5      	b.n	802294c <st_sssa8_fully_connected+0x560>
 80229a0:	f8dd a098 	ldr.w	sl, [sp, #152]	; 0x98
 80229a4:	f04f 0e00 	mov.w	lr, #0
 80229a8:	e5f8      	b.n	802259c <st_sssa8_fully_connected+0x1b0>
 80229aa:	f108 0802 	add.w	r8, r8, #2
 80229ae:	e65f      	b.n	8022670 <st_sssa8_fully_connected+0x284>
 80229b0:	f1c2 0201 	rsb	r2, r2, #1
 80229b4:	4093      	lsls	r3, r2
 80229b6:	f303 031f 	ssat	r3, #32, r3
 80229ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80229bc:	fb53 f312 	smmulr	r3, r3, r2
 80229c0:	9a07      	ldr	r2, [sp, #28]
 80229c2:	441a      	add	r2, r3
 80229c4:	f302 0307 	ssat	r3, #8, r2
 80229c8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80229ca:	7013      	strb	r3, [r2, #0]
 80229cc:	e6cc      	b.n	8022768 <st_sssa8_fully_connected+0x37c>
 80229ce:	bf00      	nop

080229d0 <ai_padding_opt_init>:
 80229d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80229d4:	2600      	movs	r6, #0
 80229d6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80229da:	e9c0 6600 	strd	r6, r6, [r0]
 80229de:	6086      	str	r6, [r0, #8]
 80229e0:	689d      	ldr	r5, [r3, #8]
 80229e2:	690c      	ldr	r4, [r1, #16]
 80229e4:	42b5      	cmp	r5, r6
 80229e6:	dd21      	ble.n	8022a2c <ai_padding_opt_init+0x5c>
 80229e8:	4264      	negs	r4, r4
 80229ea:	46b0      	mov	r8, r6
 80229ec:	46b6      	mov	lr, r6
 80229ee:	46b1      	mov	r9, r6
 80229f0:	4637      	mov	r7, r6
 80229f2:	e00f      	b.n	8022a14 <ai_padding_opt_init+0x44>
 80229f4:	6895      	ldr	r5, [r2, #8]
 80229f6:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80229fa:	1b2d      	subs	r5, r5, r4
 80229fc:	42b5      	cmp	r5, r6
 80229fe:	da10      	bge.n	8022a22 <ai_padding_opt_init+0x52>
 8022a00:	f10e 0e01 	add.w	lr, lr, #1
 8022a04:	f8c0 e008 	str.w	lr, [r0, #8]
 8022a08:	3701      	adds	r7, #1
 8022a0a:	689d      	ldr	r5, [r3, #8]
 8022a0c:	688e      	ldr	r6, [r1, #8]
 8022a0e:	42bd      	cmp	r5, r7
 8022a10:	4434      	add	r4, r6
 8022a12:	dd0e      	ble.n	8022a32 <ai_padding_opt_init+0x62>
 8022a14:	2c00      	cmp	r4, #0
 8022a16:	daed      	bge.n	80229f4 <ai_padding_opt_init+0x24>
 8022a18:	f109 0901 	add.w	r9, r9, #1
 8022a1c:	f8c0 9000 	str.w	r9, [r0]
 8022a20:	e7f2      	b.n	8022a08 <ai_padding_opt_init+0x38>
 8022a22:	f108 0801 	add.w	r8, r8, #1
 8022a26:	f8c0 8004 	str.w	r8, [r0, #4]
 8022a2a:	e7ed      	b.n	8022a08 <ai_padding_opt_init+0x38>
 8022a2c:	46b6      	mov	lr, r6
 8022a2e:	46b0      	mov	r8, r6
 8022a30:	46b1      	mov	r9, r6
 8022a32:	2500      	movs	r5, #0
 8022a34:	e9c0 9803 	strd	r9, r8, [r0, #12]
 8022a38:	e9c0 e505 	strd	lr, r5, [r0, #20]
 8022a3c:	e9c0 5507 	strd	r5, r5, [r0, #28]
 8022a40:	685e      	ldr	r6, [r3, #4]
 8022a42:	694c      	ldr	r4, [r1, #20]
 8022a44:	42ae      	cmp	r6, r5
 8022a46:	f1c4 0400 	rsb	r4, r4, #0
 8022a4a:	dc0f      	bgt.n	8022a6c <ai_padding_opt_init+0x9c>
 8022a4c:	e018      	b.n	8022a80 <ai_padding_opt_init+0xb0>
 8022a4e:	6856      	ldr	r6, [r2, #4]
 8022a50:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8022a54:	1b36      	subs	r6, r6, r4
 8022a56:	42be      	cmp	r6, r7
 8022a58:	da0e      	bge.n	8022a78 <ai_padding_opt_init+0xa8>
 8022a5a:	6a06      	ldr	r6, [r0, #32]
 8022a5c:	3601      	adds	r6, #1
 8022a5e:	6206      	str	r6, [r0, #32]
 8022a60:	3501      	adds	r5, #1
 8022a62:	685e      	ldr	r6, [r3, #4]
 8022a64:	68cf      	ldr	r7, [r1, #12]
 8022a66:	42ae      	cmp	r6, r5
 8022a68:	443c      	add	r4, r7
 8022a6a:	dd09      	ble.n	8022a80 <ai_padding_opt_init+0xb0>
 8022a6c:	2c00      	cmp	r4, #0
 8022a6e:	daee      	bge.n	8022a4e <ai_padding_opt_init+0x7e>
 8022a70:	6986      	ldr	r6, [r0, #24]
 8022a72:	3601      	adds	r6, #1
 8022a74:	6186      	str	r6, [r0, #24]
 8022a76:	e7f3      	b.n	8022a60 <ai_padding_opt_init+0x90>
 8022a78:	69c6      	ldr	r6, [r0, #28]
 8022a7a:	3601      	adds	r6, #1
 8022a7c:	61c6      	str	r6, [r0, #28]
 8022a7e:	e7ef      	b.n	8022a60 <ai_padding_opt_init+0x90>
 8022a80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08022a84 <ai_padding_opt_phase1>:
 8022a84:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 8022a88:	b933      	cbnz	r3, 8022a98 <ai_padding_opt_phase1+0x14>
 8022a8a:	b992      	cbnz	r2, 8022ab2 <ai_padding_opt_phase1+0x2e>
 8022a8c:	6a03      	ldr	r3, [r0, #32]
 8022a8e:	2201      	movs	r2, #1
 8022a90:	3b01      	subs	r3, #1
 8022a92:	8482      	strh	r2, [r0, #36]	; 0x24
 8022a94:	6203      	str	r3, [r0, #32]
 8022a96:	e005      	b.n	8022aa4 <ai_padding_opt_phase1+0x20>
 8022a98:	2a00      	cmp	r2, #0
 8022a9a:	d0f7      	beq.n	8022a8c <ai_padding_opt_phase1+0x8>
 8022a9c:	3b01      	subs	r3, #1
 8022a9e:	2201      	movs	r2, #1
 8022aa0:	6183      	str	r3, [r0, #24]
 8022aa2:	8482      	strh	r2, [r0, #36]	; 0x24
 8022aa4:	6943      	ldr	r3, [r0, #20]
 8022aa6:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
 8022aaa:	6083      	str	r3, [r0, #8]
 8022aac:	e9c0 1200 	strd	r1, r2, [r0]
 8022ab0:	4770      	bx	lr
 8022ab2:	3a01      	subs	r2, #1
 8022ab4:	8483      	strh	r3, [r0, #36]	; 0x24
 8022ab6:	61c2      	str	r2, [r0, #28]
 8022ab8:	e7f4      	b.n	8022aa4 <ai_padding_opt_phase1+0x20>
 8022aba:	bf00      	nop

08022abc <st_uint8_fill>:
 8022abc:	078b      	lsls	r3, r1, #30
 8022abe:	d008      	beq.n	8022ad2 <st_uint8_fill+0x16>
 8022ac0:	b90a      	cbnz	r2, 8022ac6 <st_uint8_fill+0xa>
 8022ac2:	e01f      	b.n	8022b04 <st_uint8_fill+0x48>
 8022ac4:	b1fa      	cbz	r2, 8022b06 <st_uint8_fill+0x4a>
 8022ac6:	f801 0b01 	strb.w	r0, [r1], #1
 8022aca:	078b      	lsls	r3, r1, #30
 8022acc:	f102 32ff 	add.w	r2, r2, #4294967295
 8022ad0:	d1f8      	bne.n	8022ac4 <st_uint8_fill+0x8>
 8022ad2:	b430      	push	{r4, r5}
 8022ad4:	0404      	lsls	r4, r0, #16
 8022ad6:	f002 0503 	and.w	r5, r2, #3
 8022ada:	0893      	lsrs	r3, r2, #2
 8022adc:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8022ae0:	ea44 0400 	orr.w	r4, r4, r0
 8022ae4:	ea44 6400 	orr.w	r4, r4, r0, lsl #24
 8022ae8:	d010      	beq.n	8022b0c <st_uint8_fill+0x50>
 8022aea:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8022aee:	f841 4b04 	str.w	r4, [r1], #4
 8022af2:	4299      	cmp	r1, r3
 8022af4:	d1fb      	bne.n	8022aee <st_uint8_fill+0x32>
 8022af6:	b13d      	cbz	r5, 8022b08 <st_uint8_fill+0x4c>
 8022af8:	462a      	mov	r2, r5
 8022afa:	4601      	mov	r1, r0
 8022afc:	4618      	mov	r0, r3
 8022afe:	bc30      	pop	{r4, r5}
 8022b00:	f003 bd3f 	b.w	8026582 <memset>
 8022b04:	4770      	bx	lr
 8022b06:	4770      	bx	lr
 8022b08:	bc30      	pop	{r4, r5}
 8022b0a:	4770      	bx	lr
 8022b0c:	460b      	mov	r3, r1
 8022b0e:	2d00      	cmp	r5, #0
 8022b10:	d1f2      	bne.n	8022af8 <st_uint8_fill+0x3c>
 8022b12:	e7f9      	b.n	8022b08 <st_uint8_fill+0x4c>

08022b14 <st_sssa8_ch_nn_mat_mult_kernel>:
 8022b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b18:	b09f      	sub	sp, #124	; 0x7c
 8022b1a:	4683      	mov	fp, r0
 8022b1c:	460f      	mov	r7, r1
 8022b1e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8022b20:	9113      	str	r1, [sp, #76]	; 0x4c
 8022b22:	0859      	lsrs	r1, r3, #1
 8022b24:	eb00 0503 	add.w	r5, r0, r3
 8022b28:	f8bd 00a0 	ldrh.w	r0, [sp, #160]	; 0xa0
 8022b2c:	931c      	str	r3, [sp, #112]	; 0x70
 8022b2e:	921a      	str	r2, [sp, #104]	; 0x68
 8022b30:	951b      	str	r5, [sp, #108]	; 0x6c
 8022b32:	900d      	str	r0, [sp, #52]	; 0x34
 8022b34:	f000 827a 	beq.w	802302c <st_sssa8_ch_nn_mat_mult_kernel+0x518>
 8022b38:	4614      	mov	r4, r2
 8022b3a:	3901      	subs	r1, #1
 8022b3c:	f1a0 0210 	sub.w	r2, r0, #16
 8022b40:	eb07 0640 	add.w	r6, r7, r0, lsl #1
 8022b44:	4623      	mov	r3, r4
 8022b46:	1ec4      	subs	r4, r0, #3
 8022b48:	0912      	lsrs	r2, r2, #4
 8022b4a:	f8df a78c 	ldr.w	sl, [pc, #1932]	; 80232d8 <st_sssa8_ch_nn_mat_mult_kernel+0x7c4>
 8022b4e:	3310      	adds	r3, #16
 8022b50:	9415      	str	r4, [sp, #84]	; 0x54
 8022b52:	b28c      	uxth	r4, r1
 8022b54:	3201      	adds	r2, #1
 8022b56:	991a      	ldr	r1, [sp, #104]	; 0x68
 8022b58:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8022b5c:	9616      	str	r6, [sp, #88]	; 0x58
 8022b5e:	3108      	adds	r1, #8
 8022b60:	941d      	str	r4, [sp, #116]	; 0x74
 8022b62:	9314      	str	r3, [sp, #80]	; 0x50
 8022b64:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022b66:	910e      	str	r1, [sp, #56]	; 0x38
 8022b68:	3308      	adds	r3, #8
 8022b6a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8022b6c:	f8cd b004 	str.w	fp, [sp, #4]
 8022b70:	930c      	str	r3, [sp, #48]	; 0x30
 8022b72:	0153      	lsls	r3, r2, #5
 8022b74:	0112      	lsls	r2, r2, #4
 8022b76:	3104      	adds	r1, #4
 8022b78:	920f      	str	r2, [sp, #60]	; 0x3c
 8022b7a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022b7c:	9108      	str	r1, [sp, #32]
 8022b7e:	3208      	adds	r2, #8
 8022b80:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8022b82:	9209      	str	r2, [sp, #36]	; 0x24
 8022b84:	18fa      	adds	r2, r7, r3
 8022b86:	18f3      	adds	r3, r6, r3
 8022b88:	3102      	adds	r1, #2
 8022b8a:	9218      	str	r2, [sp, #96]	; 0x60
 8022b8c:	9317      	str	r3, [sp, #92]	; 0x5c
 8022b8e:	1cab      	adds	r3, r5, #2
 8022b90:	910a      	str	r1, [sp, #40]	; 0x28
 8022b92:	930b      	str	r3, [sp, #44]	; 0x2c
 8022b94:	1f03      	subs	r3, r0, #4
 8022b96:	9319      	str	r3, [sp, #100]	; 0x64
 8022b98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022b9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022b9c:	9c01      	ldr	r4, [sp, #4]
 8022b9e:	f853 9c08 	ldr.w	r9, [r3, #-8]
 8022ba2:	2a0f      	cmp	r2, #15
 8022ba4:	eb04 0002 	add.w	r0, r4, r2
 8022ba8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8022bac:	9003      	str	r0, [sp, #12]
 8022bae:	461f      	mov	r7, r3
 8022bb0:	f340 8361 	ble.w	8023276 <st_sssa8_ch_nn_mat_mult_kernel+0x762>
 8022bb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022bb6:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8022bba:	18a2      	adds	r2, r4, r2
 8022bbc:	9901      	ldr	r1, [sp, #4]
 8022bbe:	461c      	mov	r4, r3
 8022bc0:	9002      	str	r0, [sp, #8]
 8022bc2:	9204      	str	r2, [sp, #16]
 8022bc4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022bc6:	9200      	str	r2, [sp, #0]
 8022bc8:	464a      	mov	r2, r9
 8022bca:	f8d1 b000 	ldr.w	fp, [r1]
 8022bce:	9802      	ldr	r0, [sp, #8]
 8022bd0:	ea4f 2c3b 	mov.w	ip, fp, ror #8
 8022bd4:	6801      	ldr	r1, [r0, #0]
 8022bd6:	fa2f f38c 	sxtb16	r3, ip
 8022bda:	9800      	ldr	r0, [sp, #0]
 8022bdc:	ea03 050a 	and.w	r5, r3, sl
 8022be0:	fa2f fb8b 	sxtb16	fp, fp
 8022be4:	6806      	ldr	r6, [r0, #0]
 8022be6:	fa1f fc8b 	uxth.w	ip, fp
 8022bea:	ea4f 2831 	mov.w	r8, r1, ror #8
 8022bee:	ea45 4b1b 	orr.w	fp, r5, fp, lsr #16
 8022bf2:	fa2f f888 	sxtb16	r8, r8
 8022bf6:	fa2f f181 	sxtb16	r1, r1
 8022bfa:	ea08 000a 	and.w	r0, r8, sl
 8022bfe:	b28d      	uxth	r5, r1
 8022c00:	ea4c 4c03 	orr.w	ip, ip, r3, lsl #16
 8022c04:	f8de 3000 	ldr.w	r3, [lr]
 8022c08:	ea40 4111 	orr.w	r1, r0, r1, lsr #16
 8022c0c:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
 8022c10:	fb2c 9906 	smlad	r9, ip, r6, r9
 8022c14:	fb2c 2203 	smlad	r2, ip, r3, r2
 8022c18:	fb25 7706 	smlad	r7, r5, r6, r7
 8022c1c:	fb25 4003 	smlad	r0, r5, r3, r4
 8022c20:	9b00      	ldr	r3, [sp, #0]
 8022c22:	f8de c004 	ldr.w	ip, [lr, #4]
 8022c26:	685e      	ldr	r6, [r3, #4]
 8022c28:	fb2b 9906 	smlad	r9, fp, r6, r9
 8022c2c:	fb2b 240c 	smlad	r4, fp, ip, r2
 8022c30:	fb21 7706 	smlad	r7, r1, r6, r7
 8022c34:	fb21 000c 	smlad	r0, r1, ip, r0
 8022c38:	9a01      	ldr	r2, [sp, #4]
 8022c3a:	9902      	ldr	r1, [sp, #8]
 8022c3c:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8022c40:	684d      	ldr	r5, [r1, #4]
 8022c42:	ea4f 2238 	mov.w	r2, r8, ror #8
 8022c46:	689e      	ldr	r6, [r3, #8]
 8022c48:	fa2f fb82 	sxtb16	fp, r2
 8022c4c:	fa2f f188 	sxtb16	r1, r8
 8022c50:	ea0b 080a 	and.w	r8, fp, sl
 8022c54:	b28a      	uxth	r2, r1
 8022c56:	ea4f 2c35 	mov.w	ip, r5, ror #8
 8022c5a:	ea48 4811 	orr.w	r8, r8, r1, lsr #16
 8022c5e:	fa2f fc8c 	sxtb16	ip, ip
 8022c62:	fa2f f585 	sxtb16	r5, r5
 8022c66:	ea0c 010a 	and.w	r1, ip, sl
 8022c6a:	b2ab      	uxth	r3, r5
 8022c6c:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8022c70:	f8de b008 	ldr.w	fp, [lr, #8]
 8022c74:	ea41 4515 	orr.w	r5, r1, r5, lsr #16
 8022c78:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8022c7c:	fb22 9906 	smlad	r9, r2, r6, r9
 8022c80:	fb22 420b 	smlad	r2, r2, fp, r4
 8022c84:	fb23 7606 	smlad	r6, r3, r6, r7
 8022c88:	fb23 030b 	smlad	r3, r3, fp, r0
 8022c8c:	9c00      	ldr	r4, [sp, #0]
 8022c8e:	f8de 000c 	ldr.w	r0, [lr, #12]
 8022c92:	68e7      	ldr	r7, [r4, #12]
 8022c94:	fb28 9907 	smlad	r9, r8, r7, r9
 8022c98:	fb28 2800 	smlad	r8, r8, r0, r2
 8022c9c:	fb25 6607 	smlad	r6, r5, r7, r6
 8022ca0:	fb25 3000 	smlad	r0, r5, r0, r3
 8022ca4:	9901      	ldr	r1, [sp, #4]
 8022ca6:	9a02      	ldr	r2, [sp, #8]
 8022ca8:	688b      	ldr	r3, [r1, #8]
 8022caa:	6895      	ldr	r5, [r2, #8]
 8022cac:	ea4f 2133 	mov.w	r1, r3, ror #8
 8022cb0:	6927      	ldr	r7, [r4, #16]
 8022cb2:	fa2f f481 	sxtb16	r4, r1
 8022cb6:	ea04 0b0a 	and.w	fp, r4, sl
 8022cba:	ea4f 2c35 	mov.w	ip, r5, ror #8
 8022cbe:	fa2f f383 	sxtb16	r3, r3
 8022cc2:	fa2f fc8c 	sxtb16	ip, ip
 8022cc6:	b299      	uxth	r1, r3
 8022cc8:	fa2f f585 	sxtb16	r5, r5
 8022ccc:	ea4b 4313 	orr.w	r3, fp, r3, lsr #16
 8022cd0:	ea0c 0b0a 	and.w	fp, ip, sl
 8022cd4:	b2aa      	uxth	r2, r5
 8022cd6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8022cda:	f8de 4010 	ldr.w	r4, [lr, #16]
 8022cde:	ea4b 4515 	orr.w	r5, fp, r5, lsr #16
 8022ce2:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8022ce6:	fb21 9907 	smlad	r9, r1, r7, r9
 8022cea:	fb21 8804 	smlad	r8, r1, r4, r8
 8022cee:	fb22 6707 	smlad	r7, r2, r7, r6
 8022cf2:	fb22 0204 	smlad	r2, r2, r4, r0
 8022cf6:	9e00      	ldr	r6, [sp, #0]
 8022cf8:	f8de 1014 	ldr.w	r1, [lr, #20]
 8022cfc:	f8d6 b014 	ldr.w	fp, [r6, #20]
 8022d00:	fb23 990b 	smlad	r9, r3, fp, r9
 8022d04:	fb23 8801 	smlad	r8, r3, r1, r8
 8022d08:	fb25 7b0b 	smlad	fp, r5, fp, r7
 8022d0c:	fb25 2501 	smlad	r5, r5, r1, r2
 8022d10:	9b01      	ldr	r3, [sp, #4]
 8022d12:	69b7      	ldr	r7, [r6, #24]
 8022d14:	68dc      	ldr	r4, [r3, #12]
 8022d16:	f103 0110 	add.w	r1, r3, #16
 8022d1a:	9b02      	ldr	r3, [sp, #8]
 8022d1c:	9101      	str	r1, [sp, #4]
 8022d1e:	68d8      	ldr	r0, [r3, #12]
 8022d20:	3310      	adds	r3, #16
 8022d22:	9302      	str	r3, [sp, #8]
 8022d24:	ea4f 2334 	mov.w	r3, r4, ror #8
 8022d28:	fa2f f283 	sxtb16	r2, r3
 8022d2c:	ea02 060a 	and.w	r6, r2, sl
 8022d30:	ea4f 2c30 	mov.w	ip, r0, ror #8
 8022d34:	fa2f f484 	sxtb16	r4, r4
 8022d38:	fa2f fc8c 	sxtb16	ip, ip
 8022d3c:	b2a3      	uxth	r3, r4
 8022d3e:	fa2f f080 	sxtb16	r0, r0
 8022d42:	ea46 4414 	orr.w	r4, r6, r4, lsr #16
 8022d46:	ea0c 060a 	and.w	r6, ip, sl
 8022d4a:	b281      	uxth	r1, r0
 8022d4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022d50:	f8de 2018 	ldr.w	r2, [lr, #24]
 8022d54:	ea46 4010 	orr.w	r0, r6, r0, lsr #16
 8022d58:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8022d5c:	fb23 9907 	smlad	r9, r3, r7, r9
 8022d60:	fb23 8302 	smlad	r3, r3, r2, r8
 8022d64:	fb21 b707 	smlad	r7, r1, r7, fp
 8022d68:	fb21 5102 	smlad	r1, r1, r2, r5
 8022d6c:	9e00      	ldr	r6, [sp, #0]
 8022d6e:	f10e 0e20 	add.w	lr, lr, #32
 8022d72:	f106 0220 	add.w	r2, r6, #32
 8022d76:	f8d6 b01c 	ldr.w	fp, [r6, #28]
 8022d7a:	f85e 6c04 	ldr.w	r6, [lr, #-4]
 8022d7e:	9200      	str	r2, [sp, #0]
 8022d80:	fb24 990b 	smlad	r9, r4, fp, r9
 8022d84:	fb24 3206 	smlad	r2, r4, r6, r3
 8022d88:	fb20 770b 	smlad	r7, r0, fp, r7
 8022d8c:	fb20 1406 	smlad	r4, r0, r6, r1
 8022d90:	9901      	ldr	r1, [sp, #4]
 8022d92:	9b04      	ldr	r3, [sp, #16]
 8022d94:	4299      	cmp	r1, r3
 8022d96:	f47f af18 	bne.w	8022bca <st_sssa8_ch_nn_mat_mult_kernel+0xb6>
 8022d9a:	9903      	ldr	r1, [sp, #12]
 8022d9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022d9e:	4608      	mov	r0, r1
 8022da0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8022da2:	9400      	str	r4, [sp, #0]
 8022da4:	4418      	add	r0, r3
 8022da6:	9106      	str	r1, [sp, #24]
 8022da8:	9918      	ldr	r1, [sp, #96]	; 0x60
 8022daa:	9003      	str	r0, [sp, #12]
 8022dac:	9105      	str	r1, [sp, #20]
 8022dae:	9307      	str	r3, [sp, #28]
 8022db0:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022db2:	4283      	cmp	r3, r0
 8022db4:	da68      	bge.n	8022e88 <st_sssa8_ch_nn_mat_mult_kernel+0x374>
 8022db6:	9919      	ldr	r1, [sp, #100]	; 0x64
 8022db8:	46be      	mov	lr, r7
 8022dba:	f8dd b004 	ldr.w	fp, [sp, #4]
 8022dbe:	1acb      	subs	r3, r1, r3
 8022dc0:	9903      	ldr	r1, [sp, #12]
 8022dc2:	f8cd b008 	str.w	fp, [sp, #8]
 8022dc6:	089b      	lsrs	r3, r3, #2
 8022dc8:	9312      	str	r3, [sp, #72]	; 0x48
 8022dca:	3301      	adds	r3, #1
 8022dcc:	9311      	str	r3, [sp, #68]	; 0x44
 8022dce:	009b      	lsls	r3, r3, #2
 8022dd0:	e9dd c505 	ldrd	ip, r5, [sp, #20]
 8022dd4:	9310      	str	r3, [sp, #64]	; 0x40
 8022dd6:	18cb      	adds	r3, r1, r3
 8022dd8:	9304      	str	r3, [sp, #16]
 8022dda:	9b02      	ldr	r3, [sp, #8]
 8022ddc:	f8dc b000 	ldr.w	fp, [ip]
 8022de0:	f853 4b04 	ldr.w	r4, [r3], #4
 8022de4:	fa2f f084 	sxtb16	r0, r4
 8022de8:	9302      	str	r3, [sp, #8]
 8022dea:	ea4f 2634 	mov.w	r6, r4, ror #8
 8022dee:	9b03      	ldr	r3, [sp, #12]
 8022df0:	fa1f f880 	uxth.w	r8, r0
 8022df4:	fa2f f686 	sxtb16	r6, r6
 8022df8:	f853 1b04 	ldr.w	r1, [r3], #4
 8022dfc:	ea06 040a 	and.w	r4, r6, sl
 8022e00:	ea48 4606 	orr.w	r6, r8, r6, lsl #16
 8022e04:	f8d5 8000 	ldr.w	r8, [r5]
 8022e08:	9303      	str	r3, [sp, #12]
 8022e0a:	ea4f 2731 	mov.w	r7, r1, ror #8
 8022e0e:	ea44 4410 	orr.w	r4, r4, r0, lsr #16
 8022e12:	fa2f f787 	sxtb16	r7, r7
 8022e16:	fa2f f181 	sxtb16	r1, r1
 8022e1a:	ea07 000a 	and.w	r0, r7, sl
 8022e1e:	b28b      	uxth	r3, r1
 8022e20:	ea40 4111 	orr.w	r1, r0, r1, lsr #16
 8022e24:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8022e28:	fb26 990b 	smlad	r9, r6, fp, r9
 8022e2c:	fb26 2208 	smlad	r2, r6, r8, r2
 8022e30:	fb23 ee0b 	smlad	lr, r3, fp, lr
 8022e34:	9800      	ldr	r0, [sp, #0]
 8022e36:	fb23 0308 	smlad	r3, r3, r8, r0
 8022e3a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8022e3e:	3508      	adds	r5, #8
 8022e40:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8022e44:	f10c 0c08 	add.w	ip, ip, #8
 8022e48:	fb24 9906 	smlad	r9, r4, r6, r9
 8022e4c:	fb24 2200 	smlad	r2, r4, r0, r2
 8022e50:	fb21 ee06 	smlad	lr, r1, r6, lr
 8022e54:	fb21 3100 	smlad	r1, r1, r0, r3
 8022e58:	9100      	str	r1, [sp, #0]
 8022e5a:	e9dd 3103 	ldrd	r3, r1, [sp, #12]
 8022e5e:	4299      	cmp	r1, r3
 8022e60:	d1bb      	bne.n	8022dda <st_sssa8_ch_nn_mat_mult_kernel+0x2c6>
 8022e62:	9801      	ldr	r0, [sp, #4]
 8022e64:	4677      	mov	r7, lr
 8022e66:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022e68:	9907      	ldr	r1, [sp, #28]
 8022e6a:	4420      	add	r0, r4
 8022e6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022e6e:	3104      	adds	r1, #4
 8022e70:	9001      	str	r0, [sp, #4]
 8022e72:	00db      	lsls	r3, r3, #3
 8022e74:	9812      	ldr	r0, [sp, #72]	; 0x48
 8022e76:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8022e7a:	9107      	str	r1, [sp, #28]
 8022e7c:	9906      	ldr	r1, [sp, #24]
 8022e7e:	4419      	add	r1, r3
 8022e80:	9106      	str	r1, [sp, #24]
 8022e82:	9905      	ldr	r1, [sp, #20]
 8022e84:	4419      	add	r1, r3
 8022e86:	9105      	str	r1, [sp, #20]
 8022e88:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8022e8a:	9907      	ldr	r1, [sp, #28]
 8022e8c:	428e      	cmp	r6, r1
 8022e8e:	dd50      	ble.n	8022f32 <st_sssa8_ch_nn_mat_mult_kernel+0x41e>
 8022e90:	9b01      	ldr	r3, [sp, #4]
 8022e92:	f993 5000 	ldrsb.w	r5, [r3]
 8022e96:	1c4b      	adds	r3, r1, #1
 8022e98:	9905      	ldr	r1, [sp, #20]
 8022e9a:	42b3      	cmp	r3, r6
 8022e9c:	f9b1 4000 	ldrsh.w	r4, [r1]
 8022ea0:	9906      	ldr	r1, [sp, #24]
 8022ea2:	fb14 9905 	smlabb	r9, r4, r5, r9
 8022ea6:	f9b1 0000 	ldrsh.w	r0, [r1]
 8022eaa:	9903      	ldr	r1, [sp, #12]
 8022eac:	fb10 2205 	smlabb	r2, r0, r5, r2
 8022eb0:	f991 1000 	ldrsb.w	r1, [r1]
 8022eb4:	fb14 7401 	smlabb	r4, r4, r1, r7
 8022eb8:	4627      	mov	r7, r4
 8022eba:	9c00      	ldr	r4, [sp, #0]
 8022ebc:	fb10 4101 	smlabb	r1, r0, r1, r4
 8022ec0:	9100      	str	r1, [sp, #0]
 8022ec2:	f280 8177 	bge.w	80231b4 <st_sssa8_ch_nn_mat_mult_kernel+0x6a0>
 8022ec6:	9901      	ldr	r1, [sp, #4]
 8022ec8:	9b07      	ldr	r3, [sp, #28]
 8022eca:	f991 5001 	ldrsb.w	r5, [r1, #1]
 8022ece:	9905      	ldr	r1, [sp, #20]
 8022ed0:	3302      	adds	r3, #2
 8022ed2:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8022ed6:	9906      	ldr	r1, [sp, #24]
 8022ed8:	fb14 9905 	smlabb	r9, r4, r5, r9
 8022edc:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8022ee0:	9903      	ldr	r1, [sp, #12]
 8022ee2:	fb10 2205 	smlabb	r2, r0, r5, r2
 8022ee6:	f991 1001 	ldrsb.w	r1, [r1, #1]
 8022eea:	fb14 7401 	smlabb	r4, r4, r1, r7
 8022eee:	4627      	mov	r7, r4
 8022ef0:	9c00      	ldr	r4, [sp, #0]
 8022ef2:	fb10 4101 	smlabb	r1, r0, r1, r4
 8022ef6:	9100      	str	r1, [sp, #0]
 8022ef8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8022efa:	4299      	cmp	r1, r3
 8022efc:	f340 81c4 	ble.w	8023288 <st_sssa8_ch_nn_mat_mult_kernel+0x774>
 8022f00:	9b05      	ldr	r3, [sp, #20]
 8022f02:	9d01      	ldr	r5, [sp, #4]
 8022f04:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8022f08:	9b03      	ldr	r3, [sp, #12]
 8022f0a:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8022f0e:	9b06      	ldr	r3, [sp, #24]
 8022f10:	fb11 7600 	smlabb	r6, r1, r0, r7
 8022f14:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 8022f18:	4637      	mov	r7, r6
 8022f1a:	9e00      	ldr	r6, [sp, #0]
 8022f1c:	f995 3002 	ldrsb.w	r3, [r5, #2]
 8022f20:	fb14 6000 	smlabb	r0, r4, r0, r6
 8022f24:	fb11 9903 	smlabb	r9, r1, r3, r9
 8022f28:	9000      	str	r0, [sp, #0]
 8022f2a:	fb14 2203 	smlabb	r2, r4, r3, r2
 8022f2e:	1ce8      	adds	r0, r5, #3
 8022f30:	9001      	str	r0, [sp, #4]
 8022f32:	9b08      	ldr	r3, [sp, #32]
 8022f34:	f933 0c04 	ldrsh.w	r0, [r3, #-4]
 8022f38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022f3a:	2815      	cmp	r0, #21
 8022f3c:	f853 4c08 	ldr.w	r4, [r3, #-8]
 8022f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f42:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8022f46:	f340 811a 	ble.w	802317e <st_sssa8_ch_nn_mat_mult_kernel+0x66a>
 8022f4a:	1e83      	subs	r3, r0, #2
 8022f4c:	2101      	movs	r1, #1
 8022f4e:	3801      	subs	r0, #1
 8022f50:	fa01 f303 	lsl.w	r3, r1, r3
 8022f54:	fb59 3904 	smmla	r9, r9, r4, r3
 8022f58:	fa49 f900 	asr.w	r9, r9, r0
 8022f5c:	fb52 3304 	smmla	r3, r2, r4, r3
 8022f60:	44a9      	add	r9, r5
 8022f62:	f309 0907 	ssat	r9, #8, r9
 8022f66:	4103      	asrs	r3, r0
 8022f68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022f6a:	442b      	add	r3, r5
 8022f6c:	f802 9c02 	strb.w	r9, [r2, #-2]
 8022f70:	f303 0307 	ssat	r3, #8, r3
 8022f74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022f76:	f802 3c02 	strb.w	r3, [r2, #-2]
 8022f7a:	9b08      	ldr	r3, [sp, #32]
 8022f7c:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 8022f80:	2b15      	cmp	r3, #21
 8022f82:	f340 80da 	ble.w	802313a <st_sssa8_ch_nn_mat_mult_kernel+0x626>
 8022f86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022f88:	1e9c      	subs	r4, r3, #2
 8022f8a:	3b01      	subs	r3, #1
 8022f8c:	9900      	ldr	r1, [sp, #0]
 8022f8e:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8022f92:	2201      	movs	r2, #1
 8022f94:	fa02 f404 	lsl.w	r4, r2, r4
 8022f98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022f9a:	fb57 4800 	smmla	r8, r7, r0, r4
 8022f9e:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8022fa2:	fa48 f803 	asr.w	r8, r8, r3
 8022fa6:	fb51 4000 	smmla	r0, r1, r0, r4
 8022faa:	4490      	add	r8, r2
 8022fac:	f308 0807 	ssat	r8, #8, r8
 8022fb0:	4118      	asrs	r0, r3
 8022fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022fb4:	4410      	add	r0, r2
 8022fb6:	f803 8c01 	strb.w	r8, [r3, #-1]
 8022fba:	f300 0007 	ssat	r0, #8, r0
 8022fbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022fc0:	f803 0c01 	strb.w	r0, [r3, #-1]
 8022fc4:	9a01      	ldr	r2, [sp, #4]
 8022fc6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8022fc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022fca:	440a      	add	r2, r1
 8022fcc:	3308      	adds	r3, #8
 8022fce:	9201      	str	r2, [sp, #4]
 8022fd0:	9a08      	ldr	r2, [sp, #32]
 8022fd2:	930e      	str	r3, [sp, #56]	; 0x38
 8022fd4:	3204      	adds	r2, #4
 8022fd6:	9208      	str	r2, [sp, #32]
 8022fd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022fda:	3208      	adds	r2, #8
 8022fdc:	920c      	str	r2, [sp, #48]	; 0x30
 8022fde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022fe0:	3202      	adds	r2, #2
 8022fe2:	920a      	str	r2, [sp, #40]	; 0x28
 8022fe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022fe6:	3208      	adds	r2, #8
 8022fe8:	9209      	str	r2, [sp, #36]	; 0x24
 8022fea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022fec:	3202      	adds	r2, #2
 8022fee:	920b      	str	r2, [sp, #44]	; 0x2c
 8022ff0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022ff2:	429a      	cmp	r2, r3
 8022ff4:	f47f add1 	bne.w	8022b9a <st_sssa8_ch_nn_mat_mult_kernel+0x86>
 8022ff8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022ffa:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8022ffc:	3301      	adds	r3, #1
 8022ffe:	f8dd b004 	ldr.w	fp, [sp, #4]
 8023002:	00da      	lsls	r2, r3, #3
 8023004:	0059      	lsls	r1, r3, #1
 8023006:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 802300a:	9329      	str	r3, [sp, #164]	; 0xa4
 802300c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802300e:	4413      	add	r3, r2
 8023010:	931a      	str	r3, [sp, #104]	; 0x68
 8023012:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023014:	4413      	add	r3, r2
 8023016:	932a      	str	r3, [sp, #168]	; 0xa8
 8023018:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802301a:	4413      	add	r3, r2
 802301c:	932b      	str	r3, [sp, #172]	; 0xac
 802301e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023020:	440b      	add	r3, r1
 8023022:	932c      	str	r3, [sp, #176]	; 0xb0
 8023024:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023026:	440b      	add	r3, r1
 8023028:	931b      	str	r3, [sp, #108]	; 0x6c
 802302a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802302c:	07da      	lsls	r2, r3, #31
 802302e:	f140 811c 	bpl.w	802326a <st_sssa8_ch_nn_mat_mult_kernel+0x756>
 8023032:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8023034:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8023036:	6818      	ldr	r0, [r3, #0]
 8023038:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802303a:	ea5f 0a93 	movs.w	sl, r3, lsr #2
 802303e:	eb07 0943 	add.w	r9, r7, r3, lsl #1
 8023042:	f000 8146 	beq.w	80232d2 <st_sssa8_ch_nn_mat_mult_kernel+0x7be>
 8023046:	f10a 3aff 	add.w	sl, sl, #4294967295
 802304a:	46cc      	mov	ip, r9
 802304c:	4602      	mov	r2, r0
 802304e:	f8df 8288 	ldr.w	r8, [pc, #648]	; 80232d8 <st_sssa8_ch_nn_mat_mult_kernel+0x7c4>
 8023052:	fa1f fa8a 	uxth.w	sl, sl
 8023056:	f10a 0a01 	add.w	sl, sl, #1
 802305a:	eb0b 0e8a 	add.w	lr, fp, sl, lsl #2
 802305e:	f85b 1b04 	ldr.w	r1, [fp], #4
 8023062:	fa2f f481 	sxtb16	r4, r1
 8023066:	ea4f 2331 	mov.w	r3, r1, ror #8
 802306a:	683d      	ldr	r5, [r7, #0]
 802306c:	b2a1      	uxth	r1, r4
 802306e:	fa2f f383 	sxtb16	r3, r3
 8023072:	ea03 0608 	and.w	r6, r3, r8
 8023076:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 802307a:	ea46 4414 	orr.w	r4, r6, r4, lsr #16
 802307e:	fb23 0505 	smlad	r5, r3, r5, r0
 8023082:	f8dc 1000 	ldr.w	r1, [ip]
 8023086:	fb23 2301 	smlad	r3, r3, r1, r2
 802308a:	6878      	ldr	r0, [r7, #4]
 802308c:	f10c 0c08 	add.w	ip, ip, #8
 8023090:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 8023094:	3708      	adds	r7, #8
 8023096:	fb24 5000 	smlad	r0, r4, r0, r5
 802309a:	fb24 3202 	smlad	r2, r4, r2, r3
 802309e:	45de      	cmp	lr, fp
 80230a0:	d1dd      	bne.n	802305e <st_sssa8_ch_nn_mat_mult_kernel+0x54a>
 80230a2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80230a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80230a8:	4453      	add	r3, sl
 80230aa:	44d1      	add	r9, sl
 80230ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80230ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80230b0:	f013 0303 	ands.w	r3, r3, #3
 80230b4:	d01f      	beq.n	80230f6 <st_sssa8_ch_nn_mat_mult_kernel+0x5e2>
 80230b6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80230b8:	2b01      	cmp	r3, #1
 80230ba:	f99b 1000 	ldrsb.w	r1, [fp]
 80230be:	8835      	ldrh	r5, [r6, #0]
 80230c0:	f8b9 4000 	ldrh.w	r4, [r9]
 80230c4:	fb15 0001 	smlabb	r0, r5, r1, r0
 80230c8:	fb14 2201 	smlabb	r2, r4, r1, r2
 80230cc:	d013      	beq.n	80230f6 <st_sssa8_ch_nn_mat_mult_kernel+0x5e2>
 80230ce:	f99b 1001 	ldrsb.w	r1, [fp, #1]
 80230d2:	2b02      	cmp	r3, #2
 80230d4:	8875      	ldrh	r5, [r6, #2]
 80230d6:	f8b9 4002 	ldrh.w	r4, [r9, #2]
 80230da:	fb15 0001 	smlabb	r0, r5, r1, r0
 80230de:	fb14 2201 	smlabb	r2, r4, r1, r2
 80230e2:	d008      	beq.n	80230f6 <st_sssa8_ch_nn_mat_mult_kernel+0x5e2>
 80230e4:	f99b 3002 	ldrsb.w	r3, [fp, #2]
 80230e8:	88b4      	ldrh	r4, [r6, #4]
 80230ea:	f8b9 1004 	ldrh.w	r1, [r9, #4]
 80230ee:	fb14 0003 	smlabb	r0, r4, r3, r0
 80230f2:	fb11 2203 	smlabb	r2, r1, r3, r2
 80230f6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80230f8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80230fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80230fe:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8023100:	6825      	ldr	r5, [r4, #0]
 8023102:	2b15      	cmp	r3, #21
 8023104:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8023106:	f101 0101 	add.w	r1, r1, #1
 802310a:	6824      	ldr	r4, [r4, #0]
 802310c:	f300 8097 	bgt.w	802323e <st_sssa8_ch_nn_mat_mult_kernel+0x72a>
 8023110:	2b00      	cmp	r3, #0
 8023112:	f340 80bd 	ble.w	8023290 <st_sssa8_ch_nn_mat_mult_kernel+0x77c>
 8023116:	0040      	lsls	r0, r0, #1
 8023118:	0052      	lsls	r2, r2, #1
 802311a:	fb50 4005 	smmla	r0, r0, r5, r4
 802311e:	fb52 4205 	smmla	r2, r2, r5, r4
 8023122:	fa40 f303 	asr.w	r3, r0, r3
 8023126:	f303 0307 	ssat	r3, #8, r3
 802312a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 802312c:	7003      	strb	r3, [r0, #0]
 802312e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023130:	f9b3 3000 	ldrsh.w	r3, [r3]
 8023134:	fa42 f303 	asr.w	r3, r2, r3
 8023138:	e091      	b.n	802325e <st_sssa8_ch_nn_mat_mult_kernel+0x74a>
 802313a:	2b00      	cmp	r3, #0
 802313c:	dd3e      	ble.n	80231bc <st_sssa8_ch_nn_mat_mult_kernel+0x6a8>
 802313e:	9900      	ldr	r1, [sp, #0]
 8023140:	ea4f 0847 	mov.w	r8, r7, lsl #1
 8023144:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023146:	0048      	lsls	r0, r1, #1
 8023148:	9909      	ldr	r1, [sp, #36]	; 0x24
 802314a:	f852 2c04 	ldr.w	r2, [r2, #-4]
 802314e:	f851 4c04 	ldr.w	r4, [r1, #-4]
 8023152:	fb58 4802 	smmla	r8, r8, r2, r4
 8023156:	fb50 4002 	smmla	r0, r0, r2, r4
 802315a:	fa48 f303 	asr.w	r3, r8, r3
 802315e:	f303 0307 	ssat	r3, #8, r3
 8023162:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023164:	f802 3c01 	strb.w	r3, [r2, #-1]
 8023168:	9b08      	ldr	r3, [sp, #32]
 802316a:	f933 4c02 	ldrsh.w	r4, [r3, #-2]
 802316e:	fa40 f404 	asr.w	r4, r0, r4
 8023172:	f304 0407 	ssat	r4, #8, r4
 8023176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023178:	f803 4c01 	strb.w	r4, [r3, #-1]
 802317c:	e722      	b.n	8022fc4 <st_sssa8_ch_nn_mat_mult_kernel+0x4b0>
 802317e:	2800      	cmp	r0, #0
 8023180:	dd3f      	ble.n	8023202 <st_sssa8_ch_nn_mat_mult_kernel+0x6ee>
 8023182:	0053      	lsls	r3, r2, #1
 8023184:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8023188:	fb53 5204 	smmla	r2, r3, r4, r5
 802318c:	fb59 5904 	smmla	r9, r9, r4, r5
 8023190:	fa49 f900 	asr.w	r9, r9, r0
 8023194:	f309 0907 	ssat	r9, #8, r9
 8023198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802319a:	f803 9c02 	strb.w	r9, [r3, #-2]
 802319e:	9b08      	ldr	r3, [sp, #32]
 80231a0:	f933 3c04 	ldrsh.w	r3, [r3, #-4]
 80231a4:	fa42 f303 	asr.w	r3, r2, r3
 80231a8:	f303 0307 	ssat	r3, #8, r3
 80231ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80231ae:	f802 3c02 	strb.w	r3, [r2, #-2]
 80231b2:	e6e2      	b.n	8022f7a <st_sssa8_ch_nn_mat_mult_kernel+0x466>
 80231b4:	9b01      	ldr	r3, [sp, #4]
 80231b6:	3301      	adds	r3, #1
 80231b8:	9301      	str	r3, [sp, #4]
 80231ba:	e6ba      	b.n	8022f32 <st_sssa8_ch_nn_mat_mult_kernel+0x41e>
 80231bc:	f1c3 0301 	rsb	r3, r3, #1
 80231c0:	4639      	mov	r1, r7
 80231c2:	4099      	lsls	r1, r3
 80231c4:	f301 011f 	ssat	r1, #32, r1
 80231c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80231ca:	f852 6c04 	ldr.w	r6, [r2, #-4]
 80231ce:	fb51 f116 	smmulr	r1, r1, r6
 80231d2:	9800      	ldr	r0, [sp, #0]
 80231d4:	4098      	lsls	r0, r3
 80231d6:	f300 001f 	ssat	r0, #32, r0
 80231da:	fb50 f016 	smmulr	r0, r0, r6
 80231de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80231e0:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80231e4:	440a      	add	r2, r1
 80231e6:	f302 0207 	ssat	r2, #8, r2
 80231ea:	990a      	ldr	r1, [sp, #40]	; 0x28
 80231ec:	f801 2c01 	strb.w	r2, [r1, #-1]
 80231f0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80231f4:	4403      	add	r3, r0
 80231f6:	f303 0307 	ssat	r3, #8, r3
 80231fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80231fc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8023200:	e6e0      	b.n	8022fc4 <st_sssa8_ch_nn_mat_mult_kernel+0x4b0>
 8023202:	f1c0 0001 	rsb	r0, r0, #1
 8023206:	fa09 f600 	lsl.w	r6, r9, r0
 802320a:	f306 061f 	ssat	r6, #32, r6
 802320e:	fb56 f614 	smmulr	r6, r6, r4
 8023212:	fa02 f000 	lsl.w	r0, r2, r0
 8023216:	f300 001f 	ssat	r0, #32, r0
 802321a:	fb50 f414 	smmulr	r4, r0, r4
 802321e:	4435      	add	r5, r6
 8023220:	f305 0507 	ssat	r5, #8, r5
 8023224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023226:	f803 5c02 	strb.w	r5, [r3, #-2]
 802322a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802322c:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8023230:	4423      	add	r3, r4
 8023232:	f303 0307 	ssat	r3, #8, r3
 8023236:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023238:	f802 3c02 	strb.w	r3, [r2, #-2]
 802323c:	e69d      	b.n	8022f7a <st_sssa8_ch_nn_mat_mult_kernel+0x466>
 802323e:	1e9f      	subs	r7, r3, #2
 8023240:	1e5e      	subs	r6, r3, #1
 8023242:	2301      	movs	r3, #1
 8023244:	40bb      	lsls	r3, r7
 8023246:	fb50 3005 	smmla	r0, r0, r5, r3
 802324a:	4130      	asrs	r0, r6
 802324c:	fb52 3305 	smmla	r3, r2, r5, r3
 8023250:	1902      	adds	r2, r0, r4
 8023252:	f302 0207 	ssat	r2, #8, r2
 8023256:	4133      	asrs	r3, r6
 8023258:	982c      	ldr	r0, [sp, #176]	; 0xb0
 802325a:	4423      	add	r3, r4
 802325c:	7002      	strb	r2, [r0, #0]
 802325e:	f303 0307 	ssat	r3, #8, r3
 8023262:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8023264:	912c      	str	r1, [sp, #176]	; 0xb0
 8023266:	7013      	strb	r3, [r2, #0]
 8023268:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802326a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802326c:	4413      	add	r3, r2
 802326e:	4618      	mov	r0, r3
 8023270:	b01f      	add	sp, #124	; 0x7c
 8023272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023276:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023278:	464a      	mov	r2, r9
 802327a:	9700      	str	r7, [sp, #0]
 802327c:	9306      	str	r3, [sp, #24]
 802327e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023280:	9305      	str	r3, [sp, #20]
 8023282:	2300      	movs	r3, #0
 8023284:	9307      	str	r3, [sp, #28]
 8023286:	e593      	b.n	8022db0 <st_sssa8_ch_nn_mat_mult_kernel+0x29c>
 8023288:	9b01      	ldr	r3, [sp, #4]
 802328a:	3302      	adds	r3, #2
 802328c:	9301      	str	r3, [sp, #4]
 802328e:	e650      	b.n	8022f32 <st_sssa8_ch_nn_mat_mult_kernel+0x41e>
 8023290:	f1c3 0601 	rsb	r6, r3, #1
 8023294:	fa00 f306 	lsl.w	r3, r0, r6
 8023298:	f303 031f 	ssat	r3, #32, r3
 802329c:	fb53 f315 	smmulr	r3, r3, r5
 80232a0:	40b2      	lsls	r2, r6
 80232a2:	f302 021f 	ssat	r2, #32, r2
 80232a6:	fb52 f215 	smmulr	r2, r2, r5
 80232aa:	4423      	add	r3, r4
 80232ac:	f303 0307 	ssat	r3, #8, r3
 80232b0:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80232b2:	7003      	strb	r3, [r0, #0]
 80232b4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80232b6:	681b      	ldr	r3, [r3, #0]
 80232b8:	4413      	add	r3, r2
 80232ba:	f303 0307 	ssat	r3, #8, r3
 80232be:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80232c0:	912c      	str	r1, [sp, #176]	; 0xb0
 80232c2:	7013      	strb	r3, [r2, #0]
 80232c4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80232c6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80232c8:	4413      	add	r3, r2
 80232ca:	4618      	mov	r0, r3
 80232cc:	b01f      	add	sp, #124	; 0x7c
 80232ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232d2:	4602      	mov	r2, r0
 80232d4:	e6ec      	b.n	80230b0 <st_sssa8_ch_nn_mat_mult_kernel+0x59c>
 80232d6:	bf00      	nop
 80232d8:	ffff0000 	.word	0xffff0000

080232dc <st_int8_to16_no_shift>:
 80232dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232e0:	f1b2 0610 	subs.w	r6, r2, #16
 80232e4:	f100 8092 	bmi.w	802340c <st_int8_to16_no_shift+0x130>
 80232e8:	0936      	lsrs	r6, r6, #4
 80232ea:	4603      	mov	r3, r0
 80232ec:	4f4b      	ldr	r7, [pc, #300]	; (802341c <st_int8_to16_no_shift+0x140>)
 80232ee:	f106 0801 	add.w	r8, r6, #1
 80232f2:	eb01 1448 	add.w	r4, r1, r8, lsl #5
 80232f6:	681d      	ldr	r5, [r3, #0]
 80232f8:	3120      	adds	r1, #32
 80232fa:	685e      	ldr	r6, [r3, #4]
 80232fc:	3310      	adds	r3, #16
 80232fe:	ea4f 2c35 	mov.w	ip, r5, ror #8
 8023302:	fa2f fc8c 	sxtb16	ip, ip
 8023306:	ea0c 0a07 	and.w	sl, ip, r7
 802330a:	ea4f 2e36 	mov.w	lr, r6, ror #8
 802330e:	fa2f f585 	sxtb16	r5, r5
 8023312:	fa2f fe8e 	sxtb16	lr, lr
 8023316:	fa1f fb85 	uxth.w	fp, r5
 802331a:	ea0e 0907 	and.w	r9, lr, r7
 802331e:	ea4a 4a15 	orr.w	sl, sl, r5, lsr #16
 8023322:	fa2f f686 	sxtb16	r6, r6
 8023326:	b2b5      	uxth	r5, r6
 8023328:	f841 ac1c 	str.w	sl, [r1, #-28]
 802332c:	ea4b 4c0c 	orr.w	ip, fp, ip, lsl #16
 8023330:	ea49 4616 	orr.w	r6, r9, r6, lsr #16
 8023334:	ea45 450e 	orr.w	r5, r5, lr, lsl #16
 8023338:	f841 cc20 	str.w	ip, [r1, #-32]
 802333c:	f841 6c14 	str.w	r6, [r1, #-20]
 8023340:	f841 5c18 	str.w	r5, [r1, #-24]
 8023344:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8023348:	f853 5c04 	ldr.w	r5, [r3, #-4]
 802334c:	ea4f 2e36 	mov.w	lr, r6, ror #8
 8023350:	fa2f fe8e 	sxtb16	lr, lr
 8023354:	ea0e 0a07 	and.w	sl, lr, r7
 8023358:	ea4f 2c35 	mov.w	ip, r5, ror #8
 802335c:	fa2f f686 	sxtb16	r6, r6
 8023360:	fa2f f98c 	sxtb16	r9, ip
 8023364:	fa1f fb86 	uxth.w	fp, r6
 8023368:	fa2f f585 	sxtb16	r5, r5
 802336c:	ea4a 4616 	orr.w	r6, sl, r6, lsr #16
 8023370:	ea09 0a07 	and.w	sl, r9, r7
 8023374:	fa1f fc85 	uxth.w	ip, r5
 8023378:	ea4b 4e0e 	orr.w	lr, fp, lr, lsl #16
 802337c:	f841 6c0c 	str.w	r6, [r1, #-12]
 8023380:	ea4a 4515 	orr.w	r5, sl, r5, lsr #16
 8023384:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 8023388:	f841 ec10 	str.w	lr, [r1, #-16]
 802338c:	f841 5c04 	str.w	r5, [r1, #-4]
 8023390:	f841 cc08 	str.w	ip, [r1, #-8]
 8023394:	428c      	cmp	r4, r1
 8023396:	d1ae      	bne.n	80232f6 <st_int8_to16_no_shift+0x1a>
 8023398:	ea4f 1608 	mov.w	r6, r8, lsl #4
 802339c:	f1a2 0c04 	sub.w	ip, r2, #4
 80233a0:	45b4      	cmp	ip, r6
 80233a2:	4430      	add	r0, r6
 80233a4:	db38      	blt.n	8023418 <st_int8_to16_no_shift+0x13c>
 80233a6:	ebac 0c06 	sub.w	ip, ip, r6
 80233aa:	4607      	mov	r7, r0
 80233ac:	f8df e06c 	ldr.w	lr, [pc, #108]	; 802341c <st_int8_to16_no_shift+0x140>
 80233b0:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 80233b4:	f10c 0801 	add.w	r8, ip, #1
 80233b8:	eb04 05c8 	add.w	r5, r4, r8, lsl #3
 80233bc:	f857 3b04 	ldr.w	r3, [r7], #4
 80233c0:	3408      	adds	r4, #8
 80233c2:	fa2f f983 	sxtb16	r9, r3
 80233c6:	ea4f 2333 	mov.w	r3, r3, ror #8
 80233ca:	fa1f f189 	uxth.w	r1, r9
 80233ce:	fa2f f383 	sxtb16	r3, r3
 80233d2:	ea03 0a0e 	and.w	sl, r3, lr
 80233d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80233da:	ea4a 4919 	orr.w	r9, sl, r9, lsr #16
 80233de:	f844 3c08 	str.w	r3, [r4, #-8]
 80233e2:	f844 9c04 	str.w	r9, [r4, #-4]
 80233e6:	42a5      	cmp	r5, r4
 80233e8:	d1e8      	bne.n	80233bc <st_int8_to16_no_shift+0xe0>
 80233ea:	3604      	adds	r6, #4
 80233ec:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 80233f0:	eb06 068c 	add.w	r6, r6, ip, lsl #2
 80233f4:	42b2      	cmp	r2, r6
 80233f6:	dd07      	ble.n	8023408 <st_int8_to16_no_shift+0x12c>
 80233f8:	1b92      	subs	r2, r2, r6
 80233fa:	4402      	add	r2, r0
 80233fc:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8023400:	4290      	cmp	r0, r2
 8023402:	f825 3b02 	strh.w	r3, [r5], #2
 8023406:	d1f9      	bne.n	80233fc <st_int8_to16_no_shift+0x120>
 8023408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802340c:	2600      	movs	r6, #0
 802340e:	f1a2 0c04 	sub.w	ip, r2, #4
 8023412:	460c      	mov	r4, r1
 8023414:	45b4      	cmp	ip, r6
 8023416:	dac6      	bge.n	80233a6 <st_int8_to16_no_shift+0xca>
 8023418:	4625      	mov	r5, r4
 802341a:	e7eb      	b.n	80233f4 <st_int8_to16_no_shift+0x118>
 802341c:	ffff0000 	.word	0xffff0000

08023420 <st_int8_to16_dual>:
 8023420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023424:	b08b      	sub	sp, #44	; 0x2c
 8023426:	468a      	mov	sl, r1
 8023428:	eb00 0802 	add.w	r8, r0, r2
 802342c:	9309      	str	r3, [sp, #36]	; 0x24
 802342e:	085b      	lsrs	r3, r3, #1
 8023430:	9200      	str	r2, [sp, #0]
 8023432:	9301      	str	r3, [sp, #4]
 8023434:	f000 8123 	beq.w	802367e <st_int8_to16_dual+0x25e>
 8023438:	f1a2 0310 	sub.w	r3, r2, #16
 802343c:	3a04      	subs	r2, #4
 802343e:	46c2      	mov	sl, r8
 8023440:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 80236f8 <st_int8_to16_dual+0x2d8>
 8023444:	9307      	str	r3, [sp, #28]
 8023446:	091b      	lsrs	r3, r3, #4
 8023448:	9206      	str	r2, [sp, #24]
 802344a:	4688      	mov	r8, r1
 802344c:	3301      	adds	r3, #1
 802344e:	011a      	lsls	r2, r3, #4
 8023450:	019b      	lsls	r3, r3, #6
 8023452:	9202      	str	r2, [sp, #8]
 8023454:	9308      	str	r3, [sp, #32]
 8023456:	9b07      	ldr	r3, [sp, #28]
 8023458:	2b00      	cmp	r3, #0
 802345a:	f2c0 8145 	blt.w	80236e8 <st_int8_to16_dual+0x2c8>
 802345e:	9b02      	ldr	r3, [sp, #8]
 8023460:	4655      	mov	r5, sl
 8023462:	18c4      	adds	r4, r0, r3
 8023464:	4643      	mov	r3, r8
 8023466:	682e      	ldr	r6, [r5, #0]
 8023468:	3010      	adds	r0, #16
 802346a:	f850 1c10 	ldr.w	r1, [r0, #-16]
 802346e:	3510      	adds	r5, #16
 8023470:	fa2f f286 	sxtb16	r2, r6
 8023474:	ea4f 2c36 	mov.w	ip, r6, ror #8
 8023478:	3340      	adds	r3, #64	; 0x40
 802347a:	fa2f fc8c 	sxtb16	ip, ip
 802347e:	ea0c 0609 	and.w	r6, ip, r9
 8023482:	ea4f 2731 	mov.w	r7, r1, ror #8
 8023486:	fa2f f181 	sxtb16	r1, r1
 802348a:	ea46 4612 	orr.w	r6, r6, r2, lsr #16
 802348e:	fa1f fe81 	uxth.w	lr, r1
 8023492:	fa2f f787 	sxtb16	r7, r7
 8023496:	b292      	uxth	r2, r2
 8023498:	ea07 0b09 	and.w	fp, r7, r9
 802349c:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
 80234a0:	f843 6c34 	str.w	r6, [r3, #-52]
 80234a4:	ea4b 4111 	orr.w	r1, fp, r1, lsr #16
 80234a8:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80234ac:	f843 7c40 	str.w	r7, [r3, #-64]
 80234b0:	f843 1c38 	str.w	r1, [r3, #-56]
 80234b4:	f843 2c3c 	str.w	r2, [r3, #-60]
 80234b8:	f855 6c0c 	ldr.w	r6, [r5, #-12]
 80234bc:	f850 1c0c 	ldr.w	r1, [r0, #-12]
 80234c0:	fa2f f286 	sxtb16	r2, r6
 80234c4:	ea4f 2c36 	mov.w	ip, r6, ror #8
 80234c8:	fa2f fc8c 	sxtb16	ip, ip
 80234cc:	ea0c 0609 	and.w	r6, ip, r9
 80234d0:	ea4f 2731 	mov.w	r7, r1, ror #8
 80234d4:	fa2f f181 	sxtb16	r1, r1
 80234d8:	ea46 4612 	orr.w	r6, r6, r2, lsr #16
 80234dc:	fa1f fe81 	uxth.w	lr, r1
 80234e0:	fa2f f787 	sxtb16	r7, r7
 80234e4:	b292      	uxth	r2, r2
 80234e6:	ea07 0b09 	and.w	fp, r7, r9
 80234ea:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
 80234ee:	f843 6c24 	str.w	r6, [r3, #-36]
 80234f2:	ea4b 4111 	orr.w	r1, fp, r1, lsr #16
 80234f6:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80234fa:	f843 7c30 	str.w	r7, [r3, #-48]
 80234fe:	f843 1c28 	str.w	r1, [r3, #-40]
 8023502:	f843 2c2c 	str.w	r2, [r3, #-44]
 8023506:	f855 6c08 	ldr.w	r6, [r5, #-8]
 802350a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 802350e:	fa2f f286 	sxtb16	r2, r6
 8023512:	ea4f 2c36 	mov.w	ip, r6, ror #8
 8023516:	fa2f fc8c 	sxtb16	ip, ip
 802351a:	ea0c 0609 	and.w	r6, ip, r9
 802351e:	ea4f 2731 	mov.w	r7, r1, ror #8
 8023522:	fa2f f181 	sxtb16	r1, r1
 8023526:	ea46 4612 	orr.w	r6, r6, r2, lsr #16
 802352a:	fa1f fe81 	uxth.w	lr, r1
 802352e:	fa2f f787 	sxtb16	r7, r7
 8023532:	b292      	uxth	r2, r2
 8023534:	ea07 0b09 	and.w	fp, r7, r9
 8023538:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
 802353c:	f843 6c14 	str.w	r6, [r3, #-20]
 8023540:	ea4b 4111 	orr.w	r1, fp, r1, lsr #16
 8023544:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8023548:	f843 7c20 	str.w	r7, [r3, #-32]
 802354c:	f843 1c18 	str.w	r1, [r3, #-24]
 8023550:	f843 2c1c 	str.w	r2, [r3, #-28]
 8023554:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8023558:	f850 1c04 	ldr.w	r1, [r0, #-4]
 802355c:	4284      	cmp	r4, r0
 802355e:	fa2f f286 	sxtb16	r2, r6
 8023562:	ea4f 2c36 	mov.w	ip, r6, ror #8
 8023566:	fa2f fc8c 	sxtb16	ip, ip
 802356a:	ea0c 0609 	and.w	r6, ip, r9
 802356e:	ea4f 2731 	mov.w	r7, r1, ror #8
 8023572:	fa2f f181 	sxtb16	r1, r1
 8023576:	fa2f f787 	sxtb16	r7, r7
 802357a:	fa1f fe81 	uxth.w	lr, r1
 802357e:	ea07 0b09 	and.w	fp, r7, r9
 8023582:	ea46 4612 	orr.w	r6, r6, r2, lsr #16
 8023586:	b292      	uxth	r2, r2
 8023588:	ea4b 4111 	orr.w	r1, fp, r1, lsr #16
 802358c:	f843 6c04 	str.w	r6, [r3, #-4]
 8023590:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
 8023594:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8023598:	f843 1c08 	str.w	r1, [r3, #-8]
 802359c:	f843 7c10 	str.w	r7, [r3, #-16]
 80235a0:	f843 2c0c 	str.w	r2, [r3, #-12]
 80235a4:	f47f af5f 	bne.w	8023466 <st_int8_to16_dual+0x46>
 80235a8:	9b08      	ldr	r3, [sp, #32]
 80235aa:	4498      	add	r8, r3
 80235ac:	9b02      	ldr	r3, [sp, #8]
 80235ae:	449a      	add	sl, r3
 80235b0:	469c      	mov	ip, r3
 80235b2:	9b06      	ldr	r3, [sp, #24]
 80235b4:	4563      	cmp	r3, ip
 80235b6:	db3f      	blt.n	8023638 <st_int8_to16_dual+0x218>
 80235b8:	eba3 030c 	sub.w	r3, r3, ip
 80235bc:	4657      	mov	r7, sl
 80235be:	4645      	mov	r5, r8
 80235c0:	089b      	lsrs	r3, r3, #2
 80235c2:	9303      	str	r3, [sp, #12]
 80235c4:	3301      	adds	r3, #1
 80235c6:	9304      	str	r3, [sp, #16]
 80235c8:	009b      	lsls	r3, r3, #2
 80235ca:	eb04 0e03 	add.w	lr, r4, r3
 80235ce:	9305      	str	r3, [sp, #20]
 80235d0:	f854 2b04 	ldr.w	r2, [r4], #4
 80235d4:	3510      	adds	r5, #16
 80235d6:	f857 3b04 	ldr.w	r3, [r7], #4
 80235da:	ea4f 2032 	mov.w	r0, r2, ror #8
 80235de:	4574      	cmp	r4, lr
 80235e0:	fa2f f080 	sxtb16	r0, r0
 80235e4:	ea00 0609 	and.w	r6, r0, r9
 80235e8:	ea4f 2133 	mov.w	r1, r3, ror #8
 80235ec:	fa2f f282 	sxtb16	r2, r2
 80235f0:	fa2f f181 	sxtb16	r1, r1
 80235f4:	fa1f fb82 	uxth.w	fp, r2
 80235f8:	ea46 4212 	orr.w	r2, r6, r2, lsr #16
 80235fc:	ea01 0609 	and.w	r6, r1, r9
 8023600:	fa2f f383 	sxtb16	r3, r3
 8023604:	ea46 4613 	orr.w	r6, r6, r3, lsr #16
 8023608:	f845 2c08 	str.w	r2, [r5, #-8]
 802360c:	b29b      	uxth	r3, r3
 802360e:	ea4b 4000 	orr.w	r0, fp, r0, lsl #16
 8023612:	f845 6c04 	str.w	r6, [r5, #-4]
 8023616:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 802361a:	f845 0c10 	str.w	r0, [r5, #-16]
 802361e:	f845 3c0c 	str.w	r3, [r5, #-12]
 8023622:	d1d5      	bne.n	80235d0 <st_int8_to16_dual+0x1b0>
 8023624:	9b04      	ldr	r3, [sp, #16]
 8023626:	f10c 0c04 	add.w	ip, ip, #4
 802362a:	eb08 1803 	add.w	r8, r8, r3, lsl #4
 802362e:	9b05      	ldr	r3, [sp, #20]
 8023630:	449a      	add	sl, r3
 8023632:	9b03      	ldr	r3, [sp, #12]
 8023634:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 8023638:	9b00      	ldr	r3, [sp, #0]
 802363a:	4563      	cmp	r3, ip
 802363c:	dd14      	ble.n	8023668 <st_int8_to16_dual+0x248>
 802363e:	eba3 0c0c 	sub.w	ip, r3, ip
 8023642:	4652      	mov	r2, sl
 8023644:	f108 0304 	add.w	r3, r8, #4
 8023648:	eb04 000c 	add.w	r0, r4, ip
 802364c:	f914 1b01 	ldrsb.w	r1, [r4], #1
 8023650:	3304      	adds	r3, #4
 8023652:	f823 1c08 	strh.w	r1, [r3, #-8]
 8023656:	4284      	cmp	r4, r0
 8023658:	f912 1b01 	ldrsb.w	r1, [r2], #1
 802365c:	f823 1c06 	strh.w	r1, [r3, #-6]
 8023660:	d1f4      	bne.n	802364c <st_int8_to16_dual+0x22c>
 8023662:	44e2      	add	sl, ip
 8023664:	eb08 088c 	add.w	r8, r8, ip, lsl #2
 8023668:	9b01      	ldr	r3, [sp, #4]
 802366a:	9a00      	ldr	r2, [sp, #0]
 802366c:	3b01      	subs	r3, #1
 802366e:	18a0      	adds	r0, r4, r2
 8023670:	4492      	add	sl, r2
 8023672:	b29b      	uxth	r3, r3
 8023674:	9301      	str	r3, [sp, #4]
 8023676:	2b00      	cmp	r3, #0
 8023678:	f47f aeed 	bne.w	8023456 <st_int8_to16_dual+0x36>
 802367c:	46c2      	mov	sl, r8
 802367e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023680:	07db      	lsls	r3, r3, #31
 8023682:	d52e      	bpl.n	80236e2 <st_int8_to16_dual+0x2c2>
 8023684:	9b00      	ldr	r3, [sp, #0]
 8023686:	3b04      	subs	r3, #4
 8023688:	d432      	bmi.n	80236f0 <st_int8_to16_dual+0x2d0>
 802368a:	089b      	lsrs	r3, r3, #2
 802368c:	4605      	mov	r5, r0
 802368e:	4f1a      	ldr	r7, [pc, #104]	; (80236f8 <st_int8_to16_dual+0x2d8>)
 8023690:	1c5e      	adds	r6, r3, #1
 8023692:	eb0a 04c6 	add.w	r4, sl, r6, lsl #3
 8023696:	f855 3b04 	ldr.w	r3, [r5], #4
 802369a:	f10a 0a08 	add.w	sl, sl, #8
 802369e:	fa2f fc83 	sxtb16	ip, r3
 80236a2:	ea4f 2333 	mov.w	r3, r3, ror #8
 80236a6:	fa1f f18c 	uxth.w	r1, ip
 80236aa:	fa2f f383 	sxtb16	r3, r3
 80236ae:	ea03 0207 	and.w	r2, r3, r7
 80236b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80236b6:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 80236ba:	f84a 3c08 	str.w	r3, [sl, #-8]
 80236be:	f84a 2c04 	str.w	r2, [sl, #-4]
 80236c2:	4554      	cmp	r4, sl
 80236c4:	d1e7      	bne.n	8023696 <st_int8_to16_dual+0x276>
 80236c6:	00b3      	lsls	r3, r6, #2
 80236c8:	4418      	add	r0, r3
 80236ca:	9a00      	ldr	r2, [sp, #0]
 80236cc:	429a      	cmp	r2, r3
 80236ce:	dd08      	ble.n	80236e2 <st_int8_to16_dual+0x2c2>
 80236d0:	1ad3      	subs	r3, r2, r3
 80236d2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80236d6:	f910 2b01 	ldrsb.w	r2, [r0], #1
 80236da:	f824 2b02 	strh.w	r2, [r4], #2
 80236de:	429c      	cmp	r4, r3
 80236e0:	d1f9      	bne.n	80236d6 <st_int8_to16_dual+0x2b6>
 80236e2:	b00b      	add	sp, #44	; 0x2c
 80236e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80236e8:	4604      	mov	r4, r0
 80236ea:	f04f 0c00 	mov.w	ip, #0
 80236ee:	e760      	b.n	80235b2 <st_int8_to16_dual+0x192>
 80236f0:	4654      	mov	r4, sl
 80236f2:	2300      	movs	r3, #0
 80236f4:	e7e9      	b.n	80236ca <st_int8_to16_dual+0x2aa>
 80236f6:	bf00      	nop
 80236f8:	ffff0000 	.word	0xffff0000

080236fc <st_sssa8_ch_fullW_prefetch>:
 80236fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023700:	b087      	sub	sp, #28
 8023702:	eb00 0c02 	add.w	ip, r0, r2
 8023706:	9105      	str	r1, [sp, #20]
 8023708:	1049      	asrs	r1, r1, #1
 802370a:	9100      	str	r1, [sp, #0]
 802370c:	f000 80d7 	beq.w	80238be <st_sssa8_ch_fullW_prefetch+0x1c2>
 8023710:	f1a2 0110 	sub.w	r1, r2, #16
 8023714:	1ed4      	subs	r4, r2, #3
 8023716:	0909      	lsrs	r1, r1, #4
 8023718:	9402      	str	r4, [sp, #8]
 802371a:	1f14      	subs	r4, r2, #4
 802371c:	3101      	adds	r1, #1
 802371e:	9404      	str	r4, [sp, #16]
 8023720:	ea4f 1a01 	mov.w	sl, r1, lsl #4
 8023724:	0189      	lsls	r1, r1, #6
 8023726:	9103      	str	r1, [sp, #12]
 8023728:	2a0f      	cmp	r2, #15
 802372a:	f340 80dd 	ble.w	80238e8 <st_sssa8_ch_fullW_prefetch+0x1ec>
 802372e:	eb00 040a 	add.w	r4, r0, sl
 8023732:	4665      	mov	r5, ip
 8023734:	4619      	mov	r1, r3
 8023736:	6807      	ldr	r7, [r0, #0]
 8023738:	3010      	adds	r0, #16
 802373a:	682e      	ldr	r6, [r5, #0]
 802373c:	3140      	adds	r1, #64	; 0x40
 802373e:	ea4f 2e37 	mov.w	lr, r7, ror #8
 8023742:	3510      	adds	r5, #16
 8023744:	fa2f f787 	sxtb16	r7, r7
 8023748:	fa2f fe8e 	sxtb16	lr, lr
 802374c:	f841 7c40 	str.w	r7, [r1, #-64]
 8023750:	ea4f 2736 	mov.w	r7, r6, ror #8
 8023754:	f841 ec3c 	str.w	lr, [r1, #-60]
 8023758:	fa2f f787 	sxtb16	r7, r7
 802375c:	fa2f f686 	sxtb16	r6, r6
 8023760:	f841 7c34 	str.w	r7, [r1, #-52]
 8023764:	f841 6c38 	str.w	r6, [r1, #-56]
 8023768:	f850 7c0c 	ldr.w	r7, [r0, #-12]
 802376c:	f855 6c0c 	ldr.w	r6, [r5, #-12]
 8023770:	ea4f 2e37 	mov.w	lr, r7, ror #8
 8023774:	fa2f f787 	sxtb16	r7, r7
 8023778:	fa2f fe8e 	sxtb16	lr, lr
 802377c:	f841 7c30 	str.w	r7, [r1, #-48]
 8023780:	ea4f 2736 	mov.w	r7, r6, ror #8
 8023784:	f841 ec2c 	str.w	lr, [r1, #-44]
 8023788:	fa2f f787 	sxtb16	r7, r7
 802378c:	fa2f f686 	sxtb16	r6, r6
 8023790:	f841 7c24 	str.w	r7, [r1, #-36]
 8023794:	f841 6c28 	str.w	r6, [r1, #-40]
 8023798:	f850 7c08 	ldr.w	r7, [r0, #-8]
 802379c:	f855 6c08 	ldr.w	r6, [r5, #-8]
 80237a0:	ea4f 2e37 	mov.w	lr, r7, ror #8
 80237a4:	fa2f f787 	sxtb16	r7, r7
 80237a8:	fa2f fe8e 	sxtb16	lr, lr
 80237ac:	f841 7c20 	str.w	r7, [r1, #-32]
 80237b0:	ea4f 2736 	mov.w	r7, r6, ror #8
 80237b4:	f841 ec1c 	str.w	lr, [r1, #-28]
 80237b8:	fa2f f787 	sxtb16	r7, r7
 80237bc:	fa2f f686 	sxtb16	r6, r6
 80237c0:	f841 7c14 	str.w	r7, [r1, #-20]
 80237c4:	f841 6c18 	str.w	r6, [r1, #-24]
 80237c8:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80237cc:	4284      	cmp	r4, r0
 80237ce:	f855 6c04 	ldr.w	r6, [r5, #-4]
 80237d2:	ea4f 2e37 	mov.w	lr, r7, ror #8
 80237d6:	fa2f f787 	sxtb16	r7, r7
 80237da:	fa2f fe8e 	sxtb16	lr, lr
 80237de:	f841 7c10 	str.w	r7, [r1, #-16]
 80237e2:	ea4f 2736 	mov.w	r7, r6, ror #8
 80237e6:	f841 ec0c 	str.w	lr, [r1, #-12]
 80237ea:	fa2f f787 	sxtb16	r7, r7
 80237ee:	fa2f f686 	sxtb16	r6, r6
 80237f2:	f841 7c04 	str.w	r7, [r1, #-4]
 80237f6:	f841 6c08 	str.w	r6, [r1, #-8]
 80237fa:	d19c      	bne.n	8023736 <st_sssa8_ch_fullW_prefetch+0x3a>
 80237fc:	9903      	ldr	r1, [sp, #12]
 80237fe:	44d4      	add	ip, sl
 8023800:	46d6      	mov	lr, sl
 8023802:	440b      	add	r3, r1
 8023804:	9902      	ldr	r1, [sp, #8]
 8023806:	458e      	cmp	lr, r1
 8023808:	da30      	bge.n	802386c <st_sssa8_ch_fullW_prefetch+0x170>
 802380a:	9904      	ldr	r1, [sp, #16]
 802380c:	4667      	mov	r7, ip
 802380e:	eba1 090e 	sub.w	r9, r1, lr
 8023812:	4619      	mov	r1, r3
 8023814:	ea4f 0999 	mov.w	r9, r9, lsr #2
 8023818:	f109 0b01 	add.w	fp, r9, #1
 802381c:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8023820:	eb04 0800 	add.w	r8, r4, r0
 8023824:	9001      	str	r0, [sp, #4]
 8023826:	f854 5b04 	ldr.w	r5, [r4], #4
 802382a:	3110      	adds	r1, #16
 802382c:	f857 0b04 	ldr.w	r0, [r7], #4
 8023830:	4544      	cmp	r4, r8
 8023832:	ea4f 2635 	mov.w	r6, r5, ror #8
 8023836:	fa2f f585 	sxtb16	r5, r5
 802383a:	fa2f f686 	sxtb16	r6, r6
 802383e:	f841 5c10 	str.w	r5, [r1, #-16]
 8023842:	ea4f 2530 	mov.w	r5, r0, ror #8
 8023846:	f841 6c0c 	str.w	r6, [r1, #-12]
 802384a:	fa2f f585 	sxtb16	r5, r5
 802384e:	fa2f f080 	sxtb16	r0, r0
 8023852:	f841 5c04 	str.w	r5, [r1, #-4]
 8023856:	f841 0c08 	str.w	r0, [r1, #-8]
 802385a:	d1e4      	bne.n	8023826 <st_sssa8_ch_fullW_prefetch+0x12a>
 802385c:	f10e 0e04 	add.w	lr, lr, #4
 8023860:	9901      	ldr	r1, [sp, #4]
 8023862:	eb03 130b 	add.w	r3, r3, fp, lsl #4
 8023866:	448c      	add	ip, r1
 8023868:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 802386c:	4572      	cmp	r2, lr
 802386e:	dd1f      	ble.n	80238b0 <st_sssa8_ch_fullW_prefetch+0x1b4>
 8023870:	f994 0000 	ldrsb.w	r0, [r4]
 8023874:	f10e 0101 	add.w	r1, lr, #1
 8023878:	8018      	strh	r0, [r3, #0]
 802387a:	428a      	cmp	r2, r1
 802387c:	f99c 0000 	ldrsb.w	r0, [ip]
 8023880:	8058      	strh	r0, [r3, #2]
 8023882:	dd2c      	ble.n	80238de <st_sssa8_ch_fullW_prefetch+0x1e2>
 8023884:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8023888:	f10e 0e02 	add.w	lr, lr, #2
 802388c:	8099      	strh	r1, [r3, #4]
 802388e:	4572      	cmp	r2, lr
 8023890:	f99c 1001 	ldrsb.w	r1, [ip, #1]
 8023894:	80d9      	strh	r1, [r3, #6]
 8023896:	dd2b      	ble.n	80238f0 <st_sssa8_ch_fullW_prefetch+0x1f4>
 8023898:	f994 1002 	ldrsb.w	r1, [r4, #2]
 802389c:	f10c 0c03 	add.w	ip, ip, #3
 80238a0:	3403      	adds	r4, #3
 80238a2:	330c      	adds	r3, #12
 80238a4:	f823 1c04 	strh.w	r1, [r3, #-4]
 80238a8:	f91c 1c01 	ldrsb.w	r1, [ip, #-1]
 80238ac:	f823 1c02 	strh.w	r1, [r3, #-2]
 80238b0:	9900      	ldr	r1, [sp, #0]
 80238b2:	18a0      	adds	r0, r4, r2
 80238b4:	4494      	add	ip, r2
 80238b6:	3901      	subs	r1, #1
 80238b8:	9100      	str	r1, [sp, #0]
 80238ba:	f47f af35 	bne.w	8023728 <st_sssa8_ch_fullW_prefetch+0x2c>
 80238be:	9905      	ldr	r1, [sp, #20]
 80238c0:	07c9      	lsls	r1, r1, #31
 80238c2:	d509      	bpl.n	80238d8 <st_sssa8_ch_fullW_prefetch+0x1dc>
 80238c4:	2a00      	cmp	r2, #0
 80238c6:	dd07      	ble.n	80238d8 <st_sssa8_ch_fullW_prefetch+0x1dc>
 80238c8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80238cc:	f910 1b01 	ldrsb.w	r1, [r0], #1
 80238d0:	f823 1b02 	strh.w	r1, [r3], #2
 80238d4:	4293      	cmp	r3, r2
 80238d6:	d1f9      	bne.n	80238cc <st_sssa8_ch_fullW_prefetch+0x1d0>
 80238d8:	b007      	add	sp, #28
 80238da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238de:	3401      	adds	r4, #1
 80238e0:	f10c 0c01 	add.w	ip, ip, #1
 80238e4:	3304      	adds	r3, #4
 80238e6:	e7e3      	b.n	80238b0 <st_sssa8_ch_fullW_prefetch+0x1b4>
 80238e8:	4604      	mov	r4, r0
 80238ea:	f04f 0e00 	mov.w	lr, #0
 80238ee:	e789      	b.n	8023804 <st_sssa8_ch_fullW_prefetch+0x108>
 80238f0:	3402      	adds	r4, #2
 80238f2:	f10c 0c02 	add.w	ip, ip, #2
 80238f6:	3308      	adds	r3, #8
 80238f8:	e7da      	b.n	80238b0 <st_sssa8_ch_fullW_prefetch+0x1b4>
 80238fa:	bf00      	nop

080238fc <st_sssa8_ch_nn_mat_mult_nt_t>:
 80238fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023900:	b0b3      	sub	sp, #204	; 0xcc
 8023902:	9023      	str	r0, [sp, #140]	; 0x8c
 8023904:	9224      	str	r2, [sp, #144]	; 0x90
 8023906:	9844      	ldr	r0, [sp, #272]	; 0x110
 8023908:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 802390a:	9129      	str	r1, [sp, #164]	; 0xa4
 802390c:	2800      	cmp	r0, #0
 802390e:	bf18      	it	ne
 8023910:	4602      	movne	r2, r0
 8023912:	932e      	str	r3, [sp, #184]	; 0xb8
 8023914:	f8dd b100 	ldr.w	fp, [sp, #256]	; 0x100
 8023918:	9243      	str	r2, [sp, #268]	; 0x10c
 802391a:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 802391c:	2a01      	cmp	r2, #1
 802391e:	f340 823b 	ble.w	8023d98 <st_sssa8_ch_nn_mat_mult_nt_t+0x49c>
 8023922:	f00b 0403 	and.w	r4, fp, #3
 8023926:	3a02      	subs	r2, #2
 8023928:	ea4f 00ab 	mov.w	r0, fp, asr #2
 802392c:	461e      	mov	r6, r3
 802392e:	942c      	str	r4, [sp, #176]	; 0xb0
 8023930:	f1ab 040f 	sub.w	r4, fp, #15
 8023934:	0852      	lsrs	r2, r2, #1
 8023936:	f1ab 0310 	sub.w	r3, fp, #16
 802393a:	9411      	str	r4, [sp, #68]	; 0x44
 802393c:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 802393e:	091b      	lsrs	r3, r3, #4
 8023940:	9230      	str	r2, [sp, #192]	; 0xc0
 8023942:	00d2      	lsls	r2, r2, #3
 8023944:	f004 0401 	and.w	r4, r4, #1
 8023948:	3301      	adds	r3, #1
 802394a:	320c      	adds	r2, #12
 802394c:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 802394e:	9425      	str	r4, [sp, #148]	; 0x94
 8023950:	9c3d      	ldr	r4, [sp, #244]	; 0xf4
 8023952:	106d      	asrs	r5, r5, #1
 8023954:	9227      	str	r2, [sp, #156]	; 0x9c
 8023956:	3402      	adds	r4, #2
 8023958:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 802395a:	902b      	str	r0, [sp, #172]	; 0xac
 802395c:	9417      	str	r4, [sp, #92]	; 0x5c
 802395e:	0084      	lsls	r4, r0, #2
 8023960:	0052      	lsls	r2, r2, #1
 8023962:	9526      	str	r5, [sp, #152]	; 0x98
 8023964:	9431      	str	r4, [sp, #196]	; 0xc4
 8023966:	445c      	add	r4, fp
 8023968:	9212      	str	r2, [sp, #72]	; 0x48
 802396a:	942f      	str	r4, [sp, #188]	; 0xbc
 802396c:	011c      	lsls	r4, r3, #4
 802396e:	019b      	lsls	r3, r3, #6
 8023970:	9616      	str	r6, [sp, #88]	; 0x58
 8023972:	9405      	str	r4, [sp, #20]
 8023974:	9322      	str	r3, [sp, #136]	; 0x88
 8023976:	fb02 f305 	mul.w	r3, r2, r5
 802397a:	911c      	str	r1, [sp, #112]	; 0x70
 802397c:	9328      	str	r3, [sp, #160]	; 0xa0
 802397e:	0103      	lsls	r3, r0, #4
 8023980:	932d      	str	r3, [sp, #180]	; 0xb4
 8023982:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8023986:	9321      	str	r3, [sp, #132]	; 0x84
 8023988:	2304      	movs	r3, #4
 802398a:	9315      	str	r3, [sp, #84]	; 0x54
 802398c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8023990:	932a      	str	r3, [sp, #168]	; 0xa8
 8023992:	f1ab 0304 	sub.w	r3, fp, #4
 8023996:	9314      	str	r3, [sp, #80]	; 0x50
 8023998:	f10b 0301 	add.w	r3, fp, #1
 802399c:	930b      	str	r3, [sp, #44]	; 0x2c
 802399e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80239a0:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 80239a2:	9942      	ldr	r1, [sp, #264]	; 0x108
 80239a4:	441a      	add	r2, r3
 80239a6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80239a8:	4419      	add	r1, r3
 80239aa:	9220      	str	r2, [sp, #128]	; 0x80
 80239ac:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80239b0:	911f      	str	r1, [sp, #124]	; 0x7c
 80239b2:	920c      	str	r2, [sp, #48]	; 0x30
 80239b4:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80239b8:	f930 4c02 	ldrsh.w	r4, [r0, #-2]
 80239bc:	920e      	str	r2, [sp, #56]	; 0x38
 80239be:	f9b0 2000 	ldrsh.w	r2, [r0]
 80239c2:	9403      	str	r4, [sp, #12]
 80239c4:	9204      	str	r2, [sp, #16]
 80239c6:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 80239c8:	4611      	mov	r1, r2
 80239ca:	58ca      	ldr	r2, [r1, r3]
 80239cc:	920d      	str	r2, [sp, #52]	; 0x34
 80239ce:	9a42      	ldr	r2, [sp, #264]	; 0x108
 80239d0:	58d3      	ldr	r3, [r2, r3]
 80239d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80239d4:	9b44      	ldr	r3, [sp, #272]	; 0x110
 80239d6:	2b00      	cmp	r3, #0
 80239d8:	f000 83f2 	beq.w	80241c0 <st_sssa8_ch_nn_mat_mult_nt_t+0x8c4>
 80239dc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80239de:	2b00      	cmp	r3, #0
 80239e0:	f040 839c 	bne.w	802411c <st_sssa8_ch_nn_mat_mult_nt_t+0x820>
 80239e4:	4619      	mov	r1, r3
 80239e6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80239e8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80239ea:	1910      	adds	r0, r2, r4
 80239ec:	5912      	ldr	r2, [r2, r4]
 80239ee:	9c26      	ldr	r4, [sp, #152]	; 0x98
 80239f0:	4413      	add	r3, r2
 80239f2:	f850 0c04 	ldr.w	r0, [r0, #-4]
 80239f6:	930a      	str	r3, [sp, #40]	; 0x28
 80239f8:	180b      	adds	r3, r1, r0
 80239fa:	9309      	str	r3, [sp, #36]	; 0x24
 80239fc:	2c00      	cmp	r4, #0
 80239fe:	f000 8447 	beq.w	8024290 <st_sssa8_ch_nn_mat_mult_nt_t+0x994>
 8023a02:	9d40      	ldr	r5, [sp, #256]	; 0x100
 8023a04:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8023a06:	3d03      	subs	r5, #3
 8023a08:	9804      	ldr	r0, [sp, #16]
 8023a0a:	9903      	ldr	r1, [sp, #12]
 8023a0c:	9510      	str	r5, [sp, #64]	; 0x40
 8023a0e:	1e83      	subs	r3, r0, #2
 8023a10:	9d43      	ldr	r5, [sp, #268]	; 0x10c
 8023a12:	1e8a      	subs	r2, r1, #2
 8023a14:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
 8023a18:	4435      	add	r5, r6
 8023a1a:	f8dd b100 	ldr.w	fp, [sp, #256]	; 0x100
 8023a1e:	9402      	str	r4, [sp, #8]
 8023a20:	9513      	str	r5, [sp, #76]	; 0x4c
 8023a22:	2501      	movs	r5, #1
 8023a24:	fa05 f303 	lsl.w	r3, r5, r3
 8023a28:	fa05 f202 	lsl.w	r2, r5, r2
 8023a2c:	9319      	str	r3, [sp, #100]	; 0x64
 8023a2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023a30:	9218      	str	r2, [sp, #96]	; 0x60
 8023a32:	9301      	str	r3, [sp, #4]
 8023a34:	1a6b      	subs	r3, r5, r1
 8023a36:	931d      	str	r3, [sp, #116]	; 0x74
 8023a38:	1e4b      	subs	r3, r1, #1
 8023a3a:	931a      	str	r3, [sp, #104]	; 0x68
 8023a3c:	1a2b      	subs	r3, r5, r0
 8023a3e:	931e      	str	r3, [sp, #120]	; 0x78
 8023a40:	1e43      	subs	r3, r0, #1
 8023a42:	931b      	str	r3, [sp, #108]	; 0x6c
 8023a44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023a46:	2b00      	cmp	r3, #0
 8023a48:	f340 8259 	ble.w	8023efe <st_sssa8_ch_nn_mat_mult_nt_t+0x602>
 8023a4c:	9b05      	ldr	r3, [sp, #20]
 8023a4e:	eb0a 090b 	add.w	r9, sl, fp
 8023a52:	980a      	ldr	r0, [sp, #40]	; 0x28
 8023a54:	4453      	add	r3, sl
 8023a56:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8023a58:	f8dd 810c 	ldr.w	r8, [sp, #268]	; 0x10c
 8023a5c:	9300      	str	r3, [sp, #0]
 8023a5e:	4634      	mov	r4, r6
 8023a60:	4603      	mov	r3, r0
 8023a62:	f8da 5000 	ldr.w	r5, [sl]
 8023a66:	f8d8 2000 	ldr.w	r2, [r8]
 8023a6a:	fa2f f185 	sxtb16	r1, r5
 8023a6e:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8023a72:	fa2f f595 	sxtb16	r5, r5, ror #8
 8023a76:	f8d8 e008 	ldr.w	lr, [r8, #8]
 8023a7a:	f8d8 700c 	ldr.w	r7, [r8, #12]
 8023a7e:	fb21 6602 	smlad	r6, r1, r2, r6
 8023a82:	fb25 660c 	smlad	r6, r5, ip, r6
 8023a86:	fb21 000e 	smlad	r0, r1, lr, r0
 8023a8a:	fb25 0007 	smlad	r0, r5, r7, r0
 8023a8e:	f85a 100b 	ldr.w	r1, [sl, fp]
 8023a92:	fa2f f581 	sxtb16	r5, r1
 8023a96:	fa2f f191 	sxtb16	r1, r1, ror #8
 8023a9a:	fb25 4202 	smlad	r2, r5, r2, r4
 8023a9e:	fb25 330e 	smlad	r3, r5, lr, r3
 8023aa2:	fb21 220c 	smlad	r2, r1, ip, r2
 8023aa6:	f8d8 c010 	ldr.w	ip, [r8, #16]
 8023aaa:	f8d8 4014 	ldr.w	r4, [r8, #20]
 8023aae:	fb21 3707 	smlad	r7, r1, r7, r3
 8023ab2:	f8da 3004 	ldr.w	r3, [sl, #4]
 8023ab6:	f8d8 e018 	ldr.w	lr, [r8, #24]
 8023aba:	fa2f f583 	sxtb16	r5, r3
 8023abe:	f8d8 101c 	ldr.w	r1, [r8, #28]
 8023ac2:	fa2f f393 	sxtb16	r3, r3, ror #8
 8023ac6:	fb25 660c 	smlad	r6, r5, ip, r6
 8023aca:	fb23 6604 	smlad	r6, r3, r4, r6
 8023ace:	fb25 050e 	smlad	r5, r5, lr, r0
 8023ad2:	fb23 5501 	smlad	r5, r3, r1, r5
 8023ad6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8023ada:	fa2f f380 	sxtb16	r3, r0
 8023ade:	fa2f f090 	sxtb16	r0, r0, ror #8
 8023ae2:	fb23 2c0c 	smlad	ip, r3, ip, r2
 8023ae6:	fb23 770e 	smlad	r7, r3, lr, r7
 8023aea:	fb20 cc04 	smlad	ip, r0, r4, ip
 8023aee:	f8d8 4020 	ldr.w	r4, [r8, #32]
 8023af2:	f8d8 e024 	ldr.w	lr, [r8, #36]	; 0x24
 8023af6:	fb20 7101 	smlad	r1, r0, r1, r7
 8023afa:	f8da 2008 	ldr.w	r2, [sl, #8]
 8023afe:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 8023b02:	fa2f f382 	sxtb16	r3, r2
 8023b06:	f8d8 702c 	ldr.w	r7, [r8, #44]	; 0x2c
 8023b0a:	fa2f f292 	sxtb16	r2, r2, ror #8
 8023b0e:	fb23 6604 	smlad	r6, r3, r4, r6
 8023b12:	fb22 660e 	smlad	r6, r2, lr, r6
 8023b16:	fb23 5300 	smlad	r3, r3, r0, r5
 8023b1a:	fb22 3207 	smlad	r2, r2, r7, r3
 8023b1e:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8023b22:	fa2f f985 	sxtb16	r9, r5
 8023b26:	fa2f f595 	sxtb16	r5, r5, ror #8
 8023b2a:	fb29 c404 	smlad	r4, r9, r4, ip
 8023b2e:	fb29 1100 	smlad	r1, r9, r0, r1
 8023b32:	fb25 4e0e 	smlad	lr, r5, lr, r4
 8023b36:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
 8023b3a:	f8d8 4034 	ldr.w	r4, [r8, #52]	; 0x34
 8023b3e:	fb25 1707 	smlad	r7, r5, r7, r1
 8023b42:	f8da 000c 	ldr.w	r0, [sl, #12]
 8023b46:	f108 0840 	add.w	r8, r8, #64	; 0x40
 8023b4a:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8023b4e:	f10a 0a10 	add.w	sl, sl, #16
 8023b52:	f858 5c04 	ldr.w	r5, [r8, #-4]
 8023b56:	fa2f f380 	sxtb16	r3, r0
 8023b5a:	fa2f f090 	sxtb16	r0, r0, ror #8
 8023b5e:	fb23 660c 	smlad	r6, r3, ip, r6
 8023b62:	fb20 6604 	smlad	r6, r0, r4, r6
 8023b66:	fb23 2201 	smlad	r2, r3, r1, r2
 8023b6a:	fb20 2005 	smlad	r0, r0, r5, r2
 8023b6e:	eb0a 090b 	add.w	r9, sl, fp
 8023b72:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8023b76:	fa2f f283 	sxtb16	r2, r3
 8023b7a:	fa2f f393 	sxtb16	r3, r3, ror #8
 8023b7e:	fb22 ee0c 	smlad	lr, r2, ip, lr
 8023b82:	fb22 7701 	smlad	r7, r2, r1, r7
 8023b86:	fb23 e404 	smlad	r4, r3, r4, lr
 8023b8a:	fb23 7305 	smlad	r3, r3, r5, r7
 8023b8e:	9a00      	ldr	r2, [sp, #0]
 8023b90:	4592      	cmp	sl, r2
 8023b92:	f47f af66 	bne.w	8023a62 <st_sssa8_ch_nn_mat_mult_nt_t+0x166>
 8023b96:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023b98:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8023b9c:	9200      	str	r2, [sp, #0]
 8023b9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023ba0:	4591      	cmp	r9, r2
 8023ba2:	da44      	bge.n	8023c2e <st_sssa8_ch_nn_mat_mult_nt_t+0x332>
 8023ba4:	9914      	ldr	r1, [sp, #80]	; 0x50
 8023ba6:	f8cd 9020 	str.w	r9, [sp, #32]
 8023baa:	eba1 0209 	sub.w	r2, r1, r9
 8023bae:	f8cd b100 	str.w	fp, [sp, #256]	; 0x100
 8023bb2:	9f00      	ldr	r7, [sp, #0]
 8023bb4:	468b      	mov	fp, r1
 8023bb6:	0892      	lsrs	r2, r2, #2
 8023bb8:	9207      	str	r2, [sp, #28]
 8023bba:	3201      	adds	r2, #1
 8023bbc:	9206      	str	r2, [sp, #24]
 8023bbe:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8023bc2:	4691      	mov	r9, r2
 8023bc4:	f85a 2b04 	ldr.w	r2, [sl], #4
 8023bc8:	3710      	adds	r7, #16
 8023bca:	f857 5c10 	ldr.w	r5, [r7, #-16]
 8023bce:	f857 ec0c 	ldr.w	lr, [r7, #-12]
 8023bd2:	f857 8c08 	ldr.w	r8, [r7, #-8]
 8023bd6:	fa2f f182 	sxtb16	r1, r2
 8023bda:	f857 cc04 	ldr.w	ip, [r7, #-4]
 8023bde:	fa2f f292 	sxtb16	r2, r2, ror #8
 8023be2:	fb21 6605 	smlad	r6, r1, r5, r6
 8023be6:	fb22 660e 	smlad	r6, r2, lr, r6
 8023bea:	fb21 0008 	smlad	r0, r1, r8, r0
 8023bee:	fb22 000c 	smlad	r0, r2, ip, r0
 8023bf2:	f85a 200b 	ldr.w	r2, [sl, fp]
 8023bf6:	fa2f f182 	sxtb16	r1, r2
 8023bfa:	fa2f f292 	sxtb16	r2, r2, ror #8
 8023bfe:	fb21 4405 	smlad	r4, r1, r5, r4
 8023c02:	fb21 3308 	smlad	r3, r1, r8, r3
 8023c06:	fb22 440e 	smlad	r4, r2, lr, r4
 8023c0a:	fb22 330c 	smlad	r3, r2, ip, r3
 8023c0e:	45ca      	cmp	sl, r9
 8023c10:	d1d8      	bne.n	8023bc4 <st_sssa8_ch_nn_mat_mult_nt_t+0x2c8>
 8023c12:	9a00      	ldr	r2, [sp, #0]
 8023c14:	9906      	ldr	r1, [sp, #24]
 8023c16:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8023c1a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8023c1e:	f8dd b100 	ldr.w	fp, [sp, #256]	; 0x100
 8023c22:	f109 0904 	add.w	r9, r9, #4
 8023c26:	9200      	str	r2, [sp, #0]
 8023c28:	9a07      	ldr	r2, [sp, #28]
 8023c2a:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 8023c2e:	45cb      	cmp	fp, r9
 8023c30:	eb0a 020b 	add.w	r2, sl, fp
 8023c34:	f340 812a 	ble.w	8023e8c <st_sssa8_ch_nn_mat_mult_nt_t+0x590>
 8023c38:	9900      	ldr	r1, [sp, #0]
 8023c3a:	f109 0201 	add.w	r2, r9, #1
 8023c3e:	f99a c000 	ldrsb.w	ip, [sl]
 8023c42:	f9b1 7000 	ldrsh.w	r7, [r1]
 8023c46:	4593      	cmp	fp, r2
 8023c48:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8023c4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023c4e:	fb17 660c 	smlabb	r6, r7, ip, r6
 8023c52:	fb15 000c 	smlabb	r0, r5, ip, r0
 8023c56:	eb0a 0e01 	add.w	lr, sl, r1
 8023c5a:	f91a 100b 	ldrsb.w	r1, [sl, fp]
 8023c5e:	fb17 4401 	smlabb	r4, r7, r1, r4
 8023c62:	fb15 3301 	smlabb	r3, r5, r1, r3
 8023c66:	f340 8113 	ble.w	8023e90 <st_sssa8_ch_nn_mat_mult_nt_t+0x594>
 8023c6a:	9a00      	ldr	r2, [sp, #0]
 8023c6c:	f109 0902 	add.w	r9, r9, #2
 8023c70:	f99a 7001 	ldrsb.w	r7, [sl, #1]
 8023c74:	f10a 0c02 	add.w	ip, sl, #2
 8023c78:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 8023c7c:	45cb      	cmp	fp, r9
 8023c7e:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8023c82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023c84:	fb15 6607 	smlabb	r6, r5, r7, r6
 8023c88:	fb11 0007 	smlabb	r0, r1, r7, r0
 8023c8c:	4696      	mov	lr, r2
 8023c8e:	f91a 2002 	ldrsb.w	r2, [sl, r2]
 8023c92:	fb15 4402 	smlabb	r4, r5, r2, r4
 8023c96:	eb0c 050b 	add.w	r5, ip, fp
 8023c9a:	fb11 3302 	smlabb	r3, r1, r2, r3
 8023c9e:	f340 8137 	ble.w	8023f10 <st_sssa8_ch_nn_mat_mult_nt_t+0x614>
 8023ca2:	9a00      	ldr	r2, [sp, #0]
 8023ca4:	f10a 0703 	add.w	r7, sl, #3
 8023ca8:	f91c 500b 	ldrsb.w	r5, [ip, fp]
 8023cac:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 8023cb0:	f9b2 c00a 	ldrsh.w	ip, [r2, #10]
 8023cb4:	f99a 2002 	ldrsb.w	r2, [sl, #2]
 8023cb8:	fb11 4405 	smlabb	r4, r1, r5, r4
 8023cbc:	fb1c 3305 	smlabb	r3, ip, r5, r3
 8023cc0:	eb07 0a0b 	add.w	sl, r7, fp
 8023cc4:	fb11 6602 	smlabb	r6, r1, r2, r6
 8023cc8:	fb1c 0002 	smlabb	r0, ip, r2, r0
 8023ccc:	9a03      	ldr	r2, [sp, #12]
 8023cce:	2a15      	cmp	r2, #21
 8023cd0:	f340 80c7 	ble.w	8023e62 <st_sssa8_ch_nn_mat_mult_nt_t+0x566>
 8023cd4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8023cd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023cd8:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8023cda:	fb56 5602 	smmla	r6, r6, r2, r5
 8023cde:	fb54 5402 	smmla	r4, r4, r2, r5
 8023ce2:	410e      	asrs	r6, r1
 8023ce4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023ce6:	4416      	add	r6, r2
 8023ce8:	f306 0607 	ssat	r6, #8, r6
 8023cec:	410c      	asrs	r4, r1
 8023cee:	9901      	ldr	r1, [sp, #4]
 8023cf0:	4414      	add	r4, r2
 8023cf2:	700e      	strb	r6, [r1, #0]
 8023cf4:	f304 0407 	ssat	r4, #8, r4
 8023cf8:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8023cfa:	548c      	strb	r4, [r1, r2]
 8023cfc:	9a04      	ldr	r2, [sp, #16]
 8023cfe:	2a15      	cmp	r2, #21
 8023d00:	f340 809e 	ble.w	8023e40 <st_sssa8_ch_nn_mat_mult_nt_t+0x544>
 8023d04:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8023d06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023d08:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8023d0a:	fb50 4002 	smmla	r0, r0, r2, r4
 8023d0e:	fb53 4302 	smmla	r3, r3, r2, r4
 8023d12:	4108      	asrs	r0, r1
 8023d14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023d16:	4410      	add	r0, r2
 8023d18:	f300 0007 	ssat	r0, #8, r0
 8023d1c:	410b      	asrs	r3, r1
 8023d1e:	9901      	ldr	r1, [sp, #4]
 8023d20:	4413      	add	r3, r2
 8023d22:	7048      	strb	r0, [r1, #1]
 8023d24:	f303 0307 	ssat	r3, #8, r3
 8023d28:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8023d2a:	188a      	adds	r2, r1, r2
 8023d2c:	7053      	strb	r3, [r2, #1]
 8023d2e:	460b      	mov	r3, r1
 8023d30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023d32:	4413      	add	r3, r2
 8023d34:	9301      	str	r3, [sp, #4]
 8023d36:	9b02      	ldr	r3, [sp, #8]
 8023d38:	3b01      	subs	r3, #1
 8023d3a:	9302      	str	r3, [sp, #8]
 8023d3c:	f47f ae82 	bne.w	8023a44 <st_sssa8_ch_nn_mat_mult_nt_t+0x148>
 8023d40:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023d42:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8023d44:	eb03 0b02 	add.w	fp, r3, r2
 8023d48:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023d4a:	2b00      	cmp	r3, #0
 8023d4c:	f040 80e2 	bne.w	8023f14 <st_sssa8_ch_nn_mat_mult_nt_t+0x618>
 8023d50:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023d52:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8023d54:	4413      	add	r3, r2
 8023d56:	931c      	str	r3, [sp, #112]	; 0x70
 8023d58:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023d5a:	3302      	adds	r3, #2
 8023d5c:	9316      	str	r3, [sp, #88]	; 0x58
 8023d5e:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8023d60:	b11b      	cbz	r3, 8023d6a <st_sssa8_ch_nn_mat_mult_nt_t+0x46e>
 8023d62:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8023d64:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023d66:	4413      	add	r3, r2
 8023d68:	9343      	str	r3, [sp, #268]	; 0x10c
 8023d6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8023d6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023d6e:	3204      	adds	r2, #4
 8023d70:	3308      	adds	r3, #8
 8023d72:	9217      	str	r2, [sp, #92]	; 0x5c
 8023d74:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8023d76:	9315      	str	r3, [sp, #84]	; 0x54
 8023d78:	429a      	cmp	r2, r3
 8023d7a:	f47f ae11 	bne.w	80239a0 <st_sssa8_ch_nn_mat_mult_nt_t+0xa4>
 8023d7e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8023d80:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8023d82:	3201      	adds	r2, #1
 8023d84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023d86:	f8dd b100 	ldr.w	fp, [sp, #256]	; 0x100
 8023d8a:	fb02 1303 	mla	r3, r2, r3, r1
 8023d8e:	9329      	str	r3, [sp, #164]	; 0xa4
 8023d90:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023d92:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8023d96:	932e      	str	r3, [sp, #184]	; 0xb8
 8023d98:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8023d9a:	07db      	lsls	r3, r3, #31
 8023d9c:	d54c      	bpl.n	8023e38 <st_sssa8_ch_nn_mat_mult_nt_t+0x53c>
 8023d9e:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8023da0:	2b00      	cmp	r3, #0
 8023da2:	dd49      	ble.n	8023e38 <st_sssa8_ch_nn_mat_mult_nt_t+0x53c>
 8023da4:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8023da6:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 8023daa:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8023dae:	2500      	movs	r5, #0
 8023db0:	441e      	add	r6, r3
 8023db2:	f04f 0801 	mov.w	r8, #1
 8023db6:	441f      	add	r7, r3
 8023db8:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8023dba:	00b6      	lsls	r6, r6, #2
 8023dbc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8023dbe:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8023dc2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023dc4:	f8dd a0b8 	ldr.w	sl, [sp, #184]	; 0xb8
 8023dc8:	4433      	add	r3, r6
 8023dca:	f8dd 9104 	ldr.w	r9, [sp, #260]	; 0x104
 8023dce:	469e      	mov	lr, r3
 8023dd0:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8023dd2:	eb03 0c06 	add.w	ip, r3, r6
 8023dd6:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8023dd8:	f8cd e000 	str.w	lr, [sp]
 8023ddc:	441e      	add	r6, r3
 8023dde:	9b00      	ldr	r3, [sp, #0]
 8023de0:	f1bb 0f00 	cmp.w	fp, #0
 8023de4:	6819      	ldr	r1, [r3, #0]
 8023de6:	dd0d      	ble.n	8023e04 <st_sssa8_ch_nn_mat_mult_nt_t+0x508>
 8023de8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023dea:	eb02 0e0b 	add.w	lr, r2, fp
 8023dee:	1e58      	subs	r0, r3, #1
 8023df0:	f912 3b01 	ldrsb.w	r3, [r2], #1
 8023df4:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
 8023df8:	eba3 0309 	sub.w	r3, r3, r9
 8023dfc:	4572      	cmp	r2, lr
 8023dfe:	fb04 1103 	mla	r1, r4, r3, r1
 8023e02:	d1f5      	bne.n	8023df0 <st_sssa8_ch_nn_mat_mult_nt_t+0x4f4>
 8023e04:	f9b7 0000 	ldrsh.w	r0, [r7]
 8023e08:	f8dc e000 	ldr.w	lr, [ip]
 8023e0c:	2815      	cmp	r0, #21
 8023e0e:	6834      	ldr	r4, [r6, #0]
 8023e10:	f340 8243 	ble.w	802429a <st_sssa8_ch_nn_mat_mult_nt_t+0x99e>
 8023e14:	1e83      	subs	r3, r0, #2
 8023e16:	3801      	subs	r0, #1
 8023e18:	fa08 f303 	lsl.w	r3, r8, r3
 8023e1c:	fb51 330e 	smmla	r3, r1, lr, r3
 8023e20:	4103      	asrs	r3, r0
 8023e22:	4423      	add	r3, r4
 8023e24:	f303 0307 	ssat	r3, #8, r3
 8023e28:	f88a 3000 	strb.w	r3, [sl]
 8023e2c:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8023e2e:	3501      	adds	r5, #1
 8023e30:	449a      	add	sl, r3
 8023e32:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8023e34:	42ab      	cmp	r3, r5
 8023e36:	d1d2      	bne.n	8023dde <st_sssa8_ch_nn_mat_mult_nt_t+0x4e2>
 8023e38:	2000      	movs	r0, #0
 8023e3a:	b033      	add	sp, #204	; 0xcc
 8023e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e40:	2a00      	cmp	r2, #0
 8023e42:	dd27      	ble.n	8023e94 <st_sssa8_ch_nn_mat_mult_nt_t+0x598>
 8023e44:	990d      	ldr	r1, [sp, #52]	; 0x34
 8023e46:	0040      	lsls	r0, r0, #1
 8023e48:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023e4a:	005b      	lsls	r3, r3, #1
 8023e4c:	fb50 5001 	smmla	r0, r0, r1, r5
 8023e50:	fb53 5301 	smmla	r3, r3, r1, r5
 8023e54:	4110      	asrs	r0, r2
 8023e56:	f300 0007 	ssat	r0, #8, r0
 8023e5a:	9901      	ldr	r1, [sp, #4]
 8023e5c:	4113      	asrs	r3, r2
 8023e5e:	7048      	strb	r0, [r1, #1]
 8023e60:	e760      	b.n	8023d24 <st_sssa8_ch_nn_mat_mult_nt_t+0x428>
 8023e62:	2a00      	cmp	r2, #0
 8023e64:	dd31      	ble.n	8023eca <st_sssa8_ch_nn_mat_mult_nt_t+0x5ce>
 8023e66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023e68:	0076      	lsls	r6, r6, #1
 8023e6a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8023e6c:	0064      	lsls	r4, r4, #1
 8023e6e:	fb56 7601 	smmla	r6, r6, r1, r7
 8023e72:	fb54 7401 	smmla	r4, r4, r1, r7
 8023e76:	4116      	asrs	r6, r2
 8023e78:	f306 0607 	ssat	r6, #8, r6
 8023e7c:	9901      	ldr	r1, [sp, #4]
 8023e7e:	4114      	asrs	r4, r2
 8023e80:	700e      	strb	r6, [r1, #0]
 8023e82:	f304 0407 	ssat	r4, #8, r4
 8023e86:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8023e88:	548c      	strb	r4, [r1, r2]
 8023e8a:	e737      	b.n	8023cfc <st_sssa8_ch_nn_mat_mult_nt_t+0x400>
 8023e8c:	4692      	mov	sl, r2
 8023e8e:	e71d      	b.n	8023ccc <st_sssa8_ch_nn_mat_mult_nt_t+0x3d0>
 8023e90:	46f2      	mov	sl, lr
 8023e92:	e71b      	b.n	8023ccc <st_sssa8_ch_nn_mat_mult_nt_t+0x3d0>
 8023e94:	991e      	ldr	r1, [sp, #120]	; 0x78
 8023e96:	fa00 f201 	lsl.w	r2, r0, r1
 8023e9a:	f302 021f 	ssat	r2, #32, r2
 8023e9e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8023ea0:	fb52 f210 	smmulr	r2, r2, r0
 8023ea4:	408b      	lsls	r3, r1
 8023ea6:	f303 031f 	ssat	r3, #32, r3
 8023eaa:	fb53 f310 	smmulr	r3, r3, r0
 8023eae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023eb0:	440a      	add	r2, r1
 8023eb2:	f302 0207 	ssat	r2, #8, r2
 8023eb6:	9801      	ldr	r0, [sp, #4]
 8023eb8:	440b      	add	r3, r1
 8023eba:	7042      	strb	r2, [r0, #1]
 8023ebc:	f303 0307 	ssat	r3, #8, r3
 8023ec0:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8023ec2:	1882      	adds	r2, r0, r2
 8023ec4:	7053      	strb	r3, [r2, #1]
 8023ec6:	4603      	mov	r3, r0
 8023ec8:	e732      	b.n	8023d30 <st_sssa8_ch_nn_mat_mult_nt_t+0x434>
 8023eca:	991d      	ldr	r1, [sp, #116]	; 0x74
 8023ecc:	fa06 f201 	lsl.w	r2, r6, r1
 8023ed0:	f302 021f 	ssat	r2, #32, r2
 8023ed4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023ed6:	fb52 f215 	smmulr	r2, r2, r5
 8023eda:	fa04 f101 	lsl.w	r1, r4, r1
 8023ede:	f301 011f 	ssat	r1, #32, r1
 8023ee2:	fb51 f115 	smmulr	r1, r1, r5
 8023ee6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023ee8:	4422      	add	r2, r4
 8023eea:	f302 0207 	ssat	r2, #8, r2
 8023eee:	9d01      	ldr	r5, [sp, #4]
 8023ef0:	4421      	add	r1, r4
 8023ef2:	702a      	strb	r2, [r5, #0]
 8023ef4:	f301 0107 	ssat	r1, #8, r1
 8023ef8:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8023efa:	54a9      	strb	r1, [r5, r2]
 8023efc:	e6fe      	b.n	8023cfc <st_sssa8_ch_nn_mat_mult_nt_t+0x400>
 8023efe:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8023f00:	f04f 0900 	mov.w	r9, #0
 8023f04:	980a      	ldr	r0, [sp, #40]	; 0x28
 8023f06:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8023f08:	9300      	str	r3, [sp, #0]
 8023f0a:	4603      	mov	r3, r0
 8023f0c:	4634      	mov	r4, r6
 8023f0e:	e646      	b.n	8023b9e <st_sssa8_ch_nn_mat_mult_nt_t+0x2a2>
 8023f10:	46aa      	mov	sl, r5
 8023f12:	e6db      	b.n	8023ccc <st_sssa8_ch_nn_mat_mult_nt_t+0x3d0>
 8023f14:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023f16:	2b00      	cmp	r3, #0
 8023f18:	f340 81fe 	ble.w	8024318 <st_sssa8_ch_nn_mat_mult_nt_t+0xa1c>
 8023f1c:	9b05      	ldr	r3, [sp, #20]
 8023f1e:	9d43      	ldr	r5, [sp, #268]	; 0x10c
 8023f20:	eb0a 0703 	add.w	r7, sl, r3
 8023f24:	e9dd 4309 	ldrd	r4, r3, [sp, #36]	; 0x24
 8023f28:	f8da 2000 	ldr.w	r2, [sl]
 8023f2c:	6828      	ldr	r0, [r5, #0]
 8023f2e:	fa2f f182 	sxtb16	r1, r2
 8023f32:	fa2f f292 	sxtb16	r2, r2, ror #8
 8023f36:	fb21 4000 	smlad	r0, r1, r0, r4
 8023f3a:	686c      	ldr	r4, [r5, #4]
 8023f3c:	fb22 0404 	smlad	r4, r2, r4, r0
 8023f40:	68a8      	ldr	r0, [r5, #8]
 8023f42:	fb21 3300 	smlad	r3, r1, r0, r3
 8023f46:	68e9      	ldr	r1, [r5, #12]
 8023f48:	fb22 3201 	smlad	r2, r2, r1, r3
 8023f4c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8023f50:	6928      	ldr	r0, [r5, #16]
 8023f52:	fa2f f183 	sxtb16	r1, r3
 8023f56:	fa2f f393 	sxtb16	r3, r3, ror #8
 8023f5a:	fb21 4000 	smlad	r0, r1, r0, r4
 8023f5e:	696c      	ldr	r4, [r5, #20]
 8023f60:	fb23 0404 	smlad	r4, r3, r4, r0
 8023f64:	69a8      	ldr	r0, [r5, #24]
 8023f66:	fb21 2100 	smlad	r1, r1, r0, r2
 8023f6a:	69ea      	ldr	r2, [r5, #28]
 8023f6c:	fb23 1302 	smlad	r3, r3, r2, r1
 8023f70:	f8da 2008 	ldr.w	r2, [sl, #8]
 8023f74:	6a28      	ldr	r0, [r5, #32]
 8023f76:	fa2f f182 	sxtb16	r1, r2
 8023f7a:	fa2f f292 	sxtb16	r2, r2, ror #8
 8023f7e:	fb21 4000 	smlad	r0, r1, r0, r4
 8023f82:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8023f84:	fb22 0606 	smlad	r6, r2, r6, r0
 8023f88:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8023f8a:	fb21 3100 	smlad	r1, r1, r0, r3
 8023f8e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8023f90:	fb22 1203 	smlad	r2, r2, r3, r1
 8023f94:	f8da 400c 	ldr.w	r4, [sl, #12]
 8023f98:	3540      	adds	r5, #64	; 0x40
 8023f9a:	f855 0c10 	ldr.w	r0, [r5, #-16]
 8023f9e:	f10a 0a10 	add.w	sl, sl, #16
 8023fa2:	f855 8c0c 	ldr.w	r8, [r5, #-12]
 8023fa6:	f855 ec08 	ldr.w	lr, [r5, #-8]
 8023faa:	f855 cc04 	ldr.w	ip, [r5, #-4]
 8023fae:	fa2f f184 	sxtb16	r1, r4
 8023fb2:	fa2f f394 	sxtb16	r3, r4, ror #8
 8023fb6:	fb21 6000 	smlad	r0, r1, r0, r6
 8023fba:	fb23 0408 	smlad	r4, r3, r8, r0
 8023fbe:	fb21 220e 	smlad	r2, r1, lr, r2
 8023fc2:	fb23 230c 	smlad	r3, r3, ip, r2
 8023fc6:	45ba      	cmp	sl, r7
 8023fc8:	d1ae      	bne.n	8023f28 <st_sssa8_ch_nn_mat_mult_nt_t+0x62c>
 8023fca:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8023fcc:	f8dd e014 	ldr.w	lr, [sp, #20]
 8023fd0:	e9cd 4309 	strd	r4, r3, [sp, #36]	; 0x24
 8023fd4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8023fd6:	eb03 0c02 	add.w	ip, r3, r2
 8023fda:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8023fdc:	3b03      	subs	r3, #3
 8023fde:	459e      	cmp	lr, r3
 8023fe0:	da34      	bge.n	802404c <st_sssa8_ch_nn_mat_mult_nt_t+0x750>
 8023fe2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023fe4:	4661      	mov	r1, ip
 8023fe6:	f8cd c000 	str.w	ip, [sp]
 8023fea:	eba3 090e 	sub.w	r9, r3, lr
 8023fee:	f8cd e004 	str.w	lr, [sp, #4]
 8023ff2:	ea4f 0999 	mov.w	r9, r9, lsr #2
 8023ff6:	f109 0801 	add.w	r8, r9, #1
 8023ffa:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 8023ffe:	eb0a 0788 	add.w	r7, sl, r8, lsl #2
 8024002:	f85a 3b04 	ldr.w	r3, [sl], #4
 8024006:	3110      	adds	r1, #16
 8024008:	f851 0c10 	ldr.w	r0, [r1, #-16]
 802400c:	f851 ec0c 	ldr.w	lr, [r1, #-12]
 8024010:	f851 cc08 	ldr.w	ip, [r1, #-8]
 8024014:	f851 6c04 	ldr.w	r6, [r1, #-4]
 8024018:	fa2f f283 	sxtb16	r2, r3
 802401c:	fa2f f393 	sxtb16	r3, r3, ror #8
 8024020:	fb22 4400 	smlad	r4, r2, r0, r4
 8024024:	fb23 440e 	smlad	r4, r3, lr, r4
 8024028:	fb22 550c 	smlad	r5, r2, ip, r5
 802402c:	fb23 5506 	smlad	r5, r3, r6, r5
 8024030:	45ba      	cmp	sl, r7
 8024032:	d1e6      	bne.n	8024002 <st_sssa8_ch_nn_mat_mult_nt_t+0x706>
 8024034:	f8dd e004 	ldr.w	lr, [sp, #4]
 8024038:	f8dd c000 	ldr.w	ip, [sp]
 802403c:	f10e 0e04 	add.w	lr, lr, #4
 8024040:	eb0c 1c08 	add.w	ip, ip, r8, lsl #4
 8024044:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 8024048:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 802404c:	9b40      	ldr	r3, [sp, #256]	; 0x100
 802404e:	4573      	cmp	r3, lr
 8024050:	dd2f      	ble.n	80240b2 <st_sssa8_ch_nn_mat_mult_nt_t+0x7b6>
 8024052:	f99a 2000 	ldrsb.w	r2, [sl]
 8024056:	f10e 0301 	add.w	r3, lr, #1
 802405a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802405c:	f8bc 0000 	ldrh.w	r0, [ip]
 8024060:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 8024064:	fb10 4002 	smlabb	r0, r0, r2, r4
 8024068:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802406a:	fb11 4402 	smlabb	r4, r1, r2, r4
 802406e:	9a40      	ldr	r2, [sp, #256]	; 0x100
 8024070:	9009      	str	r0, [sp, #36]	; 0x24
 8024072:	429a      	cmp	r2, r3
 8024074:	940a      	str	r4, [sp, #40]	; 0x28
 8024076:	dd1c      	ble.n	80240b2 <st_sssa8_ch_nn_mat_mult_nt_t+0x7b6>
 8024078:	f99a 3001 	ldrsb.w	r3, [sl, #1]
 802407c:	f10e 0e02 	add.w	lr, lr, #2
 8024080:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8024084:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 8024088:	fb11 0003 	smlabb	r0, r1, r3, r0
 802408c:	fb12 4403 	smlabb	r4, r2, r3, r4
 8024090:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8024092:	9009      	str	r0, [sp, #36]	; 0x24
 8024094:	4573      	cmp	r3, lr
 8024096:	940a      	str	r4, [sp, #40]	; 0x28
 8024098:	dd0b      	ble.n	80240b2 <st_sssa8_ch_nn_mat_mult_nt_t+0x7b6>
 802409a:	f99a 3002 	ldrsb.w	r3, [sl, #2]
 802409e:	f8bc 2008 	ldrh.w	r2, [ip, #8]
 80240a2:	f8bc 100a 	ldrh.w	r1, [ip, #10]
 80240a6:	fb12 0203 	smlabb	r2, r2, r3, r0
 80240aa:	fb11 4303 	smlabb	r3, r1, r3, r4
 80240ae:	9209      	str	r2, [sp, #36]	; 0x24
 80240b0:	930a      	str	r3, [sp, #40]	; 0x28
 80240b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80240b4:	f933 2c02 	ldrsh.w	r2, [r3, #-2]
 80240b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80240ba:	2a15      	cmp	r2, #21
 80240bc:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80240c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80240c2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80240c6:	f340 80d7 	ble.w	8024278 <st_sssa8_ch_nn_mat_mult_nt_t+0x97c>
 80240ca:	1e93      	subs	r3, r2, #2
 80240cc:	2401      	movs	r4, #1
 80240ce:	3a01      	subs	r2, #1
 80240d0:	fa04 f303 	lsl.w	r3, r4, r3
 80240d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80240d6:	fb54 3300 	smmla	r3, r4, r0, r3
 80240da:	4113      	asrs	r3, r2
 80240dc:	440b      	add	r3, r1
 80240de:	f303 0307 	ssat	r3, #8, r3
 80240e2:	f88b 3000 	strb.w	r3, [fp]
 80240e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80240e8:	f9b3 1000 	ldrsh.w	r1, [r3]
 80240ec:	2915      	cmp	r1, #21
 80240ee:	f340 80b1 	ble.w	8024254 <st_sssa8_ch_nn_mat_mult_nt_t+0x958>
 80240f2:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80240f4:	1e8a      	subs	r2, r1, #2
 80240f6:	3901      	subs	r1, #1
 80240f8:	461c      	mov	r4, r3
 80240fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80240fc:	58e0      	ldr	r0, [r4, r3]
 80240fe:	2401      	movs	r4, #1
 8024100:	fa04 f202 	lsl.w	r2, r4, r2
 8024104:	9c42      	ldr	r4, [sp, #264]	; 0x108
 8024106:	58e3      	ldr	r3, [r4, r3]
 8024108:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802410a:	fb54 2200 	smmla	r2, r4, r0, r2
 802410e:	410a      	asrs	r2, r1
 8024110:	4413      	add	r3, r2
 8024112:	f303 0307 	ssat	r3, #8, r3
 8024116:	f88b 3001 	strb.w	r3, [fp, #1]
 802411a:	e619      	b.n	8023d50 <st_sssa8_ch_nn_mat_mult_nt_t+0x454>
 802411c:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 802411e:	2c00      	cmp	r4, #0
 8024120:	f000 80f6 	beq.w	8024310 <st_sssa8_ch_nn_mat_mult_nt_t+0xa14>
 8024124:	2300      	movs	r3, #0
 8024126:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8024128:	4619      	mov	r1, r3
 802412a:	f102 0010 	add.w	r0, r2, #16
 802412e:	f930 5c10 	ldrsh.w	r5, [r0, #-16]
 8024132:	3c01      	subs	r4, #1
 8024134:	f930 2c08 	ldrsh.w	r2, [r0, #-8]
 8024138:	f100 0010 	add.w	r0, r0, #16
 802413c:	eba1 0105 	sub.w	r1, r1, r5
 8024140:	f930 5c1e 	ldrsh.w	r5, [r0, #-30]
 8024144:	eba3 0302 	sub.w	r3, r3, r2
 8024148:	f930 2c16 	ldrsh.w	r2, [r0, #-22]
 802414c:	eba1 0105 	sub.w	r1, r1, r5
 8024150:	f930 5c1c 	ldrsh.w	r5, [r0, #-28]
 8024154:	eba3 0302 	sub.w	r3, r3, r2
 8024158:	f930 2c14 	ldrsh.w	r2, [r0, #-20]
 802415c:	eba1 0105 	sub.w	r1, r1, r5
 8024160:	f930 5c1a 	ldrsh.w	r5, [r0, #-26]
 8024164:	eba3 0302 	sub.w	r3, r3, r2
 8024168:	f930 2c12 	ldrsh.w	r2, [r0, #-18]
 802416c:	eba1 0105 	sub.w	r1, r1, r5
 8024170:	eba3 0302 	sub.w	r3, r3, r2
 8024174:	d1db      	bne.n	802412e <st_sssa8_ch_nn_mat_mult_nt_t+0x832>
 8024176:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8024178:	982d      	ldr	r0, [sp, #180]	; 0xb4
 802417a:	4402      	add	r2, r0
 802417c:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 802417e:	b1cd      	cbz	r5, 80241b4 <st_sssa8_ch_nn_mat_mult_nt_t+0x8b8>
 8024180:	f9b2 4000 	ldrsh.w	r4, [r2]
 8024184:	2d01      	cmp	r5, #1
 8024186:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 802418a:	eba1 0104 	sub.w	r1, r1, r4
 802418e:	eba3 0300 	sub.w	r3, r3, r0
 8024192:	d00f      	beq.n	80241b4 <st_sssa8_ch_nn_mat_mult_nt_t+0x8b8>
 8024194:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 8024198:	2d02      	cmp	r5, #2
 802419a:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 802419e:	eba1 0104 	sub.w	r1, r1, r4
 80241a2:	eba3 0300 	sub.w	r3, r3, r0
 80241a6:	d005      	beq.n	80241b4 <st_sssa8_ch_nn_mat_mult_nt_t+0x8b8>
 80241a8:	f9b2 0008 	ldrsh.w	r0, [r2, #8]
 80241ac:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80241b0:	1a09      	subs	r1, r1, r0
 80241b2:	1a9b      	subs	r3, r3, r2
 80241b4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80241b6:	fb02 f101 	mul.w	r1, r2, r1
 80241ba:	fb02 f303 	mul.w	r3, r2, r3
 80241be:	e412      	b.n	80239e6 <st_sssa8_ch_nn_mat_mult_nt_t+0xea>
 80241c0:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80241c2:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80241c4:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 80241c6:	18f5      	adds	r5, r6, r3
 80241c8:	2c00      	cmp	r4, #0
 80241ca:	f000 80aa 	beq.w	8024322 <st_sssa8_ch_nn_mat_mult_nt_t+0xa26>
 80241ce:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80241d0:	f856 1b04 	ldr.w	r1, [r6], #4
 80241d4:	3c01      	subs	r4, #1
 80241d6:	f855 2b04 	ldr.w	r2, [r5], #4
 80241da:	f103 0310 	add.w	r3, r3, #16
 80241de:	ea4f 2031 	mov.w	r0, r1, ror #8
 80241e2:	fa2f f181 	sxtb16	r1, r1
 80241e6:	fa2f f080 	sxtb16	r0, r0
 80241ea:	f843 1c10 	str.w	r1, [r3, #-16]
 80241ee:	ea4f 2132 	mov.w	r1, r2, ror #8
 80241f2:	f843 0c0c 	str.w	r0, [r3, #-12]
 80241f6:	fa2f f181 	sxtb16	r1, r1
 80241fa:	fa2f f282 	sxtb16	r2, r2
 80241fe:	f843 1c04 	str.w	r1, [r3, #-4]
 8024202:	f843 2c08 	str.w	r2, [r3, #-8]
 8024206:	d1e3      	bne.n	80241d0 <st_sssa8_ch_nn_mat_mult_nt_t+0x8d4>
 8024208:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802420a:	992f      	ldr	r1, [sp, #188]	; 0xbc
 802420c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802420e:	185d      	adds	r5, r3, r1
 8024210:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8024212:	189a      	adds	r2, r3, r2
 8024214:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8024216:	440b      	add	r3, r1
 8024218:	982c      	ldr	r0, [sp, #176]	; 0xb0
 802421a:	2800      	cmp	r0, #0
 802421c:	f43f abde 	beq.w	80239dc <st_sssa8_ch_nn_mat_mult_nt_t+0xe0>
 8024220:	f992 1000 	ldrsb.w	r1, [r2]
 8024224:	2801      	cmp	r0, #1
 8024226:	8019      	strh	r1, [r3, #0]
 8024228:	f995 1000 	ldrsb.w	r1, [r5]
 802422c:	8059      	strh	r1, [r3, #2]
 802422e:	f43f abd5 	beq.w	80239dc <st_sssa8_ch_nn_mat_mult_nt_t+0xe0>
 8024232:	f992 1001 	ldrsb.w	r1, [r2, #1]
 8024236:	2802      	cmp	r0, #2
 8024238:	8099      	strh	r1, [r3, #4]
 802423a:	f995 1001 	ldrsb.w	r1, [r5, #1]
 802423e:	80d9      	strh	r1, [r3, #6]
 8024240:	f43f abcc 	beq.w	80239dc <st_sssa8_ch_nn_mat_mult_nt_t+0xe0>
 8024244:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8024248:	811a      	strh	r2, [r3, #8]
 802424a:	f995 2002 	ldrsb.w	r2, [r5, #2]
 802424e:	815a      	strh	r2, [r3, #10]
 8024250:	f7ff bbc4 	b.w	80239dc <st_sssa8_ch_nn_mat_mult_nt_t+0xe0>
 8024254:	2900      	cmp	r1, #0
 8024256:	dd47      	ble.n	80242e8 <st_sssa8_ch_nn_mat_mult_nt_t+0x9ec>
 8024258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802425a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802425c:	0058      	lsls	r0, r3, #1
 802425e:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8024260:	461c      	mov	r4, r3
 8024262:	58a3      	ldr	r3, [r4, r2]
 8024264:	9c42      	ldr	r4, [sp, #264]	; 0x108
 8024266:	58a2      	ldr	r2, [r4, r2]
 8024268:	fb50 2303 	smmla	r3, r0, r3, r2
 802426c:	410b      	asrs	r3, r1
 802426e:	f303 0307 	ssat	r3, #8, r3
 8024272:	f88b 3001 	strb.w	r3, [fp, #1]
 8024276:	e56b      	b.n	8023d50 <st_sssa8_ch_nn_mat_mult_nt_t+0x454>
 8024278:	2a00      	cmp	r2, #0
 802427a:	dd27      	ble.n	80242cc <st_sssa8_ch_nn_mat_mult_nt_t+0x9d0>
 802427c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802427e:	005b      	lsls	r3, r3, #1
 8024280:	fb53 1300 	smmla	r3, r3, r0, r1
 8024284:	4113      	asrs	r3, r2
 8024286:	f303 0307 	ssat	r3, #8, r3
 802428a:	f88b 3000 	strb.w	r3, [fp]
 802428e:	e72a      	b.n	80240e6 <st_sssa8_ch_nn_mat_mult_nt_t+0x7ea>
 8024290:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
 8024294:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 8024298:	e556      	b.n	8023d48 <st_sssa8_ch_nn_mat_mult_nt_t+0x44c>
 802429a:	2800      	cmp	r0, #0
 802429c:	dd08      	ble.n	80242b0 <st_sssa8_ch_nn_mat_mult_nt_t+0x9b4>
 802429e:	0049      	lsls	r1, r1, #1
 80242a0:	fb51 410e 	smmla	r1, r1, lr, r4
 80242a4:	4101      	asrs	r1, r0
 80242a6:	f301 0307 	ssat	r3, #8, r1
 80242aa:	f88a 3000 	strb.w	r3, [sl]
 80242ae:	e5bd      	b.n	8023e2c <st_sssa8_ch_nn_mat_mult_nt_t+0x530>
 80242b0:	f1c0 0001 	rsb	r0, r0, #1
 80242b4:	fa01 f000 	lsl.w	r0, r1, r0
 80242b8:	f300 031f 	ssat	r3, #32, r0
 80242bc:	fb53 f31e 	smmulr	r3, r3, lr
 80242c0:	4423      	add	r3, r4
 80242c2:	f303 0307 	ssat	r3, #8, r3
 80242c6:	f88a 3000 	strb.w	r3, [sl]
 80242ca:	e5af      	b.n	8023e2c <st_sssa8_ch_nn_mat_mult_nt_t+0x530>
 80242cc:	f1c2 0201 	rsb	r2, r2, #1
 80242d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80242d2:	4093      	lsls	r3, r2
 80242d4:	f303 031f 	ssat	r3, #32, r3
 80242d8:	fb53 f310 	smmulr	r3, r3, r0
 80242dc:	440b      	add	r3, r1
 80242de:	f303 0307 	ssat	r3, #8, r3
 80242e2:	f88b 3000 	strb.w	r3, [fp]
 80242e6:	e6fe      	b.n	80240e6 <st_sssa8_ch_nn_mat_mult_nt_t+0x7ea>
 80242e8:	f1c1 0101 	rsb	r1, r1, #1
 80242ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80242ee:	408a      	lsls	r2, r1
 80242f0:	f302 021f 	ssat	r2, #32, r2
 80242f4:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80242f6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80242f8:	4618      	mov	r0, r3
 80242fa:	5843      	ldr	r3, [r0, r1]
 80242fc:	fb52 f213 	smmulr	r2, r2, r3
 8024300:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8024302:	585b      	ldr	r3, [r3, r1]
 8024304:	4413      	add	r3, r2
 8024306:	f303 0307 	ssat	r3, #8, r3
 802430a:	f88b 3001 	strb.w	r3, [fp, #1]
 802430e:	e51f      	b.n	8023d50 <st_sssa8_ch_nn_mat_mult_nt_t+0x454>
 8024310:	4621      	mov	r1, r4
 8024312:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8024314:	4623      	mov	r3, r4
 8024316:	e731      	b.n	802417c <st_sssa8_ch_nn_mat_mult_nt_t+0x880>
 8024318:	f8dd c10c 	ldr.w	ip, [sp, #268]	; 0x10c
 802431c:	f04f 0e00 	mov.w	lr, #0
 8024320:	e65b      	b.n	8023fda <st_sssa8_ch_nn_mat_mult_nt_t+0x6de>
 8024322:	4632      	mov	r2, r6
 8024324:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8024326:	e777      	b.n	8024218 <st_sssa8_ch_nn_mat_mult_nt_t+0x91c>

08024328 <st_int8_reordered_no_shift_zero>:
 8024328:	b5f0      	push	{r4, r5, r6, r7, lr}
 802432a:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 802432e:	f9bd c014 	ldrsh.w	ip, [sp, #20]
 8024332:	d02e      	beq.n	8024392 <st_int8_reordered_no_shift_zero+0x6a>
 8024334:	eb00 078e 	add.w	r7, r0, lr, lsl #2
 8024338:	460e      	mov	r6, r1
 802433a:	f850 4b04 	ldr.w	r4, [r0], #4
 802433e:	ea4f 2534 	mov.w	r5, r4, ror #8
 8024342:	fa2f f585 	sxtb16	r5, r5
 8024346:	fad5 f503 	ssub16	r5, r5, r3
 802434a:	fa2f f484 	sxtb16	r4, r4
 802434e:	fad4 f403 	ssub16	r4, r4, r3
 8024352:	42b8      	cmp	r0, r7
 8024354:	6034      	str	r4, [r6, #0]
 8024356:	6075      	str	r5, [r6, #4]
 8024358:	f106 0608 	add.w	r6, r6, #8
 802435c:	d1ed      	bne.n	802433a <st_int8_reordered_no_shift_zero+0x12>
 802435e:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 8024362:	f012 0203 	ands.w	r2, r2, #3
 8024366:	d013      	beq.n	8024390 <st_int8_reordered_no_shift_zero+0x68>
 8024368:	f997 0000 	ldrsb.w	r0, [r7]
 802436c:	fa4f f38c 	sxtb.w	r3, ip
 8024370:	2a01      	cmp	r2, #1
 8024372:	eba0 0003 	sub.w	r0, r0, r3
 8024376:	8008      	strh	r0, [r1, #0]
 8024378:	d00a      	beq.n	8024390 <st_int8_reordered_no_shift_zero+0x68>
 802437a:	f997 0001 	ldrsb.w	r0, [r7, #1]
 802437e:	2a02      	cmp	r2, #2
 8024380:	eba0 0003 	sub.w	r0, r0, r3
 8024384:	8048      	strh	r0, [r1, #2]
 8024386:	d003      	beq.n	8024390 <st_int8_reordered_no_shift_zero+0x68>
 8024388:	f997 2002 	ldrsb.w	r2, [r7, #2]
 802438c:	1ad3      	subs	r3, r2, r3
 802438e:	808b      	strh	r3, [r1, #4]
 8024390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024392:	4607      	mov	r7, r0
 8024394:	e7e5      	b.n	8024362 <st_int8_reordered_no_shift_zero+0x3a>
 8024396:	bf00      	nop

08024398 <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 8024398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802439c:	b09b      	sub	sp, #108	; 0x6c
 802439e:	4683      	mov	fp, r0
 80243a0:	460f      	mov	r7, r1
 80243a2:	f8bd 4090 	ldrh.w	r4, [sp, #144]	; 0x90
 80243a6:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80243a8:	910d      	str	r1, [sp, #52]	; 0x34
 80243aa:	0861      	lsrs	r1, r4, #1
 80243ac:	eb00 0503 	add.w	r5, r0, r3
 80243b0:	f8bd 0094 	ldrh.w	r0, [sp, #148]	; 0x94
 80243b4:	9318      	str	r3, [sp, #96]	; 0x60
 80243b6:	9417      	str	r4, [sp, #92]	; 0x5c
 80243b8:	9215      	str	r2, [sp, #84]	; 0x54
 80243ba:	9516      	str	r5, [sp, #88]	; 0x58
 80243bc:	9006      	str	r0, [sp, #24]
 80243be:	f000 81ca 	beq.w	8024756 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3be>
 80243c2:	3901      	subs	r1, #1
 80243c4:	1ec4      	subs	r4, r0, #3
 80243c6:	3210      	adds	r2, #16
 80243c8:	f1a0 0310 	sub.w	r3, r0, #16
 80243cc:	940f      	str	r4, [sp, #60]	; 0x3c
 80243ce:	b28c      	uxth	r4, r1
 80243d0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80243d2:	091b      	lsrs	r3, r3, #4
 80243d4:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80243d8:	9419      	str	r4, [sp, #100]	; 0x64
 80243da:	3108      	adds	r1, #8
 80243dc:	3301      	adds	r3, #1
 80243de:	920e      	str	r2, [sp, #56]	; 0x38
 80243e0:	eb07 0640 	add.w	r6, r7, r0, lsl #1
 80243e4:	9107      	str	r1, [sp, #28]
 80243e6:	9926      	ldr	r1, [sp, #152]	; 0x98
 80243e8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80243ea:	3104      	adds	r1, #4
 80243ec:	9610      	str	r6, [sp, #64]	; 0x40
 80243ee:	3208      	adds	r2, #8
 80243f0:	9101      	str	r1, [sp, #4]
 80243f2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80243f4:	9205      	str	r2, [sp, #20]
 80243f6:	015a      	lsls	r2, r3, #5
 80243f8:	3102      	adds	r1, #2
 80243fa:	9104      	str	r1, [sp, #16]
 80243fc:	0199      	lsls	r1, r3, #6
 80243fe:	011b      	lsls	r3, r3, #4
 8024400:	9111      	str	r1, [sp, #68]	; 0x44
 8024402:	9313      	str	r3, [sp, #76]	; 0x4c
 8024404:	1cab      	adds	r3, r5, #2
 8024406:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8024408:	9303      	str	r3, [sp, #12]
 802440a:	1f03      	subs	r3, r0, #4
 802440c:	3108      	adds	r1, #8
 802440e:	9314      	str	r3, [sp, #80]	; 0x50
 8024410:	9102      	str	r1, [sp, #8]
 8024412:	18b9      	adds	r1, r7, r2
 8024414:	9b07      	ldr	r3, [sp, #28]
 8024416:	18b2      	adds	r2, r6, r2
 8024418:	9108      	str	r1, [sp, #32]
 802441a:	9212      	str	r2, [sp, #72]	; 0x48
 802441c:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8024420:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8024424:	9b06      	ldr	r3, [sp, #24]
 8024426:	2b0f      	cmp	r3, #15
 8024428:	f340 82a6 	ble.w	8024978 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5e0>
 802442c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8024430:	46dc      	mov	ip, fp
 8024432:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 8024436:	4603      	mov	r3, r0
 8024438:	462c      	mov	r4, r5
 802443a:	9e08      	ldr	r6, [sp, #32]
 802443c:	f8de 7000 	ldr.w	r7, [lr]
 8024440:	f8d8 2000 	ldr.w	r2, [r8]
 8024444:	f8dc 1000 	ldr.w	r1, [ip]
 8024448:	f8dc a004 	ldr.w	sl, [ip, #4]
 802444c:	fb21 5507 	smlad	r5, r1, r7, r5
 8024450:	fb21 4102 	smlad	r1, r1, r2, r4
 8024454:	fb2a 0007 	smlad	r0, sl, r7, r0
 8024458:	fb2a 3202 	smlad	r2, sl, r2, r3
 802445c:	f8de 7004 	ldr.w	r7, [lr, #4]
 8024460:	f8d8 a004 	ldr.w	sl, [r8, #4]
 8024464:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8024468:	f8dc 300c 	ldr.w	r3, [ip, #12]
 802446c:	fb24 5507 	smlad	r5, r4, r7, r5
 8024470:	fb24 110a 	smlad	r1, r4, sl, r1
 8024474:	fb23 0007 	smlad	r0, r3, r7, r0
 8024478:	fb23 230a 	smlad	r3, r3, sl, r2
 802447c:	f8de 7008 	ldr.w	r7, [lr, #8]
 8024480:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8024484:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8024488:	f8dc a014 	ldr.w	sl, [ip, #20]
 802448c:	fb24 5507 	smlad	r5, r4, r7, r5
 8024490:	fb24 1102 	smlad	r1, r4, r2, r1
 8024494:	fb2a 0007 	smlad	r0, sl, r7, r0
 8024498:	fb2a 3202 	smlad	r2, sl, r2, r3
 802449c:	f8de 700c 	ldr.w	r7, [lr, #12]
 80244a0:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 80244a4:	f8dc 4018 	ldr.w	r4, [ip, #24]
 80244a8:	f8dc 901c 	ldr.w	r9, [ip, #28]
 80244ac:	fb24 5507 	smlad	r5, r4, r7, r5
 80244b0:	fb24 140a 	smlad	r4, r4, sl, r1
 80244b4:	fb29 0007 	smlad	r0, r9, r7, r0
 80244b8:	fb29 2a0a 	smlad	sl, r9, sl, r2
 80244bc:	f8de 7010 	ldr.w	r7, [lr, #16]
 80244c0:	f8d8 9010 	ldr.w	r9, [r8, #16]
 80244c4:	f8dc 1020 	ldr.w	r1, [ip, #32]
 80244c8:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 80244cc:	fb21 5507 	smlad	r5, r1, r7, r5
 80244d0:	fb21 4409 	smlad	r4, r1, r9, r4
 80244d4:	fb23 0007 	smlad	r0, r3, r7, r0
 80244d8:	fb23 a909 	smlad	r9, r3, r9, sl
 80244dc:	f8de 7014 	ldr.w	r7, [lr, #20]
 80244e0:	f8d8 2014 	ldr.w	r2, [r8, #20]
 80244e4:	f8dc 1028 	ldr.w	r1, [ip, #40]	; 0x28
 80244e8:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
 80244ec:	fb21 5507 	smlad	r5, r1, r7, r5
 80244f0:	fb21 4402 	smlad	r4, r1, r2, r4
 80244f4:	fb23 0007 	smlad	r0, r3, r7, r0
 80244f8:	fb23 9302 	smlad	r3, r3, r2, r9
 80244fc:	f8de 7018 	ldr.w	r7, [lr, #24]
 8024500:	f8d8 9018 	ldr.w	r9, [r8, #24]
 8024504:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
 8024508:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
 802450c:	fb21 5507 	smlad	r5, r1, r7, r5
 8024510:	fb21 4409 	smlad	r4, r1, r9, r4
 8024514:	fb22 0707 	smlad	r7, r2, r7, r0
 8024518:	fb22 3909 	smlad	r9, r2, r9, r3
 802451c:	f8de 001c 	ldr.w	r0, [lr, #28]
 8024520:	f108 0820 	add.w	r8, r8, #32
 8024524:	f858 3c04 	ldr.w	r3, [r8, #-4]
 8024528:	f10e 0e20 	add.w	lr, lr, #32
 802452c:	f8dc 1038 	ldr.w	r1, [ip, #56]	; 0x38
 8024530:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8024534:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 8024538:	fb21 5500 	smlad	r5, r1, r0, r5
 802453c:	fb21 4403 	smlad	r4, r1, r3, r4
 8024540:	fb22 7000 	smlad	r0, r2, r0, r7
 8024544:	fb22 9303 	smlad	r3, r2, r3, r9
 8024548:	45b6      	cmp	lr, r6
 802454a:	f47f af77 	bne.w	802443c <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa4>
 802454e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024550:	9f08      	ldr	r7, [sp, #32]
 8024552:	4493      	add	fp, r2
 8024554:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8024558:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802455a:	9200      	str	r2, [sp, #0]
 802455c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802455e:	4596      	cmp	lr, r2
 8024560:	da41      	bge.n	80245e6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x24e>
 8024562:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024564:	465e      	mov	r6, fp
 8024566:	f8dd c000 	ldr.w	ip, [sp]
 802456a:	eba2 020e 	sub.w	r2, r2, lr
 802456e:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 8024572:	0892      	lsrs	r2, r2, #2
 8024574:	920b      	str	r2, [sp, #44]	; 0x2c
 8024576:	3201      	adds	r2, #1
 8024578:	920a      	str	r2, [sp, #40]	; 0x28
 802457a:	00d2      	lsls	r2, r2, #3
 802457c:	eb07 0802 	add.w	r8, r7, r2
 8024580:	9209      	str	r2, [sp, #36]	; 0x24
 8024582:	f8d7 e000 	ldr.w	lr, [r7]
 8024586:	f8dc 9000 	ldr.w	r9, [ip]
 802458a:	6831      	ldr	r1, [r6, #0]
 802458c:	f8d6 a004 	ldr.w	sl, [r6, #4]
 8024590:	fb21 550e 	smlad	r5, r1, lr, r5
 8024594:	fb21 4409 	smlad	r4, r1, r9, r4
 8024598:	fb2a 000e 	smlad	r0, sl, lr, r0
 802459c:	fb2a 3309 	smlad	r3, sl, r9, r3
 80245a0:	f8d7 e004 	ldr.w	lr, [r7, #4]
 80245a4:	f10c 0c08 	add.w	ip, ip, #8
 80245a8:	f85c 9c04 	ldr.w	r9, [ip, #-4]
 80245ac:	3708      	adds	r7, #8
 80245ae:	68b1      	ldr	r1, [r6, #8]
 80245b0:	3610      	adds	r6, #16
 80245b2:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80245b6:	fb21 550e 	smlad	r5, r1, lr, r5
 80245ba:	fb21 4409 	smlad	r4, r1, r9, r4
 80245be:	fb22 000e 	smlad	r0, r2, lr, r0
 80245c2:	fb22 3309 	smlad	r3, r2, r9, r3
 80245c6:	4547      	cmp	r7, r8
 80245c8:	d1db      	bne.n	8024582 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1ea>
 80245ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80245cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80245ce:	eb0b 1b02 	add.w	fp, fp, r2, lsl #4
 80245d2:	9a00      	ldr	r2, [sp, #0]
 80245d4:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 80245d8:	440a      	add	r2, r1
 80245da:	f10e 0e04 	add.w	lr, lr, #4
 80245de:	9200      	str	r2, [sp, #0]
 80245e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80245e2:	eb0e 0e82 	add.w	lr, lr, r2, lsl #2
 80245e6:	9a06      	ldr	r2, [sp, #24]
 80245e8:	4572      	cmp	r2, lr
 80245ea:	dd40      	ble.n	802466e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d6>
 80245ec:	9e00      	ldr	r6, [sp, #0]
 80245ee:	f10e 0201 	add.w	r2, lr, #1
 80245f2:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80245f6:	f9b7 c000 	ldrsh.w	ip, [r7]
 80245fa:	f9b6 6000 	ldrsh.w	r6, [r6]
 80245fe:	fb0c 0001 	mla	r0, ip, r1, r0
 8024602:	f9bb 8000 	ldrsh.w	r8, [fp]
 8024606:	fb06 3301 	mla	r3, r6, r1, r3
 802460a:	9906      	ldr	r1, [sp, #24]
 802460c:	fb08 550c 	mla	r5, r8, ip, r5
 8024610:	4291      	cmp	r1, r2
 8024612:	fb08 4406 	mla	r4, r8, r6, r4
 8024616:	f340 814e 	ble.w	80248b6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x51e>
 802461a:	9a00      	ldr	r2, [sp, #0]
 802461c:	f10e 0e02 	add.w	lr, lr, #2
 8024620:	f9b7 6002 	ldrsh.w	r6, [r7, #2]
 8024624:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8024628:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
 802462c:	f9bb c004 	ldrsh.w	ip, [fp, #4]
 8024630:	fb06 0002 	mla	r0, r6, r2, r0
 8024634:	fb01 3302 	mla	r3, r1, r2, r3
 8024638:	9a06      	ldr	r2, [sp, #24]
 802463a:	fb0c 5506 	mla	r5, ip, r6, r5
 802463e:	4572      	cmp	r2, lr
 8024640:	fb0c 4401 	mla	r4, ip, r1, r4
 8024644:	f340 81a0 	ble.w	8024988 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5f0>
 8024648:	9a00      	ldr	r2, [sp, #0]
 802464a:	f10b 0b0c 	add.w	fp, fp, #12
 802464e:	f9b7 6004 	ldrsh.w	r6, [r7, #4]
 8024652:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8024656:	f93b 7c04 	ldrsh.w	r7, [fp, #-4]
 802465a:	f93b 2c02 	ldrsh.w	r2, [fp, #-2]
 802465e:	fb07 5506 	mla	r5, r7, r6, r5
 8024662:	fb07 4401 	mla	r4, r7, r1, r4
 8024666:	fb06 0002 	mla	r0, r6, r2, r0
 802466a:	fb01 3302 	mla	r3, r1, r2, r3
 802466e:	9a01      	ldr	r2, [sp, #4]
 8024670:	f932 1c04 	ldrsh.w	r1, [r2, #-4]
 8024674:	9a05      	ldr	r2, [sp, #20]
 8024676:	2915      	cmp	r1, #21
 8024678:	f852 6c08 	ldr.w	r6, [r2, #-8]
 802467c:	9a02      	ldr	r2, [sp, #8]
 802467e:	f852 7c08 	ldr.w	r7, [r2, #-8]
 8024682:	f340 8100 	ble.w	8024886 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4ee>
 8024686:	1e8a      	subs	r2, r1, #2
 8024688:	f04f 0c01 	mov.w	ip, #1
 802468c:	3901      	subs	r1, #1
 802468e:	fa0c f202 	lsl.w	r2, ip, r2
 8024692:	fb55 2506 	smmla	r5, r5, r6, r2
 8024696:	410d      	asrs	r5, r1
 8024698:	fb54 2206 	smmla	r2, r4, r6, r2
 802469c:	443d      	add	r5, r7
 802469e:	f305 0507 	ssat	r5, #8, r5
 80246a2:	410a      	asrs	r2, r1
 80246a4:	9904      	ldr	r1, [sp, #16]
 80246a6:	443a      	add	r2, r7
 80246a8:	f801 5c02 	strb.w	r5, [r1, #-2]
 80246ac:	f302 0207 	ssat	r2, #8, r2
 80246b0:	9903      	ldr	r1, [sp, #12]
 80246b2:	f801 2c02 	strb.w	r2, [r1, #-2]
 80246b6:	9a01      	ldr	r2, [sp, #4]
 80246b8:	f932 1c02 	ldrsh.w	r1, [r2, #-2]
 80246bc:	2915      	cmp	r1, #21
 80246be:	f340 80c2 	ble.w	8024846 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4ae>
 80246c2:	9c05      	ldr	r4, [sp, #20]
 80246c4:	1e8a      	subs	r2, r1, #2
 80246c6:	3901      	subs	r1, #1
 80246c8:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80246cc:	2401      	movs	r4, #1
 80246ce:	fa04 f202 	lsl.w	r2, r4, r2
 80246d2:	9c02      	ldr	r4, [sp, #8]
 80246d4:	fb50 2005 	smmla	r0, r0, r5, r2
 80246d8:	f854 4c04 	ldr.w	r4, [r4, #-4]
 80246dc:	4108      	asrs	r0, r1
 80246de:	fb53 2305 	smmla	r3, r3, r5, r2
 80246e2:	4420      	add	r0, r4
 80246e4:	f300 0007 	ssat	r0, #8, r0
 80246e8:	410b      	asrs	r3, r1
 80246ea:	9a04      	ldr	r2, [sp, #16]
 80246ec:	4423      	add	r3, r4
 80246ee:	f802 0c01 	strb.w	r0, [r2, #-1]
 80246f2:	f303 0307 	ssat	r3, #8, r3
 80246f6:	9a03      	ldr	r2, [sp, #12]
 80246f8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80246fc:	9a01      	ldr	r2, [sp, #4]
 80246fe:	3204      	adds	r2, #4
 8024700:	9b07      	ldr	r3, [sp, #28]
 8024702:	9201      	str	r2, [sp, #4]
 8024704:	3308      	adds	r3, #8
 8024706:	9a05      	ldr	r2, [sp, #20]
 8024708:	9307      	str	r3, [sp, #28]
 802470a:	3208      	adds	r2, #8
 802470c:	9205      	str	r2, [sp, #20]
 802470e:	9a04      	ldr	r2, [sp, #16]
 8024710:	3202      	adds	r2, #2
 8024712:	9204      	str	r2, [sp, #16]
 8024714:	9a02      	ldr	r2, [sp, #8]
 8024716:	3208      	adds	r2, #8
 8024718:	9202      	str	r2, [sp, #8]
 802471a:	9a03      	ldr	r2, [sp, #12]
 802471c:	3202      	adds	r2, #2
 802471e:	9203      	str	r2, [sp, #12]
 8024720:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024722:	429a      	cmp	r2, r3
 8024724:	f47f ae7a 	bne.w	802441c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x84>
 8024728:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802472a:	9826      	ldr	r0, [sp, #152]	; 0x98
 802472c:	3301      	adds	r3, #1
 802472e:	00da      	lsls	r2, r3, #3
 8024730:	0059      	lsls	r1, r3, #1
 8024732:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8024736:	9326      	str	r3, [sp, #152]	; 0x98
 8024738:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802473a:	4413      	add	r3, r2
 802473c:	9315      	str	r3, [sp, #84]	; 0x54
 802473e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024740:	4413      	add	r3, r2
 8024742:	9327      	str	r3, [sp, #156]	; 0x9c
 8024744:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024746:	4413      	add	r3, r2
 8024748:	9328      	str	r3, [sp, #160]	; 0xa0
 802474a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802474c:	440b      	add	r3, r1
 802474e:	9329      	str	r3, [sp, #164]	; 0xa4
 8024750:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024752:	440b      	add	r3, r1
 8024754:	9316      	str	r3, [sp, #88]	; 0x58
 8024756:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024758:	07da      	lsls	r2, r3, #31
 802475a:	f140 8105 	bpl.w	8024968 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5d0>
 802475e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8024760:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024762:	6819      	ldr	r1, [r3, #0]
 8024764:	9b06      	ldr	r3, [sp, #24]
 8024766:	089e      	lsrs	r6, r3, #2
 8024768:	eb00 0c43 	add.w	ip, r0, r3, lsl #1
 802476c:	f000 812b 	beq.w	80249c6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x62e>
 8024770:	3e01      	subs	r6, #1
 8024772:	4664      	mov	r4, ip
 8024774:	460b      	mov	r3, r1
 8024776:	b2b6      	uxth	r6, r6
 8024778:	3601      	adds	r6, #1
 802477a:	00f6      	lsls	r6, r6, #3
 802477c:	eb0b 0706 	add.w	r7, fp, r6
 8024780:	f8db 5000 	ldr.w	r5, [fp]
 8024784:	f10b 0b08 	add.w	fp, fp, #8
 8024788:	f85b 2c04 	ldr.w	r2, [fp, #-4]
 802478c:	f8d0 e000 	ldr.w	lr, [r0]
 8024790:	fb25 110e 	smlad	r1, r5, lr, r1
 8024794:	f8d4 e000 	ldr.w	lr, [r4]
 8024798:	fb25 330e 	smlad	r3, r5, lr, r3
 802479c:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80247a0:	3408      	adds	r4, #8
 80247a2:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80247a6:	3008      	adds	r0, #8
 80247a8:	fb22 110e 	smlad	r1, r2, lr, r1
 80247ac:	fb22 3305 	smlad	r3, r2, r5, r3
 80247b0:	45bb      	cmp	fp, r7
 80247b2:	d1e5      	bne.n	8024780 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3e8>
 80247b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80247b6:	44b4      	add	ip, r6
 80247b8:	4432      	add	r2, r6
 80247ba:	920d      	str	r2, [sp, #52]	; 0x34
 80247bc:	9a06      	ldr	r2, [sp, #24]
 80247be:	f012 0203 	ands.w	r2, r2, #3
 80247c2:	d01f      	beq.n	8024804 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46c>
 80247c4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80247c6:	2a01      	cmp	r2, #1
 80247c8:	f9bb 0000 	ldrsh.w	r0, [fp]
 80247cc:	8835      	ldrh	r5, [r6, #0]
 80247ce:	f8bc 4000 	ldrh.w	r4, [ip]
 80247d2:	fb15 1100 	smlabb	r1, r5, r0, r1
 80247d6:	fb14 3300 	smlabb	r3, r4, r0, r3
 80247da:	d013      	beq.n	8024804 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46c>
 80247dc:	f9bb 0002 	ldrsh.w	r0, [fp, #2]
 80247e0:	2a02      	cmp	r2, #2
 80247e2:	8875      	ldrh	r5, [r6, #2]
 80247e4:	f8bc 4002 	ldrh.w	r4, [ip, #2]
 80247e8:	fb15 1100 	smlabb	r1, r5, r0, r1
 80247ec:	fb14 3300 	smlabb	r3, r4, r0, r3
 80247f0:	d008      	beq.n	8024804 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46c>
 80247f2:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 80247f6:	88b4      	ldrh	r4, [r6, #4]
 80247f8:	f8bc 0004 	ldrh.w	r0, [ip, #4]
 80247fc:	fb12 1104 	smlabb	r1, r2, r4, r1
 8024800:	fb12 3300 	smlabb	r3, r2, r0, r3
 8024804:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8024806:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8024808:	f9b2 2000 	ldrsh.w	r2, [r2]
 802480c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 802480e:	6825      	ldr	r5, [r4, #0]
 8024810:	2a15      	cmp	r2, #21
 8024812:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8024814:	f100 0001 	add.w	r0, r0, #1
 8024818:	6824      	ldr	r4, [r4, #0]
 802481a:	f300 808f 	bgt.w	802493c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5a4>
 802481e:	2a00      	cmp	r2, #0
 8024820:	f340 80b5 	ble.w	802498e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5f6>
 8024824:	0049      	lsls	r1, r1, #1
 8024826:	005b      	lsls	r3, r3, #1
 8024828:	fb51 4105 	smmla	r1, r1, r5, r4
 802482c:	fb53 4305 	smmla	r3, r3, r5, r4
 8024830:	fa41 f202 	asr.w	r2, r1, r2
 8024834:	f302 0207 	ssat	r2, #8, r2
 8024838:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802483a:	700a      	strb	r2, [r1, #0]
 802483c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802483e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8024842:	4113      	asrs	r3, r2
 8024844:	e08a      	b.n	802495c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c4>
 8024846:	2900      	cmp	r1, #0
 8024848:	dd38      	ble.n	80248bc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x524>
 802484a:	9a05      	ldr	r2, [sp, #20]
 802484c:	0040      	lsls	r0, r0, #1
 802484e:	9c02      	ldr	r4, [sp, #8]
 8024850:	005b      	lsls	r3, r3, #1
 8024852:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8024856:	f854 4c04 	ldr.w	r4, [r4, #-4]
 802485a:	fb50 4002 	smmla	r0, r0, r2, r4
 802485e:	fb53 4302 	smmla	r3, r3, r2, r4
 8024862:	fa40 f101 	asr.w	r1, r0, r1
 8024866:	f301 0107 	ssat	r1, #8, r1
 802486a:	9a04      	ldr	r2, [sp, #16]
 802486c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8024870:	9a01      	ldr	r2, [sp, #4]
 8024872:	f932 4c02 	ldrsh.w	r4, [r2, #-2]
 8024876:	fa43 f404 	asr.w	r4, r3, r4
 802487a:	f304 0407 	ssat	r4, #8, r4
 802487e:	9b03      	ldr	r3, [sp, #12]
 8024880:	f803 4c01 	strb.w	r4, [r3, #-1]
 8024884:	e73b      	b.n	80246fe <st_sssa8_ch_nn_mat_mult_kernel_opt+0x366>
 8024886:	2900      	cmp	r1, #0
 8024888:	dd3b      	ble.n	8024902 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x56a>
 802488a:	006d      	lsls	r5, r5, #1
 802488c:	0064      	lsls	r4, r4, #1
 802488e:	fb55 7506 	smmla	r5, r5, r6, r7
 8024892:	fb54 7406 	smmla	r4, r4, r6, r7
 8024896:	410d      	asrs	r5, r1
 8024898:	f305 0507 	ssat	r5, #8, r5
 802489c:	9a04      	ldr	r2, [sp, #16]
 802489e:	f802 5c02 	strb.w	r5, [r2, #-2]
 80248a2:	9a01      	ldr	r2, [sp, #4]
 80248a4:	f932 2c04 	ldrsh.w	r2, [r2, #-4]
 80248a8:	4114      	asrs	r4, r2
 80248aa:	f304 0407 	ssat	r4, #8, r4
 80248ae:	9a03      	ldr	r2, [sp, #12]
 80248b0:	f802 4c02 	strb.w	r4, [r2, #-2]
 80248b4:	e6ff      	b.n	80246b6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x31e>
 80248b6:	f10b 0b04 	add.w	fp, fp, #4
 80248ba:	e6d8      	b.n	802466e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d6>
 80248bc:	f1c1 0101 	rsb	r1, r1, #1
 80248c0:	4088      	lsls	r0, r1
 80248c2:	f300 001f 	ssat	r0, #32, r0
 80248c6:	9a05      	ldr	r2, [sp, #20]
 80248c8:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80248cc:	fb50 f014 	smmulr	r0, r0, r4
 80248d0:	fa03 f101 	lsl.w	r1, r3, r1
 80248d4:	f301 011f 	ssat	r1, #32, r1
 80248d8:	fb51 f114 	smmulr	r1, r1, r4
 80248dc:	9b02      	ldr	r3, [sp, #8]
 80248de:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80248e2:	4402      	add	r2, r0
 80248e4:	f302 0207 	ssat	r2, #8, r2
 80248e8:	9804      	ldr	r0, [sp, #16]
 80248ea:	f800 2c01 	strb.w	r2, [r0, #-1]
 80248ee:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80248f2:	440b      	add	r3, r1
 80248f4:	f303 0307 	ssat	r3, #8, r3
 80248f8:	9a03      	ldr	r2, [sp, #12]
 80248fa:	f802 3c01 	strb.w	r3, [r2, #-1]
 80248fe:	9a01      	ldr	r2, [sp, #4]
 8024900:	e6fd      	b.n	80246fe <st_sssa8_ch_nn_mat_mult_kernel_opt+0x366>
 8024902:	f1c1 0101 	rsb	r1, r1, #1
 8024906:	408d      	lsls	r5, r1
 8024908:	f305 051f 	ssat	r5, #32, r5
 802490c:	fb55 f516 	smmulr	r5, r5, r6
 8024910:	fa04 f101 	lsl.w	r1, r4, r1
 8024914:	f301 011f 	ssat	r1, #32, r1
 8024918:	fb51 f616 	smmulr	r6, r1, r6
 802491c:	443d      	add	r5, r7
 802491e:	f305 0507 	ssat	r5, #8, r5
 8024922:	9a04      	ldr	r2, [sp, #16]
 8024924:	f802 5c02 	strb.w	r5, [r2, #-2]
 8024928:	9a02      	ldr	r2, [sp, #8]
 802492a:	f852 2c08 	ldr.w	r2, [r2, #-8]
 802492e:	4416      	add	r6, r2
 8024930:	f306 0607 	ssat	r6, #8, r6
 8024934:	9a03      	ldr	r2, [sp, #12]
 8024936:	f802 6c02 	strb.w	r6, [r2, #-2]
 802493a:	e6bc      	b.n	80246b6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x31e>
 802493c:	1e97      	subs	r7, r2, #2
 802493e:	1e56      	subs	r6, r2, #1
 8024940:	2201      	movs	r2, #1
 8024942:	40ba      	lsls	r2, r7
 8024944:	fb51 2105 	smmla	r1, r1, r5, r2
 8024948:	4131      	asrs	r1, r6
 802494a:	fb53 2305 	smmla	r3, r3, r5, r2
 802494e:	190a      	adds	r2, r1, r4
 8024950:	f302 0207 	ssat	r2, #8, r2
 8024954:	4133      	asrs	r3, r6
 8024956:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8024958:	4423      	add	r3, r4
 802495a:	700a      	strb	r2, [r1, #0]
 802495c:	f303 0307 	ssat	r3, #8, r3
 8024960:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8024962:	9029      	str	r0, [sp, #164]	; 0xa4
 8024964:	7013      	strb	r3, [r2, #0]
 8024966:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024968:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802496a:	ebc3 0042 	rsb	r0, r3, r2, lsl #1
 802496e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024970:	4418      	add	r0, r3
 8024972:	b01b      	add	sp, #108	; 0x6c
 8024974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024978:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802497a:	462c      	mov	r4, r5
 802497c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802497e:	f04f 0e00 	mov.w	lr, #0
 8024982:	9300      	str	r3, [sp, #0]
 8024984:	4603      	mov	r3, r0
 8024986:	e5e9      	b.n	802455c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1c4>
 8024988:	f10b 0b08 	add.w	fp, fp, #8
 802498c:	e66f      	b.n	802466e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d6>
 802498e:	f1c2 0601 	rsb	r6, r2, #1
 8024992:	fa01 f206 	lsl.w	r2, r1, r6
 8024996:	f302 021f 	ssat	r2, #32, r2
 802499a:	fb52 f215 	smmulr	r2, r2, r5
 802499e:	40b3      	lsls	r3, r6
 80249a0:	f303 031f 	ssat	r3, #32, r3
 80249a4:	fb53 f115 	smmulr	r1, r3, r5
 80249a8:	1913      	adds	r3, r2, r4
 80249aa:	f303 0307 	ssat	r3, #8, r3
 80249ae:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80249b0:	7013      	strb	r3, [r2, #0]
 80249b2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80249b4:	681b      	ldr	r3, [r3, #0]
 80249b6:	440b      	add	r3, r1
 80249b8:	f303 0307 	ssat	r3, #8, r3
 80249bc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80249be:	9029      	str	r0, [sp, #164]	; 0xa4
 80249c0:	7013      	strb	r3, [r2, #0]
 80249c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80249c4:	e7d0      	b.n	8024968 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5d0>
 80249c6:	460b      	mov	r3, r1
 80249c8:	e6f8      	b.n	80247bc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x424>
 80249ca:	bf00      	nop

080249cc <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 80249cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80249d0:	b08f      	sub	sp, #60	; 0x3c
 80249d2:	460f      	mov	r7, r1
 80249d4:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 80249d8:	9105      	str	r1, [sp, #20]
 80249da:	f8bd 4064 	ldrh.w	r4, [sp, #100]	; 0x64
 80249de:	0859      	lsrs	r1, r3, #1
 80249e0:	930c      	str	r3, [sp, #48]	; 0x30
 80249e2:	920b      	str	r2, [sp, #44]	; 0x2c
 80249e4:	9402      	str	r4, [sp, #8]
 80249e6:	f000 81d6 	beq.w	8024d96 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3ca>
 80249ea:	4616      	mov	r6, r2
 80249ec:	1ee5      	subs	r5, r4, #3
 80249ee:	3901      	subs	r1, #1
 80249f0:	3210      	adds	r2, #16
 80249f2:	9507      	str	r5, [sp, #28]
 80249f4:	f106 0508 	add.w	r5, r6, #8
 80249f8:	f1a4 0310 	sub.w	r3, r4, #16
 80249fc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80249fe:	9503      	str	r5, [sp, #12]
 8024a00:	b28d      	uxth	r5, r1
 8024a02:	091b      	lsrs	r3, r3, #4
 8024a04:	3602      	adds	r6, #2
 8024a06:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8024a0a:	950d      	str	r5, [sp, #52]	; 0x34
 8024a0c:	3301      	adds	r3, #1
 8024a0e:	9601      	str	r6, [sp, #4]
 8024a10:	9206      	str	r2, [sp, #24]
 8024a12:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8024a14:	eb07 1e43 	add.w	lr, r7, r3, lsl #5
 8024a18:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8024a1a:	f102 0a08 	add.w	sl, r2, #8
 8024a1e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8024a20:	3604      	adds	r6, #4
 8024a22:	f102 0b08 	add.w	fp, r2, #8
 8024a26:	019a      	lsls	r2, r3, #6
 8024a28:	011b      	lsls	r3, r3, #4
 8024a2a:	9600      	str	r6, [sp, #0]
 8024a2c:	9208      	str	r2, [sp, #32]
 8024a2e:	1f22      	subs	r2, r4, #4
 8024a30:	9309      	str	r3, [sp, #36]	; 0x24
 8024a32:	9b03      	ldr	r3, [sp, #12]
 8024a34:	920a      	str	r2, [sp, #40]	; 0x28
 8024a36:	9a02      	ldr	r2, [sp, #8]
 8024a38:	f853 4c08 	ldr.w	r4, [r3, #-8]
 8024a3c:	2a0f      	cmp	r2, #15
 8024a3e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8024a42:	f340 8182 	ble.w	8024d4a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x37e>
 8024a46:	f8dd c014 	ldr.w	ip, [sp, #20]
 8024a4a:	4607      	mov	r7, r0
 8024a4c:	f8dc 5000 	ldr.w	r5, [ip]
 8024a50:	6839      	ldr	r1, [r7, #0]
 8024a52:	fb21 4405 	smlad	r4, r1, r5, r4
 8024a56:	687a      	ldr	r2, [r7, #4]
 8024a58:	fb22 3305 	smlad	r3, r2, r5, r3
 8024a5c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8024a60:	68b9      	ldr	r1, [r7, #8]
 8024a62:	fb21 4105 	smlad	r1, r1, r5, r4
 8024a66:	68fa      	ldr	r2, [r7, #12]
 8024a68:	fb22 3205 	smlad	r2, r2, r5, r3
 8024a6c:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8024a70:	693c      	ldr	r4, [r7, #16]
 8024a72:	fb24 1105 	smlad	r1, r4, r5, r1
 8024a76:	697b      	ldr	r3, [r7, #20]
 8024a78:	fb23 2205 	smlad	r2, r3, r5, r2
 8024a7c:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8024a80:	69bc      	ldr	r4, [r7, #24]
 8024a82:	fb24 1405 	smlad	r4, r4, r5, r1
 8024a86:	69fb      	ldr	r3, [r7, #28]
 8024a88:	fb23 2305 	smlad	r3, r3, r5, r2
 8024a8c:	f8dc 5010 	ldr.w	r5, [ip, #16]
 8024a90:	6a39      	ldr	r1, [r7, #32]
 8024a92:	fb21 4405 	smlad	r4, r1, r5, r4
 8024a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024a98:	fb22 3305 	smlad	r3, r2, r5, r3
 8024a9c:	f8dc 5014 	ldr.w	r5, [ip, #20]
 8024aa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8024aa2:	fb21 4105 	smlad	r1, r1, r5, r4
 8024aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024aa8:	fb22 3205 	smlad	r2, r2, r5, r3
 8024aac:	f8dc 5018 	ldr.w	r5, [ip, #24]
 8024ab0:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8024ab2:	fb24 1105 	smlad	r1, r4, r5, r1
 8024ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024ab8:	fb23 2205 	smlad	r2, r3, r5, r2
 8024abc:	f8dc 501c 	ldr.w	r5, [ip, #28]
 8024ac0:	3740      	adds	r7, #64	; 0x40
 8024ac2:	f857 4c08 	ldr.w	r4, [r7, #-8]
 8024ac6:	f10c 0c20 	add.w	ip, ip, #32
 8024aca:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8024ace:	fb24 1405 	smlad	r4, r4, r5, r1
 8024ad2:	fb23 2305 	smlad	r3, r3, r5, r2
 8024ad6:	45f4      	cmp	ip, lr
 8024ad8:	d1b8      	bne.n	8024a4c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x80>
 8024ada:	9a08      	ldr	r2, [sp, #32]
 8024adc:	4677      	mov	r7, lr
 8024ade:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8024ae2:	4410      	add	r0, r2
 8024ae4:	9a07      	ldr	r2, [sp, #28]
 8024ae6:	4594      	cmp	ip, r2
 8024ae8:	da25      	bge.n	8024b36 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x16a>
 8024aea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024aec:	4606      	mov	r6, r0
 8024aee:	eba2 090c 	sub.w	r9, r2, ip
 8024af2:	ea4f 0999 	mov.w	r9, r9, lsr #2
 8024af6:	f109 0201 	add.w	r2, r9, #1
 8024afa:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 8024afe:	9204      	str	r2, [sp, #16]
 8024b00:	683a      	ldr	r2, [r7, #0]
 8024b02:	6831      	ldr	r1, [r6, #0]
 8024b04:	fb21 4402 	smlad	r4, r1, r2, r4
 8024b08:	6871      	ldr	r1, [r6, #4]
 8024b0a:	fb21 3202 	smlad	r2, r1, r2, r3
 8024b0e:	6879      	ldr	r1, [r7, #4]
 8024b10:	3610      	adds	r6, #16
 8024b12:	f856 5c08 	ldr.w	r5, [r6, #-8]
 8024b16:	3708      	adds	r7, #8
 8024b18:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8024b1c:	fb25 4401 	smlad	r4, r5, r1, r4
 8024b20:	fb23 2301 	smlad	r3, r3, r1, r2
 8024b24:	4547      	cmp	r7, r8
 8024b26:	d1eb      	bne.n	8024b00 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x134>
 8024b28:	f10c 0c04 	add.w	ip, ip, #4
 8024b2c:	9a04      	ldr	r2, [sp, #16]
 8024b2e:	eb0c 0c89 	add.w	ip, ip, r9, lsl #2
 8024b32:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8024b36:	9a02      	ldr	r2, [sp, #8]
 8024b38:	4562      	cmp	r2, ip
 8024b3a:	dd26      	ble.n	8024b8a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1be>
 8024b3c:	f9b7 1000 	ldrsh.w	r1, [r7]
 8024b40:	f10c 0201 	add.w	r2, ip, #1
 8024b44:	8806      	ldrh	r6, [r0, #0]
 8024b46:	8845      	ldrh	r5, [r0, #2]
 8024b48:	fb16 4401 	smlabb	r4, r6, r1, r4
 8024b4c:	fb11 3305 	smlabb	r3, r1, r5, r3
 8024b50:	9902      	ldr	r1, [sp, #8]
 8024b52:	4291      	cmp	r1, r2
 8024b54:	f340 80d5 	ble.w	8024d02 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x336>
 8024b58:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8024b5c:	f10c 0c02 	add.w	ip, ip, #2
 8024b60:	8885      	ldrh	r5, [r0, #4]
 8024b62:	88c1      	ldrh	r1, [r0, #6]
 8024b64:	fb15 4402 	smlabb	r4, r5, r2, r4
 8024b68:	fb12 3301 	smlabb	r3, r2, r1, r3
 8024b6c:	9a02      	ldr	r2, [sp, #8]
 8024b6e:	4562      	cmp	r2, ip
 8024b70:	f340 80ef 	ble.w	8024d52 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x386>
 8024b74:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8024b78:	300c      	adds	r0, #12
 8024b7a:	f830 5c04 	ldrh.w	r5, [r0, #-4]
 8024b7e:	f830 1c02 	ldrh.w	r1, [r0, #-2]
 8024b82:	fb15 4402 	smlabb	r4, r5, r2, r4
 8024b86:	fb12 3301 	smlabb	r3, r2, r1, r3
 8024b8a:	9a00      	ldr	r2, [sp, #0]
 8024b8c:	f85a 6c08 	ldr.w	r6, [sl, #-8]
 8024b90:	f932 2c04 	ldrsh.w	r2, [r2, #-4]
 8024b94:	f85b 1c08 	ldr.w	r1, [fp, #-8]
 8024b98:	2a15      	cmp	r2, #21
 8024b9a:	f340 80a5 	ble.w	8024ce8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x31c>
 8024b9e:	1e95      	subs	r5, r2, #2
 8024ba0:	2701      	movs	r7, #1
 8024ba2:	3a01      	subs	r2, #1
 8024ba4:	fa07 f505 	lsl.w	r5, r7, r5
 8024ba8:	fb54 5406 	smmla	r4, r4, r6, r5
 8024bac:	4114      	asrs	r4, r2
 8024bae:	440c      	add	r4, r1
 8024bb0:	f304 0407 	ssat	r4, #8, r4
 8024bb4:	9a01      	ldr	r2, [sp, #4]
 8024bb6:	f802 4c02 	strb.w	r4, [r2, #-2]
 8024bba:	9a00      	ldr	r2, [sp, #0]
 8024bbc:	f932 6c02 	ldrsh.w	r6, [r2, #-2]
 8024bc0:	2e15      	cmp	r6, #21
 8024bc2:	f340 8081 	ble.w	8024cc8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2fc>
 8024bc6:	1eb1      	subs	r1, r6, #2
 8024bc8:	2401      	movs	r4, #1
 8024bca:	3e01      	subs	r6, #1
 8024bcc:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 8024bd0:	fa04 f101 	lsl.w	r1, r4, r1
 8024bd4:	f85b 4c04 	ldr.w	r4, [fp, #-4]
 8024bd8:	fb53 1302 	smmla	r3, r3, r2, r1
 8024bdc:	4133      	asrs	r3, r6
 8024bde:	4423      	add	r3, r4
 8024be0:	f303 0307 	ssat	r3, #8, r3
 8024be4:	9a01      	ldr	r2, [sp, #4]
 8024be6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8024bea:	3202      	adds	r2, #2
 8024bec:	9b03      	ldr	r3, [sp, #12]
 8024bee:	f10a 0a08 	add.w	sl, sl, #8
 8024bf2:	f10b 0b08 	add.w	fp, fp, #8
 8024bf6:	9201      	str	r2, [sp, #4]
 8024bf8:	3308      	adds	r3, #8
 8024bfa:	9a00      	ldr	r2, [sp, #0]
 8024bfc:	9303      	str	r3, [sp, #12]
 8024bfe:	3204      	adds	r2, #4
 8024c00:	9200      	str	r2, [sp, #0]
 8024c02:	9a06      	ldr	r2, [sp, #24]
 8024c04:	429a      	cmp	r2, r3
 8024c06:	f47f af16 	bne.w	8024a36 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x6a>
 8024c0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024c0c:	991d      	ldr	r1, [sp, #116]	; 0x74
 8024c0e:	3301      	adds	r3, #1
 8024c10:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8024c14:	991a      	ldr	r1, [sp, #104]	; 0x68
 8024c16:	00da      	lsls	r2, r3, #3
 8024c18:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8024c1c:	931a      	str	r3, [sp, #104]	; 0x68
 8024c1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024c20:	4413      	add	r3, r2
 8024c22:	930b      	str	r3, [sp, #44]	; 0x2c
 8024c24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024c26:	4413      	add	r3, r2
 8024c28:	931b      	str	r3, [sp, #108]	; 0x6c
 8024c2a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024c2c:	4413      	add	r3, r2
 8024c2e:	931c      	str	r3, [sp, #112]	; 0x70
 8024c30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024c32:	07db      	lsls	r3, r3, #31
 8024c34:	d544      	bpl.n	8024cc0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f4>
 8024c36:	9a02      	ldr	r2, [sp, #8]
 8024c38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024c3a:	0892      	lsrs	r2, r2, #2
 8024c3c:	681b      	ldr	r3, [r3, #0]
 8024c3e:	d016      	beq.n	8024c6e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2a2>
 8024c40:	1e56      	subs	r6, r2, #1
 8024c42:	9905      	ldr	r1, [sp, #20]
 8024c44:	b2b6      	uxth	r6, r6
 8024c46:	3601      	adds	r6, #1
 8024c48:	00f6      	lsls	r6, r6, #3
 8024c4a:	1987      	adds	r7, r0, r6
 8024c4c:	6805      	ldr	r5, [r0, #0]
 8024c4e:	3008      	adds	r0, #8
 8024c50:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8024c54:	f8d1 c000 	ldr.w	ip, [r1]
 8024c58:	fb25 330c 	smlad	r3, r5, ip, r3
 8024c5c:	684d      	ldr	r5, [r1, #4]
 8024c5e:	3108      	adds	r1, #8
 8024c60:	fb22 3305 	smlad	r3, r2, r5, r3
 8024c64:	42b8      	cmp	r0, r7
 8024c66:	d1f1      	bne.n	8024c4c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x280>
 8024c68:	9a05      	ldr	r2, [sp, #20]
 8024c6a:	4432      	add	r2, r6
 8024c6c:	9205      	str	r2, [sp, #20]
 8024c6e:	9a02      	ldr	r2, [sp, #8]
 8024c70:	f012 0203 	ands.w	r2, r2, #3
 8024c74:	d010      	beq.n	8024c98 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2cc>
 8024c76:	9e05      	ldr	r6, [sp, #20]
 8024c78:	2a01      	cmp	r2, #1
 8024c7a:	8801      	ldrh	r1, [r0, #0]
 8024c7c:	8835      	ldrh	r5, [r6, #0]
 8024c7e:	fb15 3301 	smlabb	r3, r5, r1, r3
 8024c82:	d009      	beq.n	8024c98 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2cc>
 8024c84:	8875      	ldrh	r5, [r6, #2]
 8024c86:	2a02      	cmp	r2, #2
 8024c88:	8841      	ldrh	r1, [r0, #2]
 8024c8a:	fb15 3301 	smlabb	r3, r5, r1, r3
 8024c8e:	d003      	beq.n	8024c98 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2cc>
 8024c90:	8881      	ldrh	r1, [r0, #4]
 8024c92:	88b2      	ldrh	r2, [r6, #4]
 8024c94:	fb11 3302 	smlabb	r3, r1, r2, r3
 8024c98:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8024c9a:	1c61      	adds	r1, r4, #1
 8024c9c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8024c9e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8024ca2:	6806      	ldr	r6, [r0, #0]
 8024ca4:	2a15      	cmp	r2, #21
 8024ca6:	981c      	ldr	r0, [sp, #112]	; 0x70
 8024ca8:	6805      	ldr	r5, [r0, #0]
 8024caa:	dc54      	bgt.n	8024d56 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x38a>
 8024cac:	2a00      	cmp	r2, #0
 8024cae:	dd62      	ble.n	8024d76 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3aa>
 8024cb0:	005b      	lsls	r3, r3, #1
 8024cb2:	fb53 5306 	smmla	r3, r3, r6, r5
 8024cb6:	4113      	asrs	r3, r2
 8024cb8:	f303 0307 	ssat	r3, #8, r3
 8024cbc:	7023      	strb	r3, [r4, #0]
 8024cbe:	460c      	mov	r4, r1
 8024cc0:	4620      	mov	r0, r4
 8024cc2:	b00f      	add	sp, #60	; 0x3c
 8024cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024cc8:	2e00      	cmp	r6, #0
 8024cca:	dd1c      	ble.n	8024d06 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x33a>
 8024ccc:	f85a 4c04 	ldr.w	r4, [sl, #-4]
 8024cd0:	005b      	lsls	r3, r3, #1
 8024cd2:	f85b 5c04 	ldr.w	r5, [fp, #-4]
 8024cd6:	fb53 5304 	smmla	r3, r3, r4, r5
 8024cda:	4133      	asrs	r3, r6
 8024cdc:	f303 0307 	ssat	r3, #8, r3
 8024ce0:	9a01      	ldr	r2, [sp, #4]
 8024ce2:	f802 3c01 	strb.w	r3, [r2, #-1]
 8024ce6:	e780      	b.n	8024bea <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x21e>
 8024ce8:	2a00      	cmp	r2, #0
 8024cea:	dd1f      	ble.n	8024d2c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x360>
 8024cec:	0064      	lsls	r4, r4, #1
 8024cee:	fb54 1406 	smmla	r4, r4, r6, r1
 8024cf2:	fa44 f202 	asr.w	r2, r4, r2
 8024cf6:	f302 0207 	ssat	r2, #8, r2
 8024cfa:	9901      	ldr	r1, [sp, #4]
 8024cfc:	f801 2c02 	strb.w	r2, [r1, #-2]
 8024d00:	e75b      	b.n	8024bba <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ee>
 8024d02:	3004      	adds	r0, #4
 8024d04:	e741      	b.n	8024b8a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1be>
 8024d06:	f1c6 0601 	rsb	r6, r6, #1
 8024d0a:	40b3      	lsls	r3, r6
 8024d0c:	f303 031f 	ssat	r3, #32, r3
 8024d10:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 8024d14:	fb53 f212 	smmulr	r2, r3, r2
 8024d18:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 8024d1c:	441a      	add	r2, r3
 8024d1e:	f302 0207 	ssat	r2, #8, r2
 8024d22:	9b01      	ldr	r3, [sp, #4]
 8024d24:	f803 2c01 	strb.w	r2, [r3, #-1]
 8024d28:	461a      	mov	r2, r3
 8024d2a:	e75e      	b.n	8024bea <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x21e>
 8024d2c:	f1c2 0201 	rsb	r2, r2, #1
 8024d30:	fa04 f202 	lsl.w	r2, r4, r2
 8024d34:	f302 021f 	ssat	r2, #32, r2
 8024d38:	fb52 f216 	smmulr	r2, r2, r6
 8024d3c:	440a      	add	r2, r1
 8024d3e:	f302 0207 	ssat	r2, #8, r2
 8024d42:	9901      	ldr	r1, [sp, #4]
 8024d44:	f801 2c02 	strb.w	r2, [r1, #-2]
 8024d48:	e737      	b.n	8024bba <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ee>
 8024d4a:	9f05      	ldr	r7, [sp, #20]
 8024d4c:	f04f 0c00 	mov.w	ip, #0
 8024d50:	e6c8      	b.n	8024ae4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x118>
 8024d52:	3008      	adds	r0, #8
 8024d54:	e719      	b.n	8024b8a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1be>
 8024d56:	1e97      	subs	r7, r2, #2
 8024d58:	2001      	movs	r0, #1
 8024d5a:	3a01      	subs	r2, #1
 8024d5c:	40b8      	lsls	r0, r7
 8024d5e:	fb53 0306 	smmla	r3, r3, r6, r0
 8024d62:	4113      	asrs	r3, r2
 8024d64:	442b      	add	r3, r5
 8024d66:	f303 0307 	ssat	r3, #8, r3
 8024d6a:	7023      	strb	r3, [r4, #0]
 8024d6c:	460c      	mov	r4, r1
 8024d6e:	4620      	mov	r0, r4
 8024d70:	b00f      	add	sp, #60	; 0x3c
 8024d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024d76:	f1c2 0201 	rsb	r2, r2, #1
 8024d7a:	4093      	lsls	r3, r2
 8024d7c:	f303 031f 	ssat	r3, #32, r3
 8024d80:	fb53 f316 	smmulr	r3, r3, r6
 8024d84:	442b      	add	r3, r5
 8024d86:	f303 0307 	ssat	r3, #8, r3
 8024d8a:	7023      	strb	r3, [r4, #0]
 8024d8c:	460c      	mov	r4, r1
 8024d8e:	4620      	mov	r0, r4
 8024d90:	b00f      	add	sp, #60	; 0x3c
 8024d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024d96:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8024d98:	e74b      	b.n	8024c32 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x266>
 8024d9a:	bf00      	nop

08024d9c <st_int8_avepool>:
 8024d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024da0:	b099      	sub	sp, #100	; 0x64
 8024da2:	4615      	mov	r5, r2
 8024da4:	eec0 4a20 	vdiv.f32	s9, s0, s1
 8024da8:	900b      	str	r0, [sp, #44]	; 0x2c
 8024daa:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 8024dae:	f8bd 40a8 	ldrh.w	r4, [sp, #168]	; 0xa8
 8024db2:	9012      	str	r0, [sp, #72]	; 0x48
 8024db4:	f8bd 00a0 	ldrh.w	r0, [sp, #160]	; 0xa0
 8024db8:	9109      	str	r1, [sp, #36]	; 0x24
 8024dba:	9015      	str	r0, [sp, #84]	; 0x54
 8024dbc:	f8bd 00a4 	ldrh.w	r0, [sp, #164]	; 0xa4
 8024dc0:	9416      	str	r4, [sp, #88]	; 0x58
 8024dc2:	900e      	str	r0, [sp, #56]	; 0x38
 8024dc4:	f99d 00ac 	ldrsb.w	r0, [sp, #172]	; 0xac
 8024dc8:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8024dcc:	ee03 0a90 	vmov	s7, r0
 8024dd0:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 8024dd4:	f99d 00b0 	ldrsb.w	r0, [sp, #176]	; 0xb0
 8024dd8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8024ddc:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8024de0:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
 8024de4:	9311      	str	r3, [sp, #68]	; 0x44
 8024de6:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 8024dea:	2c00      	cmp	r4, #0
 8024dec:	f000 80dc 	beq.w	8024fa8 <st_int8_avepool+0x20c>
 8024df0:	1ac9      	subs	r1, r1, r3
 8024df2:	eeb4 0a60 	vcmp.f32	s0, s1
 8024df6:	425b      	negs	r3, r3
 8024df8:	ee04 0a10 	vmov	s8, r0
 8024dfc:	b289      	uxth	r1, r1
 8024dfe:	2000      	movs	r0, #0
 8024e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024e04:	b29b      	uxth	r3, r3
 8024e06:	9113      	str	r1, [sp, #76]	; 0x4c
 8024e08:	f1c2 0100 	rsb	r1, r2, #0
 8024e0c:	9014      	str	r0, [sp, #80]	; 0x50
 8024e0e:	4602      	mov	r2, r0
 8024e10:	9117      	str	r1, [sp, #92]	; 0x5c
 8024e12:	ee13 1a90 	vmov	r1, s7
 8024e16:	9301      	str	r3, [sp, #4]
 8024e18:	462b      	mov	r3, r5
 8024e1a:	fb05 fb07 	mul.w	fp, r5, r7
 8024e1e:	bf14      	ite	ne
 8024e20:	4603      	movne	r3, r0
 8024e22:	2301      	moveq	r3, #1
 8024e24:	ee14 0a10 	vmov	r0, s8
 8024e28:	ed9f 5a6d 	vldr	s10, [pc, #436]	; 8024fe0 <st_int8_avepool+0x244>
 8024e2c:	46da      	mov	sl, fp
 8024e2e:	4281      	cmp	r1, r0
 8024e30:	bf14      	ite	ne
 8024e32:	2300      	movne	r3, #0
 8024e34:	f003 0301 	andeq.w	r3, r3, #1
 8024e38:	ed9f 3a6a 	vldr	s6, [pc, #424]	; 8024fe4 <st_int8_avepool+0x248>
 8024e3c:	46b9      	mov	r9, r7
 8024e3e:	9307      	str	r3, [sp, #28]
 8024e40:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024e42:	2900      	cmp	r1, #0
 8024e44:	f000 809d 	beq.w	8024f82 <st_int8_avepool+0x1e6>
 8024e48:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8024e4a:	fb01 f202 	mul.w	r2, r1, r2
 8024e4e:	9d01      	ldr	r5, [sp, #4]
 8024e50:	2400      	movs	r4, #0
 8024e52:	1e43      	subs	r3, r0, #1
 8024e54:	920f      	str	r2, [sp, #60]	; 0x3c
 8024e56:	fa0f fb85 	sxth.w	fp, r5
 8024e5a:	9a03      	ldr	r2, [sp, #12]
 8024e5c:	1b5b      	subs	r3, r3, r5
 8024e5e:	b201      	sxth	r1, r0
 8024e60:	fb02 f20b 	mul.w	r2, r2, fp
 8024e64:	464f      	mov	r7, r9
 8024e66:	b29b      	uxth	r3, r3
 8024e68:	9108      	str	r1, [sp, #32]
 8024e6a:	9210      	str	r2, [sp, #64]	; 0x40
 8024e6c:	4622      	mov	r2, r4
 8024e6e:	3301      	adds	r3, #1
 8024e70:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
 8024e74:	940d      	str	r4, [sp, #52]	; 0x34
 8024e76:	4699      	mov	r9, r3
 8024e78:	910c      	str	r1, [sp, #48]	; 0x30
 8024e7a:	2f00      	cmp	r7, #0
 8024e7c:	d073      	beq.n	8024f66 <st_int8_avepool+0x1ca>
 8024e7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024e80:	eef8 5ae3 	vcvt.f32.s32	s11, s7
 8024e84:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024e86:	eeb8 6ac4 	vcvt.f32.s32	s12, s8
 8024e8a:	441a      	add	r2, r3
 8024e8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024e8e:	fa0f f881 	sxth.w	r8, r1
 8024e92:	185d      	adds	r5, r3, r1
 8024e94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024e96:	2100      	movs	r1, #0
 8024e98:	fb07 f202 	mul.w	r2, r7, r2
 8024e9c:	4443      	add	r3, r8
 8024e9e:	b22d      	sxth	r5, r5
 8024ea0:	9105      	str	r1, [sp, #20]
 8024ea2:	fb07 f303 	mul.w	r3, r7, r3
 8024ea6:	9206      	str	r2, [sp, #24]
 8024ea8:	930a      	str	r3, [sp, #40]	; 0x28
 8024eaa:	9104      	str	r1, [sp, #16]
 8024eac:	9b08      	ldr	r3, [sp, #32]
 8024eae:	459b      	cmp	fp, r3
 8024eb0:	f280 8090 	bge.w	8024fd4 <st_int8_avepool+0x238>
 8024eb4:	9b04      	ldr	r3, [sp, #16]
 8024eb6:	2400      	movs	r4, #0
 8024eb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024eba:	46a4      	mov	ip, r4
 8024ebc:	46a6      	mov	lr, r4
 8024ebe:	189e      	adds	r6, r3, r2
 8024ec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024ec2:	441e      	add	r6, r3
 8024ec4:	45a8      	cmp	r8, r5
 8024ec6:	da1b      	bge.n	8024f00 <st_int8_avepool+0x164>
 8024ec8:	9b01      	ldr	r3, [sp, #4]
 8024eca:	9902      	ldr	r1, [sp, #8]
 8024ecc:	191a      	adds	r2, r3, r4
 8024ece:	eb0b 0304 	add.w	r3, fp, r4
 8024ed2:	43d2      	mvns	r2, r2
 8024ed4:	4299      	cmp	r1, r3
 8024ed6:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8024eda:	dd11      	ble.n	8024f00 <st_int8_avepool+0x164>
 8024edc:	4631      	mov	r1, r6
 8024ede:	4643      	mov	r3, r8
 8024ee0:	0418      	lsls	r0, r3, #16
 8024ee2:	d408      	bmi.n	8024ef6 <st_int8_avepool+0x15a>
 8024ee4:	b13a      	cbz	r2, 8024ef6 <st_int8_avepool+0x15a>
 8024ee6:	9803      	ldr	r0, [sp, #12]
 8024ee8:	4298      	cmp	r0, r3
 8024eea:	dd04      	ble.n	8024ef6 <st_int8_avepool+0x15a>
 8024eec:	f991 0000 	ldrsb.w	r0, [r1]
 8024ef0:	f10c 0c01 	add.w	ip, ip, #1
 8024ef4:	4486      	add	lr, r0
 8024ef6:	3301      	adds	r3, #1
 8024ef8:	4439      	add	r1, r7
 8024efa:	b218      	sxth	r0, r3
 8024efc:	4285      	cmp	r5, r0
 8024efe:	dcef      	bgt.n	8024ee0 <st_int8_avepool+0x144>
 8024f00:	3401      	adds	r4, #1
 8024f02:	4456      	add	r6, sl
 8024f04:	45a1      	cmp	r9, r4
 8024f06:	d1dd      	bne.n	8024ec4 <st_int8_avepool+0x128>
 8024f08:	9b07      	ldr	r3, [sp, #28]
 8024f0a:	2b00      	cmp	r3, #0
 8024f0c:	d14f      	bne.n	8024fae <st_int8_avepool+0x212>
 8024f0e:	ee07 ea90 	vmov	s15, lr
 8024f12:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8024f16:	ee07 ca90 	vmov	s15, ip
 8024f1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8024f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8024f22:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8024f26:	eef0 6a46 	vmov.f32	s13, s12
 8024f2a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8024f2e:	eee7 6aa4 	vfma.f32	s13, s15, s9
 8024f32:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8024f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024f3a:	fe27 7a05 	vselge.f32	s14, s14, s10
 8024f3e:	ee77 7a26 	vadd.f32	s15, s14, s13
 8024f42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024f46:	ee17 3a90 	vmov	r3, s15
 8024f4a:	f303 0307 	ssat	r3, #8, r3
 8024f4e:	9906      	ldr	r1, [sp, #24]
 8024f50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024f52:	440a      	add	r2, r1
 8024f54:	9904      	ldr	r1, [sp, #16]
 8024f56:	5453      	strb	r3, [r2, r1]
 8024f58:	9b05      	ldr	r3, [sp, #20]
 8024f5a:	3301      	adds	r3, #1
 8024f5c:	b21b      	sxth	r3, r3
 8024f5e:	42bb      	cmp	r3, r7
 8024f60:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8024f64:	dba2      	blt.n	8024eac <st_int8_avepool+0x110>
 8024f66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024f68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024f6a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8024f6c:	3201      	adds	r2, #1
 8024f6e:	440b      	add	r3, r1
 8024f70:	b212      	sxth	r2, r2
 8024f72:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024f74:	b29b      	uxth	r3, r3
 8024f76:	920d      	str	r2, [sp, #52]	; 0x34
 8024f78:	428a      	cmp	r2, r1
 8024f7a:	930c      	str	r3, [sp, #48]	; 0x30
 8024f7c:	f6ff af7d 	blt.w	8024e7a <st_int8_avepool+0xde>
 8024f80:	46b9      	mov	r9, r7
 8024f82:	9b01      	ldr	r3, [sp, #4]
 8024f84:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024f86:	461a      	mov	r2, r3
 8024f88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024f8a:	9914      	ldr	r1, [sp, #80]	; 0x50
 8024f8c:	4403      	add	r3, r0
 8024f8e:	4402      	add	r2, r0
 8024f90:	3101      	adds	r1, #1
 8024f92:	b29b      	uxth	r3, r3
 8024f94:	b209      	sxth	r1, r1
 8024f96:	9313      	str	r3, [sp, #76]	; 0x4c
 8024f98:	b292      	uxth	r2, r2
 8024f9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024f9c:	9201      	str	r2, [sp, #4]
 8024f9e:	460a      	mov	r2, r1
 8024fa0:	428b      	cmp	r3, r1
 8024fa2:	9114      	str	r1, [sp, #80]	; 0x50
 8024fa4:	f73f af4c 	bgt.w	8024e40 <st_int8_avepool+0xa4>
 8024fa8:	b019      	add	sp, #100	; 0x64
 8024faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024fae:	f1be 0f00 	cmp.w	lr, #0
 8024fb2:	db04      	blt.n	8024fbe <st_int8_avepool+0x222>
 8024fb4:	eb0e 0e6c 	add.w	lr, lr, ip, asr #1
 8024fb8:	fb9e f3fc 	sdiv	r3, lr, ip
 8024fbc:	e7c5      	b.n	8024f4a <st_int8_avepool+0x1ae>
 8024fbe:	f1bc 0f00 	cmp.w	ip, #0
 8024fc2:	4663      	mov	r3, ip
 8024fc4:	bfb8      	it	lt
 8024fc6:	f10c 0301 	addlt.w	r3, ip, #1
 8024fca:	ebae 0363 	sub.w	r3, lr, r3, asr #1
 8024fce:	fb93 f3fc 	sdiv	r3, r3, ip
 8024fd2:	e7ba      	b.n	8024f4a <st_int8_avepool+0x1ae>
 8024fd4:	9b07      	ldr	r3, [sp, #28]
 8024fd6:	b913      	cbnz	r3, 8024fde <st_int8_avepool+0x242>
 8024fd8:	eef0 7a43 	vmov.f32	s15, s6
 8024fdc:	e7a1      	b.n	8024f22 <st_int8_avepool+0x186>
 8024fde:	deff      	udf	#255	; 0xff
 8024fe0:	befffffc 	.word	0xbefffffc
 8024fe4:	7fc00000 	.word	0x7fc00000

08024fe8 <st_dsp_arm_copy_q7>:
 8024fe8:	b470      	push	{r4, r5, r6}
 8024fea:	0896      	lsrs	r6, r2, #2
 8024fec:	d01b      	beq.n	8025026 <st_dsp_arm_copy_q7+0x3e>
 8024fee:	00b6      	lsls	r6, r6, #2
 8024ff0:	460b      	mov	r3, r1
 8024ff2:	1985      	adds	r5, r0, r6
 8024ff4:	f850 4b04 	ldr.w	r4, [r0], #4
 8024ff8:	42a8      	cmp	r0, r5
 8024ffa:	f843 4b04 	str.w	r4, [r3], #4
 8024ffe:	d1f9      	bne.n	8024ff4 <st_dsp_arm_copy_q7+0xc>
 8025000:	4431      	add	r1, r6
 8025002:	f012 0203 	ands.w	r2, r2, #3
 8025006:	d00c      	beq.n	8025022 <st_dsp_arm_copy_q7+0x3a>
 8025008:	f995 3000 	ldrsb.w	r3, [r5]
 802500c:	2a01      	cmp	r2, #1
 802500e:	700b      	strb	r3, [r1, #0]
 8025010:	d007      	beq.n	8025022 <st_dsp_arm_copy_q7+0x3a>
 8025012:	f995 3001 	ldrsb.w	r3, [r5, #1]
 8025016:	2a02      	cmp	r2, #2
 8025018:	704b      	strb	r3, [r1, #1]
 802501a:	d002      	beq.n	8025022 <st_dsp_arm_copy_q7+0x3a>
 802501c:	f995 3002 	ldrsb.w	r3, [r5, #2]
 8025020:	708b      	strb	r3, [r1, #2]
 8025022:	bc70      	pop	{r4, r5, r6}
 8025024:	4770      	bx	lr
 8025026:	4605      	mov	r5, r0
 8025028:	e7eb      	b.n	8025002 <st_dsp_arm_copy_q7+0x1a>
 802502a:	bf00      	nop

0802502c <st_dsp_arm_fill_q15>:
 802502c:	b470      	push	{r4, r5, r6}
 802502e:	b285      	uxth	r5, r0
 8025030:	0896      	lsrs	r6, r2, #2
 8025032:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8025036:	d009      	beq.n	802504c <st_dsp_arm_fill_q15+0x20>
 8025038:	460b      	mov	r3, r1
 802503a:	4634      	mov	r4, r6
 802503c:	3c01      	subs	r4, #1
 802503e:	601d      	str	r5, [r3, #0]
 8025040:	605d      	str	r5, [r3, #4]
 8025042:	f103 0308 	add.w	r3, r3, #8
 8025046:	d1f9      	bne.n	802503c <st_dsp_arm_fill_q15+0x10>
 8025048:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 802504c:	f012 0203 	ands.w	r2, r2, #3
 8025050:	d006      	beq.n	8025060 <st_dsp_arm_fill_q15+0x34>
 8025052:	2a01      	cmp	r2, #1
 8025054:	8008      	strh	r0, [r1, #0]
 8025056:	d003      	beq.n	8025060 <st_dsp_arm_fill_q15+0x34>
 8025058:	2a02      	cmp	r2, #2
 802505a:	8048      	strh	r0, [r1, #2]
 802505c:	bf18      	it	ne
 802505e:	8088      	strhne	r0, [r1, #4]
 8025060:	bc70      	pop	{r4, r5, r6}
 8025062:	4770      	bx	lr

08025064 <st_dsp_arm_float_to_q15>:
 8025064:	b4f0      	push	{r4, r5, r6, r7}
 8025066:	0897      	lsrs	r7, r2, #2
 8025068:	d06b      	beq.n	8025142 <st_dsp_arm_float_to_q15+0xde>
 802506a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 802506e:	f100 0510 	add.w	r5, r0, #16
 8025072:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8025076:	f101 0408 	add.w	r4, r1, #8
 802507a:	463e      	mov	r6, r7
 802507c:	ed9f 6a55 	vldr	s12, [pc, #340]	; 80251d4 <st_dsp_arm_float_to_q15+0x170>
 8025080:	e00b      	b.n	802509a <st_dsp_arm_float_to_q15+0x36>
 8025082:	ee17 3a10 	vmov	r3, s14
 8025086:	f303 030f 	ssat	r3, #16, r3
 802508a:	3e01      	subs	r6, #1
 802508c:	f824 3c02 	strh.w	r3, [r4, #-2]
 8025090:	f105 0510 	add.w	r5, r5, #16
 8025094:	f104 0408 	add.w	r4, r4, #8
 8025098:	d04f      	beq.n	802513a <st_dsp_arm_float_to_q15+0xd6>
 802509a:	ed55 7a04 	vldr	s15, [r5, #-16]
 802509e:	ee27 7a86 	vmul.f32	s14, s15, s12
 80250a2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80250a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80250aa:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 80250ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80250b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80250b6:	ee17 3a90 	vmov	r3, s15
 80250ba:	f303 030f 	ssat	r3, #16, r3
 80250be:	f824 3c08 	strh.w	r3, [r4, #-8]
 80250c2:	ed55 7a03 	vldr	s15, [r5, #-12]
 80250c6:	ee27 7a86 	vmul.f32	s14, s15, s12
 80250ca:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80250ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80250d2:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 80250d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80250da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80250de:	ee17 3a90 	vmov	r3, s15
 80250e2:	f303 030f 	ssat	r3, #16, r3
 80250e6:	f824 3c06 	strh.w	r3, [r4, #-6]
 80250ea:	ed55 7a02 	vldr	s15, [r5, #-8]
 80250ee:	ee27 7a86 	vmul.f32	s14, s15, s12
 80250f2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80250f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80250fa:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 80250fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8025102:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8025106:	ee17 3a90 	vmov	r3, s15
 802510a:	f303 030f 	ssat	r3, #16, r3
 802510e:	f824 3c04 	strh.w	r3, [r4, #-4]
 8025112:	ed55 7a01 	vldr	s15, [r5, #-4]
 8025116:	ee67 7a86 	vmul.f32	s15, s15, s12
 802511a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802511e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8025122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025126:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 802512a:	dcaa      	bgt.n	8025082 <st_dsp_arm_float_to_q15+0x1e>
 802512c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8025130:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8025134:	ee17 3a90 	vmov	r3, s15
 8025138:	e7a5      	b.n	8025086 <st_dsp_arm_float_to_q15+0x22>
 802513a:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 802513e:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 8025142:	f012 0203 	ands.w	r2, r2, #3
 8025146:	d042      	beq.n	80251ce <st_dsp_arm_float_to_q15+0x16a>
 8025148:	edd0 7a00 	vldr	s15, [r0]
 802514c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8025150:	eddf 5a20 	vldr	s11, [pc, #128]	; 80251d4 <st_dsp_arm_float_to_q15+0x170>
 8025154:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 8025158:	ee67 6aa5 	vmul.f32	s13, s15, s11
 802515c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8025160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025164:	fe77 7a06 	vselgt.f32	s15, s14, s12
 8025168:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802516c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8025170:	ee17 3a90 	vmov	r3, s15
 8025174:	f303 030f 	ssat	r3, #16, r3
 8025178:	2a01      	cmp	r2, #1
 802517a:	800b      	strh	r3, [r1, #0]
 802517c:	d027      	beq.n	80251ce <st_dsp_arm_float_to_q15+0x16a>
 802517e:	edd0 7a01 	vldr	s15, [r0, #4]
 8025182:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8025186:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802518a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802518e:	fe77 6a06 	vselgt.f32	s13, s14, s12
 8025192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8025196:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802519a:	ee17 3a90 	vmov	r3, s15
 802519e:	f303 030f 	ssat	r3, #16, r3
 80251a2:	2a02      	cmp	r2, #2
 80251a4:	804b      	strh	r3, [r1, #2]
 80251a6:	d012      	beq.n	80251ce <st_dsp_arm_float_to_q15+0x16a>
 80251a8:	edd0 7a02 	vldr	s15, [r0, #8]
 80251ac:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80251b0:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80251b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80251b8:	fe37 7a06 	vselgt.f32	s14, s14, s12
 80251bc:	ee37 7a25 	vadd.f32	s14, s14, s11
 80251c0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80251c4:	ee17 3a10 	vmov	r3, s14
 80251c8:	f303 030f 	ssat	r3, #16, r3
 80251cc:	808b      	strh	r3, [r1, #4]
 80251ce:	bcf0      	pop	{r4, r5, r6, r7}
 80251d0:	4770      	bx	lr
 80251d2:	bf00      	nop
 80251d4:	47000000 	.word	0x47000000

080251d8 <st_dsp_arm_float_to_q7>:
 80251d8:	b4f0      	push	{r4, r5, r6, r7}
 80251da:	0897      	lsrs	r7, r2, #2
 80251dc:	d066      	beq.n	80252ac <st_dsp_arm_float_to_q7+0xd4>
 80251de:	1d0c      	adds	r4, r1, #4
 80251e0:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 80251e4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80251e8:	f100 0510 	add.w	r5, r0, #16
 80251ec:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 80251f0:	eb04 060c 	add.w	r6, r4, ip
 80251f4:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 8025364 <st_dsp_arm_float_to_q7+0x18c>
 80251f8:	ed55 7a04 	vldr	s15, [r5, #-16]
 80251fc:	ee27 7a86 	vmul.f32	s14, s15, s12
 8025200:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8025204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025208:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 802520c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8025210:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8025214:	ee17 3a90 	vmov	r3, s15
 8025218:	b21b      	sxth	r3, r3
 802521a:	f303 0307 	ssat	r3, #8, r3
 802521e:	f804 3c04 	strb.w	r3, [r4, #-4]
 8025222:	ed55 7a03 	vldr	s15, [r5, #-12]
 8025226:	ee27 7a86 	vmul.f32	s14, s15, s12
 802522a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 802522e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025232:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8025236:	ee77 7a87 	vadd.f32	s15, s15, s14
 802523a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802523e:	ee17 3a90 	vmov	r3, s15
 8025242:	b21b      	sxth	r3, r3
 8025244:	f303 0307 	ssat	r3, #8, r3
 8025248:	f804 3c03 	strb.w	r3, [r4, #-3]
 802524c:	ed55 7a02 	vldr	s15, [r5, #-8]
 8025250:	ee27 7a86 	vmul.f32	s14, s15, s12
 8025254:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8025258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802525c:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8025260:	ee77 7a87 	vadd.f32	s15, s15, s14
 8025264:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8025268:	ee17 3a90 	vmov	r3, s15
 802526c:	b21b      	sxth	r3, r3
 802526e:	f303 0307 	ssat	r3, #8, r3
 8025272:	f804 3c02 	strb.w	r3, [r4, #-2]
 8025276:	ed55 7a01 	vldr	s15, [r5, #-4]
 802527a:	ee67 7a86 	vmul.f32	s15, s15, s12
 802527e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8025282:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8025286:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 802528a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802528e:	ee17 3a10 	vmov	r3, s14
 8025292:	b21b      	sxth	r3, r3
 8025294:	dd55      	ble.n	8025342 <st_dsp_arm_float_to_q7+0x16a>
 8025296:	f303 0307 	ssat	r3, #8, r3
 802529a:	f804 3c01 	strb.w	r3, [r4, #-1]
 802529e:	3404      	adds	r4, #4
 80252a0:	3510      	adds	r5, #16
 80252a2:	42a6      	cmp	r6, r4
 80252a4:	d1a8      	bne.n	80251f8 <st_dsp_arm_float_to_q7+0x20>
 80252a6:	4461      	add	r1, ip
 80252a8:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 80252ac:	f012 0203 	ands.w	r2, r2, #3
 80252b0:	d045      	beq.n	802533e <st_dsp_arm_float_to_q7+0x166>
 80252b2:	edd0 7a00 	vldr	s15, [r0]
 80252b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80252ba:	ed9f 5a2a 	vldr	s10, [pc, #168]	; 8025364 <st_dsp_arm_float_to_q7+0x18c>
 80252be:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 80252c2:	ee67 6a85 	vmul.f32	s13, s15, s10
 80252c6:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80252ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80252ce:	fe77 7a25 	vselgt.f32	s15, s14, s11
 80252d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80252d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80252da:	ee17 3a90 	vmov	r3, s15
 80252de:	b21b      	sxth	r3, r3
 80252e0:	f303 0307 	ssat	r3, #8, r3
 80252e4:	2a01      	cmp	r2, #1
 80252e6:	700b      	strb	r3, [r1, #0]
 80252e8:	d029      	beq.n	802533e <st_dsp_arm_float_to_q7+0x166>
 80252ea:	edd0 6a01 	vldr	s13, [r0, #4]
 80252ee:	ee26 6a85 	vmul.f32	s12, s13, s10
 80252f2:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80252f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80252fa:	fe77 6a25 	vselgt.f32	s13, s14, s11
 80252fe:	ee76 6a86 	vadd.f32	s13, s13, s12
 8025302:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8025306:	ee16 3a90 	vmov	r3, s13
 802530a:	b21b      	sxth	r3, r3
 802530c:	f303 0307 	ssat	r3, #8, r3
 8025310:	2a02      	cmp	r2, #2
 8025312:	704b      	strb	r3, [r1, #1]
 8025314:	d013      	beq.n	802533e <st_dsp_arm_float_to_q7+0x166>
 8025316:	edd0 7a02 	vldr	s15, [r0, #8]
 802531a:	ee27 5a85 	vmul.f32	s10, s15, s10
 802531e:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8025322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025326:	fe77 7a25 	vselgt.f32	s15, s14, s11
 802532a:	ee77 7a85 	vadd.f32	s15, s15, s10
 802532e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8025332:	ee17 3a90 	vmov	r3, s15
 8025336:	b21b      	sxth	r3, r3
 8025338:	f303 0307 	ssat	r3, #8, r3
 802533c:	708b      	strb	r3, [r1, #2]
 802533e:	bcf0      	pop	{r4, r5, r6, r7}
 8025340:	4770      	bx	lr
 8025342:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8025346:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802534a:	ee17 3a90 	vmov	r3, s15
 802534e:	b21b      	sxth	r3, r3
 8025350:	f303 0307 	ssat	r3, #8, r3
 8025354:	f804 3c01 	strb.w	r3, [r4, #-1]
 8025358:	3404      	adds	r4, #4
 802535a:	3510      	adds	r5, #16
 802535c:	42b4      	cmp	r4, r6
 802535e:	f47f af4b 	bne.w	80251f8 <st_dsp_arm_float_to_q7+0x20>
 8025362:	e7a0      	b.n	80252a6 <st_dsp_arm_float_to_q7+0xce>
 8025364:	43000000 	.word	0x43000000

08025368 <st_dsp_arm_q15_to_float>:
 8025368:	b470      	push	{r4, r5, r6}
 802536a:	0896      	lsrs	r6, r2, #2
 802536c:	d038      	beq.n	80253e0 <st_dsp_arm_q15_to_float+0x78>
 802536e:	f100 0408 	add.w	r4, r0, #8
 8025372:	f101 0310 	add.w	r3, r1, #16
 8025376:	4635      	mov	r5, r6
 8025378:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8025434 <st_dsp_arm_q15_to_float+0xcc>
 802537c:	f934 cc08 	ldrsh.w	ip, [r4, #-8]
 8025380:	3d01      	subs	r5, #1
 8025382:	f104 0408 	add.w	r4, r4, #8
 8025386:	f103 0310 	add.w	r3, r3, #16
 802538a:	ee07 ca90 	vmov	s15, ip
 802538e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025392:	ee67 7a87 	vmul.f32	s15, s15, s14
 8025396:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 802539a:	f934 cc0e 	ldrsh.w	ip, [r4, #-14]
 802539e:	ee07 ca90 	vmov	s15, ip
 80253a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80253a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80253aa:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 80253ae:	f934 cc0c 	ldrsh.w	ip, [r4, #-12]
 80253b2:	ee07 ca90 	vmov	s15, ip
 80253b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80253ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80253be:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 80253c2:	f934 cc0a 	ldrsh.w	ip, [r4, #-10]
 80253c6:	ee07 ca90 	vmov	s15, ip
 80253ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80253ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80253d2:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 80253d6:	d1d1      	bne.n	802537c <st_dsp_arm_q15_to_float+0x14>
 80253d8:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 80253dc:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 80253e0:	f012 0203 	ands.w	r2, r2, #3
 80253e4:	d023      	beq.n	802542e <st_dsp_arm_q15_to_float+0xc6>
 80253e6:	f9b0 3000 	ldrsh.w	r3, [r0]
 80253ea:	2a01      	cmp	r2, #1
 80253ec:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8025434 <st_dsp_arm_q15_to_float+0xcc>
 80253f0:	ee07 3a90 	vmov	s15, r3
 80253f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80253f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80253fc:	edc1 7a00 	vstr	s15, [r1]
 8025400:	d015      	beq.n	802542e <st_dsp_arm_q15_to_float+0xc6>
 8025402:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8025406:	2a02      	cmp	r2, #2
 8025408:	ee07 3a90 	vmov	s15, r3
 802540c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025410:	ee67 7a87 	vmul.f32	s15, s15, s14
 8025414:	edc1 7a01 	vstr	s15, [r1, #4]
 8025418:	d009      	beq.n	802542e <st_dsp_arm_q15_to_float+0xc6>
 802541a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 802541e:	ee07 3a90 	vmov	s15, r3
 8025422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025426:	ee67 7a87 	vmul.f32	s15, s15, s14
 802542a:	edc1 7a02 	vstr	s15, [r1, #8]
 802542e:	bc70      	pop	{r4, r5, r6}
 8025430:	4770      	bx	lr
 8025432:	bf00      	nop
 8025434:	38000000 	.word	0x38000000

08025438 <st_dsp_arm_q7_to_float>:
 8025438:	b470      	push	{r4, r5, r6}
 802543a:	0895      	lsrs	r5, r2, #2
 802543c:	d036      	beq.n	80254ac <st_dsp_arm_q7_to_float+0x74>
 802543e:	eb00 0685 	add.w	r6, r0, r5, lsl #2
 8025442:	f101 0310 	add.w	r3, r1, #16
 8025446:	3004      	adds	r0, #4
 8025448:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8025500 <st_dsp_arm_q7_to_float+0xc8>
 802544c:	1d34      	adds	r4, r6, #4
 802544e:	f910 cc04 	ldrsb.w	ip, [r0, #-4]
 8025452:	3004      	adds	r0, #4
 8025454:	3310      	adds	r3, #16
 8025456:	ee07 ca90 	vmov	s15, ip
 802545a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802545e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8025462:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 8025466:	f910 cc07 	ldrsb.w	ip, [r0, #-7]
 802546a:	ee07 ca90 	vmov	s15, ip
 802546e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025472:	ee67 7a87 	vmul.f32	s15, s15, s14
 8025476:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 802547a:	f910 cc06 	ldrsb.w	ip, [r0, #-6]
 802547e:	ee07 ca90 	vmov	s15, ip
 8025482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025486:	ee67 7a87 	vmul.f32	s15, s15, s14
 802548a:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 802548e:	f910 cc05 	ldrsb.w	ip, [r0, #-5]
 8025492:	42a0      	cmp	r0, r4
 8025494:	ee07 ca90 	vmov	s15, ip
 8025498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802549c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80254a0:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 80254a4:	d1d3      	bne.n	802544e <st_dsp_arm_q7_to_float+0x16>
 80254a6:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 80254aa:	4630      	mov	r0, r6
 80254ac:	f012 0203 	ands.w	r2, r2, #3
 80254b0:	d023      	beq.n	80254fa <st_dsp_arm_q7_to_float+0xc2>
 80254b2:	f990 3000 	ldrsb.w	r3, [r0]
 80254b6:	2a01      	cmp	r2, #1
 80254b8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8025500 <st_dsp_arm_q7_to_float+0xc8>
 80254bc:	ee07 3a90 	vmov	s15, r3
 80254c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80254c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80254c8:	edc1 7a00 	vstr	s15, [r1]
 80254cc:	d015      	beq.n	80254fa <st_dsp_arm_q7_to_float+0xc2>
 80254ce:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80254d2:	2a02      	cmp	r2, #2
 80254d4:	ee07 3a90 	vmov	s15, r3
 80254d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80254dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80254e0:	edc1 7a01 	vstr	s15, [r1, #4]
 80254e4:	d009      	beq.n	80254fa <st_dsp_arm_q7_to_float+0xc2>
 80254e6:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80254ea:	ee07 3a90 	vmov	s15, r3
 80254ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80254f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80254f6:	edc1 7a02 	vstr	s15, [r1, #8]
 80254fa:	bc70      	pop	{r4, r5, r6}
 80254fc:	4770      	bx	lr
 80254fe:	bf00      	nop
 8025500:	3c000000 	.word	0x3c000000

08025504 <ai_version_get>:
 8025504:	0212      	lsls	r2, r2, #8
 8025506:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 802550a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 802550e:	4770      	bx	lr

08025510 <ai_platform_version_get>:
 8025510:	0e01      	lsrs	r1, r0, #24
 8025512:	2300      	movs	r3, #0
 8025514:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8025518:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802551c:	f361 0307 	bfi	r3, r1, #0, #8
 8025520:	b082      	sub	sp, #8
 8025522:	f362 230f 	bfi	r3, r2, #8, #8
 8025526:	f360 4317 	bfi	r3, r0, #16, #8
 802552a:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 802552e:	b002      	add	sp, #8
 8025530:	4770      	bx	lr
 8025532:	bf00      	nop

08025534 <get_tensor_byte_size>:
 8025534:	b410      	push	{r4}
 8025536:	6984      	ldr	r4, [r0, #24]
 8025538:	4b08      	ldr	r3, [pc, #32]	; (802555c <get_tensor_byte_size+0x28>)
 802553a:	6824      	ldr	r4, [r4, #0]
 802553c:	68c1      	ldr	r1, [r0, #12]
 802553e:	4a08      	ldr	r2, [pc, #32]	; (8025560 <get_tensor_byte_size+0x2c>)
 8025540:	4023      	ands	r3, r4
 8025542:	6940      	ldr	r0, [r0, #20]
 8025544:	68c9      	ldr	r1, [r1, #12]
 8025546:	4293      	cmp	r3, r2
 8025548:	68c0      	ldr	r0, [r0, #12]
 802554a:	fb00 f001 	mul.w	r0, r0, r1
 802554e:	d101      	bne.n	8025554 <get_tensor_byte_size+0x20>
 8025550:	3007      	adds	r0, #7
 8025552:	08c0      	lsrs	r0, r0, #3
 8025554:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025558:	4770      	bx	lr
 802555a:	bf00      	nop
 802555c:	017fffff 	.word	0x017fffff
 8025560:	000400c0 	.word	0x000400c0

08025564 <ai_array_to_buffer_fmt>:
 8025564:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8025568:	2b02      	cmp	r3, #2
 802556a:	d036      	beq.n	80255da <ai_array_to_buffer_fmt+0x76>
 802556c:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8025570:	4a20      	ldr	r2, [pc, #128]	; (80255f4 <ai_array_to_buffer_fmt+0x90>)
 8025572:	4293      	cmp	r3, r2
 8025574:	d00f      	beq.n	8025596 <ai_array_to_buffer_fmt+0x32>
 8025576:	dd12      	ble.n	802559e <ai_array_to_buffer_fmt+0x3a>
 8025578:	4a1f      	ldr	r2, [pc, #124]	; (80255f8 <ai_array_to_buffer_fmt+0x94>)
 802557a:	4293      	cmp	r3, r2
 802557c:	d00b      	beq.n	8025596 <ai_array_to_buffer_fmt+0x32>
 802557e:	dd1e      	ble.n	80255be <ai_array_to_buffer_fmt+0x5a>
 8025580:	4a1e      	ldr	r2, [pc, #120]	; (80255fc <ai_array_to_buffer_fmt+0x98>)
 8025582:	4293      	cmp	r3, r2
 8025584:	d007      	beq.n	8025596 <ai_array_to_buffer_fmt+0x32>
 8025586:	dd30      	ble.n	80255ea <ai_array_to_buffer_fmt+0x86>
 8025588:	4a1d      	ldr	r2, [pc, #116]	; (8025600 <ai_array_to_buffer_fmt+0x9c>)
 802558a:	4293      	cmp	r3, r2
 802558c:	d003      	beq.n	8025596 <ai_array_to_buffer_fmt+0x32>
 802558e:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 8025592:	4293      	cmp	r3, r2
 8025594:	d11f      	bne.n	80255d6 <ai_array_to_buffer_fmt+0x72>
 8025596:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 802559a:	4318      	orrs	r0, r3
 802559c:	4770      	bx	lr
 802559e:	4a19      	ldr	r2, [pc, #100]	; (8025604 <ai_array_to_buffer_fmt+0xa0>)
 80255a0:	4293      	cmp	r3, r2
 80255a2:	d0f8      	beq.n	8025596 <ai_array_to_buffer_fmt+0x32>
 80255a4:	dd0b      	ble.n	80255be <ai_array_to_buffer_fmt+0x5a>
 80255a6:	4a18      	ldr	r2, [pc, #96]	; (8025608 <ai_array_to_buffer_fmt+0xa4>)
 80255a8:	4293      	cmp	r3, r2
 80255aa:	d0f4      	beq.n	8025596 <ai_array_to_buffer_fmt+0x32>
 80255ac:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 80255b0:	4293      	cmp	r3, r2
 80255b2:	d0f0      	beq.n	8025596 <ai_array_to_buffer_fmt+0x32>
 80255b4:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 80255b8:	4293      	cmp	r3, r2
 80255ba:	d10c      	bne.n	80255d6 <ai_array_to_buffer_fmt+0x72>
 80255bc:	e7eb      	b.n	8025596 <ai_array_to_buffer_fmt+0x32>
 80255be:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 80255c2:	4293      	cmp	r3, r2
 80255c4:	d0e7      	beq.n	8025596 <ai_array_to_buffer_fmt+0x32>
 80255c6:	f502 7260 	add.w	r2, r2, #896	; 0x380
 80255ca:	4293      	cmp	r3, r2
 80255cc:	d0e3      	beq.n	8025596 <ai_array_to_buffer_fmt+0x32>
 80255ce:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80255d2:	4293      	cmp	r3, r2
 80255d4:	d0df      	beq.n	8025596 <ai_array_to_buffer_fmt+0x32>
 80255d6:	2340      	movs	r3, #64	; 0x40
 80255d8:	e7dd      	b.n	8025596 <ai_array_to_buffer_fmt+0x32>
 80255da:	4b0c      	ldr	r3, [pc, #48]	; (802560c <ai_array_to_buffer_fmt+0xa8>)
 80255dc:	4003      	ands	r3, r0
 80255de:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80255e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80255e6:	4318      	orrs	r0, r3
 80255e8:	4770      	bx	lr
 80255ea:	3a0f      	subs	r2, #15
 80255ec:	4293      	cmp	r3, r2
 80255ee:	d0d2      	beq.n	8025596 <ai_array_to_buffer_fmt+0x32>
 80255f0:	e7f1      	b.n	80255d6 <ai_array_to_buffer_fmt+0x72>
 80255f2:	bf00      	nop
 80255f4:	00060440 	.word	0x00060440
 80255f8:	00840447 	.word	0x00840447
 80255fc:	0084084f 	.word	0x0084084f
 8025600:	00841040 	.word	0x00841040
 8025604:	00040447 	.word	0x00040447
 8025608:	0004084f 	.word	0x0004084f
 802560c:	00803fff 	.word	0x00803fff

08025610 <ai_array_get_data_byte_size>:
 8025610:	b161      	cbz	r1, 802562c <ai_array_get_data_byte_size+0x1c>
 8025612:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8025616:	f3c0 5041 	ubfx	r0, r0, #21, #2
 802561a:	fb01 f103 	mul.w	r1, r1, r3
 802561e:	3107      	adds	r1, #7
 8025620:	f021 0107 	bic.w	r1, r1, #7
 8025624:	40c1      	lsrs	r1, r0
 8025626:	3107      	adds	r1, #7
 8025628:	08c8      	lsrs	r0, r1, #3
 802562a:	4770      	bx	lr
 802562c:	4608      	mov	r0, r1
 802562e:	4770      	bx	lr

08025630 <core_get_broadcasted_shape>:
 8025630:	b4f0      	push	{r4, r5, r6, r7}
 8025632:	6804      	ldr	r4, [r0, #0]
 8025634:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8025638:	b30c      	cbz	r4, 802567e <core_get_broadcasted_shape+0x4e>
 802563a:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 802563e:	4623      	mov	r3, r4
 8025640:	4425      	add	r5, r4
 8025642:	00ad      	lsls	r5, r5, #2
 8025644:	e002      	b.n	802564c <core_get_broadcasted_shape+0x1c>
 8025646:	6804      	ldr	r4, [r0, #0]
 8025648:	f3c4 2417 	ubfx	r4, r4, #8, #24
 802564c:	3b01      	subs	r3, #1
 802564e:	429c      	cmp	r4, r3
 8025650:	d912      	bls.n	8025678 <core_get_broadcasted_shape+0x48>
 8025652:	6816      	ldr	r6, [r2, #0]
 8025654:	2401      	movs	r4, #1
 8025656:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 802565a:	d201      	bcs.n	8025660 <core_get_broadcasted_shape+0x30>
 802565c:	6854      	ldr	r4, [r2, #4]
 802565e:	5964      	ldr	r4, [r4, r5]
 8025660:	680f      	ldr	r7, [r1, #0]
 8025662:	2601      	movs	r6, #1
 8025664:	ebb3 2f17 	cmp.w	r3, r7, lsr #8
 8025668:	d201      	bcs.n	802566e <core_get_broadcasted_shape+0x3e>
 802566a:	684e      	ldr	r6, [r1, #4]
 802566c:	5976      	ldr	r6, [r6, r5]
 802566e:	42b4      	cmp	r4, r6
 8025670:	bf38      	it	cc
 8025672:	4634      	movcc	r4, r6
 8025674:	6846      	ldr	r6, [r0, #4]
 8025676:	5174      	str	r4, [r6, r5]
 8025678:	3d04      	subs	r5, #4
 802567a:	2b00      	cmp	r3, #0
 802567c:	d1e3      	bne.n	8025646 <core_get_broadcasted_shape+0x16>
 802567e:	bcf0      	pop	{r4, r5, r6, r7}
 8025680:	4770      	bx	lr
 8025682:	bf00      	nop

08025684 <core_compute_offsets_in_bytes>:
 8025684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025688:	684e      	ldr	r6, [r1, #4]
 802568a:	b083      	sub	sp, #12
 802568c:	6855      	ldr	r5, [r2, #4]
 802568e:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8025692:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8025696:	6809      	ldr	r1, [r1, #0]
 8025698:	ebbe 090a 	subs.w	r9, lr, sl
 802569c:	bf18      	it	ne
 802569e:	f04f 0901 	movne.w	r9, #1
 80256a2:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 80256a6:	f0c0 808f 	bcc.w	80257c8 <core_compute_offsets_in_bytes+0x144>
 80256aa:	f8d6 8010 	ldr.w	r8, [r6, #16]
 80256ae:	fb08 fc0e 	mul.w	ip, r8, lr
 80256b2:	6812      	ldr	r2, [r2, #0]
 80256b4:	68af      	ldr	r7, [r5, #8]
 80256b6:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80256ba:	68b1      	ldr	r1, [r6, #8]
 80256bc:	6802      	ldr	r2, [r0, #0]
 80256be:	bf2c      	ite	cs
 80256c0:	f8d5 b010 	ldrcs.w	fp, [r5, #16]
 80256c4:	f04f 0b01 	movcc.w	fp, #1
 80256c8:	68f6      	ldr	r6, [r6, #12]
 80256ca:	f3c2 2217 	ubfx	r2, r2, #8, #24
 80256ce:	ebb8 040b 	subs.w	r4, r8, fp
 80256d2:	9701      	str	r7, [sp, #4]
 80256d4:	9600      	str	r6, [sp, #0]
 80256d6:	bf18      	it	ne
 80256d8:	2401      	movne	r4, #1
 80256da:	1bce      	subs	r6, r1, r7
 80256dc:	68ed      	ldr	r5, [r5, #12]
 80256de:	bf18      	it	ne
 80256e0:	2601      	movne	r6, #1
 80256e2:	2a01      	cmp	r2, #1
 80256e4:	d974      	bls.n	80257d0 <core_compute_offsets_in_bytes+0x14c>
 80256e6:	ebae 020a 	sub.w	r2, lr, sl
 80256ea:	6847      	ldr	r7, [r0, #4]
 80256ec:	fb0e fe04 	mul.w	lr, lr, r4
 80256f0:	fab2 f282 	clz	r2, r2
 80256f4:	0952      	lsrs	r2, r2, #5
 80256f6:	607a      	str	r2, [r7, #4]
 80256f8:	6802      	ldr	r2, [r0, #0]
 80256fa:	f3c2 2217 	ubfx	r2, r2, #8, #24
 80256fe:	2a04      	cmp	r2, #4
 8025700:	d90c      	bls.n	802571c <core_compute_offsets_in_bytes+0x98>
 8025702:	45d8      	cmp	r8, fp
 8025704:	bf14      	ite	ne
 8025706:	f04f 0800 	movne.w	r8, #0
 802570a:	f009 0801 	andeq.w	r8, r9, #1
 802570e:	6847      	ldr	r7, [r0, #4]
 8025710:	eba8 020e 	sub.w	r2, r8, lr
 8025714:	613a      	str	r2, [r7, #16]
 8025716:	6802      	ldr	r2, [r0, #0]
 8025718:	f3c2 2217 	ubfx	r2, r2, #8, #24
 802571c:	2a02      	cmp	r2, #2
 802571e:	fb0c f806 	mul.w	r8, ip, r6
 8025722:	d911      	bls.n	8025748 <core_compute_offsets_in_bytes+0xc4>
 8025724:	9a01      	ldr	r2, [sp, #4]
 8025726:	6847      	ldr	r7, [r0, #4]
 8025728:	4291      	cmp	r1, r2
 802572a:	bf14      	ite	ne
 802572c:	f04f 0b00 	movne.w	fp, #0
 8025730:	f009 0b01 	andeq.w	fp, r9, #1
 8025734:	ea04 0b0b 	and.w	fp, r4, fp
 8025738:	ebab 0b08 	sub.w	fp, fp, r8
 802573c:	eb0b 020e 	add.w	r2, fp, lr
 8025740:	60ba      	str	r2, [r7, #8]
 8025742:	6802      	ldr	r2, [r0, #0]
 8025744:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8025748:	9f00      	ldr	r7, [sp, #0]
 802574a:	42af      	cmp	r7, r5
 802574c:	d13a      	bne.n	80257c4 <core_compute_offsets_in_bytes+0x140>
 802574e:	2e00      	cmp	r6, #0
 8025750:	d038      	beq.n	80257c4 <core_compute_offsets_in_bytes+0x140>
 8025752:	ea09 0404 	and.w	r4, r9, r4
 8025756:	2a03      	cmp	r2, #3
 8025758:	d90d      	bls.n	8025776 <core_compute_offsets_in_bytes+0xf2>
 802575a:	9a00      	ldr	r2, [sp, #0]
 802575c:	fb0c f101 	mul.w	r1, ip, r1
 8025760:	1b55      	subs	r5, r2, r5
 8025762:	6842      	ldr	r2, [r0, #4]
 8025764:	bf18      	it	ne
 8025766:	2501      	movne	r5, #1
 8025768:	fb05 4511 	mls	r5, r5, r1, r4
 802576c:	4445      	add	r5, r8
 802576e:	60d5      	str	r5, [r2, #12]
 8025770:	6802      	ldr	r2, [r0, #0]
 8025772:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8025776:	2a01      	cmp	r2, #1
 8025778:	d911      	bls.n	802579e <core_compute_offsets_in_bytes+0x11a>
 802577a:	6841      	ldr	r1, [r0, #4]
 802577c:	684a      	ldr	r2, [r1, #4]
 802577e:	fb03 f202 	mul.w	r2, r3, r2
 8025782:	604a      	str	r2, [r1, #4]
 8025784:	6802      	ldr	r2, [r0, #0]
 8025786:	f3c2 2217 	ubfx	r2, r2, #8, #24
 802578a:	2a04      	cmp	r2, #4
 802578c:	d907      	bls.n	802579e <core_compute_offsets_in_bytes+0x11a>
 802578e:	6841      	ldr	r1, [r0, #4]
 8025790:	690a      	ldr	r2, [r1, #16]
 8025792:	fb03 f202 	mul.w	r2, r3, r2
 8025796:	610a      	str	r2, [r1, #16]
 8025798:	6802      	ldr	r2, [r0, #0]
 802579a:	f3c2 2217 	ubfx	r2, r2, #8, #24
 802579e:	2a02      	cmp	r2, #2
 80257a0:	d90d      	bls.n	80257be <core_compute_offsets_in_bytes+0x13a>
 80257a2:	6841      	ldr	r1, [r0, #4]
 80257a4:	688a      	ldr	r2, [r1, #8]
 80257a6:	fb03 f202 	mul.w	r2, r3, r2
 80257aa:	608a      	str	r2, [r1, #8]
 80257ac:	6802      	ldr	r2, [r0, #0]
 80257ae:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80257b2:	d304      	bcc.n	80257be <core_compute_offsets_in_bytes+0x13a>
 80257b4:	6841      	ldr	r1, [r0, #4]
 80257b6:	68ca      	ldr	r2, [r1, #12]
 80257b8:	fb03 f302 	mul.w	r3, r3, r2
 80257bc:	60cb      	str	r3, [r1, #12]
 80257be:	b003      	add	sp, #12
 80257c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80257c4:	2400      	movs	r4, #0
 80257c6:	e7c6      	b.n	8025756 <core_compute_offsets_in_bytes+0xd2>
 80257c8:	46f4      	mov	ip, lr
 80257ca:	f04f 0801 	mov.w	r8, #1
 80257ce:	e770      	b.n	80256b2 <core_compute_offsets_in_bytes+0x2e>
 80257d0:	fb0e fe04 	mul.w	lr, lr, r4
 80257d4:	e7a2      	b.n	802571c <core_compute_offsets_in_bytes+0x98>
 80257d6:	bf00      	nop

080257d8 <core_tensor_clone>:
 80257d8:	680b      	ldr	r3, [r1, #0]
 80257da:	6882      	ldr	r2, [r0, #8]
 80257dc:	6003      	str	r3, [r0, #0]
 80257de:	684b      	ldr	r3, [r1, #4]
 80257e0:	6043      	str	r3, [r0, #4]
 80257e2:	698b      	ldr	r3, [r1, #24]
 80257e4:	6183      	str	r3, [r0, #24]
 80257e6:	688b      	ldr	r3, [r1, #8]
 80257e8:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80257ec:	f363 221f 	bfi	r2, r3, #8, #24
 80257f0:	b410      	push	{r4}
 80257f2:	6082      	str	r2, [r0, #8]
 80257f4:	b15b      	cbz	r3, 802580e <core_tensor_clone+0x36>
 80257f6:	2300      	movs	r3, #0
 80257f8:	68cc      	ldr	r4, [r1, #12]
 80257fa:	68c2      	ldr	r2, [r0, #12]
 80257fc:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8025800:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8025804:	3301      	adds	r3, #1
 8025806:	6882      	ldr	r2, [r0, #8]
 8025808:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 802580c:	d3f4      	bcc.n	80257f8 <core_tensor_clone+0x20>
 802580e:	690b      	ldr	r3, [r1, #16]
 8025810:	6902      	ldr	r2, [r0, #16]
 8025812:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8025816:	f363 221f 	bfi	r2, r3, #8, #24
 802581a:	6102      	str	r2, [r0, #16]
 802581c:	b15b      	cbz	r3, 8025836 <core_tensor_clone+0x5e>
 802581e:	2300      	movs	r3, #0
 8025820:	694c      	ldr	r4, [r1, #20]
 8025822:	6942      	ldr	r2, [r0, #20]
 8025824:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8025828:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 802582c:	3301      	adds	r3, #1
 802582e:	6902      	ldr	r2, [r0, #16]
 8025830:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8025834:	d3f4      	bcc.n	8025820 <core_tensor_clone+0x48>
 8025836:	f85d 4b04 	ldr.w	r4, [sp], #4
 802583a:	4770      	bx	lr

0802583c <core_array_clone>:
 802583c:	b410      	push	{r4}
 802583e:	4604      	mov	r4, r0
 8025840:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8025842:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8025846:	f85d 4b04 	ldr.w	r4, [sp], #4
 802584a:	4770      	bx	lr

0802584c <malloc>:
 802584c:	4b02      	ldr	r3, [pc, #8]	; (8025858 <malloc+0xc>)
 802584e:	4601      	mov	r1, r0
 8025850:	6818      	ldr	r0, [r3, #0]
 8025852:	f000 b82b 	b.w	80258ac <_malloc_r>
 8025856:	bf00      	nop
 8025858:	20007788 	.word	0x20007788

0802585c <free>:
 802585c:	4b02      	ldr	r3, [pc, #8]	; (8025868 <free+0xc>)
 802585e:	4601      	mov	r1, r0
 8025860:	6818      	ldr	r0, [r3, #0]
 8025862:	f001 bd2d 	b.w	80272c0 <_free_r>
 8025866:	bf00      	nop
 8025868:	20007788 	.word	0x20007788

0802586c <sbrk_aligned>:
 802586c:	b570      	push	{r4, r5, r6, lr}
 802586e:	4e0e      	ldr	r6, [pc, #56]	; (80258a8 <sbrk_aligned+0x3c>)
 8025870:	460c      	mov	r4, r1
 8025872:	6831      	ldr	r1, [r6, #0]
 8025874:	4605      	mov	r5, r0
 8025876:	b911      	cbnz	r1, 802587e <sbrk_aligned+0x12>
 8025878:	f000 fecc 	bl	8026614 <_sbrk_r>
 802587c:	6030      	str	r0, [r6, #0]
 802587e:	4621      	mov	r1, r4
 8025880:	4628      	mov	r0, r5
 8025882:	f000 fec7 	bl	8026614 <_sbrk_r>
 8025886:	1c43      	adds	r3, r0, #1
 8025888:	d00a      	beq.n	80258a0 <sbrk_aligned+0x34>
 802588a:	1cc4      	adds	r4, r0, #3
 802588c:	f024 0403 	bic.w	r4, r4, #3
 8025890:	42a0      	cmp	r0, r4
 8025892:	d007      	beq.n	80258a4 <sbrk_aligned+0x38>
 8025894:	1a21      	subs	r1, r4, r0
 8025896:	4628      	mov	r0, r5
 8025898:	f000 febc 	bl	8026614 <_sbrk_r>
 802589c:	3001      	adds	r0, #1
 802589e:	d101      	bne.n	80258a4 <sbrk_aligned+0x38>
 80258a0:	f04f 34ff 	mov.w	r4, #4294967295
 80258a4:	4620      	mov	r0, r4
 80258a6:	bd70      	pop	{r4, r5, r6, pc}
 80258a8:	2000a3d0 	.word	0x2000a3d0

080258ac <_malloc_r>:
 80258ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80258b0:	1ccd      	adds	r5, r1, #3
 80258b2:	f025 0503 	bic.w	r5, r5, #3
 80258b6:	3508      	adds	r5, #8
 80258b8:	2d0c      	cmp	r5, #12
 80258ba:	bf38      	it	cc
 80258bc:	250c      	movcc	r5, #12
 80258be:	2d00      	cmp	r5, #0
 80258c0:	4607      	mov	r7, r0
 80258c2:	db01      	blt.n	80258c8 <_malloc_r+0x1c>
 80258c4:	42a9      	cmp	r1, r5
 80258c6:	d905      	bls.n	80258d4 <_malloc_r+0x28>
 80258c8:	230c      	movs	r3, #12
 80258ca:	603b      	str	r3, [r7, #0]
 80258cc:	2600      	movs	r6, #0
 80258ce:	4630      	mov	r0, r6
 80258d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80258d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80259a8 <_malloc_r+0xfc>
 80258d8:	f000 f868 	bl	80259ac <__malloc_lock>
 80258dc:	f8d8 3000 	ldr.w	r3, [r8]
 80258e0:	461c      	mov	r4, r3
 80258e2:	bb5c      	cbnz	r4, 802593c <_malloc_r+0x90>
 80258e4:	4629      	mov	r1, r5
 80258e6:	4638      	mov	r0, r7
 80258e8:	f7ff ffc0 	bl	802586c <sbrk_aligned>
 80258ec:	1c43      	adds	r3, r0, #1
 80258ee:	4604      	mov	r4, r0
 80258f0:	d155      	bne.n	802599e <_malloc_r+0xf2>
 80258f2:	f8d8 4000 	ldr.w	r4, [r8]
 80258f6:	4626      	mov	r6, r4
 80258f8:	2e00      	cmp	r6, #0
 80258fa:	d145      	bne.n	8025988 <_malloc_r+0xdc>
 80258fc:	2c00      	cmp	r4, #0
 80258fe:	d048      	beq.n	8025992 <_malloc_r+0xe6>
 8025900:	6823      	ldr	r3, [r4, #0]
 8025902:	4631      	mov	r1, r6
 8025904:	4638      	mov	r0, r7
 8025906:	eb04 0903 	add.w	r9, r4, r3
 802590a:	f000 fe83 	bl	8026614 <_sbrk_r>
 802590e:	4581      	cmp	r9, r0
 8025910:	d13f      	bne.n	8025992 <_malloc_r+0xe6>
 8025912:	6821      	ldr	r1, [r4, #0]
 8025914:	1a6d      	subs	r5, r5, r1
 8025916:	4629      	mov	r1, r5
 8025918:	4638      	mov	r0, r7
 802591a:	f7ff ffa7 	bl	802586c <sbrk_aligned>
 802591e:	3001      	adds	r0, #1
 8025920:	d037      	beq.n	8025992 <_malloc_r+0xe6>
 8025922:	6823      	ldr	r3, [r4, #0]
 8025924:	442b      	add	r3, r5
 8025926:	6023      	str	r3, [r4, #0]
 8025928:	f8d8 3000 	ldr.w	r3, [r8]
 802592c:	2b00      	cmp	r3, #0
 802592e:	d038      	beq.n	80259a2 <_malloc_r+0xf6>
 8025930:	685a      	ldr	r2, [r3, #4]
 8025932:	42a2      	cmp	r2, r4
 8025934:	d12b      	bne.n	802598e <_malloc_r+0xe2>
 8025936:	2200      	movs	r2, #0
 8025938:	605a      	str	r2, [r3, #4]
 802593a:	e00f      	b.n	802595c <_malloc_r+0xb0>
 802593c:	6822      	ldr	r2, [r4, #0]
 802593e:	1b52      	subs	r2, r2, r5
 8025940:	d41f      	bmi.n	8025982 <_malloc_r+0xd6>
 8025942:	2a0b      	cmp	r2, #11
 8025944:	d917      	bls.n	8025976 <_malloc_r+0xca>
 8025946:	1961      	adds	r1, r4, r5
 8025948:	42a3      	cmp	r3, r4
 802594a:	6025      	str	r5, [r4, #0]
 802594c:	bf18      	it	ne
 802594e:	6059      	strne	r1, [r3, #4]
 8025950:	6863      	ldr	r3, [r4, #4]
 8025952:	bf08      	it	eq
 8025954:	f8c8 1000 	streq.w	r1, [r8]
 8025958:	5162      	str	r2, [r4, r5]
 802595a:	604b      	str	r3, [r1, #4]
 802595c:	4638      	mov	r0, r7
 802595e:	f104 060b 	add.w	r6, r4, #11
 8025962:	f000 f829 	bl	80259b8 <__malloc_unlock>
 8025966:	f026 0607 	bic.w	r6, r6, #7
 802596a:	1d23      	adds	r3, r4, #4
 802596c:	1af2      	subs	r2, r6, r3
 802596e:	d0ae      	beq.n	80258ce <_malloc_r+0x22>
 8025970:	1b9b      	subs	r3, r3, r6
 8025972:	50a3      	str	r3, [r4, r2]
 8025974:	e7ab      	b.n	80258ce <_malloc_r+0x22>
 8025976:	42a3      	cmp	r3, r4
 8025978:	6862      	ldr	r2, [r4, #4]
 802597a:	d1dd      	bne.n	8025938 <_malloc_r+0x8c>
 802597c:	f8c8 2000 	str.w	r2, [r8]
 8025980:	e7ec      	b.n	802595c <_malloc_r+0xb0>
 8025982:	4623      	mov	r3, r4
 8025984:	6864      	ldr	r4, [r4, #4]
 8025986:	e7ac      	b.n	80258e2 <_malloc_r+0x36>
 8025988:	4634      	mov	r4, r6
 802598a:	6876      	ldr	r6, [r6, #4]
 802598c:	e7b4      	b.n	80258f8 <_malloc_r+0x4c>
 802598e:	4613      	mov	r3, r2
 8025990:	e7cc      	b.n	802592c <_malloc_r+0x80>
 8025992:	230c      	movs	r3, #12
 8025994:	603b      	str	r3, [r7, #0]
 8025996:	4638      	mov	r0, r7
 8025998:	f000 f80e 	bl	80259b8 <__malloc_unlock>
 802599c:	e797      	b.n	80258ce <_malloc_r+0x22>
 802599e:	6025      	str	r5, [r4, #0]
 80259a0:	e7dc      	b.n	802595c <_malloc_r+0xb0>
 80259a2:	605b      	str	r3, [r3, #4]
 80259a4:	deff      	udf	#255	; 0xff
 80259a6:	bf00      	nop
 80259a8:	2000a3cc 	.word	0x2000a3cc

080259ac <__malloc_lock>:
 80259ac:	4801      	ldr	r0, [pc, #4]	; (80259b4 <__malloc_lock+0x8>)
 80259ae:	f000 be78 	b.w	80266a2 <__retarget_lock_acquire_recursive>
 80259b2:	bf00      	nop
 80259b4:	2000a514 	.word	0x2000a514

080259b8 <__malloc_unlock>:
 80259b8:	4801      	ldr	r0, [pc, #4]	; (80259c0 <__malloc_unlock+0x8>)
 80259ba:	f000 be73 	b.w	80266a4 <__retarget_lock_release_recursive>
 80259be:	bf00      	nop
 80259c0:	2000a514 	.word	0x2000a514

080259c4 <_realloc_r>:
 80259c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80259c8:	4680      	mov	r8, r0
 80259ca:	4614      	mov	r4, r2
 80259cc:	460e      	mov	r6, r1
 80259ce:	b921      	cbnz	r1, 80259da <_realloc_r+0x16>
 80259d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80259d4:	4611      	mov	r1, r2
 80259d6:	f7ff bf69 	b.w	80258ac <_malloc_r>
 80259da:	b92a      	cbnz	r2, 80259e8 <_realloc_r+0x24>
 80259dc:	f001 fc70 	bl	80272c0 <_free_r>
 80259e0:	4625      	mov	r5, r4
 80259e2:	4628      	mov	r0, r5
 80259e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80259e8:	f002 f832 	bl	8027a50 <_malloc_usable_size_r>
 80259ec:	4284      	cmp	r4, r0
 80259ee:	4607      	mov	r7, r0
 80259f0:	d802      	bhi.n	80259f8 <_realloc_r+0x34>
 80259f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80259f6:	d812      	bhi.n	8025a1e <_realloc_r+0x5a>
 80259f8:	4621      	mov	r1, r4
 80259fa:	4640      	mov	r0, r8
 80259fc:	f7ff ff56 	bl	80258ac <_malloc_r>
 8025a00:	4605      	mov	r5, r0
 8025a02:	2800      	cmp	r0, #0
 8025a04:	d0ed      	beq.n	80259e2 <_realloc_r+0x1e>
 8025a06:	42bc      	cmp	r4, r7
 8025a08:	4622      	mov	r2, r4
 8025a0a:	4631      	mov	r1, r6
 8025a0c:	bf28      	it	cs
 8025a0e:	463a      	movcs	r2, r7
 8025a10:	f000 fe51 	bl	80266b6 <memcpy>
 8025a14:	4631      	mov	r1, r6
 8025a16:	4640      	mov	r0, r8
 8025a18:	f001 fc52 	bl	80272c0 <_free_r>
 8025a1c:	e7e1      	b.n	80259e2 <_realloc_r+0x1e>
 8025a1e:	4635      	mov	r5, r6
 8025a20:	e7df      	b.n	80259e2 <_realloc_r+0x1e>

08025a22 <__cvt>:
 8025a22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025a24:	ed2d 8b02 	vpush	{d8}
 8025a28:	eeb0 8b40 	vmov.f64	d8, d0
 8025a2c:	b085      	sub	sp, #20
 8025a2e:	4617      	mov	r7, r2
 8025a30:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025a32:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8025a34:	ee18 2a90 	vmov	r2, s17
 8025a38:	f025 0520 	bic.w	r5, r5, #32
 8025a3c:	2a00      	cmp	r2, #0
 8025a3e:	bfb6      	itet	lt
 8025a40:	222d      	movlt	r2, #45	; 0x2d
 8025a42:	2200      	movge	r2, #0
 8025a44:	eeb1 8b40 	vneglt.f64	d8, d0
 8025a48:	2d46      	cmp	r5, #70	; 0x46
 8025a4a:	460c      	mov	r4, r1
 8025a4c:	701a      	strb	r2, [r3, #0]
 8025a4e:	d004      	beq.n	8025a5a <__cvt+0x38>
 8025a50:	2d45      	cmp	r5, #69	; 0x45
 8025a52:	d100      	bne.n	8025a56 <__cvt+0x34>
 8025a54:	3401      	adds	r4, #1
 8025a56:	2102      	movs	r1, #2
 8025a58:	e000      	b.n	8025a5c <__cvt+0x3a>
 8025a5a:	2103      	movs	r1, #3
 8025a5c:	ab03      	add	r3, sp, #12
 8025a5e:	9301      	str	r3, [sp, #4]
 8025a60:	ab02      	add	r3, sp, #8
 8025a62:	9300      	str	r3, [sp, #0]
 8025a64:	4622      	mov	r2, r4
 8025a66:	4633      	mov	r3, r6
 8025a68:	eeb0 0b48 	vmov.f64	d0, d8
 8025a6c:	f000 febc 	bl	80267e8 <_dtoa_r>
 8025a70:	2d47      	cmp	r5, #71	; 0x47
 8025a72:	d101      	bne.n	8025a78 <__cvt+0x56>
 8025a74:	07fb      	lsls	r3, r7, #31
 8025a76:	d51a      	bpl.n	8025aae <__cvt+0x8c>
 8025a78:	2d46      	cmp	r5, #70	; 0x46
 8025a7a:	eb00 0204 	add.w	r2, r0, r4
 8025a7e:	d10c      	bne.n	8025a9a <__cvt+0x78>
 8025a80:	7803      	ldrb	r3, [r0, #0]
 8025a82:	2b30      	cmp	r3, #48	; 0x30
 8025a84:	d107      	bne.n	8025a96 <__cvt+0x74>
 8025a86:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8025a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025a8e:	bf1c      	itt	ne
 8025a90:	f1c4 0401 	rsbne	r4, r4, #1
 8025a94:	6034      	strne	r4, [r6, #0]
 8025a96:	6833      	ldr	r3, [r6, #0]
 8025a98:	441a      	add	r2, r3
 8025a9a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8025a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025aa2:	bf08      	it	eq
 8025aa4:	9203      	streq	r2, [sp, #12]
 8025aa6:	2130      	movs	r1, #48	; 0x30
 8025aa8:	9b03      	ldr	r3, [sp, #12]
 8025aaa:	4293      	cmp	r3, r2
 8025aac:	d307      	bcc.n	8025abe <__cvt+0x9c>
 8025aae:	9b03      	ldr	r3, [sp, #12]
 8025ab0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025ab2:	1a1b      	subs	r3, r3, r0
 8025ab4:	6013      	str	r3, [r2, #0]
 8025ab6:	b005      	add	sp, #20
 8025ab8:	ecbd 8b02 	vpop	{d8}
 8025abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025abe:	1c5c      	adds	r4, r3, #1
 8025ac0:	9403      	str	r4, [sp, #12]
 8025ac2:	7019      	strb	r1, [r3, #0]
 8025ac4:	e7f0      	b.n	8025aa8 <__cvt+0x86>

08025ac6 <__exponent>:
 8025ac6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025ac8:	4603      	mov	r3, r0
 8025aca:	2900      	cmp	r1, #0
 8025acc:	bfb8      	it	lt
 8025ace:	4249      	neglt	r1, r1
 8025ad0:	f803 2b02 	strb.w	r2, [r3], #2
 8025ad4:	bfb4      	ite	lt
 8025ad6:	222d      	movlt	r2, #45	; 0x2d
 8025ad8:	222b      	movge	r2, #43	; 0x2b
 8025ada:	2909      	cmp	r1, #9
 8025adc:	7042      	strb	r2, [r0, #1]
 8025ade:	dd2a      	ble.n	8025b36 <__exponent+0x70>
 8025ae0:	f10d 0207 	add.w	r2, sp, #7
 8025ae4:	4617      	mov	r7, r2
 8025ae6:	260a      	movs	r6, #10
 8025ae8:	4694      	mov	ip, r2
 8025aea:	fb91 f5f6 	sdiv	r5, r1, r6
 8025aee:	fb06 1415 	mls	r4, r6, r5, r1
 8025af2:	3430      	adds	r4, #48	; 0x30
 8025af4:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8025af8:	460c      	mov	r4, r1
 8025afa:	2c63      	cmp	r4, #99	; 0x63
 8025afc:	f102 32ff 	add.w	r2, r2, #4294967295
 8025b00:	4629      	mov	r1, r5
 8025b02:	dcf1      	bgt.n	8025ae8 <__exponent+0x22>
 8025b04:	3130      	adds	r1, #48	; 0x30
 8025b06:	f1ac 0402 	sub.w	r4, ip, #2
 8025b0a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8025b0e:	1c41      	adds	r1, r0, #1
 8025b10:	4622      	mov	r2, r4
 8025b12:	42ba      	cmp	r2, r7
 8025b14:	d30a      	bcc.n	8025b2c <__exponent+0x66>
 8025b16:	f10d 0209 	add.w	r2, sp, #9
 8025b1a:	eba2 020c 	sub.w	r2, r2, ip
 8025b1e:	42bc      	cmp	r4, r7
 8025b20:	bf88      	it	hi
 8025b22:	2200      	movhi	r2, #0
 8025b24:	4413      	add	r3, r2
 8025b26:	1a18      	subs	r0, r3, r0
 8025b28:	b003      	add	sp, #12
 8025b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025b2c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8025b30:	f801 5f01 	strb.w	r5, [r1, #1]!
 8025b34:	e7ed      	b.n	8025b12 <__exponent+0x4c>
 8025b36:	2330      	movs	r3, #48	; 0x30
 8025b38:	3130      	adds	r1, #48	; 0x30
 8025b3a:	7083      	strb	r3, [r0, #2]
 8025b3c:	70c1      	strb	r1, [r0, #3]
 8025b3e:	1d03      	adds	r3, r0, #4
 8025b40:	e7f1      	b.n	8025b26 <__exponent+0x60>
 8025b42:	0000      	movs	r0, r0
 8025b44:	0000      	movs	r0, r0
	...

08025b48 <_printf_float>:
 8025b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b4c:	b08b      	sub	sp, #44	; 0x2c
 8025b4e:	460c      	mov	r4, r1
 8025b50:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8025b54:	4616      	mov	r6, r2
 8025b56:	461f      	mov	r7, r3
 8025b58:	4605      	mov	r5, r0
 8025b5a:	f000 fd23 	bl	80265a4 <_localeconv_r>
 8025b5e:	f8d0 b000 	ldr.w	fp, [r0]
 8025b62:	4658      	mov	r0, fp
 8025b64:	f7da fc1c 	bl	80003a0 <strlen>
 8025b68:	2300      	movs	r3, #0
 8025b6a:	9308      	str	r3, [sp, #32]
 8025b6c:	f8d8 3000 	ldr.w	r3, [r8]
 8025b70:	f894 9018 	ldrb.w	r9, [r4, #24]
 8025b74:	6822      	ldr	r2, [r4, #0]
 8025b76:	3307      	adds	r3, #7
 8025b78:	f023 0307 	bic.w	r3, r3, #7
 8025b7c:	f103 0108 	add.w	r1, r3, #8
 8025b80:	f8c8 1000 	str.w	r1, [r8]
 8025b84:	ed93 0b00 	vldr	d0, [r3]
 8025b88:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8025de8 <_printf_float+0x2a0>
 8025b8c:	eeb0 7bc0 	vabs.f64	d7, d0
 8025b90:	eeb4 7b46 	vcmp.f64	d7, d6
 8025b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025b98:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8025b9c:	4682      	mov	sl, r0
 8025b9e:	dd24      	ble.n	8025bea <_printf_float+0xa2>
 8025ba0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8025ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025ba8:	d502      	bpl.n	8025bb0 <_printf_float+0x68>
 8025baa:	232d      	movs	r3, #45	; 0x2d
 8025bac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025bb0:	498f      	ldr	r1, [pc, #572]	; (8025df0 <_printf_float+0x2a8>)
 8025bb2:	4b90      	ldr	r3, [pc, #576]	; (8025df4 <_printf_float+0x2ac>)
 8025bb4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8025bb8:	bf94      	ite	ls
 8025bba:	4688      	movls	r8, r1
 8025bbc:	4698      	movhi	r8, r3
 8025bbe:	2303      	movs	r3, #3
 8025bc0:	6123      	str	r3, [r4, #16]
 8025bc2:	f022 0204 	bic.w	r2, r2, #4
 8025bc6:	2300      	movs	r3, #0
 8025bc8:	6022      	str	r2, [r4, #0]
 8025bca:	9304      	str	r3, [sp, #16]
 8025bcc:	9700      	str	r7, [sp, #0]
 8025bce:	4633      	mov	r3, r6
 8025bd0:	aa09      	add	r2, sp, #36	; 0x24
 8025bd2:	4621      	mov	r1, r4
 8025bd4:	4628      	mov	r0, r5
 8025bd6:	f000 f9d1 	bl	8025f7c <_printf_common>
 8025bda:	3001      	adds	r0, #1
 8025bdc:	f040 808a 	bne.w	8025cf4 <_printf_float+0x1ac>
 8025be0:	f04f 30ff 	mov.w	r0, #4294967295
 8025be4:	b00b      	add	sp, #44	; 0x2c
 8025be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025bea:	eeb4 0b40 	vcmp.f64	d0, d0
 8025bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025bf2:	d709      	bvc.n	8025c08 <_printf_float+0xc0>
 8025bf4:	ee10 3a90 	vmov	r3, s1
 8025bf8:	2b00      	cmp	r3, #0
 8025bfa:	bfbc      	itt	lt
 8025bfc:	232d      	movlt	r3, #45	; 0x2d
 8025bfe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8025c02:	497d      	ldr	r1, [pc, #500]	; (8025df8 <_printf_float+0x2b0>)
 8025c04:	4b7d      	ldr	r3, [pc, #500]	; (8025dfc <_printf_float+0x2b4>)
 8025c06:	e7d5      	b.n	8025bb4 <_printf_float+0x6c>
 8025c08:	6863      	ldr	r3, [r4, #4]
 8025c0a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8025c0e:	9104      	str	r1, [sp, #16]
 8025c10:	1c59      	adds	r1, r3, #1
 8025c12:	d13c      	bne.n	8025c8e <_printf_float+0x146>
 8025c14:	2306      	movs	r3, #6
 8025c16:	6063      	str	r3, [r4, #4]
 8025c18:	2300      	movs	r3, #0
 8025c1a:	9303      	str	r3, [sp, #12]
 8025c1c:	ab08      	add	r3, sp, #32
 8025c1e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8025c22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8025c26:	ab07      	add	r3, sp, #28
 8025c28:	6861      	ldr	r1, [r4, #4]
 8025c2a:	9300      	str	r3, [sp, #0]
 8025c2c:	6022      	str	r2, [r4, #0]
 8025c2e:	f10d 031b 	add.w	r3, sp, #27
 8025c32:	4628      	mov	r0, r5
 8025c34:	f7ff fef5 	bl	8025a22 <__cvt>
 8025c38:	9b04      	ldr	r3, [sp, #16]
 8025c3a:	9907      	ldr	r1, [sp, #28]
 8025c3c:	2b47      	cmp	r3, #71	; 0x47
 8025c3e:	4680      	mov	r8, r0
 8025c40:	d108      	bne.n	8025c54 <_printf_float+0x10c>
 8025c42:	1cc8      	adds	r0, r1, #3
 8025c44:	db02      	blt.n	8025c4c <_printf_float+0x104>
 8025c46:	6863      	ldr	r3, [r4, #4]
 8025c48:	4299      	cmp	r1, r3
 8025c4a:	dd41      	ble.n	8025cd0 <_printf_float+0x188>
 8025c4c:	f1a9 0902 	sub.w	r9, r9, #2
 8025c50:	fa5f f989 	uxtb.w	r9, r9
 8025c54:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8025c58:	d820      	bhi.n	8025c9c <_printf_float+0x154>
 8025c5a:	3901      	subs	r1, #1
 8025c5c:	464a      	mov	r2, r9
 8025c5e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8025c62:	9107      	str	r1, [sp, #28]
 8025c64:	f7ff ff2f 	bl	8025ac6 <__exponent>
 8025c68:	9a08      	ldr	r2, [sp, #32]
 8025c6a:	9004      	str	r0, [sp, #16]
 8025c6c:	1813      	adds	r3, r2, r0
 8025c6e:	2a01      	cmp	r2, #1
 8025c70:	6123      	str	r3, [r4, #16]
 8025c72:	dc02      	bgt.n	8025c7a <_printf_float+0x132>
 8025c74:	6822      	ldr	r2, [r4, #0]
 8025c76:	07d2      	lsls	r2, r2, #31
 8025c78:	d501      	bpl.n	8025c7e <_printf_float+0x136>
 8025c7a:	3301      	adds	r3, #1
 8025c7c:	6123      	str	r3, [r4, #16]
 8025c7e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8025c82:	2b00      	cmp	r3, #0
 8025c84:	d0a2      	beq.n	8025bcc <_printf_float+0x84>
 8025c86:	232d      	movs	r3, #45	; 0x2d
 8025c88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025c8c:	e79e      	b.n	8025bcc <_printf_float+0x84>
 8025c8e:	9904      	ldr	r1, [sp, #16]
 8025c90:	2947      	cmp	r1, #71	; 0x47
 8025c92:	d1c1      	bne.n	8025c18 <_printf_float+0xd0>
 8025c94:	2b00      	cmp	r3, #0
 8025c96:	d1bf      	bne.n	8025c18 <_printf_float+0xd0>
 8025c98:	2301      	movs	r3, #1
 8025c9a:	e7bc      	b.n	8025c16 <_printf_float+0xce>
 8025c9c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8025ca0:	d118      	bne.n	8025cd4 <_printf_float+0x18c>
 8025ca2:	2900      	cmp	r1, #0
 8025ca4:	6863      	ldr	r3, [r4, #4]
 8025ca6:	dd0b      	ble.n	8025cc0 <_printf_float+0x178>
 8025ca8:	6121      	str	r1, [r4, #16]
 8025caa:	b913      	cbnz	r3, 8025cb2 <_printf_float+0x16a>
 8025cac:	6822      	ldr	r2, [r4, #0]
 8025cae:	07d0      	lsls	r0, r2, #31
 8025cb0:	d502      	bpl.n	8025cb8 <_printf_float+0x170>
 8025cb2:	3301      	adds	r3, #1
 8025cb4:	440b      	add	r3, r1
 8025cb6:	6123      	str	r3, [r4, #16]
 8025cb8:	2300      	movs	r3, #0
 8025cba:	65a1      	str	r1, [r4, #88]	; 0x58
 8025cbc:	9304      	str	r3, [sp, #16]
 8025cbe:	e7de      	b.n	8025c7e <_printf_float+0x136>
 8025cc0:	b913      	cbnz	r3, 8025cc8 <_printf_float+0x180>
 8025cc2:	6822      	ldr	r2, [r4, #0]
 8025cc4:	07d2      	lsls	r2, r2, #31
 8025cc6:	d501      	bpl.n	8025ccc <_printf_float+0x184>
 8025cc8:	3302      	adds	r3, #2
 8025cca:	e7f4      	b.n	8025cb6 <_printf_float+0x16e>
 8025ccc:	2301      	movs	r3, #1
 8025cce:	e7f2      	b.n	8025cb6 <_printf_float+0x16e>
 8025cd0:	f04f 0967 	mov.w	r9, #103	; 0x67
 8025cd4:	9b08      	ldr	r3, [sp, #32]
 8025cd6:	4299      	cmp	r1, r3
 8025cd8:	db05      	blt.n	8025ce6 <_printf_float+0x19e>
 8025cda:	6823      	ldr	r3, [r4, #0]
 8025cdc:	6121      	str	r1, [r4, #16]
 8025cde:	07d8      	lsls	r0, r3, #31
 8025ce0:	d5ea      	bpl.n	8025cb8 <_printf_float+0x170>
 8025ce2:	1c4b      	adds	r3, r1, #1
 8025ce4:	e7e7      	b.n	8025cb6 <_printf_float+0x16e>
 8025ce6:	2900      	cmp	r1, #0
 8025ce8:	bfd4      	ite	le
 8025cea:	f1c1 0202 	rsble	r2, r1, #2
 8025cee:	2201      	movgt	r2, #1
 8025cf0:	4413      	add	r3, r2
 8025cf2:	e7e0      	b.n	8025cb6 <_printf_float+0x16e>
 8025cf4:	6823      	ldr	r3, [r4, #0]
 8025cf6:	055a      	lsls	r2, r3, #21
 8025cf8:	d407      	bmi.n	8025d0a <_printf_float+0x1c2>
 8025cfa:	6923      	ldr	r3, [r4, #16]
 8025cfc:	4642      	mov	r2, r8
 8025cfe:	4631      	mov	r1, r6
 8025d00:	4628      	mov	r0, r5
 8025d02:	47b8      	blx	r7
 8025d04:	3001      	adds	r0, #1
 8025d06:	d12a      	bne.n	8025d5e <_printf_float+0x216>
 8025d08:	e76a      	b.n	8025be0 <_printf_float+0x98>
 8025d0a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8025d0e:	f240 80e0 	bls.w	8025ed2 <_printf_float+0x38a>
 8025d12:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8025d16:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8025d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025d1e:	d133      	bne.n	8025d88 <_printf_float+0x240>
 8025d20:	4a37      	ldr	r2, [pc, #220]	; (8025e00 <_printf_float+0x2b8>)
 8025d22:	2301      	movs	r3, #1
 8025d24:	4631      	mov	r1, r6
 8025d26:	4628      	mov	r0, r5
 8025d28:	47b8      	blx	r7
 8025d2a:	3001      	adds	r0, #1
 8025d2c:	f43f af58 	beq.w	8025be0 <_printf_float+0x98>
 8025d30:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8025d34:	429a      	cmp	r2, r3
 8025d36:	db02      	blt.n	8025d3e <_printf_float+0x1f6>
 8025d38:	6823      	ldr	r3, [r4, #0]
 8025d3a:	07d8      	lsls	r0, r3, #31
 8025d3c:	d50f      	bpl.n	8025d5e <_printf_float+0x216>
 8025d3e:	4653      	mov	r3, sl
 8025d40:	465a      	mov	r2, fp
 8025d42:	4631      	mov	r1, r6
 8025d44:	4628      	mov	r0, r5
 8025d46:	47b8      	blx	r7
 8025d48:	3001      	adds	r0, #1
 8025d4a:	f43f af49 	beq.w	8025be0 <_printf_float+0x98>
 8025d4e:	f04f 0800 	mov.w	r8, #0
 8025d52:	f104 091a 	add.w	r9, r4, #26
 8025d56:	9b08      	ldr	r3, [sp, #32]
 8025d58:	3b01      	subs	r3, #1
 8025d5a:	4543      	cmp	r3, r8
 8025d5c:	dc09      	bgt.n	8025d72 <_printf_float+0x22a>
 8025d5e:	6823      	ldr	r3, [r4, #0]
 8025d60:	079b      	lsls	r3, r3, #30
 8025d62:	f100 8106 	bmi.w	8025f72 <_printf_float+0x42a>
 8025d66:	68e0      	ldr	r0, [r4, #12]
 8025d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025d6a:	4298      	cmp	r0, r3
 8025d6c:	bfb8      	it	lt
 8025d6e:	4618      	movlt	r0, r3
 8025d70:	e738      	b.n	8025be4 <_printf_float+0x9c>
 8025d72:	2301      	movs	r3, #1
 8025d74:	464a      	mov	r2, r9
 8025d76:	4631      	mov	r1, r6
 8025d78:	4628      	mov	r0, r5
 8025d7a:	47b8      	blx	r7
 8025d7c:	3001      	adds	r0, #1
 8025d7e:	f43f af2f 	beq.w	8025be0 <_printf_float+0x98>
 8025d82:	f108 0801 	add.w	r8, r8, #1
 8025d86:	e7e6      	b.n	8025d56 <_printf_float+0x20e>
 8025d88:	9b07      	ldr	r3, [sp, #28]
 8025d8a:	2b00      	cmp	r3, #0
 8025d8c:	dc3a      	bgt.n	8025e04 <_printf_float+0x2bc>
 8025d8e:	4a1c      	ldr	r2, [pc, #112]	; (8025e00 <_printf_float+0x2b8>)
 8025d90:	2301      	movs	r3, #1
 8025d92:	4631      	mov	r1, r6
 8025d94:	4628      	mov	r0, r5
 8025d96:	47b8      	blx	r7
 8025d98:	3001      	adds	r0, #1
 8025d9a:	f43f af21 	beq.w	8025be0 <_printf_float+0x98>
 8025d9e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8025da2:	4313      	orrs	r3, r2
 8025da4:	d102      	bne.n	8025dac <_printf_float+0x264>
 8025da6:	6823      	ldr	r3, [r4, #0]
 8025da8:	07d9      	lsls	r1, r3, #31
 8025daa:	d5d8      	bpl.n	8025d5e <_printf_float+0x216>
 8025dac:	4653      	mov	r3, sl
 8025dae:	465a      	mov	r2, fp
 8025db0:	4631      	mov	r1, r6
 8025db2:	4628      	mov	r0, r5
 8025db4:	47b8      	blx	r7
 8025db6:	3001      	adds	r0, #1
 8025db8:	f43f af12 	beq.w	8025be0 <_printf_float+0x98>
 8025dbc:	f04f 0900 	mov.w	r9, #0
 8025dc0:	f104 0a1a 	add.w	sl, r4, #26
 8025dc4:	9b07      	ldr	r3, [sp, #28]
 8025dc6:	425b      	negs	r3, r3
 8025dc8:	454b      	cmp	r3, r9
 8025dca:	dc01      	bgt.n	8025dd0 <_printf_float+0x288>
 8025dcc:	9b08      	ldr	r3, [sp, #32]
 8025dce:	e795      	b.n	8025cfc <_printf_float+0x1b4>
 8025dd0:	2301      	movs	r3, #1
 8025dd2:	4652      	mov	r2, sl
 8025dd4:	4631      	mov	r1, r6
 8025dd6:	4628      	mov	r0, r5
 8025dd8:	47b8      	blx	r7
 8025dda:	3001      	adds	r0, #1
 8025ddc:	f43f af00 	beq.w	8025be0 <_printf_float+0x98>
 8025de0:	f109 0901 	add.w	r9, r9, #1
 8025de4:	e7ee      	b.n	8025dc4 <_printf_float+0x27c>
 8025de6:	bf00      	nop
 8025de8:	ffffffff 	.word	0xffffffff
 8025dec:	7fefffff 	.word	0x7fefffff
 8025df0:	0809c70d 	.word	0x0809c70d
 8025df4:	0809c711 	.word	0x0809c711
 8025df8:	0809c715 	.word	0x0809c715
 8025dfc:	0809c719 	.word	0x0809c719
 8025e00:	0809c71d 	.word	0x0809c71d
 8025e04:	9a08      	ldr	r2, [sp, #32]
 8025e06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8025e08:	429a      	cmp	r2, r3
 8025e0a:	bfa8      	it	ge
 8025e0c:	461a      	movge	r2, r3
 8025e0e:	2a00      	cmp	r2, #0
 8025e10:	4691      	mov	r9, r2
 8025e12:	dc38      	bgt.n	8025e86 <_printf_float+0x33e>
 8025e14:	2300      	movs	r3, #0
 8025e16:	9305      	str	r3, [sp, #20]
 8025e18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8025e1c:	f104 021a 	add.w	r2, r4, #26
 8025e20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8025e22:	9905      	ldr	r1, [sp, #20]
 8025e24:	9304      	str	r3, [sp, #16]
 8025e26:	eba3 0309 	sub.w	r3, r3, r9
 8025e2a:	428b      	cmp	r3, r1
 8025e2c:	dc33      	bgt.n	8025e96 <_printf_float+0x34e>
 8025e2e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8025e32:	429a      	cmp	r2, r3
 8025e34:	db3c      	blt.n	8025eb0 <_printf_float+0x368>
 8025e36:	6823      	ldr	r3, [r4, #0]
 8025e38:	07da      	lsls	r2, r3, #31
 8025e3a:	d439      	bmi.n	8025eb0 <_printf_float+0x368>
 8025e3c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8025e40:	eba2 0903 	sub.w	r9, r2, r3
 8025e44:	9b04      	ldr	r3, [sp, #16]
 8025e46:	1ad2      	subs	r2, r2, r3
 8025e48:	4591      	cmp	r9, r2
 8025e4a:	bfa8      	it	ge
 8025e4c:	4691      	movge	r9, r2
 8025e4e:	f1b9 0f00 	cmp.w	r9, #0
 8025e52:	dc35      	bgt.n	8025ec0 <_printf_float+0x378>
 8025e54:	f04f 0800 	mov.w	r8, #0
 8025e58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8025e5c:	f104 0a1a 	add.w	sl, r4, #26
 8025e60:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8025e64:	1a9b      	subs	r3, r3, r2
 8025e66:	eba3 0309 	sub.w	r3, r3, r9
 8025e6a:	4543      	cmp	r3, r8
 8025e6c:	f77f af77 	ble.w	8025d5e <_printf_float+0x216>
 8025e70:	2301      	movs	r3, #1
 8025e72:	4652      	mov	r2, sl
 8025e74:	4631      	mov	r1, r6
 8025e76:	4628      	mov	r0, r5
 8025e78:	47b8      	blx	r7
 8025e7a:	3001      	adds	r0, #1
 8025e7c:	f43f aeb0 	beq.w	8025be0 <_printf_float+0x98>
 8025e80:	f108 0801 	add.w	r8, r8, #1
 8025e84:	e7ec      	b.n	8025e60 <_printf_float+0x318>
 8025e86:	4613      	mov	r3, r2
 8025e88:	4631      	mov	r1, r6
 8025e8a:	4642      	mov	r2, r8
 8025e8c:	4628      	mov	r0, r5
 8025e8e:	47b8      	blx	r7
 8025e90:	3001      	adds	r0, #1
 8025e92:	d1bf      	bne.n	8025e14 <_printf_float+0x2cc>
 8025e94:	e6a4      	b.n	8025be0 <_printf_float+0x98>
 8025e96:	2301      	movs	r3, #1
 8025e98:	4631      	mov	r1, r6
 8025e9a:	4628      	mov	r0, r5
 8025e9c:	9204      	str	r2, [sp, #16]
 8025e9e:	47b8      	blx	r7
 8025ea0:	3001      	adds	r0, #1
 8025ea2:	f43f ae9d 	beq.w	8025be0 <_printf_float+0x98>
 8025ea6:	9b05      	ldr	r3, [sp, #20]
 8025ea8:	9a04      	ldr	r2, [sp, #16]
 8025eaa:	3301      	adds	r3, #1
 8025eac:	9305      	str	r3, [sp, #20]
 8025eae:	e7b7      	b.n	8025e20 <_printf_float+0x2d8>
 8025eb0:	4653      	mov	r3, sl
 8025eb2:	465a      	mov	r2, fp
 8025eb4:	4631      	mov	r1, r6
 8025eb6:	4628      	mov	r0, r5
 8025eb8:	47b8      	blx	r7
 8025eba:	3001      	adds	r0, #1
 8025ebc:	d1be      	bne.n	8025e3c <_printf_float+0x2f4>
 8025ebe:	e68f      	b.n	8025be0 <_printf_float+0x98>
 8025ec0:	9a04      	ldr	r2, [sp, #16]
 8025ec2:	464b      	mov	r3, r9
 8025ec4:	4442      	add	r2, r8
 8025ec6:	4631      	mov	r1, r6
 8025ec8:	4628      	mov	r0, r5
 8025eca:	47b8      	blx	r7
 8025ecc:	3001      	adds	r0, #1
 8025ece:	d1c1      	bne.n	8025e54 <_printf_float+0x30c>
 8025ed0:	e686      	b.n	8025be0 <_printf_float+0x98>
 8025ed2:	9a08      	ldr	r2, [sp, #32]
 8025ed4:	2a01      	cmp	r2, #1
 8025ed6:	dc01      	bgt.n	8025edc <_printf_float+0x394>
 8025ed8:	07db      	lsls	r3, r3, #31
 8025eda:	d537      	bpl.n	8025f4c <_printf_float+0x404>
 8025edc:	2301      	movs	r3, #1
 8025ede:	4642      	mov	r2, r8
 8025ee0:	4631      	mov	r1, r6
 8025ee2:	4628      	mov	r0, r5
 8025ee4:	47b8      	blx	r7
 8025ee6:	3001      	adds	r0, #1
 8025ee8:	f43f ae7a 	beq.w	8025be0 <_printf_float+0x98>
 8025eec:	4653      	mov	r3, sl
 8025eee:	465a      	mov	r2, fp
 8025ef0:	4631      	mov	r1, r6
 8025ef2:	4628      	mov	r0, r5
 8025ef4:	47b8      	blx	r7
 8025ef6:	3001      	adds	r0, #1
 8025ef8:	f43f ae72 	beq.w	8025be0 <_printf_float+0x98>
 8025efc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8025f00:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8025f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025f08:	9b08      	ldr	r3, [sp, #32]
 8025f0a:	d01a      	beq.n	8025f42 <_printf_float+0x3fa>
 8025f0c:	3b01      	subs	r3, #1
 8025f0e:	f108 0201 	add.w	r2, r8, #1
 8025f12:	4631      	mov	r1, r6
 8025f14:	4628      	mov	r0, r5
 8025f16:	47b8      	blx	r7
 8025f18:	3001      	adds	r0, #1
 8025f1a:	d10e      	bne.n	8025f3a <_printf_float+0x3f2>
 8025f1c:	e660      	b.n	8025be0 <_printf_float+0x98>
 8025f1e:	2301      	movs	r3, #1
 8025f20:	464a      	mov	r2, r9
 8025f22:	4631      	mov	r1, r6
 8025f24:	4628      	mov	r0, r5
 8025f26:	47b8      	blx	r7
 8025f28:	3001      	adds	r0, #1
 8025f2a:	f43f ae59 	beq.w	8025be0 <_printf_float+0x98>
 8025f2e:	f108 0801 	add.w	r8, r8, #1
 8025f32:	9b08      	ldr	r3, [sp, #32]
 8025f34:	3b01      	subs	r3, #1
 8025f36:	4543      	cmp	r3, r8
 8025f38:	dcf1      	bgt.n	8025f1e <_printf_float+0x3d6>
 8025f3a:	9b04      	ldr	r3, [sp, #16]
 8025f3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8025f40:	e6dd      	b.n	8025cfe <_printf_float+0x1b6>
 8025f42:	f04f 0800 	mov.w	r8, #0
 8025f46:	f104 091a 	add.w	r9, r4, #26
 8025f4a:	e7f2      	b.n	8025f32 <_printf_float+0x3ea>
 8025f4c:	2301      	movs	r3, #1
 8025f4e:	4642      	mov	r2, r8
 8025f50:	e7df      	b.n	8025f12 <_printf_float+0x3ca>
 8025f52:	2301      	movs	r3, #1
 8025f54:	464a      	mov	r2, r9
 8025f56:	4631      	mov	r1, r6
 8025f58:	4628      	mov	r0, r5
 8025f5a:	47b8      	blx	r7
 8025f5c:	3001      	adds	r0, #1
 8025f5e:	f43f ae3f 	beq.w	8025be0 <_printf_float+0x98>
 8025f62:	f108 0801 	add.w	r8, r8, #1
 8025f66:	68e3      	ldr	r3, [r4, #12]
 8025f68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025f6a:	1a5b      	subs	r3, r3, r1
 8025f6c:	4543      	cmp	r3, r8
 8025f6e:	dcf0      	bgt.n	8025f52 <_printf_float+0x40a>
 8025f70:	e6f9      	b.n	8025d66 <_printf_float+0x21e>
 8025f72:	f04f 0800 	mov.w	r8, #0
 8025f76:	f104 0919 	add.w	r9, r4, #25
 8025f7a:	e7f4      	b.n	8025f66 <_printf_float+0x41e>

08025f7c <_printf_common>:
 8025f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025f80:	4616      	mov	r6, r2
 8025f82:	4699      	mov	r9, r3
 8025f84:	688a      	ldr	r2, [r1, #8]
 8025f86:	690b      	ldr	r3, [r1, #16]
 8025f88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8025f8c:	4293      	cmp	r3, r2
 8025f8e:	bfb8      	it	lt
 8025f90:	4613      	movlt	r3, r2
 8025f92:	6033      	str	r3, [r6, #0]
 8025f94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8025f98:	4607      	mov	r7, r0
 8025f9a:	460c      	mov	r4, r1
 8025f9c:	b10a      	cbz	r2, 8025fa2 <_printf_common+0x26>
 8025f9e:	3301      	adds	r3, #1
 8025fa0:	6033      	str	r3, [r6, #0]
 8025fa2:	6823      	ldr	r3, [r4, #0]
 8025fa4:	0699      	lsls	r1, r3, #26
 8025fa6:	bf42      	ittt	mi
 8025fa8:	6833      	ldrmi	r3, [r6, #0]
 8025faa:	3302      	addmi	r3, #2
 8025fac:	6033      	strmi	r3, [r6, #0]
 8025fae:	6825      	ldr	r5, [r4, #0]
 8025fb0:	f015 0506 	ands.w	r5, r5, #6
 8025fb4:	d106      	bne.n	8025fc4 <_printf_common+0x48>
 8025fb6:	f104 0a19 	add.w	sl, r4, #25
 8025fba:	68e3      	ldr	r3, [r4, #12]
 8025fbc:	6832      	ldr	r2, [r6, #0]
 8025fbe:	1a9b      	subs	r3, r3, r2
 8025fc0:	42ab      	cmp	r3, r5
 8025fc2:	dc26      	bgt.n	8026012 <_printf_common+0x96>
 8025fc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8025fc8:	1e13      	subs	r3, r2, #0
 8025fca:	6822      	ldr	r2, [r4, #0]
 8025fcc:	bf18      	it	ne
 8025fce:	2301      	movne	r3, #1
 8025fd0:	0692      	lsls	r2, r2, #26
 8025fd2:	d42b      	bmi.n	802602c <_printf_common+0xb0>
 8025fd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025fd8:	4649      	mov	r1, r9
 8025fda:	4638      	mov	r0, r7
 8025fdc:	47c0      	blx	r8
 8025fde:	3001      	adds	r0, #1
 8025fe0:	d01e      	beq.n	8026020 <_printf_common+0xa4>
 8025fe2:	6823      	ldr	r3, [r4, #0]
 8025fe4:	6922      	ldr	r2, [r4, #16]
 8025fe6:	f003 0306 	and.w	r3, r3, #6
 8025fea:	2b04      	cmp	r3, #4
 8025fec:	bf02      	ittt	eq
 8025fee:	68e5      	ldreq	r5, [r4, #12]
 8025ff0:	6833      	ldreq	r3, [r6, #0]
 8025ff2:	1aed      	subeq	r5, r5, r3
 8025ff4:	68a3      	ldr	r3, [r4, #8]
 8025ff6:	bf0c      	ite	eq
 8025ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025ffc:	2500      	movne	r5, #0
 8025ffe:	4293      	cmp	r3, r2
 8026000:	bfc4      	itt	gt
 8026002:	1a9b      	subgt	r3, r3, r2
 8026004:	18ed      	addgt	r5, r5, r3
 8026006:	2600      	movs	r6, #0
 8026008:	341a      	adds	r4, #26
 802600a:	42b5      	cmp	r5, r6
 802600c:	d11a      	bne.n	8026044 <_printf_common+0xc8>
 802600e:	2000      	movs	r0, #0
 8026010:	e008      	b.n	8026024 <_printf_common+0xa8>
 8026012:	2301      	movs	r3, #1
 8026014:	4652      	mov	r2, sl
 8026016:	4649      	mov	r1, r9
 8026018:	4638      	mov	r0, r7
 802601a:	47c0      	blx	r8
 802601c:	3001      	adds	r0, #1
 802601e:	d103      	bne.n	8026028 <_printf_common+0xac>
 8026020:	f04f 30ff 	mov.w	r0, #4294967295
 8026024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026028:	3501      	adds	r5, #1
 802602a:	e7c6      	b.n	8025fba <_printf_common+0x3e>
 802602c:	18e1      	adds	r1, r4, r3
 802602e:	1c5a      	adds	r2, r3, #1
 8026030:	2030      	movs	r0, #48	; 0x30
 8026032:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8026036:	4422      	add	r2, r4
 8026038:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802603c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8026040:	3302      	adds	r3, #2
 8026042:	e7c7      	b.n	8025fd4 <_printf_common+0x58>
 8026044:	2301      	movs	r3, #1
 8026046:	4622      	mov	r2, r4
 8026048:	4649      	mov	r1, r9
 802604a:	4638      	mov	r0, r7
 802604c:	47c0      	blx	r8
 802604e:	3001      	adds	r0, #1
 8026050:	d0e6      	beq.n	8026020 <_printf_common+0xa4>
 8026052:	3601      	adds	r6, #1
 8026054:	e7d9      	b.n	802600a <_printf_common+0x8e>
	...

08026058 <_printf_i>:
 8026058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802605c:	7e0f      	ldrb	r7, [r1, #24]
 802605e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026060:	2f78      	cmp	r7, #120	; 0x78
 8026062:	4691      	mov	r9, r2
 8026064:	4680      	mov	r8, r0
 8026066:	460c      	mov	r4, r1
 8026068:	469a      	mov	sl, r3
 802606a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802606e:	d807      	bhi.n	8026080 <_printf_i+0x28>
 8026070:	2f62      	cmp	r7, #98	; 0x62
 8026072:	d80a      	bhi.n	802608a <_printf_i+0x32>
 8026074:	2f00      	cmp	r7, #0
 8026076:	f000 80d4 	beq.w	8026222 <_printf_i+0x1ca>
 802607a:	2f58      	cmp	r7, #88	; 0x58
 802607c:	f000 80c0 	beq.w	8026200 <_printf_i+0x1a8>
 8026080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026084:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8026088:	e03a      	b.n	8026100 <_printf_i+0xa8>
 802608a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802608e:	2b15      	cmp	r3, #21
 8026090:	d8f6      	bhi.n	8026080 <_printf_i+0x28>
 8026092:	a101      	add	r1, pc, #4	; (adr r1, 8026098 <_printf_i+0x40>)
 8026094:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8026098:	080260f1 	.word	0x080260f1
 802609c:	08026105 	.word	0x08026105
 80260a0:	08026081 	.word	0x08026081
 80260a4:	08026081 	.word	0x08026081
 80260a8:	08026081 	.word	0x08026081
 80260ac:	08026081 	.word	0x08026081
 80260b0:	08026105 	.word	0x08026105
 80260b4:	08026081 	.word	0x08026081
 80260b8:	08026081 	.word	0x08026081
 80260bc:	08026081 	.word	0x08026081
 80260c0:	08026081 	.word	0x08026081
 80260c4:	08026209 	.word	0x08026209
 80260c8:	08026131 	.word	0x08026131
 80260cc:	080261c3 	.word	0x080261c3
 80260d0:	08026081 	.word	0x08026081
 80260d4:	08026081 	.word	0x08026081
 80260d8:	0802622b 	.word	0x0802622b
 80260dc:	08026081 	.word	0x08026081
 80260e0:	08026131 	.word	0x08026131
 80260e4:	08026081 	.word	0x08026081
 80260e8:	08026081 	.word	0x08026081
 80260ec:	080261cb 	.word	0x080261cb
 80260f0:	682b      	ldr	r3, [r5, #0]
 80260f2:	1d1a      	adds	r2, r3, #4
 80260f4:	681b      	ldr	r3, [r3, #0]
 80260f6:	602a      	str	r2, [r5, #0]
 80260f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80260fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8026100:	2301      	movs	r3, #1
 8026102:	e09f      	b.n	8026244 <_printf_i+0x1ec>
 8026104:	6820      	ldr	r0, [r4, #0]
 8026106:	682b      	ldr	r3, [r5, #0]
 8026108:	0607      	lsls	r7, r0, #24
 802610a:	f103 0104 	add.w	r1, r3, #4
 802610e:	6029      	str	r1, [r5, #0]
 8026110:	d501      	bpl.n	8026116 <_printf_i+0xbe>
 8026112:	681e      	ldr	r6, [r3, #0]
 8026114:	e003      	b.n	802611e <_printf_i+0xc6>
 8026116:	0646      	lsls	r6, r0, #25
 8026118:	d5fb      	bpl.n	8026112 <_printf_i+0xba>
 802611a:	f9b3 6000 	ldrsh.w	r6, [r3]
 802611e:	2e00      	cmp	r6, #0
 8026120:	da03      	bge.n	802612a <_printf_i+0xd2>
 8026122:	232d      	movs	r3, #45	; 0x2d
 8026124:	4276      	negs	r6, r6
 8026126:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802612a:	485a      	ldr	r0, [pc, #360]	; (8026294 <_printf_i+0x23c>)
 802612c:	230a      	movs	r3, #10
 802612e:	e012      	b.n	8026156 <_printf_i+0xfe>
 8026130:	682b      	ldr	r3, [r5, #0]
 8026132:	6820      	ldr	r0, [r4, #0]
 8026134:	1d19      	adds	r1, r3, #4
 8026136:	6029      	str	r1, [r5, #0]
 8026138:	0605      	lsls	r5, r0, #24
 802613a:	d501      	bpl.n	8026140 <_printf_i+0xe8>
 802613c:	681e      	ldr	r6, [r3, #0]
 802613e:	e002      	b.n	8026146 <_printf_i+0xee>
 8026140:	0641      	lsls	r1, r0, #25
 8026142:	d5fb      	bpl.n	802613c <_printf_i+0xe4>
 8026144:	881e      	ldrh	r6, [r3, #0]
 8026146:	4853      	ldr	r0, [pc, #332]	; (8026294 <_printf_i+0x23c>)
 8026148:	2f6f      	cmp	r7, #111	; 0x6f
 802614a:	bf0c      	ite	eq
 802614c:	2308      	moveq	r3, #8
 802614e:	230a      	movne	r3, #10
 8026150:	2100      	movs	r1, #0
 8026152:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8026156:	6865      	ldr	r5, [r4, #4]
 8026158:	60a5      	str	r5, [r4, #8]
 802615a:	2d00      	cmp	r5, #0
 802615c:	bfa2      	ittt	ge
 802615e:	6821      	ldrge	r1, [r4, #0]
 8026160:	f021 0104 	bicge.w	r1, r1, #4
 8026164:	6021      	strge	r1, [r4, #0]
 8026166:	b90e      	cbnz	r6, 802616c <_printf_i+0x114>
 8026168:	2d00      	cmp	r5, #0
 802616a:	d04b      	beq.n	8026204 <_printf_i+0x1ac>
 802616c:	4615      	mov	r5, r2
 802616e:	fbb6 f1f3 	udiv	r1, r6, r3
 8026172:	fb03 6711 	mls	r7, r3, r1, r6
 8026176:	5dc7      	ldrb	r7, [r0, r7]
 8026178:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802617c:	4637      	mov	r7, r6
 802617e:	42bb      	cmp	r3, r7
 8026180:	460e      	mov	r6, r1
 8026182:	d9f4      	bls.n	802616e <_printf_i+0x116>
 8026184:	2b08      	cmp	r3, #8
 8026186:	d10b      	bne.n	80261a0 <_printf_i+0x148>
 8026188:	6823      	ldr	r3, [r4, #0]
 802618a:	07de      	lsls	r6, r3, #31
 802618c:	d508      	bpl.n	80261a0 <_printf_i+0x148>
 802618e:	6923      	ldr	r3, [r4, #16]
 8026190:	6861      	ldr	r1, [r4, #4]
 8026192:	4299      	cmp	r1, r3
 8026194:	bfde      	ittt	le
 8026196:	2330      	movle	r3, #48	; 0x30
 8026198:	f805 3c01 	strble.w	r3, [r5, #-1]
 802619c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80261a0:	1b52      	subs	r2, r2, r5
 80261a2:	6122      	str	r2, [r4, #16]
 80261a4:	f8cd a000 	str.w	sl, [sp]
 80261a8:	464b      	mov	r3, r9
 80261aa:	aa03      	add	r2, sp, #12
 80261ac:	4621      	mov	r1, r4
 80261ae:	4640      	mov	r0, r8
 80261b0:	f7ff fee4 	bl	8025f7c <_printf_common>
 80261b4:	3001      	adds	r0, #1
 80261b6:	d14a      	bne.n	802624e <_printf_i+0x1f6>
 80261b8:	f04f 30ff 	mov.w	r0, #4294967295
 80261bc:	b004      	add	sp, #16
 80261be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80261c2:	6823      	ldr	r3, [r4, #0]
 80261c4:	f043 0320 	orr.w	r3, r3, #32
 80261c8:	6023      	str	r3, [r4, #0]
 80261ca:	4833      	ldr	r0, [pc, #204]	; (8026298 <_printf_i+0x240>)
 80261cc:	2778      	movs	r7, #120	; 0x78
 80261ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80261d2:	6823      	ldr	r3, [r4, #0]
 80261d4:	6829      	ldr	r1, [r5, #0]
 80261d6:	061f      	lsls	r7, r3, #24
 80261d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80261dc:	d402      	bmi.n	80261e4 <_printf_i+0x18c>
 80261de:	065f      	lsls	r7, r3, #25
 80261e0:	bf48      	it	mi
 80261e2:	b2b6      	uxthmi	r6, r6
 80261e4:	07df      	lsls	r7, r3, #31
 80261e6:	bf48      	it	mi
 80261e8:	f043 0320 	orrmi.w	r3, r3, #32
 80261ec:	6029      	str	r1, [r5, #0]
 80261ee:	bf48      	it	mi
 80261f0:	6023      	strmi	r3, [r4, #0]
 80261f2:	b91e      	cbnz	r6, 80261fc <_printf_i+0x1a4>
 80261f4:	6823      	ldr	r3, [r4, #0]
 80261f6:	f023 0320 	bic.w	r3, r3, #32
 80261fa:	6023      	str	r3, [r4, #0]
 80261fc:	2310      	movs	r3, #16
 80261fe:	e7a7      	b.n	8026150 <_printf_i+0xf8>
 8026200:	4824      	ldr	r0, [pc, #144]	; (8026294 <_printf_i+0x23c>)
 8026202:	e7e4      	b.n	80261ce <_printf_i+0x176>
 8026204:	4615      	mov	r5, r2
 8026206:	e7bd      	b.n	8026184 <_printf_i+0x12c>
 8026208:	682b      	ldr	r3, [r5, #0]
 802620a:	6826      	ldr	r6, [r4, #0]
 802620c:	6961      	ldr	r1, [r4, #20]
 802620e:	1d18      	adds	r0, r3, #4
 8026210:	6028      	str	r0, [r5, #0]
 8026212:	0635      	lsls	r5, r6, #24
 8026214:	681b      	ldr	r3, [r3, #0]
 8026216:	d501      	bpl.n	802621c <_printf_i+0x1c4>
 8026218:	6019      	str	r1, [r3, #0]
 802621a:	e002      	b.n	8026222 <_printf_i+0x1ca>
 802621c:	0670      	lsls	r0, r6, #25
 802621e:	d5fb      	bpl.n	8026218 <_printf_i+0x1c0>
 8026220:	8019      	strh	r1, [r3, #0]
 8026222:	2300      	movs	r3, #0
 8026224:	6123      	str	r3, [r4, #16]
 8026226:	4615      	mov	r5, r2
 8026228:	e7bc      	b.n	80261a4 <_printf_i+0x14c>
 802622a:	682b      	ldr	r3, [r5, #0]
 802622c:	1d1a      	adds	r2, r3, #4
 802622e:	602a      	str	r2, [r5, #0]
 8026230:	681d      	ldr	r5, [r3, #0]
 8026232:	6862      	ldr	r2, [r4, #4]
 8026234:	2100      	movs	r1, #0
 8026236:	4628      	mov	r0, r5
 8026238:	f7da f862 	bl	8000300 <memchr>
 802623c:	b108      	cbz	r0, 8026242 <_printf_i+0x1ea>
 802623e:	1b40      	subs	r0, r0, r5
 8026240:	6060      	str	r0, [r4, #4]
 8026242:	6863      	ldr	r3, [r4, #4]
 8026244:	6123      	str	r3, [r4, #16]
 8026246:	2300      	movs	r3, #0
 8026248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802624c:	e7aa      	b.n	80261a4 <_printf_i+0x14c>
 802624e:	6923      	ldr	r3, [r4, #16]
 8026250:	462a      	mov	r2, r5
 8026252:	4649      	mov	r1, r9
 8026254:	4640      	mov	r0, r8
 8026256:	47d0      	blx	sl
 8026258:	3001      	adds	r0, #1
 802625a:	d0ad      	beq.n	80261b8 <_printf_i+0x160>
 802625c:	6823      	ldr	r3, [r4, #0]
 802625e:	079b      	lsls	r3, r3, #30
 8026260:	d413      	bmi.n	802628a <_printf_i+0x232>
 8026262:	68e0      	ldr	r0, [r4, #12]
 8026264:	9b03      	ldr	r3, [sp, #12]
 8026266:	4298      	cmp	r0, r3
 8026268:	bfb8      	it	lt
 802626a:	4618      	movlt	r0, r3
 802626c:	e7a6      	b.n	80261bc <_printf_i+0x164>
 802626e:	2301      	movs	r3, #1
 8026270:	4632      	mov	r2, r6
 8026272:	4649      	mov	r1, r9
 8026274:	4640      	mov	r0, r8
 8026276:	47d0      	blx	sl
 8026278:	3001      	adds	r0, #1
 802627a:	d09d      	beq.n	80261b8 <_printf_i+0x160>
 802627c:	3501      	adds	r5, #1
 802627e:	68e3      	ldr	r3, [r4, #12]
 8026280:	9903      	ldr	r1, [sp, #12]
 8026282:	1a5b      	subs	r3, r3, r1
 8026284:	42ab      	cmp	r3, r5
 8026286:	dcf2      	bgt.n	802626e <_printf_i+0x216>
 8026288:	e7eb      	b.n	8026262 <_printf_i+0x20a>
 802628a:	2500      	movs	r5, #0
 802628c:	f104 0619 	add.w	r6, r4, #25
 8026290:	e7f5      	b.n	802627e <_printf_i+0x226>
 8026292:	bf00      	nop
 8026294:	0809c71f 	.word	0x0809c71f
 8026298:	0809c730 	.word	0x0809c730

0802629c <std>:
 802629c:	2300      	movs	r3, #0
 802629e:	b510      	push	{r4, lr}
 80262a0:	4604      	mov	r4, r0
 80262a2:	e9c0 3300 	strd	r3, r3, [r0]
 80262a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80262aa:	6083      	str	r3, [r0, #8]
 80262ac:	8181      	strh	r1, [r0, #12]
 80262ae:	6643      	str	r3, [r0, #100]	; 0x64
 80262b0:	81c2      	strh	r2, [r0, #14]
 80262b2:	6183      	str	r3, [r0, #24]
 80262b4:	4619      	mov	r1, r3
 80262b6:	2208      	movs	r2, #8
 80262b8:	305c      	adds	r0, #92	; 0x5c
 80262ba:	f000 f962 	bl	8026582 <memset>
 80262be:	4b0d      	ldr	r3, [pc, #52]	; (80262f4 <std+0x58>)
 80262c0:	6263      	str	r3, [r4, #36]	; 0x24
 80262c2:	4b0d      	ldr	r3, [pc, #52]	; (80262f8 <std+0x5c>)
 80262c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80262c6:	4b0d      	ldr	r3, [pc, #52]	; (80262fc <std+0x60>)
 80262c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80262ca:	4b0d      	ldr	r3, [pc, #52]	; (8026300 <std+0x64>)
 80262cc:	6323      	str	r3, [r4, #48]	; 0x30
 80262ce:	4b0d      	ldr	r3, [pc, #52]	; (8026304 <std+0x68>)
 80262d0:	6224      	str	r4, [r4, #32]
 80262d2:	429c      	cmp	r4, r3
 80262d4:	d006      	beq.n	80262e4 <std+0x48>
 80262d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80262da:	4294      	cmp	r4, r2
 80262dc:	d002      	beq.n	80262e4 <std+0x48>
 80262de:	33d0      	adds	r3, #208	; 0xd0
 80262e0:	429c      	cmp	r4, r3
 80262e2:	d105      	bne.n	80262f0 <std+0x54>
 80262e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80262e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80262ec:	f000 b9d8 	b.w	80266a0 <__retarget_lock_init_recursive>
 80262f0:	bd10      	pop	{r4, pc}
 80262f2:	bf00      	nop
 80262f4:	080264c9 	.word	0x080264c9
 80262f8:	080264eb 	.word	0x080264eb
 80262fc:	08026523 	.word	0x08026523
 8026300:	08026547 	.word	0x08026547
 8026304:	2000a3d4 	.word	0x2000a3d4

08026308 <stdio_exit_handler>:
 8026308:	4a02      	ldr	r2, [pc, #8]	; (8026314 <stdio_exit_handler+0xc>)
 802630a:	4903      	ldr	r1, [pc, #12]	; (8026318 <stdio_exit_handler+0x10>)
 802630c:	4803      	ldr	r0, [pc, #12]	; (802631c <stdio_exit_handler+0x14>)
 802630e:	f000 b869 	b.w	80263e4 <_fwalk_sglue>
 8026312:	bf00      	nop
 8026314:	20007730 	.word	0x20007730
 8026318:	08027e1d 	.word	0x08027e1d
 802631c:	2000773c 	.word	0x2000773c

08026320 <cleanup_stdio>:
 8026320:	6841      	ldr	r1, [r0, #4]
 8026322:	4b0c      	ldr	r3, [pc, #48]	; (8026354 <cleanup_stdio+0x34>)
 8026324:	4299      	cmp	r1, r3
 8026326:	b510      	push	{r4, lr}
 8026328:	4604      	mov	r4, r0
 802632a:	d001      	beq.n	8026330 <cleanup_stdio+0x10>
 802632c:	f001 fd76 	bl	8027e1c <_fflush_r>
 8026330:	68a1      	ldr	r1, [r4, #8]
 8026332:	4b09      	ldr	r3, [pc, #36]	; (8026358 <cleanup_stdio+0x38>)
 8026334:	4299      	cmp	r1, r3
 8026336:	d002      	beq.n	802633e <cleanup_stdio+0x1e>
 8026338:	4620      	mov	r0, r4
 802633a:	f001 fd6f 	bl	8027e1c <_fflush_r>
 802633e:	68e1      	ldr	r1, [r4, #12]
 8026340:	4b06      	ldr	r3, [pc, #24]	; (802635c <cleanup_stdio+0x3c>)
 8026342:	4299      	cmp	r1, r3
 8026344:	d004      	beq.n	8026350 <cleanup_stdio+0x30>
 8026346:	4620      	mov	r0, r4
 8026348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802634c:	f001 bd66 	b.w	8027e1c <_fflush_r>
 8026350:	bd10      	pop	{r4, pc}
 8026352:	bf00      	nop
 8026354:	2000a3d4 	.word	0x2000a3d4
 8026358:	2000a43c 	.word	0x2000a43c
 802635c:	2000a4a4 	.word	0x2000a4a4

08026360 <global_stdio_init.part.0>:
 8026360:	b510      	push	{r4, lr}
 8026362:	4b0b      	ldr	r3, [pc, #44]	; (8026390 <global_stdio_init.part.0+0x30>)
 8026364:	4c0b      	ldr	r4, [pc, #44]	; (8026394 <global_stdio_init.part.0+0x34>)
 8026366:	4a0c      	ldr	r2, [pc, #48]	; (8026398 <global_stdio_init.part.0+0x38>)
 8026368:	601a      	str	r2, [r3, #0]
 802636a:	4620      	mov	r0, r4
 802636c:	2200      	movs	r2, #0
 802636e:	2104      	movs	r1, #4
 8026370:	f7ff ff94 	bl	802629c <std>
 8026374:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8026378:	2201      	movs	r2, #1
 802637a:	2109      	movs	r1, #9
 802637c:	f7ff ff8e 	bl	802629c <std>
 8026380:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8026384:	2202      	movs	r2, #2
 8026386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802638a:	2112      	movs	r1, #18
 802638c:	f7ff bf86 	b.w	802629c <std>
 8026390:	2000a50c 	.word	0x2000a50c
 8026394:	2000a3d4 	.word	0x2000a3d4
 8026398:	08026309 	.word	0x08026309

0802639c <__sfp_lock_acquire>:
 802639c:	4801      	ldr	r0, [pc, #4]	; (80263a4 <__sfp_lock_acquire+0x8>)
 802639e:	f000 b980 	b.w	80266a2 <__retarget_lock_acquire_recursive>
 80263a2:	bf00      	nop
 80263a4:	2000a515 	.word	0x2000a515

080263a8 <__sfp_lock_release>:
 80263a8:	4801      	ldr	r0, [pc, #4]	; (80263b0 <__sfp_lock_release+0x8>)
 80263aa:	f000 b97b 	b.w	80266a4 <__retarget_lock_release_recursive>
 80263ae:	bf00      	nop
 80263b0:	2000a515 	.word	0x2000a515

080263b4 <__sinit>:
 80263b4:	b510      	push	{r4, lr}
 80263b6:	4604      	mov	r4, r0
 80263b8:	f7ff fff0 	bl	802639c <__sfp_lock_acquire>
 80263bc:	6a23      	ldr	r3, [r4, #32]
 80263be:	b11b      	cbz	r3, 80263c8 <__sinit+0x14>
 80263c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80263c4:	f7ff bff0 	b.w	80263a8 <__sfp_lock_release>
 80263c8:	4b04      	ldr	r3, [pc, #16]	; (80263dc <__sinit+0x28>)
 80263ca:	6223      	str	r3, [r4, #32]
 80263cc:	4b04      	ldr	r3, [pc, #16]	; (80263e0 <__sinit+0x2c>)
 80263ce:	681b      	ldr	r3, [r3, #0]
 80263d0:	2b00      	cmp	r3, #0
 80263d2:	d1f5      	bne.n	80263c0 <__sinit+0xc>
 80263d4:	f7ff ffc4 	bl	8026360 <global_stdio_init.part.0>
 80263d8:	e7f2      	b.n	80263c0 <__sinit+0xc>
 80263da:	bf00      	nop
 80263dc:	08026321 	.word	0x08026321
 80263e0:	2000a50c 	.word	0x2000a50c

080263e4 <_fwalk_sglue>:
 80263e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80263e8:	4607      	mov	r7, r0
 80263ea:	4688      	mov	r8, r1
 80263ec:	4614      	mov	r4, r2
 80263ee:	2600      	movs	r6, #0
 80263f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80263f4:	f1b9 0901 	subs.w	r9, r9, #1
 80263f8:	d505      	bpl.n	8026406 <_fwalk_sglue+0x22>
 80263fa:	6824      	ldr	r4, [r4, #0]
 80263fc:	2c00      	cmp	r4, #0
 80263fe:	d1f7      	bne.n	80263f0 <_fwalk_sglue+0xc>
 8026400:	4630      	mov	r0, r6
 8026402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026406:	89ab      	ldrh	r3, [r5, #12]
 8026408:	2b01      	cmp	r3, #1
 802640a:	d907      	bls.n	802641c <_fwalk_sglue+0x38>
 802640c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026410:	3301      	adds	r3, #1
 8026412:	d003      	beq.n	802641c <_fwalk_sglue+0x38>
 8026414:	4629      	mov	r1, r5
 8026416:	4638      	mov	r0, r7
 8026418:	47c0      	blx	r8
 802641a:	4306      	orrs	r6, r0
 802641c:	3568      	adds	r5, #104	; 0x68
 802641e:	e7e9      	b.n	80263f4 <_fwalk_sglue+0x10>

08026420 <sniprintf>:
 8026420:	b40c      	push	{r2, r3}
 8026422:	b530      	push	{r4, r5, lr}
 8026424:	4b17      	ldr	r3, [pc, #92]	; (8026484 <sniprintf+0x64>)
 8026426:	1e0c      	subs	r4, r1, #0
 8026428:	681d      	ldr	r5, [r3, #0]
 802642a:	b09d      	sub	sp, #116	; 0x74
 802642c:	da08      	bge.n	8026440 <sniprintf+0x20>
 802642e:	238b      	movs	r3, #139	; 0x8b
 8026430:	602b      	str	r3, [r5, #0]
 8026432:	f04f 30ff 	mov.w	r0, #4294967295
 8026436:	b01d      	add	sp, #116	; 0x74
 8026438:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802643c:	b002      	add	sp, #8
 802643e:	4770      	bx	lr
 8026440:	f44f 7302 	mov.w	r3, #520	; 0x208
 8026444:	f8ad 3014 	strh.w	r3, [sp, #20]
 8026448:	bf14      	ite	ne
 802644a:	f104 33ff 	addne.w	r3, r4, #4294967295
 802644e:	4623      	moveq	r3, r4
 8026450:	9304      	str	r3, [sp, #16]
 8026452:	9307      	str	r3, [sp, #28]
 8026454:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8026458:	9002      	str	r0, [sp, #8]
 802645a:	9006      	str	r0, [sp, #24]
 802645c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8026460:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8026462:	ab21      	add	r3, sp, #132	; 0x84
 8026464:	a902      	add	r1, sp, #8
 8026466:	4628      	mov	r0, r5
 8026468:	9301      	str	r3, [sp, #4]
 802646a:	f001 fb53 	bl	8027b14 <_svfiprintf_r>
 802646e:	1c43      	adds	r3, r0, #1
 8026470:	bfbc      	itt	lt
 8026472:	238b      	movlt	r3, #139	; 0x8b
 8026474:	602b      	strlt	r3, [r5, #0]
 8026476:	2c00      	cmp	r4, #0
 8026478:	d0dd      	beq.n	8026436 <sniprintf+0x16>
 802647a:	9b02      	ldr	r3, [sp, #8]
 802647c:	2200      	movs	r2, #0
 802647e:	701a      	strb	r2, [r3, #0]
 8026480:	e7d9      	b.n	8026436 <sniprintf+0x16>
 8026482:	bf00      	nop
 8026484:	20007788 	.word	0x20007788

08026488 <siprintf>:
 8026488:	b40e      	push	{r1, r2, r3}
 802648a:	b500      	push	{lr}
 802648c:	b09c      	sub	sp, #112	; 0x70
 802648e:	ab1d      	add	r3, sp, #116	; 0x74
 8026490:	9002      	str	r0, [sp, #8]
 8026492:	9006      	str	r0, [sp, #24]
 8026494:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8026498:	4809      	ldr	r0, [pc, #36]	; (80264c0 <siprintf+0x38>)
 802649a:	9107      	str	r1, [sp, #28]
 802649c:	9104      	str	r1, [sp, #16]
 802649e:	4909      	ldr	r1, [pc, #36]	; (80264c4 <siprintf+0x3c>)
 80264a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80264a4:	9105      	str	r1, [sp, #20]
 80264a6:	6800      	ldr	r0, [r0, #0]
 80264a8:	9301      	str	r3, [sp, #4]
 80264aa:	a902      	add	r1, sp, #8
 80264ac:	f001 fb32 	bl	8027b14 <_svfiprintf_r>
 80264b0:	9b02      	ldr	r3, [sp, #8]
 80264b2:	2200      	movs	r2, #0
 80264b4:	701a      	strb	r2, [r3, #0]
 80264b6:	b01c      	add	sp, #112	; 0x70
 80264b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80264bc:	b003      	add	sp, #12
 80264be:	4770      	bx	lr
 80264c0:	20007788 	.word	0x20007788
 80264c4:	ffff0208 	.word	0xffff0208

080264c8 <__sread>:
 80264c8:	b510      	push	{r4, lr}
 80264ca:	460c      	mov	r4, r1
 80264cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80264d0:	f000 f88e 	bl	80265f0 <_read_r>
 80264d4:	2800      	cmp	r0, #0
 80264d6:	bfab      	itete	ge
 80264d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80264da:	89a3      	ldrhlt	r3, [r4, #12]
 80264dc:	181b      	addge	r3, r3, r0
 80264de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80264e2:	bfac      	ite	ge
 80264e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80264e6:	81a3      	strhlt	r3, [r4, #12]
 80264e8:	bd10      	pop	{r4, pc}

080264ea <__swrite>:
 80264ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80264ee:	461f      	mov	r7, r3
 80264f0:	898b      	ldrh	r3, [r1, #12]
 80264f2:	05db      	lsls	r3, r3, #23
 80264f4:	4605      	mov	r5, r0
 80264f6:	460c      	mov	r4, r1
 80264f8:	4616      	mov	r6, r2
 80264fa:	d505      	bpl.n	8026508 <__swrite+0x1e>
 80264fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026500:	2302      	movs	r3, #2
 8026502:	2200      	movs	r2, #0
 8026504:	f000 f862 	bl	80265cc <_lseek_r>
 8026508:	89a3      	ldrh	r3, [r4, #12]
 802650a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802650e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026512:	81a3      	strh	r3, [r4, #12]
 8026514:	4632      	mov	r2, r6
 8026516:	463b      	mov	r3, r7
 8026518:	4628      	mov	r0, r5
 802651a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802651e:	f000 b889 	b.w	8026634 <_write_r>

08026522 <__sseek>:
 8026522:	b510      	push	{r4, lr}
 8026524:	460c      	mov	r4, r1
 8026526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802652a:	f000 f84f 	bl	80265cc <_lseek_r>
 802652e:	1c43      	adds	r3, r0, #1
 8026530:	89a3      	ldrh	r3, [r4, #12]
 8026532:	bf15      	itete	ne
 8026534:	6560      	strne	r0, [r4, #84]	; 0x54
 8026536:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802653a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802653e:	81a3      	strheq	r3, [r4, #12]
 8026540:	bf18      	it	ne
 8026542:	81a3      	strhne	r3, [r4, #12]
 8026544:	bd10      	pop	{r4, pc}

08026546 <__sclose>:
 8026546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802654a:	f000 b82f 	b.w	80265ac <_close_r>

0802654e <memmove>:
 802654e:	4288      	cmp	r0, r1
 8026550:	b510      	push	{r4, lr}
 8026552:	eb01 0402 	add.w	r4, r1, r2
 8026556:	d902      	bls.n	802655e <memmove+0x10>
 8026558:	4284      	cmp	r4, r0
 802655a:	4623      	mov	r3, r4
 802655c:	d807      	bhi.n	802656e <memmove+0x20>
 802655e:	1e43      	subs	r3, r0, #1
 8026560:	42a1      	cmp	r1, r4
 8026562:	d008      	beq.n	8026576 <memmove+0x28>
 8026564:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026568:	f803 2f01 	strb.w	r2, [r3, #1]!
 802656c:	e7f8      	b.n	8026560 <memmove+0x12>
 802656e:	4402      	add	r2, r0
 8026570:	4601      	mov	r1, r0
 8026572:	428a      	cmp	r2, r1
 8026574:	d100      	bne.n	8026578 <memmove+0x2a>
 8026576:	bd10      	pop	{r4, pc}
 8026578:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802657c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8026580:	e7f7      	b.n	8026572 <memmove+0x24>

08026582 <memset>:
 8026582:	4402      	add	r2, r0
 8026584:	4603      	mov	r3, r0
 8026586:	4293      	cmp	r3, r2
 8026588:	d100      	bne.n	802658c <memset+0xa>
 802658a:	4770      	bx	lr
 802658c:	f803 1b01 	strb.w	r1, [r3], #1
 8026590:	e7f9      	b.n	8026586 <memset+0x4>

08026592 <stpcpy>:
 8026592:	4603      	mov	r3, r0
 8026594:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026598:	4618      	mov	r0, r3
 802659a:	f803 2b01 	strb.w	r2, [r3], #1
 802659e:	2a00      	cmp	r2, #0
 80265a0:	d1f8      	bne.n	8026594 <stpcpy+0x2>
 80265a2:	4770      	bx	lr

080265a4 <_localeconv_r>:
 80265a4:	4800      	ldr	r0, [pc, #0]	; (80265a8 <_localeconv_r+0x4>)
 80265a6:	4770      	bx	lr
 80265a8:	2000787c 	.word	0x2000787c

080265ac <_close_r>:
 80265ac:	b538      	push	{r3, r4, r5, lr}
 80265ae:	4d06      	ldr	r5, [pc, #24]	; (80265c8 <_close_r+0x1c>)
 80265b0:	2300      	movs	r3, #0
 80265b2:	4604      	mov	r4, r0
 80265b4:	4608      	mov	r0, r1
 80265b6:	602b      	str	r3, [r5, #0]
 80265b8:	f002 faca 	bl	8028b50 <_close>
 80265bc:	1c43      	adds	r3, r0, #1
 80265be:	d102      	bne.n	80265c6 <_close_r+0x1a>
 80265c0:	682b      	ldr	r3, [r5, #0]
 80265c2:	b103      	cbz	r3, 80265c6 <_close_r+0x1a>
 80265c4:	6023      	str	r3, [r4, #0]
 80265c6:	bd38      	pop	{r3, r4, r5, pc}
 80265c8:	2000a510 	.word	0x2000a510

080265cc <_lseek_r>:
 80265cc:	b538      	push	{r3, r4, r5, lr}
 80265ce:	4d07      	ldr	r5, [pc, #28]	; (80265ec <_lseek_r+0x20>)
 80265d0:	4604      	mov	r4, r0
 80265d2:	4608      	mov	r0, r1
 80265d4:	4611      	mov	r1, r2
 80265d6:	2200      	movs	r2, #0
 80265d8:	602a      	str	r2, [r5, #0]
 80265da:	461a      	mov	r2, r3
 80265dc:	f002 fae0 	bl	8028ba0 <_lseek>
 80265e0:	1c43      	adds	r3, r0, #1
 80265e2:	d102      	bne.n	80265ea <_lseek_r+0x1e>
 80265e4:	682b      	ldr	r3, [r5, #0]
 80265e6:	b103      	cbz	r3, 80265ea <_lseek_r+0x1e>
 80265e8:	6023      	str	r3, [r4, #0]
 80265ea:	bd38      	pop	{r3, r4, r5, pc}
 80265ec:	2000a510 	.word	0x2000a510

080265f0 <_read_r>:
 80265f0:	b538      	push	{r3, r4, r5, lr}
 80265f2:	4d07      	ldr	r5, [pc, #28]	; (8026610 <_read_r+0x20>)
 80265f4:	4604      	mov	r4, r0
 80265f6:	4608      	mov	r0, r1
 80265f8:	4611      	mov	r1, r2
 80265fa:	2200      	movs	r2, #0
 80265fc:	602a      	str	r2, [r5, #0]
 80265fe:	461a      	mov	r2, r3
 8026600:	f002 fad6 	bl	8028bb0 <_read>
 8026604:	1c43      	adds	r3, r0, #1
 8026606:	d102      	bne.n	802660e <_read_r+0x1e>
 8026608:	682b      	ldr	r3, [r5, #0]
 802660a:	b103      	cbz	r3, 802660e <_read_r+0x1e>
 802660c:	6023      	str	r3, [r4, #0]
 802660e:	bd38      	pop	{r3, r4, r5, pc}
 8026610:	2000a510 	.word	0x2000a510

08026614 <_sbrk_r>:
 8026614:	b538      	push	{r3, r4, r5, lr}
 8026616:	4d06      	ldr	r5, [pc, #24]	; (8026630 <_sbrk_r+0x1c>)
 8026618:	2300      	movs	r3, #0
 802661a:	4604      	mov	r4, r0
 802661c:	4608      	mov	r0, r1
 802661e:	602b      	str	r3, [r5, #0]
 8026620:	f002 face 	bl	8028bc0 <_sbrk>
 8026624:	1c43      	adds	r3, r0, #1
 8026626:	d102      	bne.n	802662e <_sbrk_r+0x1a>
 8026628:	682b      	ldr	r3, [r5, #0]
 802662a:	b103      	cbz	r3, 802662e <_sbrk_r+0x1a>
 802662c:	6023      	str	r3, [r4, #0]
 802662e:	bd38      	pop	{r3, r4, r5, pc}
 8026630:	2000a510 	.word	0x2000a510

08026634 <_write_r>:
 8026634:	b538      	push	{r3, r4, r5, lr}
 8026636:	4d07      	ldr	r5, [pc, #28]	; (8026654 <_write_r+0x20>)
 8026638:	4604      	mov	r4, r0
 802663a:	4608      	mov	r0, r1
 802663c:	4611      	mov	r1, r2
 802663e:	2200      	movs	r2, #0
 8026640:	602a      	str	r2, [r5, #0]
 8026642:	461a      	mov	r2, r3
 8026644:	f002 faca 	bl	8028bdc <_write>
 8026648:	1c43      	adds	r3, r0, #1
 802664a:	d102      	bne.n	8026652 <_write_r+0x1e>
 802664c:	682b      	ldr	r3, [r5, #0]
 802664e:	b103      	cbz	r3, 8026652 <_write_r+0x1e>
 8026650:	6023      	str	r3, [r4, #0]
 8026652:	bd38      	pop	{r3, r4, r5, pc}
 8026654:	2000a510 	.word	0x2000a510

08026658 <__libc_init_array>:
 8026658:	b570      	push	{r4, r5, r6, lr}
 802665a:	4d0d      	ldr	r5, [pc, #52]	; (8026690 <__libc_init_array+0x38>)
 802665c:	4c0d      	ldr	r4, [pc, #52]	; (8026694 <__libc_init_array+0x3c>)
 802665e:	1b64      	subs	r4, r4, r5
 8026660:	10a4      	asrs	r4, r4, #2
 8026662:	2600      	movs	r6, #0
 8026664:	42a6      	cmp	r6, r4
 8026666:	d109      	bne.n	802667c <__libc_init_array+0x24>
 8026668:	4d0b      	ldr	r5, [pc, #44]	; (8026698 <__libc_init_array+0x40>)
 802666a:	4c0c      	ldr	r4, [pc, #48]	; (802669c <__libc_init_array+0x44>)
 802666c:	f002 fac0 	bl	8028bf0 <_init>
 8026670:	1b64      	subs	r4, r4, r5
 8026672:	10a4      	asrs	r4, r4, #2
 8026674:	2600      	movs	r6, #0
 8026676:	42a6      	cmp	r6, r4
 8026678:	d105      	bne.n	8026686 <__libc_init_array+0x2e>
 802667a:	bd70      	pop	{r4, r5, r6, pc}
 802667c:	f855 3b04 	ldr.w	r3, [r5], #4
 8026680:	4798      	blx	r3
 8026682:	3601      	adds	r6, #1
 8026684:	e7ee      	b.n	8026664 <__libc_init_array+0xc>
 8026686:	f855 3b04 	ldr.w	r3, [r5], #4
 802668a:	4798      	blx	r3
 802668c:	3601      	adds	r6, #1
 802668e:	e7f2      	b.n	8026676 <__libc_init_array+0x1e>
 8026690:	0809d488 	.word	0x0809d488
 8026694:	0809d488 	.word	0x0809d488
 8026698:	0809d488 	.word	0x0809d488
 802669c:	0809d48c 	.word	0x0809d48c

080266a0 <__retarget_lock_init_recursive>:
 80266a0:	4770      	bx	lr

080266a2 <__retarget_lock_acquire_recursive>:
 80266a2:	4770      	bx	lr

080266a4 <__retarget_lock_release_recursive>:
 80266a4:	4770      	bx	lr

080266a6 <strcpy>:
 80266a6:	4603      	mov	r3, r0
 80266a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80266ac:	f803 2b01 	strb.w	r2, [r3], #1
 80266b0:	2a00      	cmp	r2, #0
 80266b2:	d1f9      	bne.n	80266a8 <strcpy+0x2>
 80266b4:	4770      	bx	lr

080266b6 <memcpy>:
 80266b6:	440a      	add	r2, r1
 80266b8:	4291      	cmp	r1, r2
 80266ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80266be:	d100      	bne.n	80266c2 <memcpy+0xc>
 80266c0:	4770      	bx	lr
 80266c2:	b510      	push	{r4, lr}
 80266c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80266c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80266cc:	4291      	cmp	r1, r2
 80266ce:	d1f9      	bne.n	80266c4 <memcpy+0xe>
 80266d0:	bd10      	pop	{r4, pc}

080266d2 <quorem>:
 80266d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80266d6:	6903      	ldr	r3, [r0, #16]
 80266d8:	690c      	ldr	r4, [r1, #16]
 80266da:	42a3      	cmp	r3, r4
 80266dc:	4607      	mov	r7, r0
 80266de:	db7e      	blt.n	80267de <quorem+0x10c>
 80266e0:	3c01      	subs	r4, #1
 80266e2:	f101 0814 	add.w	r8, r1, #20
 80266e6:	f100 0514 	add.w	r5, r0, #20
 80266ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80266ee:	9301      	str	r3, [sp, #4]
 80266f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80266f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80266f8:	3301      	adds	r3, #1
 80266fa:	429a      	cmp	r2, r3
 80266fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8026700:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8026704:	fbb2 f6f3 	udiv	r6, r2, r3
 8026708:	d331      	bcc.n	802676e <quorem+0x9c>
 802670a:	f04f 0e00 	mov.w	lr, #0
 802670e:	4640      	mov	r0, r8
 8026710:	46ac      	mov	ip, r5
 8026712:	46f2      	mov	sl, lr
 8026714:	f850 2b04 	ldr.w	r2, [r0], #4
 8026718:	b293      	uxth	r3, r2
 802671a:	fb06 e303 	mla	r3, r6, r3, lr
 802671e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8026722:	0c1a      	lsrs	r2, r3, #16
 8026724:	b29b      	uxth	r3, r3
 8026726:	ebaa 0303 	sub.w	r3, sl, r3
 802672a:	f8dc a000 	ldr.w	sl, [ip]
 802672e:	fa13 f38a 	uxtah	r3, r3, sl
 8026732:	fb06 220e 	mla	r2, r6, lr, r2
 8026736:	9300      	str	r3, [sp, #0]
 8026738:	9b00      	ldr	r3, [sp, #0]
 802673a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802673e:	b292      	uxth	r2, r2
 8026740:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8026744:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8026748:	f8bd 3000 	ldrh.w	r3, [sp]
 802674c:	4581      	cmp	r9, r0
 802674e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8026752:	f84c 3b04 	str.w	r3, [ip], #4
 8026756:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802675a:	d2db      	bcs.n	8026714 <quorem+0x42>
 802675c:	f855 300b 	ldr.w	r3, [r5, fp]
 8026760:	b92b      	cbnz	r3, 802676e <quorem+0x9c>
 8026762:	9b01      	ldr	r3, [sp, #4]
 8026764:	3b04      	subs	r3, #4
 8026766:	429d      	cmp	r5, r3
 8026768:	461a      	mov	r2, r3
 802676a:	d32c      	bcc.n	80267c6 <quorem+0xf4>
 802676c:	613c      	str	r4, [r7, #16]
 802676e:	4638      	mov	r0, r7
 8026770:	f001 f86e 	bl	8027850 <__mcmp>
 8026774:	2800      	cmp	r0, #0
 8026776:	db22      	blt.n	80267be <quorem+0xec>
 8026778:	3601      	adds	r6, #1
 802677a:	4629      	mov	r1, r5
 802677c:	2000      	movs	r0, #0
 802677e:	f858 2b04 	ldr.w	r2, [r8], #4
 8026782:	f8d1 c000 	ldr.w	ip, [r1]
 8026786:	b293      	uxth	r3, r2
 8026788:	1ac3      	subs	r3, r0, r3
 802678a:	0c12      	lsrs	r2, r2, #16
 802678c:	fa13 f38c 	uxtah	r3, r3, ip
 8026790:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8026794:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8026798:	b29b      	uxth	r3, r3
 802679a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802679e:	45c1      	cmp	r9, r8
 80267a0:	f841 3b04 	str.w	r3, [r1], #4
 80267a4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80267a8:	d2e9      	bcs.n	802677e <quorem+0xac>
 80267aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80267ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80267b2:	b922      	cbnz	r2, 80267be <quorem+0xec>
 80267b4:	3b04      	subs	r3, #4
 80267b6:	429d      	cmp	r5, r3
 80267b8:	461a      	mov	r2, r3
 80267ba:	d30a      	bcc.n	80267d2 <quorem+0x100>
 80267bc:	613c      	str	r4, [r7, #16]
 80267be:	4630      	mov	r0, r6
 80267c0:	b003      	add	sp, #12
 80267c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80267c6:	6812      	ldr	r2, [r2, #0]
 80267c8:	3b04      	subs	r3, #4
 80267ca:	2a00      	cmp	r2, #0
 80267cc:	d1ce      	bne.n	802676c <quorem+0x9a>
 80267ce:	3c01      	subs	r4, #1
 80267d0:	e7c9      	b.n	8026766 <quorem+0x94>
 80267d2:	6812      	ldr	r2, [r2, #0]
 80267d4:	3b04      	subs	r3, #4
 80267d6:	2a00      	cmp	r2, #0
 80267d8:	d1f0      	bne.n	80267bc <quorem+0xea>
 80267da:	3c01      	subs	r4, #1
 80267dc:	e7eb      	b.n	80267b6 <quorem+0xe4>
 80267de:	2000      	movs	r0, #0
 80267e0:	e7ee      	b.n	80267c0 <quorem+0xee>
 80267e2:	0000      	movs	r0, r0
 80267e4:	0000      	movs	r0, r0
	...

080267e8 <_dtoa_r>:
 80267e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80267ec:	ed2d 8b02 	vpush	{d8}
 80267f0:	69c5      	ldr	r5, [r0, #28]
 80267f2:	b091      	sub	sp, #68	; 0x44
 80267f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80267f8:	ec59 8b10 	vmov	r8, r9, d0
 80267fc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80267fe:	9106      	str	r1, [sp, #24]
 8026800:	4606      	mov	r6, r0
 8026802:	9208      	str	r2, [sp, #32]
 8026804:	930c      	str	r3, [sp, #48]	; 0x30
 8026806:	b975      	cbnz	r5, 8026826 <_dtoa_r+0x3e>
 8026808:	2010      	movs	r0, #16
 802680a:	f7ff f81f 	bl	802584c <malloc>
 802680e:	4602      	mov	r2, r0
 8026810:	61f0      	str	r0, [r6, #28]
 8026812:	b920      	cbnz	r0, 802681e <_dtoa_r+0x36>
 8026814:	4ba6      	ldr	r3, [pc, #664]	; (8026ab0 <_dtoa_r+0x2c8>)
 8026816:	21ef      	movs	r1, #239	; 0xef
 8026818:	48a6      	ldr	r0, [pc, #664]	; (8026ab4 <_dtoa_r+0x2cc>)
 802681a:	f001 fb27 	bl	8027e6c <__assert_func>
 802681e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8026822:	6005      	str	r5, [r0, #0]
 8026824:	60c5      	str	r5, [r0, #12]
 8026826:	69f3      	ldr	r3, [r6, #28]
 8026828:	6819      	ldr	r1, [r3, #0]
 802682a:	b151      	cbz	r1, 8026842 <_dtoa_r+0x5a>
 802682c:	685a      	ldr	r2, [r3, #4]
 802682e:	604a      	str	r2, [r1, #4]
 8026830:	2301      	movs	r3, #1
 8026832:	4093      	lsls	r3, r2
 8026834:	608b      	str	r3, [r1, #8]
 8026836:	4630      	mov	r0, r6
 8026838:	f000 fdce 	bl	80273d8 <_Bfree>
 802683c:	69f3      	ldr	r3, [r6, #28]
 802683e:	2200      	movs	r2, #0
 8026840:	601a      	str	r2, [r3, #0]
 8026842:	f1b9 0300 	subs.w	r3, r9, #0
 8026846:	bfbb      	ittet	lt
 8026848:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802684c:	9303      	strlt	r3, [sp, #12]
 802684e:	2300      	movge	r3, #0
 8026850:	2201      	movlt	r2, #1
 8026852:	bfac      	ite	ge
 8026854:	6023      	strge	r3, [r4, #0]
 8026856:	6022      	strlt	r2, [r4, #0]
 8026858:	4b97      	ldr	r3, [pc, #604]	; (8026ab8 <_dtoa_r+0x2d0>)
 802685a:	9c03      	ldr	r4, [sp, #12]
 802685c:	43a3      	bics	r3, r4
 802685e:	d11c      	bne.n	802689a <_dtoa_r+0xb2>
 8026860:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026862:	f242 730f 	movw	r3, #9999	; 0x270f
 8026866:	6013      	str	r3, [r2, #0]
 8026868:	f3c4 0313 	ubfx	r3, r4, #0, #20
 802686c:	ea53 0308 	orrs.w	r3, r3, r8
 8026870:	f000 84fb 	beq.w	802726a <_dtoa_r+0xa82>
 8026874:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026876:	b963      	cbnz	r3, 8026892 <_dtoa_r+0xaa>
 8026878:	4b90      	ldr	r3, [pc, #576]	; (8026abc <_dtoa_r+0x2d4>)
 802687a:	e020      	b.n	80268be <_dtoa_r+0xd6>
 802687c:	4b90      	ldr	r3, [pc, #576]	; (8026ac0 <_dtoa_r+0x2d8>)
 802687e:	9301      	str	r3, [sp, #4]
 8026880:	3308      	adds	r3, #8
 8026882:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8026884:	6013      	str	r3, [r2, #0]
 8026886:	9801      	ldr	r0, [sp, #4]
 8026888:	b011      	add	sp, #68	; 0x44
 802688a:	ecbd 8b02 	vpop	{d8}
 802688e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026892:	4b8a      	ldr	r3, [pc, #552]	; (8026abc <_dtoa_r+0x2d4>)
 8026894:	9301      	str	r3, [sp, #4]
 8026896:	3303      	adds	r3, #3
 8026898:	e7f3      	b.n	8026882 <_dtoa_r+0x9a>
 802689a:	ed9d 8b02 	vldr	d8, [sp, #8]
 802689e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80268a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80268a6:	d10c      	bne.n	80268c2 <_dtoa_r+0xda>
 80268a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80268aa:	2301      	movs	r3, #1
 80268ac:	6013      	str	r3, [r2, #0]
 80268ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80268b0:	2b00      	cmp	r3, #0
 80268b2:	f000 84d7 	beq.w	8027264 <_dtoa_r+0xa7c>
 80268b6:	4b83      	ldr	r3, [pc, #524]	; (8026ac4 <_dtoa_r+0x2dc>)
 80268b8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80268ba:	6013      	str	r3, [r2, #0]
 80268bc:	3b01      	subs	r3, #1
 80268be:	9301      	str	r3, [sp, #4]
 80268c0:	e7e1      	b.n	8026886 <_dtoa_r+0x9e>
 80268c2:	aa0e      	add	r2, sp, #56	; 0x38
 80268c4:	a90f      	add	r1, sp, #60	; 0x3c
 80268c6:	4630      	mov	r0, r6
 80268c8:	eeb0 0b48 	vmov.f64	d0, d8
 80268cc:	f001 f866 	bl	802799c <__d2b>
 80268d0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80268d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80268d6:	4605      	mov	r5, r0
 80268d8:	2b00      	cmp	r3, #0
 80268da:	d046      	beq.n	802696a <_dtoa_r+0x182>
 80268dc:	eeb0 7b48 	vmov.f64	d7, d8
 80268e0:	ee18 1a90 	vmov	r1, s17
 80268e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80268e8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80268ec:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80268f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80268f4:	2000      	movs	r0, #0
 80268f6:	ee07 1a90 	vmov	s15, r1
 80268fa:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80268fe:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8026a98 <_dtoa_r+0x2b0>
 8026902:	ee37 7b46 	vsub.f64	d7, d7, d6
 8026906:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8026aa0 <_dtoa_r+0x2b8>
 802690a:	eea7 6b05 	vfma.f64	d6, d7, d5
 802690e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8026aa8 <_dtoa_r+0x2c0>
 8026912:	ee07 3a90 	vmov	s15, r3
 8026916:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 802691a:	eeb0 7b46 	vmov.f64	d7, d6
 802691e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8026922:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8026926:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 802692a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802692e:	ee16 ba90 	vmov	fp, s13
 8026932:	9009      	str	r0, [sp, #36]	; 0x24
 8026934:	d508      	bpl.n	8026948 <_dtoa_r+0x160>
 8026936:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 802693a:	eeb4 6b47 	vcmp.f64	d6, d7
 802693e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026942:	bf18      	it	ne
 8026944:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8026948:	f1bb 0f16 	cmp.w	fp, #22
 802694c:	d82b      	bhi.n	80269a6 <_dtoa_r+0x1be>
 802694e:	495e      	ldr	r1, [pc, #376]	; (8026ac8 <_dtoa_r+0x2e0>)
 8026950:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8026954:	ed91 7b00 	vldr	d7, [r1]
 8026958:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802695c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026960:	d501      	bpl.n	8026966 <_dtoa_r+0x17e>
 8026962:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026966:	2100      	movs	r1, #0
 8026968:	e01e      	b.n	80269a8 <_dtoa_r+0x1c0>
 802696a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802696c:	4413      	add	r3, r2
 802696e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8026972:	2920      	cmp	r1, #32
 8026974:	bfc1      	itttt	gt
 8026976:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 802697a:	408c      	lslgt	r4, r1
 802697c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8026980:	fa28 f101 	lsrgt.w	r1, r8, r1
 8026984:	bfd6      	itet	le
 8026986:	f1c1 0120 	rsble	r1, r1, #32
 802698a:	4321      	orrgt	r1, r4
 802698c:	fa08 f101 	lslle.w	r1, r8, r1
 8026990:	ee07 1a90 	vmov	s15, r1
 8026994:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8026998:	3b01      	subs	r3, #1
 802699a:	ee17 1a90 	vmov	r1, s15
 802699e:	2001      	movs	r0, #1
 80269a0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80269a4:	e7a7      	b.n	80268f6 <_dtoa_r+0x10e>
 80269a6:	2101      	movs	r1, #1
 80269a8:	1ad2      	subs	r2, r2, r3
 80269aa:	1e53      	subs	r3, r2, #1
 80269ac:	9305      	str	r3, [sp, #20]
 80269ae:	bf45      	ittet	mi
 80269b0:	f1c2 0301 	rsbmi	r3, r2, #1
 80269b4:	9304      	strmi	r3, [sp, #16]
 80269b6:	2300      	movpl	r3, #0
 80269b8:	2300      	movmi	r3, #0
 80269ba:	bf4c      	ite	mi
 80269bc:	9305      	strmi	r3, [sp, #20]
 80269be:	9304      	strpl	r3, [sp, #16]
 80269c0:	f1bb 0f00 	cmp.w	fp, #0
 80269c4:	910b      	str	r1, [sp, #44]	; 0x2c
 80269c6:	db18      	blt.n	80269fa <_dtoa_r+0x212>
 80269c8:	9b05      	ldr	r3, [sp, #20]
 80269ca:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80269ce:	445b      	add	r3, fp
 80269d0:	9305      	str	r3, [sp, #20]
 80269d2:	2300      	movs	r3, #0
 80269d4:	9a06      	ldr	r2, [sp, #24]
 80269d6:	2a09      	cmp	r2, #9
 80269d8:	d848      	bhi.n	8026a6c <_dtoa_r+0x284>
 80269da:	2a05      	cmp	r2, #5
 80269dc:	bfc4      	itt	gt
 80269de:	3a04      	subgt	r2, #4
 80269e0:	9206      	strgt	r2, [sp, #24]
 80269e2:	9a06      	ldr	r2, [sp, #24]
 80269e4:	f1a2 0202 	sub.w	r2, r2, #2
 80269e8:	bfcc      	ite	gt
 80269ea:	2400      	movgt	r4, #0
 80269ec:	2401      	movle	r4, #1
 80269ee:	2a03      	cmp	r2, #3
 80269f0:	d847      	bhi.n	8026a82 <_dtoa_r+0x29a>
 80269f2:	e8df f002 	tbb	[pc, r2]
 80269f6:	2d0b      	.short	0x2d0b
 80269f8:	392b      	.short	0x392b
 80269fa:	9b04      	ldr	r3, [sp, #16]
 80269fc:	2200      	movs	r2, #0
 80269fe:	eba3 030b 	sub.w	r3, r3, fp
 8026a02:	9304      	str	r3, [sp, #16]
 8026a04:	920a      	str	r2, [sp, #40]	; 0x28
 8026a06:	f1cb 0300 	rsb	r3, fp, #0
 8026a0a:	e7e3      	b.n	80269d4 <_dtoa_r+0x1ec>
 8026a0c:	2200      	movs	r2, #0
 8026a0e:	9207      	str	r2, [sp, #28]
 8026a10:	9a08      	ldr	r2, [sp, #32]
 8026a12:	2a00      	cmp	r2, #0
 8026a14:	dc38      	bgt.n	8026a88 <_dtoa_r+0x2a0>
 8026a16:	f04f 0a01 	mov.w	sl, #1
 8026a1a:	46d1      	mov	r9, sl
 8026a1c:	4652      	mov	r2, sl
 8026a1e:	f8cd a020 	str.w	sl, [sp, #32]
 8026a22:	69f7      	ldr	r7, [r6, #28]
 8026a24:	2100      	movs	r1, #0
 8026a26:	2004      	movs	r0, #4
 8026a28:	f100 0c14 	add.w	ip, r0, #20
 8026a2c:	4594      	cmp	ip, r2
 8026a2e:	d930      	bls.n	8026a92 <_dtoa_r+0x2aa>
 8026a30:	6079      	str	r1, [r7, #4]
 8026a32:	4630      	mov	r0, r6
 8026a34:	930d      	str	r3, [sp, #52]	; 0x34
 8026a36:	f000 fc8f 	bl	8027358 <_Balloc>
 8026a3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026a3c:	9001      	str	r0, [sp, #4]
 8026a3e:	4602      	mov	r2, r0
 8026a40:	2800      	cmp	r0, #0
 8026a42:	d145      	bne.n	8026ad0 <_dtoa_r+0x2e8>
 8026a44:	4b21      	ldr	r3, [pc, #132]	; (8026acc <_dtoa_r+0x2e4>)
 8026a46:	f240 11af 	movw	r1, #431	; 0x1af
 8026a4a:	e6e5      	b.n	8026818 <_dtoa_r+0x30>
 8026a4c:	2201      	movs	r2, #1
 8026a4e:	e7de      	b.n	8026a0e <_dtoa_r+0x226>
 8026a50:	2200      	movs	r2, #0
 8026a52:	9207      	str	r2, [sp, #28]
 8026a54:	9a08      	ldr	r2, [sp, #32]
 8026a56:	eb0b 0a02 	add.w	sl, fp, r2
 8026a5a:	f10a 0901 	add.w	r9, sl, #1
 8026a5e:	464a      	mov	r2, r9
 8026a60:	2a01      	cmp	r2, #1
 8026a62:	bfb8      	it	lt
 8026a64:	2201      	movlt	r2, #1
 8026a66:	e7dc      	b.n	8026a22 <_dtoa_r+0x23a>
 8026a68:	2201      	movs	r2, #1
 8026a6a:	e7f2      	b.n	8026a52 <_dtoa_r+0x26a>
 8026a6c:	2401      	movs	r4, #1
 8026a6e:	2200      	movs	r2, #0
 8026a70:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8026a74:	f04f 3aff 	mov.w	sl, #4294967295
 8026a78:	2100      	movs	r1, #0
 8026a7a:	46d1      	mov	r9, sl
 8026a7c:	2212      	movs	r2, #18
 8026a7e:	9108      	str	r1, [sp, #32]
 8026a80:	e7cf      	b.n	8026a22 <_dtoa_r+0x23a>
 8026a82:	2201      	movs	r2, #1
 8026a84:	9207      	str	r2, [sp, #28]
 8026a86:	e7f5      	b.n	8026a74 <_dtoa_r+0x28c>
 8026a88:	f8dd a020 	ldr.w	sl, [sp, #32]
 8026a8c:	46d1      	mov	r9, sl
 8026a8e:	4652      	mov	r2, sl
 8026a90:	e7c7      	b.n	8026a22 <_dtoa_r+0x23a>
 8026a92:	3101      	adds	r1, #1
 8026a94:	0040      	lsls	r0, r0, #1
 8026a96:	e7c7      	b.n	8026a28 <_dtoa_r+0x240>
 8026a98:	636f4361 	.word	0x636f4361
 8026a9c:	3fd287a7 	.word	0x3fd287a7
 8026aa0:	8b60c8b3 	.word	0x8b60c8b3
 8026aa4:	3fc68a28 	.word	0x3fc68a28
 8026aa8:	509f79fb 	.word	0x509f79fb
 8026aac:	3fd34413 	.word	0x3fd34413
 8026ab0:	0809c74e 	.word	0x0809c74e
 8026ab4:	0809c765 	.word	0x0809c765
 8026ab8:	7ff00000 	.word	0x7ff00000
 8026abc:	0809c74a 	.word	0x0809c74a
 8026ac0:	0809c741 	.word	0x0809c741
 8026ac4:	0809c71e 	.word	0x0809c71e
 8026ac8:	0809c850 	.word	0x0809c850
 8026acc:	0809c7bd 	.word	0x0809c7bd
 8026ad0:	69f2      	ldr	r2, [r6, #28]
 8026ad2:	9901      	ldr	r1, [sp, #4]
 8026ad4:	6011      	str	r1, [r2, #0]
 8026ad6:	f1b9 0f0e 	cmp.w	r9, #14
 8026ada:	d86c      	bhi.n	8026bb6 <_dtoa_r+0x3ce>
 8026adc:	2c00      	cmp	r4, #0
 8026ade:	d06a      	beq.n	8026bb6 <_dtoa_r+0x3ce>
 8026ae0:	f1bb 0f00 	cmp.w	fp, #0
 8026ae4:	f340 80a0 	ble.w	8026c28 <_dtoa_r+0x440>
 8026ae8:	4ac1      	ldr	r2, [pc, #772]	; (8026df0 <_dtoa_r+0x608>)
 8026aea:	f00b 010f 	and.w	r1, fp, #15
 8026aee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8026af2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8026af6:	ed92 7b00 	vldr	d7, [r2]
 8026afa:	ea4f 122b 	mov.w	r2, fp, asr #4
 8026afe:	f000 8087 	beq.w	8026c10 <_dtoa_r+0x428>
 8026b02:	49bc      	ldr	r1, [pc, #752]	; (8026df4 <_dtoa_r+0x60c>)
 8026b04:	ed91 6b08 	vldr	d6, [r1, #32]
 8026b08:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8026b0c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8026b10:	f002 020f 	and.w	r2, r2, #15
 8026b14:	2103      	movs	r1, #3
 8026b16:	48b7      	ldr	r0, [pc, #732]	; (8026df4 <_dtoa_r+0x60c>)
 8026b18:	2a00      	cmp	r2, #0
 8026b1a:	d17b      	bne.n	8026c14 <_dtoa_r+0x42c>
 8026b1c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8026b20:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8026b24:	ed8d 7b02 	vstr	d7, [sp, #8]
 8026b28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026b2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8026b2e:	2a00      	cmp	r2, #0
 8026b30:	f000 80a0 	beq.w	8026c74 <_dtoa_r+0x48c>
 8026b34:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8026b38:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8026b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026b40:	f140 8098 	bpl.w	8026c74 <_dtoa_r+0x48c>
 8026b44:	f1b9 0f00 	cmp.w	r9, #0
 8026b48:	f000 8094 	beq.w	8026c74 <_dtoa_r+0x48c>
 8026b4c:	f1ba 0f00 	cmp.w	sl, #0
 8026b50:	dd2f      	ble.n	8026bb2 <_dtoa_r+0x3ca>
 8026b52:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8026b56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026b5a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8026b5e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8026b62:	3101      	adds	r1, #1
 8026b64:	4654      	mov	r4, sl
 8026b66:	ed9d 6b02 	vldr	d6, [sp, #8]
 8026b6a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8026b6e:	ee07 1a90 	vmov	s15, r1
 8026b72:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8026b76:	eea7 5b06 	vfma.f64	d5, d7, d6
 8026b7a:	ee15 7a90 	vmov	r7, s11
 8026b7e:	ec51 0b15 	vmov	r0, r1, d5
 8026b82:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8026b86:	2c00      	cmp	r4, #0
 8026b88:	d177      	bne.n	8026c7a <_dtoa_r+0x492>
 8026b8a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8026b8e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8026b92:	ec41 0b17 	vmov	d7, r0, r1
 8026b96:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026b9e:	f300 826a 	bgt.w	8027076 <_dtoa_r+0x88e>
 8026ba2:	eeb1 7b47 	vneg.f64	d7, d7
 8026ba6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026bae:	f100 8260 	bmi.w	8027072 <_dtoa_r+0x88a>
 8026bb2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8026bb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026bb8:	2a00      	cmp	r2, #0
 8026bba:	f2c0 811d 	blt.w	8026df8 <_dtoa_r+0x610>
 8026bbe:	f1bb 0f0e 	cmp.w	fp, #14
 8026bc2:	f300 8119 	bgt.w	8026df8 <_dtoa_r+0x610>
 8026bc6:	4b8a      	ldr	r3, [pc, #552]	; (8026df0 <_dtoa_r+0x608>)
 8026bc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8026bcc:	ed93 6b00 	vldr	d6, [r3]
 8026bd0:	9b08      	ldr	r3, [sp, #32]
 8026bd2:	2b00      	cmp	r3, #0
 8026bd4:	f280 80b7 	bge.w	8026d46 <_dtoa_r+0x55e>
 8026bd8:	f1b9 0f00 	cmp.w	r9, #0
 8026bdc:	f300 80b3 	bgt.w	8026d46 <_dtoa_r+0x55e>
 8026be0:	f040 8246 	bne.w	8027070 <_dtoa_r+0x888>
 8026be4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8026be8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8026bec:	ed9d 7b02 	vldr	d7, [sp, #8]
 8026bf0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026bf8:	464c      	mov	r4, r9
 8026bfa:	464f      	mov	r7, r9
 8026bfc:	f280 821c 	bge.w	8027038 <_dtoa_r+0x850>
 8026c00:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8026c04:	2331      	movs	r3, #49	; 0x31
 8026c06:	f808 3b01 	strb.w	r3, [r8], #1
 8026c0a:	f10b 0b01 	add.w	fp, fp, #1
 8026c0e:	e218      	b.n	8027042 <_dtoa_r+0x85a>
 8026c10:	2102      	movs	r1, #2
 8026c12:	e780      	b.n	8026b16 <_dtoa_r+0x32e>
 8026c14:	07d4      	lsls	r4, r2, #31
 8026c16:	d504      	bpl.n	8026c22 <_dtoa_r+0x43a>
 8026c18:	ed90 6b00 	vldr	d6, [r0]
 8026c1c:	3101      	adds	r1, #1
 8026c1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026c22:	1052      	asrs	r2, r2, #1
 8026c24:	3008      	adds	r0, #8
 8026c26:	e777      	b.n	8026b18 <_dtoa_r+0x330>
 8026c28:	d022      	beq.n	8026c70 <_dtoa_r+0x488>
 8026c2a:	f1cb 0200 	rsb	r2, fp, #0
 8026c2e:	4970      	ldr	r1, [pc, #448]	; (8026df0 <_dtoa_r+0x608>)
 8026c30:	f002 000f 	and.w	r0, r2, #15
 8026c34:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8026c38:	ed91 7b00 	vldr	d7, [r1]
 8026c3c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8026c40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8026c44:	486b      	ldr	r0, [pc, #428]	; (8026df4 <_dtoa_r+0x60c>)
 8026c46:	1112      	asrs	r2, r2, #4
 8026c48:	2400      	movs	r4, #0
 8026c4a:	2102      	movs	r1, #2
 8026c4c:	b92a      	cbnz	r2, 8026c5a <_dtoa_r+0x472>
 8026c4e:	2c00      	cmp	r4, #0
 8026c50:	f43f af6a 	beq.w	8026b28 <_dtoa_r+0x340>
 8026c54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8026c58:	e766      	b.n	8026b28 <_dtoa_r+0x340>
 8026c5a:	07d7      	lsls	r7, r2, #31
 8026c5c:	d505      	bpl.n	8026c6a <_dtoa_r+0x482>
 8026c5e:	ed90 6b00 	vldr	d6, [r0]
 8026c62:	3101      	adds	r1, #1
 8026c64:	2401      	movs	r4, #1
 8026c66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026c6a:	1052      	asrs	r2, r2, #1
 8026c6c:	3008      	adds	r0, #8
 8026c6e:	e7ed      	b.n	8026c4c <_dtoa_r+0x464>
 8026c70:	2102      	movs	r1, #2
 8026c72:	e759      	b.n	8026b28 <_dtoa_r+0x340>
 8026c74:	465a      	mov	r2, fp
 8026c76:	464c      	mov	r4, r9
 8026c78:	e775      	b.n	8026b66 <_dtoa_r+0x37e>
 8026c7a:	ec41 0b17 	vmov	d7, r0, r1
 8026c7e:	495c      	ldr	r1, [pc, #368]	; (8026df0 <_dtoa_r+0x608>)
 8026c80:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8026c84:	ed11 4b02 	vldr	d4, [r1, #-8]
 8026c88:	9901      	ldr	r1, [sp, #4]
 8026c8a:	440c      	add	r4, r1
 8026c8c:	9907      	ldr	r1, [sp, #28]
 8026c8e:	b351      	cbz	r1, 8026ce6 <_dtoa_r+0x4fe>
 8026c90:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8026c94:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8026c98:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8026c9c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8026ca0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8026ca4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8026ca8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8026cac:	ee14 1a90 	vmov	r1, s9
 8026cb0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8026cb4:	3130      	adds	r1, #48	; 0x30
 8026cb6:	ee36 6b45 	vsub.f64	d6, d6, d5
 8026cba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026cc2:	f808 1b01 	strb.w	r1, [r8], #1
 8026cc6:	d439      	bmi.n	8026d3c <_dtoa_r+0x554>
 8026cc8:	ee32 5b46 	vsub.f64	d5, d2, d6
 8026ccc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8026cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026cd4:	d472      	bmi.n	8026dbc <_dtoa_r+0x5d4>
 8026cd6:	45a0      	cmp	r8, r4
 8026cd8:	f43f af6b 	beq.w	8026bb2 <_dtoa_r+0x3ca>
 8026cdc:	ee27 7b03 	vmul.f64	d7, d7, d3
 8026ce0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8026ce4:	e7e0      	b.n	8026ca8 <_dtoa_r+0x4c0>
 8026ce6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8026cea:	ee27 7b04 	vmul.f64	d7, d7, d4
 8026cee:	4620      	mov	r0, r4
 8026cf0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8026cf4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8026cf8:	ee14 1a90 	vmov	r1, s9
 8026cfc:	3130      	adds	r1, #48	; 0x30
 8026cfe:	f808 1b01 	strb.w	r1, [r8], #1
 8026d02:	45a0      	cmp	r8, r4
 8026d04:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8026d08:	ee36 6b45 	vsub.f64	d6, d6, d5
 8026d0c:	d118      	bne.n	8026d40 <_dtoa_r+0x558>
 8026d0e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8026d12:	ee37 4b05 	vadd.f64	d4, d7, d5
 8026d16:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8026d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026d1e:	dc4d      	bgt.n	8026dbc <_dtoa_r+0x5d4>
 8026d20:	ee35 5b47 	vsub.f64	d5, d5, d7
 8026d24:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8026d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026d2c:	f57f af41 	bpl.w	8026bb2 <_dtoa_r+0x3ca>
 8026d30:	4680      	mov	r8, r0
 8026d32:	3801      	subs	r0, #1
 8026d34:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8026d38:	2b30      	cmp	r3, #48	; 0x30
 8026d3a:	d0f9      	beq.n	8026d30 <_dtoa_r+0x548>
 8026d3c:	4693      	mov	fp, r2
 8026d3e:	e02a      	b.n	8026d96 <_dtoa_r+0x5ae>
 8026d40:	ee26 6b03 	vmul.f64	d6, d6, d3
 8026d44:	e7d6      	b.n	8026cf4 <_dtoa_r+0x50c>
 8026d46:	ed9d 7b02 	vldr	d7, [sp, #8]
 8026d4a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8026d4e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8026d52:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8026d56:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8026d5a:	ee15 3a10 	vmov	r3, s10
 8026d5e:	3330      	adds	r3, #48	; 0x30
 8026d60:	f808 3b01 	strb.w	r3, [r8], #1
 8026d64:	9b01      	ldr	r3, [sp, #4]
 8026d66:	eba8 0303 	sub.w	r3, r8, r3
 8026d6a:	4599      	cmp	r9, r3
 8026d6c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8026d70:	eea3 7b46 	vfms.f64	d7, d3, d6
 8026d74:	d133      	bne.n	8026dde <_dtoa_r+0x5f6>
 8026d76:	ee37 7b07 	vadd.f64	d7, d7, d7
 8026d7a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8026d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026d82:	dc1a      	bgt.n	8026dba <_dtoa_r+0x5d2>
 8026d84:	eeb4 7b46 	vcmp.f64	d7, d6
 8026d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026d8c:	d103      	bne.n	8026d96 <_dtoa_r+0x5ae>
 8026d8e:	ee15 3a10 	vmov	r3, s10
 8026d92:	07d9      	lsls	r1, r3, #31
 8026d94:	d411      	bmi.n	8026dba <_dtoa_r+0x5d2>
 8026d96:	4629      	mov	r1, r5
 8026d98:	4630      	mov	r0, r6
 8026d9a:	f000 fb1d 	bl	80273d8 <_Bfree>
 8026d9e:	2300      	movs	r3, #0
 8026da0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026da2:	f888 3000 	strb.w	r3, [r8]
 8026da6:	f10b 0301 	add.w	r3, fp, #1
 8026daa:	6013      	str	r3, [r2, #0]
 8026dac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026dae:	2b00      	cmp	r3, #0
 8026db0:	f43f ad69 	beq.w	8026886 <_dtoa_r+0x9e>
 8026db4:	f8c3 8000 	str.w	r8, [r3]
 8026db8:	e565      	b.n	8026886 <_dtoa_r+0x9e>
 8026dba:	465a      	mov	r2, fp
 8026dbc:	4643      	mov	r3, r8
 8026dbe:	4698      	mov	r8, r3
 8026dc0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8026dc4:	2939      	cmp	r1, #57	; 0x39
 8026dc6:	d106      	bne.n	8026dd6 <_dtoa_r+0x5ee>
 8026dc8:	9901      	ldr	r1, [sp, #4]
 8026dca:	4299      	cmp	r1, r3
 8026dcc:	d1f7      	bne.n	8026dbe <_dtoa_r+0x5d6>
 8026dce:	9801      	ldr	r0, [sp, #4]
 8026dd0:	2130      	movs	r1, #48	; 0x30
 8026dd2:	3201      	adds	r2, #1
 8026dd4:	7001      	strb	r1, [r0, #0]
 8026dd6:	7819      	ldrb	r1, [r3, #0]
 8026dd8:	3101      	adds	r1, #1
 8026dda:	7019      	strb	r1, [r3, #0]
 8026ddc:	e7ae      	b.n	8026d3c <_dtoa_r+0x554>
 8026dde:	ee27 7b04 	vmul.f64	d7, d7, d4
 8026de2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8026de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026dea:	d1b2      	bne.n	8026d52 <_dtoa_r+0x56a>
 8026dec:	e7d3      	b.n	8026d96 <_dtoa_r+0x5ae>
 8026dee:	bf00      	nop
 8026df0:	0809c850 	.word	0x0809c850
 8026df4:	0809c828 	.word	0x0809c828
 8026df8:	9907      	ldr	r1, [sp, #28]
 8026dfa:	2900      	cmp	r1, #0
 8026dfc:	f000 80d0 	beq.w	8026fa0 <_dtoa_r+0x7b8>
 8026e00:	9906      	ldr	r1, [sp, #24]
 8026e02:	2901      	cmp	r1, #1
 8026e04:	f300 80b4 	bgt.w	8026f70 <_dtoa_r+0x788>
 8026e08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8026e0a:	2900      	cmp	r1, #0
 8026e0c:	f000 80ac 	beq.w	8026f68 <_dtoa_r+0x780>
 8026e10:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8026e14:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8026e18:	461c      	mov	r4, r3
 8026e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8026e1c:	9b04      	ldr	r3, [sp, #16]
 8026e1e:	4413      	add	r3, r2
 8026e20:	9304      	str	r3, [sp, #16]
 8026e22:	9b05      	ldr	r3, [sp, #20]
 8026e24:	2101      	movs	r1, #1
 8026e26:	4413      	add	r3, r2
 8026e28:	4630      	mov	r0, r6
 8026e2a:	9305      	str	r3, [sp, #20]
 8026e2c:	f000 fb8a 	bl	8027544 <__i2b>
 8026e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026e32:	4607      	mov	r7, r0
 8026e34:	f1b8 0f00 	cmp.w	r8, #0
 8026e38:	d00d      	beq.n	8026e56 <_dtoa_r+0x66e>
 8026e3a:	9a05      	ldr	r2, [sp, #20]
 8026e3c:	2a00      	cmp	r2, #0
 8026e3e:	dd0a      	ble.n	8026e56 <_dtoa_r+0x66e>
 8026e40:	4542      	cmp	r2, r8
 8026e42:	9904      	ldr	r1, [sp, #16]
 8026e44:	bfa8      	it	ge
 8026e46:	4642      	movge	r2, r8
 8026e48:	1a89      	subs	r1, r1, r2
 8026e4a:	9104      	str	r1, [sp, #16]
 8026e4c:	9905      	ldr	r1, [sp, #20]
 8026e4e:	eba8 0802 	sub.w	r8, r8, r2
 8026e52:	1a8a      	subs	r2, r1, r2
 8026e54:	9205      	str	r2, [sp, #20]
 8026e56:	b303      	cbz	r3, 8026e9a <_dtoa_r+0x6b2>
 8026e58:	9a07      	ldr	r2, [sp, #28]
 8026e5a:	2a00      	cmp	r2, #0
 8026e5c:	f000 80a5 	beq.w	8026faa <_dtoa_r+0x7c2>
 8026e60:	2c00      	cmp	r4, #0
 8026e62:	dd13      	ble.n	8026e8c <_dtoa_r+0x6a4>
 8026e64:	4639      	mov	r1, r7
 8026e66:	4622      	mov	r2, r4
 8026e68:	4630      	mov	r0, r6
 8026e6a:	930d      	str	r3, [sp, #52]	; 0x34
 8026e6c:	f000 fc2a 	bl	80276c4 <__pow5mult>
 8026e70:	462a      	mov	r2, r5
 8026e72:	4601      	mov	r1, r0
 8026e74:	4607      	mov	r7, r0
 8026e76:	4630      	mov	r0, r6
 8026e78:	f000 fb7a 	bl	8027570 <__multiply>
 8026e7c:	4629      	mov	r1, r5
 8026e7e:	9009      	str	r0, [sp, #36]	; 0x24
 8026e80:	4630      	mov	r0, r6
 8026e82:	f000 faa9 	bl	80273d8 <_Bfree>
 8026e86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026e88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026e8a:	4615      	mov	r5, r2
 8026e8c:	1b1a      	subs	r2, r3, r4
 8026e8e:	d004      	beq.n	8026e9a <_dtoa_r+0x6b2>
 8026e90:	4629      	mov	r1, r5
 8026e92:	4630      	mov	r0, r6
 8026e94:	f000 fc16 	bl	80276c4 <__pow5mult>
 8026e98:	4605      	mov	r5, r0
 8026e9a:	2101      	movs	r1, #1
 8026e9c:	4630      	mov	r0, r6
 8026e9e:	f000 fb51 	bl	8027544 <__i2b>
 8026ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026ea4:	2b00      	cmp	r3, #0
 8026ea6:	4604      	mov	r4, r0
 8026ea8:	f340 8081 	ble.w	8026fae <_dtoa_r+0x7c6>
 8026eac:	461a      	mov	r2, r3
 8026eae:	4601      	mov	r1, r0
 8026eb0:	4630      	mov	r0, r6
 8026eb2:	f000 fc07 	bl	80276c4 <__pow5mult>
 8026eb6:	9b06      	ldr	r3, [sp, #24]
 8026eb8:	2b01      	cmp	r3, #1
 8026eba:	4604      	mov	r4, r0
 8026ebc:	dd7a      	ble.n	8026fb4 <_dtoa_r+0x7cc>
 8026ebe:	2300      	movs	r3, #0
 8026ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8026ec2:	6922      	ldr	r2, [r4, #16]
 8026ec4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8026ec8:	6910      	ldr	r0, [r2, #16]
 8026eca:	f000 faed 	bl	80274a8 <__hi0bits>
 8026ece:	f1c0 0020 	rsb	r0, r0, #32
 8026ed2:	9b05      	ldr	r3, [sp, #20]
 8026ed4:	4418      	add	r0, r3
 8026ed6:	f010 001f 	ands.w	r0, r0, #31
 8026eda:	f000 8093 	beq.w	8027004 <_dtoa_r+0x81c>
 8026ede:	f1c0 0220 	rsb	r2, r0, #32
 8026ee2:	2a04      	cmp	r2, #4
 8026ee4:	f340 8085 	ble.w	8026ff2 <_dtoa_r+0x80a>
 8026ee8:	9b04      	ldr	r3, [sp, #16]
 8026eea:	f1c0 001c 	rsb	r0, r0, #28
 8026eee:	4403      	add	r3, r0
 8026ef0:	9304      	str	r3, [sp, #16]
 8026ef2:	9b05      	ldr	r3, [sp, #20]
 8026ef4:	4480      	add	r8, r0
 8026ef6:	4403      	add	r3, r0
 8026ef8:	9305      	str	r3, [sp, #20]
 8026efa:	9b04      	ldr	r3, [sp, #16]
 8026efc:	2b00      	cmp	r3, #0
 8026efe:	dd05      	ble.n	8026f0c <_dtoa_r+0x724>
 8026f00:	4629      	mov	r1, r5
 8026f02:	461a      	mov	r2, r3
 8026f04:	4630      	mov	r0, r6
 8026f06:	f000 fc37 	bl	8027778 <__lshift>
 8026f0a:	4605      	mov	r5, r0
 8026f0c:	9b05      	ldr	r3, [sp, #20]
 8026f0e:	2b00      	cmp	r3, #0
 8026f10:	dd05      	ble.n	8026f1e <_dtoa_r+0x736>
 8026f12:	4621      	mov	r1, r4
 8026f14:	461a      	mov	r2, r3
 8026f16:	4630      	mov	r0, r6
 8026f18:	f000 fc2e 	bl	8027778 <__lshift>
 8026f1c:	4604      	mov	r4, r0
 8026f1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026f20:	2b00      	cmp	r3, #0
 8026f22:	d071      	beq.n	8027008 <_dtoa_r+0x820>
 8026f24:	4621      	mov	r1, r4
 8026f26:	4628      	mov	r0, r5
 8026f28:	f000 fc92 	bl	8027850 <__mcmp>
 8026f2c:	2800      	cmp	r0, #0
 8026f2e:	da6b      	bge.n	8027008 <_dtoa_r+0x820>
 8026f30:	2300      	movs	r3, #0
 8026f32:	4629      	mov	r1, r5
 8026f34:	220a      	movs	r2, #10
 8026f36:	4630      	mov	r0, r6
 8026f38:	f000 fa70 	bl	802741c <__multadd>
 8026f3c:	9b07      	ldr	r3, [sp, #28]
 8026f3e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026f42:	4605      	mov	r5, r0
 8026f44:	2b00      	cmp	r3, #0
 8026f46:	f000 8197 	beq.w	8027278 <_dtoa_r+0xa90>
 8026f4a:	4639      	mov	r1, r7
 8026f4c:	2300      	movs	r3, #0
 8026f4e:	220a      	movs	r2, #10
 8026f50:	4630      	mov	r0, r6
 8026f52:	f000 fa63 	bl	802741c <__multadd>
 8026f56:	f1ba 0f00 	cmp.w	sl, #0
 8026f5a:	4607      	mov	r7, r0
 8026f5c:	f300 8093 	bgt.w	8027086 <_dtoa_r+0x89e>
 8026f60:	9b06      	ldr	r3, [sp, #24]
 8026f62:	2b02      	cmp	r3, #2
 8026f64:	dc57      	bgt.n	8027016 <_dtoa_r+0x82e>
 8026f66:	e08e      	b.n	8027086 <_dtoa_r+0x89e>
 8026f68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026f6a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8026f6e:	e751      	b.n	8026e14 <_dtoa_r+0x62c>
 8026f70:	f109 34ff 	add.w	r4, r9, #4294967295
 8026f74:	42a3      	cmp	r3, r4
 8026f76:	bfbf      	itttt	lt
 8026f78:	1ae2      	sublt	r2, r4, r3
 8026f7a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8026f7c:	189b      	addlt	r3, r3, r2
 8026f7e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8026f80:	bfae      	itee	ge
 8026f82:	1b1c      	subge	r4, r3, r4
 8026f84:	4623      	movlt	r3, r4
 8026f86:	2400      	movlt	r4, #0
 8026f88:	f1b9 0f00 	cmp.w	r9, #0
 8026f8c:	bfb5      	itete	lt
 8026f8e:	9a04      	ldrlt	r2, [sp, #16]
 8026f90:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8026f94:	eba2 0809 	sublt.w	r8, r2, r9
 8026f98:	464a      	movge	r2, r9
 8026f9a:	bfb8      	it	lt
 8026f9c:	2200      	movlt	r2, #0
 8026f9e:	e73c      	b.n	8026e1a <_dtoa_r+0x632>
 8026fa0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8026fa4:	9f07      	ldr	r7, [sp, #28]
 8026fa6:	461c      	mov	r4, r3
 8026fa8:	e744      	b.n	8026e34 <_dtoa_r+0x64c>
 8026faa:	461a      	mov	r2, r3
 8026fac:	e770      	b.n	8026e90 <_dtoa_r+0x6a8>
 8026fae:	9b06      	ldr	r3, [sp, #24]
 8026fb0:	2b01      	cmp	r3, #1
 8026fb2:	dc18      	bgt.n	8026fe6 <_dtoa_r+0x7fe>
 8026fb4:	9b02      	ldr	r3, [sp, #8]
 8026fb6:	b9b3      	cbnz	r3, 8026fe6 <_dtoa_r+0x7fe>
 8026fb8:	9b03      	ldr	r3, [sp, #12]
 8026fba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8026fbe:	b9a2      	cbnz	r2, 8026fea <_dtoa_r+0x802>
 8026fc0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8026fc4:	0d12      	lsrs	r2, r2, #20
 8026fc6:	0512      	lsls	r2, r2, #20
 8026fc8:	b18a      	cbz	r2, 8026fee <_dtoa_r+0x806>
 8026fca:	9b04      	ldr	r3, [sp, #16]
 8026fcc:	3301      	adds	r3, #1
 8026fce:	9304      	str	r3, [sp, #16]
 8026fd0:	9b05      	ldr	r3, [sp, #20]
 8026fd2:	3301      	adds	r3, #1
 8026fd4:	9305      	str	r3, [sp, #20]
 8026fd6:	2301      	movs	r3, #1
 8026fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8026fda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026fdc:	2b00      	cmp	r3, #0
 8026fde:	f47f af70 	bne.w	8026ec2 <_dtoa_r+0x6da>
 8026fe2:	2001      	movs	r0, #1
 8026fe4:	e775      	b.n	8026ed2 <_dtoa_r+0x6ea>
 8026fe6:	2300      	movs	r3, #0
 8026fe8:	e7f6      	b.n	8026fd8 <_dtoa_r+0x7f0>
 8026fea:	9b02      	ldr	r3, [sp, #8]
 8026fec:	e7f4      	b.n	8026fd8 <_dtoa_r+0x7f0>
 8026fee:	9209      	str	r2, [sp, #36]	; 0x24
 8026ff0:	e7f3      	b.n	8026fda <_dtoa_r+0x7f2>
 8026ff2:	d082      	beq.n	8026efa <_dtoa_r+0x712>
 8026ff4:	9b04      	ldr	r3, [sp, #16]
 8026ff6:	321c      	adds	r2, #28
 8026ff8:	4413      	add	r3, r2
 8026ffa:	9304      	str	r3, [sp, #16]
 8026ffc:	9b05      	ldr	r3, [sp, #20]
 8026ffe:	4490      	add	r8, r2
 8027000:	4413      	add	r3, r2
 8027002:	e779      	b.n	8026ef8 <_dtoa_r+0x710>
 8027004:	4602      	mov	r2, r0
 8027006:	e7f5      	b.n	8026ff4 <_dtoa_r+0x80c>
 8027008:	f1b9 0f00 	cmp.w	r9, #0
 802700c:	dc36      	bgt.n	802707c <_dtoa_r+0x894>
 802700e:	9b06      	ldr	r3, [sp, #24]
 8027010:	2b02      	cmp	r3, #2
 8027012:	dd33      	ble.n	802707c <_dtoa_r+0x894>
 8027014:	46ca      	mov	sl, r9
 8027016:	f1ba 0f00 	cmp.w	sl, #0
 802701a:	d10d      	bne.n	8027038 <_dtoa_r+0x850>
 802701c:	4621      	mov	r1, r4
 802701e:	4653      	mov	r3, sl
 8027020:	2205      	movs	r2, #5
 8027022:	4630      	mov	r0, r6
 8027024:	f000 f9fa 	bl	802741c <__multadd>
 8027028:	4601      	mov	r1, r0
 802702a:	4604      	mov	r4, r0
 802702c:	4628      	mov	r0, r5
 802702e:	f000 fc0f 	bl	8027850 <__mcmp>
 8027032:	2800      	cmp	r0, #0
 8027034:	f73f ade4 	bgt.w	8026c00 <_dtoa_r+0x418>
 8027038:	9b08      	ldr	r3, [sp, #32]
 802703a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802703e:	ea6f 0b03 	mvn.w	fp, r3
 8027042:	f04f 0900 	mov.w	r9, #0
 8027046:	4621      	mov	r1, r4
 8027048:	4630      	mov	r0, r6
 802704a:	f000 f9c5 	bl	80273d8 <_Bfree>
 802704e:	2f00      	cmp	r7, #0
 8027050:	f43f aea1 	beq.w	8026d96 <_dtoa_r+0x5ae>
 8027054:	f1b9 0f00 	cmp.w	r9, #0
 8027058:	d005      	beq.n	8027066 <_dtoa_r+0x87e>
 802705a:	45b9      	cmp	r9, r7
 802705c:	d003      	beq.n	8027066 <_dtoa_r+0x87e>
 802705e:	4649      	mov	r1, r9
 8027060:	4630      	mov	r0, r6
 8027062:	f000 f9b9 	bl	80273d8 <_Bfree>
 8027066:	4639      	mov	r1, r7
 8027068:	4630      	mov	r0, r6
 802706a:	f000 f9b5 	bl	80273d8 <_Bfree>
 802706e:	e692      	b.n	8026d96 <_dtoa_r+0x5ae>
 8027070:	2400      	movs	r4, #0
 8027072:	4627      	mov	r7, r4
 8027074:	e7e0      	b.n	8027038 <_dtoa_r+0x850>
 8027076:	4693      	mov	fp, r2
 8027078:	4627      	mov	r7, r4
 802707a:	e5c1      	b.n	8026c00 <_dtoa_r+0x418>
 802707c:	9b07      	ldr	r3, [sp, #28]
 802707e:	46ca      	mov	sl, r9
 8027080:	2b00      	cmp	r3, #0
 8027082:	f000 8100 	beq.w	8027286 <_dtoa_r+0xa9e>
 8027086:	f1b8 0f00 	cmp.w	r8, #0
 802708a:	dd05      	ble.n	8027098 <_dtoa_r+0x8b0>
 802708c:	4639      	mov	r1, r7
 802708e:	4642      	mov	r2, r8
 8027090:	4630      	mov	r0, r6
 8027092:	f000 fb71 	bl	8027778 <__lshift>
 8027096:	4607      	mov	r7, r0
 8027098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802709a:	2b00      	cmp	r3, #0
 802709c:	d05d      	beq.n	802715a <_dtoa_r+0x972>
 802709e:	6879      	ldr	r1, [r7, #4]
 80270a0:	4630      	mov	r0, r6
 80270a2:	f000 f959 	bl	8027358 <_Balloc>
 80270a6:	4680      	mov	r8, r0
 80270a8:	b928      	cbnz	r0, 80270b6 <_dtoa_r+0x8ce>
 80270aa:	4b82      	ldr	r3, [pc, #520]	; (80272b4 <_dtoa_r+0xacc>)
 80270ac:	4602      	mov	r2, r0
 80270ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 80270b2:	f7ff bbb1 	b.w	8026818 <_dtoa_r+0x30>
 80270b6:	693a      	ldr	r2, [r7, #16]
 80270b8:	3202      	adds	r2, #2
 80270ba:	0092      	lsls	r2, r2, #2
 80270bc:	f107 010c 	add.w	r1, r7, #12
 80270c0:	300c      	adds	r0, #12
 80270c2:	f7ff faf8 	bl	80266b6 <memcpy>
 80270c6:	2201      	movs	r2, #1
 80270c8:	4641      	mov	r1, r8
 80270ca:	4630      	mov	r0, r6
 80270cc:	f000 fb54 	bl	8027778 <__lshift>
 80270d0:	9b01      	ldr	r3, [sp, #4]
 80270d2:	3301      	adds	r3, #1
 80270d4:	9304      	str	r3, [sp, #16]
 80270d6:	9b01      	ldr	r3, [sp, #4]
 80270d8:	4453      	add	r3, sl
 80270da:	9308      	str	r3, [sp, #32]
 80270dc:	9b02      	ldr	r3, [sp, #8]
 80270de:	f003 0301 	and.w	r3, r3, #1
 80270e2:	46b9      	mov	r9, r7
 80270e4:	9307      	str	r3, [sp, #28]
 80270e6:	4607      	mov	r7, r0
 80270e8:	9b04      	ldr	r3, [sp, #16]
 80270ea:	4621      	mov	r1, r4
 80270ec:	3b01      	subs	r3, #1
 80270ee:	4628      	mov	r0, r5
 80270f0:	9302      	str	r3, [sp, #8]
 80270f2:	f7ff faee 	bl	80266d2 <quorem>
 80270f6:	4603      	mov	r3, r0
 80270f8:	3330      	adds	r3, #48	; 0x30
 80270fa:	9005      	str	r0, [sp, #20]
 80270fc:	4649      	mov	r1, r9
 80270fe:	4628      	mov	r0, r5
 8027100:	9309      	str	r3, [sp, #36]	; 0x24
 8027102:	f000 fba5 	bl	8027850 <__mcmp>
 8027106:	463a      	mov	r2, r7
 8027108:	4682      	mov	sl, r0
 802710a:	4621      	mov	r1, r4
 802710c:	4630      	mov	r0, r6
 802710e:	f000 fbbb 	bl	8027888 <__mdiff>
 8027112:	68c2      	ldr	r2, [r0, #12]
 8027114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027116:	4680      	mov	r8, r0
 8027118:	bb0a      	cbnz	r2, 802715e <_dtoa_r+0x976>
 802711a:	4601      	mov	r1, r0
 802711c:	4628      	mov	r0, r5
 802711e:	f000 fb97 	bl	8027850 <__mcmp>
 8027122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027124:	4602      	mov	r2, r0
 8027126:	4641      	mov	r1, r8
 8027128:	4630      	mov	r0, r6
 802712a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 802712e:	f000 f953 	bl	80273d8 <_Bfree>
 8027132:	9b06      	ldr	r3, [sp, #24]
 8027134:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027136:	f8dd 8010 	ldr.w	r8, [sp, #16]
 802713a:	ea43 0102 	orr.w	r1, r3, r2
 802713e:	9b07      	ldr	r3, [sp, #28]
 8027140:	4319      	orrs	r1, r3
 8027142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027144:	d10d      	bne.n	8027162 <_dtoa_r+0x97a>
 8027146:	2b39      	cmp	r3, #57	; 0x39
 8027148:	d029      	beq.n	802719e <_dtoa_r+0x9b6>
 802714a:	f1ba 0f00 	cmp.w	sl, #0
 802714e:	dd01      	ble.n	8027154 <_dtoa_r+0x96c>
 8027150:	9b05      	ldr	r3, [sp, #20]
 8027152:	3331      	adds	r3, #49	; 0x31
 8027154:	9a02      	ldr	r2, [sp, #8]
 8027156:	7013      	strb	r3, [r2, #0]
 8027158:	e775      	b.n	8027046 <_dtoa_r+0x85e>
 802715a:	4638      	mov	r0, r7
 802715c:	e7b8      	b.n	80270d0 <_dtoa_r+0x8e8>
 802715e:	2201      	movs	r2, #1
 8027160:	e7e1      	b.n	8027126 <_dtoa_r+0x93e>
 8027162:	f1ba 0f00 	cmp.w	sl, #0
 8027166:	db06      	blt.n	8027176 <_dtoa_r+0x98e>
 8027168:	9906      	ldr	r1, [sp, #24]
 802716a:	ea41 0a0a 	orr.w	sl, r1, sl
 802716e:	9907      	ldr	r1, [sp, #28]
 8027170:	ea5a 0a01 	orrs.w	sl, sl, r1
 8027174:	d120      	bne.n	80271b8 <_dtoa_r+0x9d0>
 8027176:	2a00      	cmp	r2, #0
 8027178:	ddec      	ble.n	8027154 <_dtoa_r+0x96c>
 802717a:	4629      	mov	r1, r5
 802717c:	2201      	movs	r2, #1
 802717e:	4630      	mov	r0, r6
 8027180:	9304      	str	r3, [sp, #16]
 8027182:	f000 faf9 	bl	8027778 <__lshift>
 8027186:	4621      	mov	r1, r4
 8027188:	4605      	mov	r5, r0
 802718a:	f000 fb61 	bl	8027850 <__mcmp>
 802718e:	2800      	cmp	r0, #0
 8027190:	9b04      	ldr	r3, [sp, #16]
 8027192:	dc02      	bgt.n	802719a <_dtoa_r+0x9b2>
 8027194:	d1de      	bne.n	8027154 <_dtoa_r+0x96c>
 8027196:	07da      	lsls	r2, r3, #31
 8027198:	d5dc      	bpl.n	8027154 <_dtoa_r+0x96c>
 802719a:	2b39      	cmp	r3, #57	; 0x39
 802719c:	d1d8      	bne.n	8027150 <_dtoa_r+0x968>
 802719e:	9a02      	ldr	r2, [sp, #8]
 80271a0:	2339      	movs	r3, #57	; 0x39
 80271a2:	7013      	strb	r3, [r2, #0]
 80271a4:	4643      	mov	r3, r8
 80271a6:	4698      	mov	r8, r3
 80271a8:	3b01      	subs	r3, #1
 80271aa:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80271ae:	2a39      	cmp	r2, #57	; 0x39
 80271b0:	d051      	beq.n	8027256 <_dtoa_r+0xa6e>
 80271b2:	3201      	adds	r2, #1
 80271b4:	701a      	strb	r2, [r3, #0]
 80271b6:	e746      	b.n	8027046 <_dtoa_r+0x85e>
 80271b8:	2a00      	cmp	r2, #0
 80271ba:	dd03      	ble.n	80271c4 <_dtoa_r+0x9dc>
 80271bc:	2b39      	cmp	r3, #57	; 0x39
 80271be:	d0ee      	beq.n	802719e <_dtoa_r+0x9b6>
 80271c0:	3301      	adds	r3, #1
 80271c2:	e7c7      	b.n	8027154 <_dtoa_r+0x96c>
 80271c4:	9a04      	ldr	r2, [sp, #16]
 80271c6:	9908      	ldr	r1, [sp, #32]
 80271c8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80271cc:	428a      	cmp	r2, r1
 80271ce:	d02b      	beq.n	8027228 <_dtoa_r+0xa40>
 80271d0:	4629      	mov	r1, r5
 80271d2:	2300      	movs	r3, #0
 80271d4:	220a      	movs	r2, #10
 80271d6:	4630      	mov	r0, r6
 80271d8:	f000 f920 	bl	802741c <__multadd>
 80271dc:	45b9      	cmp	r9, r7
 80271de:	4605      	mov	r5, r0
 80271e0:	f04f 0300 	mov.w	r3, #0
 80271e4:	f04f 020a 	mov.w	r2, #10
 80271e8:	4649      	mov	r1, r9
 80271ea:	4630      	mov	r0, r6
 80271ec:	d107      	bne.n	80271fe <_dtoa_r+0xa16>
 80271ee:	f000 f915 	bl	802741c <__multadd>
 80271f2:	4681      	mov	r9, r0
 80271f4:	4607      	mov	r7, r0
 80271f6:	9b04      	ldr	r3, [sp, #16]
 80271f8:	3301      	adds	r3, #1
 80271fa:	9304      	str	r3, [sp, #16]
 80271fc:	e774      	b.n	80270e8 <_dtoa_r+0x900>
 80271fe:	f000 f90d 	bl	802741c <__multadd>
 8027202:	4639      	mov	r1, r7
 8027204:	4681      	mov	r9, r0
 8027206:	2300      	movs	r3, #0
 8027208:	220a      	movs	r2, #10
 802720a:	4630      	mov	r0, r6
 802720c:	f000 f906 	bl	802741c <__multadd>
 8027210:	4607      	mov	r7, r0
 8027212:	e7f0      	b.n	80271f6 <_dtoa_r+0xa0e>
 8027214:	f1ba 0f00 	cmp.w	sl, #0
 8027218:	9a01      	ldr	r2, [sp, #4]
 802721a:	bfcc      	ite	gt
 802721c:	46d0      	movgt	r8, sl
 802721e:	f04f 0801 	movle.w	r8, #1
 8027222:	4490      	add	r8, r2
 8027224:	f04f 0900 	mov.w	r9, #0
 8027228:	4629      	mov	r1, r5
 802722a:	2201      	movs	r2, #1
 802722c:	4630      	mov	r0, r6
 802722e:	9302      	str	r3, [sp, #8]
 8027230:	f000 faa2 	bl	8027778 <__lshift>
 8027234:	4621      	mov	r1, r4
 8027236:	4605      	mov	r5, r0
 8027238:	f000 fb0a 	bl	8027850 <__mcmp>
 802723c:	2800      	cmp	r0, #0
 802723e:	dcb1      	bgt.n	80271a4 <_dtoa_r+0x9bc>
 8027240:	d102      	bne.n	8027248 <_dtoa_r+0xa60>
 8027242:	9b02      	ldr	r3, [sp, #8]
 8027244:	07db      	lsls	r3, r3, #31
 8027246:	d4ad      	bmi.n	80271a4 <_dtoa_r+0x9bc>
 8027248:	4643      	mov	r3, r8
 802724a:	4698      	mov	r8, r3
 802724c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8027250:	2a30      	cmp	r2, #48	; 0x30
 8027252:	d0fa      	beq.n	802724a <_dtoa_r+0xa62>
 8027254:	e6f7      	b.n	8027046 <_dtoa_r+0x85e>
 8027256:	9a01      	ldr	r2, [sp, #4]
 8027258:	429a      	cmp	r2, r3
 802725a:	d1a4      	bne.n	80271a6 <_dtoa_r+0x9be>
 802725c:	f10b 0b01 	add.w	fp, fp, #1
 8027260:	2331      	movs	r3, #49	; 0x31
 8027262:	e778      	b.n	8027156 <_dtoa_r+0x96e>
 8027264:	4b14      	ldr	r3, [pc, #80]	; (80272b8 <_dtoa_r+0xad0>)
 8027266:	f7ff bb2a 	b.w	80268be <_dtoa_r+0xd6>
 802726a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802726c:	2b00      	cmp	r3, #0
 802726e:	f47f ab05 	bne.w	802687c <_dtoa_r+0x94>
 8027272:	4b12      	ldr	r3, [pc, #72]	; (80272bc <_dtoa_r+0xad4>)
 8027274:	f7ff bb23 	b.w	80268be <_dtoa_r+0xd6>
 8027278:	f1ba 0f00 	cmp.w	sl, #0
 802727c:	dc03      	bgt.n	8027286 <_dtoa_r+0xa9e>
 802727e:	9b06      	ldr	r3, [sp, #24]
 8027280:	2b02      	cmp	r3, #2
 8027282:	f73f aec8 	bgt.w	8027016 <_dtoa_r+0x82e>
 8027286:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802728a:	4621      	mov	r1, r4
 802728c:	4628      	mov	r0, r5
 802728e:	f7ff fa20 	bl	80266d2 <quorem>
 8027292:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8027296:	f808 3b01 	strb.w	r3, [r8], #1
 802729a:	9a01      	ldr	r2, [sp, #4]
 802729c:	eba8 0202 	sub.w	r2, r8, r2
 80272a0:	4592      	cmp	sl, r2
 80272a2:	ddb7      	ble.n	8027214 <_dtoa_r+0xa2c>
 80272a4:	4629      	mov	r1, r5
 80272a6:	2300      	movs	r3, #0
 80272a8:	220a      	movs	r2, #10
 80272aa:	4630      	mov	r0, r6
 80272ac:	f000 f8b6 	bl	802741c <__multadd>
 80272b0:	4605      	mov	r5, r0
 80272b2:	e7ea      	b.n	802728a <_dtoa_r+0xaa2>
 80272b4:	0809c7bd 	.word	0x0809c7bd
 80272b8:	0809c71d 	.word	0x0809c71d
 80272bc:	0809c741 	.word	0x0809c741

080272c0 <_free_r>:
 80272c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80272c2:	2900      	cmp	r1, #0
 80272c4:	d044      	beq.n	8027350 <_free_r+0x90>
 80272c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80272ca:	9001      	str	r0, [sp, #4]
 80272cc:	2b00      	cmp	r3, #0
 80272ce:	f1a1 0404 	sub.w	r4, r1, #4
 80272d2:	bfb8      	it	lt
 80272d4:	18e4      	addlt	r4, r4, r3
 80272d6:	f7fe fb69 	bl	80259ac <__malloc_lock>
 80272da:	4a1e      	ldr	r2, [pc, #120]	; (8027354 <_free_r+0x94>)
 80272dc:	9801      	ldr	r0, [sp, #4]
 80272de:	6813      	ldr	r3, [r2, #0]
 80272e0:	b933      	cbnz	r3, 80272f0 <_free_r+0x30>
 80272e2:	6063      	str	r3, [r4, #4]
 80272e4:	6014      	str	r4, [r2, #0]
 80272e6:	b003      	add	sp, #12
 80272e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80272ec:	f7fe bb64 	b.w	80259b8 <__malloc_unlock>
 80272f0:	42a3      	cmp	r3, r4
 80272f2:	d908      	bls.n	8027306 <_free_r+0x46>
 80272f4:	6825      	ldr	r5, [r4, #0]
 80272f6:	1961      	adds	r1, r4, r5
 80272f8:	428b      	cmp	r3, r1
 80272fa:	bf01      	itttt	eq
 80272fc:	6819      	ldreq	r1, [r3, #0]
 80272fe:	685b      	ldreq	r3, [r3, #4]
 8027300:	1949      	addeq	r1, r1, r5
 8027302:	6021      	streq	r1, [r4, #0]
 8027304:	e7ed      	b.n	80272e2 <_free_r+0x22>
 8027306:	461a      	mov	r2, r3
 8027308:	685b      	ldr	r3, [r3, #4]
 802730a:	b10b      	cbz	r3, 8027310 <_free_r+0x50>
 802730c:	42a3      	cmp	r3, r4
 802730e:	d9fa      	bls.n	8027306 <_free_r+0x46>
 8027310:	6811      	ldr	r1, [r2, #0]
 8027312:	1855      	adds	r5, r2, r1
 8027314:	42a5      	cmp	r5, r4
 8027316:	d10b      	bne.n	8027330 <_free_r+0x70>
 8027318:	6824      	ldr	r4, [r4, #0]
 802731a:	4421      	add	r1, r4
 802731c:	1854      	adds	r4, r2, r1
 802731e:	42a3      	cmp	r3, r4
 8027320:	6011      	str	r1, [r2, #0]
 8027322:	d1e0      	bne.n	80272e6 <_free_r+0x26>
 8027324:	681c      	ldr	r4, [r3, #0]
 8027326:	685b      	ldr	r3, [r3, #4]
 8027328:	6053      	str	r3, [r2, #4]
 802732a:	440c      	add	r4, r1
 802732c:	6014      	str	r4, [r2, #0]
 802732e:	e7da      	b.n	80272e6 <_free_r+0x26>
 8027330:	d902      	bls.n	8027338 <_free_r+0x78>
 8027332:	230c      	movs	r3, #12
 8027334:	6003      	str	r3, [r0, #0]
 8027336:	e7d6      	b.n	80272e6 <_free_r+0x26>
 8027338:	6825      	ldr	r5, [r4, #0]
 802733a:	1961      	adds	r1, r4, r5
 802733c:	428b      	cmp	r3, r1
 802733e:	bf04      	itt	eq
 8027340:	6819      	ldreq	r1, [r3, #0]
 8027342:	685b      	ldreq	r3, [r3, #4]
 8027344:	6063      	str	r3, [r4, #4]
 8027346:	bf04      	itt	eq
 8027348:	1949      	addeq	r1, r1, r5
 802734a:	6021      	streq	r1, [r4, #0]
 802734c:	6054      	str	r4, [r2, #4]
 802734e:	e7ca      	b.n	80272e6 <_free_r+0x26>
 8027350:	b003      	add	sp, #12
 8027352:	bd30      	pop	{r4, r5, pc}
 8027354:	2000a3cc 	.word	0x2000a3cc

08027358 <_Balloc>:
 8027358:	b570      	push	{r4, r5, r6, lr}
 802735a:	69c6      	ldr	r6, [r0, #28]
 802735c:	4604      	mov	r4, r0
 802735e:	460d      	mov	r5, r1
 8027360:	b976      	cbnz	r6, 8027380 <_Balloc+0x28>
 8027362:	2010      	movs	r0, #16
 8027364:	f7fe fa72 	bl	802584c <malloc>
 8027368:	4602      	mov	r2, r0
 802736a:	61e0      	str	r0, [r4, #28]
 802736c:	b920      	cbnz	r0, 8027378 <_Balloc+0x20>
 802736e:	4b18      	ldr	r3, [pc, #96]	; (80273d0 <_Balloc+0x78>)
 8027370:	4818      	ldr	r0, [pc, #96]	; (80273d4 <_Balloc+0x7c>)
 8027372:	216b      	movs	r1, #107	; 0x6b
 8027374:	f000 fd7a 	bl	8027e6c <__assert_func>
 8027378:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802737c:	6006      	str	r6, [r0, #0]
 802737e:	60c6      	str	r6, [r0, #12]
 8027380:	69e6      	ldr	r6, [r4, #28]
 8027382:	68f3      	ldr	r3, [r6, #12]
 8027384:	b183      	cbz	r3, 80273a8 <_Balloc+0x50>
 8027386:	69e3      	ldr	r3, [r4, #28]
 8027388:	68db      	ldr	r3, [r3, #12]
 802738a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802738e:	b9b8      	cbnz	r0, 80273c0 <_Balloc+0x68>
 8027390:	2101      	movs	r1, #1
 8027392:	fa01 f605 	lsl.w	r6, r1, r5
 8027396:	1d72      	adds	r2, r6, #5
 8027398:	0092      	lsls	r2, r2, #2
 802739a:	4620      	mov	r0, r4
 802739c:	f000 fd84 	bl	8027ea8 <_calloc_r>
 80273a0:	b160      	cbz	r0, 80273bc <_Balloc+0x64>
 80273a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80273a6:	e00e      	b.n	80273c6 <_Balloc+0x6e>
 80273a8:	2221      	movs	r2, #33	; 0x21
 80273aa:	2104      	movs	r1, #4
 80273ac:	4620      	mov	r0, r4
 80273ae:	f000 fd7b 	bl	8027ea8 <_calloc_r>
 80273b2:	69e3      	ldr	r3, [r4, #28]
 80273b4:	60f0      	str	r0, [r6, #12]
 80273b6:	68db      	ldr	r3, [r3, #12]
 80273b8:	2b00      	cmp	r3, #0
 80273ba:	d1e4      	bne.n	8027386 <_Balloc+0x2e>
 80273bc:	2000      	movs	r0, #0
 80273be:	bd70      	pop	{r4, r5, r6, pc}
 80273c0:	6802      	ldr	r2, [r0, #0]
 80273c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80273c6:	2300      	movs	r3, #0
 80273c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80273cc:	e7f7      	b.n	80273be <_Balloc+0x66>
 80273ce:	bf00      	nop
 80273d0:	0809c74e 	.word	0x0809c74e
 80273d4:	0809c7ce 	.word	0x0809c7ce

080273d8 <_Bfree>:
 80273d8:	b570      	push	{r4, r5, r6, lr}
 80273da:	69c6      	ldr	r6, [r0, #28]
 80273dc:	4605      	mov	r5, r0
 80273de:	460c      	mov	r4, r1
 80273e0:	b976      	cbnz	r6, 8027400 <_Bfree+0x28>
 80273e2:	2010      	movs	r0, #16
 80273e4:	f7fe fa32 	bl	802584c <malloc>
 80273e8:	4602      	mov	r2, r0
 80273ea:	61e8      	str	r0, [r5, #28]
 80273ec:	b920      	cbnz	r0, 80273f8 <_Bfree+0x20>
 80273ee:	4b09      	ldr	r3, [pc, #36]	; (8027414 <_Bfree+0x3c>)
 80273f0:	4809      	ldr	r0, [pc, #36]	; (8027418 <_Bfree+0x40>)
 80273f2:	218f      	movs	r1, #143	; 0x8f
 80273f4:	f000 fd3a 	bl	8027e6c <__assert_func>
 80273f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80273fc:	6006      	str	r6, [r0, #0]
 80273fe:	60c6      	str	r6, [r0, #12]
 8027400:	b13c      	cbz	r4, 8027412 <_Bfree+0x3a>
 8027402:	69eb      	ldr	r3, [r5, #28]
 8027404:	6862      	ldr	r2, [r4, #4]
 8027406:	68db      	ldr	r3, [r3, #12]
 8027408:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802740c:	6021      	str	r1, [r4, #0]
 802740e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8027412:	bd70      	pop	{r4, r5, r6, pc}
 8027414:	0809c74e 	.word	0x0809c74e
 8027418:	0809c7ce 	.word	0x0809c7ce

0802741c <__multadd>:
 802741c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027420:	690d      	ldr	r5, [r1, #16]
 8027422:	4607      	mov	r7, r0
 8027424:	460c      	mov	r4, r1
 8027426:	461e      	mov	r6, r3
 8027428:	f101 0c14 	add.w	ip, r1, #20
 802742c:	2000      	movs	r0, #0
 802742e:	f8dc 3000 	ldr.w	r3, [ip]
 8027432:	b299      	uxth	r1, r3
 8027434:	fb02 6101 	mla	r1, r2, r1, r6
 8027438:	0c1e      	lsrs	r6, r3, #16
 802743a:	0c0b      	lsrs	r3, r1, #16
 802743c:	fb02 3306 	mla	r3, r2, r6, r3
 8027440:	b289      	uxth	r1, r1
 8027442:	3001      	adds	r0, #1
 8027444:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8027448:	4285      	cmp	r5, r0
 802744a:	f84c 1b04 	str.w	r1, [ip], #4
 802744e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8027452:	dcec      	bgt.n	802742e <__multadd+0x12>
 8027454:	b30e      	cbz	r6, 802749a <__multadd+0x7e>
 8027456:	68a3      	ldr	r3, [r4, #8]
 8027458:	42ab      	cmp	r3, r5
 802745a:	dc19      	bgt.n	8027490 <__multadd+0x74>
 802745c:	6861      	ldr	r1, [r4, #4]
 802745e:	4638      	mov	r0, r7
 8027460:	3101      	adds	r1, #1
 8027462:	f7ff ff79 	bl	8027358 <_Balloc>
 8027466:	4680      	mov	r8, r0
 8027468:	b928      	cbnz	r0, 8027476 <__multadd+0x5a>
 802746a:	4602      	mov	r2, r0
 802746c:	4b0c      	ldr	r3, [pc, #48]	; (80274a0 <__multadd+0x84>)
 802746e:	480d      	ldr	r0, [pc, #52]	; (80274a4 <__multadd+0x88>)
 8027470:	21ba      	movs	r1, #186	; 0xba
 8027472:	f000 fcfb 	bl	8027e6c <__assert_func>
 8027476:	6922      	ldr	r2, [r4, #16]
 8027478:	3202      	adds	r2, #2
 802747a:	f104 010c 	add.w	r1, r4, #12
 802747e:	0092      	lsls	r2, r2, #2
 8027480:	300c      	adds	r0, #12
 8027482:	f7ff f918 	bl	80266b6 <memcpy>
 8027486:	4621      	mov	r1, r4
 8027488:	4638      	mov	r0, r7
 802748a:	f7ff ffa5 	bl	80273d8 <_Bfree>
 802748e:	4644      	mov	r4, r8
 8027490:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8027494:	3501      	adds	r5, #1
 8027496:	615e      	str	r6, [r3, #20]
 8027498:	6125      	str	r5, [r4, #16]
 802749a:	4620      	mov	r0, r4
 802749c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80274a0:	0809c7bd 	.word	0x0809c7bd
 80274a4:	0809c7ce 	.word	0x0809c7ce

080274a8 <__hi0bits>:
 80274a8:	0c03      	lsrs	r3, r0, #16
 80274aa:	041b      	lsls	r3, r3, #16
 80274ac:	b9d3      	cbnz	r3, 80274e4 <__hi0bits+0x3c>
 80274ae:	0400      	lsls	r0, r0, #16
 80274b0:	2310      	movs	r3, #16
 80274b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80274b6:	bf04      	itt	eq
 80274b8:	0200      	lsleq	r0, r0, #8
 80274ba:	3308      	addeq	r3, #8
 80274bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80274c0:	bf04      	itt	eq
 80274c2:	0100      	lsleq	r0, r0, #4
 80274c4:	3304      	addeq	r3, #4
 80274c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80274ca:	bf04      	itt	eq
 80274cc:	0080      	lsleq	r0, r0, #2
 80274ce:	3302      	addeq	r3, #2
 80274d0:	2800      	cmp	r0, #0
 80274d2:	db05      	blt.n	80274e0 <__hi0bits+0x38>
 80274d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80274d8:	f103 0301 	add.w	r3, r3, #1
 80274dc:	bf08      	it	eq
 80274de:	2320      	moveq	r3, #32
 80274e0:	4618      	mov	r0, r3
 80274e2:	4770      	bx	lr
 80274e4:	2300      	movs	r3, #0
 80274e6:	e7e4      	b.n	80274b2 <__hi0bits+0xa>

080274e8 <__lo0bits>:
 80274e8:	6803      	ldr	r3, [r0, #0]
 80274ea:	f013 0207 	ands.w	r2, r3, #7
 80274ee:	d00c      	beq.n	802750a <__lo0bits+0x22>
 80274f0:	07d9      	lsls	r1, r3, #31
 80274f2:	d422      	bmi.n	802753a <__lo0bits+0x52>
 80274f4:	079a      	lsls	r2, r3, #30
 80274f6:	bf49      	itett	mi
 80274f8:	085b      	lsrmi	r3, r3, #1
 80274fa:	089b      	lsrpl	r3, r3, #2
 80274fc:	6003      	strmi	r3, [r0, #0]
 80274fe:	2201      	movmi	r2, #1
 8027500:	bf5c      	itt	pl
 8027502:	6003      	strpl	r3, [r0, #0]
 8027504:	2202      	movpl	r2, #2
 8027506:	4610      	mov	r0, r2
 8027508:	4770      	bx	lr
 802750a:	b299      	uxth	r1, r3
 802750c:	b909      	cbnz	r1, 8027512 <__lo0bits+0x2a>
 802750e:	0c1b      	lsrs	r3, r3, #16
 8027510:	2210      	movs	r2, #16
 8027512:	b2d9      	uxtb	r1, r3
 8027514:	b909      	cbnz	r1, 802751a <__lo0bits+0x32>
 8027516:	3208      	adds	r2, #8
 8027518:	0a1b      	lsrs	r3, r3, #8
 802751a:	0719      	lsls	r1, r3, #28
 802751c:	bf04      	itt	eq
 802751e:	091b      	lsreq	r3, r3, #4
 8027520:	3204      	addeq	r2, #4
 8027522:	0799      	lsls	r1, r3, #30
 8027524:	bf04      	itt	eq
 8027526:	089b      	lsreq	r3, r3, #2
 8027528:	3202      	addeq	r2, #2
 802752a:	07d9      	lsls	r1, r3, #31
 802752c:	d403      	bmi.n	8027536 <__lo0bits+0x4e>
 802752e:	085b      	lsrs	r3, r3, #1
 8027530:	f102 0201 	add.w	r2, r2, #1
 8027534:	d003      	beq.n	802753e <__lo0bits+0x56>
 8027536:	6003      	str	r3, [r0, #0]
 8027538:	e7e5      	b.n	8027506 <__lo0bits+0x1e>
 802753a:	2200      	movs	r2, #0
 802753c:	e7e3      	b.n	8027506 <__lo0bits+0x1e>
 802753e:	2220      	movs	r2, #32
 8027540:	e7e1      	b.n	8027506 <__lo0bits+0x1e>
	...

08027544 <__i2b>:
 8027544:	b510      	push	{r4, lr}
 8027546:	460c      	mov	r4, r1
 8027548:	2101      	movs	r1, #1
 802754a:	f7ff ff05 	bl	8027358 <_Balloc>
 802754e:	4602      	mov	r2, r0
 8027550:	b928      	cbnz	r0, 802755e <__i2b+0x1a>
 8027552:	4b05      	ldr	r3, [pc, #20]	; (8027568 <__i2b+0x24>)
 8027554:	4805      	ldr	r0, [pc, #20]	; (802756c <__i2b+0x28>)
 8027556:	f240 1145 	movw	r1, #325	; 0x145
 802755a:	f000 fc87 	bl	8027e6c <__assert_func>
 802755e:	2301      	movs	r3, #1
 8027560:	6144      	str	r4, [r0, #20]
 8027562:	6103      	str	r3, [r0, #16]
 8027564:	bd10      	pop	{r4, pc}
 8027566:	bf00      	nop
 8027568:	0809c7bd 	.word	0x0809c7bd
 802756c:	0809c7ce 	.word	0x0809c7ce

08027570 <__multiply>:
 8027570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027574:	4691      	mov	r9, r2
 8027576:	690a      	ldr	r2, [r1, #16]
 8027578:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802757c:	429a      	cmp	r2, r3
 802757e:	bfb8      	it	lt
 8027580:	460b      	movlt	r3, r1
 8027582:	460c      	mov	r4, r1
 8027584:	bfbc      	itt	lt
 8027586:	464c      	movlt	r4, r9
 8027588:	4699      	movlt	r9, r3
 802758a:	6927      	ldr	r7, [r4, #16]
 802758c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8027590:	68a3      	ldr	r3, [r4, #8]
 8027592:	6861      	ldr	r1, [r4, #4]
 8027594:	eb07 060a 	add.w	r6, r7, sl
 8027598:	42b3      	cmp	r3, r6
 802759a:	b085      	sub	sp, #20
 802759c:	bfb8      	it	lt
 802759e:	3101      	addlt	r1, #1
 80275a0:	f7ff feda 	bl	8027358 <_Balloc>
 80275a4:	b930      	cbnz	r0, 80275b4 <__multiply+0x44>
 80275a6:	4602      	mov	r2, r0
 80275a8:	4b44      	ldr	r3, [pc, #272]	; (80276bc <__multiply+0x14c>)
 80275aa:	4845      	ldr	r0, [pc, #276]	; (80276c0 <__multiply+0x150>)
 80275ac:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80275b0:	f000 fc5c 	bl	8027e6c <__assert_func>
 80275b4:	f100 0514 	add.w	r5, r0, #20
 80275b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80275bc:	462b      	mov	r3, r5
 80275be:	2200      	movs	r2, #0
 80275c0:	4543      	cmp	r3, r8
 80275c2:	d321      	bcc.n	8027608 <__multiply+0x98>
 80275c4:	f104 0314 	add.w	r3, r4, #20
 80275c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80275cc:	f109 0314 	add.w	r3, r9, #20
 80275d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80275d4:	9202      	str	r2, [sp, #8]
 80275d6:	1b3a      	subs	r2, r7, r4
 80275d8:	3a15      	subs	r2, #21
 80275da:	f022 0203 	bic.w	r2, r2, #3
 80275de:	3204      	adds	r2, #4
 80275e0:	f104 0115 	add.w	r1, r4, #21
 80275e4:	428f      	cmp	r7, r1
 80275e6:	bf38      	it	cc
 80275e8:	2204      	movcc	r2, #4
 80275ea:	9201      	str	r2, [sp, #4]
 80275ec:	9a02      	ldr	r2, [sp, #8]
 80275ee:	9303      	str	r3, [sp, #12]
 80275f0:	429a      	cmp	r2, r3
 80275f2:	d80c      	bhi.n	802760e <__multiply+0x9e>
 80275f4:	2e00      	cmp	r6, #0
 80275f6:	dd03      	ble.n	8027600 <__multiply+0x90>
 80275f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80275fc:	2b00      	cmp	r3, #0
 80275fe:	d05b      	beq.n	80276b8 <__multiply+0x148>
 8027600:	6106      	str	r6, [r0, #16]
 8027602:	b005      	add	sp, #20
 8027604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027608:	f843 2b04 	str.w	r2, [r3], #4
 802760c:	e7d8      	b.n	80275c0 <__multiply+0x50>
 802760e:	f8b3 a000 	ldrh.w	sl, [r3]
 8027612:	f1ba 0f00 	cmp.w	sl, #0
 8027616:	d024      	beq.n	8027662 <__multiply+0xf2>
 8027618:	f104 0e14 	add.w	lr, r4, #20
 802761c:	46a9      	mov	r9, r5
 802761e:	f04f 0c00 	mov.w	ip, #0
 8027622:	f85e 2b04 	ldr.w	r2, [lr], #4
 8027626:	f8d9 1000 	ldr.w	r1, [r9]
 802762a:	fa1f fb82 	uxth.w	fp, r2
 802762e:	b289      	uxth	r1, r1
 8027630:	fb0a 110b 	mla	r1, sl, fp, r1
 8027634:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8027638:	f8d9 2000 	ldr.w	r2, [r9]
 802763c:	4461      	add	r1, ip
 802763e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8027642:	fb0a c20b 	mla	r2, sl, fp, ip
 8027646:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802764a:	b289      	uxth	r1, r1
 802764c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8027650:	4577      	cmp	r7, lr
 8027652:	f849 1b04 	str.w	r1, [r9], #4
 8027656:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802765a:	d8e2      	bhi.n	8027622 <__multiply+0xb2>
 802765c:	9a01      	ldr	r2, [sp, #4]
 802765e:	f845 c002 	str.w	ip, [r5, r2]
 8027662:	9a03      	ldr	r2, [sp, #12]
 8027664:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8027668:	3304      	adds	r3, #4
 802766a:	f1b9 0f00 	cmp.w	r9, #0
 802766e:	d021      	beq.n	80276b4 <__multiply+0x144>
 8027670:	6829      	ldr	r1, [r5, #0]
 8027672:	f104 0c14 	add.w	ip, r4, #20
 8027676:	46ae      	mov	lr, r5
 8027678:	f04f 0a00 	mov.w	sl, #0
 802767c:	f8bc b000 	ldrh.w	fp, [ip]
 8027680:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8027684:	fb09 220b 	mla	r2, r9, fp, r2
 8027688:	4452      	add	r2, sl
 802768a:	b289      	uxth	r1, r1
 802768c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8027690:	f84e 1b04 	str.w	r1, [lr], #4
 8027694:	f85c 1b04 	ldr.w	r1, [ip], #4
 8027698:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802769c:	f8be 1000 	ldrh.w	r1, [lr]
 80276a0:	fb09 110a 	mla	r1, r9, sl, r1
 80276a4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80276a8:	4567      	cmp	r7, ip
 80276aa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80276ae:	d8e5      	bhi.n	802767c <__multiply+0x10c>
 80276b0:	9a01      	ldr	r2, [sp, #4]
 80276b2:	50a9      	str	r1, [r5, r2]
 80276b4:	3504      	adds	r5, #4
 80276b6:	e799      	b.n	80275ec <__multiply+0x7c>
 80276b8:	3e01      	subs	r6, #1
 80276ba:	e79b      	b.n	80275f4 <__multiply+0x84>
 80276bc:	0809c7bd 	.word	0x0809c7bd
 80276c0:	0809c7ce 	.word	0x0809c7ce

080276c4 <__pow5mult>:
 80276c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80276c8:	4615      	mov	r5, r2
 80276ca:	f012 0203 	ands.w	r2, r2, #3
 80276ce:	4606      	mov	r6, r0
 80276d0:	460f      	mov	r7, r1
 80276d2:	d007      	beq.n	80276e4 <__pow5mult+0x20>
 80276d4:	4c25      	ldr	r4, [pc, #148]	; (802776c <__pow5mult+0xa8>)
 80276d6:	3a01      	subs	r2, #1
 80276d8:	2300      	movs	r3, #0
 80276da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80276de:	f7ff fe9d 	bl	802741c <__multadd>
 80276e2:	4607      	mov	r7, r0
 80276e4:	10ad      	asrs	r5, r5, #2
 80276e6:	d03d      	beq.n	8027764 <__pow5mult+0xa0>
 80276e8:	69f4      	ldr	r4, [r6, #28]
 80276ea:	b97c      	cbnz	r4, 802770c <__pow5mult+0x48>
 80276ec:	2010      	movs	r0, #16
 80276ee:	f7fe f8ad 	bl	802584c <malloc>
 80276f2:	4602      	mov	r2, r0
 80276f4:	61f0      	str	r0, [r6, #28]
 80276f6:	b928      	cbnz	r0, 8027704 <__pow5mult+0x40>
 80276f8:	4b1d      	ldr	r3, [pc, #116]	; (8027770 <__pow5mult+0xac>)
 80276fa:	481e      	ldr	r0, [pc, #120]	; (8027774 <__pow5mult+0xb0>)
 80276fc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8027700:	f000 fbb4 	bl	8027e6c <__assert_func>
 8027704:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8027708:	6004      	str	r4, [r0, #0]
 802770a:	60c4      	str	r4, [r0, #12]
 802770c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8027710:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8027714:	b94c      	cbnz	r4, 802772a <__pow5mult+0x66>
 8027716:	f240 2171 	movw	r1, #625	; 0x271
 802771a:	4630      	mov	r0, r6
 802771c:	f7ff ff12 	bl	8027544 <__i2b>
 8027720:	2300      	movs	r3, #0
 8027722:	f8c8 0008 	str.w	r0, [r8, #8]
 8027726:	4604      	mov	r4, r0
 8027728:	6003      	str	r3, [r0, #0]
 802772a:	f04f 0900 	mov.w	r9, #0
 802772e:	07eb      	lsls	r3, r5, #31
 8027730:	d50a      	bpl.n	8027748 <__pow5mult+0x84>
 8027732:	4639      	mov	r1, r7
 8027734:	4622      	mov	r2, r4
 8027736:	4630      	mov	r0, r6
 8027738:	f7ff ff1a 	bl	8027570 <__multiply>
 802773c:	4639      	mov	r1, r7
 802773e:	4680      	mov	r8, r0
 8027740:	4630      	mov	r0, r6
 8027742:	f7ff fe49 	bl	80273d8 <_Bfree>
 8027746:	4647      	mov	r7, r8
 8027748:	106d      	asrs	r5, r5, #1
 802774a:	d00b      	beq.n	8027764 <__pow5mult+0xa0>
 802774c:	6820      	ldr	r0, [r4, #0]
 802774e:	b938      	cbnz	r0, 8027760 <__pow5mult+0x9c>
 8027750:	4622      	mov	r2, r4
 8027752:	4621      	mov	r1, r4
 8027754:	4630      	mov	r0, r6
 8027756:	f7ff ff0b 	bl	8027570 <__multiply>
 802775a:	6020      	str	r0, [r4, #0]
 802775c:	f8c0 9000 	str.w	r9, [r0]
 8027760:	4604      	mov	r4, r0
 8027762:	e7e4      	b.n	802772e <__pow5mult+0x6a>
 8027764:	4638      	mov	r0, r7
 8027766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802776a:	bf00      	nop
 802776c:	0809c918 	.word	0x0809c918
 8027770:	0809c74e 	.word	0x0809c74e
 8027774:	0809c7ce 	.word	0x0809c7ce

08027778 <__lshift>:
 8027778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802777c:	460c      	mov	r4, r1
 802777e:	6849      	ldr	r1, [r1, #4]
 8027780:	6923      	ldr	r3, [r4, #16]
 8027782:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8027786:	68a3      	ldr	r3, [r4, #8]
 8027788:	4607      	mov	r7, r0
 802778a:	4691      	mov	r9, r2
 802778c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8027790:	f108 0601 	add.w	r6, r8, #1
 8027794:	42b3      	cmp	r3, r6
 8027796:	db0b      	blt.n	80277b0 <__lshift+0x38>
 8027798:	4638      	mov	r0, r7
 802779a:	f7ff fddd 	bl	8027358 <_Balloc>
 802779e:	4605      	mov	r5, r0
 80277a0:	b948      	cbnz	r0, 80277b6 <__lshift+0x3e>
 80277a2:	4602      	mov	r2, r0
 80277a4:	4b28      	ldr	r3, [pc, #160]	; (8027848 <__lshift+0xd0>)
 80277a6:	4829      	ldr	r0, [pc, #164]	; (802784c <__lshift+0xd4>)
 80277a8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80277ac:	f000 fb5e 	bl	8027e6c <__assert_func>
 80277b0:	3101      	adds	r1, #1
 80277b2:	005b      	lsls	r3, r3, #1
 80277b4:	e7ee      	b.n	8027794 <__lshift+0x1c>
 80277b6:	2300      	movs	r3, #0
 80277b8:	f100 0114 	add.w	r1, r0, #20
 80277bc:	f100 0210 	add.w	r2, r0, #16
 80277c0:	4618      	mov	r0, r3
 80277c2:	4553      	cmp	r3, sl
 80277c4:	db33      	blt.n	802782e <__lshift+0xb6>
 80277c6:	6920      	ldr	r0, [r4, #16]
 80277c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80277cc:	f104 0314 	add.w	r3, r4, #20
 80277d0:	f019 091f 	ands.w	r9, r9, #31
 80277d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80277d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80277dc:	d02b      	beq.n	8027836 <__lshift+0xbe>
 80277de:	f1c9 0e20 	rsb	lr, r9, #32
 80277e2:	468a      	mov	sl, r1
 80277e4:	2200      	movs	r2, #0
 80277e6:	6818      	ldr	r0, [r3, #0]
 80277e8:	fa00 f009 	lsl.w	r0, r0, r9
 80277ec:	4310      	orrs	r0, r2
 80277ee:	f84a 0b04 	str.w	r0, [sl], #4
 80277f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80277f6:	459c      	cmp	ip, r3
 80277f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80277fc:	d8f3      	bhi.n	80277e6 <__lshift+0x6e>
 80277fe:	ebac 0304 	sub.w	r3, ip, r4
 8027802:	3b15      	subs	r3, #21
 8027804:	f023 0303 	bic.w	r3, r3, #3
 8027808:	3304      	adds	r3, #4
 802780a:	f104 0015 	add.w	r0, r4, #21
 802780e:	4584      	cmp	ip, r0
 8027810:	bf38      	it	cc
 8027812:	2304      	movcc	r3, #4
 8027814:	50ca      	str	r2, [r1, r3]
 8027816:	b10a      	cbz	r2, 802781c <__lshift+0xa4>
 8027818:	f108 0602 	add.w	r6, r8, #2
 802781c:	3e01      	subs	r6, #1
 802781e:	4638      	mov	r0, r7
 8027820:	612e      	str	r6, [r5, #16]
 8027822:	4621      	mov	r1, r4
 8027824:	f7ff fdd8 	bl	80273d8 <_Bfree>
 8027828:	4628      	mov	r0, r5
 802782a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802782e:	f842 0f04 	str.w	r0, [r2, #4]!
 8027832:	3301      	adds	r3, #1
 8027834:	e7c5      	b.n	80277c2 <__lshift+0x4a>
 8027836:	3904      	subs	r1, #4
 8027838:	f853 2b04 	ldr.w	r2, [r3], #4
 802783c:	f841 2f04 	str.w	r2, [r1, #4]!
 8027840:	459c      	cmp	ip, r3
 8027842:	d8f9      	bhi.n	8027838 <__lshift+0xc0>
 8027844:	e7ea      	b.n	802781c <__lshift+0xa4>
 8027846:	bf00      	nop
 8027848:	0809c7bd 	.word	0x0809c7bd
 802784c:	0809c7ce 	.word	0x0809c7ce

08027850 <__mcmp>:
 8027850:	b530      	push	{r4, r5, lr}
 8027852:	6902      	ldr	r2, [r0, #16]
 8027854:	690c      	ldr	r4, [r1, #16]
 8027856:	1b12      	subs	r2, r2, r4
 8027858:	d10e      	bne.n	8027878 <__mcmp+0x28>
 802785a:	f100 0314 	add.w	r3, r0, #20
 802785e:	3114      	adds	r1, #20
 8027860:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8027864:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8027868:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802786c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8027870:	42a5      	cmp	r5, r4
 8027872:	d003      	beq.n	802787c <__mcmp+0x2c>
 8027874:	d305      	bcc.n	8027882 <__mcmp+0x32>
 8027876:	2201      	movs	r2, #1
 8027878:	4610      	mov	r0, r2
 802787a:	bd30      	pop	{r4, r5, pc}
 802787c:	4283      	cmp	r3, r0
 802787e:	d3f3      	bcc.n	8027868 <__mcmp+0x18>
 8027880:	e7fa      	b.n	8027878 <__mcmp+0x28>
 8027882:	f04f 32ff 	mov.w	r2, #4294967295
 8027886:	e7f7      	b.n	8027878 <__mcmp+0x28>

08027888 <__mdiff>:
 8027888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802788c:	460c      	mov	r4, r1
 802788e:	4606      	mov	r6, r0
 8027890:	4611      	mov	r1, r2
 8027892:	4620      	mov	r0, r4
 8027894:	4690      	mov	r8, r2
 8027896:	f7ff ffdb 	bl	8027850 <__mcmp>
 802789a:	1e05      	subs	r5, r0, #0
 802789c:	d110      	bne.n	80278c0 <__mdiff+0x38>
 802789e:	4629      	mov	r1, r5
 80278a0:	4630      	mov	r0, r6
 80278a2:	f7ff fd59 	bl	8027358 <_Balloc>
 80278a6:	b930      	cbnz	r0, 80278b6 <__mdiff+0x2e>
 80278a8:	4b3a      	ldr	r3, [pc, #232]	; (8027994 <__mdiff+0x10c>)
 80278aa:	4602      	mov	r2, r0
 80278ac:	f240 2137 	movw	r1, #567	; 0x237
 80278b0:	4839      	ldr	r0, [pc, #228]	; (8027998 <__mdiff+0x110>)
 80278b2:	f000 fadb 	bl	8027e6c <__assert_func>
 80278b6:	2301      	movs	r3, #1
 80278b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80278bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80278c0:	bfa4      	itt	ge
 80278c2:	4643      	movge	r3, r8
 80278c4:	46a0      	movge	r8, r4
 80278c6:	4630      	mov	r0, r6
 80278c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80278cc:	bfa6      	itte	ge
 80278ce:	461c      	movge	r4, r3
 80278d0:	2500      	movge	r5, #0
 80278d2:	2501      	movlt	r5, #1
 80278d4:	f7ff fd40 	bl	8027358 <_Balloc>
 80278d8:	b920      	cbnz	r0, 80278e4 <__mdiff+0x5c>
 80278da:	4b2e      	ldr	r3, [pc, #184]	; (8027994 <__mdiff+0x10c>)
 80278dc:	4602      	mov	r2, r0
 80278de:	f240 2145 	movw	r1, #581	; 0x245
 80278e2:	e7e5      	b.n	80278b0 <__mdiff+0x28>
 80278e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80278e8:	6926      	ldr	r6, [r4, #16]
 80278ea:	60c5      	str	r5, [r0, #12]
 80278ec:	f104 0914 	add.w	r9, r4, #20
 80278f0:	f108 0514 	add.w	r5, r8, #20
 80278f4:	f100 0e14 	add.w	lr, r0, #20
 80278f8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80278fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8027900:	f108 0210 	add.w	r2, r8, #16
 8027904:	46f2      	mov	sl, lr
 8027906:	2100      	movs	r1, #0
 8027908:	f859 3b04 	ldr.w	r3, [r9], #4
 802790c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8027910:	fa11 f88b 	uxtah	r8, r1, fp
 8027914:	b299      	uxth	r1, r3
 8027916:	0c1b      	lsrs	r3, r3, #16
 8027918:	eba8 0801 	sub.w	r8, r8, r1
 802791c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8027920:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8027924:	fa1f f888 	uxth.w	r8, r8
 8027928:	1419      	asrs	r1, r3, #16
 802792a:	454e      	cmp	r6, r9
 802792c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8027930:	f84a 3b04 	str.w	r3, [sl], #4
 8027934:	d8e8      	bhi.n	8027908 <__mdiff+0x80>
 8027936:	1b33      	subs	r3, r6, r4
 8027938:	3b15      	subs	r3, #21
 802793a:	f023 0303 	bic.w	r3, r3, #3
 802793e:	3304      	adds	r3, #4
 8027940:	3415      	adds	r4, #21
 8027942:	42a6      	cmp	r6, r4
 8027944:	bf38      	it	cc
 8027946:	2304      	movcc	r3, #4
 8027948:	441d      	add	r5, r3
 802794a:	4473      	add	r3, lr
 802794c:	469e      	mov	lr, r3
 802794e:	462e      	mov	r6, r5
 8027950:	4566      	cmp	r6, ip
 8027952:	d30e      	bcc.n	8027972 <__mdiff+0xea>
 8027954:	f10c 0203 	add.w	r2, ip, #3
 8027958:	1b52      	subs	r2, r2, r5
 802795a:	f022 0203 	bic.w	r2, r2, #3
 802795e:	3d03      	subs	r5, #3
 8027960:	45ac      	cmp	ip, r5
 8027962:	bf38      	it	cc
 8027964:	2200      	movcc	r2, #0
 8027966:	4413      	add	r3, r2
 8027968:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802796c:	b17a      	cbz	r2, 802798e <__mdiff+0x106>
 802796e:	6107      	str	r7, [r0, #16]
 8027970:	e7a4      	b.n	80278bc <__mdiff+0x34>
 8027972:	f856 8b04 	ldr.w	r8, [r6], #4
 8027976:	fa11 f288 	uxtah	r2, r1, r8
 802797a:	1414      	asrs	r4, r2, #16
 802797c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8027980:	b292      	uxth	r2, r2
 8027982:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8027986:	f84e 2b04 	str.w	r2, [lr], #4
 802798a:	1421      	asrs	r1, r4, #16
 802798c:	e7e0      	b.n	8027950 <__mdiff+0xc8>
 802798e:	3f01      	subs	r7, #1
 8027990:	e7ea      	b.n	8027968 <__mdiff+0xe0>
 8027992:	bf00      	nop
 8027994:	0809c7bd 	.word	0x0809c7bd
 8027998:	0809c7ce 	.word	0x0809c7ce

0802799c <__d2b>:
 802799c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80279a0:	460f      	mov	r7, r1
 80279a2:	2101      	movs	r1, #1
 80279a4:	ec59 8b10 	vmov	r8, r9, d0
 80279a8:	4616      	mov	r6, r2
 80279aa:	f7ff fcd5 	bl	8027358 <_Balloc>
 80279ae:	4604      	mov	r4, r0
 80279b0:	b930      	cbnz	r0, 80279c0 <__d2b+0x24>
 80279b2:	4602      	mov	r2, r0
 80279b4:	4b24      	ldr	r3, [pc, #144]	; (8027a48 <__d2b+0xac>)
 80279b6:	4825      	ldr	r0, [pc, #148]	; (8027a4c <__d2b+0xb0>)
 80279b8:	f240 310f 	movw	r1, #783	; 0x30f
 80279bc:	f000 fa56 	bl	8027e6c <__assert_func>
 80279c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80279c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80279c8:	bb2d      	cbnz	r5, 8027a16 <__d2b+0x7a>
 80279ca:	9301      	str	r3, [sp, #4]
 80279cc:	f1b8 0300 	subs.w	r3, r8, #0
 80279d0:	d026      	beq.n	8027a20 <__d2b+0x84>
 80279d2:	4668      	mov	r0, sp
 80279d4:	9300      	str	r3, [sp, #0]
 80279d6:	f7ff fd87 	bl	80274e8 <__lo0bits>
 80279da:	e9dd 1200 	ldrd	r1, r2, [sp]
 80279de:	b1e8      	cbz	r0, 8027a1c <__d2b+0x80>
 80279e0:	f1c0 0320 	rsb	r3, r0, #32
 80279e4:	fa02 f303 	lsl.w	r3, r2, r3
 80279e8:	430b      	orrs	r3, r1
 80279ea:	40c2      	lsrs	r2, r0
 80279ec:	6163      	str	r3, [r4, #20]
 80279ee:	9201      	str	r2, [sp, #4]
 80279f0:	9b01      	ldr	r3, [sp, #4]
 80279f2:	61a3      	str	r3, [r4, #24]
 80279f4:	2b00      	cmp	r3, #0
 80279f6:	bf14      	ite	ne
 80279f8:	2202      	movne	r2, #2
 80279fa:	2201      	moveq	r2, #1
 80279fc:	6122      	str	r2, [r4, #16]
 80279fe:	b1bd      	cbz	r5, 8027a30 <__d2b+0x94>
 8027a00:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8027a04:	4405      	add	r5, r0
 8027a06:	603d      	str	r5, [r7, #0]
 8027a08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8027a0c:	6030      	str	r0, [r6, #0]
 8027a0e:	4620      	mov	r0, r4
 8027a10:	b003      	add	sp, #12
 8027a12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027a16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027a1a:	e7d6      	b.n	80279ca <__d2b+0x2e>
 8027a1c:	6161      	str	r1, [r4, #20]
 8027a1e:	e7e7      	b.n	80279f0 <__d2b+0x54>
 8027a20:	a801      	add	r0, sp, #4
 8027a22:	f7ff fd61 	bl	80274e8 <__lo0bits>
 8027a26:	9b01      	ldr	r3, [sp, #4]
 8027a28:	6163      	str	r3, [r4, #20]
 8027a2a:	3020      	adds	r0, #32
 8027a2c:	2201      	movs	r2, #1
 8027a2e:	e7e5      	b.n	80279fc <__d2b+0x60>
 8027a30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8027a34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8027a38:	6038      	str	r0, [r7, #0]
 8027a3a:	6918      	ldr	r0, [r3, #16]
 8027a3c:	f7ff fd34 	bl	80274a8 <__hi0bits>
 8027a40:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8027a44:	e7e2      	b.n	8027a0c <__d2b+0x70>
 8027a46:	bf00      	nop
 8027a48:	0809c7bd 	.word	0x0809c7bd
 8027a4c:	0809c7ce 	.word	0x0809c7ce

08027a50 <_malloc_usable_size_r>:
 8027a50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027a54:	1f18      	subs	r0, r3, #4
 8027a56:	2b00      	cmp	r3, #0
 8027a58:	bfbc      	itt	lt
 8027a5a:	580b      	ldrlt	r3, [r1, r0]
 8027a5c:	18c0      	addlt	r0, r0, r3
 8027a5e:	4770      	bx	lr

08027a60 <__ssputs_r>:
 8027a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027a64:	688e      	ldr	r6, [r1, #8]
 8027a66:	461f      	mov	r7, r3
 8027a68:	42be      	cmp	r6, r7
 8027a6a:	680b      	ldr	r3, [r1, #0]
 8027a6c:	4682      	mov	sl, r0
 8027a6e:	460c      	mov	r4, r1
 8027a70:	4690      	mov	r8, r2
 8027a72:	d82c      	bhi.n	8027ace <__ssputs_r+0x6e>
 8027a74:	898a      	ldrh	r2, [r1, #12]
 8027a76:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8027a7a:	d026      	beq.n	8027aca <__ssputs_r+0x6a>
 8027a7c:	6965      	ldr	r5, [r4, #20]
 8027a7e:	6909      	ldr	r1, [r1, #16]
 8027a80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8027a84:	eba3 0901 	sub.w	r9, r3, r1
 8027a88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8027a8c:	1c7b      	adds	r3, r7, #1
 8027a8e:	444b      	add	r3, r9
 8027a90:	106d      	asrs	r5, r5, #1
 8027a92:	429d      	cmp	r5, r3
 8027a94:	bf38      	it	cc
 8027a96:	461d      	movcc	r5, r3
 8027a98:	0553      	lsls	r3, r2, #21
 8027a9a:	d527      	bpl.n	8027aec <__ssputs_r+0x8c>
 8027a9c:	4629      	mov	r1, r5
 8027a9e:	f7fd ff05 	bl	80258ac <_malloc_r>
 8027aa2:	4606      	mov	r6, r0
 8027aa4:	b360      	cbz	r0, 8027b00 <__ssputs_r+0xa0>
 8027aa6:	6921      	ldr	r1, [r4, #16]
 8027aa8:	464a      	mov	r2, r9
 8027aaa:	f7fe fe04 	bl	80266b6 <memcpy>
 8027aae:	89a3      	ldrh	r3, [r4, #12]
 8027ab0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8027ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027ab8:	81a3      	strh	r3, [r4, #12]
 8027aba:	6126      	str	r6, [r4, #16]
 8027abc:	6165      	str	r5, [r4, #20]
 8027abe:	444e      	add	r6, r9
 8027ac0:	eba5 0509 	sub.w	r5, r5, r9
 8027ac4:	6026      	str	r6, [r4, #0]
 8027ac6:	60a5      	str	r5, [r4, #8]
 8027ac8:	463e      	mov	r6, r7
 8027aca:	42be      	cmp	r6, r7
 8027acc:	d900      	bls.n	8027ad0 <__ssputs_r+0x70>
 8027ace:	463e      	mov	r6, r7
 8027ad0:	6820      	ldr	r0, [r4, #0]
 8027ad2:	4632      	mov	r2, r6
 8027ad4:	4641      	mov	r1, r8
 8027ad6:	f7fe fd3a 	bl	802654e <memmove>
 8027ada:	68a3      	ldr	r3, [r4, #8]
 8027adc:	1b9b      	subs	r3, r3, r6
 8027ade:	60a3      	str	r3, [r4, #8]
 8027ae0:	6823      	ldr	r3, [r4, #0]
 8027ae2:	4433      	add	r3, r6
 8027ae4:	6023      	str	r3, [r4, #0]
 8027ae6:	2000      	movs	r0, #0
 8027ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027aec:	462a      	mov	r2, r5
 8027aee:	f7fd ff69 	bl	80259c4 <_realloc_r>
 8027af2:	4606      	mov	r6, r0
 8027af4:	2800      	cmp	r0, #0
 8027af6:	d1e0      	bne.n	8027aba <__ssputs_r+0x5a>
 8027af8:	6921      	ldr	r1, [r4, #16]
 8027afa:	4650      	mov	r0, sl
 8027afc:	f7ff fbe0 	bl	80272c0 <_free_r>
 8027b00:	230c      	movs	r3, #12
 8027b02:	f8ca 3000 	str.w	r3, [sl]
 8027b06:	89a3      	ldrh	r3, [r4, #12]
 8027b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027b0c:	81a3      	strh	r3, [r4, #12]
 8027b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8027b12:	e7e9      	b.n	8027ae8 <__ssputs_r+0x88>

08027b14 <_svfiprintf_r>:
 8027b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027b18:	4698      	mov	r8, r3
 8027b1a:	898b      	ldrh	r3, [r1, #12]
 8027b1c:	061b      	lsls	r3, r3, #24
 8027b1e:	b09d      	sub	sp, #116	; 0x74
 8027b20:	4607      	mov	r7, r0
 8027b22:	460d      	mov	r5, r1
 8027b24:	4614      	mov	r4, r2
 8027b26:	d50e      	bpl.n	8027b46 <_svfiprintf_r+0x32>
 8027b28:	690b      	ldr	r3, [r1, #16]
 8027b2a:	b963      	cbnz	r3, 8027b46 <_svfiprintf_r+0x32>
 8027b2c:	2140      	movs	r1, #64	; 0x40
 8027b2e:	f7fd febd 	bl	80258ac <_malloc_r>
 8027b32:	6028      	str	r0, [r5, #0]
 8027b34:	6128      	str	r0, [r5, #16]
 8027b36:	b920      	cbnz	r0, 8027b42 <_svfiprintf_r+0x2e>
 8027b38:	230c      	movs	r3, #12
 8027b3a:	603b      	str	r3, [r7, #0]
 8027b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8027b40:	e0d0      	b.n	8027ce4 <_svfiprintf_r+0x1d0>
 8027b42:	2340      	movs	r3, #64	; 0x40
 8027b44:	616b      	str	r3, [r5, #20]
 8027b46:	2300      	movs	r3, #0
 8027b48:	9309      	str	r3, [sp, #36]	; 0x24
 8027b4a:	2320      	movs	r3, #32
 8027b4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8027b50:	f8cd 800c 	str.w	r8, [sp, #12]
 8027b54:	2330      	movs	r3, #48	; 0x30
 8027b56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8027cfc <_svfiprintf_r+0x1e8>
 8027b5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8027b5e:	f04f 0901 	mov.w	r9, #1
 8027b62:	4623      	mov	r3, r4
 8027b64:	469a      	mov	sl, r3
 8027b66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027b6a:	b10a      	cbz	r2, 8027b70 <_svfiprintf_r+0x5c>
 8027b6c:	2a25      	cmp	r2, #37	; 0x25
 8027b6e:	d1f9      	bne.n	8027b64 <_svfiprintf_r+0x50>
 8027b70:	ebba 0b04 	subs.w	fp, sl, r4
 8027b74:	d00b      	beq.n	8027b8e <_svfiprintf_r+0x7a>
 8027b76:	465b      	mov	r3, fp
 8027b78:	4622      	mov	r2, r4
 8027b7a:	4629      	mov	r1, r5
 8027b7c:	4638      	mov	r0, r7
 8027b7e:	f7ff ff6f 	bl	8027a60 <__ssputs_r>
 8027b82:	3001      	adds	r0, #1
 8027b84:	f000 80a9 	beq.w	8027cda <_svfiprintf_r+0x1c6>
 8027b88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027b8a:	445a      	add	r2, fp
 8027b8c:	9209      	str	r2, [sp, #36]	; 0x24
 8027b8e:	f89a 3000 	ldrb.w	r3, [sl]
 8027b92:	2b00      	cmp	r3, #0
 8027b94:	f000 80a1 	beq.w	8027cda <_svfiprintf_r+0x1c6>
 8027b98:	2300      	movs	r3, #0
 8027b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8027b9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027ba2:	f10a 0a01 	add.w	sl, sl, #1
 8027ba6:	9304      	str	r3, [sp, #16]
 8027ba8:	9307      	str	r3, [sp, #28]
 8027baa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027bae:	931a      	str	r3, [sp, #104]	; 0x68
 8027bb0:	4654      	mov	r4, sl
 8027bb2:	2205      	movs	r2, #5
 8027bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027bb8:	4850      	ldr	r0, [pc, #320]	; (8027cfc <_svfiprintf_r+0x1e8>)
 8027bba:	f7d8 fba1 	bl	8000300 <memchr>
 8027bbe:	9a04      	ldr	r2, [sp, #16]
 8027bc0:	b9d8      	cbnz	r0, 8027bfa <_svfiprintf_r+0xe6>
 8027bc2:	06d0      	lsls	r0, r2, #27
 8027bc4:	bf44      	itt	mi
 8027bc6:	2320      	movmi	r3, #32
 8027bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027bcc:	0711      	lsls	r1, r2, #28
 8027bce:	bf44      	itt	mi
 8027bd0:	232b      	movmi	r3, #43	; 0x2b
 8027bd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8027bda:	2b2a      	cmp	r3, #42	; 0x2a
 8027bdc:	d015      	beq.n	8027c0a <_svfiprintf_r+0xf6>
 8027bde:	9a07      	ldr	r2, [sp, #28]
 8027be0:	4654      	mov	r4, sl
 8027be2:	2000      	movs	r0, #0
 8027be4:	f04f 0c0a 	mov.w	ip, #10
 8027be8:	4621      	mov	r1, r4
 8027bea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027bee:	3b30      	subs	r3, #48	; 0x30
 8027bf0:	2b09      	cmp	r3, #9
 8027bf2:	d94d      	bls.n	8027c90 <_svfiprintf_r+0x17c>
 8027bf4:	b1b0      	cbz	r0, 8027c24 <_svfiprintf_r+0x110>
 8027bf6:	9207      	str	r2, [sp, #28]
 8027bf8:	e014      	b.n	8027c24 <_svfiprintf_r+0x110>
 8027bfa:	eba0 0308 	sub.w	r3, r0, r8
 8027bfe:	fa09 f303 	lsl.w	r3, r9, r3
 8027c02:	4313      	orrs	r3, r2
 8027c04:	9304      	str	r3, [sp, #16]
 8027c06:	46a2      	mov	sl, r4
 8027c08:	e7d2      	b.n	8027bb0 <_svfiprintf_r+0x9c>
 8027c0a:	9b03      	ldr	r3, [sp, #12]
 8027c0c:	1d19      	adds	r1, r3, #4
 8027c0e:	681b      	ldr	r3, [r3, #0]
 8027c10:	9103      	str	r1, [sp, #12]
 8027c12:	2b00      	cmp	r3, #0
 8027c14:	bfbb      	ittet	lt
 8027c16:	425b      	neglt	r3, r3
 8027c18:	f042 0202 	orrlt.w	r2, r2, #2
 8027c1c:	9307      	strge	r3, [sp, #28]
 8027c1e:	9307      	strlt	r3, [sp, #28]
 8027c20:	bfb8      	it	lt
 8027c22:	9204      	strlt	r2, [sp, #16]
 8027c24:	7823      	ldrb	r3, [r4, #0]
 8027c26:	2b2e      	cmp	r3, #46	; 0x2e
 8027c28:	d10c      	bne.n	8027c44 <_svfiprintf_r+0x130>
 8027c2a:	7863      	ldrb	r3, [r4, #1]
 8027c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8027c2e:	d134      	bne.n	8027c9a <_svfiprintf_r+0x186>
 8027c30:	9b03      	ldr	r3, [sp, #12]
 8027c32:	1d1a      	adds	r2, r3, #4
 8027c34:	681b      	ldr	r3, [r3, #0]
 8027c36:	9203      	str	r2, [sp, #12]
 8027c38:	2b00      	cmp	r3, #0
 8027c3a:	bfb8      	it	lt
 8027c3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8027c40:	3402      	adds	r4, #2
 8027c42:	9305      	str	r3, [sp, #20]
 8027c44:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8027d0c <_svfiprintf_r+0x1f8>
 8027c48:	7821      	ldrb	r1, [r4, #0]
 8027c4a:	2203      	movs	r2, #3
 8027c4c:	4650      	mov	r0, sl
 8027c4e:	f7d8 fb57 	bl	8000300 <memchr>
 8027c52:	b138      	cbz	r0, 8027c64 <_svfiprintf_r+0x150>
 8027c54:	9b04      	ldr	r3, [sp, #16]
 8027c56:	eba0 000a 	sub.w	r0, r0, sl
 8027c5a:	2240      	movs	r2, #64	; 0x40
 8027c5c:	4082      	lsls	r2, r0
 8027c5e:	4313      	orrs	r3, r2
 8027c60:	3401      	adds	r4, #1
 8027c62:	9304      	str	r3, [sp, #16]
 8027c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027c68:	4825      	ldr	r0, [pc, #148]	; (8027d00 <_svfiprintf_r+0x1ec>)
 8027c6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8027c6e:	2206      	movs	r2, #6
 8027c70:	f7d8 fb46 	bl	8000300 <memchr>
 8027c74:	2800      	cmp	r0, #0
 8027c76:	d038      	beq.n	8027cea <_svfiprintf_r+0x1d6>
 8027c78:	4b22      	ldr	r3, [pc, #136]	; (8027d04 <_svfiprintf_r+0x1f0>)
 8027c7a:	bb1b      	cbnz	r3, 8027cc4 <_svfiprintf_r+0x1b0>
 8027c7c:	9b03      	ldr	r3, [sp, #12]
 8027c7e:	3307      	adds	r3, #7
 8027c80:	f023 0307 	bic.w	r3, r3, #7
 8027c84:	3308      	adds	r3, #8
 8027c86:	9303      	str	r3, [sp, #12]
 8027c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027c8a:	4433      	add	r3, r6
 8027c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8027c8e:	e768      	b.n	8027b62 <_svfiprintf_r+0x4e>
 8027c90:	fb0c 3202 	mla	r2, ip, r2, r3
 8027c94:	460c      	mov	r4, r1
 8027c96:	2001      	movs	r0, #1
 8027c98:	e7a6      	b.n	8027be8 <_svfiprintf_r+0xd4>
 8027c9a:	2300      	movs	r3, #0
 8027c9c:	3401      	adds	r4, #1
 8027c9e:	9305      	str	r3, [sp, #20]
 8027ca0:	4619      	mov	r1, r3
 8027ca2:	f04f 0c0a 	mov.w	ip, #10
 8027ca6:	4620      	mov	r0, r4
 8027ca8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027cac:	3a30      	subs	r2, #48	; 0x30
 8027cae:	2a09      	cmp	r2, #9
 8027cb0:	d903      	bls.n	8027cba <_svfiprintf_r+0x1a6>
 8027cb2:	2b00      	cmp	r3, #0
 8027cb4:	d0c6      	beq.n	8027c44 <_svfiprintf_r+0x130>
 8027cb6:	9105      	str	r1, [sp, #20]
 8027cb8:	e7c4      	b.n	8027c44 <_svfiprintf_r+0x130>
 8027cba:	fb0c 2101 	mla	r1, ip, r1, r2
 8027cbe:	4604      	mov	r4, r0
 8027cc0:	2301      	movs	r3, #1
 8027cc2:	e7f0      	b.n	8027ca6 <_svfiprintf_r+0x192>
 8027cc4:	ab03      	add	r3, sp, #12
 8027cc6:	9300      	str	r3, [sp, #0]
 8027cc8:	462a      	mov	r2, r5
 8027cca:	4b0f      	ldr	r3, [pc, #60]	; (8027d08 <_svfiprintf_r+0x1f4>)
 8027ccc:	a904      	add	r1, sp, #16
 8027cce:	4638      	mov	r0, r7
 8027cd0:	f7fd ff3a 	bl	8025b48 <_printf_float>
 8027cd4:	1c42      	adds	r2, r0, #1
 8027cd6:	4606      	mov	r6, r0
 8027cd8:	d1d6      	bne.n	8027c88 <_svfiprintf_r+0x174>
 8027cda:	89ab      	ldrh	r3, [r5, #12]
 8027cdc:	065b      	lsls	r3, r3, #25
 8027cde:	f53f af2d 	bmi.w	8027b3c <_svfiprintf_r+0x28>
 8027ce2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027ce4:	b01d      	add	sp, #116	; 0x74
 8027ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027cea:	ab03      	add	r3, sp, #12
 8027cec:	9300      	str	r3, [sp, #0]
 8027cee:	462a      	mov	r2, r5
 8027cf0:	4b05      	ldr	r3, [pc, #20]	; (8027d08 <_svfiprintf_r+0x1f4>)
 8027cf2:	a904      	add	r1, sp, #16
 8027cf4:	4638      	mov	r0, r7
 8027cf6:	f7fe f9af 	bl	8026058 <_printf_i>
 8027cfa:	e7eb      	b.n	8027cd4 <_svfiprintf_r+0x1c0>
 8027cfc:	0809c924 	.word	0x0809c924
 8027d00:	0809c92e 	.word	0x0809c92e
 8027d04:	08025b49 	.word	0x08025b49
 8027d08:	08027a61 	.word	0x08027a61
 8027d0c:	0809c92a 	.word	0x0809c92a

08027d10 <__sflush_r>:
 8027d10:	898a      	ldrh	r2, [r1, #12]
 8027d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027d16:	4605      	mov	r5, r0
 8027d18:	0710      	lsls	r0, r2, #28
 8027d1a:	460c      	mov	r4, r1
 8027d1c:	d458      	bmi.n	8027dd0 <__sflush_r+0xc0>
 8027d1e:	684b      	ldr	r3, [r1, #4]
 8027d20:	2b00      	cmp	r3, #0
 8027d22:	dc05      	bgt.n	8027d30 <__sflush_r+0x20>
 8027d24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8027d26:	2b00      	cmp	r3, #0
 8027d28:	dc02      	bgt.n	8027d30 <__sflush_r+0x20>
 8027d2a:	2000      	movs	r0, #0
 8027d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027d30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027d32:	2e00      	cmp	r6, #0
 8027d34:	d0f9      	beq.n	8027d2a <__sflush_r+0x1a>
 8027d36:	2300      	movs	r3, #0
 8027d38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8027d3c:	682f      	ldr	r7, [r5, #0]
 8027d3e:	6a21      	ldr	r1, [r4, #32]
 8027d40:	602b      	str	r3, [r5, #0]
 8027d42:	d032      	beq.n	8027daa <__sflush_r+0x9a>
 8027d44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8027d46:	89a3      	ldrh	r3, [r4, #12]
 8027d48:	075a      	lsls	r2, r3, #29
 8027d4a:	d505      	bpl.n	8027d58 <__sflush_r+0x48>
 8027d4c:	6863      	ldr	r3, [r4, #4]
 8027d4e:	1ac0      	subs	r0, r0, r3
 8027d50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8027d52:	b10b      	cbz	r3, 8027d58 <__sflush_r+0x48>
 8027d54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027d56:	1ac0      	subs	r0, r0, r3
 8027d58:	2300      	movs	r3, #0
 8027d5a:	4602      	mov	r2, r0
 8027d5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027d5e:	6a21      	ldr	r1, [r4, #32]
 8027d60:	4628      	mov	r0, r5
 8027d62:	47b0      	blx	r6
 8027d64:	1c43      	adds	r3, r0, #1
 8027d66:	89a3      	ldrh	r3, [r4, #12]
 8027d68:	d106      	bne.n	8027d78 <__sflush_r+0x68>
 8027d6a:	6829      	ldr	r1, [r5, #0]
 8027d6c:	291d      	cmp	r1, #29
 8027d6e:	d82b      	bhi.n	8027dc8 <__sflush_r+0xb8>
 8027d70:	4a29      	ldr	r2, [pc, #164]	; (8027e18 <__sflush_r+0x108>)
 8027d72:	410a      	asrs	r2, r1
 8027d74:	07d6      	lsls	r6, r2, #31
 8027d76:	d427      	bmi.n	8027dc8 <__sflush_r+0xb8>
 8027d78:	2200      	movs	r2, #0
 8027d7a:	6062      	str	r2, [r4, #4]
 8027d7c:	04d9      	lsls	r1, r3, #19
 8027d7e:	6922      	ldr	r2, [r4, #16]
 8027d80:	6022      	str	r2, [r4, #0]
 8027d82:	d504      	bpl.n	8027d8e <__sflush_r+0x7e>
 8027d84:	1c42      	adds	r2, r0, #1
 8027d86:	d101      	bne.n	8027d8c <__sflush_r+0x7c>
 8027d88:	682b      	ldr	r3, [r5, #0]
 8027d8a:	b903      	cbnz	r3, 8027d8e <__sflush_r+0x7e>
 8027d8c:	6560      	str	r0, [r4, #84]	; 0x54
 8027d8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027d90:	602f      	str	r7, [r5, #0]
 8027d92:	2900      	cmp	r1, #0
 8027d94:	d0c9      	beq.n	8027d2a <__sflush_r+0x1a>
 8027d96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027d9a:	4299      	cmp	r1, r3
 8027d9c:	d002      	beq.n	8027da4 <__sflush_r+0x94>
 8027d9e:	4628      	mov	r0, r5
 8027da0:	f7ff fa8e 	bl	80272c0 <_free_r>
 8027da4:	2000      	movs	r0, #0
 8027da6:	6360      	str	r0, [r4, #52]	; 0x34
 8027da8:	e7c0      	b.n	8027d2c <__sflush_r+0x1c>
 8027daa:	2301      	movs	r3, #1
 8027dac:	4628      	mov	r0, r5
 8027dae:	47b0      	blx	r6
 8027db0:	1c41      	adds	r1, r0, #1
 8027db2:	d1c8      	bne.n	8027d46 <__sflush_r+0x36>
 8027db4:	682b      	ldr	r3, [r5, #0]
 8027db6:	2b00      	cmp	r3, #0
 8027db8:	d0c5      	beq.n	8027d46 <__sflush_r+0x36>
 8027dba:	2b1d      	cmp	r3, #29
 8027dbc:	d001      	beq.n	8027dc2 <__sflush_r+0xb2>
 8027dbe:	2b16      	cmp	r3, #22
 8027dc0:	d101      	bne.n	8027dc6 <__sflush_r+0xb6>
 8027dc2:	602f      	str	r7, [r5, #0]
 8027dc4:	e7b1      	b.n	8027d2a <__sflush_r+0x1a>
 8027dc6:	89a3      	ldrh	r3, [r4, #12]
 8027dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027dcc:	81a3      	strh	r3, [r4, #12]
 8027dce:	e7ad      	b.n	8027d2c <__sflush_r+0x1c>
 8027dd0:	690f      	ldr	r7, [r1, #16]
 8027dd2:	2f00      	cmp	r7, #0
 8027dd4:	d0a9      	beq.n	8027d2a <__sflush_r+0x1a>
 8027dd6:	0793      	lsls	r3, r2, #30
 8027dd8:	680e      	ldr	r6, [r1, #0]
 8027dda:	bf08      	it	eq
 8027ddc:	694b      	ldreq	r3, [r1, #20]
 8027dde:	600f      	str	r7, [r1, #0]
 8027de0:	bf18      	it	ne
 8027de2:	2300      	movne	r3, #0
 8027de4:	eba6 0807 	sub.w	r8, r6, r7
 8027de8:	608b      	str	r3, [r1, #8]
 8027dea:	f1b8 0f00 	cmp.w	r8, #0
 8027dee:	dd9c      	ble.n	8027d2a <__sflush_r+0x1a>
 8027df0:	6a21      	ldr	r1, [r4, #32]
 8027df2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8027df4:	4643      	mov	r3, r8
 8027df6:	463a      	mov	r2, r7
 8027df8:	4628      	mov	r0, r5
 8027dfa:	47b0      	blx	r6
 8027dfc:	2800      	cmp	r0, #0
 8027dfe:	dc06      	bgt.n	8027e0e <__sflush_r+0xfe>
 8027e00:	89a3      	ldrh	r3, [r4, #12]
 8027e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027e06:	81a3      	strh	r3, [r4, #12]
 8027e08:	f04f 30ff 	mov.w	r0, #4294967295
 8027e0c:	e78e      	b.n	8027d2c <__sflush_r+0x1c>
 8027e0e:	4407      	add	r7, r0
 8027e10:	eba8 0800 	sub.w	r8, r8, r0
 8027e14:	e7e9      	b.n	8027dea <__sflush_r+0xda>
 8027e16:	bf00      	nop
 8027e18:	dfbffffe 	.word	0xdfbffffe

08027e1c <_fflush_r>:
 8027e1c:	b538      	push	{r3, r4, r5, lr}
 8027e1e:	690b      	ldr	r3, [r1, #16]
 8027e20:	4605      	mov	r5, r0
 8027e22:	460c      	mov	r4, r1
 8027e24:	b913      	cbnz	r3, 8027e2c <_fflush_r+0x10>
 8027e26:	2500      	movs	r5, #0
 8027e28:	4628      	mov	r0, r5
 8027e2a:	bd38      	pop	{r3, r4, r5, pc}
 8027e2c:	b118      	cbz	r0, 8027e36 <_fflush_r+0x1a>
 8027e2e:	6a03      	ldr	r3, [r0, #32]
 8027e30:	b90b      	cbnz	r3, 8027e36 <_fflush_r+0x1a>
 8027e32:	f7fe fabf 	bl	80263b4 <__sinit>
 8027e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027e3a:	2b00      	cmp	r3, #0
 8027e3c:	d0f3      	beq.n	8027e26 <_fflush_r+0xa>
 8027e3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8027e40:	07d0      	lsls	r0, r2, #31
 8027e42:	d404      	bmi.n	8027e4e <_fflush_r+0x32>
 8027e44:	0599      	lsls	r1, r3, #22
 8027e46:	d402      	bmi.n	8027e4e <_fflush_r+0x32>
 8027e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027e4a:	f7fe fc2a 	bl	80266a2 <__retarget_lock_acquire_recursive>
 8027e4e:	4628      	mov	r0, r5
 8027e50:	4621      	mov	r1, r4
 8027e52:	f7ff ff5d 	bl	8027d10 <__sflush_r>
 8027e56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027e58:	07da      	lsls	r2, r3, #31
 8027e5a:	4605      	mov	r5, r0
 8027e5c:	d4e4      	bmi.n	8027e28 <_fflush_r+0xc>
 8027e5e:	89a3      	ldrh	r3, [r4, #12]
 8027e60:	059b      	lsls	r3, r3, #22
 8027e62:	d4e1      	bmi.n	8027e28 <_fflush_r+0xc>
 8027e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027e66:	f7fe fc1d 	bl	80266a4 <__retarget_lock_release_recursive>
 8027e6a:	e7dd      	b.n	8027e28 <_fflush_r+0xc>

08027e6c <__assert_func>:
 8027e6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8027e6e:	4614      	mov	r4, r2
 8027e70:	461a      	mov	r2, r3
 8027e72:	4b09      	ldr	r3, [pc, #36]	; (8027e98 <__assert_func+0x2c>)
 8027e74:	681b      	ldr	r3, [r3, #0]
 8027e76:	4605      	mov	r5, r0
 8027e78:	68d8      	ldr	r0, [r3, #12]
 8027e7a:	b14c      	cbz	r4, 8027e90 <__assert_func+0x24>
 8027e7c:	4b07      	ldr	r3, [pc, #28]	; (8027e9c <__assert_func+0x30>)
 8027e7e:	9100      	str	r1, [sp, #0]
 8027e80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8027e84:	4906      	ldr	r1, [pc, #24]	; (8027ea0 <__assert_func+0x34>)
 8027e86:	462b      	mov	r3, r5
 8027e88:	f000 f844 	bl	8027f14 <fiprintf>
 8027e8c:	f000 f854 	bl	8027f38 <abort>
 8027e90:	4b04      	ldr	r3, [pc, #16]	; (8027ea4 <__assert_func+0x38>)
 8027e92:	461c      	mov	r4, r3
 8027e94:	e7f3      	b.n	8027e7e <__assert_func+0x12>
 8027e96:	bf00      	nop
 8027e98:	20007788 	.word	0x20007788
 8027e9c:	0809c93f 	.word	0x0809c93f
 8027ea0:	0809c94c 	.word	0x0809c94c
 8027ea4:	0809c97a 	.word	0x0809c97a

08027ea8 <_calloc_r>:
 8027ea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027eaa:	fba1 2402 	umull	r2, r4, r1, r2
 8027eae:	b94c      	cbnz	r4, 8027ec4 <_calloc_r+0x1c>
 8027eb0:	4611      	mov	r1, r2
 8027eb2:	9201      	str	r2, [sp, #4]
 8027eb4:	f7fd fcfa 	bl	80258ac <_malloc_r>
 8027eb8:	9a01      	ldr	r2, [sp, #4]
 8027eba:	4605      	mov	r5, r0
 8027ebc:	b930      	cbnz	r0, 8027ecc <_calloc_r+0x24>
 8027ebe:	4628      	mov	r0, r5
 8027ec0:	b003      	add	sp, #12
 8027ec2:	bd30      	pop	{r4, r5, pc}
 8027ec4:	220c      	movs	r2, #12
 8027ec6:	6002      	str	r2, [r0, #0]
 8027ec8:	2500      	movs	r5, #0
 8027eca:	e7f8      	b.n	8027ebe <_calloc_r+0x16>
 8027ecc:	4621      	mov	r1, r4
 8027ece:	f7fe fb58 	bl	8026582 <memset>
 8027ed2:	e7f4      	b.n	8027ebe <_calloc_r+0x16>

08027ed4 <__ascii_mbtowc>:
 8027ed4:	b082      	sub	sp, #8
 8027ed6:	b901      	cbnz	r1, 8027eda <__ascii_mbtowc+0x6>
 8027ed8:	a901      	add	r1, sp, #4
 8027eda:	b142      	cbz	r2, 8027eee <__ascii_mbtowc+0x1a>
 8027edc:	b14b      	cbz	r3, 8027ef2 <__ascii_mbtowc+0x1e>
 8027ede:	7813      	ldrb	r3, [r2, #0]
 8027ee0:	600b      	str	r3, [r1, #0]
 8027ee2:	7812      	ldrb	r2, [r2, #0]
 8027ee4:	1e10      	subs	r0, r2, #0
 8027ee6:	bf18      	it	ne
 8027ee8:	2001      	movne	r0, #1
 8027eea:	b002      	add	sp, #8
 8027eec:	4770      	bx	lr
 8027eee:	4610      	mov	r0, r2
 8027ef0:	e7fb      	b.n	8027eea <__ascii_mbtowc+0x16>
 8027ef2:	f06f 0001 	mvn.w	r0, #1
 8027ef6:	e7f8      	b.n	8027eea <__ascii_mbtowc+0x16>

08027ef8 <__ascii_wctomb>:
 8027ef8:	b149      	cbz	r1, 8027f0e <__ascii_wctomb+0x16>
 8027efa:	2aff      	cmp	r2, #255	; 0xff
 8027efc:	bf85      	ittet	hi
 8027efe:	238a      	movhi	r3, #138	; 0x8a
 8027f00:	6003      	strhi	r3, [r0, #0]
 8027f02:	700a      	strbls	r2, [r1, #0]
 8027f04:	f04f 30ff 	movhi.w	r0, #4294967295
 8027f08:	bf98      	it	ls
 8027f0a:	2001      	movls	r0, #1
 8027f0c:	4770      	bx	lr
 8027f0e:	4608      	mov	r0, r1
 8027f10:	4770      	bx	lr
	...

08027f14 <fiprintf>:
 8027f14:	b40e      	push	{r1, r2, r3}
 8027f16:	b503      	push	{r0, r1, lr}
 8027f18:	4601      	mov	r1, r0
 8027f1a:	ab03      	add	r3, sp, #12
 8027f1c:	4805      	ldr	r0, [pc, #20]	; (8027f34 <fiprintf+0x20>)
 8027f1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8027f22:	6800      	ldr	r0, [r0, #0]
 8027f24:	9301      	str	r3, [sp, #4]
 8027f26:	f000 f837 	bl	8027f98 <_vfiprintf_r>
 8027f2a:	b002      	add	sp, #8
 8027f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8027f30:	b003      	add	sp, #12
 8027f32:	4770      	bx	lr
 8027f34:	20007788 	.word	0x20007788

08027f38 <abort>:
 8027f38:	b508      	push	{r3, lr}
 8027f3a:	2006      	movs	r0, #6
 8027f3c:	f000 fa04 	bl	8028348 <raise>
 8027f40:	2001      	movs	r0, #1
 8027f42:	f000 fe53 	bl	8028bec <_exit>

08027f46 <__sfputc_r>:
 8027f46:	6893      	ldr	r3, [r2, #8]
 8027f48:	3b01      	subs	r3, #1
 8027f4a:	2b00      	cmp	r3, #0
 8027f4c:	b410      	push	{r4}
 8027f4e:	6093      	str	r3, [r2, #8]
 8027f50:	da08      	bge.n	8027f64 <__sfputc_r+0x1e>
 8027f52:	6994      	ldr	r4, [r2, #24]
 8027f54:	42a3      	cmp	r3, r4
 8027f56:	db01      	blt.n	8027f5c <__sfputc_r+0x16>
 8027f58:	290a      	cmp	r1, #10
 8027f5a:	d103      	bne.n	8027f64 <__sfputc_r+0x1e>
 8027f5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027f60:	f000 b934 	b.w	80281cc <__swbuf_r>
 8027f64:	6813      	ldr	r3, [r2, #0]
 8027f66:	1c58      	adds	r0, r3, #1
 8027f68:	6010      	str	r0, [r2, #0]
 8027f6a:	7019      	strb	r1, [r3, #0]
 8027f6c:	4608      	mov	r0, r1
 8027f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027f72:	4770      	bx	lr

08027f74 <__sfputs_r>:
 8027f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027f76:	4606      	mov	r6, r0
 8027f78:	460f      	mov	r7, r1
 8027f7a:	4614      	mov	r4, r2
 8027f7c:	18d5      	adds	r5, r2, r3
 8027f7e:	42ac      	cmp	r4, r5
 8027f80:	d101      	bne.n	8027f86 <__sfputs_r+0x12>
 8027f82:	2000      	movs	r0, #0
 8027f84:	e007      	b.n	8027f96 <__sfputs_r+0x22>
 8027f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027f8a:	463a      	mov	r2, r7
 8027f8c:	4630      	mov	r0, r6
 8027f8e:	f7ff ffda 	bl	8027f46 <__sfputc_r>
 8027f92:	1c43      	adds	r3, r0, #1
 8027f94:	d1f3      	bne.n	8027f7e <__sfputs_r+0xa>
 8027f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08027f98 <_vfiprintf_r>:
 8027f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027f9c:	460d      	mov	r5, r1
 8027f9e:	b09d      	sub	sp, #116	; 0x74
 8027fa0:	4614      	mov	r4, r2
 8027fa2:	4698      	mov	r8, r3
 8027fa4:	4606      	mov	r6, r0
 8027fa6:	b118      	cbz	r0, 8027fb0 <_vfiprintf_r+0x18>
 8027fa8:	6a03      	ldr	r3, [r0, #32]
 8027faa:	b90b      	cbnz	r3, 8027fb0 <_vfiprintf_r+0x18>
 8027fac:	f7fe fa02 	bl	80263b4 <__sinit>
 8027fb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027fb2:	07d9      	lsls	r1, r3, #31
 8027fb4:	d405      	bmi.n	8027fc2 <_vfiprintf_r+0x2a>
 8027fb6:	89ab      	ldrh	r3, [r5, #12]
 8027fb8:	059a      	lsls	r2, r3, #22
 8027fba:	d402      	bmi.n	8027fc2 <_vfiprintf_r+0x2a>
 8027fbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027fbe:	f7fe fb70 	bl	80266a2 <__retarget_lock_acquire_recursive>
 8027fc2:	89ab      	ldrh	r3, [r5, #12]
 8027fc4:	071b      	lsls	r3, r3, #28
 8027fc6:	d501      	bpl.n	8027fcc <_vfiprintf_r+0x34>
 8027fc8:	692b      	ldr	r3, [r5, #16]
 8027fca:	b99b      	cbnz	r3, 8027ff4 <_vfiprintf_r+0x5c>
 8027fcc:	4629      	mov	r1, r5
 8027fce:	4630      	mov	r0, r6
 8027fd0:	f000 f93a 	bl	8028248 <__swsetup_r>
 8027fd4:	b170      	cbz	r0, 8027ff4 <_vfiprintf_r+0x5c>
 8027fd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027fd8:	07dc      	lsls	r4, r3, #31
 8027fda:	d504      	bpl.n	8027fe6 <_vfiprintf_r+0x4e>
 8027fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8027fe0:	b01d      	add	sp, #116	; 0x74
 8027fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027fe6:	89ab      	ldrh	r3, [r5, #12]
 8027fe8:	0598      	lsls	r0, r3, #22
 8027fea:	d4f7      	bmi.n	8027fdc <_vfiprintf_r+0x44>
 8027fec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027fee:	f7fe fb59 	bl	80266a4 <__retarget_lock_release_recursive>
 8027ff2:	e7f3      	b.n	8027fdc <_vfiprintf_r+0x44>
 8027ff4:	2300      	movs	r3, #0
 8027ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8027ff8:	2320      	movs	r3, #32
 8027ffa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8027ffe:	f8cd 800c 	str.w	r8, [sp, #12]
 8028002:	2330      	movs	r3, #48	; 0x30
 8028004:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80281b8 <_vfiprintf_r+0x220>
 8028008:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802800c:	f04f 0901 	mov.w	r9, #1
 8028010:	4623      	mov	r3, r4
 8028012:	469a      	mov	sl, r3
 8028014:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028018:	b10a      	cbz	r2, 802801e <_vfiprintf_r+0x86>
 802801a:	2a25      	cmp	r2, #37	; 0x25
 802801c:	d1f9      	bne.n	8028012 <_vfiprintf_r+0x7a>
 802801e:	ebba 0b04 	subs.w	fp, sl, r4
 8028022:	d00b      	beq.n	802803c <_vfiprintf_r+0xa4>
 8028024:	465b      	mov	r3, fp
 8028026:	4622      	mov	r2, r4
 8028028:	4629      	mov	r1, r5
 802802a:	4630      	mov	r0, r6
 802802c:	f7ff ffa2 	bl	8027f74 <__sfputs_r>
 8028030:	3001      	adds	r0, #1
 8028032:	f000 80a9 	beq.w	8028188 <_vfiprintf_r+0x1f0>
 8028036:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028038:	445a      	add	r2, fp
 802803a:	9209      	str	r2, [sp, #36]	; 0x24
 802803c:	f89a 3000 	ldrb.w	r3, [sl]
 8028040:	2b00      	cmp	r3, #0
 8028042:	f000 80a1 	beq.w	8028188 <_vfiprintf_r+0x1f0>
 8028046:	2300      	movs	r3, #0
 8028048:	f04f 32ff 	mov.w	r2, #4294967295
 802804c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8028050:	f10a 0a01 	add.w	sl, sl, #1
 8028054:	9304      	str	r3, [sp, #16]
 8028056:	9307      	str	r3, [sp, #28]
 8028058:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802805c:	931a      	str	r3, [sp, #104]	; 0x68
 802805e:	4654      	mov	r4, sl
 8028060:	2205      	movs	r2, #5
 8028062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028066:	4854      	ldr	r0, [pc, #336]	; (80281b8 <_vfiprintf_r+0x220>)
 8028068:	f7d8 f94a 	bl	8000300 <memchr>
 802806c:	9a04      	ldr	r2, [sp, #16]
 802806e:	b9d8      	cbnz	r0, 80280a8 <_vfiprintf_r+0x110>
 8028070:	06d1      	lsls	r1, r2, #27
 8028072:	bf44      	itt	mi
 8028074:	2320      	movmi	r3, #32
 8028076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802807a:	0713      	lsls	r3, r2, #28
 802807c:	bf44      	itt	mi
 802807e:	232b      	movmi	r3, #43	; 0x2b
 8028080:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028084:	f89a 3000 	ldrb.w	r3, [sl]
 8028088:	2b2a      	cmp	r3, #42	; 0x2a
 802808a:	d015      	beq.n	80280b8 <_vfiprintf_r+0x120>
 802808c:	9a07      	ldr	r2, [sp, #28]
 802808e:	4654      	mov	r4, sl
 8028090:	2000      	movs	r0, #0
 8028092:	f04f 0c0a 	mov.w	ip, #10
 8028096:	4621      	mov	r1, r4
 8028098:	f811 3b01 	ldrb.w	r3, [r1], #1
 802809c:	3b30      	subs	r3, #48	; 0x30
 802809e:	2b09      	cmp	r3, #9
 80280a0:	d94d      	bls.n	802813e <_vfiprintf_r+0x1a6>
 80280a2:	b1b0      	cbz	r0, 80280d2 <_vfiprintf_r+0x13a>
 80280a4:	9207      	str	r2, [sp, #28]
 80280a6:	e014      	b.n	80280d2 <_vfiprintf_r+0x13a>
 80280a8:	eba0 0308 	sub.w	r3, r0, r8
 80280ac:	fa09 f303 	lsl.w	r3, r9, r3
 80280b0:	4313      	orrs	r3, r2
 80280b2:	9304      	str	r3, [sp, #16]
 80280b4:	46a2      	mov	sl, r4
 80280b6:	e7d2      	b.n	802805e <_vfiprintf_r+0xc6>
 80280b8:	9b03      	ldr	r3, [sp, #12]
 80280ba:	1d19      	adds	r1, r3, #4
 80280bc:	681b      	ldr	r3, [r3, #0]
 80280be:	9103      	str	r1, [sp, #12]
 80280c0:	2b00      	cmp	r3, #0
 80280c2:	bfbb      	ittet	lt
 80280c4:	425b      	neglt	r3, r3
 80280c6:	f042 0202 	orrlt.w	r2, r2, #2
 80280ca:	9307      	strge	r3, [sp, #28]
 80280cc:	9307      	strlt	r3, [sp, #28]
 80280ce:	bfb8      	it	lt
 80280d0:	9204      	strlt	r2, [sp, #16]
 80280d2:	7823      	ldrb	r3, [r4, #0]
 80280d4:	2b2e      	cmp	r3, #46	; 0x2e
 80280d6:	d10c      	bne.n	80280f2 <_vfiprintf_r+0x15a>
 80280d8:	7863      	ldrb	r3, [r4, #1]
 80280da:	2b2a      	cmp	r3, #42	; 0x2a
 80280dc:	d134      	bne.n	8028148 <_vfiprintf_r+0x1b0>
 80280de:	9b03      	ldr	r3, [sp, #12]
 80280e0:	1d1a      	adds	r2, r3, #4
 80280e2:	681b      	ldr	r3, [r3, #0]
 80280e4:	9203      	str	r2, [sp, #12]
 80280e6:	2b00      	cmp	r3, #0
 80280e8:	bfb8      	it	lt
 80280ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80280ee:	3402      	adds	r4, #2
 80280f0:	9305      	str	r3, [sp, #20]
 80280f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80281c8 <_vfiprintf_r+0x230>
 80280f6:	7821      	ldrb	r1, [r4, #0]
 80280f8:	2203      	movs	r2, #3
 80280fa:	4650      	mov	r0, sl
 80280fc:	f7d8 f900 	bl	8000300 <memchr>
 8028100:	b138      	cbz	r0, 8028112 <_vfiprintf_r+0x17a>
 8028102:	9b04      	ldr	r3, [sp, #16]
 8028104:	eba0 000a 	sub.w	r0, r0, sl
 8028108:	2240      	movs	r2, #64	; 0x40
 802810a:	4082      	lsls	r2, r0
 802810c:	4313      	orrs	r3, r2
 802810e:	3401      	adds	r4, #1
 8028110:	9304      	str	r3, [sp, #16]
 8028112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028116:	4829      	ldr	r0, [pc, #164]	; (80281bc <_vfiprintf_r+0x224>)
 8028118:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802811c:	2206      	movs	r2, #6
 802811e:	f7d8 f8ef 	bl	8000300 <memchr>
 8028122:	2800      	cmp	r0, #0
 8028124:	d03f      	beq.n	80281a6 <_vfiprintf_r+0x20e>
 8028126:	4b26      	ldr	r3, [pc, #152]	; (80281c0 <_vfiprintf_r+0x228>)
 8028128:	bb1b      	cbnz	r3, 8028172 <_vfiprintf_r+0x1da>
 802812a:	9b03      	ldr	r3, [sp, #12]
 802812c:	3307      	adds	r3, #7
 802812e:	f023 0307 	bic.w	r3, r3, #7
 8028132:	3308      	adds	r3, #8
 8028134:	9303      	str	r3, [sp, #12]
 8028136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028138:	443b      	add	r3, r7
 802813a:	9309      	str	r3, [sp, #36]	; 0x24
 802813c:	e768      	b.n	8028010 <_vfiprintf_r+0x78>
 802813e:	fb0c 3202 	mla	r2, ip, r2, r3
 8028142:	460c      	mov	r4, r1
 8028144:	2001      	movs	r0, #1
 8028146:	e7a6      	b.n	8028096 <_vfiprintf_r+0xfe>
 8028148:	2300      	movs	r3, #0
 802814a:	3401      	adds	r4, #1
 802814c:	9305      	str	r3, [sp, #20]
 802814e:	4619      	mov	r1, r3
 8028150:	f04f 0c0a 	mov.w	ip, #10
 8028154:	4620      	mov	r0, r4
 8028156:	f810 2b01 	ldrb.w	r2, [r0], #1
 802815a:	3a30      	subs	r2, #48	; 0x30
 802815c:	2a09      	cmp	r2, #9
 802815e:	d903      	bls.n	8028168 <_vfiprintf_r+0x1d0>
 8028160:	2b00      	cmp	r3, #0
 8028162:	d0c6      	beq.n	80280f2 <_vfiprintf_r+0x15a>
 8028164:	9105      	str	r1, [sp, #20]
 8028166:	e7c4      	b.n	80280f2 <_vfiprintf_r+0x15a>
 8028168:	fb0c 2101 	mla	r1, ip, r1, r2
 802816c:	4604      	mov	r4, r0
 802816e:	2301      	movs	r3, #1
 8028170:	e7f0      	b.n	8028154 <_vfiprintf_r+0x1bc>
 8028172:	ab03      	add	r3, sp, #12
 8028174:	9300      	str	r3, [sp, #0]
 8028176:	462a      	mov	r2, r5
 8028178:	4b12      	ldr	r3, [pc, #72]	; (80281c4 <_vfiprintf_r+0x22c>)
 802817a:	a904      	add	r1, sp, #16
 802817c:	4630      	mov	r0, r6
 802817e:	f7fd fce3 	bl	8025b48 <_printf_float>
 8028182:	4607      	mov	r7, r0
 8028184:	1c78      	adds	r0, r7, #1
 8028186:	d1d6      	bne.n	8028136 <_vfiprintf_r+0x19e>
 8028188:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802818a:	07d9      	lsls	r1, r3, #31
 802818c:	d405      	bmi.n	802819a <_vfiprintf_r+0x202>
 802818e:	89ab      	ldrh	r3, [r5, #12]
 8028190:	059a      	lsls	r2, r3, #22
 8028192:	d402      	bmi.n	802819a <_vfiprintf_r+0x202>
 8028194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028196:	f7fe fa85 	bl	80266a4 <__retarget_lock_release_recursive>
 802819a:	89ab      	ldrh	r3, [r5, #12]
 802819c:	065b      	lsls	r3, r3, #25
 802819e:	f53f af1d 	bmi.w	8027fdc <_vfiprintf_r+0x44>
 80281a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80281a4:	e71c      	b.n	8027fe0 <_vfiprintf_r+0x48>
 80281a6:	ab03      	add	r3, sp, #12
 80281a8:	9300      	str	r3, [sp, #0]
 80281aa:	462a      	mov	r2, r5
 80281ac:	4b05      	ldr	r3, [pc, #20]	; (80281c4 <_vfiprintf_r+0x22c>)
 80281ae:	a904      	add	r1, sp, #16
 80281b0:	4630      	mov	r0, r6
 80281b2:	f7fd ff51 	bl	8026058 <_printf_i>
 80281b6:	e7e4      	b.n	8028182 <_vfiprintf_r+0x1ea>
 80281b8:	0809c924 	.word	0x0809c924
 80281bc:	0809c92e 	.word	0x0809c92e
 80281c0:	08025b49 	.word	0x08025b49
 80281c4:	08027f75 	.word	0x08027f75
 80281c8:	0809c92a 	.word	0x0809c92a

080281cc <__swbuf_r>:
 80281cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80281ce:	460e      	mov	r6, r1
 80281d0:	4614      	mov	r4, r2
 80281d2:	4605      	mov	r5, r0
 80281d4:	b118      	cbz	r0, 80281de <__swbuf_r+0x12>
 80281d6:	6a03      	ldr	r3, [r0, #32]
 80281d8:	b90b      	cbnz	r3, 80281de <__swbuf_r+0x12>
 80281da:	f7fe f8eb 	bl	80263b4 <__sinit>
 80281de:	69a3      	ldr	r3, [r4, #24]
 80281e0:	60a3      	str	r3, [r4, #8]
 80281e2:	89a3      	ldrh	r3, [r4, #12]
 80281e4:	071a      	lsls	r2, r3, #28
 80281e6:	d525      	bpl.n	8028234 <__swbuf_r+0x68>
 80281e8:	6923      	ldr	r3, [r4, #16]
 80281ea:	b31b      	cbz	r3, 8028234 <__swbuf_r+0x68>
 80281ec:	6823      	ldr	r3, [r4, #0]
 80281ee:	6922      	ldr	r2, [r4, #16]
 80281f0:	1a98      	subs	r0, r3, r2
 80281f2:	6963      	ldr	r3, [r4, #20]
 80281f4:	b2f6      	uxtb	r6, r6
 80281f6:	4283      	cmp	r3, r0
 80281f8:	4637      	mov	r7, r6
 80281fa:	dc04      	bgt.n	8028206 <__swbuf_r+0x3a>
 80281fc:	4621      	mov	r1, r4
 80281fe:	4628      	mov	r0, r5
 8028200:	f7ff fe0c 	bl	8027e1c <_fflush_r>
 8028204:	b9e0      	cbnz	r0, 8028240 <__swbuf_r+0x74>
 8028206:	68a3      	ldr	r3, [r4, #8]
 8028208:	3b01      	subs	r3, #1
 802820a:	60a3      	str	r3, [r4, #8]
 802820c:	6823      	ldr	r3, [r4, #0]
 802820e:	1c5a      	adds	r2, r3, #1
 8028210:	6022      	str	r2, [r4, #0]
 8028212:	701e      	strb	r6, [r3, #0]
 8028214:	6962      	ldr	r2, [r4, #20]
 8028216:	1c43      	adds	r3, r0, #1
 8028218:	429a      	cmp	r2, r3
 802821a:	d004      	beq.n	8028226 <__swbuf_r+0x5a>
 802821c:	89a3      	ldrh	r3, [r4, #12]
 802821e:	07db      	lsls	r3, r3, #31
 8028220:	d506      	bpl.n	8028230 <__swbuf_r+0x64>
 8028222:	2e0a      	cmp	r6, #10
 8028224:	d104      	bne.n	8028230 <__swbuf_r+0x64>
 8028226:	4621      	mov	r1, r4
 8028228:	4628      	mov	r0, r5
 802822a:	f7ff fdf7 	bl	8027e1c <_fflush_r>
 802822e:	b938      	cbnz	r0, 8028240 <__swbuf_r+0x74>
 8028230:	4638      	mov	r0, r7
 8028232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028234:	4621      	mov	r1, r4
 8028236:	4628      	mov	r0, r5
 8028238:	f000 f806 	bl	8028248 <__swsetup_r>
 802823c:	2800      	cmp	r0, #0
 802823e:	d0d5      	beq.n	80281ec <__swbuf_r+0x20>
 8028240:	f04f 37ff 	mov.w	r7, #4294967295
 8028244:	e7f4      	b.n	8028230 <__swbuf_r+0x64>
	...

08028248 <__swsetup_r>:
 8028248:	b538      	push	{r3, r4, r5, lr}
 802824a:	4b2a      	ldr	r3, [pc, #168]	; (80282f4 <__swsetup_r+0xac>)
 802824c:	4605      	mov	r5, r0
 802824e:	6818      	ldr	r0, [r3, #0]
 8028250:	460c      	mov	r4, r1
 8028252:	b118      	cbz	r0, 802825c <__swsetup_r+0x14>
 8028254:	6a03      	ldr	r3, [r0, #32]
 8028256:	b90b      	cbnz	r3, 802825c <__swsetup_r+0x14>
 8028258:	f7fe f8ac 	bl	80263b4 <__sinit>
 802825c:	89a3      	ldrh	r3, [r4, #12]
 802825e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028262:	0718      	lsls	r0, r3, #28
 8028264:	d422      	bmi.n	80282ac <__swsetup_r+0x64>
 8028266:	06d9      	lsls	r1, r3, #27
 8028268:	d407      	bmi.n	802827a <__swsetup_r+0x32>
 802826a:	2309      	movs	r3, #9
 802826c:	602b      	str	r3, [r5, #0]
 802826e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8028272:	81a3      	strh	r3, [r4, #12]
 8028274:	f04f 30ff 	mov.w	r0, #4294967295
 8028278:	e034      	b.n	80282e4 <__swsetup_r+0x9c>
 802827a:	0758      	lsls	r0, r3, #29
 802827c:	d512      	bpl.n	80282a4 <__swsetup_r+0x5c>
 802827e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028280:	b141      	cbz	r1, 8028294 <__swsetup_r+0x4c>
 8028282:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028286:	4299      	cmp	r1, r3
 8028288:	d002      	beq.n	8028290 <__swsetup_r+0x48>
 802828a:	4628      	mov	r0, r5
 802828c:	f7ff f818 	bl	80272c0 <_free_r>
 8028290:	2300      	movs	r3, #0
 8028292:	6363      	str	r3, [r4, #52]	; 0x34
 8028294:	89a3      	ldrh	r3, [r4, #12]
 8028296:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802829a:	81a3      	strh	r3, [r4, #12]
 802829c:	2300      	movs	r3, #0
 802829e:	6063      	str	r3, [r4, #4]
 80282a0:	6923      	ldr	r3, [r4, #16]
 80282a2:	6023      	str	r3, [r4, #0]
 80282a4:	89a3      	ldrh	r3, [r4, #12]
 80282a6:	f043 0308 	orr.w	r3, r3, #8
 80282aa:	81a3      	strh	r3, [r4, #12]
 80282ac:	6923      	ldr	r3, [r4, #16]
 80282ae:	b94b      	cbnz	r3, 80282c4 <__swsetup_r+0x7c>
 80282b0:	89a3      	ldrh	r3, [r4, #12]
 80282b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80282b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80282ba:	d003      	beq.n	80282c4 <__swsetup_r+0x7c>
 80282bc:	4621      	mov	r1, r4
 80282be:	4628      	mov	r0, r5
 80282c0:	f000 f884 	bl	80283cc <__smakebuf_r>
 80282c4:	89a0      	ldrh	r0, [r4, #12]
 80282c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80282ca:	f010 0301 	ands.w	r3, r0, #1
 80282ce:	d00a      	beq.n	80282e6 <__swsetup_r+0x9e>
 80282d0:	2300      	movs	r3, #0
 80282d2:	60a3      	str	r3, [r4, #8]
 80282d4:	6963      	ldr	r3, [r4, #20]
 80282d6:	425b      	negs	r3, r3
 80282d8:	61a3      	str	r3, [r4, #24]
 80282da:	6923      	ldr	r3, [r4, #16]
 80282dc:	b943      	cbnz	r3, 80282f0 <__swsetup_r+0xa8>
 80282de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80282e2:	d1c4      	bne.n	802826e <__swsetup_r+0x26>
 80282e4:	bd38      	pop	{r3, r4, r5, pc}
 80282e6:	0781      	lsls	r1, r0, #30
 80282e8:	bf58      	it	pl
 80282ea:	6963      	ldrpl	r3, [r4, #20]
 80282ec:	60a3      	str	r3, [r4, #8]
 80282ee:	e7f4      	b.n	80282da <__swsetup_r+0x92>
 80282f0:	2000      	movs	r0, #0
 80282f2:	e7f7      	b.n	80282e4 <__swsetup_r+0x9c>
 80282f4:	20007788 	.word	0x20007788

080282f8 <_raise_r>:
 80282f8:	291f      	cmp	r1, #31
 80282fa:	b538      	push	{r3, r4, r5, lr}
 80282fc:	4604      	mov	r4, r0
 80282fe:	460d      	mov	r5, r1
 8028300:	d904      	bls.n	802830c <_raise_r+0x14>
 8028302:	2316      	movs	r3, #22
 8028304:	6003      	str	r3, [r0, #0]
 8028306:	f04f 30ff 	mov.w	r0, #4294967295
 802830a:	bd38      	pop	{r3, r4, r5, pc}
 802830c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 802830e:	b112      	cbz	r2, 8028316 <_raise_r+0x1e>
 8028310:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8028314:	b94b      	cbnz	r3, 802832a <_raise_r+0x32>
 8028316:	4620      	mov	r0, r4
 8028318:	f000 f830 	bl	802837c <_getpid_r>
 802831c:	462a      	mov	r2, r5
 802831e:	4601      	mov	r1, r0
 8028320:	4620      	mov	r0, r4
 8028322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028326:	f000 b817 	b.w	8028358 <_kill_r>
 802832a:	2b01      	cmp	r3, #1
 802832c:	d00a      	beq.n	8028344 <_raise_r+0x4c>
 802832e:	1c59      	adds	r1, r3, #1
 8028330:	d103      	bne.n	802833a <_raise_r+0x42>
 8028332:	2316      	movs	r3, #22
 8028334:	6003      	str	r3, [r0, #0]
 8028336:	2001      	movs	r0, #1
 8028338:	e7e7      	b.n	802830a <_raise_r+0x12>
 802833a:	2400      	movs	r4, #0
 802833c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8028340:	4628      	mov	r0, r5
 8028342:	4798      	blx	r3
 8028344:	2000      	movs	r0, #0
 8028346:	e7e0      	b.n	802830a <_raise_r+0x12>

08028348 <raise>:
 8028348:	4b02      	ldr	r3, [pc, #8]	; (8028354 <raise+0xc>)
 802834a:	4601      	mov	r1, r0
 802834c:	6818      	ldr	r0, [r3, #0]
 802834e:	f7ff bfd3 	b.w	80282f8 <_raise_r>
 8028352:	bf00      	nop
 8028354:	20007788 	.word	0x20007788

08028358 <_kill_r>:
 8028358:	b538      	push	{r3, r4, r5, lr}
 802835a:	4d07      	ldr	r5, [pc, #28]	; (8028378 <_kill_r+0x20>)
 802835c:	2300      	movs	r3, #0
 802835e:	4604      	mov	r4, r0
 8028360:	4608      	mov	r0, r1
 8028362:	4611      	mov	r1, r2
 8028364:	602b      	str	r3, [r5, #0]
 8028366:	f000 fc13 	bl	8028b90 <_kill>
 802836a:	1c43      	adds	r3, r0, #1
 802836c:	d102      	bne.n	8028374 <_kill_r+0x1c>
 802836e:	682b      	ldr	r3, [r5, #0]
 8028370:	b103      	cbz	r3, 8028374 <_kill_r+0x1c>
 8028372:	6023      	str	r3, [r4, #0]
 8028374:	bd38      	pop	{r3, r4, r5, pc}
 8028376:	bf00      	nop
 8028378:	2000a510 	.word	0x2000a510

0802837c <_getpid_r>:
 802837c:	f000 bbf8 	b.w	8028b70 <_getpid>

08028380 <__swhatbuf_r>:
 8028380:	b570      	push	{r4, r5, r6, lr}
 8028382:	460c      	mov	r4, r1
 8028384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028388:	2900      	cmp	r1, #0
 802838a:	b096      	sub	sp, #88	; 0x58
 802838c:	4615      	mov	r5, r2
 802838e:	461e      	mov	r6, r3
 8028390:	da0d      	bge.n	80283ae <__swhatbuf_r+0x2e>
 8028392:	89a3      	ldrh	r3, [r4, #12]
 8028394:	f013 0f80 	tst.w	r3, #128	; 0x80
 8028398:	f04f 0100 	mov.w	r1, #0
 802839c:	bf0c      	ite	eq
 802839e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80283a2:	2340      	movne	r3, #64	; 0x40
 80283a4:	2000      	movs	r0, #0
 80283a6:	6031      	str	r1, [r6, #0]
 80283a8:	602b      	str	r3, [r5, #0]
 80283aa:	b016      	add	sp, #88	; 0x58
 80283ac:	bd70      	pop	{r4, r5, r6, pc}
 80283ae:	466a      	mov	r2, sp
 80283b0:	f000 f848 	bl	8028444 <_fstat_r>
 80283b4:	2800      	cmp	r0, #0
 80283b6:	dbec      	blt.n	8028392 <__swhatbuf_r+0x12>
 80283b8:	9901      	ldr	r1, [sp, #4]
 80283ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80283be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80283c2:	4259      	negs	r1, r3
 80283c4:	4159      	adcs	r1, r3
 80283c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80283ca:	e7eb      	b.n	80283a4 <__swhatbuf_r+0x24>

080283cc <__smakebuf_r>:
 80283cc:	898b      	ldrh	r3, [r1, #12]
 80283ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80283d0:	079d      	lsls	r5, r3, #30
 80283d2:	4606      	mov	r6, r0
 80283d4:	460c      	mov	r4, r1
 80283d6:	d507      	bpl.n	80283e8 <__smakebuf_r+0x1c>
 80283d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80283dc:	6023      	str	r3, [r4, #0]
 80283de:	6123      	str	r3, [r4, #16]
 80283e0:	2301      	movs	r3, #1
 80283e2:	6163      	str	r3, [r4, #20]
 80283e4:	b002      	add	sp, #8
 80283e6:	bd70      	pop	{r4, r5, r6, pc}
 80283e8:	ab01      	add	r3, sp, #4
 80283ea:	466a      	mov	r2, sp
 80283ec:	f7ff ffc8 	bl	8028380 <__swhatbuf_r>
 80283f0:	9900      	ldr	r1, [sp, #0]
 80283f2:	4605      	mov	r5, r0
 80283f4:	4630      	mov	r0, r6
 80283f6:	f7fd fa59 	bl	80258ac <_malloc_r>
 80283fa:	b948      	cbnz	r0, 8028410 <__smakebuf_r+0x44>
 80283fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028400:	059a      	lsls	r2, r3, #22
 8028402:	d4ef      	bmi.n	80283e4 <__smakebuf_r+0x18>
 8028404:	f023 0303 	bic.w	r3, r3, #3
 8028408:	f043 0302 	orr.w	r3, r3, #2
 802840c:	81a3      	strh	r3, [r4, #12]
 802840e:	e7e3      	b.n	80283d8 <__smakebuf_r+0xc>
 8028410:	89a3      	ldrh	r3, [r4, #12]
 8028412:	6020      	str	r0, [r4, #0]
 8028414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8028418:	81a3      	strh	r3, [r4, #12]
 802841a:	9b00      	ldr	r3, [sp, #0]
 802841c:	6163      	str	r3, [r4, #20]
 802841e:	9b01      	ldr	r3, [sp, #4]
 8028420:	6120      	str	r0, [r4, #16]
 8028422:	b15b      	cbz	r3, 802843c <__smakebuf_r+0x70>
 8028424:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028428:	4630      	mov	r0, r6
 802842a:	f000 f81d 	bl	8028468 <_isatty_r>
 802842e:	b128      	cbz	r0, 802843c <__smakebuf_r+0x70>
 8028430:	89a3      	ldrh	r3, [r4, #12]
 8028432:	f023 0303 	bic.w	r3, r3, #3
 8028436:	f043 0301 	orr.w	r3, r3, #1
 802843a:	81a3      	strh	r3, [r4, #12]
 802843c:	89a3      	ldrh	r3, [r4, #12]
 802843e:	431d      	orrs	r5, r3
 8028440:	81a5      	strh	r5, [r4, #12]
 8028442:	e7cf      	b.n	80283e4 <__smakebuf_r+0x18>

08028444 <_fstat_r>:
 8028444:	b538      	push	{r3, r4, r5, lr}
 8028446:	4d07      	ldr	r5, [pc, #28]	; (8028464 <_fstat_r+0x20>)
 8028448:	2300      	movs	r3, #0
 802844a:	4604      	mov	r4, r0
 802844c:	4608      	mov	r0, r1
 802844e:	4611      	mov	r1, r2
 8028450:	602b      	str	r3, [r5, #0]
 8028452:	f000 fb85 	bl	8028b60 <_fstat>
 8028456:	1c43      	adds	r3, r0, #1
 8028458:	d102      	bne.n	8028460 <_fstat_r+0x1c>
 802845a:	682b      	ldr	r3, [r5, #0]
 802845c:	b103      	cbz	r3, 8028460 <_fstat_r+0x1c>
 802845e:	6023      	str	r3, [r4, #0]
 8028460:	bd38      	pop	{r3, r4, r5, pc}
 8028462:	bf00      	nop
 8028464:	2000a510 	.word	0x2000a510

08028468 <_isatty_r>:
 8028468:	b538      	push	{r3, r4, r5, lr}
 802846a:	4d06      	ldr	r5, [pc, #24]	; (8028484 <_isatty_r+0x1c>)
 802846c:	2300      	movs	r3, #0
 802846e:	4604      	mov	r4, r0
 8028470:	4608      	mov	r0, r1
 8028472:	602b      	str	r3, [r5, #0]
 8028474:	f000 fb84 	bl	8028b80 <_isatty>
 8028478:	1c43      	adds	r3, r0, #1
 802847a:	d102      	bne.n	8028482 <_isatty_r+0x1a>
 802847c:	682b      	ldr	r3, [r5, #0]
 802847e:	b103      	cbz	r3, 8028482 <_isatty_r+0x1a>
 8028480:	6023      	str	r3, [r4, #0]
 8028482:	bd38      	pop	{r3, r4, r5, pc}
 8028484:	2000a510 	.word	0x2000a510

08028488 <with_errno>:
 8028488:	b513      	push	{r0, r1, r4, lr}
 802848a:	4604      	mov	r4, r0
 802848c:	ed8d 0b00 	vstr	d0, [sp]
 8028490:	f000 fb58 	bl	8028b44 <__errno>
 8028494:	ed9d 0b00 	vldr	d0, [sp]
 8028498:	6004      	str	r4, [r0, #0]
 802849a:	b002      	add	sp, #8
 802849c:	bd10      	pop	{r4, pc}
	...

080284a0 <__math_divzero>:
 80284a0:	b082      	sub	sp, #8
 80284a2:	2800      	cmp	r0, #0
 80284a4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80284a8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80284ac:	fe06 7b07 	vseleq.f64	d7, d6, d7
 80284b0:	ed8d 7b00 	vstr	d7, [sp]
 80284b4:	ed9d 0b00 	vldr	d0, [sp]
 80284b8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 80284c8 <__math_divzero+0x28>
 80284bc:	2022      	movs	r0, #34	; 0x22
 80284be:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80284c2:	b002      	add	sp, #8
 80284c4:	f7ff bfe0 	b.w	8028488 <with_errno>
	...

080284d0 <__math_invalid>:
 80284d0:	eeb0 7b40 	vmov.f64	d7, d0
 80284d4:	eeb4 7b47 	vcmp.f64	d7, d7
 80284d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80284dc:	ee30 6b40 	vsub.f64	d6, d0, d0
 80284e0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80284e4:	d602      	bvs.n	80284ec <__math_invalid+0x1c>
 80284e6:	2021      	movs	r0, #33	; 0x21
 80284e8:	f7ff bfce 	b.w	8028488 <with_errno>
 80284ec:	4770      	bx	lr
	...

080284f0 <log>:
 80284f0:	b470      	push	{r4, r5, r6}
 80284f2:	ee10 1a90 	vmov	r1, s1
 80284f6:	ee10 3a10 	vmov	r3, s0
 80284fa:	f04f 34ff 	mov.w	r4, #4294967295
 80284fe:	429c      	cmp	r4, r3
 8028500:	f101 4040 	add.w	r0, r1, #3221225472	; 0xc0000000
 8028504:	4c72      	ldr	r4, [pc, #456]	; (80286d0 <log+0x1e0>)
 8028506:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
 802850a:	4184      	sbcs	r4, r0
 802850c:	ed2d 8b02 	vpush	{d8}
 8028510:	ea4f 4211 	mov.w	r2, r1, lsr #16
 8028514:	d35a      	bcc.n	80285cc <log+0xdc>
 8028516:	4a6f      	ldr	r2, [pc, #444]	; (80286d4 <log+0x1e4>)
 8028518:	4291      	cmp	r1, r2
 802851a:	bf08      	it	eq
 802851c:	2b00      	cmpeq	r3, #0
 802851e:	f000 80c5 	beq.w	80286ac <log+0x1bc>
 8028522:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8028526:	ee30 0b47 	vsub.f64	d0, d0, d7
 802852a:	4b6b      	ldr	r3, [pc, #428]	; (80286d8 <log+0x1e8>)
 802852c:	ee20 2b00 	vmul.f64	d2, d0, d0
 8028530:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8028534:	ee20 4b02 	vmul.f64	d4, d0, d2
 8028538:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 802853c:	eea6 7b00 	vfma.f64	d7, d6, d0
 8028540:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8028544:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 8028548:	eea6 7b02 	vfma.f64	d7, d6, d2
 802854c:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8028550:	eea5 6b00 	vfma.f64	d6, d5, d0
 8028554:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 8028558:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 802855c:	eea5 6b02 	vfma.f64	d6, d5, d2
 8028560:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 8028564:	eea3 5b00 	vfma.f64	d5, d3, d0
 8028568:	ed93 3b20 	vldr	d3, [r3, #128]	; 0x80
 802856c:	eea3 5b02 	vfma.f64	d5, d3, d2
 8028570:	ed93 3b22 	vldr	d3, [r3, #136]	; 0x88
 8028574:	eea3 5b04 	vfma.f64	d5, d3, d4
 8028578:	eea5 6b04 	vfma.f64	d6, d5, d4
 802857c:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 8028580:	eea6 7b04 	vfma.f64	d7, d6, d4
 8028584:	eeb0 2b47 	vmov.f64	d2, d7
 8028588:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80286b8 <log+0x1c8>
 802858c:	eeb0 6b40 	vmov.f64	d6, d0
 8028590:	eeb0 3b40 	vmov.f64	d3, d0
 8028594:	eea0 6b07 	vfma.f64	d6, d0, d7
 8028598:	eea0 6b47 	vfms.f64	d6, d0, d7
 802859c:	ee30 8b46 	vsub.f64	d8, d0, d6
 80285a0:	ee26 1b06 	vmul.f64	d1, d6, d6
 80285a4:	eea1 3b05 	vfma.f64	d3, d1, d5
 80285a8:	ee30 7b43 	vsub.f64	d7, d0, d3
 80285ac:	ee30 0b06 	vadd.f64	d0, d0, d6
 80285b0:	eea1 7b05 	vfma.f64	d7, d1, d5
 80285b4:	ee25 5b08 	vmul.f64	d5, d5, d8
 80285b8:	eea5 7b00 	vfma.f64	d7, d5, d0
 80285bc:	eea2 7b04 	vfma.f64	d7, d2, d4
 80285c0:	ee33 0b07 	vadd.f64	d0, d3, d7
 80285c4:	ecbd 8b02 	vpop	{d8}
 80285c8:	bc70      	pop	{r4, r5, r6}
 80285ca:	4770      	bx	lr
 80285cc:	f1a2 0410 	sub.w	r4, r2, #16
 80285d0:	f647 70df 	movw	r0, #32735	; 0x7fdf
 80285d4:	4284      	cmp	r4, r0
 80285d6:	d924      	bls.n	8028622 <log+0x132>
 80285d8:	18d8      	adds	r0, r3, r3
 80285da:	eb41 0401 	adc.w	r4, r1, r1
 80285de:	4320      	orrs	r0, r4
 80285e0:	d105      	bne.n	80285ee <log+0xfe>
 80285e2:	ecbd 8b02 	vpop	{d8}
 80285e6:	2001      	movs	r0, #1
 80285e8:	bc70      	pop	{r4, r5, r6}
 80285ea:	f7ff bf59 	b.w	80284a0 <__math_divzero>
 80285ee:	483b      	ldr	r0, [pc, #236]	; (80286dc <log+0x1ec>)
 80285f0:	4281      	cmp	r1, r0
 80285f2:	bf08      	it	eq
 80285f4:	2b00      	cmpeq	r3, #0
 80285f6:	d0e5      	beq.n	80285c4 <log+0xd4>
 80285f8:	0413      	lsls	r3, r2, #16
 80285fa:	d403      	bmi.n	8028604 <log+0x114>
 80285fc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8028600:	4393      	bics	r3, r2
 8028602:	d104      	bne.n	802860e <log+0x11e>
 8028604:	ecbd 8b02 	vpop	{d8}
 8028608:	bc70      	pop	{r4, r5, r6}
 802860a:	f7ff bf61 	b.w	80284d0 <__math_invalid>
 802860e:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 80286c0 <log+0x1d0>
 8028612:	ee20 7b07 	vmul.f64	d7, d0, d7
 8028616:	ec53 2b17 	vmov	r2, r3, d7
 802861a:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 802861e:	ee17 3a10 	vmov	r3, s14
 8028622:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8028626:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 802862a:	f502 12d0 	add.w	r2, r2, #1703936	; 0x1a0000
 802862e:	0d16      	lsrs	r6, r2, #20
 8028630:	1e1c      	subs	r4, r3, #0
 8028632:	4b29      	ldr	r3, [pc, #164]	; (80286d8 <log+0x1e8>)
 8028634:	f3c2 3046 	ubfx	r0, r2, #13, #7
 8028638:	0536      	lsls	r6, r6, #20
 802863a:	1b8d      	subs	r5, r1, r6
 802863c:	eb03 1100 	add.w	r1, r3, r0, lsl #4
 8028640:	ed91 7b24 	vldr	d7, [r1, #144]	; 0x90
 8028644:	ec45 4b16 	vmov	d6, r4, r5
 8028648:	1512      	asrs	r2, r2, #20
 802864a:	eea6 5b07 	vfma.f64	d5, d6, d7
 802864e:	ee07 2a90 	vmov	s15, r2
 8028652:	ee25 2b05 	vmul.f64	d2, d5, d5
 8028656:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 802865a:	ed93 4b00 	vldr	d4, [r3]
 802865e:	ee25 1b02 	vmul.f64	d1, d5, d2
 8028662:	ed91 7b26 	vldr	d7, [r1, #152]	; 0x98
 8028666:	eea4 7b06 	vfma.f64	d7, d4, d6
 802866a:	ee35 4b07 	vadd.f64	d4, d5, d7
 802866e:	ee37 0b44 	vsub.f64	d0, d7, d4
 8028672:	ed93 7b02 	vldr	d7, [r3, #8]
 8028676:	ee30 0b05 	vadd.f64	d0, d0, d5
 802867a:	eea7 0b06 	vfma.f64	d0, d7, d6
 802867e:	ed93 7b04 	vldr	d7, [r3, #16]
 8028682:	ed93 6b08 	vldr	d6, [r3, #32]
 8028686:	eea7 0b02 	vfma.f64	d0, d7, d2
 802868a:	ed93 7b06 	vldr	d7, [r3, #24]
 802868e:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8028692:	eea6 7b05 	vfma.f64	d7, d6, d5
 8028696:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 802869a:	eea3 6b05 	vfma.f64	d6, d3, d5
 802869e:	eea6 7b02 	vfma.f64	d7, d6, d2
 80286a2:	eea1 0b07 	vfma.f64	d0, d1, d7
 80286a6:	ee30 0b04 	vadd.f64	d0, d0, d4
 80286aa:	e78b      	b.n	80285c4 <log+0xd4>
 80286ac:	ed9f 0b06 	vldr	d0, [pc, #24]	; 80286c8 <log+0x1d8>
 80286b0:	e788      	b.n	80285c4 <log+0xd4>
 80286b2:	bf00      	nop
 80286b4:	f3af 8000 	nop.w
 80286b8:	00000000 	.word	0x00000000
 80286bc:	41a00000 	.word	0x41a00000
 80286c0:	00000000 	.word	0x00000000
 80286c4:	43300000 	.word	0x43300000
	...
 80286d0:	000308ff 	.word	0x000308ff
 80286d4:	3ff00000 	.word	0x3ff00000
 80286d8:	0809c980 	.word	0x0809c980
 80286dc:	7ff00000 	.word	0x7ff00000

080286e0 <expf>:
 80286e0:	ee10 2a10 	vmov	r2, s0
 80286e4:	f240 412a 	movw	r1, #1066	; 0x42a
 80286e8:	f3c2 530a 	ubfx	r3, r2, #20, #11
 80286ec:	428b      	cmp	r3, r1
 80286ee:	b430      	push	{r4, r5}
 80286f0:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80286f4:	d92a      	bls.n	802874c <expf+0x6c>
 80286f6:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 80286fa:	d058      	beq.n	80287ae <expf+0xce>
 80286fc:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8028700:	d303      	bcc.n	802870a <expf+0x2a>
 8028702:	ee30 0a00 	vadd.f32	s0, s0, s0
 8028706:	bc30      	pop	{r4, r5}
 8028708:	4770      	bx	lr
 802870a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80287b4 <expf+0xd4>
 802870e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8028712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028716:	dd03      	ble.n	8028720 <expf+0x40>
 8028718:	bc30      	pop	{r4, r5}
 802871a:	2000      	movs	r0, #0
 802871c:	f000 b9ea 	b.w	8028af4 <__math_oflowf>
 8028720:	eddf 7a25 	vldr	s15, [pc, #148]	; 80287b8 <expf+0xd8>
 8028724:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8028728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802872c:	d503      	bpl.n	8028736 <expf+0x56>
 802872e:	bc30      	pop	{r4, r5}
 8028730:	2000      	movs	r0, #0
 8028732:	f000 b9d3 	b.w	8028adc <__math_uflowf>
 8028736:	eddf 7a21 	vldr	s15, [pc, #132]	; 80287bc <expf+0xdc>
 802873a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802873e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028742:	d503      	bpl.n	802874c <expf+0x6c>
 8028744:	bc30      	pop	{r4, r5}
 8028746:	2000      	movs	r0, #0
 8028748:	f000 b9ce 	b.w	8028ae8 <__math_may_uflowf>
 802874c:	4b1c      	ldr	r3, [pc, #112]	; (80287c0 <expf+0xe0>)
 802874e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8028752:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 8028756:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 802875a:	eeb0 7b44 	vmov.f64	d7, d4
 802875e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8028762:	ee17 0a10 	vmov	r0, s14
 8028766:	ee37 7b44 	vsub.f64	d7, d7, d4
 802876a:	f000 021f 	and.w	r2, r0, #31
 802876e:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8028772:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 8028776:	ee27 4b07 	vmul.f64	d4, d7, d7
 802877a:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 802877e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8028782:	eea5 6b07 	vfma.f64	d6, d5, d7
 8028786:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 802878a:	684d      	ldr	r5, [r1, #4]
 802878c:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8028790:	2100      	movs	r1, #0
 8028792:	190a      	adds	r2, r1, r4
 8028794:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8028798:	eea5 0b07 	vfma.f64	d0, d5, d7
 802879c:	ec43 2b17 	vmov	d7, r2, r3
 80287a0:	eea6 0b04 	vfma.f64	d0, d6, d4
 80287a4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80287a8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80287ac:	e7ab      	b.n	8028706 <expf+0x26>
 80287ae:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80287c4 <expf+0xe4>
 80287b2:	e7a8      	b.n	8028706 <expf+0x26>
 80287b4:	42b17217 	.word	0x42b17217
 80287b8:	c2cff1b4 	.word	0xc2cff1b4
 80287bc:	c2ce8ecf 	.word	0xc2ce8ecf
 80287c0:	0809d210 	.word	0x0809d210
 80287c4:	00000000 	.word	0x00000000

080287c8 <checkint>:
 80287c8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80287cc:	2b7e      	cmp	r3, #126	; 0x7e
 80287ce:	dd10      	ble.n	80287f2 <checkint+0x2a>
 80287d0:	2b96      	cmp	r3, #150	; 0x96
 80287d2:	dc0c      	bgt.n	80287ee <checkint+0x26>
 80287d4:	2201      	movs	r2, #1
 80287d6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80287da:	fa02 f303 	lsl.w	r3, r2, r3
 80287de:	1e5a      	subs	r2, r3, #1
 80287e0:	4202      	tst	r2, r0
 80287e2:	d106      	bne.n	80287f2 <checkint+0x2a>
 80287e4:	4203      	tst	r3, r0
 80287e6:	bf0c      	ite	eq
 80287e8:	2002      	moveq	r0, #2
 80287ea:	2001      	movne	r0, #1
 80287ec:	4770      	bx	lr
 80287ee:	2002      	movs	r0, #2
 80287f0:	4770      	bx	lr
 80287f2:	2000      	movs	r0, #0
 80287f4:	4770      	bx	lr
	...

080287f8 <powf>:
 80287f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80287fa:	ee10 1a10 	vmov	r1, s0
 80287fe:	ee10 4a90 	vmov	r4, s1
 8028802:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8028806:	0062      	lsls	r2, r4, #1
 8028808:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 802880c:	eef0 7a40 	vmov.f32	s15, s0
 8028810:	f102 30ff 	add.w	r0, r2, #4294967295
 8028814:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8028818:	d252      	bcs.n	80288c0 <powf+0xc8>
 802881a:	4298      	cmp	r0, r3
 802881c:	d252      	bcs.n	80288c4 <powf+0xcc>
 802881e:	2000      	movs	r0, #0
 8028820:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 8028824:	4a9e      	ldr	r2, [pc, #632]	; (8028aa0 <powf+0x2a8>)
 8028826:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 802882a:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 802882e:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8028832:	0ddb      	lsrs	r3, r3, #23
 8028834:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8028838:	05db      	lsls	r3, r3, #23
 802883a:	ed94 5b00 	vldr	d5, [r4]
 802883e:	1ac9      	subs	r1, r1, r3
 8028840:	ee07 1a90 	vmov	s15, r1
 8028844:	15db      	asrs	r3, r3, #23
 8028846:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 802884a:	eea5 6b07 	vfma.f64	d6, d5, d7
 802884e:	ed94 5b02 	vldr	d5, [r4, #8]
 8028852:	ee26 2b06 	vmul.f64	d2, d6, d6
 8028856:	ee22 1b02 	vmul.f64	d1, d2, d2
 802885a:	ee07 3a90 	vmov	s15, r3
 802885e:	ed92 3b42 	vldr	d3, [r2, #264]	; 0x108
 8028862:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8028866:	ee37 7b05 	vadd.f64	d7, d7, d5
 802886a:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 802886e:	ed92 4b44 	vldr	d4, [r2, #272]	; 0x110
 8028872:	eea6 3b05 	vfma.f64	d3, d6, d5
 8028876:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 802887a:	eea6 5b04 	vfma.f64	d5, d6, d4
 802887e:	ed92 4b48 	vldr	d4, [r2, #288]	; 0x120
 8028882:	eea6 7b04 	vfma.f64	d7, d6, d4
 8028886:	eeb7 6ae0 	vcvt.f64.f32	d6, s1
 802888a:	eea2 7b05 	vfma.f64	d7, d2, d5
 802888e:	eea3 7b01 	vfma.f64	d7, d3, d1
 8028892:	ee26 6b07 	vmul.f64	d6, d6, d7
 8028896:	ee16 3a90 	vmov	r3, s13
 802889a:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 802889e:	f248 03bf 	movw	r3, #32959	; 0x80bf
 80288a2:	429a      	cmp	r2, r3
 80288a4:	f0c0 80b0 	bcc.w	8028a08 <powf+0x210>
 80288a8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8028a80 <powf+0x288>
 80288ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80288b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80288b4:	dd78      	ble.n	80289a8 <powf+0x1b0>
 80288b6:	b003      	add	sp, #12
 80288b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80288bc:	f000 b91a 	b.w	8028af4 <__math_oflowf>
 80288c0:	4298      	cmp	r0, r3
 80288c2:	d32d      	bcc.n	8028920 <powf+0x128>
 80288c4:	b952      	cbnz	r2, 80288dc <powf+0xe4>
 80288c6:	f481 0180 	eor.w	r1, r1, #4194304	; 0x400000
 80288ca:	0049      	lsls	r1, r1, #1
 80288cc:	f511 0f00 	cmn.w	r1, #8388608	; 0x800000
 80288d0:	f240 80c8 	bls.w	8028a64 <powf+0x26c>
 80288d4:	ee37 0aa0 	vadd.f32	s0, s15, s1
 80288d8:	b003      	add	sp, #12
 80288da:	bd30      	pop	{r4, r5, pc}
 80288dc:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 80288e0:	d105      	bne.n	80288ee <powf+0xf6>
 80288e2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 80288e6:	0064      	lsls	r4, r4, #1
 80288e8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80288ec:	e7f0      	b.n	80288d0 <powf+0xd8>
 80288ee:	0049      	lsls	r1, r1, #1
 80288f0:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 80288f4:	d8ee      	bhi.n	80288d4 <powf+0xdc>
 80288f6:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80288fa:	d1eb      	bne.n	80288d4 <powf+0xdc>
 80288fc:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 8028900:	f000 80b0 	beq.w	8028a64 <powf+0x26c>
 8028904:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 8028908:	ea6f 0404 	mvn.w	r4, r4
 802890c:	bf34      	ite	cc
 802890e:	2100      	movcc	r1, #0
 8028910:	2101      	movcs	r1, #1
 8028912:	0fe4      	lsrs	r4, r4, #31
 8028914:	42a1      	cmp	r1, r4
 8028916:	f040 80a8 	bne.w	8028a6a <powf+0x272>
 802891a:	ee20 0aa0 	vmul.f32	s0, s1, s1
 802891e:	e7db      	b.n	80288d8 <powf+0xe0>
 8028920:	004d      	lsls	r5, r1, #1
 8028922:	1e6a      	subs	r2, r5, #1
 8028924:	429a      	cmp	r2, r3
 8028926:	d31c      	bcc.n	8028962 <powf+0x16a>
 8028928:	2900      	cmp	r1, #0
 802892a:	ee20 0a00 	vmul.f32	s0, s0, s0
 802892e:	da0f      	bge.n	8028950 <powf+0x158>
 8028930:	ee10 0a90 	vmov	r0, s1
 8028934:	f7ff ff48 	bl	80287c8 <checkint>
 8028938:	2801      	cmp	r0, #1
 802893a:	d109      	bne.n	8028950 <powf+0x158>
 802893c:	eeb1 0a40 	vneg.f32	s0, s0
 8028940:	b945      	cbnz	r5, 8028954 <powf+0x15c>
 8028942:	2c00      	cmp	r4, #0
 8028944:	dac8      	bge.n	80288d8 <powf+0xe0>
 8028946:	b003      	add	sp, #12
 8028948:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802894c:	f000 b8d8 	b.w	8028b00 <__math_divzerof>
 8028950:	2000      	movs	r0, #0
 8028952:	e7f5      	b.n	8028940 <powf+0x148>
 8028954:	2c00      	cmp	r4, #0
 8028956:	dabf      	bge.n	80288d8 <powf+0xe0>
 8028958:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802895c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8028960:	e7ba      	b.n	80288d8 <powf+0xe0>
 8028962:	2900      	cmp	r1, #0
 8028964:	da1e      	bge.n	80289a4 <powf+0x1ac>
 8028966:	ee10 0a90 	vmov	r0, s1
 802896a:	f7ff ff2d 	bl	80287c8 <checkint>
 802896e:	b920      	cbnz	r0, 802897a <powf+0x182>
 8028970:	b003      	add	sp, #12
 8028972:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8028976:	f000 b8d5 	b.w	8028b24 <__math_invalidf>
 802897a:	1e43      	subs	r3, r0, #1
 802897c:	4258      	negs	r0, r3
 802897e:	4158      	adcs	r0, r3
 8028980:	0400      	lsls	r0, r0, #16
 8028982:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8028986:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 802898a:	f4bf af49 	bcs.w	8028820 <powf+0x28>
 802898e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8028aa4 <powf+0x2ac>
 8028992:	ee27 0a87 	vmul.f32	s0, s15, s14
 8028996:	ee10 3a10 	vmov	r3, s0
 802899a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802899e:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 80289a2:	e73d      	b.n	8028820 <powf+0x28>
 80289a4:	2000      	movs	r0, #0
 80289a6:	e7ee      	b.n	8028986 <powf+0x18e>
 80289a8:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8028a88 <powf+0x290>
 80289ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80289b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80289b4:	dd10      	ble.n	80289d8 <powf+0x1e0>
 80289b6:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 80289ba:	2800      	cmp	r0, #0
 80289bc:	d158      	bne.n	8028a70 <powf+0x278>
 80289be:	9300      	str	r3, [sp, #0]
 80289c0:	eddd 7a00 	vldr	s15, [sp]
 80289c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80289c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80289cc:	eef4 7a47 	vcmp.f32	s15, s14
 80289d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80289d4:	f47f af6f 	bne.w	80288b6 <powf+0xbe>
 80289d8:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8028a90 <powf+0x298>
 80289dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80289e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80289e4:	d804      	bhi.n	80289f0 <powf+0x1f8>
 80289e6:	b003      	add	sp, #12
 80289e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80289ec:	f000 b876 	b.w	8028adc <__math_uflowf>
 80289f0:	ed9f 7b29 	vldr	d7, [pc, #164]	; 8028a98 <powf+0x2a0>
 80289f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80289f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80289fc:	d504      	bpl.n	8028a08 <powf+0x210>
 80289fe:	b003      	add	sp, #12
 8028a00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8028a04:	f000 b870 	b.w	8028ae8 <__math_may_uflowf>
 8028a08:	4b27      	ldr	r3, [pc, #156]	; (8028aa8 <powf+0x2b0>)
 8028a0a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8028a0e:	ed93 5b40 	vldr	d5, [r3, #256]	; 0x100
 8028a12:	ee36 7b05 	vadd.f64	d7, d6, d5
 8028a16:	ee17 2a10 	vmov	r2, s14
 8028a1a:	ee37 7b45 	vsub.f64	d7, d7, d5
 8028a1e:	f002 011f 	and.w	r1, r2, #31
 8028a22:	ee36 7b47 	vsub.f64	d7, d6, d7
 8028a26:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8028a2a:	ee27 4b07 	vmul.f64	d4, d7, d7
 8028a2e:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8028a32:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8028a36:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8028a3a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8028a3e:	686d      	ldr	r5, [r5, #4]
 8028a40:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 8028a44:	1882      	adds	r2, r0, r2
 8028a46:	2300      	movs	r3, #0
 8028a48:	1918      	adds	r0, r3, r4
 8028a4a:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 8028a4e:	eea7 0b05 	vfma.f64	d0, d7, d5
 8028a52:	ec41 0b17 	vmov	d7, r0, r1
 8028a56:	eea6 0b04 	vfma.f64	d0, d6, d4
 8028a5a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8028a5e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8028a62:	e739      	b.n	80288d8 <powf+0xe0>
 8028a64:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8028a68:	e736      	b.n	80288d8 <powf+0xe0>
 8028a6a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8028aac <powf+0x2b4>
 8028a6e:	e733      	b.n	80288d8 <powf+0xe0>
 8028a70:	9301      	str	r3, [sp, #4]
 8028a72:	eddd 7a01 	vldr	s15, [sp, #4]
 8028a76:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8028a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8028a7e:	e7a5      	b.n	80289cc <powf+0x1d4>
 8028a80:	ffd1d571 	.word	0xffd1d571
 8028a84:	405fffff 	.word	0x405fffff
 8028a88:	ffa3aae2 	.word	0xffa3aae2
 8028a8c:	405fffff 	.word	0x405fffff
 8028a90:	00000000 	.word	0x00000000
 8028a94:	c062c000 	.word	0xc062c000
 8028a98:	00000000 	.word	0x00000000
 8028a9c:	c062a000 	.word	0xc062a000
 8028aa0:	0809d358 	.word	0x0809d358
 8028aa4:	4b000000 	.word	0x4b000000
 8028aa8:	0809d210 	.word	0x0809d210
 8028aac:	00000000 	.word	0x00000000

08028ab0 <with_errnof>:
 8028ab0:	b513      	push	{r0, r1, r4, lr}
 8028ab2:	4604      	mov	r4, r0
 8028ab4:	ed8d 0a01 	vstr	s0, [sp, #4]
 8028ab8:	f000 f844 	bl	8028b44 <__errno>
 8028abc:	ed9d 0a01 	vldr	s0, [sp, #4]
 8028ac0:	6004      	str	r4, [r0, #0]
 8028ac2:	b002      	add	sp, #8
 8028ac4:	bd10      	pop	{r4, pc}

08028ac6 <xflowf>:
 8028ac6:	b130      	cbz	r0, 8028ad6 <xflowf+0x10>
 8028ac8:	eef1 7a40 	vneg.f32	s15, s0
 8028acc:	ee27 0a80 	vmul.f32	s0, s15, s0
 8028ad0:	2022      	movs	r0, #34	; 0x22
 8028ad2:	f7ff bfed 	b.w	8028ab0 <with_errnof>
 8028ad6:	eef0 7a40 	vmov.f32	s15, s0
 8028ada:	e7f7      	b.n	8028acc <xflowf+0x6>

08028adc <__math_uflowf>:
 8028adc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8028ae4 <__math_uflowf+0x8>
 8028ae0:	f7ff bff1 	b.w	8028ac6 <xflowf>
 8028ae4:	10000000 	.word	0x10000000

08028ae8 <__math_may_uflowf>:
 8028ae8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8028af0 <__math_may_uflowf+0x8>
 8028aec:	f7ff bfeb 	b.w	8028ac6 <xflowf>
 8028af0:	1a200000 	.word	0x1a200000

08028af4 <__math_oflowf>:
 8028af4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8028afc <__math_oflowf+0x8>
 8028af8:	f7ff bfe5 	b.w	8028ac6 <xflowf>
 8028afc:	70000000 	.word	0x70000000

08028b00 <__math_divzerof>:
 8028b00:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8028b20 <__math_divzerof+0x20>
 8028b04:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8028b08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028b0c:	2800      	cmp	r0, #0
 8028b0e:	f04f 0022 	mov.w	r0, #34	; 0x22
 8028b12:	fe47 7a27 	vseleq.f32	s15, s14, s15
 8028b16:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8028b1a:	f7ff bfc9 	b.w	8028ab0 <with_errnof>
 8028b1e:	bf00      	nop
 8028b20:	00000000 	.word	0x00000000

08028b24 <__math_invalidf>:
 8028b24:	eef0 7a40 	vmov.f32	s15, s0
 8028b28:	ee30 7a40 	vsub.f32	s14, s0, s0
 8028b2c:	eef4 7a67 	vcmp.f32	s15, s15
 8028b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028b34:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8028b38:	d602      	bvs.n	8028b40 <__math_invalidf+0x1c>
 8028b3a:	2021      	movs	r0, #33	; 0x21
 8028b3c:	f7ff bfb8 	b.w	8028ab0 <with_errnof>
 8028b40:	4770      	bx	lr
	...

08028b44 <__errno>:
 8028b44:	4b01      	ldr	r3, [pc, #4]	; (8028b4c <__errno+0x8>)
 8028b46:	6818      	ldr	r0, [r3, #0]
 8028b48:	4770      	bx	lr
 8028b4a:	bf00      	nop
 8028b4c:	20007788 	.word	0x20007788

08028b50 <_close>:
 8028b50:	4b02      	ldr	r3, [pc, #8]	; (8028b5c <_close+0xc>)
 8028b52:	2258      	movs	r2, #88	; 0x58
 8028b54:	601a      	str	r2, [r3, #0]
 8028b56:	f04f 30ff 	mov.w	r0, #4294967295
 8028b5a:	4770      	bx	lr
 8028b5c:	2000a510 	.word	0x2000a510

08028b60 <_fstat>:
 8028b60:	4b02      	ldr	r3, [pc, #8]	; (8028b6c <_fstat+0xc>)
 8028b62:	2258      	movs	r2, #88	; 0x58
 8028b64:	601a      	str	r2, [r3, #0]
 8028b66:	f04f 30ff 	mov.w	r0, #4294967295
 8028b6a:	4770      	bx	lr
 8028b6c:	2000a510 	.word	0x2000a510

08028b70 <_getpid>:
 8028b70:	4b02      	ldr	r3, [pc, #8]	; (8028b7c <_getpid+0xc>)
 8028b72:	2258      	movs	r2, #88	; 0x58
 8028b74:	601a      	str	r2, [r3, #0]
 8028b76:	f04f 30ff 	mov.w	r0, #4294967295
 8028b7a:	4770      	bx	lr
 8028b7c:	2000a510 	.word	0x2000a510

08028b80 <_isatty>:
 8028b80:	4b02      	ldr	r3, [pc, #8]	; (8028b8c <_isatty+0xc>)
 8028b82:	2258      	movs	r2, #88	; 0x58
 8028b84:	601a      	str	r2, [r3, #0]
 8028b86:	2000      	movs	r0, #0
 8028b88:	4770      	bx	lr
 8028b8a:	bf00      	nop
 8028b8c:	2000a510 	.word	0x2000a510

08028b90 <_kill>:
 8028b90:	4b02      	ldr	r3, [pc, #8]	; (8028b9c <_kill+0xc>)
 8028b92:	2258      	movs	r2, #88	; 0x58
 8028b94:	601a      	str	r2, [r3, #0]
 8028b96:	f04f 30ff 	mov.w	r0, #4294967295
 8028b9a:	4770      	bx	lr
 8028b9c:	2000a510 	.word	0x2000a510

08028ba0 <_lseek>:
 8028ba0:	4b02      	ldr	r3, [pc, #8]	; (8028bac <_lseek+0xc>)
 8028ba2:	2258      	movs	r2, #88	; 0x58
 8028ba4:	601a      	str	r2, [r3, #0]
 8028ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8028baa:	4770      	bx	lr
 8028bac:	2000a510 	.word	0x2000a510

08028bb0 <_read>:
 8028bb0:	4b02      	ldr	r3, [pc, #8]	; (8028bbc <_read+0xc>)
 8028bb2:	2258      	movs	r2, #88	; 0x58
 8028bb4:	601a      	str	r2, [r3, #0]
 8028bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8028bba:	4770      	bx	lr
 8028bbc:	2000a510 	.word	0x2000a510

08028bc0 <_sbrk>:
 8028bc0:	4a04      	ldr	r2, [pc, #16]	; (8028bd4 <_sbrk+0x14>)
 8028bc2:	6811      	ldr	r1, [r2, #0]
 8028bc4:	4603      	mov	r3, r0
 8028bc6:	b909      	cbnz	r1, 8028bcc <_sbrk+0xc>
 8028bc8:	4903      	ldr	r1, [pc, #12]	; (8028bd8 <_sbrk+0x18>)
 8028bca:	6011      	str	r1, [r2, #0]
 8028bcc:	6810      	ldr	r0, [r2, #0]
 8028bce:	4403      	add	r3, r0
 8028bd0:	6013      	str	r3, [r2, #0]
 8028bd2:	4770      	bx	lr
 8028bd4:	2000a518 	.word	0x2000a518
 8028bd8:	2000a520 	.word	0x2000a520

08028bdc <_write>:
 8028bdc:	4b02      	ldr	r3, [pc, #8]	; (8028be8 <_write+0xc>)
 8028bde:	2258      	movs	r2, #88	; 0x58
 8028be0:	601a      	str	r2, [r3, #0]
 8028be2:	f04f 30ff 	mov.w	r0, #4294967295
 8028be6:	4770      	bx	lr
 8028be8:	2000a510 	.word	0x2000a510

08028bec <_exit>:
 8028bec:	e7fe      	b.n	8028bec <_exit>
	...

08028bf0 <_init>:
 8028bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028bf2:	bf00      	nop
 8028bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028bf6:	bc08      	pop	{r3}
 8028bf8:	469e      	mov	lr, r3
 8028bfa:	4770      	bx	lr

08028bfc <_fini>:
 8028bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028bfe:	bf00      	nop
 8028c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028c02:	bc08      	pop	{r3}
 8028c04:	469e      	mov	lr, r3
 8028c06:	4770      	bx	lr
